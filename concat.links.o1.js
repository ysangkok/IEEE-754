try {
  this["Module"] = Module;
} catch (e) {
  this["Module"] = Module = {};
}

var ENVIRONMENT_IS_NODE = typeof process === "object";

var ENVIRONMENT_IS_WEB = typeof window === "object";

var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  Module["print"] = (function(x) {
    process["stdout"].write(x + "\n");
  });
  Module["printErr"] = (function(x) {
    process["stderr"].write(x + "\n");
  });
  var nodeFS = require("fs");
  var nodePath = require("path");
  Module["read"] = (function(filename) {
    filename = nodePath["normalize"](filename);
    var ret = nodeFS["readFileSync"](filename).toString();
    if (!ret && filename != nodePath["resolve"](filename)) {
      filename = path.join(__dirname, "..", "src", filename);
      ret = nodeFS["readFileSync"](filename).toString();
    }
    return ret;
  });
  Module["load"] = (function(f) {
    globalEval(read(f));
  });
  if (!Module["arguments"]) {
    Module["arguments"] = process["argv"].slice(2);
  }
} else if (ENVIRONMENT_IS_SHELL) {
  Module["print"] = print;
  if (typeof printErr != "undefined") Module["printErr"] = printErr;
  if (typeof read != "undefined") {
    Module["read"] = read;
  } else {
    Module["read"] = (function(f) {
      snarf(f);
    });
  }
  if (!Module["arguments"]) {
    if (typeof scriptArgs != "undefined") {
      Module["arguments"] = scriptArgs;
    } else if (typeof arguments != "undefined") {
      Module["arguments"] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WEB) {
  if (!Module["print"]) {
    Module["print"] = (function(x) {
      console.log(x);
    });
  }
  if (!Module["printErr"]) {
    Module["printErr"] = (function(x) {
      console.log(x);
    });
  }
  Module["read"] = (function(url) {
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    xhr.send(null);
    return xhr.responseText;
  });
  if (!Module["arguments"]) {
    if (typeof arguments != "undefined") {
      Module["arguments"] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WORKER) {
  Module["load"] = importScripts;
} else {
  throw "Unknown runtime environment. Where are we?";
}

function globalEval(x) {
  eval.call(null, x);
}

if (!Module["load"] == "undefined" && Module["read"]) {
  Module["load"] = (function(f) {
    globalEval(Module["read"](f));
  });
}

if (!Module["print"]) {
  Module["print"] = (function() {});
}

if (!Module["printErr"]) {
  Module["printErr"] = Module["print"];
}

if (!Module["arguments"]) {
  Module["arguments"] = [];
}

Module.print = Module["print"];

Module.printErr = Module["printErr"];

if (!Module["preRun"]) Module["preRun"] = [];

if (!Module["postRun"]) Module["postRun"] = [];

var Runtime = {
  stackSave: (function() {
    return STACKTOP;
  }),
  stackRestore: (function(stackTop) {
    STACKTOP = stackTop;
  }),
  forceAlign: (function(target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target / quantum) * quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return "((((" + target + ")+" + (quantum - 1) + ")>>" + logg + ")<<" + logg + ")";
    }
    return "Math.ceil((" + target + ")/" + quantum + ")*" + quantum;
  }),
  isNumberType: (function(type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  }),
  isPointerType: function isPointerType(type) {
    return type[type.length - 1] == "*";
  },
  isStructType: function isStructType(type) {
    if (isPointerType(type)) return false;
    if (/^\[\d+\ x\ (.*)\]/.test(type)) return true;
    if (/<?{ ?[^}]* ?}>?/.test(type)) return true;
    return type[0] == "%";
  },
  INT_TYPES: {
    "i1": 0,
    "i8": 0,
    "i16": 0,
    "i32": 0,
    "i64": 0
  },
  FLOAT_TYPES: {
    "float": 0,
    "double": 0
  },
  bitshift64: (function(low, high, op, bits) {
    var ander = Math.pow(2, bits) - 1;
    if (bits < 32) {
      switch (op) {
       case "shl":
        return [ low << bits, high << bits | (low & ander << 32 - bits) >>> 32 - bits ];
       case "ashr":
        return [ (low >>> bits | (high & ander) << 32 - bits) >> 0 >>> 0, high >> bits >>> 0 ];
       case "lshr":
        return [ (low >>> bits | (high & ander) << 32 - bits) >>> 0, high >>> bits ];
      }
    } else if (bits == 32) {
      switch (op) {
       case "shl":
        return [ 0, low ];
       case "ashr":
        return [ high, (high | 0) < 0 ? ander : 0 ];
       case "lshr":
        return [ high, 0 ];
      }
    } else {
      switch (op) {
       case "shl":
        return [ 0, low << bits - 32 ];
       case "ashr":
        return [ high >> bits - 32 >>> 0, (high | 0) < 0 ? ander : 0 ];
       case "lshr":
        return [ high >>> bits - 32, 0 ];
      }
    }
    abort("unknown bitshift64 op: " + [ value, op, bits ]);
  }),
  or64: (function(x, y) {
    var l = x | 0 | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  and64: (function(x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  xor64: (function(x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  getNativeTypeSize: (function(type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      "%i1": 1,
      "%i8": 1,
      "%i16": 2,
      "%i32": 4,
      "%i64": 8,
      "%float": 4,
      "%double": 8
    }["%" + type];
    if (!size) {
      if (type[type.length - 1] == "*") {
        size = Runtime.QUANTUM_SIZE;
      } else if (type[0] == "i") {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits / 8;
      }
    }
    return size;
  }),
  getNativeFieldSize: (function(type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  }),
  dedup: function dedup(items, ident) {
    var seen = {};
    if (ident) {
      return items.filter((function(item) {
        if (seen[item[ident]]) return false;
        seen[item[ident]] = true;
        return true;
      }));
    } else {
      return items.filter((function(item) {
        if (seen[item]) return false;
        seen[item] = true;
        return true;
      }));
    }
  },
  set: function set() {
    var args = typeof arguments[0] === "object" ? arguments[0] : arguments;
    var ret = {};
    for (var i = 0; i < args.length; i++) {
      ret[args[i]] = 0;
    }
    return ret;
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map((function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field);
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw "Unclear type in struct: " + field + ", in " + type.name_ + " :: " + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize);
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr - prev);
      }
      prev = curr;
      return curr;
    }));
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = type.flatFactor != 1;
    return type.flatIndexes;
  },
  generateStructInfo: (function(struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === "undefined" ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr("Number of named fields must match the type for " + typeName + ": possibly duplicate struct names. Cannot return structInfo");
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = {
        fields: struct.map((function(item) {
          return item[0];
        }))
      };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach((function(item, i) {
        if (typeof item === "string") {
          ret[item] = alignment[i] + offset;
        } else {
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      }));
    } else {
      struct.forEach((function(item, i) {
        ret[item[1]] = alignment[i];
      }));
    }
    return ret;
  }),
  addFunction: (function(func) {
    var ret = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(func);
    FUNCTION_TABLE.push(0);
    return ret;
  }),
  warnOnce: (function(text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  }),
  funcWrappers: {},
  getFuncWrapper: (function(func) {
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = (function() {
        FUNCTION_TABLE[func].apply(null, arguments);
      });
    }
    return Runtime.funcWrappers[func];
  }),
  UTF8Processor: (function() {
    var buffer = [];
    var needed = 0;
    this.processCChar = (function(code) {
      code = code & 255;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return "";
      }
      if (needed > 0) return "";
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else {
        ret = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
      buffer.length = 0;
      return ret;
    });
    this.processJSString = (function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    });
  }),
  stackAlloc: function stackAlloc(size) {
    var ret = STACKTOP;
    STACKTOP += size;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    return ret;
  },
  staticAlloc: function staticAlloc(size) {
    var ret = STATICTOP;
    STATICTOP += size;
    STATICTOP = STATICTOP + 3 >> 2 << 2;
    if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();
    return ret;
  },
  alignMemory: function alignMemory(size, quantum) {
    var ret = size = Math.ceil(size / (quantum ? quantum : 4)) * (quantum ? quantum : 4);
    return ret;
  },
  makeBigInt: function makeBigInt(low, high, unsigned) {
    var ret = unsigned ? (low >>> 0) + (high >>> 0) * 4294967296 : (low >>> 0) + (high | 0) * 4294967296;
    return ret;
  },
  QUANTUM_SIZE: 4,
  __dummy__: 0
};

var CorrectionsMonitor = {
  MAX_ALLOWED: 0,
  corrections: 0,
  sigs: {},
  note: (function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort("\n\nToo many corrections!");
    }
  }),
  print: (function() {})
};

var __THREW__ = false;

var ABORT = false;

var undef = 0;

var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;

var tempI64, tempI64b;

function abort(text) {
  Module.print(text + ":\n" + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text);
  }
}

var globalScope = this;

function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == "string") {
      if (value === null || value === undefined || value === 0) return 0;
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length + 1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == "array") {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == "string") {
      return Pointer_stringify(value);
    }
    assert(type != "array");
    return value;
  }
  try {
    var func = eval("_" + ident);
  } catch (e) {
    try {
      func = globalScope["Module"]["_" + ident];
    } catch (e) {}
  }
  assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
  var i = 0;
  var cArgs = args ? args.map((function(arg) {
    return toC(arg, argTypes[i++]);
  })) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

Module["ccall"] = ccall;

function cwrap(ident, returnType, argTypes) {
  return (function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  });
}

Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || "i8";
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    HEAP8[ptr] = value;
    break;
   case "i8":
    HEAP8[ptr] = value;
    break;
   case "i16":
    HEAP16[ptr >> 1] = value;
    break;
   case "i32":
    HEAP32[ptr >> 2] = value;
    break;
   case "i64":
    HEAP32[ptr >> 2] = value;
    break;
   case "float":
    HEAPF32[ptr >> 2] = value;
    break;
   case "double":
    tempDoubleF64[0] = value, HEAP32[ptr >> 2] = tempDoubleI32[0], HEAP32[ptr + 4 >> 2] = tempDoubleI32[1];
    break;
   default:
    abort("invalid type for setValue: " + type);
  }
}

Module["setValue"] = setValue;

function getValue(ptr, type, noSafe) {
  type = type || "i8";
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    return HEAP8[ptr];
   case "i8":
    return HEAP8[ptr];
   case "i16":
    return HEAP16[ptr >> 1];
   case "i32":
    return HEAP32[ptr >> 2];
   case "i64":
    return HEAP32[ptr >> 2];
   case "float":
    return HEAPF32[ptr >> 2];
   case "double":
    return tempDoubleI32[0] = HEAP32[ptr >> 2], tempDoubleI32[1] = HEAP32[ptr + 4 >> 2], tempDoubleF64[0];
   default:
    abort("invalid type for setValue: " + type);
  }
  return null;
}

Module["getValue"] = getValue;

var ALLOC_NORMAL = 0;

var ALLOC_STACK = 1;

var ALLOC_STATIC = 2;

Module["ALLOC_NORMAL"] = ALLOC_NORMAL;

Module["ALLOC_STACK"] = ALLOC_STACK;

Module["ALLOC_STATIC"] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === "number") {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === "string" ? types : null;
  var ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === "function") {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == "i64") type = "i32";
    setValue(ret + i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }
  return ret;
}

Module["allocate"] = allocate;

function Pointer_stringify(ptr, length) {
  var utf8 = new Runtime.UTF8Processor;
  var nullTerminated = typeof length == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[ptr + i];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}

Module["Pointer_stringify"] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}

Module["Array_stringify"] = Array_stringify;

var FUNCTION_TABLE;

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  return x + 4095 >> 12 << 12;
}

var HEAP;

var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;

var STATICTOP;

function enlargeMemory() {
  while (TOTAL_MEMORY <= STATICTOP) {
    TOTAL_MEMORY = alignMemoryPage(2 * TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;

var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 10485760;

var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152;

assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "Cannot fallback to non-typed array case: Code is too specialized");

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);

HEAP16 = new Int16Array(buffer);

HEAP32 = new Int32Array(buffer);

HEAPU8 = new Uint8Array(buffer);

HEAPU16 = new Uint16Array(buffer);

HEAPU32 = new Uint32Array(buffer);

HEAPF32 = new Float32Array(buffer);

HEAPF64 = new Float64Array(buffer);

HEAP32[0] = 255;

assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");

var base = intArrayFromString("(null)");

STATICTOP = base.length;

for (var i = 0; i < base.length; i++) {
  HEAP8[i] = base[i];
}

Module["HEAP"] = HEAP;

Module["HEAP8"] = HEAP8;

Module["HEAP16"] = HEAP16;

Module["HEAP32"] = HEAP32;

Module["HEAPU8"] = HEAPU8;

Module["HEAPU16"] = HEAPU16;

Module["HEAPU32"] = HEAPU32;

Module["HEAPF32"] = HEAPF32;

Module["HEAPF64"] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);

var tempDoubleI8 = HEAP8.subarray(tempDoublePtr);

var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);

var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);

var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);

function copyTempFloat(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr + 1];
  tempDoubleI8[2] = HEAP8[ptr + 2];
  tempDoubleI8[3] = HEAP8[ptr + 3];
}

function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr + 1];
  tempDoubleI8[2] = HEAP8[ptr + 2];
  tempDoubleI8[3] = HEAP8[ptr + 3];
  tempDoubleI8[4] = HEAP8[ptr + 4];
  tempDoubleI8[5] = HEAP8[ptr + 5];
  tempDoubleI8[6] = HEAP8[ptr + 6];
  tempDoubleI8[7] = HEAP8[ptr + 7];
}

STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

function callRuntimeCallbacks(callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === "number") {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = [];

var __ATMAIN__ = [];

var __ATEXIT__ = [];

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  CorrectionsMonitor.print();
}

function String_len(ptr) {
  var i = 0;
  while (HEAP8[ptr + i]) i++;
  return i;
}

Module["String_len"] = String_len;

function intArrayFromString(stringy, dontAddNull, length) {
  var ret = (new Runtime.UTF8Processor).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}

Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join("");
}

Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[buffer + i] = chr;
    i = i + 1;
  }
}

Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[buffer + i] = array[i];
  }
}

Module["writeArrayToMemory"] = writeArrayToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}

function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
  if (value >= half && (bits <= 32 || value > half)) {
    value = -2 * half + value;
  }
  return value;
}

var runDependencies = 0;

var runDependencyTracking = {};

var calledRun = false;

function addRunDependency(id) {
  runDependencies++;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
  }
}

Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  }
  if (runDependencies == 0 && !calledRun) run();
}

Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {};

Module["preloadedAudios"] = {};

function _repeat_char($c, $n) {
  var $_n = $n >>> 0 > 5e3 ? 5e3 : $n;
  _memset(_repeat_char_buf | 0, $c, $_n, 1);
  HEAP8[_repeat_char_buf + $_n | 0] = 0;
  return _repeat_char_buf | 0;
}

function _substr1($x) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (HEAP8[$x] << 24 >> 24 == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = $x + 1 | 0;
    var $5 = _strlen($x);
    var $6 = $5 + 1 | 0;
    _llvm_memmove_p0i8_p0i8_i32($x, $4, $6, 1, 0);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _prepend($s, $t) {
  var $1 = _strlen($t);
  var $2 = $s + $1 | 0;
  var $3 = _strlen($s);
  var $4 = $3 + 1 | 0;
  _llvm_memmove_p0i8_p0i8_i32($2, $s, $4, 1, 0);
  _memcpy($s, $t, $1, 1);
  return;
}

function _free_dfs() {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAP32[_users >> 2];
    if (($1 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $tmp_03_in_in = $1 + 16 | 0;
    var $current_user_04 = $1;
    __label__ = 4;
    break;
   case 4:
    var $current_user_04;
    var $tmp_03_in_in;
    var $tmp_03_in = HEAP32[$tmp_03_in_in >> 2];
    var $tmp_03 = $tmp_03_in;
    var $5 = $current_user_04 + 8 | 0;
    var $6 = $current_user_04 + 12 | 0;
    var $7 = HEAP32[$6 >> 2];
    if (($7 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    if ((HEAP32[$current_user_04 + 16 >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $19 = HEAP32[HEAP32[HEAP32[_users >> 2] + 8 >> 2] >> 2];
    _free($19);
    var $23 = HEAP32[HEAP32[_users >> 2] + 8 >> 2];
    _free($23);
    HEAP32[_users >> 2] = 0;
    __label__ = 21;
    break;
   case 7:
    var $26 = HEAP32[HEAP32[_users >> 2] + 8 >> 2];
    var $27 = $26 + 16 | 0;
    var $31 = HEAP32[$26 + 20 >> 2];
    if (($current_user_04 | 0) == (HEAP32[$27 >> 2] + -$31 | 0)) {
      __label__ = 8;
      break;
    } else {
      var $39 = $7;
      __label__ = 9;
      break;
    }
   case 8:
    var $38 = $7 + $31 | 0;
    HEAP32[$27 >> 2] = $38;
    var $39 = HEAP32[$6 >> 2];
    __label__ = 9;
    break;
   case 9:
    var $39;
    var $41 = $current_user_04 + 16 | 0;
    var $42 = HEAP32[$41 >> 2];
    if (($39 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $50 = $39 + (HEAP32[HEAP32[HEAP32[_users >> 2] + 8 >> 2] + 20 >> 2] + 8) | 0;
    HEAP32[$50 >> 2] = $42;
    __label__ = 12;
    break;
   case 11:
    var $52 = $42;
    HEAP32[_users >> 2] = $52;
    __label__ = 12;
    break;
   case 12:
    var $54 = HEAP32[$41 >> 2];
    if (($54 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $57 = HEAP32[$6 >> 2];
    var $64 = $54 + (HEAP32[HEAP32[HEAP32[_users >> 2] + 8 >> 2] + 20 >> 2] + 4) | 0;
    HEAP32[$64 >> 2] = $57;
    __label__ = 14;
    break;
   case 14:
    var $69 = HEAP32[HEAP32[_users >> 2] + 8 >> 2];
    var $73 = HEAP32[$69 + 4 >> 2] - 1 & HEAP32[$current_user_04 + 36 >> 2];
    var $76 = HEAP32[$69 >> 2] + $73 * 12 + 4 | 0;
    var $78 = HEAP32[$76 >> 2] - 1 | 0;
    HEAP32[$76 >> 2] = $78;
    var $84 = HEAP32[HEAP32[HEAP32[_users >> 2] + 8 >> 2] >> 2] + $73 * 12 | 0;
    if ((HEAP32[$84 >> 2] | 0) == ($5 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $89 = HEAP32[$current_user_04 + 24 >> 2];
    HEAP32[$84 >> 2] = $89;
    __label__ = 16;
    break;
   case 16:
    var $91 = $current_user_04 + 20 | 0;
    var $92 = HEAP32[$91 >> 2];
    var $_pre7 = $current_user_04 + 24 | 0;
    if (($92 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $95 = HEAP32[$_pre7 >> 2];
    var $96 = $92 + 16 | 0;
    HEAP32[$96 >> 2] = $95;
    __label__ = 18;
    break;
   case 18:
    var $97 = HEAP32[$_pre7 >> 2];
    if (($97 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $100 = HEAP32[$91 >> 2];
    var $101 = $97 + 12 | 0;
    HEAP32[$101 >> 2] = $100;
    __label__ = 20;
    break;
   case 20:
    var $105 = HEAP32[HEAP32[_users >> 2] + 8 >> 2] + 12 | 0;
    var $107 = HEAP32[$105 >> 2] - 1 | 0;
    HEAP32[$105 >> 2] = $107;
    __label__ = 21;
    break;
   case 21:
    var $109 = $current_user_04 + 4 | 0;
    var $111 = HEAP32[$109 >> 2] | 0;
    ___gmpf_clear($111);
    var $113 = HEAP32[$109 >> 2];
    _free($113);
    _free($current_user_04);
    if (($tmp_03_in | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $tmp_03_in_in = $tmp_03_in + 16 | 0;
    var $current_user_04 = $tmp_03;
    __label__ = 4;
    break;
   case 23:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_free_dfs["X"] = 1;

function _lazyget($key) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __stackBase__;
    HEAP32[$1 >> 2] = $key;
    var $2 = HEAPU32[_users >> 2];
    if (($2 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = $1;
    var $18 = ($key & -16777216) + 17973517 + ($key << 8 >> 8 & -65536) + ($key << 24 >> 24) + ($key << 16 >> 16 & -256) ^ 522093;
    var $21 = -1622558010 - $18 ^ $18 << 8;
    var $25 = -17973517 - $18 - $21 ^ $21 >>> 13;
    var $29 = $18 - $21 - $25 ^ $25 >>> 12;
    var $33 = $21 - $25 - $29 ^ $29 << 16;
    var $37 = $25 - $29 - $33 ^ $33 >>> 5;
    var $41 = $29 - $33 - $37 ^ $37 >>> 3;
    var $45 = $33 - $37 - $41 ^ $41 << 10;
    var $51 = HEAPU32[$2 + 8 >> 2];
    var $59 = HEAP32[HEAP32[$51 >> 2] + (($37 - $41 - $45 ^ $45 >>> 15) & HEAP32[$51 + 4 >> 2] - 1) * 12 >> 2];
    if (($59 | 0) == 0) {
      var $s_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $s_0 = $59 + -HEAP32[$51 + 20 >> 2] | 0;
    __label__ = 5;
    break;
   case 5:
    var $s_0;
    if (($s_0 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ((HEAP32[$s_0 + 32 >> 2] | 0) == 4) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $75 = HEAP32[$s_0 + 28 >> 2];
    var $76 = _memcmp($75, $6, 4);
    if (($76 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $80 = HEAP32[$s_0 + 24 >> 2];
    if (($80 | 0) == 0) {
      var $s_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $s_0 = $80 + -HEAP32[$51 + 20 >> 2] | 0;
    __label__ = 5;
    break;
   case 10:
    var $89 = _malloc(16);
    var $90 = $89;
    var $91 = $89;
    ___gmpf_init($91);
    var $92 = _malloc(40);
    HEAP32[$92 >> 2] = $key;
    HEAP32[$92 + 4 >> 2] = $90;
    var $96 = $92 + 8 | 0;
    var $97 = $96;
    HEAP32[$92 + 16 >> 2] = 0;
    HEAP32[$92 + 28 >> 2] = $92;
    HEAP32[$92 + 32 >> 2] = 4;
    var $104 = HEAP32[_users >> 2];
    if (($104 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 11:
    HEAP32[_users >> 2] = $92;
    HEAP32[$92 + 12 >> 2] = 0;
    var $110 = _malloc(44);
    var $113 = HEAP32[_users >> 2] + 8 | 0;
    HEAP32[$113 >> 2] = $110;
    var $114 = HEAP32[_users >> 2];
    var $116 = HEAP32[$114 + 8 >> 2];
    if (($116 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    _exit(-1);
    throw "Reached an unreachable!";
   case 13:
    var $120 = $116;
    for (var $$dest = $120 >> 2, $$stop = $$dest + 11; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $121 = $114 + 8 | 0;
    var $124 = HEAP32[$121 >> 2] + 16 | 0;
    HEAP32[$124 >> 2] = $121;
    var $128 = HEAP32[HEAP32[_users >> 2] + 8 >> 2] + 4 | 0;
    HEAP32[$128 >> 2] = 32;
    var $132 = HEAP32[HEAP32[_users >> 2] + 8 >> 2] + 8 | 0;
    HEAP32[$132 >> 2] = 5;
    var $136 = HEAP32[HEAP32[_users >> 2] + 8 >> 2] + 20 | 0;
    HEAP32[$136 >> 2] = 8;
    var $137 = _malloc(384);
    var $142 = HEAP32[HEAP32[_users >> 2] + 8 >> 2] | 0;
    HEAP32[$142 >> 2] = $137;
    var $144 = HEAP32[_users >> 2] + 8 | 0;
    var $147 = HEAP32[HEAP32[$144 >> 2] >> 2];
    if (($147 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    _exit(-1);
    throw "Reached an unreachable!";
   case 15:
    var $151 = $147;
    for (var $$dest = $151 >> 2, $$stop = $$dest + 96; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $153 = HEAP32[$144 >> 2] + 40 | 0;
    HEAP32[$153 >> 2] = -1609490463;
    __label__ = 17;
    break;
   case 16:
    var $159 = HEAP32[HEAP32[$104 + 8 >> 2] + 16 >> 2] + 8 | 0;
    HEAP32[$159 >> 2] = $92;
    var $162 = HEAP32[HEAP32[_users >> 2] + 8 >> 2];
    var $169 = HEAP32[$162 + 16 >> 2] + -HEAP32[$162 + 20 >> 2] | 0;
    HEAP32[$92 + 12 >> 2] = $169;
    var $175 = HEAP32[HEAP32[_users >> 2] + 8 >> 2] + 16 | 0;
    HEAP32[$175 >> 2] = $97;
    __label__ = 17;
    break;
   case 17:
    var $180 = HEAP32[HEAP32[_users >> 2] + 8 >> 2] + 12 | 0;
    var $182 = HEAP32[$180 >> 2] + 1 | 0;
    HEAP32[$180 >> 2] = $182;
    var $185 = HEAP32[HEAP32[_users >> 2] + 8 >> 2];
    var $186 = $96;
    HEAP32[$186 >> 2] = $185;
    var $207 = (HEAP8[$92 + 2 | 0] << 24 >> 24 << 16) + ((HEAPU8[$92 + 3 | 0] & 255) << 24) + 17973517 + (HEAP8[$92] << 24 >> 24) + (HEAP8[$92 + 1 | 0] << 24 >> 24 << 8) ^ 522093;
    var $210 = -1622558010 - $207 ^ $207 << 8;
    var $214 = -17973517 - $207 - $210 ^ $210 >>> 13;
    var $218 = $207 - $210 - $214 ^ $214 >>> 12;
    var $222 = $210 - $214 - $218 ^ $218 << 16;
    var $226 = $214 - $218 - $222 ^ $222 >>> 5;
    var $230 = $218 - $222 - $226 ^ $226 >>> 3;
    var $234 = $222 - $226 - $230 ^ $230 << 10;
    var $238 = $226 - $230 - $234 ^ $234 >>> 15;
    HEAP32[$92 + 36 >> 2] = $238;
    var $241 = HEAPU32[HEAP32[_users >> 2] + 8 >> 2];
    var $245 = $238 & HEAP32[$241 + 4 >> 2] - 1;
    var $248 = HEAP32[$241 >> 2] + $245 * 12 + 4 | 0;
    var $250 = HEAP32[$248 >> 2] + 1 | 0;
    HEAP32[$248 >> 2] = $250;
    var $257 = HEAP32[HEAP32[HEAP32[HEAP32[_users >> 2] + 8 >> 2] >> 2] + $245 * 12 >> 2];
    HEAP32[$92 + 24 >> 2] = $257;
    HEAP32[$92 + 20 >> 2] = 0;
    var $266 = HEAP32[HEAP32[HEAP32[_users >> 2] + 8 >> 2] >> 2];
    var $268 = HEAP32[$266 + $245 * 12 >> 2];
    if (($268 | 0) == 0) {
      var $273 = $266;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $271 = $268 + 12 | 0;
    HEAP32[$271 >> 2] = $97;
    var $273 = HEAP32[HEAP32[HEAP32[_users >> 2] + 8 >> 2] >> 2];
    __label__ = 19;
    break;
   case 19:
    var $273;
    var $274 = $273 + $245 * 12 | 0;
    HEAP32[$274 >> 2] = $97;
    var $279 = HEAP32[HEAP32[HEAP32[_users >> 2] + 8 >> 2] >> 2];
    var $281 = HEAPU32[$279 + $245 * 12 + 4 >> 2];
    var $283 = HEAP32[$279 + $245 * 12 + 8 >> 2];
    var $284 = (i64Math.multiply($283, 0, 10, 0), i64Math.result[0]);
    if ($281 >>> 0 < ($284 + 10 | 0) >>> 0) {
      var $valptr_0 = $90;
      __label__ = 36;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $288 = HEAPU32[$186 >> 2];
    if ((HEAP32[$288 + 36 >> 2] | 0) == 1) {
      var $valptr_0 = $90;
      __label__ = 36;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $294 = HEAP32[$288 + 4 >> 2];
    var $295 = (i64Math.multiply($294, 0, 24, 0), i64Math.result[0]);
    var $296 = _malloc($295);
    var $297 = $296;
    if (($296 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    _exit(-1);
    throw "Reached an unreachable!";
   case 23:
    var $303 = HEAP32[HEAP32[$186 >> 2] + 4 >> 2];
    var $304 = (i64Math.multiply($303, 0, 24, 0), i64Math.result[0]);
    _memset($296, 0, $304, 4);
    var $305 = HEAPU32[$186 >> 2];
    var $307 = HEAPU32[$305 + 12 >> 2];
    var $319 = (((HEAP32[$305 + 4 >> 2] << 1) - 1 & $307 | 0) != 0 & 1) + ($307 >>> ((HEAP32[$305 + 8 >> 2] + 1 | 0) >>> 0)) | 0;
    HEAP32[$305 + 24 >> 2] = $319;
    var $322 = HEAP32[$186 >> 2] + 28 | 0;
    HEAP32[$322 >> 2] = 0;
    var $323 = HEAPU32[$186 >> 2];
    var $328 = HEAPU32[$323 >> 2];
    if ((HEAP32[$323 + 4 >> 2] | 0) == 0) {
      var $_lcssa = $328;
      __label__ = 31;
      break;
    } else {
      var $_he_bkt_i_019 = 0;
      var $330 = $328;
      var $329 = $323;
      __label__ = 24;
      break;
    }
   case 24:
    var $329;
    var $330;
    var $_he_bkt_i_019;
    var $332 = HEAP32[$330 + $_he_bkt_i_019 * 12 >> 2];
    if (($332 | 0) == 0) {
      var $371 = $329;
      __label__ = 30;
      break;
    } else {
      var $_he_thh_018 = $332;
      var $334 = $329;
      __label__ = 25;
      break;
    }
   case 25:
    var $334;
    var $_he_thh_018;
    var $335 = $_he_thh_018 + 16 | 0;
    var $336 = HEAPU32[$335 >> 2];
    var $343 = (HEAP32[$334 + 4 >> 2] << 1) - 1 & HEAP32[$_he_thh_018 + 28 >> 2];
    var $344 = $297 + $343 * 12 + 4 | 0;
    var $346 = HEAP32[$344 >> 2] + 1 | 0;
    HEAP32[$344 >> 2] = $346;
    var $347 = HEAPU32[$186 >> 2];
    if ($346 >>> 0 > HEAPU32[$347 + 24 >> 2] >>> 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $352 = $347 + 28 | 0;
    var $354 = HEAP32[$352 >> 2] + 1 | 0;
    HEAP32[$352 >> 2] = $354;
    var $355 = HEAPU32[$344 >> 2];
    var $358 = HEAPU32[HEAP32[$186 >> 2] + 24 >> 2];
    var $359 = Math.floor(($355 >>> 0) / ($358 >>> 0));
    var $360 = $297 + $343 * 12 + 8 | 0;
    HEAP32[$360 >> 2] = $359;
    __label__ = 27;
    break;
   case 27:
    HEAP32[$_he_thh_018 + 12 >> 2] = 0;
    var $363 = $297 + $343 * 12 | 0;
    var $364 = HEAP32[$363 >> 2];
    HEAP32[$335 >> 2] = $364;
    var $365 = HEAP32[$363 >> 2];
    if (($365 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $368 = $365 + 12 | 0;
    HEAP32[$368 >> 2] = $_he_thh_018;
    __label__ = 29;
    break;
   case 29:
    HEAP32[$363 >> 2] = $_he_thh_018;
    var $_pre4 = HEAPU32[$186 >> 2];
    if (($336 | 0) == 0) {
      var $371 = $_pre4;
      __label__ = 30;
      break;
    } else {
      var $_he_thh_018 = $336;
      var $334 = $_pre4;
      __label__ = 25;
      break;
    }
   case 30:
    var $371;
    var $372 = $_he_bkt_i_019 + 1 | 0;
    var $377 = HEAPU32[$371 >> 2];
    if ($372 >>> 0 < HEAPU32[$371 + 4 >> 2] >>> 0) {
      var $_he_bkt_i_019 = $372;
      var $330 = $377;
      var $329 = $371;
      __label__ = 24;
      break;
    } else {
      var $_lcssa = $377;
      __label__ = 31;
      break;
    }
   case 31:
    var $_lcssa;
    _free($_lcssa);
    var $380 = HEAP32[$186 >> 2] + 4 | 0;
    var $382 = HEAP32[$380 >> 2] << 1;
    HEAP32[$380 >> 2] = $382;
    var $384 = HEAP32[$186 >> 2] + 8 | 0;
    var $386 = HEAP32[$384 >> 2] + 1 | 0;
    HEAP32[$384 >> 2] = $386;
    var $388 = HEAP32[$186 >> 2] | 0;
    HEAP32[$388 >> 2] = $297;
    var $389 = HEAPU32[$186 >> 2];
    var $396 = $389 + 32 | 0;
    if (HEAPU32[$389 + 28 >> 2] >>> 0 > HEAPU32[$389 + 12 >> 2] >>> 1 >>> 0) {
      __label__ = 32;
      break;
    } else {
      var $400 = 0;
      __label__ = 33;
      break;
    }
   case 32:
    var $400 = HEAP32[$396 >> 2] + 1 | 0;
    __label__ = 33;
    break;
   case 33:
    var $400;
    HEAP32[$396 >> 2] = $400;
    var $401 = HEAPU32[$186 >> 2];
    if (HEAPU32[$401 + 32 >> 2] >>> 0 > 1) {
      __label__ = 34;
      break;
    } else {
      var $valptr_0 = $90;
      __label__ = 36;
      break;
    }
   case 34:
    HEAP32[$401 + 36 >> 2] = 1;
    var $valptr_0 = $90;
    __label__ = 36;
    break;
   case 35:
    var $valptr_0 = HEAP32[$s_0 + 4 >> 2];
    __label__ = 36;
    break;
   case 36:
    var $valptr_0;
    STACKTOP = __stackBase__;
    return $valptr_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_lazyget["X"] = 1;

function _dtb2($argv1, $argv2, $argv3, $argv4, $argv5) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 5e3;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $di15 = __stackBase__;
    var $di15_sub = $di15 | 0;
    var $tmpcast14 = $di15;
    var $decimal_recurrence = STACKTOP;
    STACKTOP += 5e3;
    var $decimal_fraction11 = STACKTOP;
    STACKTOP += 5e3;
    var $binary_integer13 = STACKTOP;
    STACKTOP += 5e3;
    var $binary_integer13_sub = $binary_integer13 | 0;
    var $tmpcast12 = $binary_integer13;
    var $binary_fraction9 = STACKTOP;
    STACKTOP += 5e3;
    var $decimal_fraction11_sub = $decimal_fraction11 | 0;
    var $binary_fraction9_sub = $binary_fraction9 | 0;
    var $tmpcast = $binary_fraction9;
    var $binary_recurrence = STACKTOP;
    STACKTOP += 5e3;
    var $temp = STACKTOP;
    STACKTOP += 5e3;
    var $result = STACKTOP;
    STACKTOP += 12;
    var $decimal_integer = STACKTOP;
    STACKTOP += 12;
    var $temp_dec = STACKTOP;
    STACKTOP += 12;
    var $intSum = STACKTOP;
    STACKTOP += 12;
    var $df = STACKTOP;
    STACKTOP += 16;
    var $temp_df = STACKTOP;
    STACKTOP += 16;
    var $dr_temp = STACKTOP;
    STACKTOP += 16;
    var $superR = STACKTOP;
    STACKTOP += 16;
    var $powToMul = STACKTOP;
    STACKTOP += 16;
    var $rArr = STACKTOP;
    STACKTOP += 4e3;
    var $poft = STACKTOP;
    STACKTOP += 16;
    var $d = STACKTOP;
    STACKTOP += 16;
    var $e = STACKTOP;
    STACKTOP += 16;
    var $eCompare = STACKTOP;
    STACKTOP += 16;
    var $1 = $binary_integer13;
    _memset($1, 0, 5e3, 2);
    var $2 = $binary_fraction9;
    _memset($2, 0, 5e3, 2);
    var $3 = $binary_recurrence | 0;
    _memset($3, 0, 5e3, 1);
    HEAP8[$3] = 48;
    var $4 = $di15;
    var $5 = _strncpy($4, $argv1, 4999);
    var $6 = _strlen($4);
    if (($6 | 0) == 4999) {
      var $_0 = 0;
      __label__ = 85;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $9 = _atoi($argv2);
    var $10 = $decimal_fraction11;
    var $11 = _strncpy($10, $argv3, 4999);
    var $12 = _strlen($10);
    if (($12 | 0) == 4999) {
      var $_0 = 0;
      __label__ = 85;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $15 = $decimal_recurrence | 0;
    var $16 = _strncpy($15, $argv4, 4999);
    var $17 = _strlen($15);
    if (($17 | 0) == 4999) {
      var $_0 = 0;
      __label__ = 85;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $20 = _atoi($argv5);
    var $21 = $result | 0;
    ___gmpz_init($21);
    if (($9 | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $23 = ($20 | 0) > -1;
    var $decimal_exponent_047 = $9;
    __label__ = 9;
    break;
   case 7:
    if (($9 | 0) < 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 8:
    var $25 = $temp | 0;
    var $decimal_exponent_144 = $9;
    __label__ = 14;
    break;
   case 9:
    var $decimal_exponent_047;
    var $strlenfirst = HEAP8[$10];
    if ($strlenfirst << 24 >> 24 == 0) {
      __label__ = 10;
      break;
    } else {
      var $33 = $strlenfirst;
      __label__ = 13;
      break;
    }
   case 10:
    if ($23) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $30 = _strcpy($10, $15);
    var $33 = HEAP8[$10];
    __label__ = 13;
    break;
   case 12:
    HEAP16[$decimal_fraction11_sub >> 1] = 48;
    var $33 = 48;
    __label__ = 13;
    break;
   case 13:
    var $33;
    var $34 = _strlen($4);
    HEAP8[$tmpcast14 + ($34 + 1) | 0] = 0;
    var $37 = _strlen($4);
    HEAP8[$tmpcast14 + $37 | 0] = $33;
    _substr1($10);
    var $39 = $decimal_exponent_047 - 1 | 0;
    if (($39 | 0) > 0) {
      var $decimal_exponent_047 = $39;
      __label__ = 9;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 14:
    var $decimal_exponent_144;
    if (HEAP8[$4] << 24 >> 24 == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    HEAP16[$di15_sub >> 1] = 48;
    __label__ = 16;
    break;
   case 16:
    var $45 = _strlen($4);
    var $46 = $tmpcast14 + ($45 - 1) | 0;
    var $47 = _strcpy($25, $46);
    var $48 = _strcat($25, $10);
    var $49 = _strcpy($10, $25);
    var $50 = _strlen($4);
    HEAP8[$tmpcast14 + ($50 - 1) | 0] = 0;
    var $53 = $decimal_exponent_144 + 1 | 0;
    if (($53 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $decimal_exponent_144 = $53;
      __label__ = 14;
      break;
    }
   case 17:
    var $54 = $decimal_integer | 0;
    ___gmpz_init($54);
    var $55 = ___gmpz_set_str($54, $4, 10);
    var $56 = ___gmpz_cmp_d($54, 0);
    if (($56 | 0) > 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 18:
    var $58 = $temp_dec | 0;
    __label__ = 19;
    break;
   case 19:
    ___gmpz_init($58);
    ___gmpz_set($58, $54);
    var $60 = ___gmpz_tdiv_q_ui($21, $54, 2);
    ___gmpz_set($54, $21);
    var $61 = ___gmpz_fdiv_r_ui($21, $58, 2);
    var $62 = ___gmpz_cmp_d($21, 1);
    if (($62 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    _prepend($1, STRING_TABLE.__str1 | 0);
    __label__ = 22;
    break;
   case 21:
    _prepend($1, STRING_TABLE._str | 0);
    __label__ = 22;
    break;
   case 22:
    var $66 = ___gmpz_cmp_d($54, 0);
    if (($66 | 0) > 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    if (HEAP8[$1] << 24 >> 24 == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    HEAP16[$binary_integer13_sub >> 1] = 48;
    __label__ = 25;
    break;
   case 25:
    var $71 = _atoi($15);
    if (($71 | 0) > -1) {
      __label__ = 26;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 26:
    var $74 = _strlen($10);
    var $75 = _strlen($15);
    if ($74 >>> 0 < $75 >>> 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $78 = _strcat($10, $15);
    __label__ = 28;
    break;
   case 28:
    if (HEAP8[$10] << 24 >> 24 == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    HEAP16[$decimal_fraction11_sub >> 1] = 48;
    __label__ = 30;
    break;
   case 30:
    var $83 = $intSum | 0;
    ___gmpz_init($83);
    ___gmpf_set_default_prec(2e4);
    var $84 = $df | 0;
    ___gmpf_init($84);
    var $85 = $temp | 0;
    var $86 = _strcpy($85, $10);
    _prepend($85, STRING_TABLE.__str2 | 0);
    var $87 = ___gmpf_set_str($84, $85, 10);
    var $88 = $temp_df | 0;
    ___gmpf_init($88);
    var $89 = $dr_temp | 0;
    ___gmpf_init($89);
    var $90 = $superR | 0;
    ___gmpf_init($90);
    ___gmpf_set($90, $84);
    var $91 = $powToMul | 0;
    ___gmpf_init($91);
    ___gmpf_set_ui($91, 1);
    if (($20 | 0) < 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $93 = $20 + 1 | 0;
    var $i_035 = 0;
    __label__ = 32;
    break;
   case 32:
    var $i_035;
    ___gmpf_mul_ui($91, $91, 10);
    var $95 = $i_035 + 1 | 0;
    if (($95 | 0) == ($93 | 0)) {
      __label__ = 33;
      break;
    } else {
      var $i_035 = $95;
      __label__ = 32;
      break;
    }
   case 33:
    ___gmpf_mul($90, $90, $91);
    var $96 = ___gmpf_get_ui($90);
    var $98 = ($96 + 1 | 0) % 10;
    HEAP32[$rArr >> 2] = $98;
    var $100 = _lazyget(0);
    var $101 = $100 | 0;
    ___gmpf_set($101, $84);
    ___gmpf_add($84, $84, $84);
    var $102 = $poft | 0;
    ___gmpf_init($102);
    var $103 = _strlen($15);
    var $104 = $d | 0;
    ___gmpf_init($104);
    ___gmpf_set_ui($104, 1);
    if (($103 | 0) > 0) {
      var $i1_031 = 0;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $i1_031;
    ___gmpf_div_ui($104, $104, 10);
    var $106 = $i1_031 + 1 | 0;
    if (($106 | 0) == ($103 | 0)) {
      __label__ = 35;
      break;
    } else {
      var $i1_031 = $106;
      __label__ = 34;
      break;
    }
   case 35:
    ___gmpf_set($102, $104);
    var $107 = ($20 | 0) > 0;
    if ($107) {
      var $i2_027 = 0;
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $i2_027;
    ___gmpf_div_ui($102, $102, 10);
    var $108 = $i2_027 + 1 | 0;
    if (($108 | 0) == ($20 | 0)) {
      __label__ = 37;
      break;
    } else {
      var $i2_027 = $108;
      __label__ = 36;
      break;
    }
   case 37:
    var $109 = $e | 0;
    ___gmpf_init($109);
    ___gmpf_set_ui($109, 1);
    if ($107) {
      var $i3_025 = 0;
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    var $i3_025;
    ___gmpf_div_ui($109, $109, 10);
    var $110 = $i3_025 + 1 | 0;
    if (($110 | 0) == ($20 | 0)) {
      __label__ = 39;
      break;
    } else {
      var $i3_025 = $110;
      __label__ = 38;
      break;
    }
   case 39:
    var $111 = $eCompare | 0;
    ___gmpf_init($111);
    ___gmpf_set($111, $109);
    var $112 = ($20 | 0) > -1;
    if ($112) {
      __label__ = 40;
      break;
    } else {
      var $rac_1_ph = 1;
      __label__ = 45;
      break;
    }
   case 40:
    if (($20 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 41:
    var $116 = ___gmpf_cmp($84, $111);
    if (($116 | 0) > -1) {
      __label__ = 42;
      break;
    } else {
      var $rac_1_ph = 1;
      __label__ = 45;
      break;
    }
   case 42:
    ___gmpf_add($84, $84, $102);
    var $rac_1_ph = 1;
    __label__ = 45;
    break;
   case 43:
    ___gmpf_set($90, $84);
    ___gmpf_mul($90, $90, $91);
    var $120 = ___gmpf_get_ui($90);
    var $122 = ($120 + 1 | 0) % 10;
    var $123 = $rArr + 4 | 0;
    HEAP32[$123 >> 2] = $122;
    if (($122 | 0) < ($98 | 0)) {
      __label__ = 44;
      break;
    } else {
      var $rac_1_ph = 2;
      __label__ = 45;
      break;
    }
   case 44:
    HEAP32[$123 >> 2] = $122 + 1 | 0;
    ___gmpf_add($84, $84, $102);
    var $rac_1_ph = 2;
    __label__ = 45;
    break;
   case 45:
    var $rac_1_ph;
    var $127 = ($20 | 0) == 0;
    var $129 = 120 - $binary_fraction9 | 0;
    var $limitOK_0 = 0;
    var $firstOne_0 = 0;
    var $limit_0 = 0;
    var $j_0 = 0;
    var $binary_recurrence_start_0 = -1;
    var $rac_1 = $rac_1_ph;
    var $a_0 = 1;
    __label__ = 46;
    break;
   case 46:
    var $a_0;
    var $rac_1;
    var $binary_recurrence_start_0;
    var $j_0;
    var $limit_0;
    var $firstOne_0;
    var $limitOK_0;
    if (($j_0 | 0) < 17e3) {
      __label__ = 47;
      break;
    } else {
      var $binary_recurrence_start_2 = $binary_recurrence_start_0;
      __label__ = 74;
      break;
    }
   case 47:
    var $132 = ___gmpf_cmp_ui($84, 0);
    if (($132 | 0) > 0 & ($binary_recurrence_start_0 | 0) == -1) {
      __label__ = 48;
      break;
    } else {
      var $binary_recurrence_start_2 = $binary_recurrence_start_0;
      __label__ = 74;
      break;
    }
   case 48:
    ___gmpf_set($89, $84);
    ___gmpf_set($88, $84);
    var $136 = ___gmpf_cmp_ui($88, 1);
    if (($136 | 0) > -1) {
      __label__ = 49;
      break;
    } else {
      var $i4_0 = 0;
      __label__ = 50;
      break;
    }
   case 49:
    ___gmpf_sub_ui($88, $88, 1);
    var $i4_0 = 0;
    __label__ = 50;
    break;
   case 50:
    var $i4_0;
    if (($i4_0 | 0) < ($a_0 | 0)) {
      __label__ = 51;
      break;
    } else {
      var $binary_recurrence_start_1 = -1;
      __label__ = 53;
      break;
    }
   case 51:
    var $141 = _lazyget($i4_0);
    var $142 = $141 | 0;
    var $143 = ___gmpf_eq($88, $142, 112);
    if (($143 | 0) == 0) {
      var $i4_0 = $i4_0 + 1 | 0;
      __label__ = 50;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    var $147 = $tmpcast + $i4_0 | 0;
    var $148 = _strcpy($3, $147);
    var $binary_recurrence_start_1 = $i4_0;
    __label__ = 53;
    break;
   case 53:
    var $binary_recurrence_start_1;
    var $149 = ___gmpf_cmp_ui($84, 1);
    var $150 = ($149 | 0) > -1;
    var $151 = _strlen($2);
    var $153 = $tmpcast + $151 | 0;
    if ($150) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    tempBigInt = 49;
    HEAP8[$153] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$153 + 1] = tempBigInt & 255;
    ___gmpf_sub_ui($84, $84, 1);
    var $155 = _lazyget($a_0);
    var $156 = $155 | 0;
    ___gmpf_set($156, $84);
    __label__ = 56;
    break;
   case 55:
    tempBigInt = 48;
    HEAP8[$153] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$153 + 1] = tempBigInt & 255;
    var $158 = _lazyget($a_0);
    var $159 = $158 | 0;
    ___gmpf_set($159, $84);
    __label__ = 56;
    break;
   case 56:
    var $a_1 = $a_0 + 1 | 0;
    ___gmpf_add($84, $84, $84);
    if ($112) {
      __label__ = 57;
      break;
    } else {
      var $rac_2 = $rac_1;
      __label__ = 65;
      break;
    }
   case 57:
    var $162 = ___gmpf_get_d($84);
    var $163 = $162;
    var $164 = ___gmpf_get_d($111);
    var $165 = $164;
    if ($127) {
      __label__ = 58;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 58:
    var $167 = ___gmpf_cmp($84, $111);
    if (($167 | 0) > -1) {
      __label__ = 59;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 59:
    ___gmpf_add($84, $84, $102);
    var $rac_2 = $rac_1;
    __label__ = 65;
    break;
   case 60:
    if ($163 == $165) {
      __label__ = 61;
      break;
    } else {
      var $rac_2 = $rac_1;
      __label__ = 65;
      break;
    }
   case 61:
    ___gmpf_add($84, $84, $102);
    var $rac_2 = $rac_1;
    __label__ = 65;
    break;
   case 62:
    ___gmpf_set($90, $84);
    ___gmpf_mul($90, $90, $91);
    var $174 = ___gmpf_get_ui($90);
    var $176 = ($174 + 1 | 0) % 10;
    var $177 = $rArr + ($rac_1 << 2) | 0;
    HEAP32[$177 >> 2] = $176;
    if (($176 | 0) < (HEAP32[$rArr + ($rac_1 - 1 << 2) >> 2] | 0)) {
      __label__ = 63;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 63:
    HEAP32[$177 >> 2] = $176 + 1 | 0;
    ___gmpf_add($84, $84, $102);
    __label__ = 64;
    break;
   case 64:
    var $rac_2 = $rac_1 + 1 | 0;
    __label__ = 65;
    break;
   case 65:
    var $rac_2;
    var $187 = ___gmpf_cmp_ui($84, 0);
    if (($187 | 0) == 0) {
      var $binary_recurrence_start_2 = $binary_recurrence_start_1;
      __label__ = 74;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    var $190 = $j_0 + 1 | 0;
    if (($binary_recurrence_start_1 | 0) == -1) {
      __label__ = 68;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $193 = _strlen($2);
    var $194 = $tmpcast + ($193 - 1) | 0;
    var $195 = _strcat($3, $194);
    __label__ = 68;
    break;
   case 68:
    var $197 = _strlen($2);
    if ($197 >>> 0 > 119) {
      __label__ = 69;
      break;
    } else {
      var $limitOK_1 = $limitOK_0;
      var $firstOne_1 = $firstOne_0;
      var $limit_1 = $limit_0;
      __label__ = 72;
      break;
    }
   case 69:
    if (($190 % 120 | 0) == 0 & ($firstOne_0 | 0) == 0) {
      __label__ = 70;
      break;
    } else {
      var $limitOK_1 = $limitOK_0;
      var $firstOne_1 = $firstOne_0;
      var $limit_1 = $limit_0;
      __label__ = 72;
      break;
    }
   case 70:
    var $204 = _strchr($2, 49);
    if (($204 | 0) == 0) {
      var $limitOK_1 = $limitOK_0;
      var $firstOne_1 = 0;
      var $limit_1 = $limit_0;
      __label__ = 72;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $limitOK_1 = 1;
    var $firstOne_1 = $204;
    var $limit_1 = $129 + $204 | 0;
    __label__ = 72;
    break;
   case 72:
    var $limit_1;
    var $firstOne_1;
    var $limitOK_1;
    if (($190 | 0) == ($limit_1 | 0)) {
      __label__ = 73;
      break;
    } else {
      var $limitOK_0 = $limitOK_1;
      var $firstOne_0 = $firstOne_1;
      var $limit_0 = $limit_1;
      var $j_0 = $190;
      var $binary_recurrence_start_0 = $binary_recurrence_start_1;
      var $rac_1 = $rac_2;
      var $a_0 = $a_1;
      __label__ = 46;
      break;
    }
   case 73:
    if (($limitOK_1 & 1) << 24 >> 24 == 0) {
      var $limitOK_0 = $limitOK_1;
      var $firstOne_0 = $firstOne_1;
      var $limit_0 = $limit_1;
      var $j_0 = $190;
      var $binary_recurrence_start_0 = $binary_recurrence_start_1;
      var $rac_1 = $rac_2;
      var $a_0 = $a_1;
      __label__ = 46;
      break;
    } else {
      var $binary_recurrence_start_2 = $binary_recurrence_start_1;
      __label__ = 74;
      break;
    }
   case 74:
    var $binary_recurrence_start_2;
    ___gmpz_clear($83);
    ___gmpf_clear($84);
    var $214 = _strlen($1);
    if ($214 >>> 0 > 1) {
      var $binary_recurrence_start_319 = $binary_recurrence_start_2;
      var $binary_exponent_020 = 0;
      var $217 = $214;
      __label__ = 76;
      break;
    } else {
      var $binary_recurrence_start_3_lcssa = $binary_recurrence_start_2;
      var $binary_exponent_0_lcssa = 0;
      __label__ = 75;
      break;
    }
   case 75:
    var $binary_exponent_0_lcssa;
    var $binary_recurrence_start_3_lcssa;
    var $216 = $tmpcast12 + 1 | 0;
    var $binary_exponent_1_ph = $binary_exponent_0_lcssa;
    var $binary_recurrence_start_4_ph = $binary_recurrence_start_3_lcssa;
    __label__ = 80;
    break;
   case 76:
    var $217;
    var $binary_exponent_020;
    var $binary_recurrence_start_319;
    var $218 = $tmpcast12 + ($217 - 1) | 0;
    var $219 = _strcpy($85, $218);
    var $220 = _strcat($85, $2);
    var $221 = _strcpy($2, $85);
    var $222 = _strlen($1);
    HEAP8[$tmpcast12 + ($222 - 1) | 0] = 0;
    var $225 = $binary_exponent_020 + 1 | 0;
    var $_binary_recurrence_start_3 = ($binary_recurrence_start_319 >>> 31 ^ 1) + $binary_recurrence_start_319 | 0;
    var $226 = _strlen($1);
    if ($226 >>> 0 > 1) {
      var $binary_recurrence_start_319 = $_binary_recurrence_start_3;
      var $binary_exponent_020 = $225;
      var $217 = $226;
      __label__ = 76;
      break;
    } else {
      var $binary_recurrence_start_3_lcssa = $_binary_recurrence_start_3;
      var $binary_exponent_0_lcssa = $225;
      __label__ = 75;
      break;
    }
   case 77:
    var $binary_exponent_1;
    var $229 = _strcmp($1, STRING_TABLE._str | 0);
    var $231 = HEAPU8[$2];
    if (($229 | 0) == 0) {
      __label__ = 78;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 78:
    HEAP8[$1] = $231;
    HEAP8[$216] = 0;
    _substr1($2);
    var $233 = $binary_exponent_1 - 1 | 0;
    if ($239) {
      __label__ = 79;
      break;
    } else {
      var $binary_exponent_1 = $233;
      __label__ = 77;
      break;
    }
   case 79:
    var $235 = $binary_recurrence_start_4_ph - 1 | 0;
    var $236 = _strlen($2);
    var $237 = _strlen($3);
    if ($236 >>> 0 < $237 >>> 0) {
      __label__ = 81;
      break;
    } else {
      var $binary_exponent_1_ph = $233;
      var $binary_recurrence_start_4_ph = $235;
      __label__ = 80;
      break;
    }
   case 80:
    var $binary_recurrence_start_4_ph;
    var $binary_exponent_1_ph;
    var $239 = ($binary_recurrence_start_4_ph | 0) > -1;
    var $binary_exponent_1 = $binary_exponent_1_ph;
    __label__ = 77;
    break;
   case 81:
    var $241 = _strcat($2, $3);
    var $binary_exponent_1_ph = $233;
    var $binary_recurrence_start_4_ph = $236;
    __label__ = 80;
    break;
   case 82:
    if ($231 << 24 >> 24 == 0) {
      __label__ = 83;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 83:
    HEAP16[$binary_fraction9_sub >> 1] = 48;
    __label__ = 84;
    break;
   case 84:
    var $246 = _malloc(5e3);
    var $247 = _sprintf($246, STRING_TABLE.__str3 | 0, (tempInt = STACKTOP, STACKTOP += 28, HEAP32[tempInt >> 2] = $binary_integer13, HEAP32[tempInt + 4 >> 2] = $binary_fraction9, HEAP32[tempInt + 8 >> 2] = $binary_exponent_1, HEAP32[tempInt + 12 >> 2] = $15, HEAP32[tempInt + 16 >> 2] = $20, HEAP32[tempInt + 20 >> 2] = $3, HEAP32[tempInt + 24 >> 2] = $binary_recurrence_start_4_ph, tempInt));
    _free_dfs();
    ___gmpf_clear($88);
    ___gmpf_clear($89);
    ___gmpf_clear($90);
    ___gmpf_clear($91);
    ___gmpf_clear($102);
    ___gmpf_clear($104);
    ___gmpf_clear($109);
    ___gmpf_clear($111);
    var $_0 = $246;
    __label__ = 85;
    break;
   case 85:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

Module["_dtb2"] = _dtb2;

_dtb2["X"] = 1;

function _btd2($argv1, $argv2, $argv3) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 84;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $result = __stackBase__;
    var $power_of_two = __stackBase__ + 12;
    var $di = __stackBase__ + 24;
    var $df = __stackBase__ + 36;
    var $decf = __stackBase__ + 48;
    var $powtwo = __stackBase__ + 64;
    var $a2 = __stackBase__ + 80;
    var $1 = _malloc(17e3);
    var $2 = _malloc(17e3);
    var $3 = _malloc(17e3);
    var $4 = _malloc(17e3);
    var $5 = _malloc(17e3);
    var $6 = $5;
    tempBigInt = 48;
    HEAP8[$6] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$6 + 1] = tempBigInt & 255;
    var $7 = _malloc(17e3);
    var $8 = $7;
    tempBigInt = 48;
    HEAP8[$8] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$8 + 1] = tempBigInt & 255;
    var $9 = _malloc(17e3);
    var $10 = _strcpy($1, $argv1);
    var $11 = _atoi($argv2);
    var $12 = _strcpy($2, $argv3);
    var $13 = $result | 0;
    ___gmpz_init($13);
    var $14 = _malloc(17e3);
    var $15 = _strcpy($14, $1);
    var $16 = _malloc(17e3);
    var $17 = _strcpy($16, $2);
    var $18 = _atoi($14);
    if (($18 | 0) > 1) {
      __label__ = 3;
      break;
    } else {
      var $binary_exponent_n_0_lcssa = $11;
      __label__ = 4;
      break;
    }
   case 3:
    var $20 = $9 + 1 | 0;
    var $binary_exponent_n_031 = $11;
    __label__ = 6;
    break;
   case 4:
    var $binary_exponent_n_0_lcssa;
    var $21 = _strcmp($14, STRING_TABLE._str | 0);
    var $23 = HEAP8[$16];
    if (($21 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $binary_exponent_n_1_lcssa = $binary_exponent_n_0_lcssa;
      var $_lcssa = $23;
      __label__ = 8;
      break;
    }
   case 5:
    var $24 = $14 + 1 | 0;
    var $binary_exponent_n_126 = $binary_exponent_n_0_lcssa;
    var $39 = $23;
    __label__ = 7;
    break;
   case 6:
    var $binary_exponent_n_031;
    var $26 = _strlen($14);
    var $29 = HEAP8[$14 + ($26 - 1) | 0];
    HEAP8[$9] = $29;
    HEAP8[$20] = 0;
    var $30 = _strcat($9, $16);
    var $31 = _strcpy($16, $30);
    var $32 = _strlen($14);
    HEAP8[$14 + ($32 - 1) | 0] = 0;
    var $35 = $binary_exponent_n_031 + 1 | 0;
    var $36 = _atoi($14);
    if (($36 | 0) > 1) {
      var $binary_exponent_n_031 = $35;
      __label__ = 6;
      break;
    } else {
      var $binary_exponent_n_0_lcssa = $35;
      __label__ = 4;
      break;
    }
   case 7:
    var $39;
    var $binary_exponent_n_126;
    HEAP8[$14] = $39;
    HEAP8[$24] = 0;
    _substr1($16);
    var $40 = $binary_exponent_n_126 - 1 | 0;
    var $41 = _strcmp($14, STRING_TABLE._str | 0);
    var $43 = HEAP8[$16];
    if (($41 | 0) == 0) {
      var $binary_exponent_n_126 = $40;
      var $39 = $43;
      __label__ = 7;
      break;
    } else {
      var $binary_exponent_n_1_lcssa = $40;
      var $_lcssa = $43;
      __label__ = 8;
      break;
    }
   case 8:
    var $_lcssa;
    var $binary_exponent_n_1_lcssa;
    if ($_lcssa << 24 >> 24 == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $46 = $16;
    tempBigInt = 48;
    HEAP8[$46] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$46 + 1] = tempBigInt & 255;
    __label__ = 10;
    break;
   case 10:
    var $48 = _malloc(17e3);
    var $49 = _strcpy($48, $1);
    var $50 = _malloc(17e3);
    var $51 = _strcpy($50, $2);
    if (($11 | 0) > 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $53 = $50;
    var $binary_exponent_021 = $11;
    var $58 = HEAP8[$50];
    __label__ = 14;
    break;
   case 12:
    if (($11 | 0) < 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 13:
    var $55 = $9 + 1 | 0;
    var $56 = $48;
    var $binary_exponent_118 = $11;
    __label__ = 17;
    break;
   case 14:
    var $58;
    var $binary_exponent_021;
    var $59 = _strlen($48);
    HEAP8[$48 + $59 | 0] = $58;
    HEAP8[$48 + ($59 + 1) | 0] = 0;
    _substr1($50);
    var $63 = HEAP8[$50];
    if ($63 << 24 >> 24 == 0) {
      __label__ = 15;
      break;
    } else {
      var $67 = $63;
      __label__ = 16;
      break;
    }
   case 15:
    tempBigInt = 48;
    HEAP8[$53] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$53 + 1] = tempBigInt & 255;
    var $67 = 48;
    __label__ = 16;
    break;
   case 16:
    var $67;
    var $68 = $binary_exponent_021 - 1 | 0;
    if (($68 | 0) > 0) {
      var $binary_exponent_021 = $68;
      var $58 = $67;
      __label__ = 14;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 17:
    var $binary_exponent_118;
    var $71 = _strlen($48);
    var $74 = HEAP8[$48 + ($71 - 1) | 0];
    HEAP8[$9] = $74;
    HEAP8[$55] = 0;
    var $75 = _strcat($9, $50);
    var $76 = _strcpy($50, $75);
    var $77 = _strlen($48);
    HEAP8[$48 + ($77 - 1) | 0] = 0;
    if (HEAP8[$48] << 24 >> 24 == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    tempBigInt = 48;
    HEAP8[$56] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$56 + 1] = tempBigInt & 255;
    __label__ = 19;
    break;
   case 19:
    var $84 = $binary_exponent_118 + 1 | 0;
    if (($84 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $binary_exponent_118 = $84;
      __label__ = 17;
      break;
    }
   case 20:
    var $85 = $4;
    tempBigInt = 48;
    HEAP8[$85] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$85 + 1] = tempBigInt & 255;
    var $86 = $power_of_two | 0;
    ___gmpz_init($86);
    ___gmpz_set_ui($86, 1);
    var $87 = $di | 0;
    ___gmpz_init($87);
    ___gmpz_set_ui($87, 0);
    var $88 = _strlen($48);
    var $i_012 = $88 - 1 | 0;
    if (($i_012 | 0) > -1) {
      var $i_013 = $i_012;
      __label__ = 21;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 21:
    var $i_013;
    if (HEAP8[$48 + $i_013 | 0] << 24 >> 24 == 49) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    ___gmpz_add($87, $87, $86);
    __label__ = 23;
    break;
   case 23:
    ___gmpz_add($86, $86, $86);
    var $i_0 = $i_013 - 1 | 0;
    if (($i_0 | 0) > -1) {
      var $i_013 = $i_0;
      __label__ = 21;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    ___gmpz_set_ui($86, 1);
    var $96 = $df | 0;
    ___gmpz_init($96);
    ___gmpz_set_ui($96, 0);
    var $97 = $3;
    tempBigInt = 48;
    HEAP8[$97] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$97 + 1] = tempBigInt & 255;
    var $98 = _strlen($50);
    var $i1_06 = $98 - 1 | 0;
    if (($i1_06 | 0) > -1) {
      var $i1_08 = $i1_06;
      __label__ = 25;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 25:
    var $i1_08;
    if (HEAP8[$50 + $i1_08 | 0] << 24 >> 24 == 49) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    ___gmpz_add($96, $96, $86);
    __label__ = 27;
    break;
   case 27:
    ___gmpz_add($86, $86, $86);
    var $i1_0 = $i1_08 - 1 | 0;
    if (($i1_0 | 0) > -1) {
      var $i1_08 = $i1_0;
      __label__ = 25;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    ___gmpf_set_default_prec(1e3);
    var $106 = $decf | 0;
    ___gmpf_init($106);
    ___gmpf_set_z($106, $96);
    var $107 = $powtwo | 0;
    ___gmpf_init($107);
    ___gmpf_set_z($107, $86);
    ___gmpf_div($106, $106, $107);
    var $108 = _malloc(17e3);
    var $109 = _malloc(17e3);
    var $110 = ___gmpz_get_str($108, 10, $87);
    var $111 = _strcpy($4, $108);
    var $112 = ___gmpf_get_str($109, $a2, 10, 1e4, $106);
    var $113 = _strcpy($3, $109);
    var $114 = HEAP32[$a2 >> 2];
    var $115 = ($114 | 0) > -1 ? $114 : -$114 | 0;
    var $116 = _repeat_char(48, $115);
    _prepend($3, _repeat_char_buf | 0);
    var $117 = _strlen($4);
    if ($117 >>> 0 > 1) {
      __label__ = 29;
      break;
    } else {
      var $decimal_exponent_0_lcssa = 0;
      __label__ = 30;
      break;
    }
   case 29:
    var $119 = $9 + 1 | 0;
    var $decimal_exponent_02 = 0;
    var $124 = $117;
    __label__ = 32;
    break;
   case 30:
    var $decimal_exponent_0_lcssa;
    var $120 = _strcmp($4, STRING_TABLE._str | 0);
    if (($120 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $decimal_exponent_1_lcssa = $decimal_exponent_0_lcssa;
      __label__ = 34;
      break;
    }
   case 31:
    var $122 = $4 + 1 | 0;
    var $decimal_exponent_11 = $decimal_exponent_0_lcssa;
    __label__ = 33;
    break;
   case 32:
    var $124;
    var $decimal_exponent_02;
    var $127 = HEAP8[$4 + ($124 - 1) | 0];
    HEAP8[$9] = $127;
    HEAP8[$119] = 0;
    var $128 = _strcat($9, $3);
    var $129 = _strcpy($3, $128);
    var $130 = _strlen($4);
    HEAP8[$4 + ($130 - 1) | 0] = 0;
    var $133 = $decimal_exponent_02 + 1 | 0;
    var $134 = _strlen($4);
    if ($134 >>> 0 > 1) {
      var $decimal_exponent_02 = $133;
      var $124 = $134;
      __label__ = 32;
      break;
    } else {
      var $decimal_exponent_0_lcssa = $133;
      __label__ = 30;
      break;
    }
   case 33:
    var $decimal_exponent_11;
    var $137 = HEAP8[$3];
    HEAP8[$4] = $137;
    HEAP8[$122] = 0;
    _substr1($3);
    var $138 = $decimal_exponent_11 - 1 | 0;
    var $139 = _strcmp($4, STRING_TABLE._str | 0);
    if (($139 | 0) == 0) {
      var $decimal_exponent_11 = $138;
      __label__ = 33;
      break;
    } else {
      var $decimal_exponent_1_lcssa = $138;
      __label__ = 34;
      break;
    }
   case 34:
    var $decimal_exponent_1_lcssa;
    if (HEAP8[$4] << 24 >> 24 == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    tempBigInt = 48;
    HEAP8[$85] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$85 + 1] = tempBigInt & 255;
    __label__ = 36;
    break;
   case 36:
    if (HEAP8[$3] << 24 >> 24 == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    tempBigInt = 48;
    HEAP8[$97] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$97 + 1] = tempBigInt & 255;
    __label__ = 38;
    break;
   case 38:
    var $149 = _malloc(17e3);
    var $150 = _strcpy($149, $4);
    __label__ = 39;
    break;
   case 39:
    var $152 = HEAP8[$149];
    if ($152 << 24 >> 24 == 48) {
      __label__ = 40;
      break;
    } else if ($152 << 24 >> 24 == 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 40:
    _substr1($149);
    __label__ = 39;
    break;
   case 41:
    var $155 = $149;
    tempBigInt = 48;
    HEAP8[$155] = tempBigInt & 255;
    tempBigInt >>= 8;
    HEAP8[$155 + 1] = tempBigInt & 255;
    __label__ = 42;
    break;
   case 42:
    var $156 = _strcpy($4, $149);
    var $157 = _malloc(17e3);
    var $158 = _sprintf($157, STRING_TABLE.__str4 | 0, (tempInt = STACKTOP, STACKTOP += 40, HEAP32[tempInt >> 2] = $4, HEAP32[tempInt + 4 >> 2] = $3, HEAP32[tempInt + 8 >> 2] = $decimal_exponent_1_lcssa, HEAP32[tempInt + 12 >> 2] = $5, HEAP32[tempInt + 16 >> 2] = -1, HEAP32[tempInt + 20 >> 2] = $7, HEAP32[tempInt + 24 >> 2] = -1, HEAP32[tempInt + 28 >> 2] = $14, HEAP32[tempInt + 32 >> 2] = $16, HEAP32[tempInt + 36 >> 2] = $binary_exponent_n_1_lcssa, tempInt));
    ___gmpf_clear($106);
    ___gmpf_clear($107);
    ___gmpz_clear($13);
    ___gmpz_clear($87);
    ___gmpz_clear($96);
    _free($14);
    _free($16);
    _free($1);
    _free($2);
    _free($48);
    _free($50);
    _free($7);
    _free($5);
    _free($4);
    _free($3);
    _free($149);
    _free($108);
    _free($109);
    _free($9);
    STACKTOP = __stackBase__;
    return $157;
   default:
    assert(0, "bad label: " + __label__);
  }
}

Module["_btd2"] = _btd2;

_btd2["X"] = 1;

function ___gmpz_abs($w, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($u | 0) == ($w | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ((HEAP32[$w >> 2] | 0) < ($5 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $12 = ___gmpz_realloc($w, $5);
    __label__ = 5;
    break;
   case 5:
    var $15 = HEAP32[$w + 8 >> 2];
    var $17 = HEAP32[$u + 8 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $20 = $5 - 1 | 0;
    var $21 = HEAP32[$17 >> 2];
    if (($20 | 0) == 0) {
      var $__x_1 = $21;
      var $__dst_1 = $15;
      __label__ = 9;
      break;
    } else {
      var $__x_0 = $21;
      var $_pn = $17;
      var $__dst_0 = $15;
      var $__n_0 = $20;
      __label__ = 7;
      break;
    }
   case 7:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $24 = HEAP32[$__src_0 >> 2];
    var $25 = $__n_0 - 1 | 0;
    if (($25 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $24;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $25;
      __label__ = 7;
      break;
    }
   case 8:
    var $__x_1 = $24;
    var $__dst_1 = $15 + ($20 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 10;
    break;
   case 10:
    HEAP32[$w + 4 >> 2] = $5;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_dump($u) {
  var $1 = ___gmpz_get_str(0, 10, $u);
  var $puts = _puts($1);
  var $2 = HEAP32[___gmp_free_func >> 2];
  var $3 = _strlen($1);
  var $4 = $3 + 1 | 0;
  FUNCTION_TABLE[$2]($1, $4);
  return;
}

function ___gmpn_invert($ip, $dp, $n, $scratch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if (($n | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 3:
    var $3 = HEAPU32[$dp >> 2];
    var $4 = $3 >>> 16;
    var $5 = $3 & 65535;
    var $6 = $3 ^ -1;
    var $7 = Math.floor(($6 >>> 0) / ($4 >>> 0));
    var $8 = (i64Math.multiply($7, 0, $4, 0), i64Math.result[0]);
    var $9 = $6 - $8 | 0;
    var $10 = (i64Math.multiply($7, 0, $5, 0), i64Math.result[0]);
    var $12 = $9 << 16 | 65535;
    if ($12 >>> 0 < $10 >>> 0) {
      __label__ = 4;
      break;
    } else {
      var $__q1_0 = $7;
      var $__r1_0 = $12;
      __label__ = 6;
      break;
    }
   case 4:
    var $15 = $7 - 1 | 0;
    var $uadd6 = _llvm_uadd_with_overflow_i32($12, $3);
    var $16 = $uadd6.f0;
    var $17 = $uadd6.f1;
    if ($16 >>> 0 < $10 >>> 0 & ($17 ^ 1)) {
      __label__ = 5;
      break;
    } else {
      var $__q1_0 = $15;
      var $__r1_0 = $16;
      __label__ = 6;
      break;
    }
   case 5:
    var $__q1_0 = $7 - 2 | 0;
    var $__r1_0 = $16 + $3 | 0;
    __label__ = 6;
    break;
   case 6:
    var $__r1_0;
    var $__q1_0;
    var $23 = $__r1_0 - $10 | 0;
    var $24 = Math.floor(($23 >>> 0) / ($4 >>> 0));
    var $25 = (i64Math.multiply($24, 0, $4, 0), i64Math.result[0]);
    var $26 = $23 - $25 | 0;
    var $27 = (i64Math.multiply($24, 0, $5, 0), i64Math.result[0]);
    var $29 = $26 << 16 | 65535;
    if ($29 >>> 0 < $27 >>> 0) {
      __label__ = 7;
      break;
    } else {
      var $__q0_0 = $24;
      __label__ = 8;
      break;
    }
   case 7:
    var $uadd5 = _llvm_uadd_with_overflow_i32($29, $3);
    var $32 = $uadd5.f1;
    var $33 = $uadd5.f0;
    var $__v = $33 >>> 0 < $27 >>> 0 & ($32 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $24 | 0;
    __label__ = 8;
    break;
   case 8:
    var $__q0_0;
    HEAP32[$ip >> 2] = $__q0_0 | $__q1_0 << 16;
    __label__ = 37;
    break;
   case 9:
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($scratch | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $_0 = $scratch;
      __label__ = 14;
      break;
    }
   case 10:
    var $41 = (i64Math.multiply($n, 0, 12, 0), i64Math.result[0]);
    var $42 = $41 + 8 | 0;
    if ($42 >>> 0 < 65536) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $45 = STACKTOP;
    STACKTOP += $42;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $49 = $45;
    __label__ = 13;
    break;
   case 12:
    var $47 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $42);
    var $49 = $47;
    __label__ = 13;
    break;
   case 13:
    var $49;
    var $_0 = $49;
    __label__ = 14;
    break;
   case 14:
    var $_0;
    if (($n | 0) > 199) {
      __label__ = 32;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $54 = $n - 1 | 0;
    if (($n | 0) > 0) {
      var $i_019 = $54;
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $i_019;
    HEAP32[$_0 + ($i_019 << 2) >> 2] = -1;
    if (($i_019 | 0) > 0) {
      var $i_019 = $i_019 - 1 | 0;
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $__d_0 = $_0 + ($n << 2) | 0;
    var $__s_0 = $dp;
    var $__n_0 = $n;
    __label__ = 18;
    break;
   case 18:
    var $__n_0;
    var $__s_0;
    var $__d_0;
    var $63 = HEAP32[$__s_0 >> 2] ^ -1;
    HEAP32[$__d_0 >> 2] = $63;
    var $65 = $__n_0 - 1 | 0;
    if (($65 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__d_0 = $__d_0 + 4 | 0;
      var $__s_0 = $__s_0 + 4 | 0;
      var $__n_0 = $65;
      __label__ = 18;
      break;
    }
   case 19:
    if (($n | 0) == 2) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $70 = ___gmpn_divrem_2($ip, 0, $_0, 4, $dp);
    __label__ = 35;
    break;
   case 21:
    var $73 = HEAPU32[$dp + ($54 << 2) >> 2];
    var $74 = $73 >>> 16;
    var $75 = $73 & 65535;
    var $76 = $73 ^ -1;
    var $77 = Math.floor(($76 >>> 0) / ($74 >>> 0));
    var $78 = (i64Math.multiply($77, 0, $74, 0), i64Math.result[0]);
    var $79 = $76 - $78 | 0;
    var $80 = (i64Math.multiply($77, 0, $75, 0), i64Math.result[0]);
    var $82 = $79 << 16 | 65535;
    if ($82 >>> 0 < $80 >>> 0) {
      __label__ = 22;
      break;
    } else {
      var $__r16_0 = $82;
      var $__q14_0 = $77;
      __label__ = 24;
      break;
    }
   case 22:
    var $85 = $77 - 1 | 0;
    var $uadd4 = _llvm_uadd_with_overflow_i32($82, $73);
    var $86 = $uadd4.f0;
    var $87 = $uadd4.f1;
    if ($86 >>> 0 < $80 >>> 0 & ($87 ^ 1)) {
      __label__ = 23;
      break;
    } else {
      var $__r16_0 = $86;
      var $__q14_0 = $85;
      __label__ = 24;
      break;
    }
   case 23:
    var $__r16_0 = $86 + $73 | 0;
    var $__q14_0 = $77 - 2 | 0;
    __label__ = 24;
    break;
   case 24:
    var $__q14_0;
    var $__r16_0;
    var $93 = $__r16_0 - $80 | 0;
    var $94 = Math.floor(($93 >>> 0) / ($74 >>> 0));
    var $95 = (i64Math.multiply($94, 0, $74, 0), i64Math.result[0]);
    var $96 = $93 - $95 | 0;
    var $97 = (i64Math.multiply($94, 0, $75, 0), i64Math.result[0]);
    var $99 = $96 << 16 | 65535;
    if ($99 >>> 0 < $97 >>> 0) {
      __label__ = 25;
      break;
    } else {
      var $__q05_0 = $94;
      __label__ = 26;
      break;
    }
   case 25:
    var $uadd3 = _llvm_uadd_with_overflow_i32($99, $73);
    var $102 = $uadd3.f1;
    var $103 = $uadd3.f0;
    var $_15_v = $103 >>> 0 < $97 >>> 0 & ($102 ^ 1) ? -2 : -1;
    var $__q05_0 = $_15_v + $94 | 0;
    __label__ = 26;
    break;
   case 26:
    var $__q05_0;
    var $107 = $__q05_0 | $__q14_0 << 16;
    var $108 = (i64Math.multiply($73, 0, $107, 0), i64Math.result[0]);
    var $111 = HEAPU32[$dp + ($n - 2 << 2) >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($108, $111);
    var $112 = $uadd.f0;
    var $113 = $uadd.f1;
    if ($113) {
      __label__ = 27;
      break;
    } else {
      var $v_0 = $107;
      var $p_0 = $112;
      __label__ = 28;
      break;
    }
   case 27:
    var $116 = ($112 >>> 0 >= $73 >>> 0) << 31 >> 31;
    var $v_0 = $107 - 1 + $116 | 0;
    var $p_0 = $112 - $73 - ($116 & $73) | 0;
    __label__ = 28;
    break;
   case 28:
    var $p_0;
    var $v_0;
    var $123 = $111 & 65535;
    var $124 = $111 >>> 16;
    var $125 = $v_0 & 65535;
    var $126 = $v_0 >>> 16;
    var $127 = (i64Math.multiply($123, 0, $125, 0), i64Math.result[0]);
    var $128 = (i64Math.multiply($123, 0, $126, 0), i64Math.result[0]);
    var $129 = (i64Math.multiply($124, 0, $125, 0), i64Math.result[0]);
    var $130 = (i64Math.multiply($124, 0, $126, 0), i64Math.result[0]);
    var $132 = ($127 >>> 16) + $128 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($132, $129);
    var $133 = $uadd1.f0;
    var $134 = $uadd1.f1;
    var $__x3_0 = $134 ? $130 + 65536 | 0 : $130;
    var $137 = $__x3_0 + ($133 >>> 16) | 0;
    var $140 = $133 << 16 | $127 & 65535;
    var $uadd2 = _llvm_uadd_with_overflow_i32($p_0, $137);
    var $141 = $uadd2.f0;
    var $142 = $uadd2.f1;
    if ($142) {
      __label__ = 29;
      break;
    } else {
      var $v_1 = $v_0;
      __label__ = 31;
      break;
    }
   case 29:
    var $144 = $v_0 - 1 | 0;
    if ($141 >>> 0 < $73 >>> 0) {
      var $v_1 = $144;
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $_17 = $141 >>> 0 <= $73 >>> 0 & $140 >>> 0 < $111 >>> 0 ? $144 : $v_0 - 2 | 0;
    var $v_1 = $_17;
    __label__ = 31;
    break;
   case 31:
    var $v_1;
    var $151 = $n << 1;
    var $152 = ___gmpn_sbpi1_div_q($ip, $_0, $151, $dp, $n, $v_1);
    __label__ = 35;
    break;
   case 32:
    var $154 = ___gmpn_ni_invertappr($ip, $dp, $n, $_0);
    if (($154 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    ___gmpn_mul_n($_0, $ip, $dp, $n);
    var $157 = $_0 + ($n << 2) | 0;
    var $158 = ___gmpn_add_n($157, $157, $dp, $n);
    var $159 = $n << 1;
    var $160 = ___gmpn_add($_0, $_0, $159, $dp, $n);
    if (($160 | 0) == 0) {
      var $__p_0 = $ip;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $__p_0;
    var $164 = HEAP32[$__p_0 >> 2] + 1 | 0;
    HEAP32[$__p_0 >> 2] = $164;
    if (($164 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $166 = HEAP32[$__tmp_marker >> 2];
    if (($166 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    ___gmp_tmp_reentrant_free($166);
    __label__ = 37;
    break;
   case 37:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_invert["X"] = 1;

function ___gmpn_divexact($qp, $np, $nn, $dp, $dn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $1 = HEAP32[$dp >> 2];
    if (($1 | 0) == 0) {
      var $_037 = $dn;
      var $_028 = $dp;
      var $_019 = $nn;
      var $_010 = $np;
      __label__ = 3;
      break;
    } else {
      var $_03_lcssa = $dn;
      var $_02_lcssa = $dp;
      var $_01_lcssa = $nn;
      var $_0_lcssa = $np;
      var $_lcssa6 = $1;
      __label__ = 4;
      break;
    }
   case 3:
    var $_010;
    var $_019;
    var $_028;
    var $_037;
    var $3 = $_028 + 4 | 0;
    var $4 = $_010 + 4 | 0;
    var $5 = $_037 - 1 | 0;
    var $6 = $_019 - 1 | 0;
    var $7 = HEAP32[$3 >> 2];
    if (($7 | 0) == 0) {
      var $_037 = $5;
      var $_028 = $3;
      var $_019 = $6;
      var $_010 = $4;
      __label__ = 3;
      break;
    } else {
      var $_03_lcssa = $5;
      var $_02_lcssa = $3;
      var $_01_lcssa = $6;
      var $_0_lcssa = $4;
      var $_lcssa6 = $7;
      __label__ = 4;
      break;
    }
   case 4:
    var $_lcssa6;
    var $_0_lcssa;
    var $_01_lcssa;
    var $_02_lcssa;
    var $_03_lcssa;
    if (($_03_lcssa | 0) == 1) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    ___gmpn_divexact_1($qp, $_0_lcssa, $_01_lcssa, $_lcssa6);
    __label__ = 31;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $12 = $_01_lcssa + 1 | 0;
    var $13 = $12 - $_03_lcssa | 0;
    var $14 = HEAP32[$_02_lcssa >> 2];
    var $16 = $14 & -$14;
    if ($16 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $20 = $16 >>> 0 < 256 ? 1 : 9;
    var $25 = $20;
    __label__ = 9;
    break;
   case 8:
    var $23 = $16 >>> 0 < 16777216 ? 17 : 25;
    var $25 = $23;
    __label__ = 9;
    break;
   case 9:
    var $25;
    var $27 = STRING_TABLE.___gmpn_clz_tab + ($16 >>> ($25 >>> 0)) | 0;
    var $31 = $25 - 2 + (HEAPU8[$27] & 255) | 0;
    if (($31 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $35 = $13 + 1 | 0;
    var $36 = ($_03_lcssa | 0) > ($13 | 0) ? $35 : $_03_lcssa;
    var $37 = $36 << 2;
    if ($37 >>> 0 < 65536) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $40 = STACKTOP;
    STACKTOP += $37;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $44 = $40;
    __label__ = 13;
    break;
   case 12:
    var $42 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $37);
    var $44 = $42;
    __label__ = 13;
    break;
   case 13:
    var $44;
    var $45 = $44;
    var $46 = ___gmpn_rshift($45, $_02_lcssa, $36, $31);
    var $47 = $35 << 2;
    if ($47 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $50 = STACKTOP;
    STACKTOP += $47;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $54 = $50;
    __label__ = 16;
    break;
   case 15:
    var $52 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $47);
    var $54 = $52;
    __label__ = 16;
    break;
   case 16:
    var $54;
    var $55 = $54;
    var $56 = ___gmpn_rshift($55, $_0_lcssa, $35, $31);
    var $_1 = $45;
    var $wp_0 = $55;
    __label__ = 26;
    break;
   case 17:
    var $58 = $13 << 2;
    if ($58 >>> 0 < 65536) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $61 = STACKTOP;
    STACKTOP += $58;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $65 = $61;
    __label__ = 20;
    break;
   case 19:
    var $63 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $58);
    var $65 = $63;
    __label__ = 20;
    break;
   case 20:
    var $65;
    var $66 = $65;
    if (($12 | 0) == ($_03_lcssa | 0)) {
      var $_1 = $_02_lcssa;
      var $wp_0 = $66;
      __label__ = 26;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $69 = $13 - 1 | 0;
    var $70 = HEAPU32[$_0_lcssa >> 2];
    if (($69 | 0) == 0) {
      var $__x_1 = $70;
      var $__dst_1 = $66;
      __label__ = 25;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $scevgep = $65 + (($_01_lcssa << 2) - ($_03_lcssa << 2)) | 0;
    var $__x_0 = $70;
    var $_0_pn = $_0_lcssa;
    var $__dst_0 = $66;
    var $__n_0 = $69;
    __label__ = 23;
    break;
   case 23:
    var $__n_0;
    var $__dst_0;
    var $_0_pn;
    var $__x_0;
    var $__src_0 = $_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $77 = HEAP32[$__src_0 >> 2];
    var $78 = $__n_0 - 1 | 0;
    if (($78 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $__x_0 = $77;
      var $_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $78;
      __label__ = 23;
      break;
    }
   case 24:
    var $__x_1 = $77;
    var $__dst_1 = $scevgep;
    __label__ = 25;
    break;
   case 25:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_1 = $_02_lcssa;
    var $wp_0 = $66;
    __label__ = 26;
    break;
   case 26:
    var $wp_0;
    var $_1;
    var $__03 = ($_03_lcssa | 0) > ($13 | 0) ? $13 : $_03_lcssa;
    var $83 = ___gmpn_bdiv_q_itch($13, $__03);
    var $84 = $83 << 2;
    if ($84 >>> 0 < 65536) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $87 = STACKTOP;
    STACKTOP += $84;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $91 = $87;
    __label__ = 29;
    break;
   case 28:
    var $89 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $84);
    var $91 = $89;
    __label__ = 29;
    break;
   case 29:
    var $91;
    ___gmpn_bdiv_q($qp, $wp_0, $13, $_1, $__03, $91);
    var $93 = HEAP32[$__tmp_marker >> 2];
    if (($93 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    ___gmp_tmp_reentrant_free($93);
    __label__ = 31;
    break;
   case 31:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_divexact["X"] = 1;

function _win_size($eb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $k_0 = 1;
    __label__ = 3;
    break;
   case 3:
    var $k_0;
    if (HEAPU32[_win_size_x + ($k_0 << 2) >> 2] >>> 0 < $eb >>> 0) {
      var $k_0 = $k_0 + 1 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return $k_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _getbits($p, $bi, $nbits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($bi >>> 0 < $nbits >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = HEAP32[$p >> 2] & (1 << $bi) - 1;
    __label__ = 7;
    break;
   case 4:
    var $8 = $bi - $nbits | 0;
    var $9 = $8 >>> 5;
    var $10 = $8 & 31;
    var $13 = HEAPU32[$p + ($9 << 2) >> 2] >>> ($10 >>> 0);
    var $14 = 32 - $10 | 0;
    if (($14 | 0) < ($nbits | 0)) {
      __label__ = 5;
      break;
    } else {
      var $r_0 = $13;
      __label__ = 6;
      break;
    }
   case 5:
    var $r_0 = (HEAP32[$p + ($9 + 1 << 2) >> 2] << $14) + $13 | 0;
    __label__ = 6;
    break;
   case 6:
    var $r_0;
    var $_0 = $r_0 & (1 << $nbits) - 1;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _win_size7($eb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $k_0 = 1;
    __label__ = 3;
    break;
   case 3:
    var $k_0;
    if (HEAPU32[_win_size_x6 + ($k_0 << 2) >> 2] >>> 0 < $eb >>> 0) {
      var $k_0 = $k_0 + 1 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return $k_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _getbits9($p, $bi, $nbits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($bi >>> 0 < $nbits >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = HEAP32[$p >> 2] & (1 << $bi) - 1;
    __label__ = 7;
    break;
   case 4:
    var $8 = $bi - $nbits | 0;
    var $9 = $8 >>> 5;
    var $10 = $8 & 31;
    var $13 = HEAPU32[$p + ($9 << 2) >> 2] >>> ($10 >>> 0);
    var $14 = 32 - $10 | 0;
    if (($14 | 0) < ($nbits | 0)) {
      __label__ = 5;
      break;
    } else {
      var $r_0 = $13;
      __label__ = 6;
      break;
    }
   case 5:
    var $r_0 = (HEAP32[$p + ($9 + 1 << 2) >> 2] << $14) + $13 | 0;
    __label__ = 6;
    break;
   case 6:
    var $r_0;
    var $_0 = $r_0 & (1 << $nbits) - 1;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_powm($rp, $bp, $bn, $ep, $en, $mp, $n, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ip = __stackBase__;
    var $__tmp_marker = __stackBase__ + 8;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $3 = HEAPU32[$ep + ($en - 1 << 2) >> 2];
    if ($3 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = $3 >>> 0 < 256 ? 1 : 9;
    var $12 = $7;
    __label__ = 5;
    break;
   case 4:
    var $10 = $3 >>> 0 < 16777216 ? 17 : 25;
    var $12 = $10;
    __label__ = 5;
    break;
   case 5:
    var $12;
    var $14 = STRING_TABLE.___gmpn_clz_tab + ($3 >>> ($12 >>> 0)) | 0;
    var $20 = ($en << 5) - 33 + $12 + (HEAPU8[$14] & 255) | 0;
    var $21 = _win_size($20);
    var $22 = ($n | 0) > 99;
    if ($22) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $24 = $ip | 0;
    var $25 = HEAPU32[$mp >> 2];
    var $28 = STRING_TABLE.___gmp_binvert_limb_table + ($25 >>> 1 & 127) | 0;
    var $30 = HEAPU8[$28] & 255;
    var $31 = $30 << 1;
    var $32 = (i64Math.multiply($30, 0, $25, 0), i64Math.result[0]);
    var $33 = (i64Math.multiply($32, 0, $30, 0), i64Math.result[0]);
    var $34 = $31 - $33 | 0;
    var $35 = $34 << 1;
    var $36 = (i64Math.multiply($34, 0, $25, 0), i64Math.result[0]);
    var $37 = (i64Math.multiply($36, 0, $34, 0), i64Math.result[0]);
    HEAP32[$24 >> 2] = $37 - $35 | 0;
    var $mip_0 = $24;
    __label__ = 11;
    break;
   case 7:
    var $40 = $n << 2;
    if ($40 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $43 = STACKTOP;
    STACKTOP += $40;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $47 = $43;
    __label__ = 10;
    break;
   case 9:
    var $45 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $40);
    var $47 = $45;
    __label__ = 10;
    break;
   case 10:
    var $47;
    var $48 = $47;
    ___gmpn_binvert($48, $mp, $n, $tp);
    var $mip_0 = $48;
    __label__ = 11;
    break;
   case 11:
    var $mip_0;
    var $50 = $21 - 1 | 0;
    var $52 = $n << $50 << 2;
    if ($52 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $55 = STACKTOP;
    STACKTOP += $52;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $59 = $55;
    __label__ = 14;
    break;
   case 13:
    var $57 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $52);
    var $59 = $57;
    __label__ = 14;
    break;
   case 14:
    var $59;
    var $60 = $59;
    _redcify($60, $bp, $bn, $mp, $n);
    ___gmpn_sqr($tp, $60, $n);
    if ($22) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $62 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($rp, $tp, $mp, $n, $62);
    __label__ = 17;
    break;
   case 16:
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    __label__ = 17;
    break;
   case 17:
    var $i_020 = (1 << $50) - 1 | 0;
    if (($i_020 | 0) > 0) {
      var $this_pp_021 = $60;
      var $i_022 = $i_020;
      __label__ = 18;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 18:
    var $i_022;
    var $this_pp_021;
    ___gmpn_mul_n($tp, $this_pp_021, $rp, $n);
    var $67 = $this_pp_021 + ($n << 2) | 0;
    if ($22) {
      __label__ = 21;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $69 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($67, $tp, $mp, $n, $69);
    __label__ = 20;
    break;
   case 20:
    var $i_0 = $i_022 - 1 | 0;
    if (($i_0 | 0) > 0) {
      var $this_pp_021 = $67;
      var $i_022 = $i_0;
      __label__ = 18;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    ___gmpn_redc_n($67, $tp, $mp, $n, $mip_0);
    __label__ = 20;
    break;
   case 22:
    var $72 = _getbits($ep, $20, $21);
    var $ebi_0 = $20 >>> 0 < $21 >>> 0 ? 0 : $20 - $21 | 0;
    var $76 = $72 & -$72;
    if ($76 >>> 0 < 65536) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $80 = $76 >>> 0 < 256 ? 1 : 9;
    var $85 = $80;
    __label__ = 25;
    break;
   case 24:
    var $83 = $76 >>> 0 < 16777216 ? 17 : 25;
    var $85 = $83;
    __label__ = 25;
    break;
   case 25:
    var $85;
    var $87 = STRING_TABLE.___gmpn_clz_tab + ($76 >>> ($85 >>> 0)) | 0;
    var $91 = $85 - 2 + (HEAPU8[$87] & 255) | 0;
    var $92 = $91 + $ebi_0 | 0;
    var $93 = ($n | 0) != 0;
    if ($93) {
      __label__ = 26;
      break;
    } else {
      var $ebi_1 = $92;
      __label__ = 31;
      break;
    }
   case 26:
    var $96 = $n - 1 | 0;
    var $97 = $72 >>> ($91 >>> 0) >>> 1;
    var $98 = (i64Math.multiply($97, 0, $n, 0), i64Math.result[0]);
    var $100 = HEAPU32[$60 + ($98 << 2) >> 2];
    if (($96 | 0) == 0) {
      var $__x_1 = $100;
      var $__dst_1 = $rp;
      __label__ = 30;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $__x_0 = $100;
    var $__src_0 = $60 + ($98 + 1 << 2) | 0;
    var $__dst_0 = $rp;
    var $__n3_0 = $96;
    __label__ = 28;
    break;
   case 28:
    var $__n3_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $106 = HEAP32[$__src_0 >> 2];
    var $107 = $__n3_0 - 1 | 0;
    if (($107 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      var $__x_0 = $106;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n3_0 = $107;
      __label__ = 28;
      break;
    }
   case 29:
    var $__x_1 = $106;
    var $__dst_1 = $rp + ($96 << 2) | 0;
    __label__ = 30;
    break;
   case 30:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    if (($n | 0) > 29) {
      __label__ = 40;
      break;
    } else {
      var $ebi_1 = $92;
      __label__ = 31;
      break;
    }
   case 31:
    var $ebi_1;
    if (($ebi_1 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      var $ebi_2 = $ebi_1;
      __label__ = 32;
      break;
    }
   case 32:
    var $ebi_2;
    var $112 = $ebi_2 - 1 | 0;
    if ((1 << ($112 & 31) & HEAP32[$ep + ($112 >>> 5 << 2) >> 2] | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    ___gmpn_sqr_basecase($tp, $rp, $n);
    var $121 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($rp, $tp, $mp, $n, $121);
    if (($112 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      var $ebi_2 = $112;
      __label__ = 32;
      break;
    }
   case 34:
    var $124 = _getbits($ep, $ebi_2, $21);
    var $125 = $ebi_2 >>> 0 < $21 >>> 0;
    var $this_windowsize_0 = $125 ? $ebi_2 : $21;
    var $ebi_3 = $125 ? 0 : $ebi_2 - $21 | 0;
    var $128 = $124 & -$124;
    if ($128 >>> 0 < 65536) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $132 = $128 >>> 0 < 256 ? 1 : 9;
    var $137 = $132;
    __label__ = 37;
    break;
   case 36:
    var $135 = $128 >>> 0 < 16777216 ? 17 : 25;
    var $137 = $135;
    __label__ = 37;
    break;
   case 37:
    var $137;
    var $139 = STRING_TABLE.___gmpn_clz_tab + ($128 >>> ($137 >>> 0)) | 0;
    var $143 = $137 - 2 + (HEAPU8[$139] & 255) | 0;
    var $145 = $143 + $ebi_3 | 0;
    var $this_windowsize_1 = $this_windowsize_0 - $143 | 0;
    __label__ = 38;
    break;
   case 38:
    var $this_windowsize_1;
    ___gmpn_sqr_basecase($tp, $rp, $n);
    var $147 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($rp, $tp, $mp, $n, $147);
    var $148 = $this_windowsize_1 - 1 | 0;
    if (($148 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      var $this_windowsize_1 = $148;
      __label__ = 38;
      break;
    }
   case 39:
    var $152 = $124 >>> ($143 >>> 0) >>> 1;
    var $153 = (i64Math.multiply($152, 0, $n, 0), i64Math.result[0]);
    var $154 = $60 + ($153 << 2) | 0;
    ___gmpn_mul_basecase($tp, $rp, $n, $154, $n);
    var $155 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($rp, $tp, $mp, $n, $155);
    var $ebi_1 = $145;
    __label__ = 31;
    break;
   case 40:
    if ($22) {
      var $ebi_7 = $92;
      __label__ = 50;
      break;
    } else {
      var $ebi_4 = $92;
      __label__ = 41;
      break;
    }
   case 41:
    var $ebi_4;
    if (($ebi_4 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      var $ebi_5 = $ebi_4;
      __label__ = 42;
      break;
    }
   case 42:
    var $ebi_5;
    var $158 = $ebi_5 - 1 | 0;
    if ((1 << ($158 & 31) & HEAP32[$ep + ($158 >>> 5 << 2) >> 2] | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 43:
    ___gmpn_sqr($tp, $rp, $n);
    var $167 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($rp, $tp, $mp, $n, $167);
    if (($158 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      var $ebi_5 = $158;
      __label__ = 42;
      break;
    }
   case 44:
    var $170 = _getbits($ep, $ebi_5, $21);
    var $171 = $ebi_5 >>> 0 < $21 >>> 0;
    var $this_windowsize_2 = $171 ? $ebi_5 : $21;
    var $ebi_6 = $171 ? 0 : $ebi_5 - $21 | 0;
    var $174 = $170 & -$170;
    if ($174 >>> 0 < 65536) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    var $178 = $174 >>> 0 < 256 ? 1 : 9;
    var $183 = $178;
    __label__ = 47;
    break;
   case 46:
    var $181 = $174 >>> 0 < 16777216 ? 17 : 25;
    var $183 = $181;
    __label__ = 47;
    break;
   case 47:
    var $183;
    var $185 = STRING_TABLE.___gmpn_clz_tab + ($174 >>> ($183 >>> 0)) | 0;
    var $189 = $183 - 2 + (HEAPU8[$185] & 255) | 0;
    var $191 = $189 + $ebi_6 | 0;
    var $this_windowsize_3 = $this_windowsize_2 - $189 | 0;
    __label__ = 48;
    break;
   case 48:
    var $this_windowsize_3;
    ___gmpn_sqr($tp, $rp, $n);
    var $193 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($rp, $tp, $mp, $n, $193);
    var $194 = $this_windowsize_3 - 1 | 0;
    if (($194 | 0) == 0) {
      __label__ = 49;
      break;
    } else {
      var $this_windowsize_3 = $194;
      __label__ = 48;
      break;
    }
   case 49:
    var $198 = $170 >>> ($189 >>> 0) >>> 1;
    var $199 = (i64Math.multiply($198, 0, $n, 0), i64Math.result[0]);
    var $200 = $60 + ($199 << 2) | 0;
    ___gmpn_mul_n($tp, $rp, $200, $n);
    var $201 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($rp, $tp, $mp, $n, $201);
    var $ebi_4 = $191;
    __label__ = 41;
    break;
   case 50:
    var $ebi_7;
    if (($ebi_7 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      var $ebi_8 = $ebi_7;
      __label__ = 51;
      break;
    }
   case 51:
    var $ebi_8;
    var $203 = $ebi_8 - 1 | 0;
    if ((1 << ($203 & 31) & HEAP32[$ep + ($203 >>> 5 << 2) >> 2] | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 52:
    ___gmpn_sqr($tp, $rp, $n);
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    if (($203 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      var $ebi_8 = $203;
      __label__ = 51;
      break;
    }
   case 53:
    var $214 = _getbits($ep, $ebi_8, $21);
    var $215 = $ebi_8 >>> 0 < $21 >>> 0;
    var $this_windowsize_4 = $215 ? $ebi_8 : $21;
    var $ebi_9 = $215 ? 0 : $ebi_8 - $21 | 0;
    var $218 = $214 & -$214;
    if ($218 >>> 0 < 65536) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    var $222 = $218 >>> 0 < 256 ? 1 : 9;
    var $227 = $222;
    __label__ = 56;
    break;
   case 55:
    var $225 = $218 >>> 0 < 16777216 ? 17 : 25;
    var $227 = $225;
    __label__ = 56;
    break;
   case 56:
    var $227;
    var $229 = STRING_TABLE.___gmpn_clz_tab + ($218 >>> ($227 >>> 0)) | 0;
    var $233 = $227 - 2 + (HEAPU8[$229] & 255) | 0;
    var $235 = $233 + $ebi_9 | 0;
    var $this_windowsize_5 = $this_windowsize_4 - $233 | 0;
    __label__ = 57;
    break;
   case 57:
    var $this_windowsize_5;
    ___gmpn_sqr($tp, $rp, $n);
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    var $237 = $this_windowsize_5 - 1 | 0;
    if (($237 | 0) == 0) {
      __label__ = 58;
      break;
    } else {
      var $this_windowsize_5 = $237;
      __label__ = 57;
      break;
    }
   case 58:
    var $241 = $214 >>> ($233 >>> 0) >>> 1;
    var $242 = (i64Math.multiply($241, 0, $n, 0), i64Math.result[0]);
    var $243 = $60 + ($242 << 2) | 0;
    ___gmpn_mul_n($tp, $rp, $243, $n);
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    var $ebi_7 = $235;
    __label__ = 50;
    break;
   case 59:
    if ($93) {
      __label__ = 60;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 60:
    var $245 = $n - 1 | 0;
    var $246 = HEAPU32[$rp >> 2];
    if (($245 | 0) == 0) {
      __label__ = 61;
      break;
    } else {
      var $__x19_0 = $246;
      var $rp_pn = $rp;
      var $__dst17_0 = $tp;
      var $__n16_0 = $245;
      __label__ = 62;
      break;
    }
   case 61:
    HEAP32[$tp >> 2] = $246;
    __label__ = 64;
    break;
   case 62:
    var $__n16_0;
    var $__dst17_0;
    var $rp_pn;
    var $__x19_0;
    var $__src18_0 = $rp_pn + 4 | 0;
    HEAP32[$__dst17_0 >> 2] = $__x19_0;
    var $249 = HEAP32[$__src18_0 >> 2];
    var $250 = $__n16_0 - 1 | 0;
    if (($250 | 0) == 0) {
      __label__ = 63;
      break;
    } else {
      var $__x19_0 = $249;
      var $rp_pn = $__src18_0;
      var $__dst17_0 = $__dst17_0 + 4 | 0;
      var $__n16_0 = $250;
      __label__ = 62;
      break;
    }
   case 63:
    HEAP32[$tp + ($245 << 2) >> 2] = $249;
    __label__ = 64;
    break;
   case 64:
    var $scevgep2829 = $tp + ($n << 2) | 0;
    var $253 = $n << 2;
    _memset($scevgep2829, 0, $253, 4);
    __label__ = 65;
    break;
   case 65:
    if ($22) {
      __label__ = 67;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    var $255 = HEAP32[$mip_0 >> 2];
    ___gmpn_redc_1($rp, $tp, $mp, $n, $255);
    __label__ = 68;
    break;
   case 67:
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    __label__ = 68;
    break;
   case 68:
    var $258 = ___gmpn_cmp($rp, $mp, $n);
    if (($258 | 0) > -1) {
      __label__ = 69;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 69:
    var $261 = ___gmpn_sub_n($rp, $rp, $mp, $n);
    __label__ = 70;
    break;
   case 70:
    var $262 = HEAP32[$__tmp_marker >> 2];
    if (($262 | 0) == 0) {
      __label__ = 72;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    ___gmp_tmp_reentrant_free($262);
    __label__ = 72;
    break;
   case 72:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_powm["X"] = 1;

function _redcify($rp, $up, $un, $mp, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $1 = $n + $un | 0;
    var $2 = $1 << 2;
    if ($2 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = STACKTOP;
    STACKTOP += $2;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $9 = $5;
    __label__ = 5;
    break;
   case 4:
    var $7 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $2);
    var $9 = $7;
    __label__ = 5;
    break;
   case 5:
    var $9;
    var $10 = $9;
    var $11 = $un << 2;
    var $12 = $11 + 4 | 0;
    if ($12 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $15 = STACKTOP;
    STACKTOP += $12;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $19 = $15;
    __label__ = 8;
    break;
   case 7:
    var $17 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $12);
    var $19 = $17;
    __label__ = 8;
    break;
   case 8:
    var $19;
    var $20 = $19;
    if (($n | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $22 = $n << 2;
    _memset($9, 0, $22, 4);
    __label__ = 10;
    break;
   case 10:
    if (($un | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $26 = $un - 1 | 0;
    var $27 = $10 + ($n << 2) | 0;
    var $28 = HEAPU32[$up >> 2];
    if (($26 | 0) == 0) {
      var $__x_1 = $28;
      var $__dst2_1 = $27;
      __label__ = 15;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $scevgep = $9 + (($n << 2) + $11 - 4) | 0;
    var $__x_0 = $28;
    var $up_pn = $up;
    var $__dst2_0 = $27;
    var $__n1_0 = $26;
    __label__ = 13;
    break;
   case 13:
    var $__n1_0;
    var $__dst2_0;
    var $up_pn;
    var $__x_0;
    var $__src_0 = $up_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $35 = HEAP32[$__src_0 >> 2];
    var $36 = $__n1_0 - 1 | 0;
    if (($36 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $__x_0 = $35;
      var $up_pn = $__src_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $36;
      __label__ = 13;
      break;
    }
   case 14:
    var $__x_1 = $35;
    var $__dst2_1 = $scevgep;
    __label__ = 15;
    break;
   case 15:
    var $__dst2_1;
    var $__x_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    __label__ = 16;
    break;
   case 16:
    ___gmpn_tdiv_qr($20, $rp, 0, $10, $1, $mp, $n);
    var $39 = HEAP32[$__tmp_marker >> 2];
    if (($39 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    ___gmp_tmp_reentrant_free($39);
    __label__ = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_redcify["X"] = 1;

function ___gmpn_powm_sec($rp, $bp, $bn, $ep, $en, $mp, $n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = HEAPU32[$ep + ($en - 1 << 2) >> 2];
    if ($3 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = $3 >>> 0 < 256 ? 1 : 9;
    var $12 = $7;
    __label__ = 5;
    break;
   case 4:
    var $10 = $3 >>> 0 < 16777216 ? 17 : 25;
    var $12 = $10;
    __label__ = 5;
    break;
   case 5:
    var $12;
    var $14 = STRING_TABLE.___gmpn_clz_tab + ($3 >>> ($12 >>> 0)) | 0;
    var $20 = ($en << 5) - 33 + $12 + (HEAPU8[$14] & 255) | 0;
    var $21 = _win_size7($20);
    var $22 = HEAPU32[$mp >> 2];
    var $25 = STRING_TABLE.___gmp_binvert_limb_table + ($22 >>> 1 & 127) | 0;
    var $27 = HEAPU8[$25] & 255;
    var $28 = $27 << 1;
    var $29 = (i64Math.multiply($27, 0, $22, 0), i64Math.result[0]);
    var $30 = (i64Math.multiply($29, 0, $27, 0), i64Math.result[0]);
    var $31 = $28 - $30 | 0;
    var $32 = $31 << 1;
    var $33 = (i64Math.multiply($31, 0, $22, 0), i64Math.result[0]);
    var $34 = (i64Math.multiply($33, 0, $31, 0), i64Math.result[0]);
    var $35 = $34 - $32 | 0;
    var $36 = $n << 2;
    var $37 = $tp + ($36 << 2) | 0;
    var $38 = $tp + ($36 + $n << 2) | 0;
    HEAP32[$38 >> 2] = 1;
    var $39 = (i64Math.multiply($n, 0, 6, 0), i64Math.result[0]);
    var $40 = $tp + ($39 << 2) | 0;
    _redcify8($37, $38, 1, $mp, $n, $40);
    _redcify8($38, $bp, $bn, $mp, $n, $40);
    var $41 = 1 << $21;
    var $42 = $41 - 2 | 0;
    if (($42 | 0) > 0) {
      var $this_pp_010 = $38;
      var $i_011 = $42;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $i_011;
    var $this_pp_010;
    ___gmpn_mul_basecase($tp, $this_pp_010, $n, $38, $n);
    var $44 = $this_pp_010 + ($n << 2) | 0;
    ___gmpn_redc_1_sec($44, $tp, $mp, $n, $35);
    var $45 = $i_011 - 1 | 0;
    if (($45 | 0) > 0) {
      var $this_pp_010 = $44;
      var $i_011 = $45;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $ebi_0 = $20 >>> 0 < $21 >>> 0 ? 0 : $20 - $21 | 0;
    var $49 = ($n | 0) != 0;
    if ($49) {
      __label__ = 8;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 8:
    var $51 = _getbits9($ep, $20, $21);
    var $52 = $n - 1 | 0;
    var $53 = (i64Math.multiply($51, 0, $n, 0), i64Math.result[0]);
    var $_sum1 = $53 + $36 | 0;
    var $55 = HEAPU32[$tp + ($_sum1 << 2) >> 2];
    if (($52 | 0) == 0) {
      var $__x_1 = $55;
      var $__dst_1 = $rp;
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $__x_0 = $55;
    var $__src_0 = $tp + ($_sum1 + 1 << 2) | 0;
    var $__dst_0 = $rp;
    var $__n1_0 = $52;
    __label__ = 10;
    break;
   case 10:
    var $__n1_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $61 = HEAP32[$__src_0 >> 2];
    var $62 = $__n1_0 - 1 | 0;
    if (($62 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $61;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n1_0 = $62;
      __label__ = 10;
      break;
    }
   case 11:
    var $__x_1 = $61;
    var $__dst_1 = $rp + ($52 << 2) | 0;
    __label__ = 12;
    break;
   case 12:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    if (($ebi_0 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $67 = $tp + ($n << 1 << 2) | 0;
    var $ebi_19 = $ebi_0;
    __label__ = 15;
    break;
   case 15:
    var $ebi_19;
    var $69 = _getbits9($ep, $ebi_19, $21);
    var $70 = $ebi_19 >>> 0 < $21 >>> 0;
    var $ebi_1_ = $70 ? $ebi_19 : $21;
    var $this_windowsize_0 = $ebi_1_;
    __label__ = 16;
    break;
   case 16:
    var $this_windowsize_0;
    _mpn_local_sqr($tp, $rp, $n, $67);
    ___gmpn_redc_1_sec($rp, $tp, $mp, $n, $35);
    var $72 = $this_windowsize_0 - 1 | 0;
    if (($72 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $this_windowsize_0 = $72;
      __label__ = 16;
      break;
    }
   case 17:
    var $_ = $70 ? 0 : $ebi_19 - $21 | 0;
    ___gmpn_tabselect($67, $37, $n, $41, $69);
    ___gmpn_mul_basecase($tp, $rp, $n, $67, $n);
    ___gmpn_redc_1_sec($rp, $tp, $mp, $n, $35);
    if (($_ | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      var $ebi_19 = $_;
      __label__ = 15;
      break;
    }
   case 18:
    if ($49) {
      __label__ = 19;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 19:
    var $78 = $n - 1 | 0;
    var $79 = HEAP32[$rp >> 2];
    if (($78 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $__x5_0 = $79;
      var $rp_pn = $rp;
      var $__dst3_0 = $tp;
      var $__n2_0 = $78;
      __label__ = 21;
      break;
    }
   case 20:
    HEAP32[$tp >> 2] = $79;
    __label__ = 23;
    break;
   case 21:
    var $__n2_0;
    var $__dst3_0;
    var $rp_pn;
    var $__x5_0;
    var $__src4_0 = $rp_pn + 4 | 0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $82 = HEAP32[$__src4_0 >> 2];
    var $83 = $__n2_0 - 1 | 0;
    if (($83 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      var $__x5_0 = $82;
      var $rp_pn = $__src4_0;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__n2_0 = $83;
      __label__ = 21;
      break;
    }
   case 22:
    HEAP32[$tp + ($78 << 2) >> 2] = $82;
    __label__ = 23;
    break;
   case 23:
    var $scevgep1819 = $tp + ($n << 2) | 0;
    _memset($scevgep1819, 0, $36, 4);
    __label__ = 24;
    break;
   case 24:
    ___gmpn_redc_1_sec($rp, $tp, $mp, $n, $35);
    var $86 = ___gmpn_sub_n($tp, $rp, $mp, $n);
    var $88 = ($86 | 0) == 0 & 1;
    var $89 = ___gmpn_subcnd_n($rp, $rp, $mp, $n, $88);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_powm_sec["X"] = 1;

function _redcify8($rp, $up, $un, $mp, $n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_sum = $n + $un | 0;
    var $1 = $tp + ($_sum << 2) | 0;
    if (($n | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $tp4 = $tp;
    var $3 = $n << 2;
    _memset($tp4, 0, $3, 4);
    __label__ = 4;
    break;
   case 4:
    if (($un | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $7 = $un - 1 | 0;
    var $8 = $tp + ($n << 2) | 0;
    var $9 = HEAP32[$up >> 2];
    if (($7 | 0) == 0) {
      var $__x_1 = $9;
      var $__dst2_1 = $8;
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $11 = $_sum - 1 | 0;
    var $__x_0 = $9;
    var $up_pn = $up;
    var $__dst2_0 = $8;
    var $__n1_0 = $7;
    __label__ = 7;
    break;
   case 7:
    var $__n1_0;
    var $__dst2_0;
    var $up_pn;
    var $__x_0;
    var $__src_0 = $up_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $14 = HEAP32[$__src_0 >> 2];
    var $15 = $__n1_0 - 1 | 0;
    if (($15 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $14;
      var $up_pn = $__src_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $15;
      __label__ = 7;
      break;
    }
   case 8:
    var $__x_1 = $14;
    var $__dst2_1 = $tp + ($11 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $__dst2_1;
    var $__x_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    __label__ = 10;
    break;
   case 10:
    ___gmpn_tdiv_qr($1, $rp, 0, $tp, $_sum, $mp, $n);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_tabselect($rp, $tab, $n, $nents, $which) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($nents | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    var $2 = ($n | 0) > 0;
    var $k_02 = 0;
    __label__ = 4;
    break;
   case 4:
    var $k_02;
    var $4 = ($k_02 | 0) == ($which | 0);
    var $5 = (i64Math.multiply($k_02, 0, $n, 0), i64Math.result[0]);
    if ($2) {
      var $i_01 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $i_01;
    var $6 = $rp + ($i_01 << 2) | 0;
    var $10 = $4 ? HEAP32[$tab + ($i_01 + $5 << 2) >> 2] : HEAP32[$6 >> 2];
    HEAP32[$6 >> 2] = $10;
    var $11 = $i_01 + 1 | 0;
    if (($11 | 0) == ($n | 0)) {
      __label__ = 6;
      break;
    } else {
      var $i_01 = $11;
      __label__ = 5;
      break;
    }
   case 6:
    var $12 = $k_02 + 1 | 0;
    if (($12 | 0) == ($nents | 0)) {
      __label__ = 7;
      break;
    } else {
      var $k_02 = $12;
      __label__ = 4;
      break;
    }
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_zero_p($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fits_sint_p($z) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$z + 4 >> 2];
    var $5 = HEAPU32[HEAP32[$z + 8 >> 2] >> 2];
    if (($2 | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($2 | 0) == -1) {
      __label__ = 4;
      break;
    } else if (($2 | 0) == 0) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $_0 = $5 >>> 31 ^ 1;
    __label__ = 6;
    break;
   case 4:
    var $_0 = $5 >>> 0 < 2147483649 & 1;
    __label__ = 6;
    break;
   case 5:
    var $_0 = 0;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fits_slong_p($z) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$z + 4 >> 2];
    var $5 = HEAPU32[HEAP32[$z + 8 >> 2] >> 2];
    if (($2 | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($2 | 0) == -1) {
      __label__ = 4;
      break;
    } else if (($2 | 0) == 0) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $_0 = $5 >>> 31 ^ 1;
    __label__ = 6;
    break;
   case 4:
    var $_0 = $5 >>> 0 < 2147483649 & 1;
    __label__ = 6;
    break;
   case 5:
    var $_0 = 0;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fits_sshort_p($z) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$z + 4 >> 2];
    var $5 = HEAPU32[HEAP32[$z + 8 >> 2] >> 2];
    if (($2 | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($2 | 0) == -1) {
      __label__ = 4;
      break;
    } else if (($2 | 0) == 0) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $_0 = $5 >>> 0 < 32768 & 1;
    __label__ = 6;
    break;
   case 4:
    var $_0 = $5 >>> 0 < 32769 & 1;
    __label__ = 6;
    break;
   case 5:
    var $_0 = 0;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fits_uint_p($__gmp_z) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$__gmp_z + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    return ($2 | 0) == 1 & 1;
   case 4:
    return 1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fits_ulong_p($__gmp_z) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$__gmp_z + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    return ($2 | 0) == 1 & 1;
   case 4:
    return 1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fits_ushort_p($__gmp_z) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$__gmp_z + 4 >> 2];
    var $4 = HEAP32[$__gmp_z + 8 >> 2];
    if (($2 | 0) == 0) {
      var $12 = 1;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($2 | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      var $12 = 0;
      __label__ = 5;
      break;
    }
   case 4:
    var $12 = HEAPU32[$4 >> 2] >>> 0 < 65536;
    __label__ = 5;
    break;
   case 5:
    var $12;
    return $12 & 1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_get_si($z) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $4 = HEAP32[$z + 4 >> 2];
    var $5 = HEAP32[HEAP32[$z + 8 >> 2] >> 2];
    if (($4 | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = $5 & 2147483647;
    __label__ = 6;
    break;
   case 4:
    if (($4 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 6;
      break;
    }
   case 5:
    var $_0 = ($5 + 2147483647 | -2147483648) ^ 2147483647;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_local_sqr($rp, $up, $n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) < 50) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmpn_sqr_basecase($rp, $up, $n);
    __label__ = 9;
    break;
   case 4:
    var $3 = HEAPU32[$up >> 2];
    var $4 = $3 & 65535;
    var $5 = $3 >>> 16;
    var $6 = (i64Math.multiply($4, 0, $4, 0), i64Math.result[0]);
    var $7 = (i64Math.multiply($4, 0, $5, 0), i64Math.result[0]);
    var $8 = (i64Math.multiply($5, 0, $5, 0), i64Math.result[0]);
    var $10 = ($6 >>> 16) + $7 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($10, $7);
    var $11 = $uadd.f0;
    var $12 = $uadd.f1;
    var $__x3_0 = $12 ? $8 + 65536 | 0 : $8;
    var $16 = $rp + 4 | 0;
    HEAP32[$16 >> 2] = $__x3_0 + ($11 >>> 16) | 0;
    HEAP32[$rp >> 2] = $11 << 16 | $6 & 65535;
    var $20 = $up + 4 | 0;
    var $21 = $n - 1 | 0;
    var $22 = HEAP32[$up >> 2];
    var $23 = ___gmpn_mul_1($tp, $20, $21, $22);
    HEAP32[$tp + ($21 << 2) >> 2] = $23;
    var $25 = $n - 2 | 0;
    var $i_06 = 2;
    __label__ = 6;
    break;
   case 5:
    if (($21 | 0) > 0) {
      var $_i_05 = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    var $i_06;
    var $29 = $tp + (($i_06 << 1) - 2 << 2) | 0;
    var $30 = $up + ($i_06 << 2) | 0;
    var $31 = $n - $i_06 | 0;
    var $34 = HEAP32[$up + ($i_06 - 1 << 2) >> 2];
    var $35 = ___gmpn_addmul_1($29, $30, $31, $34);
    HEAP32[$tp + ($25 + $i_06 << 2) >> 2] = $35;
    var $38 = $i_06 + 1 | 0;
    if (($38 | 0) == ($n | 0)) {
      __label__ = 5;
      break;
    } else {
      var $i_06 = $38;
      __label__ = 6;
      break;
    }
   case 7:
    var $_i_05;
    var $_sum = $_i_05 + 1 | 0;
    var $40 = HEAPU32[$up + ($_sum << 2) >> 2];
    var $41 = $40 & 65535;
    var $42 = $40 >>> 16;
    var $43 = (i64Math.multiply($41, 0, $41, 0), i64Math.result[0]);
    var $44 = (i64Math.multiply($41, 0, $42, 0), i64Math.result[0]);
    var $45 = (i64Math.multiply($42, 0, $42, 0), i64Math.result[0]);
    var $47 = ($43 >>> 16) + $44 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($47, $44);
    var $48 = $uadd1.f0;
    var $49 = $uadd1.f1;
    var $__x37_0 = $49 ? $45 + 65536 | 0 : $45;
    var $53 = $_i_05 << 1;
    HEAP32[$rp + (($53 | 1) + 2 << 2) >> 2] = $__x37_0 + ($48 >>> 16) | 0;
    HEAP32[$rp + ($53 + 2 << 2) >> 2] = $48 << 16 | $43 & 65535;
    if (($_sum | 0) == ($21 | 0)) {
      __label__ = 8;
      break;
    } else {
      var $_i_05 = $_sum;
      __label__ = 7;
      break;
    }
   case 8:
    var $60 = $n << 1;
    var $61 = $60 - 2 | 0;
    var $62 = ___gmpn_lshift($tp, $tp, $61, 1);
    var $63 = ___gmpn_add_n($16, $16, $tp, $61);
    var $65 = $rp + ($60 - 1 << 2) | 0;
    var $68 = $63 + $62 + HEAP32[$65 >> 2] | 0;
    HEAP32[$65 >> 2] = $68;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_local_sqr["X"] = 1;

function ___gmpn_powm_sec_itch($bn, $en, $n) {
  var $1 = $en << 5;
  var $2 = _win_size7($1);
  var $5 = ($n << $2) + ($n << 2) | 0;
  var $6 = $bn << 1;
  var $7 = (i64Math.multiply($n, 0, 6, 0), i64Math.result[0]);
  var $10 = ($6 | 1) + $n + $7 | 0;
  var $_ = ($5 | 0) > ($10 | 0) ? $5 : $10;
  return $_;
}

function ___gmpn_remove($wp, $wn, $up, $un, $vp, $vn, $cap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 260;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $pwpsp = __stackBase__;
    var $pwpsn = __stackBase__ + 128;
    var $__tmp_marker = __stackBase__ + 256;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $3 = (($vn + $un | 0) / 2 & -1) << 2;
    if ($3 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $6 = STACKTOP;
    STACKTOP += $3;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $10 = $6;
    __label__ = 5;
    break;
   case 4:
    var $8 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $3);
    var $10 = $8;
    __label__ = 5;
    break;
   case 5:
    var $10;
    var $11 = $10;
    var $12 = $un << 2;
    if ($12 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $15 = STACKTOP;
    STACKTOP += $12;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $16 = STACKTOP;
    STACKTOP += $12;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $21 = $16;
    var $_in = $15;
    __label__ = 8;
    break;
   case 7:
    var $18 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $12);
    var $19 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $12);
    var $21 = $19;
    var $_in = $18;
    __label__ = 8;
    break;
   case 8:
    var $_in;
    var $21;
    var $22 = $_in;
    var $23 = $21;
    var $24 = $12 + 128 | 0;
    if ($24 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $27 = STACKTOP;
    STACKTOP += $24;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $31 = $27;
    __label__ = 11;
    break;
   case 10:
    var $29 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $24);
    var $31 = $29;
    __label__ = 11;
    break;
   case 11:
    var $31;
    var $32 = $31;
    var $33 = $un >> 1;
    var $34 = ___gmpn_bdiv_qr_itch($un, $33);
    var $35 = $34 << 2;
    if ($35 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $38 = STACKTOP;
    STACKTOP += $35;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $42 = $38;
    __label__ = 14;
    break;
   case 13:
    var $40 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $35);
    var $42 = $40;
    __label__ = 14;
    break;
   case 14:
    var $42;
    var $43 = $42;
    if (($un | 0) == 0) {
      var $npowers_0 = 0;
      var $qp_0 = $22;
      var $np_0 = $32;
      var $pp_0 = $vp;
      var $qp2_0 = $23;
      var $pn_0 = $vn;
      var $qn_0 = 0;
      __label__ = 20;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $46 = $un - 1 | 0;
    var $47 = HEAPU32[$up >> 2];
    if (($46 | 0) == 0) {
      var $__x_1 = $47;
      var $__dst_1 = $22;
      __label__ = 19;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $scevgep = $_in + ($12 - 4) | 0;
    var $__x_0 = $47;
    var $up_pn = $up;
    var $__dst_0 = $22;
    var $__n_0 = $46;
    __label__ = 17;
    break;
   case 17:
    var $__n_0;
    var $__dst_0;
    var $up_pn;
    var $__x_0;
    var $__src_0 = $up_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $52 = HEAP32[$__src_0 >> 2];
    var $53 = $__n_0 - 1 | 0;
    if (($53 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      var $__x_0 = $52;
      var $up_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $53;
      __label__ = 17;
      break;
    }
   case 18:
    var $__x_1 = $52;
    var $__dst_1 = $scevgep;
    __label__ = 19;
    break;
   case 19:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $npowers_0 = 0;
    var $qp_0 = $22;
    var $np_0 = $32;
    var $pp_0 = $vp;
    var $qp2_0 = $23;
    var $pn_0 = $vn;
    var $qn_0 = $un;
    __label__ = 20;
    break;
   case 20:
    var $qn_0;
    var $pn_0;
    var $qp2_0;
    var $pp_0;
    var $np_0;
    var $qp_0;
    var $npowers_0;
    if (($qn_0 | 0) < ($pn_0 | 0)) {
      var $npowers_1 = $npowers_0;
      var $qp_1 = $qp_0;
      var $qp2_1 = $qp2_0;
      var $qn_1 = $qn_0;
      __label__ = 25;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $58 = ___gmpn_bdiv_qr($qp2_0, $11, $qp_0, $qn_0, $pp_0, $pn_0, $43);
    var $59 = _mpn_zero_p($11, $pn_0);
    if (($59 | 0) == 0) {
      var $npowers_1 = $npowers_0;
      var $qp_1 = $qp_0;
      var $qp2_1 = $qp2_0;
      var $qn_1 = $qn_0;
      __label__ = 25;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $62 = $qn_0 - $pn_0 | 0;
    var $67 = ((HEAP32[$qp2_0 + ($62 << 2) >> 2] | 0) != 0 & 1) + $62 | 0;
    HEAP32[$pwpsp + ($npowers_0 << 2) >> 2] = $pp_0;
    HEAP32[$pwpsn + ($npowers_0 << 2) >> 2] = $pn_0;
    var $70 = $npowers_0 + 1 | 0;
    if (((2 << $70) - 1 | 0) >>> 0 > $cap >>> 0) {
      var $npowers_1 = $70;
      var $qp_1 = $qp2_0;
      var $qp2_1 = $qp_0;
      var $qn_1 = $67;
      __label__ = 25;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $76 = ($pn_0 << 1) - 1 | 0;
    if (($76 | 0) > ($67 | 0)) {
      var $npowers_1 = $70;
      var $qp_1 = $qp2_0;
      var $qp2_1 = $qp_0;
      var $qn_1 = $67;
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    ___gmpn_sqr($np_0, $pp_0, $pn_0);
    var $83 = ((HEAP32[$np_0 + ($76 << 2) >> 2] | 0) != 0 & 1) + $76 | 0;
    var $qp_0 = $qp2_0;
    var $npowers_0 = $70;
    var $pp_0 = $np_0;
    var $np_0 = $np_0 + ($83 << 2) | 0;
    var $pn_0 = $83;
    var $qn_0 = $67;
    var $qp2_0 = $qp_0;
    __label__ = 20;
    break;
   case 25:
    var $qn_1;
    var $qp2_1;
    var $qp_1;
    var $npowers_1;
    var $qp_2_ph = $qp_1;
    var $qp2_2_ph = $qp2_1;
    var $pwr_0_ph = (1 << $npowers_1) - 1 | 0;
    var $qn_2_ph = $qn_1;
    var $i_0_in_ph = $npowers_1;
    __label__ = 26;
    break;
   case 26:
    var $i_0_in_ph;
    var $qn_2_ph;
    var $pwr_0_ph;
    var $qp2_2_ph;
    var $qp_2_ph;
    var $i_0_in = $i_0_in_ph;
    __label__ = 27;
    break;
   case 27:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 28:
    var $91 = HEAP32[$pwpsp + ($i_0 << 2) >> 2];
    var $93 = HEAPU32[$pwpsn + ($i_0 << 2) >> 2];
    if (($qn_2_ph | 0) < ($93 | 0)) {
      var $i_0_in = $i_0;
      __label__ = 27;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $97 = $pwr_0_ph + (1 << $i_0) | 0;
    if ($97 >>> 0 > $cap >>> 0) {
      var $i_0_in = $i_0;
      __label__ = 27;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $100 = ___gmpn_bdiv_qr($qp2_2_ph, $11, $qp_2_ph, $qn_2_ph, $91, $93, $43);
    var $101 = _mpn_zero_p($11, $93);
    if (($101 | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 27;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $104 = $qn_2_ph - $93 | 0;
    var $qp_2_ph = $qp2_2_ph;
    var $pwr_0_ph = $97;
    var $qn_2_ph = ((HEAP32[$qp2_2_ph + ($104 << 2) >> 2] | 0) != 0 & 1) + $104 | 0;
    var $i_0_in_ph = $i_0;
    var $qp2_2_ph = $qp_2_ph;
    __label__ = 26;
    break;
   case 32:
    if (($qn_2_ph | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $113 = $qn_2_ph - 1 | 0;
    var $114 = HEAPU32[$qp_2_ph >> 2];
    if (($113 | 0) == 0) {
      var $__x5_1 = $114;
      var $__dst3_1 = $wp;
      __label__ = 36;
      break;
    } else {
      var $__x5_0 = $114;
      var $qp_2_pn = $qp_2_ph;
      var $__dst3_0 = $wp;
      var $__n2_0 = $113;
      __label__ = 34;
      break;
    }
   case 34:
    var $__n2_0;
    var $__dst3_0;
    var $qp_2_pn;
    var $__x5_0;
    var $__src4_0 = $qp_2_pn + 4 | 0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $117 = HEAP32[$__src4_0 >> 2];
    var $118 = $__n2_0 - 1 | 0;
    if (($118 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $__x5_0 = $117;
      var $qp_2_pn = $__src4_0;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__n2_0 = $118;
      __label__ = 34;
      break;
    }
   case 35:
    var $__x5_1 = $117;
    var $__dst3_1 = $wp + ($113 << 2) | 0;
    __label__ = 36;
    break;
   case 36:
    var $__dst3_1;
    var $__x5_1;
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    __label__ = 37;
    break;
   case 37:
    HEAP32[$wn >> 2] = $qn_2_ph;
    var $121 = HEAP32[$__tmp_marker >> 2];
    if (($121 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    ___gmp_tmp_reentrant_free($121);
    __label__ = 39;
    break;
   case 39:
    STACKTOP = __stackBase__;
    return $pwr_0_ph;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_remove["X"] = 1;

function ___gmpz_get_d($z) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$z + 4 >> 2];
    if (($2 | 0) == 0) {
      var $_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = HEAP32[$z + 8 >> 2];
    var $9 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $10 = ___gmpn_get_d($6, $9, $2, 0);
    var $_0 = $10;
    __label__ = 4;
    break;
   case 4:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_get_d_2exp($exp2, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$src + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$exp2 >> 2] = 0;
    var $_0 = 0;
    __label__ = 8;
    break;
   case 4:
    var $7 = HEAPU32[$src + 8 >> 2];
    var $10 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $13 = HEAPU32[$7 + ($10 - 1 << 2) >> 2];
    if ($13 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $17 = $13 >>> 0 < 256 ? 1 : 9;
    var $22 = $17;
    __label__ = 7;
    break;
   case 6:
    var $20 = $13 >>> 0 < 16777216 ? 17 : 25;
    var $22 = $20;
    __label__ = 7;
    break;
   case 7:
    var $22;
    var $24 = STRING_TABLE.___gmpn_clz_tab + ($13 >>> ($22 >>> 0)) | 0;
    var $30 = ($10 << 5) - 33 + $22 + (HEAPU8[$24] & 255) | 0;
    HEAP32[$exp2 >> 2] = $30;
    var $31 = -$30 | 0;
    var $32 = ___gmpn_get_d($7, $10, $2, $31);
    var $_0 = $32;
    __label__ = 8;
    break;
   case 8:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_add($w, $u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $4 = HEAP32[$v + 4 >> 2];
    var $7 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $10 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $11 = ($7 | 0) < ($10 | 0);
    var $_ = $11 ? $4 : $2;
    var $_2 = $11 ? $2 : $4;
    var $_3 = $11 ? $10 : $7;
    var $u_v = $11 ? $u : $v;
    var $v_u = $11 ? $v : $u;
    var $_4 = $11 ? $7 : $10;
    var $12 = $_3 + 1 | 0;
    if ((HEAP32[$w >> 2] | 0) < ($12 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $17 = ___gmpz_realloc($w, $12);
    __label__ = 4;
    break;
   case 4:
    var $20 = HEAP32[$v_u + 8 >> 2];
    var $22 = HEAP32[$u_v + 8 >> 2];
    var $24 = HEAP32[$w + 8 >> 2];
    if (($_ ^ $_2 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 5:
    if (($_3 | 0) == ($_4 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $30 = ___gmpn_sub($24, $20, $_3, $22, $_4);
    var $wsize_0 = $_3;
    __label__ = 7;
    break;
   case 7:
    var $wsize_0;
    if (($wsize_0 | 0) > 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $34 = $wsize_0 - 1 | 0;
    if ((HEAP32[$24 + ($34 << 2) >> 2] | 0) == 0) {
      var $wsize_0 = $34;
      __label__ = 7;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $_wsize_0 = ($_ | 0) < 0 ? -$wsize_0 | 0 : $wsize_0;
    var $wsize_3 = $_wsize_0;
    __label__ = 21;
    break;
   case 10:
    var $42 = ___gmpn_cmp($20, $22, $_3);
    if (($42 | 0) < 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 11:
    var $45 = ___gmpn_sub_n($24, $22, $20, $_3);
    var $wsize_1 = $_3;
    __label__ = 12;
    break;
   case 12:
    var $wsize_1;
    if (($wsize_1 | 0) > 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $49 = $wsize_1 - 1 | 0;
    if ((HEAP32[$24 + ($49 << 2) >> 2] | 0) == 0) {
      var $wsize_1 = $49;
      __label__ = 12;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $_wsize_1 = ($_ | 0) > -1 ? -$wsize_1 | 0 : $wsize_1;
    var $wsize_3 = $_wsize_1;
    __label__ = 21;
    break;
   case 15:
    var $57 = ___gmpn_sub_n($24, $20, $22, $_3);
    var $wsize_2 = $_3;
    __label__ = 16;
    break;
   case 16:
    var $wsize_2;
    if (($wsize_2 | 0) > 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $61 = $wsize_2 - 1 | 0;
    if ((HEAP32[$24 + ($61 << 2) >> 2] | 0) == 0) {
      var $wsize_2 = $61;
      __label__ = 16;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $_wsize_2 = ($_ | 0) < 0 ? -$wsize_2 | 0 : $wsize_2;
    var $wsize_3 = $_wsize_2;
    __label__ = 21;
    break;
   case 19:
    var $69 = ___gmpn_add($24, $20, $_3, $22, $_4);
    var $70 = $24 + ($_3 << 2) | 0;
    HEAP32[$70 >> 2] = $69;
    var $71 = $69 + $_3 | 0;
    if (($_ | 0) < 0) {
      __label__ = 20;
      break;
    } else {
      var $wsize_3 = $71;
      __label__ = 21;
      break;
    }
   case 20:
    var $wsize_3 = -$71 | 0;
    __label__ = 21;
    break;
   case 21:
    var $wsize_3;
    HEAP32[$w + 4 >> 2] = $wsize_3;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_add["X"] = 1;

function ___gmpz_get_ui($__gmp_z) {
  var $7 = (HEAP32[$__gmp_z + 4 >> 2] | 0) != 0 ? HEAP32[HEAP32[$__gmp_z + 8 >> 2] >> 2] : 0;
  return $7;
}

function ___gmpz_get_str($res_str, $base, $x) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$x + 4 >> 2];
    if (($base | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($base | 0) == 0) {
      var $_02 = 10;
      var $num_to_text_0 = STRING_TABLE.__str494 | 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($base | 0) > 36) {
      __label__ = 5;
      break;
    } else {
      var $_02 = $base;
      var $num_to_text_0 = STRING_TABLE.__str494 | 0;
      __label__ = 7;
      break;
    }
   case 5:
    if (($base | 0) > 62) {
      var $_0 = 0;
      __label__ = 37;
      break;
    } else {
      var $_02 = $base;
      var $num_to_text_0 = STRING_TABLE.__str1131 | 0;
      __label__ = 7;
      break;
    }
   case 6:
    var $_02 = -$base | 0;
    var $num_to_text_0 = STRING_TABLE.__str1495 | 0;
    __label__ = 7;
    break;
   case 7:
    var $num_to_text_0;
    var $_02;
    if (($res_str | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_01 = $res_str;
      var $alloc_size_1 = 0;
      __label__ = 16;
      break;
    }
   case 8:
    var $17 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($17 | 0) == 0) {
      var $alloc_size_0 = 1;
      __label__ = 15;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $24 = HEAPU32[HEAP32[$x + 8 >> 2] + ($17 - 1 << 2) >> 2];
    if ($24 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $28 = $24 >>> 0 < 256 ? 1 : 9;
    var $33 = $28;
    __label__ = 12;
    break;
   case 11:
    var $31 = $24 >>> 0 < 16777216 ? 17 : 25;
    var $33 = $31;
    __label__ = 12;
    break;
   case 12:
    var $33;
    var $35 = STRING_TABLE.___gmpn_clz_tab + ($24 >>> ($33 >>> 0)) | 0;
    var $41 = ($17 << 5) - 33 + $33 + (HEAPU8[$35] & 255) | 0;
    if (($_02 - 1 & $_02 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $47 = HEAPU32[___gmpn_bases + $_02 * 20 + 12 >> 2];
    var $49 = $41 - 1 + $47 | 0;
    var $50 = Math.floor(($49 >>> 0) / ($47 >>> 0));
    var $alloc_size_0 = $50;
    __label__ = 15;
    break;
   case 14:
    var $52 = $41 >>> 0;
    var $53 = ___gmpn_bases + $_02 * 20 + 4 | 0;
    var $54 = (tempDoubleI32[0] = HEAP32[$53 >> 2], tempDoubleI32[1] = HEAP32[$53 + 4 >> 2], tempDoubleF64[0]);
    var $55 = $52 * $54;
    var $56 = $55 >= 0 ? Math.floor($55) : Math.ceil($55);
    var $alloc_size_0 = $56 + 1 | 0;
    __label__ = 15;
    break;
   case 15:
    var $alloc_size_0;
    var $60 = ($2 >>> 31) + 1 + $alloc_size_0 | 0;
    var $61 = HEAP32[___gmp_allocate_func >> 2];
    var $62 = FUNCTION_TABLE[$61]($60);
    var $_01 = $62;
    var $alloc_size_1 = $60;
    __label__ = 16;
    break;
   case 16:
    var $alloc_size_1;
    var $_01;
    if (($2 | 0) < 0) {
      __label__ = 17;
      break;
    } else {
      var $_1 = $_01;
      var $x_size_0 = $2;
      __label__ = 18;
      break;
    }
   case 17:
    HEAP8[$_01] = 45;
    var $_1 = $_01 + 1 | 0;
    var $x_size_0 = -$2 | 0;
    __label__ = 18;
    break;
   case 18:
    var $x_size_0;
    var $_1;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $69 = $x + 8 | 0;
    if (($_02 - 1 & $_02 | 0) == 0) {
      var $xp_0 = HEAP32[$69 >> 2];
      __label__ = 28;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $75 = $x_size_0 << 2;
    var $76 = $75 + 4 | 0;
    if ($76 >>> 0 < 65536) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $79 = STACKTOP;
    STACKTOP += $76;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $83 = $79;
    __label__ = 22;
    break;
   case 21:
    var $81 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $76);
    var $83 = $81;
    __label__ = 22;
    break;
   case 22:
    var $83;
    var $84 = $83;
    if (($x_size_0 | 0) == 0) {
      var $xp_0 = $84;
      __label__ = 28;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $87 = $x_size_0 - 1 | 0;
    var $88 = HEAP32[$69 >> 2];
    var $89 = HEAPU32[$88 >> 2];
    if (($87 | 0) == 0) {
      var $__x_1 = $89;
      var $__dst_1 = $84;
      __label__ = 27;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $scevgep = $83 + ($75 - 4) | 0;
    var $__x_0 = $89;
    var $_pn = $88;
    var $__dst_0 = $84;
    var $__n_0 = $87;
    __label__ = 25;
    break;
   case 25:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $94 = HEAP32[$__src_0 >> 2];
    var $95 = $__n_0 - 1 | 0;
    if (($95 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $__x_0 = $94;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $95;
      __label__ = 25;
      break;
    }
   case 26:
    var $__x_1 = $94;
    var $__dst_1 = $scevgep;
    __label__ = 27;
    break;
   case 27:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $xp_0 = $84;
    __label__ = 28;
    break;
   case 28:
    var $xp_0;
    var $99 = ___gmpn_get_str($_1, $_02, $xp_0, $x_size_0);
    if (HEAP8[$_1] << 24 >> 24 != 0 | ($99 | 0) == 1) {
      var $str_0 = $_1;
      var $str_size_0 = $99;
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $str_0 = $_1 + 1 | 0;
    var $str_size_0 = $99 - 1 | 0;
    __label__ = 30;
    break;
   case 30:
    var $str_size_0;
    var $str_0;
    if (($str_size_0 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      var $i_04 = 0;
      __label__ = 31;
      break;
    }
   case 31:
    var $i_04;
    var $112 = HEAP8[$num_to_text_0 + (HEAP8[$str_0 + $i_04 | 0] << 24 >> 24) | 0];
    HEAP8[$_1 + $i_04 | 0] = $112;
    var $114 = $i_04 + 1 | 0;
    if (($114 | 0) == ($str_size_0 | 0)) {
      __label__ = 32;
      break;
    } else {
      var $i_04 = $114;
      __label__ = 31;
      break;
    }
   case 32:
    HEAP8[$_1 + $str_size_0 | 0] = 0;
    var $116 = HEAP32[$__tmp_marker >> 2];
    if (($116 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    ___gmp_tmp_reentrant_free($116);
    __label__ = 34;
    break;
   case 34:
    if (($alloc_size_1 | 0) == 0) {
      var $_0 = $_01;
      __label__ = 37;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $126 = $_1 - $_01 + 1 + $str_size_0 | 0;
    if (($alloc_size_1 | 0) == ($126 | 0)) {
      var $_0 = $_01;
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $129 = HEAP32[___gmp_reallocate_func >> 2];
    var $130 = FUNCTION_TABLE[$129]($_01, $alloc_size_1, $126);
    var $_0 = $130;
    __label__ = 37;
    break;
   case 37:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_get_str["X"] = 1;

function ___gmpz_init($x) {
  HEAP32[$x >> 2] = 1;
  var $2 = HEAP32[___gmp_allocate_func >> 2];
  var $3 = FUNCTION_TABLE[$2](4);
  var $4 = $3;
  HEAP32[$x + 8 >> 2] = $4;
  HEAP32[$x + 4 >> 2] = 0;
  return;
}

function ___gmpz_init2($x, $bits) {
  var $5 = (($bits - (($bits | 0) != 0 & 1) | 0) >>> 5) + 1 | 0;
  var $6 = HEAP32[___gmp_allocate_func >> 2];
  var $7 = $5 << 2;
  var $8 = FUNCTION_TABLE[$6]($7);
  var $9 = $8;
  HEAP32[$x + 8 >> 2] = $9;
  HEAP32[$x >> 2] = $5;
  HEAP32[$x + 4 >> 2] = 0;
  return;
}

function ___gmpz_inits($x) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ap = __stackBase__;
    HEAP32[$ap >> 2] = arguments[___gmpz_inits.length];
    if (($x | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $x;
      __label__ = 3;
      break;
    }
   case 3:
    var $_01;
    ___gmpz_init($_01);
    var $3 = HEAP32[$ap >> 2];
    var $4 = $3;
    var $5 = $3 + 4 | 0;
    HEAP32[$ap >> 2] = $5;
    var $6 = HEAP32[$4 >> 2];
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $6;
      __label__ = 3;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_inp_str($x, $stream, $base) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_stream = ($stream | 0) == 0 ? HEAP32[_stdin >> 2] : $stream;
    var $nread_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $nread_0;
    var $4 = _getc($_stream);
    var $5 = $nread_0 + 1 | 0;
    var $6 = _isspace($4);
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $nread_0 = $5;
      __label__ = 3;
      break;
    }
   case 4:
    var $9 = ___gmpz_inp_str_nowhite($x, $_stream, $base, $4, $5);
    return $9;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_inp_str_nowhite($x, $stream, $base, $c, $nread) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($base | 0) > 36) {
      __label__ = 3;
      break;
    } else {
      var $digit_value_0 = STRING_TABLE.___gmp_digit_value_tab | 0;
      __label__ = 4;
      break;
    }
   case 3:
    if (($base | 0) > 62) {
      var $_0 = 0;
      __label__ = 28;
      break;
    } else {
      var $digit_value_0 = STRING_TABLE.___gmp_digit_value_tab + 224 | 0;
      __label__ = 4;
      break;
    }
   case 4:
    var $digit_value_0;
    if (($c | 0) == 45) {
      __label__ = 5;
      break;
    } else {
      var $_05 = $c;
      var $_06 = $nread;
      var $negative_0 = 0;
      __label__ = 6;
      break;
    }
   case 5:
    var $7 = _getc($stream);
    var $_05 = $7;
    var $_06 = $nread + 1 | 0;
    var $negative_0 = 1;
    __label__ = 6;
    break;
   case 6:
    var $negative_0;
    var $_06;
    var $_05;
    if (($_05 | 0) == -1) {
      var $_0 = 0;
      __label__ = 28;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $15 = ($base | 0) == 0;
    var $16 = $15 ? 10 : $base;
    if ((HEAPU8[$digit_value_0 + $_05 | 0] & 255 | 0) < ($16 | 0)) {
      __label__ = 8;
      break;
    } else {
      var $_0 = 0;
      __label__ = 28;
      break;
    }
   case 8:
    if ($15) {
      __label__ = 9;
      break;
    } else {
      var $_04_ph = $base;
      var $_1_ph = $_05;
      var $_17_ph = $_06;
      __label__ = 14;
      break;
    }
   case 9:
    if (($_05 | 0) == 48) {
      __label__ = 10;
      break;
    } else {
      var $_17_lcssa = $_06;
      var $_1_lcssa = $_05;
      var $_04_ph12 = 10;
      __label__ = 16;
      break;
    }
   case 10:
    var $22 = _getc($stream);
    if (($22 | 0) == 120 || ($22 | 0) == 88) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $24 = _getc($stream);
    var $_04_ph = 16;
    var $_1_ph = $24;
    var $_17_ph = $_06 + 2 | 0;
    __label__ = 14;
    break;
   case 12:
    if (($22 | 0) == 98 || ($22 | 0) == 66) {
      __label__ = 13;
      break;
    } else {
      var $_04_ph = 8;
      var $_1_ph = $22;
      var $_17_ph = $_06 + 1 | 0;
      __label__ = 14;
      break;
    }
   case 13:
    var $29 = _getc($stream);
    var $_04_ph = 2;
    var $_1_ph = $29;
    var $_17_ph = $_06 + 2 | 0;
    __label__ = 14;
    break;
   case 14:
    var $_17_ph;
    var $_1_ph;
    var $_04_ph;
    if (($_1_ph | 0) == 48) {
      var $_179 = $_17_ph;
      __label__ = 15;
      break;
    } else {
      var $_17_lcssa = $_17_ph;
      var $_1_lcssa = $_1_ph;
      var $_04_ph12 = $_04_ph;
      __label__ = 16;
      break;
    }
   case 15:
    var $_179;
    var $32 = _getc($stream);
    var $33 = $_179 + 1 | 0;
    if (($32 | 0) == 48) {
      var $_179 = $33;
      __label__ = 15;
      break;
    } else {
      var $_17_lcssa = $33;
      var $_1_lcssa = $32;
      var $_04_ph12 = $_04_ph;
      __label__ = 16;
      break;
    }
   case 16:
    var $_04_ph12;
    var $_1_lcssa;
    var $_17_lcssa;
    var $35 = HEAP32[___gmp_allocate_func >> 2];
    var $36 = FUNCTION_TABLE[$35](100);
    var $_2 = $_1_lcssa;
    var $str_0 = $36;
    var $alloc_size_0 = 100;
    var $str_size_0 = 0;
    __label__ = 17;
    break;
   case 17:
    var $str_size_0;
    var $alloc_size_0;
    var $str_0;
    var $_2;
    if (($_2 | 0) == -1) {
      __label__ = 22;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $41 = HEAPU8[$digit_value_0 + $_2 | 0];
    if (($41 & 255 | 0) < ($_04_ph12 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 19:
    if ($str_size_0 >>> 0 < $alloc_size_0 >>> 0) {
      var $str_1 = $str_0;
      var $alloc_size_1 = $alloc_size_0;
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $47 = (i64Math.multiply($alloc_size_0, 0, 3, 0), i64Math.result[0]);
    var $48 = $47 >>> 1;
    var $49 = HEAP32[___gmp_reallocate_func >> 2];
    var $50 = FUNCTION_TABLE[$49]($str_0, $alloc_size_0, $48);
    var $str_1 = $50;
    var $alloc_size_1 = $48;
    __label__ = 21;
    break;
   case 21:
    var $alloc_size_1;
    var $str_1;
    var $52 = $str_size_0 + 1 | 0;
    HEAP8[$str_1 + $str_size_0 | 0] = $41;
    var $54 = _getc($stream);
    var $_2 = $54;
    var $str_0 = $str_1;
    var $alloc_size_0 = $alloc_size_1;
    var $str_size_0 = $52;
    __label__ = 17;
    break;
   case 22:
    var $56 = _ungetc($_2, $stream);
    var $58 = $_17_lcssa - 1 + $str_size_0 | 0;
    if (($str_size_0 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    HEAP32[$x + 4 >> 2] = 0;
    __label__ = 27;
    break;
   case 24:
    var $64 = ___gmpn_bases + $_04_ph12 * 20 + 4 | 0;
    var $65 = (tempDoubleI32[0] = HEAP32[$64 >> 2], tempDoubleI32[1] = HEAP32[$64 + 4 >> 2], tempDoubleF64[0]);
    var $69 = (($str_size_0 >>> 0) / ($65 * 32) & -1) + 2 | 0;
    if (($69 | 0) > (HEAP32[$x >> 2] | 0)) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $74 = ___gmpz_realloc($x, $69);
    __label__ = 26;
    break;
   case 26:
    var $77 = HEAP32[$x + 8 >> 2];
    var $78 = ___gmpn_set_str($77, $str_0, $str_size_0, $_04_ph12);
    var $81 = ($negative_0 | 0) != 0 ? -$78 | 0 : $78;
    HEAP32[$x + 4 >> 2] = $81;
    __label__ = 27;
    break;
   case 27:
    var $84 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$84]($str_0, $alloc_size_0);
    var $_0 = $58;
    __label__ = 28;
    break;
   case 28:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_inp_str_nowhite["X"] = 1;

function ___gmpz_init_set($w, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $7 = ($5 | 0) > 1 ? $5 : 1;
    HEAP32[$w >> 2] = $7;
    var $9 = HEAP32[___gmp_allocate_func >> 2];
    var $10 = $7 << 2;
    var $11 = FUNCTION_TABLE[$9]($10);
    var $12 = $11;
    HEAP32[$w + 8 >> 2] = $12;
    var $15 = HEAP32[$u + 8 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $18 = $5 - 1 | 0;
    var $19 = HEAP32[$15 >> 2];
    if (($18 | 0) == 0) {
      var $__x_1 = $19;
      var $__dst_1 = $12;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $scevgep = $11 + (($5 << 2) - 4) | 0;
    var $__x_0 = $19;
    var $_pn = $15;
    var $__dst_0 = $12;
    var $__n_0 = $18;
    __label__ = 5;
    break;
   case 5:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $25 = HEAP32[$__src_0 >> 2];
    var $26 = $__n_0 - 1 | 0;
    if (($26 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $__x_0 = $25;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $26;
      __label__ = 5;
      break;
    }
   case 6:
    var $__x_1 = $25;
    var $__dst_1 = $scevgep;
    __label__ = 7;
    break;
   case 7:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 8;
    break;
   case 8:
    HEAP32[$w + 4 >> 2] = $2;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_init_set_d($dest, $val) {
  HEAP32[$dest >> 2] = 1;
  var $2 = HEAP32[___gmp_allocate_func >> 2];
  var $3 = FUNCTION_TABLE[$2](4);
  var $4 = $3;
  HEAP32[$dest + 8 >> 2] = $4;
  HEAP32[$dest + 4 >> 2] = 0;
  ___gmpz_set_d($dest, $val);
  return;
}

function ___gmpz_init_set_si($dest, $val) {
  HEAP32[$dest >> 2] = 1;
  var $2 = HEAP32[___gmp_allocate_func >> 2];
  var $3 = FUNCTION_TABLE[$2](4);
  var $4 = $3;
  HEAP32[$dest + 8 >> 2] = $4;
  var $6 = ($val | 0) > -1;
  var $8 = $6 ? $val : -$val | 0;
  HEAP32[$4 >> 2] = $8;
  var $9 = ($val | 0) != 0;
  var $12 = $6 ? $9 & 1 : $9 << 31 >> 31;
  HEAP32[$dest + 4 >> 2] = $12;
  return;
}

function ___gmpz_init_set_str($x, $str, $base) {
  HEAP32[$x >> 2] = 1;
  var $2 = HEAP32[___gmp_allocate_func >> 2];
  var $3 = FUNCTION_TABLE[$2](4);
  var $4 = $3;
  HEAP32[$x + 8 >> 2] = $4;
  HEAP32[$x + 4 >> 2] = 0;
  var $7 = ___gmpz_set_str($x, $str, $base);
  return $7;
}

function ___gmpz_add_ui($w, $u, $vval) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $3 = ($2 | 0) > -1;
    var $5 = $3 ? $2 : -$2 | 0;
    var $6 = $5 + 1 | 0;
    if ((HEAP32[$w >> 2] | 0) < ($6 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $11 = ___gmpz_realloc($w, $6);
    __label__ = 4;
    break;
   case 4:
    var $14 = HEAPU32[$u + 8 >> 2];
    var $16 = HEAPU32[$w + 8 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$16 >> 2] = $vval;
    HEAP32[$w + 4 >> 2] = ($vval | 0) != 0 & 1;
    __label__ = 13;
    break;
   case 6:
    if ($3) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $24 = ___gmpn_add_1($16, $14, $5, $vval);
    var $25 = $16 + ($5 << 2) | 0;
    HEAP32[$25 >> 2] = $24;
    var $wsize_0 = $24 + $5 | 0;
    __label__ = 12;
    break;
   case 8:
    if (($5 | 0) == 1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 9:
    var $30 = HEAPU32[$14 >> 2];
    if ($30 >>> 0 < $vval >>> 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    HEAP32[$16 >> 2] = $vval - $30 | 0;
    var $wsize_0 = 1;
    __label__ = 12;
    break;
   case 11:
    var $35 = ___gmpn_sub_1($16, $14, $5, $vval);
    var $wsize_0 = ((HEAP32[$16 + ($5 - 1 << 2) >> 2] | 0) == 0 & 1) - $5 | 0;
    __label__ = 12;
    break;
   case 12:
    var $wsize_0;
    HEAP32[$w + 4 >> 2] = $wsize_0;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_add_ui["X"] = 1;

function ___gmpz_init_set_ui($dest, $val) {
  HEAP32[$dest >> 2] = 1;
  var $2 = HEAP32[___gmp_allocate_func >> 2];
  var $3 = FUNCTION_TABLE[$2](4);
  var $4 = $3;
  HEAP32[$dest + 8 >> 2] = $4;
  HEAP32[$4 >> 2] = $val;
  HEAP32[$dest + 4 >> 2] = ($val | 0) != 0 & 1;
  return;
}

function ___gmpz_mul($w, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$u + 4 >> 2];
    var $4 = HEAP32[$v + 4 >> 2];
    var $5 = $4 ^ $2;
    var $8 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $11 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $12 = ($8 | 0) < ($11 | 0);
    var $_ = $12 ? $8 : $11;
    var $_3 = $12 ? $11 : $8;
    var $u_v = $12 ? $u : $v;
    var $v_u = $12 ? $v : $u;
    if (($_ | 0) == 0) {
      __label__ = 3;
      break;
    } else if (($_ | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    HEAP32[$w + 4 >> 2] = 0;
    __label__ = 38;
    break;
   case 4:
    var $16 = $_3 + 1 | 0;
    if (($16 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $21 = ___gmpz_realloc($w, $16);
    __label__ = 6;
    break;
   case 6:
    var $24 = HEAP32[$w + 8 >> 2];
    var $26 = HEAP32[$v_u + 8 >> 2];
    var $29 = HEAP32[HEAP32[$u_v + 8 >> 2] >> 2];
    var $30 = ___gmpn_mul_1($24, $26, $_3, $29);
    var $31 = $24 + ($_3 << 2) | 0;
    HEAP32[$31 >> 2] = $30;
    var $34 = (($30 | 0) != 0 & 1) + $_3 | 0;
    var $37 = ($5 | 0) > -1 ? $34 : -$34 | 0;
    HEAP32[$w + 4 >> 2] = $37;
    __label__ = 38;
    break;
   case 7:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $41 = HEAPU32[$v_u + 8 >> 2];
    var $43 = HEAPU32[$u_v + 8 >> 2];
    var $44 = $w + 8 | 0;
    var $45 = HEAPU32[$44 >> 2];
    var $46 = $_3 + $_ | 0;
    var $47 = $w | 0;
    var $48 = HEAPU32[$47 >> 2];
    var $50 = ($45 | 0) == ($41 | 0);
    if (($48 | 0) < ($46 | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 8:
    if ($50 | ($45 | 0) == ($43 | 0)) {
      var $free_me_0 = $45;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $54 = HEAP32[___gmp_free_func >> 2];
    var $55 = $45;
    var $56 = $48 << 2;
    FUNCTION_TABLE[$54]($55, $56);
    var $free_me_0 = 0;
    __label__ = 10;
    break;
   case 10:
    var $free_me_0;
    HEAP32[$47 >> 2] = $46;
    var $58 = HEAP32[___gmp_allocate_func >> 2];
    var $59 = $46 << 2;
    var $60 = FUNCTION_TABLE[$58]($59);
    var $61 = $60;
    HEAP32[$44 >> 2] = $61;
    var $up_0 = $41;
    var $vp_1 = $43;
    var $wp_0 = $61;
    var $free_me_1 = $free_me_0;
    __label__ = 31;
    break;
   case 11:
    if ($50) {
      __label__ = 12;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 12:
    var $64 = $_3 << 2;
    if ($64 >>> 0 < 65536) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $67 = STACKTOP;
    STACKTOP += $64;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $71 = $67;
    __label__ = 15;
    break;
   case 14:
    var $69 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $64);
    var $71 = $69;
    __label__ = 15;
    break;
   case 15:
    var $71;
    var $72 = $71;
    var $_4 = ($41 | 0) == ($43 | 0) ? $72 : $43;
    if (($_3 | 0) == 0) {
      var $up_0 = $72;
      var $vp_1 = $_4;
      var $wp_0 = $41;
      var $free_me_1 = 0;
      __label__ = 31;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $76 = $_3 - 1 | 0;
    var $77 = HEAPU32[$41 >> 2];
    if (($76 | 0) == 0) {
      var $__dst_1 = $72;
      var $__x_1 = $77;
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $smax13 = ($8 | 0) > ($11 | 0) ? $8 : $11;
    var $scevgep14 = $71 + (($smax13 << 2) - 4) | 0;
    var $__n_0 = $76;
    var $__dst_0 = $72;
    var $_pn2 = $41;
    var $__x_0 = $77;
    __label__ = 18;
    break;
   case 18:
    var $__x_0;
    var $_pn2;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_pn2 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $84 = HEAP32[$__src_0 >> 2];
    var $85 = $__n_0 - 1 | 0;
    if (($85 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__n_0 = $85;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn2 = $__src_0;
      var $__x_0 = $84;
      __label__ = 18;
      break;
    }
   case 19:
    var $__dst_1 = $scevgep14;
    var $__x_1 = $84;
    __label__ = 20;
    break;
   case 20:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $up_0 = $72;
    var $vp_1 = $_4;
    var $wp_0 = $41;
    var $free_me_1 = 0;
    __label__ = 31;
    break;
   case 21:
    if (($45 | 0) == ($43 | 0)) {
      __label__ = 22;
      break;
    } else {
      var $up_0 = $41;
      var $vp_1 = $43;
      var $wp_0 = $45;
      var $free_me_1 = 0;
      __label__ = 31;
      break;
    }
   case 22:
    var $91 = $_ << 2;
    if ($91 >>> 0 < 65536) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $94 = STACKTOP;
    STACKTOP += $91;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $98 = $94;
    __label__ = 25;
    break;
   case 24:
    var $96 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $91);
    var $98 = $96;
    __label__ = 25;
    break;
   case 25:
    var $98;
    var $99 = $98;
    if (($_ | 0) == 0) {
      var $up_0 = $41;
      var $vp_1 = $99;
      var $wp_0 = $43;
      var $free_me_1 = 0;
      __label__ = 31;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $102 = $_ - 1 | 0;
    var $103 = HEAP32[$43 >> 2];
    if (($102 | 0) == 0) {
      var $__x4_1 = $103;
      var $__dst2_1 = $99;
      __label__ = 30;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $105 = $8 ^ -1;
    var $106 = $11 ^ -1;
    var $smax = ($105 | 0) > ($106 | 0) ? $105 : $106;
    var $scevgep = $98 + (-8 - ($smax << 2)) | 0;
    var $__x4_0 = $103;
    var $_pn = $43;
    var $__dst2_0 = $99;
    var $__n1_0 = $102;
    __label__ = 28;
    break;
   case 28:
    var $__n1_0;
    var $__dst2_0;
    var $_pn;
    var $__x4_0;
    var $__src3_0 = $_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $112 = HEAP32[$__src3_0 >> 2];
    var $113 = $__n1_0 - 1 | 0;
    if (($113 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      var $__x4_0 = $112;
      var $_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $113;
      __label__ = 28;
      break;
    }
   case 29:
    var $__x4_1 = $112;
    var $__dst2_1 = $scevgep;
    __label__ = 30;
    break;
   case 30:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $up_0 = $41;
    var $vp_1 = $99;
    var $wp_0 = $43;
    var $free_me_1 = 0;
    __label__ = 31;
    break;
   case 31:
    var $free_me_1;
    var $wp_0;
    var $vp_1;
    var $up_0;
    if (($up_0 | 0) == ($vp_1 | 0)) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    ___gmpn_sqr($wp_0, $vp_1, $_3);
    var $cy_limb_0 = HEAP32[$wp_0 + ($46 - 1 << 2) >> 2];
    __label__ = 34;
    break;
   case 33:
    var $123 = ___gmpn_mul($wp_0, $up_0, $_3, $vp_1, $_);
    var $cy_limb_0 = $123;
    __label__ = 34;
    break;
   case 34:
    var $cy_limb_0;
    var $127 = $46 - (($cy_limb_0 | 0) == 0 & 1) | 0;
    var $130 = ($5 | 0) < 0 ? -$127 | 0 : $127;
    HEAP32[$w + 4 >> 2] = $130;
    if (($free_me_1 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $134 = HEAP32[___gmp_free_func >> 2];
    var $136 = $48 << 2;
    FUNCTION_TABLE[$134]($free_me_1, $136);
    __label__ = 36;
    break;
   case 36:
    var $137 = HEAP32[$__tmp_marker >> 2];
    if (($137 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    ___gmp_tmp_reentrant_free($137);
    __label__ = 38;
    break;
   case 38:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_mul["X"] = 1;

function ___gmpz_set_si($dest, $val) {
  var $1 = ($val | 0) > -1;
  var $3 = $1 ? $val : -$val | 0;
  var $5 = HEAP32[$dest + 8 >> 2];
  HEAP32[$5 >> 2] = $3;
  var $6 = ($val | 0) != 0;
  var $9 = $1 ? $6 & 1 : $6 << 31 >> 31;
  HEAP32[$dest + 4 >> 2] = $9;
  return;
}

function ___gmpz_mul_2exp($w, $u, $cnt) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $3 = ($2 | 0) > -1;
    var $5 = $3 ? $2 : -$2 | 0;
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$w + 4 >> 2] = 0;
    __label__ = 17;
    break;
   case 4:
    var $10 = $cnt >>> 5;
    var $11 = $5 + $10 | 0;
    var $12 = $11 + 1 | 0;
    if ((HEAP32[$w >> 2] | 0) < ($12 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $17 = ___gmpz_realloc($w, $12);
    __label__ = 6;
    break;
   case 6:
    var $20 = HEAPU32[$w + 8 >> 2];
    var $21 = $20;
    var $22 = $cnt & 31;
    if (($22 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $25 = $20 + ($10 << 2) | 0;
    var $27 = HEAP32[$u + 8 >> 2];
    var $28 = ___gmpn_lshift($25, $27, $5, $22);
    if (($28 | 0) == 0) {
      var $wsize_0 = $11;
      __label__ = 14;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $31 = $20 + ($11 << 2) | 0;
    HEAP32[$31 >> 2] = $28;
    var $wsize_0 = $12;
    __label__ = 14;
    break;
   case 9:
    var $33 = $5 - 1 | 0;
    var $34 = $20 + ($33 + $10 << 2) | 0;
    var $36 = HEAP32[$u + 8 >> 2];
    var $38 = HEAP32[$36 + ($33 << 2) >> 2];
    if (($33 | 0) == 0) {
      var $__x_1 = $38;
      var $__dst_1 = $34;
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $__x_0 = $38;
    var $__src_0 = $36 + ($5 - 2 << 2) | 0;
    var $__dst_0 = $34;
    var $__n_0 = $33;
    __label__ = 11;
    break;
   case 11:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $44 = HEAP32[$__src_0 >> 2];
    var $45 = $__n_0 - 1 | 0;
    if (($45 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $__x_0 = $44;
      var $__src_0 = $__src_0 - 4 | 0;
      var $__dst_0 = $__dst_0 - 4 | 0;
      var $__n_0 = $45;
      __label__ = 11;
      break;
    }
   case 12:
    var $__x_1 = $44;
    var $__dst_1 = $20 + ($10 << 2) | 0;
    __label__ = 13;
    break;
   case 13:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $wsize_0 = $11;
    __label__ = 14;
    break;
   case 14:
    var $wsize_0;
    if (($10 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $51 = $cnt >>> 3 & 536870908;
    _memset($21, 0, $51, 4);
    __label__ = 16;
    break;
   case 16:
    var $54 = $3 ? $wsize_0 : -$wsize_0 | 0;
    HEAP32[$w + 4 >> 2] = $54;
    __label__ = 17;
    break;
   case 17:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_mul_2exp["X"] = 1;

function ___gmpz_mul_ui($prod, $mult, $small_mult) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$mult + 4 >> 2];
    if (($2 | 0) == 0 | ($small_mult | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$prod + 4 >> 2] = 0;
    __label__ = 7;
    break;
   case 4:
    var $10 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $11 = $10 + 1 | 0;
    if (($11 | 0) > (HEAP32[$prod >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $16 = ___gmpz_realloc($prod, $11);
    __label__ = 6;
    break;
   case 6:
    var $19 = HEAP32[$prod + 8 >> 2];
    var $21 = HEAP32[$mult + 8 >> 2];
    var $22 = ___gmpn_mul_1($19, $21, $10, $small_mult);
    var $23 = $19 + ($10 << 2) | 0;
    HEAP32[$23 >> 2] = $22;
    var $26 = (($22 | 0) != 0 & 1) + $10 | 0;
    var $29 = ($2 | 0) < 0 ? -$26 | 0 : $26;
    HEAP32[$prod + 4 >> 2] = $29;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_neg($w, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    if (($u | 0) == ($w | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_pre_phi = -$2 | 0;
    __label__ = 11;
    break;
   case 4:
    var $6 = -$2 | 0;
    var $7 = ($2 | 0) > -1 ? $2 : $6;
    if ((HEAP32[$w >> 2] | 0) < ($7 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $12 = ___gmpz_realloc($w, $7);
    __label__ = 6;
    break;
   case 6:
    var $15 = HEAP32[$w + 8 >> 2];
    var $17 = HEAP32[$u + 8 >> 2];
    if (($2 | 0) == 0) {
      var $_pre_phi = $6;
      __label__ = 11;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $20 = $7 - 1 | 0;
    var $21 = HEAP32[$17 >> 2];
    if (($20 | 0) == 0) {
      var $__x_1 = $21;
      var $__dst_1 = $15;
      __label__ = 10;
      break;
    } else {
      var $__x_0 = $21;
      var $_pn = $17;
      var $__dst_0 = $15;
      var $__n_0 = $20;
      __label__ = 8;
      break;
    }
   case 8:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $24 = HEAP32[$__src_0 >> 2];
    var $25 = $__n_0 - 1 | 0;
    if (($25 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $__x_0 = $24;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $25;
      __label__ = 8;
      break;
    }
   case 9:
    var $__x_1 = $24;
    var $__dst_1 = $15 + ($20 << 2) | 0;
    __label__ = 10;
    break;
   case 10:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_pre_phi = $6;
    __label__ = 11;
    break;
   case 11:
    var $_pre_phi;
    HEAP32[$w + 4 >> 2] = $_pre_phi;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_nextprime($p, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = ___gmpz_cmp_ui($n, 2);
    if (($1 | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmpz_set_ui($p, 2);
    __label__ = 18;
    break;
   case 4:
    ___gmpz_add_ui($p, $n, 1);
    ___gmpz_setbit($p, 0);
    var $5 = ___gmpz_cmp_ui($p, 7);
    if (($5 | 0) < 1) {
      __label__ = 18;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $9 = HEAPU32[$p + 4 >> 2];
    var $14 = HEAPU32[HEAP32[$p + 8 >> 2] + ($9 - 1 << 2) >> 2];
    if ($14 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $18 = $14 >>> 0 < 256 ? 1 : 9;
    var $23 = $18;
    __label__ = 8;
    break;
   case 7:
    var $21 = $14 >>> 0 < 16777216 ? 17 : 25;
    var $23 = $21;
    __label__ = 8;
    break;
   case 8:
    var $23;
    var $25 = STRING_TABLE.___gmpn_clz_tab + ($14 >>> ($23 >>> 0)) | 0;
    var $31 = ($9 << 5) - 33 + $23 + (HEAPU8[$25] & 255) | 0;
    var $prime_limit_0 = $31 >>> 0 > 333 ? 166 : $31 >>> 1;
    var $35 = STACKTOP;
    STACKTOP += $prime_limit_0 << 2;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $36 = $35;
    var $prime_0 = 3;
    var $i_0 = 0;
    __label__ = 9;
    break;
   case 9:
    var $i_0;
    var $prime_0;
    if ($i_0 >>> 0 < $prime_limit_0 >>> 0) {
      __label__ = 10;
      break;
    } else {
      var $incr_0 = 0;
      var $difference_0 = 0;
      __label__ = 11;
      break;
    }
   case 10:
    var $39 = ___gmpz_fdiv_ui($p, $prime_0);
    HEAP16[$36 + ($i_0 << 1) >> 1] = $39 & 65535;
    var $42 = STRING_TABLE._primegap + $i_0 | 0;
    var $prime_0 = (HEAPU8[$42] & 255) + $prime_0 | 0;
    var $i_0 = $i_0 + 1 | 0;
    __label__ = 9;
    break;
   case 11:
    var $difference_0;
    var $incr_0;
    if ($incr_0 >>> 0 < 65536) {
      var $prime_1 = 3;
      var $i_1 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 12:
    var $i_1;
    var $prime_1;
    if ($i_1 >>> 0 < $prime_limit_0 >>> 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 13:
    if (((((HEAPU16[$36 + ($i_1 << 1) >> 1] & 65535) + $incr_0 | 0) >>> 0) % ($prime_1 >>> 0) | 0) == 0) {
      var $difference_1 = $difference_0;
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $57 = STRING_TABLE._primegap + $i_1 | 0;
    var $prime_1 = (HEAPU8[$57] & 255) + $prime_1 | 0;
    var $i_1 = $i_1 + 1 | 0;
    __label__ = 12;
    break;
   case 15:
    ___gmpz_add_ui($p, $p, $difference_0);
    var $63 = ___gmpz_millerrabin($p, 10);
    if (($63 | 0) == 0) {
      var $difference_1 = 0;
      __label__ = 16;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 16:
    var $difference_1;
    var $incr_0 = $incr_0 + 2 | 0;
    var $difference_0 = $difference_1 + 2 | 0;
    __label__ = 11;
    break;
   case 17:
    ___gmpz_add_ui($p, $p, $difference_0);
    var $prime_0 = 3;
    var $i_0 = 0;
    __label__ = 9;
    break;
   case 18:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_nextprime["X"] = 1;

function ___gmpz_out_str($stream, $base, $x) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$x + 4 >> 2];
    var $_stream = ($stream | 0) == 0 ? HEAP32[_stdout >> 2] : $stream;
    if (($base | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($base | 0) == 0) {
      var $_02 = 10;
      var $num_to_text_0 = STRING_TABLE.__str494 | 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($base | 0) > 36) {
      __label__ = 5;
      break;
    } else {
      var $_02 = $base;
      var $num_to_text_0 = STRING_TABLE.__str494 | 0;
      __label__ = 7;
      break;
    }
   case 5:
    if (($base | 0) > 62) {
      var $_0 = 0;
      __label__ = 31;
      break;
    } else {
      var $_02 = $base;
      var $num_to_text_0 = STRING_TABLE.__str1131 | 0;
      __label__ = 7;
      break;
    }
   case 6:
    var $_02 = -$base | 0;
    var $num_to_text_0 = STRING_TABLE.__str1495 | 0;
    __label__ = 7;
    break;
   case 7:
    var $num_to_text_0;
    var $_02;
    if (($2 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $17 = _fputc(48, $_stream);
    var $18 = _ferror($_stream);
    var $_0 = ($18 | 0) == 0 & 1;
    __label__ = 31;
    break;
   case 9:
    if (($2 | 0) < 0) {
      __label__ = 10;
      break;
    } else {
      var $x_size_0 = $2;
      var $written_0 = 0;
      __label__ = 11;
      break;
    }
   case 10:
    var $23 = _fputc(45, $_stream);
    var $x_size_0 = -$2 | 0;
    var $written_0 = 1;
    __label__ = 11;
    break;
   case 11:
    var $written_0;
    var $x_size_0;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $28 = ___gmpn_bases + $_02 * 20 + 4 | 0;
    var $29 = (tempDoubleI32[0] = HEAP32[$28 >> 2], tempDoubleI32[1] = HEAP32[$28 + 4 >> 2], tempDoubleF64[0]);
    var $30 = ($x_size_0 << 5 | 0) * $29;
    var $31 = $30 >= 0 ? Math.floor($30) : Math.ceil($30);
    var $32 = $31 + 3 | 0;
    if ($32 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $35 = STACKTOP;
    STACKTOP += $32;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $39 = $35;
    __label__ = 14;
    break;
   case 13:
    var $37 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $32);
    var $39 = $37;
    __label__ = 14;
    break;
   case 14:
    var $39;
    var $40 = $x_size_0 << 2;
    var $41 = $40 + 4 | 0;
    if ($41 >>> 0 < 65536) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $44 = STACKTOP;
    STACKTOP += $41;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $48 = $44;
    __label__ = 17;
    break;
   case 16:
    var $46 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $41);
    var $48 = $46;
    __label__ = 17;
    break;
   case 17:
    var $48;
    var $49 = $48;
    if (($x_size_0 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $52 = $x_size_0 - 1 | 0;
    var $54 = HEAP32[$x + 8 >> 2];
    var $55 = HEAPU32[$54 >> 2];
    if (($52 | 0) == 0) {
      var $__x_1 = $55;
      var $__dst_1 = $49;
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $scevgep = $48 + ($40 - 4) | 0;
    var $__x_0 = $55;
    var $_pn = $54;
    var $__n_0 = $52;
    var $__dst_0 = $49;
    __label__ = 20;
    break;
   case 20:
    var $__dst_0;
    var $__n_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $60 = HEAP32[$__src_0 >> 2];
    var $61 = $__n_0 - 1 | 0;
    if (($61 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $__x_0 = $60;
      var $_pn = $__src_0;
      var $__n_0 = $61;
      var $__dst_0 = $__dst_0 + 4 | 0;
      __label__ = 20;
      break;
    }
   case 21:
    var $__x_1 = $60;
    var $__dst_1 = $scevgep;
    __label__ = 22;
    break;
   case 22:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 23;
    break;
   case 23:
    var $65 = ___gmpn_get_str($39, $_02, $49, $x_size_0);
    var $66 = HEAP8[$39];
    if ($66 << 24 >> 24 == 0) {
      var $str_size_06 = $65;
      var $str_07 = $39;
      __label__ = 25;
      break;
    } else {
      var $str_size_0_lcssa = $65;
      var $str_0_lcssa = $39;
      var $68 = $66;
      __label__ = 24;
      break;
    }
   case 24:
    var $68;
    var $str_0_lcssa;
    var $str_size_0_lcssa;
    if (($str_size_0_lcssa | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      var $i_05 = 0;
      var $74 = $68;
      __label__ = 26;
      break;
    }
   case 25:
    var $str_07;
    var $str_size_06;
    var $70 = $str_size_06 - 1 | 0;
    var $71 = $str_07 + 1 | 0;
    var $72 = HEAPU8[$71];
    if ($72 << 24 >> 24 == 0) {
      var $str_size_06 = $70;
      var $str_07 = $71;
      __label__ = 25;
      break;
    } else {
      var $str_size_0_lcssa = $70;
      var $str_0_lcssa = $71;
      var $68 = $72;
      __label__ = 24;
      break;
    }
   case 26:
    var $74;
    var $i_05;
    var $78 = HEAP8[$num_to_text_0 + ($74 & 255) | 0];
    HEAP8[$str_0_lcssa + $i_05 | 0] = $78;
    var $79 = $i_05 + 1 | 0;
    if (($79 | 0) == ($str_size_0_lcssa | 0)) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $_pre = HEAP8[$str_0_lcssa + $79 | 0];
    var $i_05 = $79;
    var $74 = $_pre;
    __label__ = 26;
    break;
   case 28:
    HEAP8[$str_0_lcssa + $str_size_0_lcssa | 0] = 0;
    var $81 = _fwrite($str_0_lcssa, 1, $str_size_0_lcssa, $_stream);
    var $82 = $81 + $written_0 | 0;
    var $83 = HEAP32[$__tmp_marker >> 2];
    if (($83 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    ___gmp_tmp_reentrant_free($83);
    __label__ = 30;
    break;
   case 30:
    var $87 = _ferror($_stream);
    var $89 = ($87 | 0) != 0 ? 0 : $82;
    var $_0 = $89;
    __label__ = 31;
    break;
   case 31:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_out_str["X"] = 1;

function ___gmpz_pow_ui($r, $b, $e) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($e | 0) == 0) {
      __label__ = 3;
      break;
    } else if (($e | 0) == 1) {
      __label__ = 4;
      break;
    } else if (($e | 0) == 2) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    ___gmpz_set_ui($r, 1);
    __label__ = 7;
    break;
   case 4:
    ___gmpz_set($r, $b);
    __label__ = 7;
    break;
   case 5:
    ___gmpz_mul($r, $b, $b);
    __label__ = 7;
    break;
   case 6:
    var $6 = HEAP32[$b + 8 >> 2];
    var $8 = HEAP32[$b + 4 >> 2];
    ___gmpz_n_pow_ui($r, $6, $8, $e);
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_random2($x, $size) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = ($size | 0) > -1 ? $size : -$size | 0;
    if (($size | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ((HEAP32[$x >> 2] | 0) < ($3 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $10 = ___gmpz_realloc($x, $3);
    __label__ = 5;
    break;
   case 5:
    var $13 = HEAP32[$x + 8 >> 2];
    ___gmpn_random2($13, $3);
    __label__ = 6;
    break;
   case 6:
    HEAP32[$x + 4 >> 2] = $size;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_set($w, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if ((HEAP32[$w >> 2] | 0) < ($5 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = ___gmpz_realloc($w, $5);
    __label__ = 4;
    break;
   case 4:
    var $13 = HEAP32[$w + 8 >> 2];
    var $15 = HEAP32[$u + 8 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $18 = $5 - 1 | 0;
    var $19 = HEAP32[$15 >> 2];
    if (($18 | 0) == 0) {
      var $__x_1 = $19;
      var $__dst_1 = $13;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $19;
      var $_pn = $15;
      var $__dst_0 = $13;
      var $__n_0 = $18;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $22 = HEAP32[$__src_0 >> 2];
    var $23 = $__n_0 - 1 | 0;
    if (($23 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $22;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $23;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $22;
    var $__dst_1 = $13 + ($18 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    HEAP32[$w + 4 >> 2] = $2;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_clear($m) {
  var $1 = HEAP32[___gmp_free_func >> 2];
  var $4 = HEAP32[$m + 8 >> 2];
  var $7 = HEAP32[$m >> 2] << 2;
  FUNCTION_TABLE[$1]($4, $7);
  return;
}

function ___gmpz_set_q($__gmp_w, $__gmp_u) {
  var $1 = $__gmp_u | 0;
  var $2 = $__gmp_u + 12 | 0;
  ___gmpz_tdiv_q($__gmp_w, $1, $2);
  return;
}

function ___gmpz_set_str($x, $str, $base) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if (($base | 0) > 36) {
      __label__ = 3;
      break;
    } else {
      var $digit_value_0_ph = STRING_TABLE.___gmp_digit_value_tab | 0;
      __label__ = 4;
      break;
    }
   case 3:
    if (($base | 0) > 62) {
      var $_0 = -1;
      __label__ = 36;
      break;
    } else {
      var $digit_value_0_ph = STRING_TABLE.___gmp_digit_value_tab + 224 | 0;
      __label__ = 4;
      break;
    }
   case 4:
    var $digit_value_0_ph;
    var $_04 = $str;
    __label__ = 5;
    break;
   case 5:
    var $_04;
    var $5 = $_04 + 1 | 0;
    var $6 = HEAPU8[$_04];
    var $7 = $6 & 255;
    var $8 = _isspace($7);
    if (($8 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $_04 = $5;
      __label__ = 5;
      break;
    }
   case 6:
    if ($6 << 24 >> 24 == 45) {
      __label__ = 7;
      break;
    } else {
      var $_1 = $5;
      var $negative_0 = 0;
      var $c_0 = $7;
      __label__ = 8;
      break;
    }
   case 7:
    var $_1 = $_04 + 2 | 0;
    var $negative_0 = 1;
    var $c_0 = HEAPU8[$5] & 255;
    __label__ = 8;
    break;
   case 8:
    var $c_0;
    var $negative_0;
    var $_1;
    var $20 = ($base | 0) == 0;
    var $21 = $20 ? 10 : $base;
    if ((HEAPU8[$digit_value_0_ph + $c_0 | 0] & 255 | 0) < ($21 | 0)) {
      __label__ = 9;
      break;
    } else {
      var $_0 = -1;
      __label__ = 36;
      break;
    }
   case 9:
    if ($20) {
      __label__ = 10;
      break;
    } else {
      var $_2_ph = $_1;
      var $_05_ph = $base;
      var $c_1_ph = $c_0;
      __label__ = 15;
      break;
    }
   case 10:
    if (($c_0 | 0) == 48) {
      __label__ = 11;
      break;
    } else {
      var $_2_ph = $_1;
      var $_05_ph = 10;
      var $c_1_ph = $c_0;
      __label__ = 15;
      break;
    }
   case 11:
    var $27 = $_1 + 1 | 0;
    var $28 = HEAPU8[$_1];
    if ($28 << 24 >> 24 == 120 || $28 << 24 >> 24 == 88) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $_2_ph = $_1 + 2 | 0;
    var $_05_ph = 16;
    var $c_1_ph = HEAPU8[$27] & 255;
    __label__ = 15;
    break;
   case 13:
    var $34 = $28 & 255;
    if ($28 << 24 >> 24 == 98 || $28 << 24 >> 24 == 66) {
      __label__ = 14;
      break;
    } else {
      var $_2_ph = $27;
      var $_05_ph = 8;
      var $c_1_ph = $34;
      __label__ = 15;
      break;
    }
   case 14:
    var $_2_ph = $_1 + 2 | 0;
    var $_05_ph = 2;
    var $c_1_ph = HEAPU8[$27] & 255;
    __label__ = 15;
    break;
   case 15:
    var $c_1_ph;
    var $_05_ph;
    var $_2_ph;
    var $_2 = $_2_ph;
    var $c_1 = $c_1_ph;
    __label__ = 16;
    break;
   case 16:
    var $c_1;
    var $_2;
    if (($c_1 | 0) == 48) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $42 = _isspace($c_1);
    if (($42 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $46 = HEAPU8[$_2] & 255;
    var $_2 = $_2 + 1 | 0;
    var $c_1 = $46;
    __label__ = 16;
    break;
   case 19:
    if (($c_1 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    HEAP32[$x + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 36;
    break;
   case 21:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $53 = _strlen($_2 - 1 | 0);
    var $54 = $53 + 1 | 0;
    if ($54 >>> 0 < 65536) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $57 = STACKTOP;
    STACKTOP += $54;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $61 = $57;
    __label__ = 24;
    break;
   case 23:
    var $59 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $54);
    var $61 = $59;
    __label__ = 24;
    break;
   case 24:
    var $61;
    var $_3 = $_2;
    var $s_0 = $61;
    var $i_0 = 0;
    var $c_2 = $c_1;
    __label__ = 25;
    break;
   case 25:
    var $c_2;
    var $i_0;
    var $s_0;
    var $_3;
    if ($i_0 >>> 0 < $53 >>> 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 26:
    var $65 = _isspace($c_2);
    if (($65 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $s_1 = $s_0;
      __label__ = 31;
      break;
    }
   case 27:
    var $69 = HEAPU8[$digit_value_0_ph + $c_2 | 0];
    if (($69 & 255 | 0) < ($_05_ph | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $73 = HEAPU32[$__tmp_marker >> 2];
    if (($73 | 0) == 0) {
      var $_0 = -1;
      __label__ = 36;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    ___gmp_tmp_reentrant_free($73);
    var $_0 = -1;
    __label__ = 36;
    break;
   case 30:
    HEAP8[$s_0] = $69;
    var $s_1 = $s_0 + 1 | 0;
    __label__ = 31;
    break;
   case 31:
    var $s_1;
    var $81 = HEAPU8[$_3] & 255;
    var $_3 = $_3 + 1 | 0;
    var $s_0 = $s_1;
    var $i_0 = $i_0 + 1 | 0;
    var $c_2 = $81;
    __label__ = 25;
    break;
   case 32:
    var $86 = $s_0 - $61 | 0;
    var $88 = ___gmpn_bases + $_05_ph * 20 + 4 | 0;
    var $89 = (tempDoubleI32[0] = HEAP32[$88 >> 2], tempDoubleI32[1] = HEAP32[$88 + 4 >> 2], tempDoubleF64[0]);
    var $93 = (($86 >>> 0) / ($89 * 32) & -1) + 2 | 0;
    if (($93 | 0) > (HEAP32[$x >> 2] | 0)) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $98 = ___gmpz_realloc($x, $93);
    __label__ = 34;
    break;
   case 34:
    var $100 = HEAP32[$x + 8 >> 2];
    var $101 = ___gmpn_set_str($100, $61, $86, $_05_ph);
    var $104 = ($negative_0 | 0) != 0 ? -$101 | 0 : $101;
    HEAP32[$x + 4 >> 2] = $104;
    var $106 = HEAP32[$__tmp_marker >> 2];
    if (($106 | 0) == 0) {
      var $_0 = 0;
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    ___gmp_tmp_reentrant_free($106);
    var $_0 = 0;
    __label__ = 36;
    break;
   case 36:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_set_str["X"] = 1;

function ___gmpz_set_d($r, $d) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $tp = __stackBase__;
    tempDoubleF64[0] = $d;
    if ((tempDoubleI32[0] & 0) == 0 && (tempDoubleI32[1] & 2146435072) == 2146435072) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_invalid_operation();
    throw "Reached an unreachable!";
   case 4:
    var $6 = $d < 0;
    if ($d < 0) {
      __label__ = 5;
      break;
    } else {
      var $11 = $d;
      __label__ = 6;
      break;
    }
   case 5:
    var $11 = -$d;
    __label__ = 6;
    break;
   case 6:
    var $11;
    var $12 = $tp | 0;
    var $13 = ___gmp_extract_double($12, $11);
    if ((HEAP32[$r >> 2] | 0) < ($13 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $18 = ___gmpz_realloc($r, $13);
    __label__ = 8;
    break;
   case 8:
    var $20 = ($13 | 0) > 0;
    var $_ = $20 ? $13 : 0;
    var $22 = HEAPU32[$r + 8 >> 2];
    var $23 = $22;
    if (($_ | 0) == 3) {
      var $rp_0 = $22;
      __label__ = 12;
      break;
    } else if (($_ | 0) == 2) {
      __label__ = 13;
      break;
    } else if (($_ | 0) == 1) {
      __label__ = 14;
      break;
    } else if (($_ | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $25 = $_ - 3 | 0;
    if (($25 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $27 = $20 ? ($13 << 2) - 12 | 0 : -12;
    _memset($23, 0, $27, 4);
    __label__ = 11;
    break;
   case 11:
    var $rp_0 = $22 + ($25 << 2) | 0;
    __label__ = 12;
    break;
   case 12:
    var $rp_0;
    var $32 = HEAP32[$tp + 8 >> 2];
    HEAP32[$rp_0 + 8 >> 2] = $32;
    var $35 = HEAP32[$tp + 4 >> 2];
    HEAP32[$rp_0 + 4 >> 2] = $35;
    var $37 = HEAP32[$12 >> 2];
    HEAP32[$rp_0 >> 2] = $37;
    __label__ = 15;
    break;
   case 13:
    var $40 = HEAP32[$tp + 8 >> 2];
    HEAP32[$22 + 4 >> 2] = $40;
    var $43 = HEAP32[$tp + 4 >> 2];
    HEAP32[$22 >> 2] = $43;
    __label__ = 15;
    break;
   case 14:
    var $46 = HEAP32[$tp + 8 >> 2];
    HEAP32[$22 >> 2] = $46;
    __label__ = 15;
    break;
   case 15:
    var $49 = $6 ? -$_ | 0 : $_;
    HEAP32[$r + 4 >> 2] = $49;
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_set_d["X"] = 1;

function ___gmpz_set_ui($dest, $val) {
  var $2 = HEAP32[$dest + 8 >> 2];
  HEAP32[$2 >> 2] = $val;
  HEAP32[$dest + 4 >> 2] = ($val | 0) != 0 & 1;
  return;
}

function ___gmpz_size($__gmp_z) {
  var $2 = HEAP32[$__gmp_z + 4 >> 2];
  var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
  return $5;
}

function ___gmpz_swap($u, $v) {
  var $1 = $u | 0;
  var $2 = HEAP32[$1 >> 2];
  var $3 = $v | 0;
  var $4 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $2;
  HEAP32[$1 >> 2] = $4;
  var $5 = $u + 4 | 0;
  var $6 = HEAP32[$5 >> 2];
  var $7 = $v + 4 | 0;
  var $8 = HEAP32[$7 >> 2];
  HEAP32[$7 >> 2] = $6;
  HEAP32[$5 >> 2] = $8;
  var $9 = $u + 8 | 0;
  var $10 = HEAP32[$9 >> 2];
  var $11 = $v + 8 | 0;
  var $12 = HEAP32[$11 >> 2];
  HEAP32[$11 >> 2] = $10;
  HEAP32[$9 >> 2] = $12;
  return;
}

function ___gmpz_sub($w, $u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $4 = HEAP32[$v + 4 >> 2];
    var $5 = -$4 | 0;
    var $8 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $10 = ($5 | 0) > -1 ? $5 : $4;
    var $11 = ($8 | 0) < ($10 | 0);
    var $_ = $11 ? $5 : $2;
    var $_2 = $11 ? $2 : $5;
    var $_3 = $11 ? $10 : $8;
    var $u_v = $11 ? $u : $v;
    var $v_u = $11 ? $v : $u;
    var $_4 = $11 ? $8 : $10;
    var $12 = $_3 + 1 | 0;
    if ((HEAP32[$w >> 2] | 0) < ($12 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $17 = ___gmpz_realloc($w, $12);
    __label__ = 4;
    break;
   case 4:
    var $20 = HEAP32[$v_u + 8 >> 2];
    var $22 = HEAP32[$u_v + 8 >> 2];
    var $24 = HEAP32[$w + 8 >> 2];
    if (($_ ^ $_2 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 5:
    if (($_3 | 0) == ($_4 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $30 = ___gmpn_sub($24, $20, $_3, $22, $_4);
    var $wsize_0 = $_3;
    __label__ = 7;
    break;
   case 7:
    var $wsize_0;
    if (($wsize_0 | 0) > 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $34 = $wsize_0 - 1 | 0;
    if ((HEAP32[$24 + ($34 << 2) >> 2] | 0) == 0) {
      var $wsize_0 = $34;
      __label__ = 7;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $_wsize_0 = ($_ | 0) < 0 ? -$wsize_0 | 0 : $wsize_0;
    var $wsize_3 = $_wsize_0;
    __label__ = 21;
    break;
   case 10:
    var $42 = ___gmpn_cmp($20, $22, $_3);
    if (($42 | 0) < 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 11:
    var $45 = ___gmpn_sub_n($24, $22, $20, $_3);
    var $wsize_1 = $_3;
    __label__ = 12;
    break;
   case 12:
    var $wsize_1;
    if (($wsize_1 | 0) > 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $49 = $wsize_1 - 1 | 0;
    if ((HEAP32[$24 + ($49 << 2) >> 2] | 0) == 0) {
      var $wsize_1 = $49;
      __label__ = 12;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $_wsize_1 = ($_ | 0) > -1 ? -$wsize_1 | 0 : $wsize_1;
    var $wsize_3 = $_wsize_1;
    __label__ = 21;
    break;
   case 15:
    var $57 = ___gmpn_sub_n($24, $20, $22, $_3);
    var $wsize_2 = $_3;
    __label__ = 16;
    break;
   case 16:
    var $wsize_2;
    if (($wsize_2 | 0) > 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $61 = $wsize_2 - 1 | 0;
    if ((HEAP32[$24 + ($61 << 2) >> 2] | 0) == 0) {
      var $wsize_2 = $61;
      __label__ = 16;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $_wsize_2 = ($_ | 0) < 0 ? -$wsize_2 | 0 : $wsize_2;
    var $wsize_3 = $_wsize_2;
    __label__ = 21;
    break;
   case 19:
    var $69 = ___gmpn_add($24, $20, $_3, $22, $_4);
    var $70 = $24 + ($_3 << 2) | 0;
    HEAP32[$70 >> 2] = $69;
    var $71 = $69 + $_3 | 0;
    if (($_ | 0) < 0) {
      __label__ = 20;
      break;
    } else {
      var $wsize_3 = $71;
      __label__ = 21;
      break;
    }
   case 20:
    var $wsize_3 = -$71 | 0;
    __label__ = 21;
    break;
   case 21:
    var $wsize_3;
    HEAP32[$w + 4 >> 2] = $wsize_3;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_sub["X"] = 1;

function ___gmpz_sub_ui($w, $u, $vval) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $6 = $5 + 1 | 0;
    if ((HEAP32[$w >> 2] | 0) < ($6 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $11 = ___gmpz_realloc($w, $6);
    __label__ = 4;
    break;
   case 4:
    var $14 = HEAPU32[$u + 8 >> 2];
    var $16 = HEAPU32[$w + 8 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$16 >> 2] = $vval;
    HEAP32[$w + 4 >> 2] = (($vval | 0) != 0) << 31 >> 31;
    __label__ = 13;
    break;
   case 6:
    if (($2 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $25 = ___gmpn_add_1($16, $14, $5, $vval);
    var $26 = $16 + ($5 << 2) | 0;
    HEAP32[$26 >> 2] = $25;
    var $wsize_0 = -($5 + $25 | 0) | 0;
    __label__ = 12;
    break;
   case 8:
    if (($5 | 0) == 1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 9:
    var $32 = HEAPU32[$14 >> 2];
    if ($32 >>> 0 < $vval >>> 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    HEAP32[$16 >> 2] = $vval - $32 | 0;
    var $wsize_0 = -1;
    __label__ = 12;
    break;
   case 11:
    var $37 = ___gmpn_sub_1($16, $14, $5, $vval);
    var $wsize_0 = $5 - ((HEAP32[$16 + ($5 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 12;
    break;
   case 12:
    var $wsize_0;
    HEAP32[$w + 4 >> 2] = $wsize_0;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_sub_ui["X"] = 1;

function ___gmpz_clears($x) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ap = __stackBase__;
    HEAP32[$ap >> 2] = arguments[___gmpz_clears.length];
    if (($x | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $x;
      __label__ = 3;
      break;
    }
   case 3:
    var $_01;
    ___gmpz_clear($_01);
    var $3 = HEAP32[$ap >> 2];
    var $4 = $3;
    var $5 = $3 + 4 | 0;
    HEAP32[$ap >> 2] = $5;
    var $6 = HEAP32[$4 >> 2];
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $6;
      __label__ = 3;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_ui_sub($w, $uval, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $v + 8 | 0;
    var $2 = HEAPU32[$1 >> 2];
    var $4 = HEAPU32[$v + 4 >> 2];
    var $6 = HEAPU32[$w + 8 >> 2];
    if (($4 | 0) > 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($4 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 4;
      break;
    } else {
      var $17 = $6;
      var $16 = $2;
      __label__ = 5;
      break;
    }
   case 4:
    var $13 = ___gmpz_realloc($w, $4);
    var $17 = $13;
    var $16 = HEAP32[$1 >> 2];
    __label__ = 5;
    break;
   case 5:
    var $16;
    var $17;
    var $18 = ___gmpn_sub_1($17, $16, $4, $uval);
    var $wn_0 = ((HEAP32[$17 + ($4 - 1 << 2) >> 2] | 0) == 0 & 1) - $4 | 0;
    __label__ = 14;
    break;
   case 6:
    if (($4 | 0) == 1) {
      __label__ = 7;
      break;
    } else if (($4 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 7:
    var $27 = HEAPU32[$2 >> 2];
    if ($27 >>> 0 > $uval >>> 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    HEAP32[$6 >> 2] = $uval - $27 | 0;
    var $wn_0 = ($27 | 0) != ($uval | 0) & 1;
    __label__ = 14;
    break;
   case 9:
    HEAP32[$6 >> 2] = $27 - $uval | 0;
    var $wn_0 = -1;
    __label__ = 14;
    break;
   case 10:
    HEAP32[$6 >> 2] = $uval;
    var $wn_0 = ($uval | 0) != 0 & 1;
    __label__ = 14;
    break;
   case 11:
    var $39 = -$4 | 0;
    var $40 = 1 - $4 | 0;
    if (($40 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 12;
      break;
    } else {
      var $49 = $6;
      var $48 = $2;
      __label__ = 13;
      break;
    }
   case 12:
    var $45 = ___gmpz_realloc($w, $40);
    var $49 = $45;
    var $48 = HEAP32[$1 >> 2];
    __label__ = 13;
    break;
   case 13:
    var $48;
    var $49;
    var $50 = ___gmpn_add_1($49, $48, $39, $uval);
    HEAP32[$49 + ($39 << 2) >> 2] = $50;
    var $wn_0 = (($50 | 0) != 0 & 1) - $4 | 0;
    __label__ = 14;
    break;
   case 14:
    var $wn_0;
    HEAP32[$w + 4 >> 2] = $wn_0;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_ui_sub["X"] = 1;

function ___gmpz_urandomb($rop, $rstate, $nbits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = ($nbits + 31 | 0) >>> 5;
    if (($2 | 0) > (HEAP32[$rop >> 2] | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = ___gmpz_realloc($rop, $2);
    var $13 = $7;
    __label__ = 5;
    break;
   case 4:
    var $13 = HEAP32[$rop + 8 >> 2];
    __label__ = 5;
    break;
   case 5:
    var $13;
    var $18 = HEAP32[HEAP32[$rstate + 16 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$18]($rstate, $13, $nbits);
    var $size_0 = $2;
    __label__ = 6;
    break;
   case 6:
    var $size_0;
    if (($size_0 | 0) > 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $22 = $size_0 - 1 | 0;
    if ((HEAP32[$13 + ($22 << 2) >> 2] | 0) == 0) {
      var $size_0 = $22;
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    HEAP32[$rop + 4 >> 2] = $size_0;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_abs($dst, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($dst | 0) == ($src | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $9 = HEAP32[$src + 16 >> 2];
    if (($5 | 0) > (HEAP32[$dst >> 2] | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $14 = $dst | 0;
    var $15 = ___gmpz_realloc($14, $5);
    __label__ = 5;
    break;
   case 5:
    var $17 = $dst + 12 | 0;
    if (($9 | 0) > (HEAP32[$17 >> 2] | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $22 = ___gmpz_realloc($17, $9);
    __label__ = 7;
    break;
   case 7:
    if (($2 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $26 = $5 - 1 | 0;
    var $28 = HEAP32[$dst + 8 >> 2];
    var $30 = HEAP32[$src + 8 >> 2];
    var $31 = HEAP32[$30 >> 2];
    if (($26 | 0) == 0) {
      var $__x_1 = $31;
      var $__dst_1 = $28;
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $31;
      var $__n_0 = $26;
      var $__dst_0 = $28;
      var $_pn1 = $30;
      __label__ = 9;
      break;
    }
   case 9:
    var $_pn1;
    var $__dst_0;
    var $__n_0;
    var $__x_0;
    var $__src_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $34 = HEAP32[$__src_0 >> 2];
    var $35 = $__n_0 - 1 | 0;
    if (($35 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $__x_0 = $34;
      var $__n_0 = $35;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn1 = $__src_0;
      __label__ = 9;
      break;
    }
   case 10:
    var $__x_1 = $34;
    var $__dst_1 = $28 + ($26 << 2) | 0;
    __label__ = 11;
    break;
   case 11:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 12;
    break;
   case 12:
    if (($9 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $41 = $9 - 1 | 0;
    var $43 = HEAP32[$dst + 20 >> 2];
    var $45 = HEAP32[$src + 20 >> 2];
    var $46 = HEAP32[$45 >> 2];
    if (($41 | 0) == 0) {
      var $__x4_1 = $46;
      var $__dst2_1 = $43;
      __label__ = 16;
      break;
    } else {
      var $__x4_0 = $46;
      var $_pn = $45;
      var $__dst2_0 = $43;
      var $__n1_0 = $41;
      __label__ = 14;
      break;
    }
   case 14:
    var $__n1_0;
    var $__dst2_0;
    var $_pn;
    var $__x4_0;
    var $__src3_0 = $_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $49 = HEAP32[$__src3_0 >> 2];
    var $50 = $__n1_0 - 1 | 0;
    if (($50 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $__x4_0 = $49;
      var $_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $50;
      __label__ = 14;
      break;
    }
   case 15:
    var $__x4_1 = $49;
    var $__dst2_1 = $43 + ($41 << 2) | 0;
    __label__ = 16;
    break;
   case 16:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 17;
    break;
   case 17:
    HEAP32[$dst + 16 >> 2] = $9;
    __label__ = 18;
    break;
   case 18:
    HEAP32[$dst + 4 >> 2] = $5;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_abs["X"] = 1;

function ___gmpq_clear($m) {
  var $1 = HEAP32[___gmp_free_func >> 2];
  var $4 = HEAP32[$m + 8 >> 2];
  var $7 = HEAP32[$m >> 2] << 2;
  FUNCTION_TABLE[$1]($4, $7);
  var $8 = HEAP32[___gmp_free_func >> 2];
  var $11 = HEAP32[$m + 20 >> 2];
  var $14 = HEAP32[$m + 12 >> 2] << 2;
  FUNCTION_TABLE[$8]($11, $14);
  return;
}

function ___gmpq_clears($x) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ap = __stackBase__;
    HEAP32[$ap >> 2] = arguments[___gmpq_clears.length];
    if (($x | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $x;
      __label__ = 3;
      break;
    }
   case 3:
    var $_01;
    ___gmpq_clear($_01);
    var $3 = HEAP32[$ap >> 2];
    var $4 = $3;
    var $5 = $3 + 4 | 0;
    HEAP32[$ap >> 2] = $5;
    var $6 = HEAP32[$4 >> 2];
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $6;
      __label__ = 3;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_cmp($op1, $op2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$op1 + 4 >> 2];
    var $4 = HEAPU32[$op1 + 16 >> 2];
    var $6 = HEAP32[$op2 + 4 >> 2];
    var $8 = HEAPU32[$op2 + 16 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = -$6 | 0;
    __label__ = 36;
    break;
   case 4:
    if (($6 | 0) == 0) {
      var $_0 = $2;
      __label__ = 36;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($6 ^ $2 | 0) < 0) {
      var $_0 = $2;
      __label__ = 36;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $19 = -$2 | 0;
    var $20 = ($2 | 0) > -1 ? $2 : $19;
    var $23 = ($6 | 0) > -1 ? $6 : -$6 | 0;
    var $24 = $8 + $20 | 0;
    var $25 = $23 + $4 | 0;
    if (($24 | 0) > ($25 + 1 | 0)) {
      var $_0 = $2;
      __label__ = 36;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($25 | 0) > ($24 + 1 | 0)) {
      var $_0 = $19;
      __label__ = 36;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $33 = $op1 + 8 | 0;
    var $36 = HEAPU32[HEAP32[$33 >> 2] + ($20 - 1 << 2) >> 2];
    if ($36 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $40 = $36 >>> 0 < 256 ? 1 : 9;
    var $45 = $40;
    __label__ = 11;
    break;
   case 10:
    var $43 = $36 >>> 0 < 16777216 ? 17 : 25;
    var $45 = $43;
    __label__ = 11;
    break;
   case 11:
    var $45;
    var $47 = STRING_TABLE.___gmpn_clz_tab + ($36 >>> ($45 >>> 0)) | 0;
    var $49 = HEAPU8[$47] & 255;
    var $51 = $op2 + 20 | 0;
    var $54 = HEAPU32[HEAP32[$51 >> 2] + ($8 - 1 << 2) >> 2];
    if ($54 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $58 = $54 >>> 0 < 256 ? 1 : 9;
    var $63 = $58;
    __label__ = 14;
    break;
   case 13:
    var $61 = $54 >>> 0 < 16777216 ? 17 : 25;
    var $63 = $61;
    __label__ = 14;
    break;
   case 14:
    var $63;
    var $65 = STRING_TABLE.___gmpn_clz_tab + ($54 >>> ($63 >>> 0)) | 0;
    var $73 = ($24 << 5) - 66 + $45 + $49 + $63 + (HEAPU8[$65] & 255) | 0;
    var $75 = $op2 + 8 | 0;
    var $78 = HEAPU32[HEAP32[$75 >> 2] + ($23 - 1 << 2) >> 2];
    if ($78 >>> 0 < 65536) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $82 = $78 >>> 0 < 256 ? 1 : 9;
    var $87 = $82;
    __label__ = 17;
    break;
   case 16:
    var $85 = $78 >>> 0 < 16777216 ? 17 : 25;
    var $87 = $85;
    __label__ = 17;
    break;
   case 17:
    var $87;
    var $89 = STRING_TABLE.___gmpn_clz_tab + ($78 >>> ($87 >>> 0)) | 0;
    var $91 = HEAPU8[$89] & 255;
    var $93 = $op1 + 20 | 0;
    var $96 = HEAPU32[HEAP32[$93 >> 2] + ($4 - 1 << 2) >> 2];
    if ($96 >>> 0 < 65536) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $100 = $96 >>> 0 < 256 ? 1 : 9;
    var $105 = $100;
    __label__ = 20;
    break;
   case 19:
    var $103 = $96 >>> 0 < 16777216 ? 17 : 25;
    var $105 = $103;
    __label__ = 20;
    break;
   case 20:
    var $105;
    var $107 = STRING_TABLE.___gmpn_clz_tab + ($96 >>> ($105 >>> 0)) | 0;
    var $115 = ($25 << 5) - 66 + $87 + $91 + $105 + (HEAPU8[$107] & 255) | 0;
    if ($73 >>> 0 > ($115 + 1 | 0) >>> 0) {
      var $_0 = $2;
      __label__ = 36;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    if ($115 >>> 0 > ($73 + 1 | 0) >>> 0) {
      var $_0 = $19;
      __label__ = 36;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $123 = $25 + $24 << 2;
    if ($123 >>> 0 < 65536) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $126 = STACKTOP;
    STACKTOP += $123;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $130 = $126;
    __label__ = 25;
    break;
   case 24:
    var $128 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $123);
    var $130 = $128;
    __label__ = 25;
    break;
   case 25:
    var $130;
    var $131 = $130;
    var $132 = $131 + ($24 << 2) | 0;
    if (($20 | 0) < ($8 | 0)) {
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $135 = HEAP32[$33 >> 2];
    var $136 = HEAP32[$51 >> 2];
    var $137 = ___gmpn_mul($131, $135, $20, $136, $8);
    var $_pn = ($137 | 0) == 0 & 1;
    __label__ = 28;
    break;
   case 27:
    var $141 = HEAP32[$51 >> 2];
    var $142 = HEAP32[$33 >> 2];
    var $143 = ___gmpn_mul($131, $141, $8, $142, $20);
    var $_pn = ($143 | 0) == 0 & 1;
    __label__ = 28;
    break;
   case 28:
    var $_pn;
    var $tmp1_size_0 = $24 - $_pn | 0;
    if (($23 | 0) < ($4 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $149 = HEAP32[$75 >> 2];
    var $150 = HEAP32[$93 >> 2];
    var $151 = ___gmpn_mul($132, $149, $23, $150, $4);
    var $_pn1 = ($151 | 0) == 0 & 1;
    __label__ = 31;
    break;
   case 30:
    var $155 = HEAP32[$93 >> 2];
    var $156 = HEAP32[$75 >> 2];
    var $157 = ___gmpn_mul($132, $155, $4, $156, $23);
    var $_pn1 = ($157 | 0) == 0 & 1;
    __label__ = 31;
    break;
   case 31:
    var $_pn1;
    var $161 = $_pn1 - $25 + $tmp1_size_0 | 0;
    if (($161 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      var $165 = $161;
      __label__ = 33;
      break;
    }
   case 32:
    var $164 = ___gmpn_cmp($131, $132, $tmp1_size_0);
    var $165 = $164;
    __label__ = 33;
    break;
   case 33:
    var $165;
    var $166 = HEAP32[$__tmp_marker >> 2];
    if (($166 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    ___gmp_tmp_reentrant_free($166);
    __label__ = 35;
    break;
   case 35:
    var $172 = ($2 | 0) < 0 ? -$165 | 0 : $165;
    var $_0 = $172;
    __label__ = 36;
    break;
   case 36:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_cmp["X"] = 1;

function ___gmpz_sqrt($root, $op) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $2 = HEAPU32[$op + 4 >> 2];
    if (($2 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($2 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmp_sqrt_of_negative();
    throw "Reached an unreachable!";
   case 5:
    HEAP32[$root + 4 >> 2] = 0;
    __label__ = 24;
    break;
   case 6:
    var $11 = ($2 + 1 | 0) / 2 & -1;
    var $12 = $root + 8 | 0;
    var $13 = HEAPU32[$12 >> 2];
    var $15 = HEAPU32[$op + 8 >> 2];
    var $16 = $root | 0;
    var $17 = HEAPU32[$16 >> 2];
    var $19 = ($13 | 0) == ($15 | 0);
    if (($17 | 0) < ($11 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    if ($19) {
      var $free_me_0 = $13;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $22 = HEAP32[___gmp_free_func >> 2];
    var $23 = $13;
    var $24 = $17 << 2;
    FUNCTION_TABLE[$22]($23, $24);
    var $free_me_0 = 0;
    __label__ = 9;
    break;
   case 9:
    var $free_me_0;
    HEAP32[$16 >> 2] = $11;
    var $26 = HEAP32[___gmp_allocate_func >> 2];
    var $27 = $11 << 2;
    var $28 = FUNCTION_TABLE[$26]($27);
    var $29 = $28;
    HEAP32[$12 >> 2] = $29;
    var $root_ptr_0 = $29;
    var $op_ptr_0 = $15;
    var $free_me_1 = $free_me_0;
    __label__ = 20;
    break;
   case 10:
    if ($19) {
      __label__ = 11;
      break;
    } else {
      var $root_ptr_0 = $13;
      var $op_ptr_0 = $15;
      var $free_me_1 = 0;
      __label__ = 20;
      break;
    }
   case 11:
    var $32 = $2 << 2;
    if ($32 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $35 = STACKTOP;
    STACKTOP += $32;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $39 = $35;
    __label__ = 14;
    break;
   case 13:
    var $37 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $32);
    var $39 = $37;
    __label__ = 14;
    break;
   case 14:
    var $39;
    var $40 = $39;
    if (($2 | 0) == 0) {
      var $root_ptr_0 = $13;
      var $op_ptr_0 = $40;
      var $free_me_1 = 0;
      __label__ = 20;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $43 = $2 - 1 | 0;
    var $44 = HEAPU32[$13 >> 2];
    if (($43 | 0) == 0) {
      var $__x_1 = $44;
      var $__dst_1 = $40;
      __label__ = 19;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $scevgep = $39 + ($32 - 4) | 0;
    var $__x_0 = $44;
    var $_pn = $13;
    var $__dst_0 = $40;
    var $__n_0 = $43;
    __label__ = 17;
    break;
   case 17:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $49 = HEAP32[$__src_0 >> 2];
    var $50 = $__n_0 - 1 | 0;
    if (($50 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      var $__x_0 = $49;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $50;
      __label__ = 17;
      break;
    }
   case 18:
    var $__x_1 = $49;
    var $__dst_1 = $scevgep;
    __label__ = 19;
    break;
   case 19:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $root_ptr_0 = $13;
    var $op_ptr_0 = $40;
    var $free_me_1 = 0;
    __label__ = 20;
    break;
   case 20:
    var $free_me_1;
    var $op_ptr_0;
    var $root_ptr_0;
    var $54 = ___gmpn_sqrtrem($root_ptr_0, 0, $op_ptr_0, $2);
    HEAP32[$root + 4 >> 2] = $11;
    if (($free_me_1 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $58 = HEAP32[___gmp_free_func >> 2];
    var $60 = $17 << 2;
    FUNCTION_TABLE[$58]($free_me_1, $60);
    __label__ = 22;
    break;
   case 22:
    var $61 = HEAP32[$__tmp_marker >> 2];
    if (($61 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    ___gmp_tmp_reentrant_free($61);
    __label__ = 24;
    break;
   case 24:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_sqrt["X"] = 1;

function ___gmpz_cmp($u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $4 = HEAP32[$v + 4 >> 2];
    if (($2 | 0) == ($4 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_0 = $2 - $4 | 0;
    __label__ = 9;
    break;
   case 4:
    var $9 = ($2 | 0) > -1;
    var $11 = $9 ? $2 : -$2 | 0;
    var $13 = HEAP32[$u + 8 >> 2];
    var $15 = HEAP32[$v + 8 >> 2];
    var $__gmp_i_0 = $11;
    __label__ = 5;
    break;
   case 5:
    var $__gmp_i_0;
    var $17 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      var $cmp_0 = 0;
      __label__ = 8;
      break;
    }
   case 6:
    var $21 = HEAPU32[$13 + ($17 << 2) >> 2];
    var $23 = HEAPU32[$15 + ($17 << 2) >> 2];
    if (($21 | 0) == ($23 | 0)) {
      var $__gmp_i_0 = $17;
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $27 = $21 >>> 0 > $23 >>> 0 ? 1 : -1;
    var $cmp_0 = $27;
    __label__ = 8;
    break;
   case 8:
    var $cmp_0;
    var $29 = $9 ? $cmp_0 : -$cmp_0 | 0;
    var $_0 = $29;
    __label__ = 9;
    break;
   case 9:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_cmp_si($q, $n, $d) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $qabs = __stackBase__;
    var $2 = HEAP32[$q + 4 >> 2];
    var $4 = ($n | 0) > -1;
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if ($4) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 7;
      break;
    }
   case 4:
    var $7 = ___gmpq_cmp_ui($q, $n, $d);
    var $_0 = $7;
    __label__ = 7;
    break;
   case 5:
    if ($4) {
      var $_0 = -1;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $10 = -$2 | 0;
    var $11 = $qabs | 0;
    HEAP32[$qabs + 4 >> 2] = $10;
    var $14 = HEAP32[$q + 8 >> 2];
    HEAP32[$qabs + 8 >> 2] = $14;
    var $17 = HEAP32[$q + 16 >> 2];
    HEAP32[$qabs + 16 >> 2] = $17;
    var $20 = HEAP32[$q + 20 >> 2];
    HEAP32[$qabs + 20 >> 2] = $20;
    var $22 = -$n | 0;
    var $23 = ___gmpq_cmp_ui($11, $22, $d);
    var $_0 = -$23 | 0;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_get_d($src) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $qarr = __stackBase__;
    var $__tmp_marker = __stackBase__ + 16;
    var $2 = HEAPU32[$src + 4 >> 2];
    var $4 = HEAP32[$src + 16 >> 2];
    var $5 = $qarr | 0;
    if (($2 | 0) == 0) {
      var $_0 = 0;
      __label__ = 15;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $10 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $13 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $15 = HEAPU32[$src + 8 >> 2];
    var $17 = HEAP32[$src + 20 >> 2];
    var $18 = $13 - $10 | 0;
    var $19 = -3 - $18 | 0;
    var $20 = $19 << 5;
    var $_ = ($19 | 0) > 0 ? $19 : 0;
    var $22 = $15 + ($_ << 2) | 0;
    var $23 = $10 - $_ | 0;
    var $25 = $18 + 3 + $_ | 0;
    var $26 = $13 + 3 | 0;
    var $27 = ($25 | 0) > 0;
    var $28 = $27 ? $26 : 0;
    var $30 = $28 + $13 << 2;
    if ($30 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $33 = STACKTOP;
    STACKTOP += $30;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $37 = $33;
    __label__ = 6;
    break;
   case 5:
    var $35 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $30);
    var $37 = $35;
    __label__ = 6;
    break;
   case 6:
    var $37;
    var $38 = $37;
    var $39 = $38 + ($13 << 2) | 0;
    if ($27) {
      __label__ = 7;
      break;
    } else {
      var $np_0 = $22;
      var $nsize_0 = $23;
      __label__ = 13;
      break;
    }
   case 7:
    var $scevgep6 = $37 + ($13 << 2) | 0;
    var $43 = $10 - 3 - $13 | 0;
    var $smax = ($43 | 0) > 0 ? $43 : 0;
    var $48 = $13 + $smax + 3 - $10 << 2;
    _memset($scevgep6, 0, $48, 4);
    if (($10 | 0) == ($_ | 0)) {
      var $np_0 = $39;
      var $nsize_0 = $26;
      __label__ = 13;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $51 = $23 - 1 | 0;
    var $52 = $38 + ($25 + $13 << 2) | 0;
    var $53 = HEAP32[$22 >> 2];
    if (($51 | 0) == 0) {
      var $__x_1 = $53;
      var $__dst2_1 = $52;
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $scevgep = $37 + (($13 << 3) + 8) | 0;
    var $__x_0 = $53;
    var $__src_0 = $15 + ($_ + 1 << 2) | 0;
    var $__dst2_0 = $52;
    var $__n1_0 = $51;
    __label__ = 10;
    break;
   case 10:
    var $__n1_0;
    var $__dst2_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $61 = HEAP32[$__src_0 >> 2];
    var $62 = $__n1_0 - 1 | 0;
    if (($62 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $61;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $62;
      __label__ = 10;
      break;
    }
   case 11:
    var $__x_1 = $61;
    var $__dst2_1 = $scevgep;
    __label__ = 12;
    break;
   case 12:
    var $__dst2_1;
    var $__x_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    var $np_0 = $39;
    var $nsize_0 = $26;
    __label__ = 13;
    break;
   case 13:
    var $nsize_0;
    var $np_0;
    ___gmpn_tdiv_qr($5, $38, 0, $np_0, $nsize_0, $17, $13);
    var $68 = (HEAP32[$qarr + 12 >> 2] | 0) == 0 ? 3 : 4;
    var $69 = ___gmpn_get_d($5, $68, $2, $20);
    var $70 = HEAP32[$__tmp_marker >> 2];
    if (($70 | 0) == 0) {
      var $_0 = $69;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    ___gmp_tmp_reentrant_free($70);
    var $_0 = $69;
    __label__ = 15;
    break;
   case 15:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_get_d["X"] = 1;

function ___gmpq_get_str($str, $base, $q) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($str | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_0 = $str;
    var $str_alloc_0 = 0;
    var $_pre_phi = $q + 16 | 0;
    __label__ = 5;
    break;
   case 4:
    var $4 = HEAP32[$q + 4 >> 2];
    var $7 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $8 = $q + 16 | 0;
    var $12 = $7 + HEAP32[$8 >> 2] << 5 | 0;
    var $15 = ($base | 0) > -1 ? $base : -$base | 0;
    var $16 = ___gmpn_bases + $15 * 20 + 4 | 0;
    var $17 = (tempDoubleI32[0] = HEAP32[$16 >> 2], tempDoubleI32[1] = HEAP32[$16 + 4 >> 2], tempDoubleF64[0]);
    var $18 = $12 * $17;
    var $19 = $18 >= 0 ? Math.floor($18) : Math.ceil($18);
    var $20 = $19 + 5 | 0;
    var $21 = HEAP32[___gmp_allocate_func >> 2];
    var $22 = FUNCTION_TABLE[$21]($20);
    var $_0 = $22;
    var $str_alloc_0 = $20;
    var $_pre_phi = $8;
    __label__ = 5;
    break;
   case 5:
    var $_pre_phi;
    var $str_alloc_0;
    var $_0;
    var $24 = $q | 0;
    var $25 = ___gmpz_get_str($_0, $base, $24);
    var $26 = _strlen($_0);
    var $27 = $q + 12 | 0;
    if ((HEAP32[$_pre_phi >> 2] | 0) == 1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    if ((HEAP32[HEAP32[$q + 20 >> 2] >> 2] | 0) == 1) {
      var $len_0 = $26;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $36 = $26 + 1 | 0;
    HEAP8[$_0 + $26 | 0] = 47;
    var $38 = $_0 + $36 | 0;
    var $39 = ___gmpz_get_str($38, $base, $27);
    var $40 = _strlen($38);
    var $len_0 = $40 + $36 | 0;
    __label__ = 8;
    break;
   case 8:
    var $len_0;
    if (($str_alloc_0 | 0) == 0) {
      var $_1 = $_0;
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $45 = $len_0 + 1 | 0;
    if (($str_alloc_0 | 0) == ($45 | 0)) {
      var $_1 = $_0;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $48 = HEAP32[___gmp_reallocate_func >> 2];
    var $49 = FUNCTION_TABLE[$48]($_0, $str_alloc_0, $45);
    var $_1 = $49;
    __label__ = 11;
    break;
   case 11:
    var $_1;
    return $_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_get_str["X"] = 1;

function ___gmpq_init($x) {
  HEAP32[$x >> 2] = 1;
  var $2 = HEAP32[___gmp_allocate_func >> 2];
  var $3 = FUNCTION_TABLE[$2](4);
  var $4 = $3;
  HEAP32[$x + 8 >> 2] = $4;
  HEAP32[$x + 4 >> 2] = 0;
  HEAP32[$x + 12 >> 2] = 1;
  var $8 = HEAP32[___gmp_allocate_func >> 2];
  var $9 = FUNCTION_TABLE[$8](4);
  var $10 = $9;
  HEAP32[$x + 20 >> 2] = $10;
  HEAP32[$10 >> 2] = 1;
  HEAP32[$x + 16 >> 2] = 1;
  return;
}

function ___gmpq_inits($x) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ap = __stackBase__;
    HEAP32[$ap >> 2] = arguments[___gmpq_inits.length];
    if (($x | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $x;
      __label__ = 3;
      break;
    }
   case 3:
    var $_01;
    ___gmpq_init($_01);
    var $3 = HEAP32[$ap >> 2];
    var $4 = $3;
    var $5 = $3 + 4 | 0;
    HEAP32[$ap >> 2] = $5;
    var $6 = HEAP32[$4 >> 2];
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $6;
      __label__ = 3;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_inp_str($q, $fp, $base) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_fp = ($fp | 0) == 0 ? HEAP32[_stdin >> 2] : $fp;
    var $3 = $q + 12 | 0;
    var $4 = $q + 16 | 0;
    HEAP32[$4 >> 2] = 1;
    var $5 = $q + 20 | 0;
    var $6 = HEAP32[$5 >> 2];
    HEAP32[$6 >> 2] = 1;
    var $7 = $q | 0;
    var $8 = ___gmpz_inp_str($7, $_fp, $base);
    if (($8 | 0) == 0) {
      var $_0 = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $11 = _getc($_fp);
    if (($11 | 0) == 47) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 4:
    var $14 = _getc($_fp);
    var $15 = $8 + 2 | 0;
    var $16 = ___gmpz_inp_str_nowhite($3, $_fp, $base, $14, $15);
    if (($16 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $_0 = $16;
      __label__ = 7;
      break;
    }
   case 5:
    HEAP32[$q + 4 >> 2] = 0;
    HEAP32[$4 >> 2] = 1;
    var $20 = HEAP32[$5 >> 2];
    HEAP32[$20 >> 2] = 1;
    var $_0 = 0;
    __label__ = 7;
    break;
   case 6:
    var $22 = _ungetc($11, $_fp);
    var $_0 = $8;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_mul($prod, $op1, $op2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 52;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $gcd1 = __stackBase__;
    var $gcd2 = __stackBase__ + 12;
    var $tmp1 = __stackBase__ + 24;
    var $tmp2 = __stackBase__ + 36;
    var $__tmp_marker = __stackBase__ + 48;
    if (($op1 | 0) == ($op2 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = $prod | 0;
    var $4 = $op1 | 0;
    ___gmpz_mul($3, $4, $4);
    var $5 = $prod + 12 | 0;
    var $6 = $op1 + 12 | 0;
    ___gmpz_mul($5, $6, $6);
    __label__ = 20;
    break;
   case 4:
    var $8 = $op1 | 0;
    var $10 = HEAP32[$op1 + 4 >> 2];
    var $13 = ($10 | 0) > -1 ? $10 : -$10 | 0;
    var $14 = $op1 + 12 | 0;
    var $16 = HEAPU32[$op1 + 16 >> 2];
    var $17 = $op2 | 0;
    var $19 = HEAP32[$op2 + 4 >> 2];
    var $22 = ($19 | 0) > -1 ? $19 : -$19 | 0;
    var $23 = $op2 + 12 | 0;
    var $25 = HEAPU32[$op2 + 16 >> 2];
    if (($13 | 0) == 0 | ($22 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$prod + 4 >> 2] = 0;
    var $31 = HEAP32[$prod + 20 >> 2];
    HEAP32[$31 >> 2] = 1;
    HEAP32[$prod + 16 >> 2] = 1;
    __label__ = 20;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $35 = ($13 | 0) < ($25 | 0) ? $13 : $25;
    var $36 = $gcd1 | 0;
    HEAP32[$gcd1 >> 2] = $35;
    var $38 = $35 << 2;
    if ($38 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $41 = STACKTOP;
    STACKTOP += $38;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $45 = $41;
    __label__ = 9;
    break;
   case 8:
    var $43 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $38);
    var $45 = $43;
    __label__ = 9;
    break;
   case 9:
    var $45;
    HEAP32[$gcd1 + 8 >> 2] = $45;
    var $49 = ($22 | 0) < ($16 | 0) ? $22 : $16;
    var $50 = $gcd2 | 0;
    HEAP32[$gcd2 >> 2] = $49;
    var $52 = $49 << 2;
    if ($52 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $55 = STACKTOP;
    STACKTOP += $52;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $59 = $55;
    __label__ = 12;
    break;
   case 11:
    var $57 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $52);
    var $59 = $57;
    __label__ = 12;
    break;
   case 12:
    var $59;
    HEAP32[$gcd2 + 8 >> 2] = $59;
    var $63 = ($13 | 0) > ($25 | 0) ? $13 : $25;
    var $64 = $tmp1 | 0;
    HEAP32[$tmp1 >> 2] = $63;
    var $66 = $63 << 2;
    if ($66 >>> 0 < 65536) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $69 = STACKTOP;
    STACKTOP += $66;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $73 = $69;
    __label__ = 15;
    break;
   case 14:
    var $71 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $66);
    var $73 = $71;
    __label__ = 15;
    break;
   case 15:
    var $73;
    HEAP32[$tmp1 + 8 >> 2] = $73;
    var $77 = ($22 | 0) > ($16 | 0) ? $22 : $16;
    var $78 = $tmp2 | 0;
    HEAP32[$tmp2 >> 2] = $77;
    var $80 = $77 << 2;
    if ($80 >>> 0 < 65536) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $83 = STACKTOP;
    STACKTOP += $80;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $87 = $83;
    __label__ = 18;
    break;
   case 17:
    var $85 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $80);
    var $87 = $85;
    __label__ = 18;
    break;
   case 18:
    var $87;
    HEAP32[$tmp2 + 8 >> 2] = $87;
    ___gmpz_gcd($36, $8, $23);
    ___gmpz_gcd($50, $17, $14);
    ___gmpz_divexact_gcd($64, $8, $36);
    ___gmpz_divexact_gcd($78, $17, $50);
    var $90 = $prod | 0;
    ___gmpz_mul($90, $64, $78);
    ___gmpz_divexact_gcd($64, $23, $36);
    ___gmpz_divexact_gcd($78, $14, $50);
    var $91 = $prod + 12 | 0;
    ___gmpz_mul($91, $64, $78);
    var $92 = HEAP32[$__tmp_marker >> 2];
    if (($92 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    ___gmp_tmp_reentrant_free($92);
    __label__ = 20;
    break;
   case 20:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_mul["X"] = 1;

function ___gmpq_neg($dst, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    if (($src | 0) == ($dst | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_pre_phi = -$2 | 0;
    __label__ = 19;
    break;
   case 4:
    var $6 = -$2 | 0;
    var $7 = ($2 | 0) > -1 ? $2 : $6;
    var $9 = HEAP32[$src + 16 >> 2];
    if (($7 | 0) > (HEAP32[$dst >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $14 = $dst | 0;
    var $15 = ___gmpz_realloc($14, $7);
    __label__ = 6;
    break;
   case 6:
    var $17 = $dst + 12 | 0;
    if (($9 | 0) > (HEAP32[$17 >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $22 = ___gmpz_realloc($17, $9);
    __label__ = 8;
    break;
   case 8:
    if (($2 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $26 = $7 - 1 | 0;
    var $28 = HEAP32[$dst + 8 >> 2];
    var $30 = HEAP32[$src + 8 >> 2];
    var $31 = HEAP32[$30 >> 2];
    if (($26 | 0) == 0) {
      var $__x_1 = $31;
      var $__dst_1 = $28;
      __label__ = 12;
      break;
    } else {
      var $__x_0 = $31;
      var $__n_0 = $26;
      var $__dst_0 = $28;
      var $_pn1 = $30;
      __label__ = 10;
      break;
    }
   case 10:
    var $_pn1;
    var $__dst_0;
    var $__n_0;
    var $__x_0;
    var $__src_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $34 = HEAP32[$__src_0 >> 2];
    var $35 = $__n_0 - 1 | 0;
    if (($35 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $34;
      var $__n_0 = $35;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn1 = $__src_0;
      __label__ = 10;
      break;
    }
   case 11:
    var $__x_1 = $34;
    var $__dst_1 = $28 + ($26 << 2) | 0;
    __label__ = 12;
    break;
   case 12:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    if (($9 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $41 = $9 - 1 | 0;
    var $43 = HEAP32[$dst + 20 >> 2];
    var $45 = HEAP32[$src + 20 >> 2];
    var $46 = HEAP32[$45 >> 2];
    if (($41 | 0) == 0) {
      var $__x4_1 = $46;
      var $__dst2_1 = $43;
      __label__ = 17;
      break;
    } else {
      var $__x4_0 = $46;
      var $_pn = $45;
      var $__dst2_0 = $43;
      var $__n1_0 = $41;
      __label__ = 15;
      break;
    }
   case 15:
    var $__n1_0;
    var $__dst2_0;
    var $_pn;
    var $__x4_0;
    var $__src3_0 = $_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $49 = HEAP32[$__src3_0 >> 2];
    var $50 = $__n1_0 - 1 | 0;
    if (($50 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $__x4_0 = $49;
      var $_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $50;
      __label__ = 15;
      break;
    }
   case 16:
    var $__x4_1 = $49;
    var $__dst2_1 = $43 + ($41 << 2) | 0;
    __label__ = 17;
    break;
   case 17:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 18;
    break;
   case 18:
    HEAP32[$dst + 16 >> 2] = $9;
    var $_pre_phi = $6;
    __label__ = 19;
    break;
   case 19:
    var $_pre_phi;
    HEAP32[$dst + 4 >> 2] = $_pre_phi;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_neg["X"] = 1;

function ___gmpq_cmp_ui($op1, $num2, $den2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$op1 + 4 >> 2];
    var $4 = HEAPU32[$op1 + 16 >> 2];
    if (($den2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $_0 = (($num2 | 0) != 0) << 31 >> 31;
    __label__ = 21;
    break;
   case 6:
    if (($2 | 0) < 0 | ($num2 | 0) == 0) {
      var $_0 = $2;
      __label__ = 21;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $16 = $4 + 1 | 0;
    if (($2 | 0) > ($16 | 0)) {
      var $_0 = $2;
      __label__ = 21;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $19 = $2 + 1 | 0;
    if (($4 | 0) > ($19 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $_0 = -$2 | 0;
    __label__ = 21;
    break;
   case 10:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $24 = $19 << 2;
    if ($24 >>> 0 < 65536) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $27 = STACKTOP;
    STACKTOP += $24;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $31 = $27;
    __label__ = 13;
    break;
   case 12:
    var $29 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $24);
    var $31 = $29;
    __label__ = 13;
    break;
   case 13:
    var $31;
    var $32 = $31;
    var $33 = $16 << 2;
    if ($33 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $36 = STACKTOP;
    STACKTOP += $33;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $40 = $36;
    __label__ = 16;
    break;
   case 15:
    var $38 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $33);
    var $40 = $38;
    __label__ = 16;
    break;
   case 16:
    var $40;
    var $41 = $40;
    var $43 = HEAP32[$op1 + 8 >> 2];
    var $44 = ___gmpn_mul_1($32, $43, $2, $den2);
    HEAP32[$32 + ($2 << 2) >> 2] = $44;
    var $48 = (($44 | 0) != 0 & 1) + $2 | 0;
    var $50 = HEAP32[$op1 + 20 >> 2];
    var $51 = ___gmpn_mul_1($41, $50, $4, $num2);
    HEAP32[$41 + ($4 << 2) >> 2] = $51;
    var $55 = (($51 | 0) != 0 & 1) + $4 | 0;
    if (($48 | 0) == ($55 | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $62 = $48 - $55 | 0;
    __label__ = 19;
    break;
   case 18:
    var $60 = ___gmpn_cmp($32, $41, $48);
    var $62 = $60;
    __label__ = 19;
    break;
   case 19:
    var $62;
    var $63 = HEAP32[$__tmp_marker >> 2];
    if (($63 | 0) == 0) {
      var $_0 = $62;
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    ___gmp_tmp_reentrant_free($63);
    var $_0 = $62;
    __label__ = 21;
    break;
   case 21:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_cmp_ui["X"] = 1;

function ___gmpq_div($quot, $op1, $op2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 64;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $gcd1 = __stackBase__;
    var $gcd2 = __stackBase__ + 12;
    var $tmp1 = __stackBase__ + 24;
    var $tmp2 = __stackBase__ + 36;
    var $numtmp = __stackBase__ + 48;
    var $__tmp_marker = __stackBase__ + 60;
    var $1 = $op1 | 0;
    var $3 = HEAP32[$op1 + 4 >> 2];
    var $6 = ($3 | 0) > -1 ? $3 : -$3 | 0;
    var $7 = $op1 + 12 | 0;
    var $9 = HEAPU32[$op1 + 16 >> 2];
    var $10 = $op2 | 0;
    var $12 = HEAP32[$op2 + 4 >> 2];
    var $15 = ($12 | 0) > -1 ? $12 : -$12 | 0;
    var $16 = $op2 + 12 | 0;
    var $18 = HEAPU32[$op2 + 16 >> 2];
    if (($15 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($6 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    var $26 = HEAP32[$quot + 20 >> 2];
    HEAP32[$26 >> 2] = 1;
    HEAP32[$quot + 16 >> 2] = 1;
    __label__ = 25;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $30 = ($6 | 0) < ($15 | 0) ? $6 : $15;
    var $31 = $gcd1 | 0;
    HEAP32[$gcd1 >> 2] = $30;
    var $33 = $30 << 2;
    if ($33 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $36 = STACKTOP;
    STACKTOP += $33;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $40 = $36;
    __label__ = 9;
    break;
   case 8:
    var $38 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $33);
    var $40 = $38;
    __label__ = 9;
    break;
   case 9:
    var $40;
    HEAP32[$gcd1 + 8 >> 2] = $40;
    var $44 = ($9 | 0) < ($18 | 0) ? $9 : $18;
    var $45 = $gcd2 | 0;
    HEAP32[$gcd2 >> 2] = $44;
    var $47 = $44 << 2;
    if ($47 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $50 = STACKTOP;
    STACKTOP += $47;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $54 = $50;
    __label__ = 12;
    break;
   case 11:
    var $52 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $47);
    var $54 = $52;
    __label__ = 12;
    break;
   case 12:
    var $54;
    HEAP32[$gcd2 + 8 >> 2] = $54;
    var $58 = ($6 | 0) > ($15 | 0) ? $6 : $15;
    var $59 = $tmp1 | 0;
    HEAP32[$tmp1 >> 2] = $58;
    var $61 = $58 << 2;
    if ($61 >>> 0 < 65536) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $64 = STACKTOP;
    STACKTOP += $61;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $68 = $64;
    __label__ = 15;
    break;
   case 14:
    var $66 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $61);
    var $68 = $66;
    __label__ = 15;
    break;
   case 15:
    var $68;
    HEAP32[$tmp1 + 8 >> 2] = $68;
    var $72 = ($9 | 0) > ($18 | 0) ? $9 : $18;
    var $73 = $tmp2 | 0;
    HEAP32[$tmp2 >> 2] = $72;
    var $75 = $72 << 2;
    if ($75 >>> 0 < 65536) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $78 = STACKTOP;
    STACKTOP += $75;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $82 = $78;
    __label__ = 18;
    break;
   case 17:
    var $80 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $75);
    var $82 = $80;
    __label__ = 18;
    break;
   case 18:
    var $82;
    HEAP32[$tmp2 + 8 >> 2] = $82;
    var $85 = $18 + $6 | 0;
    var $86 = $numtmp | 0;
    HEAP32[$numtmp >> 2] = $85;
    var $88 = $85 << 2;
    if ($88 >>> 0 < 65536) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $91 = STACKTOP;
    STACKTOP += $88;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $95 = $91;
    __label__ = 21;
    break;
   case 20:
    var $93 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88);
    var $95 = $93;
    __label__ = 21;
    break;
   case 21:
    var $95;
    HEAP32[$numtmp + 8 >> 2] = $95;
    ___gmpz_gcd($31, $1, $10);
    ___gmpz_gcd($45, $16, $7);
    ___gmpz_divexact_gcd($59, $1, $31);
    ___gmpz_divexact_gcd($73, $16, $45);
    ___gmpz_mul($86, $59, $73);
    ___gmpz_divexact_gcd($59, $10, $31);
    ___gmpz_divexact_gcd($73, $7, $45);
    var $98 = $quot + 12 | 0;
    ___gmpz_mul($98, $59, $73);
    var $99 = $quot | 0;
    ___gmpz_set($99, $86);
    var $100 = $quot + 16 | 0;
    var $101 = HEAP32[$100 >> 2];
    if (($101 | 0) < 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $104 = -$101 | 0;
    HEAP32[$100 >> 2] = $104;
    var $105 = $quot + 4 | 0;
    var $107 = -HEAP32[$105 >> 2] | 0;
    HEAP32[$105 >> 2] = $107;
    __label__ = 23;
    break;
   case 23:
    var $108 = HEAP32[$__tmp_marker >> 2];
    if (($108 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    ___gmp_tmp_reentrant_free($108);
    __label__ = 25;
    break;
   case 25:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_div["X"] = 1;

function ___gmpq_set_si($dest, $num, $den) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($num | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$dest + 4 >> 2] = 0;
    var $_0 = 1;
    __label__ = 5;
    break;
   case 4:
    var $7 = ($num | 0) > -1 ? $num : -$num | 0;
    var $9 = HEAP32[$dest + 8 >> 2];
    HEAP32[$9 >> 2] = $7;
    var $11 = ($num | 0) > 0 ? 1 : -1;
    HEAP32[$dest + 4 >> 2] = $11;
    var $_0 = $den;
    __label__ = 5;
    break;
   case 5:
    var $_0;
    var $15 = HEAP32[$dest + 20 >> 2];
    HEAP32[$15 >> 2] = $_0;
    HEAP32[$dest + 16 >> 2] = ($_0 | 0) != 0 & 1;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_set_ui($dest, $num, $den) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($num | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$dest + 4 >> 2] = 0;
    var $_0 = 1;
    __label__ = 5;
    break;
   case 4:
    var $6 = HEAP32[$dest + 8 >> 2];
    HEAP32[$6 >> 2] = $num;
    HEAP32[$dest + 4 >> 2] = 1;
    var $_0 = $den;
    __label__ = 5;
    break;
   case 5:
    var $_0;
    var $10 = HEAP32[$dest + 20 >> 2];
    HEAP32[$10 >> 2] = $_0;
    HEAP32[$dest + 16 >> 2] = ($_0 | 0) != 0 & 1;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_out_str($stream, $base, $q) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_stream = ($stream | 0) == 0 ? HEAP32[_stdout >> 2] : $stream;
    var $3 = $q | 0;
    var $4 = ___gmpz_out_str($_stream, $base, $3);
    var $5 = $q + 12 | 0;
    var $6 = ___gmpz_cmp_ui($5, 1);
    if (($6 | 0) == 0) {
      var $written_0 = $4;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $9 = _putc(47, $_stream);
    var $10 = ___gmpz_out_str($_stream, $base, $5);
    var $written_0 = $4 + 1 + $10 | 0;
    __label__ = 4;
    break;
   case 4:
    var $written_0;
    var $14 = _ferror($_stream);
    var $16 = ($14 | 0) != 0 ? 0 : $written_0;
    return $16;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_set($dest, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if ((HEAP32[$dest >> 2] | 0) < ($5 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = $dest | 0;
    var $11 = ___gmpz_realloc($10, $5);
    __label__ = 4;
    break;
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $15 = $5 - 1 | 0;
    var $17 = HEAP32[$dest + 8 >> 2];
    var $19 = HEAP32[$src + 8 >> 2];
    var $20 = HEAP32[$19 >> 2];
    if (($15 | 0) == 0) {
      var $__x_1 = $20;
      var $__dst_1 = $17;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $20;
      var $__n_0 = $15;
      var $__dst_0 = $17;
      var $_pn1 = $19;
      __label__ = 6;
      break;
    }
   case 6:
    var $_pn1;
    var $__dst_0;
    var $__n_0;
    var $__x_0;
    var $__src_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $23 = HEAP32[$__src_0 >> 2];
    var $24 = $__n_0 - 1 | 0;
    if (($24 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $23;
      var $__n_0 = $24;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn1 = $__src_0;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $23;
    var $__dst_1 = $17 + ($15 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    HEAP32[$dest + 4 >> 2] = $2;
    var $30 = HEAP32[$src + 16 >> 2];
    var $31 = $dest + 12 | 0;
    if ((HEAP32[$31 >> 2] | 0) < ($30 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $36 = ___gmpz_realloc($31, $30);
    __label__ = 11;
    break;
   case 11:
    if (($30 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $40 = $30 - 1 | 0;
    var $42 = HEAP32[$dest + 20 >> 2];
    var $44 = HEAP32[$src + 20 >> 2];
    var $45 = HEAP32[$44 >> 2];
    if (($40 | 0) == 0) {
      var $__x4_1 = $45;
      var $__dst2_1 = $42;
      __label__ = 15;
      break;
    } else {
      var $__x4_0 = $45;
      var $_pn = $44;
      var $__dst2_0 = $42;
      var $__n1_0 = $40;
      __label__ = 13;
      break;
    }
   case 13:
    var $__n1_0;
    var $__dst2_0;
    var $_pn;
    var $__x4_0;
    var $__src3_0 = $_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $48 = HEAP32[$__src3_0 >> 2];
    var $49 = $__n1_0 - 1 | 0;
    if (($49 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $__x4_0 = $48;
      var $_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $49;
      __label__ = 13;
      break;
    }
   case 14:
    var $__x4_1 = $48;
    var $__dst2_1 = $42 + ($40 << 2) | 0;
    __label__ = 15;
    break;
   case 15:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 16;
    break;
   case 16:
    HEAP32[$dest + 16 >> 2] = $30;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_set["X"] = 1;

function ___gmpq_set_str($q, $str, $base) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = _strchr($str, 47);
    if (($1 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$q + 16 >> 2] = 1;
    var $6 = HEAP32[$q + 20 >> 2];
    HEAP32[$6 >> 2] = 1;
    var $7 = $q | 0;
    var $8 = ___gmpz_set_str($7, $str, $base);
    var $_0 = $8;
    __label__ = 6;
    break;
   case 4:
    var $12 = $1 - $str | 0;
    var $13 = HEAP32[___gmp_allocate_func >> 2];
    var $14 = $12 + 1 | 0;
    var $15 = FUNCTION_TABLE[$13]($14);
    _memcpy($15, $str, $12, 1);
    HEAP8[$15 + $12 | 0] = 0;
    var $17 = $q | 0;
    var $18 = ___gmpz_set_str($17, $15, $base);
    var $19 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$19]($15, $14);
    if (($18 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $_0 = $18;
      __label__ = 6;
      break;
    }
   case 5:
    var $22 = $q + 12 | 0;
    var $23 = $1 + 1 | 0;
    var $24 = ___gmpz_set_str($22, $23, $base);
    var $_0 = $24;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_set_z($dest, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if ((HEAP32[$dest >> 2] | 0) < ($5 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = $dest | 0;
    var $11 = ___gmpz_realloc($10, $5);
    __label__ = 4;
    break;
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $15 = $5 - 1 | 0;
    var $17 = HEAP32[$dest + 8 >> 2];
    var $19 = HEAP32[$src + 8 >> 2];
    var $20 = HEAP32[$19 >> 2];
    if (($15 | 0) == 0) {
      var $__x_1 = $20;
      var $__dst_1 = $17;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $20;
      var $_pn = $19;
      var $__dst_0 = $17;
      var $__n_0 = $15;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $23 = HEAP32[$__src_0 >> 2];
    var $24 = $__n_0 - 1 | 0;
    if (($24 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $23;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $24;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $23;
    var $__dst_1 = $17 + ($15 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    HEAP32[$dest + 4 >> 2] = $2;
    var $30 = HEAP32[$dest + 20 >> 2];
    HEAP32[$30 >> 2] = 1;
    HEAP32[$dest + 16 >> 2] = 1;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_set_f($q, $f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$f + 8 >> 2];
    var $4 = HEAP32[$f + 4 >> 2];
    var $5 = ($4 | 0) > -1;
    if (($4 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$q + 4 >> 2] = 0;
    HEAP32[$q + 16 >> 2] = 1;
    var $11 = HEAP32[$q + 20 >> 2];
    HEAP32[$11 >> 2] = 1;
    __label__ = 38;
    break;
   case 4:
    var $14 = HEAP32[$f + 12 >> 2];
    var $16 = $5 ? $4 : -$4 | 0;
    var $flow_012 = HEAP32[$14 >> 2];
    if (($flow_012 | 0) == 0) {
      var $flow_0_in13 = $14;
      var $abs_fsize_014 = $16;
      __label__ = 5;
      break;
    } else {
      var $flow_0_in_lcssa = $14;
      var $abs_fsize_0_lcssa = $16;
      var $flow_0_lcssa = $flow_012;
      __label__ = 6;
      break;
    }
   case 5:
    var $abs_fsize_014;
    var $flow_0_in13;
    var $18 = $abs_fsize_014 - 1 | 0;
    var $19 = $flow_0_in13 + 4 | 0;
    var $flow_0 = HEAP32[$19 >> 2];
    if (($flow_0 | 0) == 0) {
      var $flow_0_in13 = $19;
      var $abs_fsize_014 = $18;
      __label__ = 5;
      break;
    } else {
      var $flow_0_in_lcssa = $19;
      var $abs_fsize_0_lcssa = $18;
      var $flow_0_lcssa = $flow_0;
      __label__ = 6;
      break;
    }
   case 6:
    var $flow_0_lcssa;
    var $abs_fsize_0_lcssa;
    var $flow_0_in_lcssa;
    if (($2 | 0) < ($abs_fsize_0_lcssa | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($2 | 0) > (HEAP32[$q >> 2] | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $27 = $q | 0;
    var $28 = ___gmpz_realloc($27, $2);
    __label__ = 9;
    break;
   case 9:
    var $31 = HEAP32[$q + 8 >> 2];
    if (($2 | 0) == ($abs_fsize_0_lcssa | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $33 = $31;
    var $35 = $2 - $abs_fsize_0_lcssa << 2;
    _memset($33, 0, $35, 4);
    __label__ = 11;
    break;
   case 11:
    if (($abs_fsize_0_lcssa | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $39 = $abs_fsize_0_lcssa - 1 | 0;
    var $40 = $31 + ($2 - $abs_fsize_0_lcssa << 2) | 0;
    var $41 = HEAP32[$flow_0_in_lcssa >> 2];
    if (($39 | 0) == 0) {
      var $__dst2_1 = $40;
      var $__x_1 = $41;
      __label__ = 16;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $43 = $2 - 1 | 0;
    var $__n1_0 = $39;
    var $__dst2_0 = $40;
    var $fptr_0_pn1 = $flow_0_in_lcssa;
    var $__x_0 = $41;
    __label__ = 14;
    break;
   case 14:
    var $__x_0;
    var $fptr_0_pn1;
    var $__dst2_0;
    var $__n1_0;
    var $__src_0 = $fptr_0_pn1 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $46 = HEAP32[$__src_0 >> 2];
    var $47 = $__n1_0 - 1 | 0;
    if (($47 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $__n1_0 = $47;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $fptr_0_pn1 = $__src_0;
      var $__x_0 = $46;
      __label__ = 14;
      break;
    }
   case 15:
    var $__dst2_1 = $31 + ($43 << 2) | 0;
    var $__x_1 = $46;
    __label__ = 16;
    break;
   case 16:
    var $__x_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    __label__ = 17;
    break;
   case 17:
    var $52 = $5 ? $2 : -$2 | 0;
    HEAP32[$q + 4 >> 2] = $52;
    HEAP32[$q + 16 >> 2] = 1;
    var $56 = HEAP32[$q + 20 >> 2];
    HEAP32[$56 >> 2] = 1;
    __label__ = 38;
    break;
   case 18:
    var $58 = $abs_fsize_0_lcssa - $2 | 0;
    if (($abs_fsize_0_lcssa | 0) > (HEAP32[$q >> 2] | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $63 = $q | 0;
    var $64 = ___gmpz_realloc($63, $abs_fsize_0_lcssa);
    __label__ = 20;
    break;
   case 20:
    var $66 = $58 + 1 | 0;
    var $67 = $q + 12 | 0;
    if (($66 | 0) > (HEAP32[$67 >> 2] | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $72 = ___gmpz_realloc($67, $66);
    __label__ = 22;
    break;
   case 22:
    var $75 = HEAPU32[$q + 8 >> 2];
    var $77 = HEAPU32[$q + 20 >> 2];
    var $78 = $77;
    if (($flow_0_lcssa & 1 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    if (($abs_fsize_0_lcssa | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $84 = $abs_fsize_0_lcssa - 1 | 0;
    var $85 = HEAP32[$flow_0_in_lcssa >> 2];
    if (($84 | 0) == 0) {
      var $__x7_1 = $85;
      var $__dst5_1 = $75;
      __label__ = 27;
      break;
    } else {
      var $__x7_0 = $85;
      var $fptr_0_pn = $flow_0_in_lcssa;
      var $__dst5_0 = $75;
      var $__n4_0 = $84;
      __label__ = 25;
      break;
    }
   case 25:
    var $__n4_0;
    var $__dst5_0;
    var $fptr_0_pn;
    var $__x7_0;
    var $__src6_0 = $fptr_0_pn + 4 | 0;
    HEAP32[$__dst5_0 >> 2] = $__x7_0;
    var $88 = HEAP32[$__src6_0 >> 2];
    var $89 = $__n4_0 - 1 | 0;
    if (($89 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $__x7_0 = $88;
      var $fptr_0_pn = $__src6_0;
      var $__dst5_0 = $__dst5_0 + 4 | 0;
      var $__n4_0 = $89;
      __label__ = 25;
      break;
    }
   case 26:
    var $__x7_1 = $88;
    var $__dst5_1 = $75 + ($84 << 2) | 0;
    __label__ = 27;
    break;
   case 27:
    var $__dst5_1;
    var $__x7_1;
    HEAP32[$__dst5_1 >> 2] = $__x7_1;
    __label__ = 28;
    break;
   case 28:
    if (($abs_fsize_0_lcssa | 0) == ($2 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $94 = $58 << 2;
    _memset($78, 0, $94, 4);
    __label__ = 30;
    break;
   case 30:
    HEAP32[$77 + ($58 << 2) >> 2] = 1;
    var $abs_fsize_1 = $abs_fsize_0_lcssa;
    var $den_size_0 = $58;
    __label__ = 37;
    break;
   case 31:
    var $98 = $58 - 1 | 0;
    var $100 = $flow_0_lcssa & -$flow_0_lcssa;
    if ($100 >>> 0 < 65536) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $104 = $100 >>> 0 < 256 ? 1 : 9;
    var $109 = $104;
    __label__ = 34;
    break;
   case 33:
    var $107 = $100 >>> 0 < 16777216 ? 17 : 25;
    var $109 = $107;
    __label__ = 34;
    break;
   case 34:
    var $109;
    var $111 = STRING_TABLE.___gmpn_clz_tab + ($100 >>> ($109 >>> 0)) | 0;
    var $115 = $109 - 33 + (HEAPU8[$111] & 255) | 0;
    var $116 = $115 + 31 | 0;
    var $117 = ___gmpn_rshift($75, $flow_0_in_lcssa, $abs_fsize_0_lcssa, $116);
    var $123 = $abs_fsize_0_lcssa - ((HEAP32[$75 + ($abs_fsize_0_lcssa - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    if (($98 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $127 = $abs_fsize_0_lcssa + 1073741823 - $2 << 2;
    _memset($78, 0, $127, 4);
    __label__ = 36;
    break;
   case 36:
    HEAP32[$77 + ($98 << 2) >> 2] = -2147483648 >>> (($115 + 30 | 0) >>> 0);
    var $abs_fsize_1 = $123;
    var $den_size_0 = $98;
    __label__ = 37;
    break;
   case 37:
    var $den_size_0;
    var $abs_fsize_1;
    var $134 = $5 ? $abs_fsize_1 : -$abs_fsize_1 | 0;
    HEAP32[$q + 4 >> 2] = $134;
    HEAP32[$q + 16 >> 2] = $den_size_0 + 1 | 0;
    __label__ = 38;
    break;
   case 38:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_set_f["X"] = 1;

function ___gmpz_cmp_d($z, $d) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $darray = __stackBase__;
    tempDoubleF64[0] = $d;
    var $1$0 = tempDoubleI32[0];
    var $1$1 = tempDoubleI32[1];
    if (($1$0 & 0) == 0 && ($1$1 & 2146435072) == 2146435072) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if (($1$0 & -1) == 0 && ($1$1 & 1048575) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    ___gmp_invalid_operation();
    throw "Reached an unreachable!";
   case 5:
    var $10 = HEAPU32[$z + 4 >> 2];
    if ($d == 0) {
      var $_0 = $10;
      __label__ = 28;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($10 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $16 = $d < 0 ? 1 : -1;
    var $_0 = $16;
    __label__ = 28;
    break;
   case 8:
    if (($10 | 0) > -1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    if ($d < 0) {
      var $_0 = 1;
      __label__ = 28;
      break;
    } else {
      var $_01 = $d;
      var $ret_0 = 1;
      var $zsize_0 = $10;
      __label__ = 12;
      break;
    }
   case 10:
    if ($d < 0) {
      __label__ = 11;
      break;
    } else {
      var $_0 = -1;
      __label__ = 28;
      break;
    }
   case 11:
    var $_01 = -$d;
    var $ret_0 = -1;
    var $zsize_0 = -$10 | 0;
    __label__ = 12;
    break;
   case 12:
    var $zsize_0;
    var $ret_0;
    var $_01;
    if ($_01 < 1) {
      var $_0 = $ret_0;
      __label__ = 28;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $29 = $darray | 0;
    var $30 = ___gmp_extract_double($29, $_01);
    if (($zsize_0 | 0) == ($30 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $35 = ($zsize_0 | 0) >= ($30 | 0) ? $ret_0 : -$ret_0 | 0;
    var $_0 = $35;
    __label__ = 28;
    break;
   case 15:
    var $38 = HEAPU32[$z + 8 >> 2];
    var $41 = HEAPU32[$38 + ($zsize_0 - 1 << 2) >> 2];
    var $43 = HEAPU32[$darray + 8 >> 2];
    if (($41 | 0) == ($43 | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $48 = $41 >>> 0 >= $43 >>> 0 ? $ret_0 : -$ret_0 | 0;
    var $_0 = $48;
    __label__ = 28;
    break;
   case 17:
    if (($zsize_0 | 0) == 1) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $_ = (HEAP32[$darray + 4 >> 2] | HEAP32[$29 >> 2] | 0) == 0 ? 0 : -$ret_0 | 0;
    var $_0 = $_;
    __label__ = 28;
    break;
   case 19:
    var $61 = HEAPU32[$38 + ($zsize_0 - 2 << 2) >> 2];
    var $63 = HEAPU32[$darray + 4 >> 2];
    if (($61 | 0) == ($63 | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $68 = $61 >>> 0 >= $63 >>> 0 ? $ret_0 : -$ret_0 | 0;
    var $_0 = $68;
    __label__ = 28;
    break;
   case 21:
    if (($zsize_0 | 0) == 2) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $_3 = (HEAP32[$29 >> 2] | 0) == 0 ? 0 : -$ret_0 | 0;
    var $_0 = $_3;
    __label__ = 28;
    break;
   case 23:
    var $78 = HEAPU32[$38 + ($zsize_0 - 3 << 2) >> 2];
    var $79 = HEAPU32[$29 >> 2];
    if (($78 | 0) == ($79 | 0)) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $84 = $78 >>> 0 >= $79 >>> 0 ? $ret_0 : -$ret_0 | 0;
    var $_0 = $84;
    __label__ = 28;
    break;
   case 25:
    var $__i_0 = $zsize_0 - 4 | 0;
    __label__ = 26;
    break;
   case 26:
    var $__i_0;
    if (($__i_0 | 0) > -1) {
      __label__ = 27;
      break;
    } else {
      var $_0 = 0;
      __label__ = 28;
      break;
    }
   case 27:
    if ((HEAP32[$38 + ($__i_0 << 2) >> 2] | 0) == 0) {
      var $__i_0 = $__i_0 - 1 | 0;
      __label__ = 26;
      break;
    } else {
      var $_0 = $ret_0;
      __label__ = 28;
      break;
    }
   case 28:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_cmp_d["X"] = 1;

function ___gmpq_set_d($dest, $d) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $tp = __stackBase__;
    tempDoubleF64[0] = $d;
    if ((tempDoubleI32[0] & 0) == 0 && (tempDoubleI32[1] & 2146435072) == 2146435072) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_invalid_operation();
    throw "Reached an unreachable!";
   case 4:
    var $6 = $d < 0;
    if ($d < 0) {
      __label__ = 5;
      break;
    } else {
      var $11 = $d;
      __label__ = 6;
      break;
    }
   case 5:
    var $11 = -$d;
    __label__ = 6;
    break;
   case 6:
    var $11;
    var $12 = $tp | 0;
    var $13 = ___gmp_extract_double($12, $11);
    var $14 = -$13 | 0;
    if (($13 | 0) < 2) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $18 = HEAPU32[$12 >> 2];
    if (($13 | 0) != 2 | ($18 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ($11 == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    HEAP32[$dest + 4 >> 2] = 0;
    HEAP32[$dest + 16 >> 2] = 1;
    var $26 = HEAP32[$dest + 20 >> 2];
    HEAP32[$26 >> 2] = 1;
    __label__ = 38;
    break;
   case 10:
    if ((HEAP32[$dest >> 2] | 0) < 3) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $32 = $dest | 0;
    var $33 = ___gmpz_realloc($32, 3);
    __label__ = 12;
    break;
   case 12:
    var $35 = HEAPU32[$dest + 8 >> 2];
    var $36 = HEAP32[$12 >> 2];
    var $38 = HEAP32[$tp + 4 >> 2];
    if (($38 | $36 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $43 = HEAP32[$tp + 8 >> 2];
    HEAP32[$35 >> 2] = $43;
    var $nn_0 = 1;
    __label__ = 17;
    break;
   case 14:
    var $47 = HEAP32[$tp + 8 >> 2];
    if (($36 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    HEAP32[$35 + 4 >> 2] = $47;
    HEAP32[$35 >> 2] = $38;
    var $nn_0 = 2;
    __label__ = 17;
    break;
   case 16:
    HEAP32[$35 + 8 >> 2] = $47;
    HEAP32[$35 + 4 >> 2] = $38;
    HEAP32[$35 >> 2] = $36;
    var $nn_0 = 3;
    __label__ = 17;
    break;
   case 17:
    var $nn_0;
    var $55 = 1 - $13 + $nn_0 | 0;
    if (($55 | 0) > 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    ___gmp_assert_fail(STRING_TABLE.__str36 | 0, 101, STRING_TABLE.__str137 | 0);
    throw "Reached an unreachable!";
   case 19:
    var $59 = $dest + 12 | 0;
    if (($55 | 0) > (HEAP32[$59 >> 2] | 0)) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $64 = ___gmpz_realloc($59, $55);
    __label__ = 21;
    break;
   case 21:
    var $67 = HEAPU32[$dest + 20 >> 2];
    var $68 = $55 - 1 | 0;
    if (($68 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $70 = $67;
    var $72 = $nn_0 - $13 << 2;
    _memset($70, 0, $72, 4);
    __label__ = 23;
    break;
   case 23:
    var $74 = $67 + ($68 << 2) | 0;
    HEAP32[$74 >> 2] = 1;
    var $77 = HEAP32[$67 >> 2] | HEAP32[$35 >> 2];
    var $79 = $77 & -$77;
    if ($79 >>> 0 < 65536) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $83 = $79 >>> 0 < 256 ? 1 : 9;
    var $88 = $83;
    __label__ = 26;
    break;
   case 25:
    var $86 = $79 >>> 0 < 16777216 ? 17 : 25;
    var $88 = $86;
    __label__ = 26;
    break;
   case 26:
    var $88;
    var $90 = STRING_TABLE.___gmpn_clz_tab + ($79 >>> ($88 >>> 0)) | 0;
    var $94 = $88 - 2 + (HEAPU8[$90] & 255) | 0;
    if (($94 | 0) == 0) {
      var $nn_1 = $nn_0;
      var $dn_0 = $55;
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $97 = ___gmpn_rshift($35, $35, $nn_0, $94);
    var $103 = $nn_0 - ((HEAP32[$35 + ($nn_0 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $104 = ___gmpn_rshift($67, $67, $55, $94);
    var $nn_1 = $103;
    var $dn_0 = $55 - ((HEAP32[$74 >> 2] | 0) == 0 & 1) | 0;
    __label__ = 28;
    break;
   case 28:
    var $dn_0;
    var $nn_1;
    HEAP32[$dest + 16 >> 2] = $dn_0;
    var $112 = $6 ? -$nn_1 | 0 : $nn_1;
    HEAP32[$dest + 4 >> 2] = $112;
    __label__ = 38;
    break;
   case 29:
    if (($13 | 0) > (HEAP32[$dest >> 2] | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $119 = $dest | 0;
    var $120 = ___gmpz_realloc($119, $13);
    __label__ = 31;
    break;
   case 31:
    var $123 = HEAPU32[$dest + 8 >> 2];
    var $124 = $123;
    if (($13 | 0) == 3) {
      var $np_0 = $123;
      __label__ = 35;
      break;
    } else if (($13 | 0) == 2) {
      __label__ = 36;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $126 = $13 - 3 | 0;
    if (($126 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $129 = ($13 << 2) - 12 | 0;
    _memset($124, 0, $129, 4);
    __label__ = 34;
    break;
   case 34:
    var $np_0 = $123 + ($126 << 2) | 0;
    __label__ = 35;
    break;
   case 35:
    var $np_0;
    var $134 = HEAP32[$tp + 8 >> 2];
    HEAP32[$np_0 + 8 >> 2] = $134;
    var $137 = HEAP32[$tp + 4 >> 2];
    HEAP32[$np_0 + 4 >> 2] = $137;
    HEAP32[$np_0 >> 2] = $18;
    __label__ = 37;
    break;
   case 36:
    var $141 = HEAP32[$tp + 8 >> 2];
    HEAP32[$123 + 4 >> 2] = $141;
    var $144 = HEAP32[$tp + 4 >> 2];
    HEAP32[$123 >> 2] = $144;
    __label__ = 37;
    break;
   case 37:
    var $147 = HEAP32[$dest + 20 >> 2];
    HEAP32[$147 >> 2] = 1;
    HEAP32[$dest + 16 >> 2] = 1;
    var $149 = $6 ? $14 : $13;
    HEAP32[$dest + 4 >> 2] = $149;
    __label__ = 38;
    break;
   case 38:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_set_d["X"] = 1;

function ___gmpq_swap($u, $v) {
  var $1 = $u | 0;
  var $2 = HEAP32[$1 >> 2];
  var $3 = $v | 0;
  var $4 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $2;
  HEAP32[$1 >> 2] = $4;
  var $5 = $u + 4 | 0;
  var $6 = HEAP32[$5 >> 2];
  var $7 = $v + 4 | 0;
  var $8 = HEAP32[$7 >> 2];
  HEAP32[$7 >> 2] = $6;
  HEAP32[$5 >> 2] = $8;
  var $9 = $u + 8 | 0;
  var $10 = HEAP32[$9 >> 2];
  var $11 = $v + 8 | 0;
  var $12 = HEAP32[$11 >> 2];
  HEAP32[$11 >> 2] = $10;
  HEAP32[$9 >> 2] = $12;
  var $13 = $u + 12 | 0;
  var $14 = HEAP32[$13 >> 2];
  var $15 = $v + 12 | 0;
  var $16 = HEAP32[$15 >> 2];
  HEAP32[$15 >> 2] = $14;
  HEAP32[$13 >> 2] = $16;
  var $17 = $u + 16 | 0;
  var $18 = HEAP32[$17 >> 2];
  var $19 = $v + 16 | 0;
  var $20 = HEAP32[$19 >> 2];
  HEAP32[$19 >> 2] = $18;
  HEAP32[$17 >> 2] = $20;
  var $21 = $u + 20 | 0;
  var $22 = HEAP32[$21 >> 2];
  var $23 = $v + 20 | 0;
  var $24 = HEAP32[$23 >> 2];
  HEAP32[$23 >> 2] = $22;
  HEAP32[$21 >> 2] = $24;
  return;
}

function ___gmpn_neg($__gmp_rp, $__gmp_up, $__gmp_n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_0 = $__gmp_rp;
    var $_01 = $__gmp_up;
    var $_02 = $__gmp_n;
    var $__gmp_cy_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $__gmp_cy_0;
    var $_02;
    var $_01;
    var $_0;
    var $3 = HEAP32[$_01 >> 2];
    var $4 = -($3 + $__gmp_cy_0 | 0) | 0;
    HEAP32[$_0 >> 2] = $4;
    var $8 = ($3 | 0) != 0 & 1 | $__gmp_cy_0;
    var $9 = $_02 - 1 | 0;
    if (($9 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_0 + 4 | 0;
      var $_01 = $_01 + 4 | 0;
      var $_02 = $9;
      var $__gmp_cy_0 = $8;
      __label__ = 3;
      break;
    }
   case 4:
    return $8;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_com($rp, $up, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_0 = $rp;
    var $_01 = $up;
    var $_02 = $n;
    __label__ = 3;
    break;
   case 3:
    var $_02;
    var $_01;
    var $_0;
    var $4 = HEAP32[$_01 >> 2] ^ -1;
    HEAP32[$_0 >> 2] = $4;
    var $6 = $_02 - 1 | 0;
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_0 + 4 | 0;
      var $_01 = $_01 + 4 | 0;
      var $_02 = $6;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cmp_si($u, $v_digit) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$u + 4 >> 2];
    if (($v_digit | 0) > 0) {
      var $vsize_0 = 1;
      var $_01 = $v_digit;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_v_digit = ($v_digit | 0) < 0 ? -$v_digit | 0 : $v_digit;
    var $vsize_0 = $v_digit >> 31;
    var $_01 = $_v_digit;
    __label__ = 4;
    break;
   case 4:
    var $_01;
    var $vsize_0;
    if (($2 | 0) == ($vsize_0 | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $_0 = $2 - $vsize_0 | 0;
    __label__ = 9;
    break;
   case 6:
    if (($2 | 0) == 0) {
      var $_0 = 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $16 = HEAPU32[HEAP32[$u + 8 >> 2] >> 2];
    if (($16 | 0) == ($_01 | 0)) {
      var $_0 = 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_2 = $16 >>> 0 > $_01 >>> 0 ? $2 : -$2 | 0;
    return $_2;
   case 9:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_add($__gmp_wp, $__gmp_xp, $__gmp_xsize, $__gmp_yp, $__gmp_ysize) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($__gmp_ysize | 0) == 0) {
      var $__gmp_i_1 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = ___gmpn_add_n($__gmp_wp, $__gmp_xp, $__gmp_yp, $__gmp_ysize);
    if (($3 | 0) == 0) {
      var $__gmp_i_1 = $__gmp_ysize;
      __label__ = 6;
      break;
    } else {
      var $__gmp_i_0 = $__gmp_ysize;
      __label__ = 4;
      break;
    }
   case 4:
    var $__gmp_i_0;
    if (($__gmp_i_0 | 0) < ($__gmp_xsize | 0)) {
      __label__ = 5;
      break;
    } else {
      var $__gmp_c_0 = 1;
      __label__ = 8;
      break;
    }
   case 5:
    var $9 = HEAP32[$__gmp_xp + ($__gmp_i_0 << 2) >> 2] + 1 | 0;
    var $10 = $__gmp_i_0 + 1 | 0;
    HEAP32[$__gmp_wp + ($__gmp_i_0 << 2) >> 2] = $9;
    if (($9 | 0) == 0) {
      var $__gmp_i_0 = $10;
      __label__ = 4;
      break;
    } else {
      var $__gmp_i_1 = $10;
      __label__ = 6;
      break;
    }
   case 6:
    var $__gmp_i_1;
    if (($__gmp_wp | 0) != ($__gmp_xp | 0) & ($__gmp_i_1 | 0) < ($__gmp_xsize | 0)) {
      var $__gmp_j_04 = $__gmp_i_1;
      __label__ = 7;
      break;
    } else {
      var $__gmp_c_0 = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $__gmp_j_04;
    var $16 = HEAP32[$__gmp_xp + ($__gmp_j_04 << 2) >> 2];
    HEAP32[$__gmp_wp + ($__gmp_j_04 << 2) >> 2] = $16;
    var $18 = $__gmp_j_04 + 1 | 0;
    if (($18 | 0) == ($__gmp_xsize | 0)) {
      var $__gmp_c_0 = 0;
      __label__ = 8;
      break;
    } else {
      var $__gmp_j_04 = $18;
      __label__ = 7;
      break;
    }
   case 8:
    var $__gmp_c_0;
    return $__gmp_c_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_sub($__gmp_wp, $__gmp_xp, $__gmp_xsize, $__gmp_yp, $__gmp_ysize) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($__gmp_ysize | 0) == 0) {
      var $__gmp_i_1 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = ___gmpn_sub_n($__gmp_wp, $__gmp_xp, $__gmp_yp, $__gmp_ysize);
    if (($3 | 0) == 0) {
      var $__gmp_i_1 = $__gmp_ysize;
      __label__ = 6;
      break;
    } else {
      var $__gmp_i_0 = $__gmp_ysize;
      __label__ = 4;
      break;
    }
   case 4:
    var $__gmp_i_0;
    if (($__gmp_i_0 | 0) < ($__gmp_xsize | 0)) {
      __label__ = 5;
      break;
    } else {
      var $__gmp_c_0 = 1;
      __label__ = 8;
      break;
    }
   case 5:
    var $8 = HEAP32[$__gmp_xp + ($__gmp_i_0 << 2) >> 2];
    var $9 = $8 - 1 | 0;
    var $10 = $__gmp_i_0 + 1 | 0;
    HEAP32[$__gmp_wp + ($__gmp_i_0 << 2) >> 2] = $9;
    if (($8 | 0) == 0) {
      var $__gmp_i_0 = $10;
      __label__ = 4;
      break;
    } else {
      var $__gmp_i_1 = $10;
      __label__ = 6;
      break;
    }
   case 6:
    var $__gmp_i_1;
    if (($__gmp_wp | 0) != ($__gmp_xp | 0) & ($__gmp_i_1 | 0) < ($__gmp_xsize | 0)) {
      var $__gmp_j_04 = $__gmp_i_1;
      __label__ = 7;
      break;
    } else {
      var $__gmp_c_0 = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $__gmp_j_04;
    var $16 = HEAP32[$__gmp_xp + ($__gmp_j_04 << 2) >> 2];
    HEAP32[$__gmp_wp + ($__gmp_j_04 << 2) >> 2] = $16;
    var $18 = $__gmp_j_04 + 1 | 0;
    if (($18 | 0) == ($__gmp_xsize | 0)) {
      var $__gmp_c_0 = 0;
      __label__ = 8;
      break;
    } else {
      var $__gmp_j_04 = $18;
      __label__ = 7;
      break;
    }
   case 8:
    var $__gmp_c_0;
    return $__gmp_c_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_divisible_p($ap, $an, $dp, $dn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if (($an | 0) < ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_01 = $ap;
      var $_02 = $an;
      var $_03 = $dp;
      var $_05 = $dn;
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($an | 0) == 0 & 1;
    __label__ = 61;
    break;
   case 4:
    var $_05;
    var $_03;
    var $_02;
    var $_01;
    var $5 = HEAPU32[$_01 >> 2];
    var $6 = HEAPU32[$_03 >> 2];
    if (($6 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    if (($5 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $_0 = 0;
      __label__ = 61;
      break;
    }
   case 6:
    var $_01 = $_01 + 4 | 0;
    var $_02 = $_02 - 1 | 0;
    var $_03 = $_03 + 4 | 0;
    var $_05 = $_05 - 1 | 0;
    __label__ = 4;
    break;
   case 7:
    var $17 = $6 & -$6;
    var $18 = $17 - 1 | 0;
    if (($18 & $5 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_0 = 0;
      __label__ = 61;
      break;
    }
   case 8:
    if (($_05 | 0) == 1) {
      __label__ = 9;
      break;
    } else if (($_05 | 0) == 2) {
      __label__ = 15;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 9:
    if (($_02 | 0) > 9) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $25 = ___gmpn_mod_1($_01, $_02, $6);
    var $_0 = ($25 | 0) == 0 & 1;
    __label__ = 61;
    break;
   case 11:
    if ($17 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $32 = $17 >>> 0 < 256 ? 1 : 9;
    var $37 = $32;
    __label__ = 14;
    break;
   case 13:
    var $35 = $17 >>> 0 < 16777216 ? 17 : 25;
    var $37 = $35;
    __label__ = 14;
    break;
   case 14:
    var $37;
    var $39 = STRING_TABLE.___gmpn_clz_tab + ($17 >>> ($37 >>> 0)) | 0;
    var $44 = $6 >>> (($37 - 2 + (HEAPU8[$39] & 255) | 0) >>> 0);
    var $45 = ___gmpn_modexact_1c_odd($_01, $_02, $44, 0);
    var $_0 = ($45 | 0) == 0 & 1;
    __label__ = 61;
    break;
   case 15:
    var $50 = HEAPU32[$_03 + 4 >> 2];
    if ($50 >>> 0 > $18 >>> 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if ($17 >>> 0 < 65536) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $56 = $17 >>> 0 < 256 ? 1 : 9;
    var $61 = $56;
    __label__ = 19;
    break;
   case 18:
    var $59 = $17 >>> 0 < 16777216 ? 17 : 25;
    var $61 = $59;
    __label__ = 19;
    break;
   case 19:
    var $61;
    var $63 = STRING_TABLE.___gmpn_clz_tab + ($17 >>> ($61 >>> 0)) | 0;
    var $67 = $61 - 33 + (HEAPU8[$63] & 255) | 0;
    var $72 = $6 >>> (($67 + 31 | 0) >>> 0) | $50 << 1 - $67;
    if (($_02 | 0) > 9) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $75 = ___gmpn_modexact_1c_odd($_01, $_02, $72, 0);
    var $79 = $75;
    __label__ = 22;
    break;
   case 21:
    var $77 = ___gmpn_mod_1($_01, $_02, $72);
    var $79 = $77;
    __label__ = 22;
    break;
   case 22:
    var $79;
    var $_0 = ($79 | 0) == 0 & 1;
    __label__ = 61;
    break;
   case 23:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $83 = $_02 + 1 | 0;
    var $84 = $83 << 2;
    if ($84 >>> 0 < 65536) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $87 = STACKTOP;
    STACKTOP += $84;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $91 = $87;
    __label__ = 26;
    break;
   case 25:
    var $89 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $84);
    var $91 = $89;
    __label__ = 26;
    break;
   case 26:
    var $91;
    var $92 = $91;
    var $95 = ($_02 - $_05 << 2) + 4 | 0;
    if ($95 >>> 0 < 65536) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $98 = STACKTOP;
    STACKTOP += $95;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $102 = $98;
    __label__ = 29;
    break;
   case 28:
    var $100 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $95);
    var $102 = $100;
    __label__ = 29;
    break;
   case 29:
    var $102;
    var $103 = $102;
    var $104 = HEAP32[$_03 >> 2];
    var $106 = $104 & -$104;
    if ($106 >>> 0 < 65536) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $110 = $106 >>> 0 < 256 ? 1 : 9;
    var $115 = $110;
    __label__ = 32;
    break;
   case 31:
    var $113 = $106 >>> 0 < 16777216 ? 17 : 25;
    var $115 = $113;
    __label__ = 32;
    break;
   case 32:
    var $115;
    var $117 = STRING_TABLE.___gmpn_clz_tab + ($106 >>> ($115 >>> 0)) | 0;
    var $121 = $115 - 2 + (HEAPU8[$117] & 255) | 0;
    if (($121 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $124 = $_05 << 2;
    if ($124 >>> 0 < 65536) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $127 = STACKTOP;
    STACKTOP += $124;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $131 = $127;
    __label__ = 36;
    break;
   case 35:
    var $129 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $124);
    var $131 = $129;
    __label__ = 36;
    break;
   case 36:
    var $131;
    var $132 = $131;
    var $133 = ___gmpn_rshift($132, $_03, $_05, $121);
    var $134 = ___gmpn_rshift($92, $_01, $_02, $121);
    var $_14 = $132;
    __label__ = 41;
    break;
   case 37:
    if (($_02 | 0) == 0) {
      var $_14 = $_03;
      __label__ = 41;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $138 = $_02 - 1 | 0;
    var $139 = HEAPU32[$_01 >> 2];
    if (($138 | 0) == 0) {
      var $__x_1 = $139;
      var $__dst_1 = $92;
      __label__ = 40;
      break;
    } else {
      var $__x_0 = $139;
      var $_01_pn = $_01;
      var $__dst_0 = $92;
      var $__n_0 = $138;
      __label__ = 39;
      break;
    }
   case 39:
    var $__n_0;
    var $__dst_0;
    var $_01_pn;
    var $__x_0;
    var $__src_0 = $_01_pn + 4 | 0;
    var $141 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $142 = HEAP32[$__src_0 >> 2];
    var $143 = $__n_0 - 1 | 0;
    if (($143 | 0) == 0) {
      var $__x_1 = $142;
      var $__dst_1 = $141;
      __label__ = 40;
      break;
    } else {
      var $__x_0 = $142;
      var $_01_pn = $__src_0;
      var $__dst_0 = $141;
      var $__n_0 = $143;
      __label__ = 39;
      break;
    }
   case 40:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_14 = $_03;
    __label__ = 41;
    break;
   case 41:
    var $_14;
    if (HEAPU32[$92 + ($_02 - 1 << 2) >> 2] >>> 0 < HEAPU32[$_14 + ($_05 - 1 << 2) >> 2] >>> 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    HEAP32[$92 + ($_02 << 2) >> 2] = 0;
    var $_1 = $83;
    __label__ = 46;
    break;
   case 43:
    if (($_02 | 0) == ($_05 | 0)) {
      __label__ = 44;
      break;
    } else {
      var $_1 = $_02;
      __label__ = 46;
      break;
    }
   case 44:
    var $158 = HEAP32[$__tmp_marker >> 2];
    if (($158 | 0) == 0) {
      var $_0 = 0;
      __label__ = 61;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    ___gmp_tmp_reentrant_free($158);
    var $_0 = 0;
    __label__ = 61;
    break;
   case 46:
    var $_1;
    var $163 = $_1 - $_05 | 0;
    if (($_05 | 0) > 49 & ($163 | 0) > 49) {
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $165 = HEAPU32[$_14 >> 2];
    var $168 = STRING_TABLE.___gmp_binvert_limb_table + ($165 >>> 1 & 127) | 0;
    var $170 = HEAPU8[$168] & 255;
    var $171 = $170 << 1;
    var $172 = (i64Math.multiply($170, 0, $165, 0), i64Math.result[0]);
    var $173 = (i64Math.multiply($172, 0, $170, 0), i64Math.result[0]);
    var $174 = $171 - $173 | 0;
    var $175 = $174 << 1;
    var $176 = (i64Math.multiply($174, 0, $165, 0), i64Math.result[0]);
    var $177 = (i64Math.multiply($176, 0, $174, 0), i64Math.result[0]);
    var $178 = $177 - $175 | 0;
    var $179 = ___gmpn_sbpi1_bdiv_qr($103, $92, $_1, $_14, $_05, $178);
    var $rp_0 = $92 + ($163 << 2) | 0;
    __label__ = 54;
    break;
   case 48:
    if (($_05 | 0) > 1999) {
      __label__ = 50;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $184 = HEAPU32[$_14 >> 2];
    var $187 = STRING_TABLE.___gmp_binvert_limb_table + ($184 >>> 1 & 127) | 0;
    var $189 = HEAPU8[$187] & 255;
    var $190 = $189 << 1;
    var $191 = (i64Math.multiply($189, 0, $184, 0), i64Math.result[0]);
    var $192 = (i64Math.multiply($191, 0, $189, 0), i64Math.result[0]);
    var $193 = $190 - $192 | 0;
    var $194 = $193 << 1;
    var $195 = (i64Math.multiply($193, 0, $184, 0), i64Math.result[0]);
    var $196 = (i64Math.multiply($195, 0, $193, 0), i64Math.result[0]);
    var $197 = $196 - $194 | 0;
    var $198 = ___gmpn_dcpi1_bdiv_qr($103, $92, $_1, $_14, $_05, $197);
    var $rp_0 = $92 + ($163 << 2) | 0;
    __label__ = 54;
    break;
   case 50:
    var $201 = ___gmpn_mu_bdiv_qr_itch($_1, $_05);
    var $202 = $201 << 2;
    if ($202 >>> 0 < 65536) {
      __label__ = 51;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 51:
    var $205 = STACKTOP;
    STACKTOP += $202;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $209 = $205;
    __label__ = 53;
    break;
   case 52:
    var $207 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $202);
    var $209 = $207;
    __label__ = 53;
    break;
   case 53:
    var $209;
    var $211 = ___gmpn_mu_bdiv_qr($103, $92, $92, $_1, $_14, $_05, $209);
    var $rp_0 = $92;
    __label__ = 54;
    break;
   case 54:
    var $rp_0;
    var $i_0 = 0;
    __label__ = 55;
    break;
   case 55:
    var $i_0;
    if ((HEAP32[$rp_0 + ($i_0 << 2) >> 2] | 0) == 0) {
      __label__ = 58;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 56:
    var $218 = HEAP32[$__tmp_marker >> 2];
    if (($218 | 0) == 0) {
      var $_0 = 0;
      __label__ = 61;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    ___gmp_tmp_reentrant_free($218);
    var $_0 = 0;
    __label__ = 61;
    break;
   case 58:
    var $222 = $i_0 + 1 | 0;
    if (($222 | 0) < ($_05 | 0)) {
      var $i_0 = $222;
      __label__ = 55;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    var $225 = HEAP32[$__tmp_marker >> 2];
    if (($225 | 0) == 0) {
      var $_0 = 1;
      __label__ = 61;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    ___gmp_tmp_reentrant_free($225);
    var $_0 = 1;
    __label__ = 61;
    break;
   case 61:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_divisible_p["X"] = 1;

function ___gmpn_fib2_ui($fp, $f1p, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if ($n >>> 0 > 47) {
      var $nfirst_01 = $n;
      var $mask_02 = 1;
      __label__ = 3;
      break;
    } else {
      var $nfirst_0_lcssa = $n;
      var $mask_0_lcssa = 1;
      __label__ = 4;
      break;
    }
   case 3:
    var $mask_02;
    var $nfirst_01;
    var $2 = $mask_02 << 1;
    var $3 = $nfirst_01 >>> 1;
    if ($nfirst_01 >>> 0 > 95) {
      var $nfirst_01 = $3;
      var $mask_02 = $2;
      __label__ = 3;
      break;
    } else {
      var $nfirst_0_lcssa = $3;
      var $mask_0_lcssa = $2;
      __label__ = 4;
      break;
    }
   case 4:
    var $mask_0_lcssa;
    var $nfirst_0_lcssa;
    var $6 = HEAP32[___gmp_fib_table + ($nfirst_0_lcssa << 2) >> 2];
    HEAP32[$f1p >> 2] = $6;
    var $9 = HEAP32[___gmp_fib_table + ($nfirst_0_lcssa + 1 << 2) >> 2];
    HEAP32[$fp >> 2] = $9;
    if (($mask_0_lcssa | 0) == 1) {
      var $size_2 = 1;
      __label__ = 15;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $12 = $n >>> 5;
    var $13 = (i64Math.multiply($12, 0, 23, 0), i64Math.result[0]);
    var $16 = ($13 >>> 3 & 536870908) + 16 | 0;
    if ($16 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $19 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $23 = $19;
    __label__ = 8;
    break;
   case 7:
    var $21 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $16);
    var $23 = $21;
    __label__ = 8;
    break;
   case 8:
    var $23;
    var $24 = $23;
    var $mask_1 = $mask_0_lcssa;
    var $size_0 = 1;
    __label__ = 9;
    break;
   case 9:
    var $size_0;
    var $mask_1;
    ___gmpn_sqr($24, $fp, $size_0);
    ___gmpn_sqr($fp, $f1p, $size_0);
    var $26 = $size_0 << 1;
    var $32 = $26 - ((HEAP32[$24 + ($26 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $33 = ___gmpn_add_n($f1p, $24, $fp, $32);
    var $34 = $f1p + ($32 << 2) | 0;
    HEAP32[$34 >> 2] = $33;
    var $35 = ___gmpn_lshift($24, $24, $32, 2);
    var $37 = ($mask_1 & $n | 0) != 0;
    var $38 = $37 ? 0 : 2;
    var $40 = HEAP32[$24 >> 2] | $38;
    HEAP32[$24 >> 2] = $40;
    var $41 = ___gmpn_sub_n($fp, $24, $fp, $32);
    var $42 = $35 - $41 | 0;
    var $43 = $37 ? 2 : 0;
    var $45 = HEAP32[$fp >> 2] - $43 | 0;
    HEAP32[$fp >> 2] = $45;
    var $46 = $fp + ($32 << 2) | 0;
    HEAP32[$46 >> 2] = $42;
    var $49 = (($35 | 0) != ($41 | 0) & 1) + $32 | 0;
    var $50 = $mask_1 >>> 1;
    if (($50 & $n | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $54 = ___gmpn_sub_n($f1p, $fp, $f1p, $49);
    var $size_1 = $49;
    __label__ = 12;
    break;
   case 11:
    var $56 = ___gmpn_sub_n($fp, $fp, $f1p, $49);
    var $size_1 = $49 - ((HEAP32[$fp + ($49 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 12;
    break;
   case 12:
    var $size_1;
    if (($50 | 0) == 1) {
      __label__ = 13;
      break;
    } else {
      var $mask_1 = $50;
      var $size_0 = $size_1;
      __label__ = 9;
      break;
    }
   case 13:
    var $66 = HEAP32[$__tmp_marker >> 2];
    if (($66 | 0) == 0) {
      var $size_2 = $size_1;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    ___gmp_tmp_reentrant_free($66);
    var $size_2 = $size_1;
    __label__ = 15;
    break;
   case 15:
    var $size_2;
    STACKTOP = __stackBase__;
    return $size_2;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_fib2_ui["X"] = 1;

function ___gmpn_dump($ptr, $n) {
  var __stackBase__ = STACKTOP;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_0 = $n;
    __label__ = 3;
    break;
   case 3:
    var $_0;
    if (($_0 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $4 = $_0 - 1 | 0;
    if ((HEAP32[$ptr + ($4 << 2) >> 2] | 0) == 0) {
      var $_0 = $4;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($_0 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $puts = _puts(STRING_TABLE._str | 0);
    __label__ = 10;
    break;
   case 7:
    var $12 = $_0 - 1 | 0;
    var $14 = HEAP32[$ptr + ($12 << 2) >> 2];
    var $15 = _printf(STRING_TABLE.__str143 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $14, tempInt));
    if (($12 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $_11 = $12;
      __label__ = 8;
      break;
    }
   case 8:
    var $_11;
    var $17 = $_11 - 1 | 0;
    var $19 = HEAP32[$ptr + ($17 << 2) >> 2];
    var $20 = _printf(STRING_TABLE.__str244 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = 8, HEAP32[tempInt + 4 >> 2] = $19, tempInt));
    if (($17 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $_11 = $17;
      __label__ = 8;
      break;
    }
   case 9:
    var $putchar = _putchar(10);
    __label__ = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_toom6h_mul_itch($an, $bn) {
  var $1 = $bn + $an | 0;
  var $2 = Math.floor(($1 >>> 0) / 10);
  var $3 = (i64Math.multiply($2, 0, 12, 0), i64Math.result[0]);
  return $3 + 394 | 0;
}

function _mpn_toom8h_mul_itch($an, $bn) {
  var $1 = $bn + $an | 0;
  var $2 = Math.floor(($1 >>> 0) / 14);
  var $3 = (i64Math.multiply($2, 0, 120, 0), i64Math.result[0]);
  return ($3 + 120 >> 3) + 439 | 0;
}

function ___gmpn_mul($prodp, $up, $un, $vp, $vn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 128;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $tp = __stackBase__;
    var $__tmp_marker = __stackBase__ + 120;
    var $__tmp_marker39 = __stackBase__ + 124;
    if (($un | 0) == ($vn | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($up | 0) == ($vp | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmpn_sqr($prodp, $up, $un);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 5:
    ___gmpn_mul_n($prodp, $up, $vp, $un);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 6:
    if (($vn | 0) < 30) {
      __label__ = 7;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 7:
    if (($un | 0) < 501 | ($vn | 0) == 1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    ___gmpn_mul_basecase($prodp, $up, $un, $vp, $vn);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 9:
    ___gmpn_mul_basecase($prodp, $up, 500, $vp, $vn);
    var $13 = $prodp + 2e3 | 0;
    var $14 = ($vn | 0) != 0;
    if ($14) {
      __label__ = 10;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 10:
    var $16 = $vn - 1 | 0;
    var $17 = $tp | 0;
    var $18 = HEAP32[$13 >> 2];
    if (($16 | 0) == 0) {
      var $__dst_1 = $17;
      var $__x_1 = $18;
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $__n_0 = $16;
    var $__dst_0 = $17;
    var $__src_0 = $prodp + 2004 | 0;
    var $__x_0 = $18;
    __label__ = 12;
    break;
   case 12:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $24 = HEAP32[$__src_0 >> 2];
    var $25 = $__n_0 - 1 | 0;
    if (($25 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__n_0 = $25;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $24;
      __label__ = 12;
      break;
    }
   case 13:
    var $__dst_1 = $tp + ($16 << 2) | 0;
    var $__x_1 = $24;
    __label__ = 14;
    break;
   case 14:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 15;
    break;
   case 15:
    var $_05124 = $un - 500 | 0;
    var $_01125 = $up + 2e3 | 0;
    if (($_05124 | 0) > 500) {
      __label__ = 16;
      break;
    } else {
      var $_0_lcssa = $13;
      var $_05_lcssa = $_05124;
      var $_01_lcssa = $_01125;
      __label__ = 26;
      break;
    }
   case 16:
    var $29 = $tp | 0;
    var $30 = $vn - 1 | 0;
    var $31 = ($30 | 0) == 0;
    var $scevgep165 = $tp + ($30 << 2) | 0;
    var $32 = $un - 1001 | 0;
    var $34 = $32 - ($32 >>> 0) % 500 | 0;
    var $35 = $34 + 1e3 | 0;
    var $37 = $un - 1e3 - $34 | 0;
    var $_0126 = $13;
    var $_05127 = $_05124;
    var $_01128 = $_01125;
    __label__ = 17;
    break;
   case 17:
    var $_01128;
    var $_05127;
    var $_0126;
    ___gmpn_mul_basecase($_0126, $_01128, 500, $vp, $vn);
    var $39 = ___gmpn_add_n($_0126, $_0126, $29, $vn);
    var $40 = $_0126 + ($vn << 2) | 0;
    var $41 = HEAP32[$40 >> 2];
    var $uadd37 = _llvm_uadd_with_overflow_i32($41, $39);
    var $42 = $uadd37.f0;
    HEAP32[$40 >> 2] = $42;
    var $43 = $uadd37.f1;
    if ($43) {
      var $__p_0 = $40;
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $__p_0;
    var $44 = $__p_0 + 4 | 0;
    var $46 = HEAP32[$44 >> 2] + 1 | 0;
    HEAP32[$44 >> 2] = $46;
    if (($46 | 0) == 0) {
      var $__p_0 = $44;
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $48 = $_0126 + 2e3 | 0;
    if ($14) {
      __label__ = 20;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 20:
    var $50 = HEAP32[$48 >> 2];
    if ($31) {
      var $__dst3_1 = $29;
      var $__x5_1 = $50;
      __label__ = 23;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $__n2_0 = $30;
    var $__dst3_0 = $29;
    var $__src4_0 = $_0126 + 2004 | 0;
    var $__x5_0 = $50;
    __label__ = 22;
    break;
   case 22:
    var $__x5_0;
    var $__src4_0;
    var $__dst3_0;
    var $__n2_0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $55 = HEAP32[$__src4_0 >> 2];
    var $56 = $__n2_0 - 1 | 0;
    if (($56 | 0) == 0) {
      var $__dst3_1 = $scevgep165;
      var $__x5_1 = $55;
      __label__ = 23;
      break;
    } else {
      var $__n2_0 = $56;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__src4_0 = $__src4_0 + 4 | 0;
      var $__x5_0 = $55;
      __label__ = 22;
      break;
    }
   case 23:
    var $__x5_1;
    var $__dst3_1;
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    __label__ = 24;
    break;
   case 24:
    var $_05 = $_05127 - 500 | 0;
    if (($_05 | 0) > 500) {
      var $_0126 = $48;
      var $_05127 = $_05;
      var $_01128 = $_01128 + 2e3 | 0;
      __label__ = 17;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $_0_lcssa = $prodp + ($35 << 2) | 0;
    var $_05_lcssa = $37;
    var $_01_lcssa = $up + ($35 << 2) | 0;
    __label__ = 26;
    break;
   case 26:
    var $_01_lcssa;
    var $_05_lcssa;
    var $_0_lcssa;
    if (($_05_lcssa | 0) > ($vn | 0)) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    ___gmpn_mul_basecase($_0_lcssa, $_01_lcssa, $_05_lcssa, $vp, $vn);
    __label__ = 29;
    break;
   case 28:
    ___gmpn_mul_basecase($_0_lcssa, $vp, $vn, $_01_lcssa, $_05_lcssa);
    __label__ = 29;
    break;
   case 29:
    var $64 = $tp | 0;
    var $65 = ___gmpn_add_n($_0_lcssa, $_0_lcssa, $64, $vn);
    var $66 = $_0_lcssa + ($vn << 2) | 0;
    var $67 = HEAP32[$66 >> 2];
    var $uadd36 = _llvm_uadd_with_overflow_i32($67, $65);
    var $68 = $uadd36.f0;
    HEAP32[$66 >> 2] = $68;
    var $69 = $uadd36.f1;
    if ($69) {
      var $__p7_0 = $66;
      __label__ = 30;
      break;
    } else {
      var $_4 = $_0_lcssa;
      var $_49 = $_05_lcssa;
      __label__ = 148;
      break;
    }
   case 30:
    var $__p7_0;
    var $70 = $__p7_0 + 4 | 0;
    var $72 = HEAP32[$70 >> 2] + 1 | 0;
    HEAP32[$70 >> 2] = $72;
    if (($72 | 0) == 0) {
      var $__p7_0 = $70;
      __label__ = 30;
      break;
    } else {
      var $_4 = $_0_lcssa;
      var $_49 = $_05_lcssa;
      __label__ = 148;
      break;
    }
   case 31:
    if (($vn | 0) > 99) {
      __label__ = 62;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $79 = STACKTOP;
    STACKTOP += ($vn << 6) + 400 | 0;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $80 = $79;
    var $81 = (i64Math.multiply($vn, 0, 3, 0), i64Math.result[0]);
    if (($81 | 0) > ($un | 0)) {
      __label__ = 57;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $85 = STACKTOP;
    STACKTOP += $vn << 4;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $86 = $85;
    var $87 = $vn << 1;
    ___gmpn_toom42_mul($prodp, $up, $87, $vp, $vn, $80);
    var $_145 = $prodp + ($87 << 2) | 0;
    var $_1246 = $up + ($87 << 2) | 0;
    var $_1647 = $un - $87 | 0;
    if (($_1647 | 0) < ($81 | 0)) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $_pre15 = (i64Math.multiply($vn, 0, 5, 0), i64Math.result[0]);
    var $un_pn_lcssa = $un;
    var $prodp_pn_lcssa = $prodp;
    var $_1_lcssa = $_145;
    var $_12_lcssa = $_1246;
    var $_16_lcssa = $_1647;
    var $_pre_phi16 = $_pre15;
    __label__ = 43;
    break;
   case 35:
    var $89 = ($87 | 0) == 0;
    var $_1_sum11 = $87 + $vn | 0;
    var $90 = $87 - 1 | 0;
    var $91 = $86 + ($vn << 2) | 0;
    var $92 = $86 + ($vn + 1 << 2) | 0;
    var $93 = (i64Math.multiply($vn, 0, 5, 0), i64Math.result[0]);
    var $95 = $vn << 3;
    var $prodp_pn48 = $prodp;
    var $_149 = $_145;
    var $_1250 = $_1246;
    var $_1651 = $_1647;
    var $indvars_iv = $prodp + ($93 - 1 << 2) | 0;
    __label__ = 36;
    break;
   case 36:
    var $indvars_iv;
    var $_1651;
    var $_1250;
    var $_149;
    var $prodp_pn48;
    var $indvars_iv137 = $indvars_iv;
    ___gmpn_toom42_mul($86, $_1250, $87, $vp, $vn, $80);
    var $97 = ___gmpn_add_n($_149, $_149, $86, $vn);
    var $_pre19 = $prodp_pn48 + ($_1_sum11 << 2) | 0;
    if ($89) {
      var $_pre_phi20 = $_pre19;
      __label__ = 40;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $__n9_0 = $90;
    var $__dst10_0 = $_pre19;
    var $__src11_0 = $92;
    var $__x12_0 = HEAP32[$91 >> 2];
    __label__ = 38;
    break;
   case 38:
    var $__x12_0;
    var $__src11_0;
    var $__dst10_0;
    var $__n9_0;
    HEAP32[$__dst10_0 >> 2] = $__x12_0;
    var $103 = HEAP32[$__src11_0 >> 2];
    var $104 = $__n9_0 - 1 | 0;
    if (($104 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      var $__n9_0 = $104;
      var $__dst10_0 = $__dst10_0 + 4 | 0;
      var $__src11_0 = $__src11_0 + 4 | 0;
      var $__x12_0 = $103;
      __label__ = 38;
      break;
    }
   case 39:
    HEAP32[$indvars_iv >> 2] = $103;
    var $_pre_phi20 = $_pre19;
    __label__ = 40;
    break;
   case 40:
    var $_pre_phi20;
    var $107 = HEAP32[$_pre_phi20 >> 2];
    var $uadd12 = _llvm_uadd_with_overflow_i32($107, $97);
    var $108 = $uadd12.f0;
    HEAP32[$_pre_phi20 >> 2] = $108;
    var $109 = $uadd12.f1;
    if ($109) {
      var $__p14_0 = $_pre_phi20;
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $_1 = $_149 + ($87 << 2) | 0;
    var $_12 = $_1250 + ($87 << 2) | 0;
    var $_16 = $_1651 - $87 | 0;
    var $111 = $indvars_iv137 + $95 | 0;
    if (($_16 | 0) < ($81 | 0)) {
      var $un_pn_lcssa = $_1651;
      var $prodp_pn_lcssa = $_149;
      var $_1_lcssa = $_1;
      var $_12_lcssa = $_12;
      var $_16_lcssa = $_16;
      var $_pre_phi16 = $93;
      __label__ = 43;
      break;
    } else {
      var $prodp_pn48 = $_149;
      var $_149 = $_1;
      var $_1250 = $_12;
      var $_1651 = $_16;
      var $indvars_iv = $111;
      __label__ = 36;
      break;
    }
   case 42:
    var $__p14_0;
    var $112 = $__p14_0 + 4 | 0;
    var $114 = HEAP32[$112 >> 2] + 1 | 0;
    HEAP32[$112 >> 2] = $114;
    if (($114 | 0) == 0) {
      var $__p14_0 = $112;
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 43:
    var $_pre_phi16;
    var $_16_lcssa;
    var $_12_lcssa;
    var $_1_lcssa;
    var $prodp_pn_lcssa;
    var $un_pn_lcssa;
    var $116 = $_16_lcssa << 2;
    if (($116 | 0) < ($_pre_phi16 | 0)) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    ___gmpn_toom22_mul($86, $_12_lcssa, $_16_lcssa, $vp, $vn, $80);
    __label__ = 48;
    break;
   case 45:
    var $120 = (i64Math.multiply($vn, 0, 7, 0), i64Math.result[0]);
    if (($116 | 0) < ($120 | 0)) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    ___gmpn_toom32_mul($86, $_12_lcssa, $_16_lcssa, $vp, $vn, $80);
    __label__ = 48;
    break;
   case 47:
    ___gmpn_toom42_mul($86, $_12_lcssa, $_16_lcssa, $vp, $vn, $80);
    __label__ = 48;
    break;
   case 48:
    var $125 = ___gmpn_add_n($_1_lcssa, $_1_lcssa, $86, $vn);
    if (($un_pn_lcssa | 0) == ($87 | 0)) {
      __label__ = 49;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 49:
    var $_pre_phi18 = $prodp_pn_lcssa + ($87 + $vn << 2) | 0;
    __label__ = 55;
    break;
   case 50:
    var $128 = $_16_lcssa - 1 | 0;
    var $129 = $prodp_pn_lcssa + ($87 + $vn << 2) | 0;
    var $131 = HEAP32[$86 + ($vn << 2) >> 2];
    if (($128 | 0) == 0) {
      var $__dst16_1 = $129;
      var $__x18_1 = $131;
      __label__ = 54;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    var $135 = $_16_lcssa + $81 - 1 | 0;
    var $__n15_0 = $128;
    var $__dst16_0 = $129;
    var $__src17_0 = $86 + ($vn + 1 << 2) | 0;
    var $__x18_0 = $131;
    __label__ = 52;
    break;
   case 52:
    var $__x18_0;
    var $__src17_0;
    var $__dst16_0;
    var $__n15_0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    var $139 = HEAP32[$__src17_0 >> 2];
    var $140 = $__n15_0 - 1 | 0;
    if (($140 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      var $__n15_0 = $140;
      var $__dst16_0 = $__dst16_0 + 4 | 0;
      var $__src17_0 = $__src17_0 + 4 | 0;
      var $__x18_0 = $139;
      __label__ = 52;
      break;
    }
   case 53:
    var $__dst16_1 = $prodp_pn_lcssa + ($135 << 2) | 0;
    var $__x18_1 = $139;
    __label__ = 54;
    break;
   case 54:
    var $__x18_1;
    var $__dst16_1;
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    var $_pre_phi18 = $129;
    __label__ = 55;
    break;
   case 55:
    var $_pre_phi18;
    var $144 = HEAP32[$_pre_phi18 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($144, $125);
    var $145 = $uadd.f0;
    HEAP32[$_pre_phi18 >> 2] = $145;
    var $146 = $uadd.f1;
    if ($146) {
      var $__p20_0 = $_pre_phi18;
      __label__ = 56;
      break;
    } else {
      var $_4 = $_1_lcssa;
      var $_49 = $_16_lcssa;
      __label__ = 148;
      break;
    }
   case 56:
    var $__p20_0;
    var $147 = $__p20_0 + 4 | 0;
    var $149 = HEAP32[$147 >> 2] + 1 | 0;
    HEAP32[$147 >> 2] = $149;
    if (($149 | 0) == 0) {
      var $__p20_0 = $147;
      __label__ = 56;
      break;
    } else {
      var $_4 = $_1_lcssa;
      var $_49 = $_16_lcssa;
      __label__ = 148;
      break;
    }
   case 57:
    var $152 = $un << 2;
    var $153 = (i64Math.multiply($vn, 0, 5, 0), i64Math.result[0]);
    if (($152 | 0) < ($153 | 0)) {
      __label__ = 58;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 58:
    ___gmpn_toom22_mul($prodp, $up, $un, $vp, $vn, $80);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 59:
    var $157 = (i64Math.multiply($vn, 0, 7, 0), i64Math.result[0]);
    if (($152 | 0) < ($157 | 0)) {
      __label__ = 60;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 60:
    ___gmpn_toom32_mul($prodp, $up, $un, $vp, $vn, $80);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 61:
    ___gmpn_toom42_mul($prodp, $up, $un, $vp, $vn, $80);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 62:
    if (($vn + $un >> 1 | 0) > 2999) {
      __label__ = 63;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 63:
    var $166 = (i64Math.multiply($vn, 0, 3, 0), i64Math.result[0]);
    if (($166 | 0) > 2999) {
      __label__ = 123;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    if (($vn | 0) > 299) {
      __label__ = 65;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 65:
    var $171 = (i64Math.multiply($un, 0, 3, 0), i64Math.result[0]);
    if (($171 + 12 | 0) < ($vn << 2 | 0)) {
      __label__ = 107;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    var $178 = STACKTOP;
    STACKTOP += ($vn << 6) + 400 | 0;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $179 = $178;
    var $180 = $un << 1;
    var $181 = (i64Math.multiply($vn, 0, 5, 0), i64Math.result[0]);
    if (($180 | 0) < ($181 | 0)) {
      __label__ = 94;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $184 = (i64Math.multiply($vn, 0, 14, 0), i64Math.result[0]);
    var $186 = STACKTOP;
    STACKTOP += $184 & -4;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $187 = $186;
    var $188 = ($vn | 0) > 109;
    var $189 = $vn << 1;
    if ($188) {
      __label__ = 69;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    ___gmpn_toom42_mul($prodp, $up, $189, $vp, $vn, $179);
    __label__ = 70;
    break;
   case 69:
    ___gmpn_toom63_mul($prodp, $up, $189, $vp, $vn, $179);
    __label__ = 70;
    break;
   case 70:
    var $_268 = $prodp + ($189 << 2) | 0;
    var $_2369 = $up + ($189 << 2) | 0;
    var $_2770 = $un - $189 | 0;
    if (($_2770 << 1 | 0) < ($181 | 0)) {
      var $un_pn15_lcssa = $un;
      var $prodp_pn17_lcssa = $prodp;
      var $_2_lcssa = $_268;
      var $_23_lcssa = $_2369;
      var $_27_lcssa = $_2770;
      __label__ = 82;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $194 = ($189 | 0) == 0;
    var $_2_sum21 = $189 + $vn | 0;
    var $195 = $189 - 1 | 0;
    var $196 = $187 + ($vn << 2) | 0;
    var $197 = $187 + ($vn + 1 << 2) | 0;
    var $199 = $vn << 3;
    var $prodp_pn1771 = $prodp;
    var $_272 = $_268;
    var $_2373 = $_2369;
    var $_2774 = $_2770;
    var $indvars_iv146 = $prodp + ($181 - 1 << 2) | 0;
    __label__ = 72;
    break;
   case 72:
    var $indvars_iv146;
    var $_2774;
    var $_2373;
    var $_272;
    var $prodp_pn1771;
    var $indvars_iv146147 = $indvars_iv146;
    if ($188) {
      __label__ = 74;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    ___gmpn_toom42_mul($187, $_2373, $189, $vp, $vn, $179);
    __label__ = 75;
    break;
   case 74:
    ___gmpn_toom63_mul($187, $_2373, $189, $vp, $vn, $179);
    __label__ = 75;
    break;
   case 75:
    var $204 = ___gmpn_add_n($_272, $_272, $187, $vn);
    var $_pre13 = $prodp_pn1771 + ($_2_sum21 << 2) | 0;
    if ($194) {
      var $_pre_phi14 = $_pre13;
      __label__ = 79;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    var $__n24_0 = $195;
    var $__dst25_0 = $_pre13;
    var $__src26_0 = $197;
    var $__x27_0 = HEAP32[$196 >> 2];
    __label__ = 77;
    break;
   case 77:
    var $__x27_0;
    var $__src26_0;
    var $__dst25_0;
    var $__n24_0;
    HEAP32[$__dst25_0 >> 2] = $__x27_0;
    var $210 = HEAP32[$__src26_0 >> 2];
    var $211 = $__n24_0 - 1 | 0;
    if (($211 | 0) == 0) {
      __label__ = 78;
      break;
    } else {
      var $__n24_0 = $211;
      var $__dst25_0 = $__dst25_0 + 4 | 0;
      var $__src26_0 = $__src26_0 + 4 | 0;
      var $__x27_0 = $210;
      __label__ = 77;
      break;
    }
   case 78:
    HEAP32[$indvars_iv146 >> 2] = $210;
    var $_pre_phi14 = $_pre13;
    __label__ = 79;
    break;
   case 79:
    var $_pre_phi14;
    var $214 = HEAP32[$_pre_phi14 >> 2];
    var $uadd22 = _llvm_uadd_with_overflow_i32($214, $204);
    var $215 = $uadd22.f0;
    HEAP32[$_pre_phi14 >> 2] = $215;
    var $216 = $uadd22.f1;
    if ($216) {
      var $__p29_0 = $_pre_phi14;
      __label__ = 81;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 80:
    var $_2 = $_272 + ($189 << 2) | 0;
    var $_23 = $_2373 + ($189 << 2) | 0;
    var $_27 = $_2774 - $189 | 0;
    var $219 = $indvars_iv146147 + $199 | 0;
    if (($_27 << 1 | 0) < ($181 | 0)) {
      var $un_pn15_lcssa = $_2774;
      var $prodp_pn17_lcssa = $_272;
      var $_2_lcssa = $_2;
      var $_23_lcssa = $_23;
      var $_27_lcssa = $_27;
      __label__ = 82;
      break;
    } else {
      var $prodp_pn1771 = $_272;
      var $_272 = $_2;
      var $_2373 = $_23;
      var $_2774 = $_27;
      var $indvars_iv146 = $219;
      __label__ = 72;
      break;
    }
   case 81:
    var $__p29_0;
    var $220 = $__p29_0 + 4 | 0;
    var $222 = HEAP32[$220 >> 2] + 1 | 0;
    HEAP32[$220 >> 2] = $222;
    if (($222 | 0) == 0) {
      var $__p29_0 = $220;
      __label__ = 81;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 82:
    var $_27_lcssa;
    var $_23_lcssa;
    var $_2_lcssa;
    var $prodp_pn17_lcssa;
    var $un_pn15_lcssa;
    if (($_27_lcssa | 0) < ($vn | 0)) {
      __label__ = 83;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 83:
    var $226 = ___gmpn_mul($187, $vp, $vn, $_23_lcssa, $_27_lcssa);
    __label__ = 85;
    break;
   case 84:
    var $228 = ___gmpn_mul($187, $_23_lcssa, $_27_lcssa, $vp, $vn);
    __label__ = 85;
    break;
   case 85:
    var $230 = ___gmpn_add_n($_2_lcssa, $_2_lcssa, $187, $vn);
    if (($un_pn15_lcssa | 0) == ($189 | 0)) {
      __label__ = 86;
      break;
    } else {
      __label__ = 87;
      break;
    }
   case 86:
    var $_pre_phi12 = $prodp_pn17_lcssa + ($189 + $vn << 2) | 0;
    __label__ = 92;
    break;
   case 87:
    var $233 = $_27_lcssa - 1 | 0;
    var $234 = $prodp_pn17_lcssa + ($189 + $vn << 2) | 0;
    var $236 = HEAP32[$187 + ($vn << 2) >> 2];
    if (($233 | 0) == 0) {
      var $__dst31_1 = $234;
      var $__x33_1 = $236;
      __label__ = 91;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 88:
    var $238 = $187 + ($vn + 1 << 2) | 0;
    var $239 = (i64Math.multiply($vn, 0, 3, 0), i64Math.result[0]);
    var $241 = $_27_lcssa + $239 - 1 | 0;
    var $__n30_0 = $233;
    var $__dst31_0 = $234;
    var $__src32_0 = $238;
    var $__x33_0 = $236;
    __label__ = 89;
    break;
   case 89:
    var $__x33_0;
    var $__src32_0;
    var $__dst31_0;
    var $__n30_0;
    HEAP32[$__dst31_0 >> 2] = $__x33_0;
    var $245 = HEAP32[$__src32_0 >> 2];
    var $246 = $__n30_0 - 1 | 0;
    if (($246 | 0) == 0) {
      __label__ = 90;
      break;
    } else {
      var $__n30_0 = $246;
      var $__dst31_0 = $__dst31_0 + 4 | 0;
      var $__src32_0 = $__src32_0 + 4 | 0;
      var $__x33_0 = $245;
      __label__ = 89;
      break;
    }
   case 90:
    var $__dst31_1 = $prodp_pn17_lcssa + ($241 << 2) | 0;
    var $__x33_1 = $245;
    __label__ = 91;
    break;
   case 91:
    var $__x33_1;
    var $__dst31_1;
    HEAP32[$__dst31_1 >> 2] = $__x33_1;
    var $_pre_phi12 = $234;
    __label__ = 92;
    break;
   case 92:
    var $_pre_phi12;
    var $250 = HEAP32[$_pre_phi12 >> 2];
    var $uadd18 = _llvm_uadd_with_overflow_i32($250, $230);
    var $251 = $uadd18.f0;
    HEAP32[$_pre_phi12 >> 2] = $251;
    var $252 = $uadd18.f1;
    if ($252) {
      var $__p35_0 = $_pre_phi12;
      __label__ = 93;
      break;
    } else {
      var $_4 = $_2_lcssa;
      var $_49 = $_27_lcssa;
      __label__ = 148;
      break;
    }
   case 93:
    var $__p35_0;
    var $253 = $__p35_0 + 4 | 0;
    var $255 = HEAP32[$253 >> 2] + 1 | 0;
    HEAP32[$253 >> 2] = $255;
    if (($255 | 0) == 0) {
      var $__p35_0 = $253;
      __label__ = 93;
      break;
    } else {
      var $_4 = $_2_lcssa;
      var $_49 = $_27_lcssa;
      __label__ = 148;
      break;
    }
   case 94:
    var $258 = (i64Math.multiply($un, 0, 6, 0), i64Math.result[0]);
    var $259 = (i64Math.multiply($vn, 0, 7, 0), i64Math.result[0]);
    if (($258 | 0) < ($259 | 0)) {
      __label__ = 95;
      break;
    } else {
      __label__ = 96;
      break;
    }
   case 95:
    ___gmpn_toom33_mul($prodp, $up, $un, $vp, $vn, $179);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 96:
    var $263 = (i64Math.multiply($vn, 0, 3, 0), i64Math.result[0]);
    if (($180 | 0) < ($263 | 0)) {
      __label__ = 97;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 97:
    ___gmpn_toom43_mul($prodp, $up, $un, $vp, $vn, $179);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 98:
    var $267 = (i64Math.multiply($vn, 0, 11, 0), i64Math.result[0]);
    if (($258 | 0) < ($267 | 0)) {
      __label__ = 99;
      break;
    } else {
      __label__ = 104;
      break;
    }
   case 99:
    if (($un << 2 | 0) < ($259 | 0)) {
      __label__ = 100;
      break;
    } else {
      __label__ = 103;
      break;
    }
   case 100:
    if (($vn | 0) > 109) {
      __label__ = 102;
      break;
    } else {
      __label__ = 101;
      break;
    }
   case 101:
    ___gmpn_toom32_mul($prodp, $up, $un, $vp, $vn, $179);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 102:
    ___gmpn_toom53_mul($prodp, $up, $un, $vp, $vn, $179);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 103:
    ___gmpn_toom53_mul($prodp, $up, $un, $vp, $vn, $179);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 104:
    if (($vn | 0) > 109) {
      __label__ = 106;
      break;
    } else {
      __label__ = 105;
      break;
    }
   case 105:
    ___gmpn_toom42_mul($prodp, $up, $un, $vp, $vn, $179);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 106:
    ___gmpn_toom63_mul($prodp, $up, $un, $vp, $vn, $179);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 107:
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($vn | 0) > 349) {
      __label__ = 112;
      break;
    } else {
      __label__ = 108;
      break;
    }
   case 108:
    var $284 = (i64Math.multiply($un, 0, 12, 0), i64Math.result[0]);
    var $285 = $284 + 128 | 0;
    if ($285 >>> 0 < 65536) {
      __label__ = 109;
      break;
    } else {
      __label__ = 110;
      break;
    }
   case 109:
    var $288 = STACKTOP;
    STACKTOP += $285;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $292 = $288;
    __label__ = 111;
    break;
   case 110:
    var $290 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $285);
    var $292 = $290;
    __label__ = 111;
    break;
   case 111:
    var $292;
    ___gmpn_toom44_mul($prodp, $up, $un, $vp, $vn, $292);
    __label__ = 121;
    break;
   case 112:
    if (($vn | 0) > 449) {
      __label__ = 117;
      break;
    } else {
      __label__ = 113;
      break;
    }
   case 113:
    var $297 = _mpn_toom6h_mul_itch($un, $vn);
    var $298 = $297 << 2;
    if ($298 >>> 0 < 65536) {
      __label__ = 114;
      break;
    } else {
      __label__ = 115;
      break;
    }
   case 114:
    var $301 = STACKTOP;
    STACKTOP += $298;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $305 = $301;
    __label__ = 116;
    break;
   case 115:
    var $303 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $298);
    var $305 = $303;
    __label__ = 116;
    break;
   case 116:
    var $305;
    ___gmpn_toom6h_mul($prodp, $up, $un, $vp, $vn, $305);
    __label__ = 121;
    break;
   case 117:
    var $308 = _mpn_toom8h_mul_itch($un, $vn);
    var $309 = $308 << 2;
    if ($309 >>> 0 < 65536) {
      __label__ = 118;
      break;
    } else {
      __label__ = 119;
      break;
    }
   case 118:
    var $312 = STACKTOP;
    STACKTOP += $309;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $316 = $312;
    __label__ = 120;
    break;
   case 119:
    var $314 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $309);
    var $316 = $314;
    __label__ = 120;
    break;
   case 120:
    var $316;
    ___gmpn_toom8h_mul($prodp, $up, $un, $vp, $vn, $316);
    __label__ = 121;
    break;
   case 121:
    var $319 = HEAP32[$__tmp_marker >> 2];
    if (($319 | 0) == 0) {
      var $_4 = $prodp;
      var $_49 = $un;
      __label__ = 148;
      break;
    } else {
      __label__ = 122;
      break;
    }
   case 122:
    ___gmp_tmp_reentrant_free($319);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 123:
    if (($vn << 3 | 0) > ($un | 0)) {
      __label__ = 147;
      break;
    } else {
      __label__ = 124;
      break;
    }
   case 124:
    HEAP32[$__tmp_marker39 >> 2] = 0;
    var $326 = (i64Math.multiply($vn, 0, 18, 0), i64Math.result[0]);
    var $327 = $326 & -4;
    var $328 = ___gmp_tmp_reentrant_alloc($__tmp_marker39, $327);
    var $329 = $328;
    ___gmpn_nussbaumer_mul($prodp, $up, $166, $vp, $vn);
    var $_395 = $prodp + ($166 << 2) | 0;
    var $_3496 = $up + ($166 << 2) | 0;
    var $_3897 = $un - $166 | 0;
    var $330 = $_3897 << 1;
    var $331 = (i64Math.multiply($vn, 0, 7, 0), i64Math.result[0]);
    if (($330 | 0) < ($331 | 0)) {
      var $un_pn25_lcssa = $un;
      var $prodp_pn27_lcssa = $prodp;
      var $_3_lcssa = $_395;
      var $_34_lcssa = $_3496;
      var $_38_lcssa = $_3897;
      __label__ = 133;
      break;
    } else {
      __label__ = 125;
      break;
    }
   case 125:
    var $333 = ($166 | 0) == 0;
    var $_3_sum31 = $166 + $vn | 0;
    var $334 = $166 - 1 | 0;
    var $335 = $329 + ($vn << 2) | 0;
    var $336 = $329 + ($vn + 1 << 2) | 0;
    var $337 = ($334 | 0) == 0;
    var $scevgep155 = $prodp + ($331 - 1 << 2) | 0;
    var $339 = (i64Math.multiply($vn, 0, 12, 0), i64Math.result[0]);
    var $prodp_pn2798 = $prodp;
    var $_399 = $_395;
    var $_34100 = $_3496;
    var $_38101 = $_3897;
    var $indvars_iv156 = $scevgep155;
    __label__ = 126;
    break;
   case 126:
    var $indvars_iv156;
    var $_38101;
    var $_34100;
    var $_399;
    var $prodp_pn2798;
    var $indvars_iv156157 = $indvars_iv156;
    ___gmpn_nussbaumer_mul($329, $_34100, $166, $vp, $vn);
    var $341 = ___gmpn_add_n($_399, $_399, $329, $vn);
    var $_pre9 = $prodp_pn2798 + ($_3_sum31 << 2) | 0;
    if ($333) {
      var $_pre_phi10 = $_pre9;
      __label__ = 130;
      break;
    } else {
      __label__ = 127;
      break;
    }
   case 127:
    var $343 = HEAP32[$335 >> 2];
    if ($337) {
      var $__x43_1 = $343;
      var $__dst41_1 = $_pre9;
      __label__ = 129;
      break;
    } else {
      var $__x43_0 = $343;
      var $__src42_0 = $336;
      var $__dst41_0 = $_pre9;
      var $__n40_0 = $334;
      __label__ = 128;
      break;
    }
   case 128:
    var $__n40_0;
    var $__dst41_0;
    var $__src42_0;
    var $__x43_0;
    HEAP32[$__dst41_0 >> 2] = $__x43_0;
    var $346 = HEAP32[$__src42_0 >> 2];
    var $347 = $__n40_0 - 1 | 0;
    if (($347 | 0) == 0) {
      var $__x43_1 = $346;
      var $__dst41_1 = $indvars_iv156;
      __label__ = 129;
      break;
    } else {
      var $__x43_0 = $346;
      var $__src42_0 = $__src42_0 + 4 | 0;
      var $__dst41_0 = $__dst41_0 + 4 | 0;
      var $__n40_0 = $347;
      __label__ = 128;
      break;
    }
   case 129:
    var $__dst41_1;
    var $__x43_1;
    HEAP32[$__dst41_1 >> 2] = $__x43_1;
    var $_pre_phi10 = $_pre9;
    __label__ = 130;
    break;
   case 130:
    var $_pre_phi10;
    var $349 = HEAP32[$_pre_phi10 >> 2];
    var $uadd32 = _llvm_uadd_with_overflow_i32($349, $341);
    var $350 = $uadd32.f0;
    HEAP32[$_pre_phi10 >> 2] = $350;
    var $351 = $uadd32.f1;
    if ($351) {
      var $__p45_0 = $_pre_phi10;
      __label__ = 132;
      break;
    } else {
      __label__ = 131;
      break;
    }
   case 131:
    var $_3 = $_399 + ($166 << 2) | 0;
    var $_34 = $_34100 + ($166 << 2) | 0;
    var $_38 = $_38101 - $166 | 0;
    var $354 = $indvars_iv156157 + $339 | 0;
    if (($_38 << 1 | 0) < ($331 | 0)) {
      var $un_pn25_lcssa = $_38101;
      var $prodp_pn27_lcssa = $_399;
      var $_3_lcssa = $_3;
      var $_34_lcssa = $_34;
      var $_38_lcssa = $_38;
      __label__ = 133;
      break;
    } else {
      var $prodp_pn2798 = $_399;
      var $_399 = $_3;
      var $_34100 = $_34;
      var $_38101 = $_38;
      var $indvars_iv156 = $354;
      __label__ = 126;
      break;
    }
   case 132:
    var $__p45_0;
    var $355 = $__p45_0 + 4 | 0;
    var $357 = HEAP32[$355 >> 2] + 1 | 0;
    HEAP32[$355 >> 2] = $357;
    if (($357 | 0) == 0) {
      var $__p45_0 = $355;
      __label__ = 132;
      break;
    } else {
      __label__ = 131;
      break;
    }
   case 133:
    var $_38_lcssa;
    var $_34_lcssa;
    var $_3_lcssa;
    var $prodp_pn27_lcssa;
    var $un_pn25_lcssa;
    if (($_38_lcssa | 0) < ($vn | 0)) {
      __label__ = 134;
      break;
    } else {
      __label__ = 135;
      break;
    }
   case 134:
    var $361 = ___gmpn_mul($329, $vp, $vn, $_34_lcssa, $_38_lcssa);
    __label__ = 136;
    break;
   case 135:
    var $363 = ___gmpn_mul($329, $_34_lcssa, $_38_lcssa, $vp, $vn);
    __label__ = 136;
    break;
   case 136:
    var $365 = ___gmpn_add_n($_3_lcssa, $_3_lcssa, $329, $vn);
    if (($un_pn25_lcssa | 0) == ($166 | 0)) {
      __label__ = 137;
      break;
    } else {
      __label__ = 138;
      break;
    }
   case 137:
    var $_pre_phi = $prodp_pn27_lcssa + ($166 + $vn << 2) | 0;
    __label__ = 143;
    break;
   case 138:
    var $368 = $_38_lcssa - 1 | 0;
    var $369 = $prodp_pn27_lcssa + ($166 + $vn << 2) | 0;
    var $371 = HEAP32[$329 + ($vn << 2) >> 2];
    if (($368 | 0) == 0) {
      var $__x49_1 = $371;
      var $__dst47_1 = $369;
      __label__ = 142;
      break;
    } else {
      __label__ = 139;
      break;
    }
   case 139:
    var $376 = $_38_lcssa + ($vn << 2) - 1 | 0;
    var $__x49_0 = $371;
    var $__src48_0 = $329 + ($vn + 1 << 2) | 0;
    var $__dst47_0 = $369;
    var $__n46_0 = $368;
    __label__ = 140;
    break;
   case 140:
    var $__n46_0;
    var $__dst47_0;
    var $__src48_0;
    var $__x49_0;
    HEAP32[$__dst47_0 >> 2] = $__x49_0;
    var $380 = HEAP32[$__src48_0 >> 2];
    var $381 = $__n46_0 - 1 | 0;
    if (($381 | 0) == 0) {
      __label__ = 141;
      break;
    } else {
      var $__x49_0 = $380;
      var $__src48_0 = $__src48_0 + 4 | 0;
      var $__dst47_0 = $__dst47_0 + 4 | 0;
      var $__n46_0 = $381;
      __label__ = 140;
      break;
    }
   case 141:
    var $__x49_1 = $380;
    var $__dst47_1 = $prodp_pn27_lcssa + ($376 << 2) | 0;
    __label__ = 142;
    break;
   case 142:
    var $__dst47_1;
    var $__x49_1;
    HEAP32[$__dst47_1 >> 2] = $__x49_1;
    var $_pre_phi = $369;
    __label__ = 143;
    break;
   case 143:
    var $_pre_phi;
    var $385 = HEAP32[$_pre_phi >> 2];
    var $uadd28 = _llvm_uadd_with_overflow_i32($385, $365);
    var $386 = $uadd28.f0;
    HEAP32[$_pre_phi >> 2] = $386;
    var $387 = $uadd28.f1;
    if ($387) {
      var $__p51_0 = $_pre_phi;
      __label__ = 144;
      break;
    } else {
      __label__ = 145;
      break;
    }
   case 144:
    var $__p51_0;
    var $388 = $__p51_0 + 4 | 0;
    var $390 = HEAP32[$388 >> 2] + 1 | 0;
    HEAP32[$388 >> 2] = $390;
    if (($390 | 0) == 0) {
      var $__p51_0 = $388;
      __label__ = 144;
      break;
    } else {
      __label__ = 145;
      break;
    }
   case 145:
    var $392 = HEAP32[$__tmp_marker39 >> 2];
    if (($392 | 0) == 0) {
      var $_4 = $_3_lcssa;
      var $_49 = $_38_lcssa;
      __label__ = 148;
      break;
    } else {
      __label__ = 146;
      break;
    }
   case 146:
    ___gmp_tmp_reentrant_free($392);
    var $_4 = $_3_lcssa;
    var $_49 = $_38_lcssa;
    __label__ = 148;
    break;
   case 147:
    ___gmpn_nussbaumer_mul($prodp, $up, $un, $vp, $vn);
    var $_4 = $prodp;
    var $_49 = $un;
    __label__ = 148;
    break;
   case 148:
    var $_49;
    var $_4;
    var $399 = HEAP32[$_4 + ($vn - 1 + $_49 << 2) >> 2];
    STACKTOP = __stackBase__;
    return $399;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mul["X"] = 1;

function ___gmpn_random($ptr, $size) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($size | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (HEAP8[___gmp_rands_initialized] << 24 >> 24 == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    HEAP8[___gmp_rands_initialized] = 1;
    ___gmp_randinit_mt_noseed(___gmp_rands | 0);
    __label__ = 5;
    break;
   case 5:
    var $10 = HEAP32[HEAP32[___gmp_rands + 16 >> 2] + 4 >> 2];
    var $11 = $size << 5;
    FUNCTION_TABLE[$10](___gmp_rands | 0, $ptr, $11);
    var $13 = $ptr + ($size - 1 << 2) | 0;
    if ((HEAP32[$13 >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $19 = HEAP32[HEAP32[___gmp_rands + 16 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$19](___gmp_rands | 0, $13, 32);
    if ((HEAP32[$13 >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_random2($rp, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ranm = __stackBase__;
    if (HEAP8[___gmp_rands_initialized] << 24 >> 24 == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP8[___gmp_rands_initialized] = 1;
    ___gmp_randinit_mt_noseed(___gmp_rands | 0);
    __label__ = 4;
    break;
   case 4:
    var $8 = HEAP32[HEAP32[___gmp_rands + 16 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$8](___gmp_rands | 0, $ranm, 32);
    var $12 = ($n << 5) - (HEAP32[$ranm >> 2] & 31) | 0;
    _gmp_rrandomb($rp, $12);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _gmp_rrandomb($rp, $nbits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ranm = __stackBase__;
    var $2 = ($nbits + 31 | 0) >>> 5;
    HEAP32[$rp + ($2 - 1 << 2) >> 2] = -1 >>> ((-$nbits & 31) >>> 0);
    var $8 = $2 - 2 | 0;
    if (($8 | 0) > -1) {
      var $i_01 = $8;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $i_01;
    HEAP32[$rp + ($i_01 << 2) >> 2] = -1;
    if (($i_01 | 0) > 0) {
      var $i_01 = $i_01 - 1 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $16 = HEAP32[HEAP32[___gmp_rands + 16 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$16](___gmp_rands | 0, $ranm, 32);
    var $19 = (HEAP32[$ranm >> 2] & 3) + 1 | 0;
    var $20 = Math.floor(($nbits >>> 0) / ($19 >>> 0));
    var $23 = (($20 | 0) == 0 & 1) + $20 | 0;
    var $bi_0 = $nbits;
    __label__ = 5;
    break;
   case 5:
    var $bi_0;
    var $28 = HEAP32[HEAP32[___gmp_rands + 16 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$28](___gmp_rands | 0, $ranm, 32);
    var $31 = (HEAPU32[$ranm >> 2] >>> 0) % ($23 >>> 0) + 1 | 0;
    var $34 = $bi_0 >>> 0 < $31 >>> 0 ? 0 : $bi_0 - $31 | 0;
    if (($34 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $40 = $rp + ($34 >>> 5 << 2) | 0;
    var $42 = HEAP32[$40 >> 2] ^ 1 << ($34 & 31);
    HEAP32[$40 >> 2] = $42;
    var $46 = HEAP32[HEAP32[___gmp_rands + 16 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$46](___gmp_rands | 0, $ranm, 32);
    var $49 = (HEAPU32[$ranm >> 2] >>> 0) % ($23 >>> 0) + 1 | 0;
    var $52 = $34 >>> 0 < $49 >>> 0 ? 0 : $34 - $49 | 0;
    var $54 = $rp + ($52 >>> 5 << 2) | 0;
    var $55 = HEAP32[$54 >> 2];
    var $57 = 1 << ($52 & 31);
    var $uadd = _llvm_uadd_with_overflow_i32($55, $57);
    var $58 = $uadd.f0;
    HEAP32[$54 >> 2] = $58;
    var $59 = $uadd.f1;
    if ($59) {
      var $__p_0 = $54;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $__p_0;
    var $60 = $__p_0 + 4 | 0;
    var $62 = HEAP32[$60 >> 2] + 1 | 0;
    HEAP32[$60 >> 2] = $62;
    if (($62 | 0) == 0) {
      var $__p_0 = $60;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if (($52 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $bi_0 = $52;
      __label__ = 5;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_gmp_rrandomb["X"] = 1;

function ___gmpn_rootrem($rootp, $remp, $up, $un, $k) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if (($remp | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 3:
    var $3 = Math.floor(($un >>> 0) / ($k >>> 0));
    if ($3 >>> 0 > 2) {
      __label__ = 4;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 4:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $6 = $k + $un | 0;
    var $7 = $6 << 2;
    if ($7 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $10 = STACKTOP;
    STACKTOP += $7;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $14 = $10;
    __label__ = 7;
    break;
   case 6:
    var $12 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $7);
    var $14 = $12;
    __label__ = 7;
    break;
   case 7:
    var $14;
    var $15 = $14;
    var $16 = $un - 1 | 0;
    var $17 = Math.floor(($16 >>> 0) / ($k >>> 0));
    var $19 = ($17 << 2) + 8 | 0;
    if ($19 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $22 = STACKTOP;
    STACKTOP += $19;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $26 = $22;
    __label__ = 10;
    break;
   case 9:
    var $24 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $19);
    var $26 = $24;
    __label__ = 10;
    break;
   case 10:
    var $26;
    var $27 = $26;
    if (($un | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $30 = $15 + ($k << 2) | 0;
    var $31 = HEAPU32[$up >> 2];
    if (($16 | 0) == 0) {
      var $__x_1 = $31;
      var $__dst_1 = $30;
      __label__ = 15;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $scevgep = $14 + (($k << 2) + ($un << 2) - 4) | 0;
    var $__x_0 = $31;
    var $up_pn = $up;
    var $__dst_0 = $30;
    var $__n_0 = $16;
    __label__ = 13;
    break;
   case 13:
    var $__n_0;
    var $__dst_0;
    var $up_pn;
    var $__x_0;
    var $__src_0 = $up_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $39 = HEAP32[$__src_0 >> 2];
    var $40 = $__n_0 - 1 | 0;
    if (($40 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $__x_0 = $39;
      var $up_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $40;
      __label__ = 13;
      break;
    }
   case 14:
    var $__x_1 = $39;
    var $__dst_1 = $scevgep;
    __label__ = 15;
    break;
   case 15:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 16;
    break;
   case 16:
    if (($k | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $45 = $k << 2;
    _memset($14, 0, $45, 4);
    __label__ = 18;
    break;
   case 18:
    var $47 = _mpn_rootrem_internal($27, 0, $15, $6, $k, 1);
    if (($17 | 0) == -1) {
      __label__ = 24;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $52 = HEAP32[$26 + 4 >> 2];
    if (($17 | 0) == 0) {
      var $__x6_1 = $52;
      var $__dst4_1 = $rootp;
      __label__ = 23;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $__x6_0 = $52;
    var $__src5_0 = $26 + 8 | 0;
    var $__dst4_0 = $rootp;
    var $__n3_0 = $17;
    __label__ = 21;
    break;
   case 21:
    var $__n3_0;
    var $__dst4_0;
    var $__src5_0;
    var $__x6_0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    var $59 = HEAP32[$__src5_0 >> 2];
    var $60 = $__n3_0 - 1 | 0;
    if (($60 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      var $__x6_0 = $59;
      var $__src5_0 = $__src5_0 + 4 | 0;
      var $__dst4_0 = $__dst4_0 + 4 | 0;
      var $__n3_0 = $60;
      __label__ = 21;
      break;
    }
   case 22:
    var $__x6_1 = $59;
    var $__dst4_1 = $rootp + ($17 << 2) | 0;
    __label__ = 23;
    break;
   case 23:
    var $__dst4_1;
    var $__x6_1;
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    __label__ = 24;
    break;
   case 24:
    var $63 = HEAP32[$__tmp_marker >> 2];
    if (($63 | 0) == 0) {
      var $_0 = $47;
      __label__ = 27;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    ___gmp_tmp_reentrant_free($63);
    var $_0 = $47;
    __label__ = 27;
    break;
   case 26:
    var $67 = _mpn_rootrem_internal($rootp, $remp, $up, $un, $k, 0);
    var $_0 = $67;
    __label__ = 27;
    break;
   case 27:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_rootrem["X"] = 1;

function _mpn_rootrem_internal($rootp, $remp, $up, $un, $k, $approx) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 136;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $sizes = __stackBase__;
    var $__tmp_marker = __stackBase__ + 132;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $7 = $un + 2 + (($k >>> 0) * .585 * .03125 & -1) << 2;
    var $8 = $7 >>> 0 < 65536;
    if ($8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = STACKTOP;
    STACKTOP += $7;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $14 = $10;
    __label__ = 5;
    break;
   case 4:
    var $12 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $7);
    var $14 = $12;
    __label__ = 5;
    break;
   case 5:
    var $14;
    var $15 = $14;
    var $16 = ($remp | 0) == 0;
    var $18 = ($un << 2) + 4 | 0;
    var $19 = $18 >>> 0 < 65536;
    if ($16) {
      __label__ = 6;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 6:
    if ($19) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $22 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $26 = $22;
    __label__ = 9;
    break;
   case 8:
    var $24 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $18);
    var $26 = $24;
    __label__ = 9;
    break;
   case 9:
    var $26;
    var $27 = $26;
    var $rp_0 = $27;
    var $scratch_0 = $27;
    __label__ = 14;
    break;
   case 10:
    if ($19) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $30 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $34 = $30;
    __label__ = 13;
    break;
   case 12:
    var $32 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $18);
    var $34 = $32;
    __label__ = 13;
    break;
   case 13:
    var $34;
    var $rp_0 = $remp;
    var $scratch_0 = $34;
    __label__ = 14;
    break;
   case 14:
    var $scratch_0;
    var $rp_0;
    if ($8) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $38 = STACKTOP;
    STACKTOP += $7;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $42 = $38;
    __label__ = 17;
    break;
   case 16:
    var $40 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $7);
    var $42 = $40;
    __label__ = 17;
    break;
   case 17:
    var $42;
    var $43 = $42;
    var $44 = $un - 1 | 0;
    var $46 = HEAPU32[$up + ($44 << 2) >> 2];
    if ($46 >>> 0 < 65536) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $50 = $46 >>> 0 < 256 ? 1 : 9;
    var $55 = $50;
    __label__ = 20;
    break;
   case 19:
    var $53 = $46 >>> 0 < 16777216 ? 17 : 25;
    var $55 = $53;
    __label__ = 20;
    break;
   case 20:
    var $55;
    var $57 = STRING_TABLE.___gmpn_clz_tab + ($46 >>> ($55 >>> 0)) | 0;
    var $59 = HEAPU8[$57] & 255;
    var $60 = $un << 5;
    var $63 = $60 - 34 + $55 + $59 | 0;
    var $64 = Math.floor(($63 >>> 0) / ($k >>> 0));
    if (($64 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 21:
    var $rp_0_remp = $16 ? $rp_0 : $remp;
    var $67 = ___gmpn_sub_1($rp_0_remp, $up, $un, 1);
    var $_02 = $un;
    __label__ = 22;
    break;
   case 22:
    var $_02;
    if (($_02 | 0) > 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $71 = $_02 - 1 | 0;
    if ((HEAP32[$rp_0_remp + ($71 << 2) >> 2] | 0) == 0) {
      var $_02 = $71;
      __label__ = 22;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP32[$rootp >> 2] = 1;
    var $75 = HEAP32[$__tmp_marker >> 2];
    if (($75 | 0) == 0) {
      var $_0 = $_02;
      __label__ = 119;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    ___gmp_tmp_reentrant_free($75);
    var $_0 = $_02;
    __label__ = 119;
    break;
   case 26:
    var $79 = (i64Math.multiply($64, 0, $k, 0), i64Math.result[0]);
    var $80 = $79 >>> 5;
    var $81 = $un - $80 | 0;
    var $82 = $79 & 31;
    if (($82 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $85 = $up + ($80 << 2) | 0;
    var $86 = ___gmpn_rshift($rp_0, $85, $81, $82);
    __label__ = 34;
    break;
   case 28:
    if (($80 | 0) == ($un | 0)) {
      __label__ = 34;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $90 = $81 - 1 | 0;
    var $92 = HEAP32[$up + ($80 << 2) >> 2];
    if (($90 | 0) == 0) {
      var $__dst_1 = $rp_0;
      var $__x_1 = $92;
      __label__ = 33;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $97 = ($55 | $60) + $59 - 34 | 0;
    var $101 = $44 - (($97 - ($97 >>> 0) % ($k >>> 0) | 0) >>> 5) | 0;
    var $__n_0 = $90;
    var $__dst_0 = $rp_0;
    var $__src_0 = $up + ($80 + 1 << 2) | 0;
    var $__x_0 = $92;
    __label__ = 31;
    break;
   case 31:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $105 = HEAP32[$__src_0 >> 2];
    var $106 = $__n_0 - 1 | 0;
    if (($106 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      var $__n_0 = $106;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $105;
      __label__ = 31;
      break;
    }
   case 32:
    var $__dst_1 = $rp_0 + ($101 << 2) | 0;
    var $__x_1 = $105;
    __label__ = 33;
    break;
   case 33:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 34;
    break;
   case 34:
    var $110 = ___gmpn_sub_1($rp_0, $rp_0, $81, 1);
    HEAP32[$rootp >> 2] = 1;
    var $111 = $k - 1 | 0;
    var $logk_0 = 1;
    __label__ = 35;
    break;
   case 35:
    var $logk_0;
    var $115 = $logk_0 + 1 | 0;
    if (($111 >>> ($logk_0 >>> 0) | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      var $logk_0 = $115;
      __label__ = 35;
      break;
    }
   case 36:
    var $ni_041 = 0;
    var $b_042 = $64;
    var $118 = $sizes | 0;
    __label__ = 37;
    break;
   case 37:
    var $118;
    var $b_042;
    var $ni_041;
    HEAP32[$118 >> 2] = $b_042;
    var $120 = ($115 + $b_042 | 0) >>> 1;
    var $_ = $120 >>> 0 < $b_042 >>> 0 ? $120 : $b_042 - 1 | 0;
    var $123 = $ni_041 + 1 | 0;
    var $125 = $sizes + ($123 << 2) | 0;
    if (($_ | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      var $ni_041 = $123;
      var $b_042 = $_;
      var $118 = $125;
      __label__ = 37;
      break;
    }
   case 38:
    HEAP32[$125 >> 2] = 0;
    if (($123 | 0) < 33) {
      __label__ = 40;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    ___gmp_assert_fail(STRING_TABLE.__str50 | 0, 214, STRING_TABLE.__str151 | 0);
    throw "Reached an unreachable!";
   case 40:
    HEAP32[$43 >> 2] = 1;
    var $130 = $14 + 4 | 0;
    var $_03 = $approx;
    var $rn_0 = $81;
    var $sn_0 = 1;
    var $wn_0 = 1;
    var $kk_0 = $79;
    var $i_0 = $123;
    __label__ = 41;
    break;
   case 41:
    var $i_0;
    var $kk_0;
    var $save2_0;
    var $wn_0;
    var $sn_0;
    var $rn_0;
    var $_03;
    if (($i_0 | 0) == 0) {
      __label__ = 117;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $133 = $i_0 - 1 | 0;
    var $135 = HEAPU32[$sizes + ($133 << 2) >> 2];
    var $137 = HEAPU32[$sizes + ($i_0 << 2) >> 2];
    var $138 = $135 - $137 | 0;
    if (($rn_0 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      var $rn_1 = $rn_0;
      __label__ = 44;
      break;
    }
   case 43:
    HEAP32[$rp_0 >> 2] = 0;
    var $rn_1 = 1;
    __label__ = 44;
    break;
   case 44:
    var $rn_1;
    var $142 = $138 & 31;
    var $143 = ($142 | 0) != 0;
    if ($143) {
      __label__ = 50;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $145 = $rn_1 - 1 | 0;
    var $146 = $138 >>> 5;
    var $147 = $rp_0 + ($145 + $146 << 2) | 0;
    var $149 = HEAP32[$rp_0 + ($145 << 2) >> 2];
    if (($145 | 0) == 0) {
      var $__dst2_1 = $147;
      var $__x4_1 = $149;
      __label__ = 49;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $__n1_0 = $145;
    var $__dst2_0 = $147;
    var $__src3_0 = $rp_0 + ($rn_1 - 2 << 2) | 0;
    var $__x4_0 = $149;
    __label__ = 47;
    break;
   case 47:
    var $__x4_0;
    var $__src3_0;
    var $__dst2_0;
    var $__n1_0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $155 = HEAP32[$__src3_0 >> 2];
    var $156 = $__n1_0 - 1 | 0;
    if (($156 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      var $__n1_0 = $156;
      var $__dst2_0 = $__dst2_0 - 4 | 0;
      var $__src3_0 = $__src3_0 - 4 | 0;
      var $__x4_0 = $155;
      __label__ = 47;
      break;
    }
   case 48:
    var $__dst2_1 = $rp_0 + ($146 << 2) | 0;
    var $__x4_1 = $155;
    __label__ = 49;
    break;
   case 49:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $rn_2 = $rn_1 + $146 | 0;
    var $169 = $146;
    __label__ = 52;
    break;
   case 50:
    var $160 = $138 >>> 5;
    var $161 = $rp_0 + ($160 << 2) | 0;
    var $162 = ___gmpn_lshift($161, $rp_0, $rn_1, $142);
    var $163 = $rn_1 + $160 | 0;
    if (($162 | 0) == 0) {
      var $rn_2 = $163;
      var $169 = $160;
      __label__ = 52;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    HEAP32[$rp_0 + ($163 << 2) >> 2] = $162;
    var $rn_2 = $163 + 1 | 0;
    var $169 = $160;
    __label__ = 52;
    break;
   case 52:
    var $169;
    var $rn_2;
    var $170 = $kk_0 - $138 | 0;
    var $171 = $rp_0 + ($169 << 2) | 0;
    var $172 = HEAP32[$171 >> 2];
    var $174 = ($kk_0 - 1 | 0) >>> 5;
    var $175 = $174 + 1 | 0;
    var $176 = $170 >>> 5;
    var $177 = $175 - $176 | 0;
    var $178 = $177 - 1 | 0;
    var $179 = ($178 | 0) > ($169 | 0);
    if ($179) {
      __label__ = 53;
      break;
    } else {
      var $save2_1 = $save2_0;
      __label__ = 54;
      break;
    }
   case 53:
    var $save2_1 = HEAP32[$rp_0 + ($169 + 1 << 2) >> 2];
    __label__ = 54;
    break;
   case 54:
    var $save2_1;
    var $185 = $170 & 31;
    if (($185 | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 55:
    var $188 = $up + ($176 << 2) | 0;
    var $189 = ___gmpn_rshift($rp_0, $188, $177, $185);
    __label__ = 62;
    break;
   case 56:
    if (($175 | 0) == ($176 | 0)) {
      __label__ = 62;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    var $194 = HEAPU32[$up + ($176 << 2) >> 2];
    if (($178 | 0) == 0) {
      var $__dst6_1 = $rp_0;
      var $__x8_1 = $194;
      __label__ = 61;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $200 = $174 - (($kk_0 + $137 - $135 | 0) >>> 5) | 0;
    var $__n5_0 = $178;
    var $__dst6_0 = $rp_0;
    var $__src7_0 = $up + ($176 + 1 << 2) | 0;
    var $__x8_0 = $194;
    __label__ = 59;
    break;
   case 59:
    var $__x8_0;
    var $__src7_0;
    var $__dst6_0;
    var $__n5_0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $204 = HEAP32[$__src7_0 >> 2];
    var $205 = $__n5_0 - 1 | 0;
    if (($205 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      var $__n5_0 = $205;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $__src7_0 = $__src7_0 + 4 | 0;
      var $__x8_0 = $204;
      __label__ = 59;
      break;
    }
   case 60:
    var $__dst6_1 = $rp_0 + ($200 << 2) | 0;
    var $__x8_1 = $204;
    __label__ = 61;
    break;
   case 61:
    var $__x8_1;
    var $__dst6_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    __label__ = 62;
    break;
   case 62:
    var $209 = 1 << $142;
    var $213 = HEAP32[$171 >> 2] & $209 - 1 | $172;
    HEAP32[$171 >> 2] = $213;
    if ($179) {
      __label__ = 63;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 63:
    HEAP32[$rp_0 + ($169 + 1 << 2) >> 2] = $save2_1;
    __label__ = 64;
    break;
   case 64:
    var $218 = ___gmpn_mul_1($43, $43, $wn_0, $k);
    HEAP32[$43 + ($wn_0 << 2) >> 2] = $218;
    var $222 = (($218 | 0) != 0 & 1) + $wn_0 | 0;
    if (($rn_2 | 0) < ($222 | 0)) {
      var $qn_0 = 0;
      __label__ = 66;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    var $225 = $rn_2 - $222 | 0;
    var $226 = $15 + ($225 << 2) | 0;
    ___gmpn_div_q($15, $rp_0, $rn_2, $43, $222, $scratch_0);
    var $qn_0 = ((HEAP32[$226 >> 2] | 0) != 0 & 1) + $225 | 0;
    __label__ = 66;
    break;
   case 66:
    var $qn_0;
    var $234 = (($138 - 1 | 0) >>> 5) + 1 | 0;
    if (($qn_0 | 0) > ($234 | 0)) {
      __label__ = 69;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    if (($qn_0 | 0) != ($234 | 0) | $143 ^ 1) {
      var $qn_1 = $qn_0;
      __label__ = 72;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    if (HEAPU32[$15 + ($qn_0 - 1 << 2) >> 2] >>> 0 < $209 >>> 0) {
      var $qn_1 = $qn_0;
      __label__ = 72;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 69:
    var $243 = $169 + 1 | 0;
    _memset($14, 0, ($169 << 2) + 4 | 0, 4);
    var $246 = $15 + ($169 << 2) | 0;
    HEAP32[$246 >> 2] = $209;
    var $__p_0 = $15;
    __label__ = 70;
    break;
   case 70:
    var $__p_0;
    var $249 = HEAP32[$__p_0 >> 2];
    var $250 = $249 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $250;
    if (($249 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 70;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $qn_1 = $243 - ((HEAP32[$246 >> 2] | 0) == 0 & 1) | 0;
    __label__ = 72;
    break;
   case 72:
    var $qn_1;
    if ($143) {
      __label__ = 80;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    if (($sn_0 | 0) == 0) {
      __label__ = 79;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 74:
    var $261 = $sn_0 - 1 | 0;
    var $262 = $rootp + ($169 + $261 << 2) | 0;
    var $264 = HEAPU32[$rootp + ($261 << 2) >> 2];
    if (($261 | 0) == 0) {
      var $__x15_1 = $264;
      var $__dst13_1 = $262;
      __label__ = 78;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    var $__x15_0 = $264;
    var $__src14_0 = $rootp + ($sn_0 - 2 << 2) | 0;
    var $__dst13_0 = $262;
    var $__n12_0 = $261;
    __label__ = 76;
    break;
   case 76:
    var $__n12_0;
    var $__dst13_0;
    var $__src14_0;
    var $__x15_0;
    HEAP32[$__dst13_0 >> 2] = $__x15_0;
    var $270 = HEAP32[$__src14_0 >> 2];
    var $271 = $__n12_0 - 1 | 0;
    if (($271 | 0) == 0) {
      __label__ = 77;
      break;
    } else {
      var $__x15_0 = $270;
      var $__src14_0 = $__src14_0 - 4 | 0;
      var $__dst13_0 = $__dst13_0 - 4 | 0;
      var $__n12_0 = $271;
      __label__ = 76;
      break;
    }
   case 77:
    var $__x15_1 = $270;
    var $__dst13_1 = $rootp + ($169 << 2) | 0;
    __label__ = 78;
    break;
   case 78:
    var $__dst13_1;
    var $__x15_1;
    HEAP32[$__dst13_1 >> 2] = $__x15_1;
    __label__ = 79;
    break;
   case 79:
    var $sn_1 = $169 + $sn_0 | 0;
    __label__ = 82;
    break;
   case 80:
    var $276 = $rootp + ($169 << 2) | 0;
    var $277 = ___gmpn_lshift($276, $rootp, $sn_0, $142);
    var $278 = $169 + $sn_0 | 0;
    if (($277 | 0) == 0) {
      var $sn_1 = $278;
      __label__ = 82;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 81:
    HEAP32[$rootp + ($278 << 2) >> 2] = $277;
    var $sn_1 = $278 + 1 | 0;
    __label__ = 82;
    break;
   case 82:
    var $sn_1;
    if (($234 | 0) < ($qn_1 | 0)) {
      __label__ = 83;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 83:
    ___gmp_assert_fail(STRING_TABLE.__str50 | 0, 339, STRING_TABLE.__str252 | 0);
    throw "Reached an unreachable!";
   case 84:
    var $287 = $rootp + ($169 << 2) | 0;
    var $288 = HEAP32[$287 >> 2];
    if (($qn_1 | 0) == 0) {
      __label__ = 89;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 85:
    var $291 = $qn_1 - 1 | 0;
    var $292 = HEAP32[$15 >> 2];
    if (($291 | 0) == 0) {
      var $__x19_1 = $292;
      var $__dst17_1 = $rootp;
      __label__ = 88;
      break;
    } else {
      var $__x19_0 = $292;
      var $__src18_0 = $130;
      var $__dst17_0 = $rootp;
      var $__n16_0 = $291;
      __label__ = 86;
      break;
    }
   case 86:
    var $__n16_0;
    var $__dst17_0;
    var $__src18_0;
    var $__x19_0;
    HEAP32[$__dst17_0 >> 2] = $__x19_0;
    var $296 = HEAP32[$__src18_0 >> 2];
    var $297 = $__n16_0 - 1 | 0;
    if (($297 | 0) == 0) {
      __label__ = 87;
      break;
    } else {
      var $__x19_0 = $296;
      var $__src18_0 = $__src18_0 + 4 | 0;
      var $__dst17_0 = $__dst17_0 + 4 | 0;
      var $__n16_0 = $297;
      __label__ = 86;
      break;
    }
   case 87:
    var $__x19_1 = $296;
    var $__dst17_1 = $rootp + ($291 << 2) | 0;
    __label__ = 88;
    break;
   case 88:
    var $__dst17_1;
    var $__x19_1;
    HEAP32[$__dst17_1 >> 2] = $__x19_1;
    __label__ = 89;
    break;
   case 89:
    if (($234 | 0) == ($qn_1 | 0)) {
      __label__ = 91;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 90:
    var $scevgep4950 = $rootp + ($qn_1 << 2) | 0;
    var $307 = (($135 - 1 - $137 | 0) >>> 5) + 1 - $qn_1 << 2;
    _memset($scevgep4950, 0, $307, 4);
    __label__ = 91;
    break;
   case 91:
    var $309 = HEAP32[$287 >> 2] | $288;
    HEAP32[$287 >> 2] = $309;
    var $310 = (i64Math.multiply($138, 0, $111, 0), i64Math.result[0]);
    var $311 = $170 - $310 | 0;
    var $312 = $311 & 31;
    var $314 = $311 >>> 5;
    if (($312 | 0) == 0) {
      __label__ = 93;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 92:
    var $316 = $up + ($314 << 2) | 0;
    var $317 = $un - $314 | 0;
    var $318 = ___gmpn_rshift($rp_0, $316, $317, $312);
    var $_pre_phi = $317;
    __label__ = 99;
    break;
   case 93:
    var $_pre = $un - $314 | 0;
    if (($314 | 0) == ($un | 0)) {
      var $_pre_phi = $_pre;
      __label__ = 99;
      break;
    } else {
      __label__ = 94;
      break;
    }
   case 94:
    var $322 = $_pre - 1 | 0;
    var $324 = HEAPU32[$up + ($314 << 2) >> 2];
    if (($322 | 0) == 0) {
      var $__x25_1 = $324;
      var $__dst23_1 = $rp_0;
      __label__ = 98;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 95:
    var $330 = ($kk_0 + $137 - $135 - $310 | 0) >>> 5;
    var $__x25_0 = $324;
    var $__src24_0 = $up + ($314 + 1 << 2) | 0;
    var $__dst23_0 = $rp_0;
    var $__n22_0 = $322;
    __label__ = 96;
    break;
   case 96:
    var $__n22_0;
    var $__dst23_0;
    var $__src24_0;
    var $__x25_0;
    HEAP32[$__dst23_0 >> 2] = $__x25_0;
    var $334 = HEAP32[$__src24_0 >> 2];
    var $335 = $__n22_0 - 1 | 0;
    if (($335 | 0) == 0) {
      __label__ = 97;
      break;
    } else {
      var $__x25_0 = $334;
      var $__src24_0 = $__src24_0 + 4 | 0;
      var $__dst23_0 = $__dst23_0 + 4 | 0;
      var $__n22_0 = $335;
      __label__ = 96;
      break;
    }
   case 97:
    var $__x25_1 = $334;
    var $__dst23_1 = $rp_0 + ($44 - $330 << 2) | 0;
    __label__ = 98;
    break;
   case 98:
    var $__dst23_1;
    var $__x25_1;
    HEAP32[$__dst23_1 >> 2] = $__x25_1;
    var $_pre_phi = $_pre;
    __label__ = 99;
    break;
   case 99:
    var $_pre_phi;
    var $343 = $_pre_phi - ((HEAP32[$rp_0 + ($_pre_phi - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $344 = ($i_0 | 0) == 1;
    var $_1 = $_03;
    var $wn_1 = $222;
    var $c_0 = 0;
    __label__ = 100;
    break;
   case 100:
    var $c_0;
    var $wn_1;
    var $_1;
    if ($344) {
      __label__ = 101;
      break;
    } else {
      __label__ = 104;
      break;
    }
   case 101:
    if (($_1 | 0) == 0) {
      var $352 = 0;
      __label__ = 103;
      break;
    } else {
      __label__ = 102;
      break;
    }
   case 102:
    var $350 = HEAPU32[$rootp >> 2] >>> 0 > 1;
    var $351 = $350 & 1;
    if ($350) {
      var $_2 = $351;
      var $qn_2 = 0;
      var $wn_2 = $wn_1;
      __label__ = 105;
      break;
    } else {
      var $352 = $351;
      __label__ = 103;
      break;
    }
   case 103:
    var $352;
    var $353 = ___gmpn_pow_1($15, $rootp, $sn_1, $k, $43);
    var $_2 = $352;
    var $qn_2 = $353;
    var $wn_2 = $wn_1;
    __label__ = 105;
    break;
   case 104:
    var $355 = ___gmpn_pow_1($43, $rootp, $sn_1, $111, $15);
    var $356 = ___gmpn_mul($15, $43, $355, $rootp, $sn_1);
    var $357 = $355 + $sn_1 | 0;
    var $_2 = $_1;
    var $qn_2 = $357 - ((HEAP32[$15 + ($357 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $wn_2 = $355;
    __label__ = 105;
    break;
   case 105:
    var $wn_2;
    var $qn_2;
    var $_2;
    if (($qn_2 | 0) > ($343 | 0)) {
      var $__p27_0 = $rootp;
      __label__ = 108;
      break;
    } else {
      __label__ = 106;
      break;
    }
   case 106:
    if (($qn_2 | 0) == ($343 | 0)) {
      __label__ = 107;
      break;
    } else {
      __label__ = 111;
      break;
    }
   case 107:
    var $369 = ___gmpn_cmp($15, $rp_0, $343);
    if (($369 | 0) > 0) {
      var $__p27_0 = $rootp;
      __label__ = 108;
      break;
    } else {
      __label__ = 111;
      break;
    }
   case 108:
    var $__p27_0;
    var $371 = HEAP32[$__p27_0 >> 2];
    var $372 = $371 - 1 | 0;
    HEAP32[$__p27_0 >> 2] = $372;
    if (($371 | 0) == 0) {
      __label__ = 109;
      break;
    } else {
      __label__ = 110;
      break;
    }
   case 109:
    var $__p27_0 = $__p27_0 + 4 | 0;
    __label__ = 108;
    break;
   case 110:
    var $_1 = $_2;
    var $wn_1 = $wn_2;
    var $c_0 = $c_0 + 1 | 0;
    __label__ = 100;
    break;
   case 111:
    if (($c_0 | 0) < 2) {
      __label__ = 113;
      break;
    } else {
      __label__ = 112;
      break;
    }
   case 112:
    ___gmp_assert_fail(STRING_TABLE.__str50 | 0, 392, STRING_TABLE.__str353 | 0);
    throw "Reached an unreachable!";
   case 113:
    if (($i_0 | 0) > 1 | ($_2 | 0) == 0) {
      __label__ = 114;
      break;
    } else {
      var $_03 = $_2;
      var $rn_0 = $343;
      var $sn_0 = $sn_1;
      var $wn_0 = $wn_2;
      var $save2_0 = $save2_1;
      var $kk_0 = $311;
      var $i_0 = $133;
      __label__ = 41;
      break;
    }
   case 114:
    var $384 = ___gmpn_sub($rp_0, $rp_0, $343, $15, $qn_2);
    var $rn_3 = $343;
    __label__ = 115;
    break;
   case 115:
    var $rn_3;
    if (($rn_3 | 0) > 0) {
      __label__ = 116;
      break;
    } else {
      var $_03 = $_2;
      var $rn_0 = $rn_3;
      var $sn_0 = $sn_1;
      var $wn_0 = $wn_2;
      var $save2_0 = $save2_1;
      var $kk_0 = $311;
      var $i_0 = $133;
      __label__ = 41;
      break;
    }
   case 116:
    var $388 = $rn_3 - 1 | 0;
    if ((HEAP32[$rp_0 + ($388 << 2) >> 2] | 0) == 0) {
      var $rn_3 = $388;
      __label__ = 115;
      break;
    } else {
      var $_03 = $_2;
      var $rn_0 = $rn_3;
      var $sn_0 = $sn_1;
      var $wn_0 = $wn_2;
      var $save2_0 = $save2_1;
      var $kk_0 = $311;
      var $i_0 = $133;
      __label__ = 41;
      break;
    }
   case 117:
    var $393 = HEAP32[$__tmp_marker >> 2];
    if (($393 | 0) == 0) {
      var $_0 = $rn_0;
      __label__ = 119;
      break;
    } else {
      __label__ = 118;
      break;
    }
   case 118:
    ___gmp_tmp_reentrant_free($393);
    var $_0 = $rn_0;
    __label__ = 119;
    break;
   case 119:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_rootrem_internal["X"] = 1;

function _mpn_sqrtrem1($rp, $a0) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $5 = HEAPU16[_invsqrttab + (($a0 >>> 23) - 128 << 1) >> 1] & 65535;
    var $6 = $a0 >>> 8;
    var $7 = (i64Math.multiply($5, 0, $6, 0), i64Math.result[0]);
    var $8 = $7 >>> 13;
    var $9 = $a0 << 6;
    var $10 = (i64Math.multiply($8, 0, $8, 0), i64Math.result[0]);
    var $13 = $9 - 1048576 - $10 >> 8;
    var $14 = (i64Math.multiply($13, 0, $5, 0), i64Math.result[0]);
    var $16 = ($14 >> 7) + $7 | 0;
    var $17 = $16 >>> 16;
    var $18 = (i64Math.multiply($17, 0, $17, 0), i64Math.result[0]);
    var $19 = $16 >>> 15;
    if (($18 + ($19 & 131070) | 0) >>> 0 > ($a0 - 1 | 0) >>> 0) {
      var $x2_0 = $18;
      var $x0_0 = $17;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $x2_0 = $18 + ($19 | 1) | 0;
    var $x0_0 = $17 + 1 | 0;
    __label__ = 4;
    break;
   case 4:
    var $x0_0;
    var $x2_0;
    HEAP32[$rp >> 2] = $a0 - $x2_0 | 0;
    return $x0_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_sqrtrem($sp, $rp, $np, $nn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $s0 = __stackBase__;
    var $__tmp_marker = __stackBase__ + 4;
    var $r = __stackBase__ + 8;
    if (($nn | 0) == 0) {
      var $_0 = 0;
      __label__ = 49;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = $nn - 1 | 0;
    var $5 = HEAPU32[$np + ($3 << 2) >> 2];
    if (($nn | 0) == 1 & ($5 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 4:
    var $9 = _mpn_sqrtrem1($r, $5);
    HEAP32[$sp >> 2] = $9;
    var $_pre = HEAP32[$r >> 2];
    if (($rp | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    HEAP32[$rp >> 2] = $_pre;
    __label__ = 6;
    break;
   case 6:
    var $_0 = ($_pre | 0) != 0 & 1;
    __label__ = 49;
    break;
   case 7:
    if ($5 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $18 = $5 >>> 0 < 256 ? 1 : 9;
    var $23 = $18;
    __label__ = 10;
    break;
   case 9:
    var $21 = $5 >>> 0 < 16777216 ? 17 : 25;
    var $23 = $21;
    __label__ = 10;
    break;
   case 10:
    var $23;
    var $26 = STRING_TABLE.___gmpn_clz_tab + ($5 >>> ($23 >>> 0)) | 0;
    var $29 = 33 - $23 - (HEAPU8[$26] & 255) | 0;
    var $30 = ($29 | 0) / 2 & -1;
    var $31 = $nn + 1 | 0;
    var $32 = ($31 | 0) / 2 & -1;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $33 = ($nn | 0) % 2;
    if (($33 | 0) != 0 | ($29 | 0) > 1) {
      __label__ = 11;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 11:
    var $37 = $32 << 1;
    var $38 = $32 << 3;
    if ($38 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $41 = STACKTOP;
    STACKTOP += $38;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $45 = $41;
    __label__ = 14;
    break;
   case 13:
    var $43 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $38);
    var $45 = $43;
    __label__ = 14;
    break;
   case 14:
    var $45;
    var $46 = $45;
    HEAP32[$46 >> 2] = 0;
    var $48 = $46 + ($37 - $nn << 2) | 0;
    if (($29 + 1 | 0) >>> 0 > 2) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $50 = $30 << 1;
    var $51 = ___gmpn_lshift($48, $np, $nn, $50);
    __label__ = 21;
    break;
   case 16:
    var $53 = HEAPU32[$np >> 2];
    if (($3 | 0) == 0) {
      var $__dst_1 = $48;
      var $__x_1 = $53;
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $scevgep19 = $45 + ($38 - 4) | 0;
    var $__n_0 = $3;
    var $__dst_0 = $48;
    var $np_pn2 = $np;
    var $__x_0 = $53;
    __label__ = 18;
    break;
   case 18:
    var $__x_0;
    var $np_pn2;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $np_pn2 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $58 = HEAP32[$__src_0 >> 2];
    var $59 = $__n_0 - 1 | 0;
    if (($59 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__n_0 = $59;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $np_pn2 = $__src_0;
      var $__x_0 = $58;
      __label__ = 18;
      break;
    }
   case 19:
    var $__dst_1 = $scevgep19;
    var $__x_1 = $58;
    __label__ = 20;
    break;
   case 20:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 21;
    break;
   case 21:
    var $63 = _mpn_dc_sqrtrem($sp, $46, $32);
    var $66 = (($33 << 5 | 0) / 2 & -1) + $30 | 0;
    var $70 = (1 << $66) - 1 & HEAP32[$sp >> 2];
    var $71 = $s0 | 0;
    HEAP32[$71 >> 2] = $70;
    var $72 = $70 << 1;
    var $73 = ___gmpn_addmul_1($46, $sp, $32, $72);
    var $74 = ___gmpn_submul_1($46, $71, 1, $70);
    if (($31 | 0) > 3) {
      __label__ = 22;
      break;
    } else {
      var $82 = $74;
      __label__ = 23;
      break;
    }
   case 22:
    var $78 = $45 + 4 | 0;
    var $79 = $32 - 1 | 0;
    var $80 = ___gmpn_sub_1($78, $78, $79, $74);
    var $82 = $80;
    __label__ = 23;
    break;
   case 23:
    var $82;
    var $84 = $73 + $63 - $82 | 0;
    var $85 = ___gmpn_rshift($sp, $sp, $32, $66);
    HEAP32[$46 + ($32 << 2) >> 2] = $84;
    var $_rp = ($rp | 0) == 0 ? $46 : $rp;
    var $88 = $66 << 1;
    if (($88 | 0) < 32) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $tp_0 = $46;
    var $c_0 = $88;
    var $tn_0 = $32 + 1 | 0;
    __label__ = 26;
    break;
   case 25:
    var $tp_0 = $45 + 4 | 0;
    var $c_0 = $88 - 32 | 0;
    var $tn_0 = $32;
    __label__ = 26;
    break;
   case 26:
    var $tn_0;
    var $c_0;
    var $tp_0;
    if (($c_0 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $99 = ___gmpn_rshift($_rp, $tp_0, $tn_0, $c_0);
    var $_2_ph = $_rp;
    var $rn_0_ph = $tn_0;
    __label__ = 44;
    break;
   case 28:
    if (($tn_0 | 0) == 0) {
      var $_2_ph = $_rp;
      var $rn_0_ph = 0;
      __label__ = 44;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $103 = $tn_0 - 1 | 0;
    var $104 = HEAP32[$tp_0 >> 2];
    if (($103 | 0) == 0) {
      var $__x4_1 = $104;
      var $__dst2_1 = $_rp;
      __label__ = 32;
      break;
    } else {
      var $__x4_0 = $104;
      var $tp_0_pn = $tp_0;
      var $__dst2_0 = $_rp;
      var $__n1_0 = $103;
      __label__ = 30;
      break;
    }
   case 30:
    var $__n1_0;
    var $__dst2_0;
    var $tp_0_pn;
    var $__x4_0;
    var $__src3_0 = $tp_0_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $107 = HEAP32[$__src3_0 >> 2];
    var $108 = $__n1_0 - 1 | 0;
    if (($108 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $__x4_0 = $107;
      var $tp_0_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $108;
      __label__ = 30;
      break;
    }
   case 31:
    var $__x4_1 = $107;
    var $__dst2_1 = $_rp + ($103 << 2) | 0;
    __label__ = 32;
    break;
   case 32:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $_2_ph = $_rp;
    var $rn_0_ph = $tn_0;
    __label__ = 44;
    break;
   case 33:
    if (($rp | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      var $_1 = $rp;
      __label__ = 38;
      break;
    }
   case 34:
    var $114 = $nn << 2;
    if ($114 >>> 0 < 65536) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $117 = STACKTOP;
    STACKTOP += $114;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $121 = $117;
    __label__ = 37;
    break;
   case 36:
    var $119 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $114);
    var $121 = $119;
    __label__ = 37;
    break;
   case 37:
    var $121;
    var $_1 = $121;
    __label__ = 38;
    break;
   case 38:
    var $_1;
    if (($_1 | 0) == ($np | 0)) {
      __label__ = 43;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $126 = HEAPU32[$np >> 2];
    if (($3 | 0) == 0) {
      var $__x8_1 = $126;
      var $__dst6_1 = $_1;
      __label__ = 42;
      break;
    } else {
      var $__x8_0 = $126;
      var $np_pn = $np;
      var $__dst6_0 = $_1;
      var $__n5_0 = $3;
      __label__ = 40;
      break;
    }
   case 40:
    var $__n5_0;
    var $__dst6_0;
    var $np_pn;
    var $__x8_0;
    var $__src7_0 = $np_pn + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $129 = HEAP32[$__src7_0 >> 2];
    var $130 = $__n5_0 - 1 | 0;
    if (($130 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      var $__x8_0 = $129;
      var $np_pn = $__src7_0;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $__n5_0 = $130;
      __label__ = 40;
      break;
    }
   case 41:
    var $__x8_1 = $129;
    var $__dst6_1 = $_1 + ($3 << 2) | 0;
    __label__ = 42;
    break;
   case 42:
    var $__dst6_1;
    var $__x8_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    __label__ = 43;
    break;
   case 43:
    var $134 = _mpn_dc_sqrtrem($sp, $_1, $32);
    HEAP32[$_1 + ($32 << 2) >> 2] = $134;
    var $_2_ph = $_1;
    var $rn_0_ph = $134 + $32 | 0;
    __label__ = 44;
    break;
   case 44:
    var $rn_0_ph;
    var $_2_ph;
    var $rn_0 = $rn_0_ph;
    __label__ = 45;
    break;
   case 45:
    var $rn_0;
    if (($rn_0 | 0) > 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    var $140 = $rn_0 - 1 | 0;
    if ((HEAP32[$_2_ph + ($140 << 2) >> 2] | 0) == 0) {
      var $rn_0 = $140;
      __label__ = 45;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $144 = HEAP32[$__tmp_marker >> 2];
    if (($144 | 0) == 0) {
      var $_0 = $rn_0;
      __label__ = 49;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    ___gmp_tmp_reentrant_free($144);
    var $_0 = $rn_0;
    __label__ = 49;
    break;
   case 49:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sqrtrem["X"] = 1;

function _mpn_dc_sqrtrem($sp, $np, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $np_val = HEAP32[$np >> 2];
    var $np_idx_val = HEAP32[$np + 4 >> 2];
    var $3 = _mpn_sqrtrem2($sp, $np, $np_val, $np_idx_val);
    var $c_1 = $3;
    __label__ = 12;
    break;
   case 4:
    var $5 = ($n | 0) / 2 & -1;
    var $6 = $n - $5 | 0;
    var $7 = $sp + ($5 << 2) | 0;
    var $8 = $5 << 1;
    var $9 = $np + ($8 << 2) | 0;
    var $10 = _mpn_dc_sqrtrem($7, $9, $6);
    if (($10 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $13 = ___gmpn_sub_n($9, $9, $7, $6);
    __label__ = 6;
    break;
   case 6:
    var $15 = $np + ($5 << 2) | 0;
    var $16 = ___gmpn_divrem($sp, 0, $15, $n, $7, $6);
    var $17 = $16 + $10 | 0;
    var $19 = HEAP32[$sp >> 2] & 1;
    var $20 = ___gmpn_rshift($sp, $sp, $5, 1);
    var $23 = $sp + ($5 - 1 << 2) | 0;
    var $25 = HEAP32[$23 >> 2] | $17 << 31;
    HEAP32[$23 >> 2] = $25;
    var $26 = $17 >>> 1;
    if (($19 | 0) == 0) {
      var $c_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $29 = ___gmpn_add_n($15, $15, $7, $6);
    var $c_0 = $29;
    __label__ = 8;
    break;
   case 8:
    var $c_0;
    var $31 = $np + ($n << 2) | 0;
    ___gmpn_sqr($31, $sp, $5);
    var $32 = ___gmpn_sub_n($np, $np, $31, $8);
    var $33 = $32 + $26 | 0;
    if (($5 | 0) == ($6 | 0)) {
      var $38 = $33;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $36 = ___gmpn_sub_1($9, $9, 1, $33);
    var $38 = $36;
    __label__ = 10;
    break;
   case 10:
    var $38;
    var $39 = $c_0 - $38 | 0;
    var $40 = ___gmpn_add_1($7, $7, $6, $26);
    if (($39 | 0) < 0) {
      __label__ = 11;
      break;
    } else {
      var $c_1 = $39;
      __label__ = 12;
      break;
    }
   case 11:
    var $43 = ___gmpn_addmul_1($np, $sp, $n, 2);
    var $44 = $40 << 1;
    var $45 = ___gmpn_sub_1($np, $np, $n, 1);
    var $48 = $44 + $39 + $43 - $45 | 0;
    var $49 = ___gmpn_sub_1($sp, $sp, $n, 1);
    var $c_1 = $48;
    __label__ = 12;
    break;
   case 12:
    var $c_1;
    return $c_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_dc_sqrtrem["X"] = 1;

function _mpn_sqrtrem2($sp, $rp, $np_val, $np_1_val) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = _mpn_sqrtrem1($rp, $np_1_val);
    var $2 = HEAPU32[$rp >> 2];
    if ($2 >>> 0 < $1 >>> 0) {
      var $qhl_0_lcssa = 0;
      var $rp0_0_lcssa = $2;
      __label__ = 4;
      break;
    } else {
      var $qhl_04 = 0;
      var $rp0_05 = $2;
      __label__ = 3;
      break;
    }
   case 3:
    var $rp0_05;
    var $qhl_04;
    var $4 = $qhl_04 + 1 | 0;
    var $5 = $rp0_05 - $1 | 0;
    if ($5 >>> 0 < $1 >>> 0) {
      var $qhl_0_lcssa = $4;
      var $rp0_0_lcssa = $5;
      __label__ = 4;
      break;
    } else {
      var $qhl_04 = $4;
      var $rp0_05 = $5;
      __label__ = 3;
      break;
    }
   case 4:
    var $rp0_0_lcssa;
    var $qhl_0_lcssa;
    var $9 = $rp0_0_lcssa << 16 | $np_val >>> 16;
    var $10 = $1 << 1;
    var $11 = Math.floor(($9 >>> 0) / ($10 >>> 0));
    var $12 = (i64Math.multiply($11, 0, $10, 0), i64Math.result[0]);
    var $13 = $9 - $12 | 0;
    var $16 = $11 + ($qhl_0_lcssa << 15 & 32768) | 0;
    var $17 = $qhl_0_lcssa >>> 1;
    var $20 = $16 + ($17 + $1 << 16) | 0;
    var $21 = $13 >>> 16;
    var $24 = $13 << 16 | $np_val & 65535;
    var $25 = (i64Math.multiply($16, 0, $16, 0), i64Math.result[0]);
    var $27 = $21 - $17 + (($24 >>> 0 < $25 >>> 0) << 31 >> 31) | 0;
    var $28 = $24 - $25 | 0;
    if (($27 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      var $cc_1 = $27;
      var $rp0_2 = $28;
      var $sp0_0 = $20;
      __label__ = 8;
      break;
    }
   case 5:
    if (($20 | 0) == 0) {
      var $_pn = 1;
      var $rp0_1 = $28;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $uadd1 = _llvm_uadd_with_overflow_i32($28, $20);
    var $33 = $uadd1.f0;
    var $34 = $uadd1.f1;
    var $_pn = $34 & 1;
    var $rp0_1 = $33;
    __label__ = 7;
    break;
   case 7:
    var $rp0_1;
    var $_pn;
    var $37 = $20 - 1 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($rp0_1, $37);
    var $38 = $uadd.f0;
    var $39 = $uadd.f1;
    var $cc_1 = $_pn + $27 + ($39 & 1) | 0;
    var $rp0_2 = $38;
    var $sp0_0 = $37;
    __label__ = 8;
    break;
   case 8:
    var $sp0_0;
    var $rp0_2;
    var $cc_1;
    HEAP32[$rp >> 2] = $rp0_2;
    HEAP32[$sp >> 2] = $sp0_0;
    return $cc_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_sqrtrem2["X"] = 1;

function ___gmpn_get_str($str, $base, $up, $un) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 776;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $big_base = __stackBase__;
    var $powtab = __stackBase__ + 4;
    var $__tmp_marker = __stackBase__ + 644;
    var $exptab = __stackBase__ + 648;
    if (($un | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP8[$str] = 0;
    var $_0 = 1;
    __label__ = 36;
    break;
   case 4:
    if (($base - 1 & $base | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 5:
    var $9 = HEAPU32[___gmpn_bases + $base * 20 + 12 >> 2];
    var $10 = $un - 1 | 0;
    var $12 = HEAPU32[$up + ($10 << 2) >> 2];
    if ($12 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $16 = $12 >>> 0 < 256 ? 1 : 9;
    var $21 = $16;
    __label__ = 8;
    break;
   case 7:
    var $19 = $12 >>> 0 < 16777216 ? 17 : 25;
    var $21 = $19;
    __label__ = 8;
    break;
   case 8:
    var $21;
    var $23 = STRING_TABLE.___gmpn_clz_tab + ($12 >>> ($21 >>> 0)) | 0;
    var $29 = ($un << 5) - 33 + $21 + (HEAPU8[$23] & 255) | 0;
    var $30 = ($29 >>> 0) % ($9 >>> 0);
    if (($30 | 0) == 0) {
      var $bits_0 = $29;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $bits_0 = $9 - $30 + $29 | 0;
    __label__ = 10;
    break;
   case 10:
    var $bits_0;
    var $39 = (1 << $9) + 255 | 0;
    var $s_0 = $str;
    var $n1_0 = $12;
    var $i_0 = $10;
    var $bit_pos_0 = $bits_0 - ($10 << 5) | 0;
    __label__ = 11;
    break;
   case 11:
    var $bit_pos_0;
    var $i_0;
    var $n1_0;
    var $s_0;
    var $bit_pos_118 = $bit_pos_0 - $9 | 0;
    if (($bit_pos_118 | 0) > -1) {
      var $s_119 = $s_0;
      var $bit_pos_120 = $bit_pos_118;
      __label__ = 12;
      break;
    } else {
      var $s_1_lcssa = $s_0;
      var $bit_pos_1_lcssa = $bit_pos_118;
      __label__ = 13;
      break;
    }
   case 12:
    var $bit_pos_120;
    var $s_119;
    var $45 = $s_119 + 1 | 0;
    HEAP8[$s_119] = $n1_0 >>> ($bit_pos_120 >>> 0) & $39 & 255;
    var $bit_pos_1 = $bit_pos_120 - $9 | 0;
    if (($bit_pos_1 | 0) > -1) {
      var $s_119 = $45;
      var $bit_pos_120 = $bit_pos_1;
      __label__ = 12;
      break;
    } else {
      var $s_1_lcssa = $45;
      var $bit_pos_1_lcssa = $bit_pos_1;
      __label__ = 13;
      break;
    }
   case 13:
    var $bit_pos_1_lcssa;
    var $s_1_lcssa;
    var $47 = $i_0 - 1 | 0;
    if (($47 | 0) < 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $54 = HEAPU32[$up + ($47 << 2) >> 2];
    var $55 = $bit_pos_1_lcssa + 32 | 0;
    HEAP8[$s_1_lcssa] = ($54 >>> ($55 >>> 0) | $n1_0 << -$bit_pos_1_lcssa & $39) & 255;
    var $s_0 = $s_1_lcssa + 1 | 0;
    var $n1_0 = $54;
    var $i_0 = $47;
    var $bit_pos_0 = $55;
    __label__ = 11;
    break;
   case 15:
    var $_0 = $s_1_lcssa - $str | 0;
    __label__ = 36;
    break;
   case 16:
    if (($un | 0) > 34) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $67 = _mpn_sb_get_str($str, 0, $up, $un, $base);
    var $_0 = $67 - $str | 0;
    __label__ = 36;
    break;
   case 18:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $72 = $un + 64 | 0;
    var $73 = $72 << 2;
    var $74 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $73);
    var $75 = $74;
    var $77 = HEAPU32[___gmpn_bases + $base * 20 + 12 >> 2];
    HEAP32[$big_base >> 2] = $77;
    var $79 = HEAPU32[___gmpn_bases + $base * 20 >> 2];
    var $80 = $un | 0;
    var $81 = ___gmpn_bases + $base * 20 + 4 | 0;
    var $82 = (tempDoubleI32[0] = HEAP32[$81 >> 2], tempDoubleI32[1] = HEAP32[$81 + 4 >> 2], tempDoubleF64[0]);
    var $88 = $80 * $82 * 32 / ($79 | 0) + 1 & -1;
    var $90 = $exptab | 0;
    if (($88 | 0) == 1) {
      var $n_pows_0_lcssa = 0;
      var $_lcssa = $90;
      __label__ = 20;
      break;
    } else {
      var $n_pows_011 = 0;
      var $pn_012 = $88;
      var $91 = $90;
      __label__ = 19;
      break;
    }
   case 19:
    var $91;
    var $pn_012;
    var $n_pows_011;
    HEAP32[$91 >> 2] = $pn_012;
    var $92 = $n_pows_011 + 1 | 0;
    var $94 = $pn_012 + 1 >> 1;
    var $96 = $exptab + ($92 << 2) | 0;
    if (($94 | 0) == 1) {
      var $n_pows_0_lcssa = $92;
      var $_lcssa = $96;
      __label__ = 20;
      break;
    } else {
      var $n_pows_011 = $92;
      var $pn_012 = $94;
      var $91 = $96;
      __label__ = 19;
      break;
    }
   case 20:
    var $_lcssa;
    var $n_pows_0_lcssa;
    HEAP32[$_lcssa >> 2] = 1;
    HEAP32[$powtab >> 2] = $big_base;
    HEAP32[$powtab + 4 >> 2] = 1;
    HEAP32[$powtab + 12 >> 2] = $79;
    HEAP32[$powtab + 16 >> 2] = $base;
    HEAP32[$powtab + 8 >> 2] = 0;
    HEAP32[$powtab + 20 >> 2] = $75;
    var $104 = $74 + 8 | 0;
    HEAP32[$75 >> 2] = $77;
    HEAP32[$powtab + 24 >> 2] = 1;
    HEAP32[$powtab + 32 >> 2] = $79;
    HEAP32[$powtab + 36 >> 2] = $base;
    HEAP32[$powtab + 28 >> 2] = 0;
    var $109 = $75 + ($72 << 2) | 0;
    var $shift_0 = 0;
    var $bexp_0 = 1;
    var $powtab_mem_ptr_0 = $104;
    var $digits_in_base_0 = $79;
    var $pi_0 = 2;
    var $n_0 = 1;
    var $p_0 = $big_base;
    __label__ = 21;
    break;
   case 21:
    var $p_0;
    var $n_0;
    var $pi_0;
    var $digits_in_base_0;
    var $powtab_mem_ptr_0;
    var $bexp_0;
    var $shift_0;
    if (($pi_0 | 0) < ($n_pows_0_lcssa | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if (($n_pows_0_lcssa | 0) > 1) {
      var $pi_11 = 1;
      __label__ = 30;
      break;
    } else {
      var $pi_1_lcssa = 0;
      __label__ = 34;
      break;
    }
   case 23:
    var $114 = $n_0 << 1;
    var $116 = $powtab_mem_ptr_0 + ($114 + 2 << 2) | 0;
    if ($116 >>> 0 < $109 >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    ___gmp_assert_fail(STRING_TABLE.__str57 | 0, 474, STRING_TABLE.__str158 | 0);
    throw "Reached an unreachable!";
   case 25:
    ___gmpn_sqr($powtab_mem_ptr_0, $p_0, $n_0);
    var $120 = $digits_in_base_0 << 1;
    var $126 = $114 - ((HEAP32[$powtab_mem_ptr_0 + ($114 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $127 = $bexp_0 << 1;
    var $128 = $127 | 1;
    if (($128 | 0) < (HEAP32[$exptab + ($n_pows_0_lcssa - $pi_0 << 2) >> 2] | 0)) {
      __label__ = 26;
      break;
    } else {
      var $bexp_1 = $127;
      var $digits_in_base_1 = $120;
      var $n_1 = $126;
      __label__ = 27;
      break;
    }
   case 26:
    var $134 = $79 + $120 | 0;
    var $135 = HEAP32[$big_base >> 2];
    var $136 = ___gmpn_mul_1($powtab_mem_ptr_0, $powtab_mem_ptr_0, $126, $135);
    var $137 = $powtab_mem_ptr_0 + ($126 << 2) | 0;
    HEAP32[$137 >> 2] = $136;
    var $bexp_1 = $128;
    var $digits_in_base_1 = $134;
    var $n_1 = (($136 | 0) != 0 & 1) + $126 | 0;
    __label__ = 27;
    break;
   case 27:
    var $n_1;
    var $digits_in_base_1;
    var $bexp_1;
    var $142 = $shift_0 << 1;
    if ((HEAP32[$powtab_mem_ptr_0 >> 2] | 0) == 0) {
      var $t_02 = $powtab_mem_ptr_0;
      var $n_23 = $n_1;
      var $shift_14 = $142;
      __label__ = 28;
      break;
    } else {
      var $t_0_lcssa = $powtab_mem_ptr_0;
      var $n_2_lcssa = $n_1;
      var $shift_1_lcssa = $142;
      __label__ = 29;
      break;
    }
   case 28:
    var $shift_14;
    var $n_23;
    var $t_02;
    var $145 = $t_02 + 4 | 0;
    var $146 = $n_23 - 1 | 0;
    var $147 = $shift_14 + 1 | 0;
    if ((HEAP32[$145 >> 2] | 0) == 0) {
      var $t_02 = $145;
      var $n_23 = $146;
      var $shift_14 = $147;
      __label__ = 28;
      break;
    } else {
      var $t_0_lcssa = $145;
      var $n_2_lcssa = $146;
      var $shift_1_lcssa = $147;
      __label__ = 29;
      break;
    }
   case 29:
    var $shift_1_lcssa;
    var $n_2_lcssa;
    var $t_0_lcssa;
    HEAP32[$powtab + $pi_0 * 20 >> 2] = $t_0_lcssa;
    HEAP32[$powtab + $pi_0 * 20 + 4 >> 2] = $n_2_lcssa;
    HEAP32[$powtab + $pi_0 * 20 + 12 >> 2] = $digits_in_base_1;
    HEAP32[$powtab + $pi_0 * 20 + 16 >> 2] = $base;
    HEAP32[$powtab + $pi_0 * 20 + 8 >> 2] = $shift_1_lcssa;
    var $shift_0 = $shift_1_lcssa;
    var $bexp_0 = $bexp_1;
    var $powtab_mem_ptr_0 = $116;
    var $digits_in_base_0 = $digits_in_base_1;
    var $pi_0 = $pi_0 + 1 | 0;
    var $n_0 = $n_2_lcssa;
    var $p_0 = $t_0_lcssa;
    __label__ = 21;
    break;
   case 30:
    var $pi_11;
    var $156 = $powtab + $pi_11 * 20 | 0;
    var $157 = HEAPU32[$156 >> 2];
    var $158 = $powtab + $pi_11 * 20 + 4 | 0;
    var $159 = HEAPU32[$158 >> 2];
    var $160 = HEAP32[$big_base >> 2];
    var $161 = ___gmpn_mul_1($157, $157, $159, $160);
    HEAP32[$157 + ($159 << 2) >> 2] = $161;
    var $165 = (($161 | 0) != 0 & 1) + $159 | 0;
    if ((HEAP32[$157 >> 2] | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $n_3 = $165;
      __label__ = 32;
      break;
    }
   case 31:
    HEAP32[$156 >> 2] = $157 + 4 | 0;
    var $170 = $165 - 1 | 0;
    var $171 = $powtab + $pi_11 * 20 + 8 | 0;
    var $173 = HEAP32[$171 >> 2] + 1 | 0;
    HEAP32[$171 >> 2] = $173;
    var $n_3 = $170;
    __label__ = 32;
    break;
   case 32:
    var $n_3;
    HEAP32[$158 >> 2] = $n_3;
    var $174 = $powtab + $pi_11 * 20 + 12 | 0;
    var $176 = HEAP32[$174 >> 2] + $79 | 0;
    HEAP32[$174 >> 2] = $176;
    var $177 = $pi_11 + 1 | 0;
    if (($177 | 0) == ($n_pows_0_lcssa | 0)) {
      __label__ = 33;
      break;
    } else {
      var $pi_11 = $177;
      __label__ = 30;
      break;
    }
   case 33:
    var $pi_1_lcssa = $n_pows_0_lcssa - 1 | 0;
    __label__ = 34;
    break;
   case 34:
    var $pi_1_lcssa;
    var $181 = ($un << 2) + 128 | 0;
    var $182 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $181);
    var $183 = $182;
    var $184 = $powtab + $pi_1_lcssa * 20 | 0;
    var $185 = _mpn_dc_get_str($str, 0, $up, $un, $184, $183);
    var $188 = $185 - $str | 0;
    var $189 = HEAP32[$__tmp_marker >> 2];
    if (($189 | 0) == 0) {
      var $_0 = $188;
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    ___gmp_tmp_reentrant_free($189);
    var $_0 = $188;
    __label__ = 36;
    break;
   case 36:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_get_str["X"] = 1;

function _mpn_sb_get_str($str, $len, $up, $un, $base) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 852;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $buf = __stackBase__;
    var $rp = __stackBase__ + 712;
    if (($base | 0) == 10) {
      __label__ = 3;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 3:
    if (($un | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $s_0_lcssa = $buf + 712 | 0;
    var $_pre_phi = $rp + 4 | 0;
    __label__ = 11;
    break;
   case 5:
    var $6 = $un - 1 | 0;
    var $7 = $rp + 4 | 0;
    var $8 = HEAP32[$up >> 2];
    if (($6 | 0) == 0) {
      var $__dst_1 = $7;
      var $__x_1 = $8;
      __label__ = 8;
      break;
    } else {
      var $__n_0 = $6;
      var $__dst_0 = $7;
      var $up_pn6 = $up;
      var $__x_0 = $8;
      __label__ = 6;
      break;
    }
   case 6:
    var $__x_0;
    var $up_pn6;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $up_pn6 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $11 = HEAP32[$__src_0 >> 2];
    var $12 = $__n_0 - 1 | 0;
    if (($12 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__n_0 = $12;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $up_pn6 = $__src_0;
      var $__x_0 = $11;
      __label__ = 6;
      break;
    }
   case 7:
    var $__dst_1 = $rp + ($un << 2) | 0;
    var $__x_1 = $11;
    __label__ = 8;
    break;
   case 8:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $15 = $buf + 712 | 0;
    if (($un | 0) > 1) {
      __label__ = 9;
      break;
    } else {
      var $s_0_lcssa = $15;
      var $_pre_phi = $7;
      __label__ = 11;
      break;
    }
   case 9:
    var $17 = $rp | 0;
    var $s_038 = $15;
    var $_0239 = $un;
    __label__ = 10;
    break;
   case 10:
    var $_0239;
    var $s_038;
    var $19 = ___gmpn_preinv_divrem_1($17, 1, $7, $_0239, 1e9, 316718722, 2);
    var $21 = HEAP32[$rp + ($_0239 << 2) >> 2];
    var $23 = HEAP32[$17 >> 2] + 1 | 0;
    var $24 = $s_038 - 9 | 0;
    var $25 = $23 & 65535;
    var $26 = $23 >>> 16;
    var $27 = (i64Math.multiply($25, 0, 10, 0), i64Math.result[0]);
    var $28 = (i64Math.multiply($26, 0, 10, 0), i64Math.result[0]);
    var $uadd4 = ($27 >>> 16) + $28 | 0;
    var $32 = $s_038 - 8 | 0;
    HEAP8[$24] = $uadd4 >>> 16 & 255;
    var $33 = $27 & 65534;
    var $34 = $uadd4 & 65535;
    var $35 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $36 = (i64Math.multiply($34, 0, 10, 0), i64Math.result[0]);
    var $uadd5 = $36 + ($35 >>> 16) | 0;
    HEAP8[$32] = $uadd5 >>> 16 & 255;
    var $44 = $s_038 - 7 | 0;
    var $46 = (($uadd5 << 16 | $35 & 65532) + 15 | 0) >>> 4;
    var $47 = ($21 | 0) == 0 & 1;
    var $48 = (i64Math.multiply($46, 0, 10, 0), i64Math.result[0]);
    var $51 = $s_038 - 6 | 0;
    HEAP8[$44] = $48 >>> 28 & 255;
    var $52 = $48 & 268435454;
    var $53 = (i64Math.multiply($52, 0, 10, 0), i64Math.result[0]);
    var $56 = $s_038 - 5 | 0;
    HEAP8[$51] = $53 >>> 28 & 255;
    var $57 = $53 & 268435452;
    var $58 = (i64Math.multiply($57, 0, 10, 0), i64Math.result[0]);
    var $61 = $s_038 - 4 | 0;
    HEAP8[$56] = $58 >>> 28 & 255;
    var $62 = $58 & 268435448;
    var $63 = (i64Math.multiply($62, 0, 10, 0), i64Math.result[0]);
    var $66 = $s_038 - 3 | 0;
    HEAP8[$61] = $63 >>> 28 & 255;
    var $67 = $63 & 268435440;
    var $68 = (i64Math.multiply($67, 0, 10, 0), i64Math.result[0]);
    var $71 = $s_038 - 2 | 0;
    HEAP8[$66] = $68 >>> 28 & 255;
    var $72 = $68 & 268435424;
    var $73 = (i64Math.multiply($72, 0, 10, 0), i64Math.result[0]);
    var $76 = $s_038 - 1 | 0;
    HEAP8[$71] = $73 >>> 28 & 255;
    var $77 = $73 & 268435392;
    var $78 = (i64Math.multiply($77, 0, 10, 0), i64Math.result[0]);
    HEAP8[$76] = $78 >>> 28 & 255;
    var $81 = $_0239 - $47 | 0;
    if (($81 | 0) > 1) {
      var $s_038 = $24;
      var $_0239 = $81;
      __label__ = 10;
      break;
    } else {
      var $s_0_lcssa = $24;
      var $_pre_phi = $7;
      __label__ = 11;
      break;
    }
   case 11:
    var $_pre_phi;
    var $s_0_lcssa;
    var $83 = HEAP32[$_pre_phi >> 2];
    if (($83 | 0) == 0) {
      var $s_6 = $s_0_lcssa;
      __label__ = 28;
      break;
    } else {
      var $s_233 = $s_0_lcssa;
      var $ul_034 = $83;
      __label__ = 12;
      break;
    }
   case 12:
    var $ul_034;
    var $s_233;
    var $85 = Math.floor(($ul_034 >>> 0) / 10);
    var $86 = (i64Math.multiply($85, 0, -10, 0), i64Math.result[0]);
    var $89 = $s_233 - 1 | 0;
    HEAP8[$89] = $86 + $ul_034 & 255;
    if ($ul_034 >>> 0 < 10) {
      var $s_6 = $89;
      __label__ = 28;
      break;
    } else {
      var $s_233 = $89;
      var $ul_034 = $85;
      __label__ = 12;
      break;
    }
   case 13:
    var $93 = HEAPU32[___gmpn_bases + $base * 20 >> 2];
    var $95 = HEAPU32[___gmpn_bases + $base * 20 + 12 >> 2];
    var $97 = HEAP32[___gmpn_bases + $base * 20 + 16 >> 2];
    if ($95 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $101 = $95 >>> 0 < 256 ? 1 : 9;
    var $106 = $101;
    __label__ = 16;
    break;
   case 15:
    var $104 = $95 >>> 0 < 16777216 ? 17 : 25;
    var $106 = $104;
    __label__ = 16;
    break;
   case 16:
    var $106;
    var $108 = STRING_TABLE.___gmpn_clz_tab + ($95 >>> ($106 >>> 0)) | 0;
    var $112 = 33 - $106 - (HEAPU8[$108] & 255) | 0;
    if (($un | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $s_3_lcssa = $buf + 712 | 0;
    var $_pre_phi4 = $rp + 4 | 0;
    __label__ = 26;
    break;
   case 18:
    var $116 = $un - 1 | 0;
    var $117 = $rp + 4 | 0;
    var $118 = HEAPU32[$up >> 2];
    if (($116 | 0) == 0) {
      var $__x14_1 = $118;
      var $__dst12_1 = $117;
      __label__ = 21;
      break;
    } else {
      var $__x14_0 = $118;
      var $up_pn = $up;
      var $__dst12_0 = $117;
      var $__n11_0 = $116;
      __label__ = 19;
      break;
    }
   case 19:
    var $__n11_0;
    var $__dst12_0;
    var $up_pn;
    var $__x14_0;
    var $__src13_0 = $up_pn + 4 | 0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    var $121 = HEAP32[$__src13_0 >> 2];
    var $122 = $__n11_0 - 1 | 0;
    if (($122 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $__x14_0 = $121;
      var $up_pn = $__src13_0;
      var $__dst12_0 = $__dst12_0 + 4 | 0;
      var $__n11_0 = $122;
      __label__ = 19;
      break;
    }
   case 20:
    var $__x14_1 = $121;
    var $__dst12_1 = $rp + ($un << 2) | 0;
    __label__ = 21;
    break;
   case 21:
    var $__dst12_1;
    var $__x14_1;
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    var $125 = $buf + 712 | 0;
    if (($un | 0) > 1) {
      __label__ = 22;
      break;
    } else {
      var $s_3_lcssa = $125;
      var $_pre_phi4 = $117;
      __label__ = 26;
      break;
    }
   case 22:
    var $127 = $rp | 0;
    var $128 = -$93 | 0;
    var $129 = $base & 65535;
    var $130 = $base >>> 16;
    var $scevgep45_sum = 1 - $93 - 1 | 0;
    var $s_312 = $125;
    var $_1313 = $un;
    __label__ = 23;
    break;
   case 23:
    var $_1313;
    var $s_312;
    var $132 = ___gmpn_preinv_divrem_1($127, 1, $117, $_1313, $95, $97, $112);
    var $136 = (HEAP32[$rp + ($_1313 << 2) >> 2] | 0) == 0 & 1;
    var $s_4 = $s_312 + $128 | 0;
    var $frac16_0 = HEAP32[$127 >> 2] + 1 | 0;
    var $i15_0 = $93;
    __label__ = 24;
    break;
   case 24:
    var $i15_0;
    var $frac16_0;
    var $s_4;
    var $141 = $frac16_0 & 65535;
    var $142 = $frac16_0 >>> 16;
    var $143 = (i64Math.multiply($141, 0, $129, 0), i64Math.result[0]);
    var $144 = (i64Math.multiply($141, 0, $130, 0), i64Math.result[0]);
    var $145 = (i64Math.multiply($142, 0, $129, 0), i64Math.result[0]);
    var $146 = (i64Math.multiply($142, 0, $130, 0), i64Math.result[0]);
    var $149 = $144 + $145 + ($143 >>> 16) | 0;
    var $154 = $149 << 16 | $143 & 65535;
    HEAP8[$s_4] = ($149 >>> 16) + $146 & 255;
    var $157 = $i15_0 - 1 | 0;
    if (($157 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      var $s_4 = $s_4 + 1 | 0;
      var $frac16_0 = $154;
      var $i15_0 = $157;
      __label__ = 24;
      break;
    }
   case 25:
    var $160 = $_1313 - $136 | 0;
    var $161 = $s_312 + $scevgep45_sum | 0;
    if (($160 | 0) > 1) {
      var $s_312 = $161;
      var $_1313 = $160;
      __label__ = 23;
      break;
    } else {
      var $s_3_lcssa = $161;
      var $_pre_phi4 = $117;
      __label__ = 26;
      break;
    }
   case 26:
    var $_pre_phi4;
    var $s_3_lcssa;
    var $163 = HEAP32[$_pre_phi4 >> 2];
    if (($163 | 0) == 0) {
      var $s_6 = $s_3_lcssa;
      __label__ = 28;
      break;
    } else {
      var $s_510 = $s_3_lcssa;
      var $ul_111 = $163;
      __label__ = 27;
      break;
    }
   case 27:
    var $ul_111;
    var $s_510;
    var $165 = Math.floor(($ul_111 >>> 0) / ($base >>> 0));
    var $166 = (i64Math.multiply($165, 0, $base, 0), i64Math.result[0]);
    var $169 = $s_510 - 1 | 0;
    HEAP8[$169] = $ul_111 - $166 & 255;
    if (($165 | 0) == 0) {
      var $s_6 = $169;
      __label__ = 28;
      break;
    } else {
      var $s_510 = $169;
      var $ul_111 = $165;
      __label__ = 27;
      break;
    }
   case 28:
    var $s_6;
    var $171 = $buf + 712 | 0;
    var $172 = $171;
    var $173 = $s_6;
    var $174 = $172 - $173 | 0;
    if ($174 >>> 0 < $len >>> 0) {
      __label__ = 29;
      break;
    } else {
      var $_0_lcssa = $str;
      __label__ = 30;
      break;
    }
   case 29:
    var $177 = $173 + $len - $172 | 0;
    _memset($str, 0, $177, 1);
    var $_0_lcssa = $str + $177 | 0;
    __label__ = 30;
    break;
   case 30:
    var $_0_lcssa;
    if (($171 | 0) == ($s_6 | 0)) {
      var $_1_lcssa = $_0_lcssa;
      __label__ = 34;
      break;
    } else {
      var $l_021 = $174;
      var $s_722 = $s_6;
      var $_123 = $_0_lcssa;
      __label__ = 31;
      break;
    }
   case 31:
    var $_123;
    var $s_722;
    var $l_021;
    var $179 = HEAP8[$s_722];
    HEAP8[$_123] = $179;
    var $180 = $l_021 - 1 | 0;
    if (($180 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $l_021 = $180;
    var $s_722 = $s_722 + 1 | 0;
    var $_123 = $_123 + 1 | 0;
    __label__ = 31;
    break;
   case 33:
    var $_1_lcssa = $_0_lcssa + $174 | 0;
    __label__ = 34;
    break;
   case 34:
    var $_1_lcssa;
    STACKTOP = __stackBase__;
    return $_1_lcssa;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_sb_get_str["X"] = 1;

function _mpn_dc_get_str($str, $len, $up, $un, $powtab, $tmp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $powtab_tr_ph = $powtab;
    var $un_tr_ph = $un;
    var $len_tr_ph = $len;
    var $str_tr_ph = $str;
    __label__ = 3;
    break;
   case 3:
    var $str_tr_ph;
    var $len_tr_ph;
    var $un_tr_ph;
    var $powtab_tr_ph;
    var $1 = ($un_tr_ph | 0) > 17;
    var $powtab_tr = $powtab_tr_ph;
    __label__ = 4;
    break;
   case 4:
    var $powtab_tr;
    if ($1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($un_tr_ph | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    if (($len_tr_ph | 0) == 0) {
      var $_1 = $str_tr_ph;
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 7:
    var $7 = HEAP32[$powtab_tr + 16 >> 2];
    var $8 = _mpn_sb_get_str($str_tr_ph, $len_tr_ph, $up, $un_tr_ph, $7);
    var $_1 = $8;
    __label__ = 16;
    break;
   case 8:
    var $11 = HEAP32[$powtab_tr >> 2];
    var $13 = HEAP32[$powtab_tr + 4 >> 2];
    var $15 = HEAP32[$powtab_tr + 8 >> 2];
    var $16 = $15 + $13 | 0;
    if (($16 | 0) > ($un_tr_ph | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $20 = $up + ($15 << 2) | 0;
    var $21 = $un_tr_ph - $15 | 0;
    if (($16 | 0) == ($un_tr_ph | 0)) {
      __label__ = 10;
      break;
    } else {
      var $_pre_phi = $20;
      var $_pre_phi3 = $21;
      __label__ = 12;
      break;
    }
   case 10:
    var $23 = ___gmpn_cmp($20, $11, $21);
    if (($23 | 0) < 0) {
      __label__ = 11;
      break;
    } else {
      var $_pre_phi = $20;
      var $_pre_phi3 = $21;
      __label__ = 12;
      break;
    }
   case 11:
    var $powtab_tr = $powtab_tr - 20 | 0;
    __label__ = 4;
    break;
   case 12:
    var $_pre_phi3;
    var $_pre_phi;
    ___gmpn_tdiv_qr($tmp, $_pre_phi, 0, $_pre_phi, $_pre_phi3, $11, $13);
    var $27 = $_pre_phi3 - $13 | 0;
    var $32 = ((HEAP32[$tmp + ($27 << 2) >> 2] | 0) != 0 & 1) + $27 | 0;
    var $_pre4 = $powtab_tr + 12 | 0;
    if (($len_tr_ph | 0) == 0) {
      var $_12 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $_12 = $len_tr_ph - HEAP32[$_pre4 >> 2] | 0;
    __label__ = 14;
    break;
   case 14:
    var $_12;
    var $37 = $powtab_tr - 20 | 0;
    var $38 = $tmp + ($32 << 2) | 0;
    var $39 = _mpn_dc_get_str($str_tr_ph, $_12, $tmp, $32, $37, $38);
    var $powtab_tr_ph = $37;
    var $un_tr_ph = $16;
    var $len_tr_ph = HEAP32[$_pre4 >> 2];
    var $str_tr_ph = $39;
    __label__ = 3;
    break;
   case 15:
    _memset($str_tr_ph, 0, $len_tr_ph, 1);
    var $_1 = $str_tr_ph + $len_tr_ph | 0;
    __label__ = 16;
    break;
   case 16:
    var $_1;
    return $_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_dc_get_str["X"] = 1;

function ___gmpn_set_str($rp, $str, $str_len, $base) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 644;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $powtab = __stackBase__;
    var $__tmp_marker = __stackBase__ + 640;
    if (($base - 1 & $base | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 3:
    var $6 = HEAP32[___gmpn_bases + $base * 20 + 12 >> 2];
    var $_sum = $str_len - 1 | 0;
    if (($_sum | 0) < 0) {
      var $_0 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $s_01 = $str + $_sum | 0;
    var $next_bitpos_02 = 0;
    var $res_digit_03 = 0;
    var $size_04 = 0;
    __label__ = 5;
    break;
   case 5:
    var $size_04;
    var $res_digit_03;
    var $next_bitpos_02;
    var $s_01;
    var $11 = HEAPU8[$s_01] & 255;
    var $13 = $11 << $next_bitpos_02 | $res_digit_03;
    var $14 = $next_bitpos_02 + $6 | 0;
    if (($14 | 0) > 31) {
      __label__ = 6;
      break;
    } else {
      var $size_1 = $size_04;
      var $res_digit_1 = $13;
      var $next_bitpos_1 = $14;
      __label__ = 7;
      break;
    }
   case 6:
    HEAP32[$rp + ($size_04 << 2) >> 2] = $13;
    var $19 = $14 - 32 | 0;
    var $size_1 = $size_04 + 1 | 0;
    var $res_digit_1 = $11 >>> (($6 - $19 | 0) >>> 0);
    var $next_bitpos_1 = $19;
    __label__ = 7;
    break;
   case 7:
    var $next_bitpos_1;
    var $res_digit_1;
    var $size_1;
    var $23 = $s_01 - 1 | 0;
    if ($23 >>> 0 < $str >>> 0) {
      __label__ = 8;
      break;
    } else {
      var $s_01 = $23;
      var $next_bitpos_02 = $next_bitpos_1;
      var $res_digit_03 = $res_digit_1;
      var $size_04 = $size_1;
      __label__ = 5;
      break;
    }
   case 8:
    if (($res_digit_1 | 0) == 0) {
      var $_0 = $size_1;
      __label__ = 14;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$rp + ($size_1 << 2) >> 2] = $res_digit_1;
    var $_0 = $size_1 + 1 | 0;
    __label__ = 14;
    break;
   case 10:
    if ($str_len >>> 0 > 1999) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $32 = ___gmpn_bc_set_str($rp, $str, $str_len, $base);
    var $_0 = $32;
    __label__ = 14;
    break;
   case 12:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $35 = HEAPU32[___gmpn_bases + $base * 20 >> 2];
    var $36 = Math.floor(($str_len >>> 0) / ($35 >>> 0));
    var $37 = $36 + 1 | 0;
    var $39 = ($36 << 2) + 132 | 0;
    var $40 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $39);
    var $41 = $40;
    var $42 = $powtab | 0;
    ___gmpn_set_str_compute_powtab($42, $41, $37, $base);
    var $43 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $39);
    var $44 = $43;
    var $45 = ___gmpn_dc_set_str($rp, $str, $str_len, $42, $44);
    var $46 = HEAP32[$__tmp_marker >> 2];
    if (($46 | 0) == 0) {
      var $_0 = $45;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmp_tmp_reentrant_free($46);
    var $_0 = $45;
    __label__ = 14;
    break;
   case 14:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_set_str["X"] = 1;

function ___gmpn_bc_set_str($rp, $str, $str_len, $base) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[___gmpn_bases + $base * 20 + 12 >> 2];
    var $4 = HEAPU32[___gmpn_bases + $base * 20 >> 2];
    var $6 = $str + 1 | 0;
    var $8 = HEAPU8[$str] & 255;
    var $9 = ($base | 0) == 10;
    if ($4 >>> 0 < $str_len >>> 0) {
      __label__ = 3;
      break;
    } else {
      var $size_0_lcssa = 0;
      var $_pn = $4;
      var $_lcssa = $6;
      var $_lcssa29 = $8;
      __label__ = 15;
      break;
    }
   case 3:
    var $j_122 = $4 - 1 | 0;
    var $10 = ($j_122 | 0) == 0;
    var $i_032 = $4;
    var $size_033 = 0;
    var $13 = $6;
    var $12 = $8;
    __label__ = 4;
    break;
   case 4:
    var $12;
    var $13;
    var $size_033;
    var $i_032;
    if ($9) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ($10) {
      var $res_digit_2 = $12;
      var $_3 = $13;
      __label__ = 9;
      break;
    } else {
      var $_223 = $13;
      var $res_digit_124 = $12;
      var $j_125 = $j_122;
      __label__ = 7;
      break;
    }
   case 6:
    var $14 = (i64Math.multiply($12, 0, 10, 0), i64Math.result[0]);
    var $15 = $13 + 1 | 0;
    var $18 = (HEAPU8[$13] & 255) + $14 | 0;
    var $19 = (i64Math.multiply($18, 0, 10, 0), i64Math.result[0]);
    var $20 = $13 + 2 | 0;
    var $23 = (HEAPU8[$15] & 255) + $19 | 0;
    var $24 = (i64Math.multiply($23, 0, 10, 0), i64Math.result[0]);
    var $25 = $13 + 3 | 0;
    var $28 = (HEAPU8[$20] & 255) + $24 | 0;
    var $29 = (i64Math.multiply($28, 0, 10, 0), i64Math.result[0]);
    var $30 = $13 + 4 | 0;
    var $33 = (HEAPU8[$25] & 255) + $29 | 0;
    var $34 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $35 = $13 + 5 | 0;
    var $38 = (HEAPU8[$30] & 255) + $34 | 0;
    var $39 = (i64Math.multiply($38, 0, 10, 0), i64Math.result[0]);
    var $40 = $13 + 6 | 0;
    var $43 = (HEAPU8[$35] & 255) + $39 | 0;
    var $44 = (i64Math.multiply($43, 0, 10, 0), i64Math.result[0]);
    var $45 = $13 + 7 | 0;
    var $48 = (HEAPU8[$40] & 255) + $44 | 0;
    var $49 = (i64Math.multiply($48, 0, 10, 0), i64Math.result[0]);
    var $res_digit_2 = (HEAPU8[$45] & 255) + $49 | 0;
    var $_3 = $13 + 8 | 0;
    __label__ = 9;
    break;
   case 7:
    var $j_125;
    var $res_digit_124;
    var $_223;
    var $53 = (i64Math.multiply($res_digit_124, 0, $base, 0), i64Math.result[0]);
    var $57 = (HEAPU8[$_223] & 255) + $53 | 0;
    var $j_1 = $j_125 - 1 | 0;
    if (($j_1 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_223 = $_223 + 1 | 0;
      var $res_digit_124 = $57;
      var $j_125 = $j_1;
      __label__ = 7;
      break;
    }
   case 8:
    var $res_digit_2 = $57;
    var $_3 = $13 + $j_122 | 0;
    __label__ = 9;
    break;
   case 9:
    var $_3;
    var $res_digit_2;
    if (($size_033 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    if (($res_digit_2 | 0) == 0) {
      var $size_1 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    HEAP32[$rp >> 2] = $res_digit_2;
    var $size_1 = 1;
    __label__ = 14;
    break;
   case 12:
    var $64 = ___gmpn_mul_1($rp, $rp, $size_033, $2);
    var $65 = ___gmpn_add_1($rp, $rp, $size_033, $res_digit_2);
    var $66 = $65 + $64 | 0;
    if (($66 | 0) == 0) {
      var $size_1 = $size_033;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    HEAP32[$rp + ($size_033 << 2) >> 2] = $66;
    var $size_1 = $size_033 + 1 | 0;
    __label__ = 14;
    break;
   case 14:
    var $size_1;
    var $72 = $i_032 + $4 | 0;
    var $74 = $_3 + 1 | 0;
    var $76 = HEAPU8[$_3] & 255;
    if ($72 >>> 0 < $str_len >>> 0) {
      var $i_032 = $72;
      var $size_033 = $size_1;
      var $13 = $74;
      var $12 = $76;
      __label__ = 4;
      break;
    } else {
      var $size_0_lcssa = $size_1;
      var $_pn = $72;
      var $_lcssa = $74;
      var $_lcssa29 = $76;
      __label__ = 15;
      break;
    }
   case 15:
    var $_lcssa29;
    var $_lcssa;
    var $_pn;
    var $size_0_lcssa;
    if ($9) {
      __label__ = 16;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 16:
    if (($str_len + 9 - $_pn - 1 | 0) > 0) {
      __label__ = 17;
      break;
    } else {
      var $res_digit_5 = $_lcssa29;
      var $big_base_2 = 10;
      __label__ = 22;
      break;
    }
   case 17:
    var $lftr_limit44 = $_lcssa + ($str_len + 8 - $_pn) | 0;
    var $big_base_09 = 10;
    var $_410 = $_lcssa;
    var $res_digit_311 = $_lcssa29;
    __label__ = 18;
    break;
   case 18:
    var $res_digit_311;
    var $_410;
    var $big_base_09;
    var $83 = (i64Math.multiply($res_digit_311, 0, 10, 0), i64Math.result[0]);
    var $84 = $_410 + 1 | 0;
    var $87 = (HEAPU8[$_410] & 255) + $83 | 0;
    var $88 = (i64Math.multiply($big_base_09, 0, 10, 0), i64Math.result[0]);
    if (($84 | 0) == ($lftr_limit44 | 0)) {
      var $res_digit_5 = $87;
      var $big_base_2 = $88;
      __label__ = 22;
      break;
    } else {
      var $big_base_09 = $88;
      var $_410 = $84;
      var $res_digit_311 = $87;
      __label__ = 18;
      break;
    }
   case 19:
    var $90 = $4 + $str_len | 0;
    if (($90 - $_pn - 1 | 0) > 0) {
      __label__ = 20;
      break;
    } else {
      var $res_digit_5 = $_lcssa29;
      var $big_base_2 = $base;
      __label__ = 22;
      break;
    }
   case 20:
    var $lftr_limit = $_lcssa + ($90 - 1 - $_pn) | 0;
    var $big_base_12 = $base;
    var $_53 = $_lcssa;
    var $res_digit_44 = $_lcssa29;
    __label__ = 21;
    break;
   case 21:
    var $res_digit_44;
    var $_53;
    var $big_base_12;
    var $96 = (i64Math.multiply($res_digit_44, 0, $base, 0), i64Math.result[0]);
    var $97 = $_53 + 1 | 0;
    var $100 = (HEAPU8[$_53] & 255) + $96 | 0;
    var $101 = (i64Math.multiply($big_base_12, 0, $base, 0), i64Math.result[0]);
    if (($97 | 0) == ($lftr_limit | 0)) {
      var $res_digit_5 = $100;
      var $big_base_2 = $101;
      __label__ = 22;
      break;
    } else {
      var $big_base_12 = $101;
      var $_53 = $97;
      var $res_digit_44 = $100;
      __label__ = 21;
      break;
    }
   case 22:
    var $big_base_2;
    var $res_digit_5;
    if (($size_0_lcssa | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 23:
    if (($res_digit_5 | 0) == 0) {
      var $size_2 = 0;
      __label__ = 27;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP32[$rp >> 2] = $res_digit_5;
    var $size_2 = 1;
    __label__ = 27;
    break;
   case 25:
    var $107 = ___gmpn_mul_1($rp, $rp, $size_0_lcssa, $big_base_2);
    var $108 = ___gmpn_add_1($rp, $rp, $size_0_lcssa, $res_digit_5);
    var $109 = $108 + $107 | 0;
    if (($109 | 0) == 0) {
      var $size_2 = $size_0_lcssa;
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    HEAP32[$rp + ($size_0_lcssa << 2) >> 2] = $109;
    var $size_2 = $size_0_lcssa + 1 | 0;
    __label__ = 27;
    break;
   case 27:
    var $size_2;
    return $size_2;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_bc_set_str["X"] = 1;

function ___gmpn_set_str_compute_powtab($powtab, $powtab_mem, $un, $base) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[___gmpn_bases + $base * 20 >> 2];
    var $4 = HEAPU32[___gmpn_bases + $base * 20 + 12 >> 2];
    var $5 = $powtab_mem + 4 | 0;
    HEAP32[$powtab_mem >> 2] = $4;
    var $6 = $un - 1 | 0;
    if ($6 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = $6 >>> 0 < 256 ? 1 : 9;
    var $15 = $10;
    __label__ = 5;
    break;
   case 4:
    var $13 = $6 >>> 0 < 16777216 ? 17 : 25;
    var $15 = $13;
    __label__ = 5;
    break;
   case 5:
    var $15;
    var $17 = STRING_TABLE.___gmpn_clz_tab + ($6 >>> ($15 >>> 0)) | 0;
    var $21 = $15 - 33 + (HEAPU8[$17] & 255) | 0;
    var $22 = $21 + 31 | 0;
    HEAP32[$powtab + $22 * 20 >> 2] = $powtab_mem;
    HEAP32[$powtab + $22 * 20 + 4 >> 2] = 1;
    HEAP32[$powtab + $22 * 20 + 12 >> 2] = $2;
    HEAP32[$powtab + $22 * 20 + 16 >> 2] = $base;
    HEAP32[$powtab + $22 * 20 + 8 >> 2] = 0;
    var $30 = $powtab_mem + ($un + 32 << 2) | 0;
    var $33 = ($4 & -$4) - 1 | 0;
    var $shift_0 = 0;
    var $digits_in_base_0 = $2;
    var $p_0 = $powtab_mem;
    var $powtab_mem_ptr_0 = $5;
    var $n_0 = 1;
    var $pi_0 = $21 + 30 | 0;
    __label__ = 6;
    break;
   case 6:
    var $pi_0;
    var $n_0;
    var $powtab_mem_ptr_0;
    var $p_0;
    var $digits_in_base_0;
    var $shift_0;
    if (($pi_0 | 0) > -1) {
      __label__ = 7;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 7:
    var $37 = $n_0 << 1;
    var $38 = $powtab_mem_ptr_0 + ($37 << 2) | 0;
    if ($38 >>> 0 < $30 >>> 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    ___gmp_assert_fail(STRING_TABLE.__str61 | 0, 170, STRING_TABLE.__str162 | 0);
    throw "Reached an unreachable!";
   case 9:
    ___gmpn_sqr($powtab_mem_ptr_0, $p_0, $n_0);
    var $42 = $37 - 1 | 0;
    var $47 = ((HEAP32[$powtab_mem_ptr_0 + ($42 << 2) >> 2] | 0) != 0 & 1) + $42 | 0;
    var $48 = $digits_in_base_0 << 1;
    if (($6 >> $pi_0 & 2 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $digits_in_base_1 = $48;
      var $n_1 = $47;
      __label__ = 11;
      break;
    }
   case 10:
    ___gmpn_divexact_1($powtab_mem_ptr_0, $powtab_mem_ptr_0, $47, $4);
    var $digits_in_base_1 = $48 - $2 | 0;
    var $n_1 = $47 - ((HEAP32[$powtab_mem_ptr_0 + ($47 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 11;
    break;
   case 11:
    var $n_1;
    var $digits_in_base_1;
    var $shift_1 = $shift_0 << 1;
    var $t_0 = $powtab_mem_ptr_0;
    var $n_2 = $n_1;
    var $63 = HEAP32[$powtab_mem_ptr_0 >> 2];
    __label__ = 12;
    break;
   case 12:
    var $63;
    var $n_2;
    var $t_0;
    var $shift_1;
    if (($63 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 13:
    var $66 = $t_0 + 4 | 0;
    var $67 = HEAP32[$66 >> 2];
    if (($67 & $33 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $shift_1 = $shift_1 + 1 | 0;
    var $t_0 = $66;
    var $n_2 = $n_2 - 1 | 0;
    var $63 = $67;
    __label__ = 12;
    break;
   case 15:
    HEAP32[$powtab + $pi_0 * 20 >> 2] = $t_0;
    HEAP32[$powtab + $pi_0 * 20 + 4 >> 2] = $n_2;
    HEAP32[$powtab + $pi_0 * 20 + 12 >> 2] = $digits_in_base_1;
    HEAP32[$powtab + $pi_0 * 20 + 16 >> 2] = $base;
    HEAP32[$powtab + $pi_0 * 20 + 8 >> 2] = $shift_1;
    var $shift_0 = $shift_1;
    var $digits_in_base_0 = $digits_in_base_1;
    var $p_0 = $t_0;
    var $powtab_mem_ptr_0 = $38;
    var $n_0 = $n_2;
    var $pi_0 = $pi_0 - 1 | 0;
    __label__ = 6;
    break;
   case 16:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_set_str_compute_powtab["X"] = 1;

function ___gmpn_scan0($up, $starting_bit) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $starting_bit >>> 5;
    var $3 = $up + ($1 + 1 << 2) | 0;
    var $8 = -1 << ($starting_bit & 31) & (HEAP32[$up + ($1 << 2) >> 2] ^ -1);
    if (($8 | 0) == 0) {
      var $p_01 = $3;
      __label__ = 3;
      break;
    } else {
      var $alimb_0_lcssa = $8;
      var $p_0_lcssa = $3;
      __label__ = 5;
      break;
    }
   case 3:
    var $p_01;
    var $10 = $p_01 + 4 | 0;
    var $11 = HEAP32[$p_01 >> 2];
    if (($11 | 0) == -1) {
      var $p_01 = $10;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $alimb_0_lcssa = $11 ^ -1;
    var $p_0_lcssa = $10;
    __label__ = 5;
    break;
   case 5:
    var $p_0_lcssa;
    var $alimb_0_lcssa;
    var $16 = $alimb_0_lcssa & -$alimb_0_lcssa;
    if ($16 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $20 = $16 >>> 0 < 256 ? 1 : 9;
    var $25 = $20;
    __label__ = 8;
    break;
   case 7:
    var $23 = $16 >>> 0 < 16777216 ? 17 : 25;
    var $25 = $23;
    __label__ = 8;
    break;
   case 8:
    var $25;
    var $27 = STRING_TABLE.___gmpn_clz_tab + ($16 >>> ($25 >>> 0)) | 0;
    return ($p_0_lcssa - $up << 3) - 34 + $25 + (HEAPU8[$27] & 255) | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cmp_ui($u, $v_digit) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$u + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else if (($2 | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $_0 = (($v_digit | 0) != 0) << 31 >> 31;
    __label__ = 7;
    break;
   case 4:
    var $9 = HEAPU32[HEAP32[$u + 8 >> 2] >> 2];
    if ($9 >>> 0 > $v_digit >>> 0) {
      var $_0 = 1;
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $_0 = ($9 >>> 0 < $v_digit >>> 0) << 31 >> 31;
    __label__ = 7;
    break;
   case 6:
    var $15 = ($2 | 0) > 0 ? 1 : -1;
    var $_0 = $15;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_scan1($up, $starting_bit) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $starting_bit >>> 5;
    var $3 = $up + ($1 + 1 << 2) | 0;
    var $7 = HEAP32[$up + ($1 << 2) >> 2] & -1 << ($starting_bit & 31);
    if (($7 | 0) == 0) {
      var $p_01 = $3;
      __label__ = 3;
      break;
    } else {
      var $alimb_0_lcssa = $7;
      var $p_0_lcssa = $3;
      __label__ = 4;
      break;
    }
   case 3:
    var $p_01;
    var $9 = $p_01 + 4 | 0;
    var $10 = HEAP32[$p_01 >> 2];
    if (($10 | 0) == 0) {
      var $p_01 = $9;
      __label__ = 3;
      break;
    } else {
      var $alimb_0_lcssa = $10;
      var $p_0_lcssa = $9;
      __label__ = 4;
      break;
    }
   case 4:
    var $p_0_lcssa;
    var $alimb_0_lcssa;
    var $13 = $alimb_0_lcssa & -$alimb_0_lcssa;
    if ($13 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $17 = $13 >>> 0 < 256 ? 1 : 9;
    var $22 = $17;
    __label__ = 7;
    break;
   case 6:
    var $20 = $13 >>> 0 < 16777216 ? 17 : 25;
    var $22 = $20;
    __label__ = 7;
    break;
   case 7:
    var $22;
    var $24 = STRING_TABLE.___gmpn_clz_tab + ($13 >>> ($22 >>> 0)) | 0;
    return ($p_0_lcssa - $up << 3) - 34 + $22 + (HEAPU8[$24] & 255) | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_popcount($up, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $n >> 2;
    if (($1 | 0) == 0) {
      var $result_0_lcssa = 0;
      var $_0_lcssa = $up;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = $n & -4;
    var $i_02 = $1;
    var $result_03 = 0;
    var $_04 = $up;
    __label__ = 4;
    break;
   case 4:
    var $_04;
    var $result_03;
    var $i_02;
    var $5 = HEAPU32[$_04 >> 2];
    var $8 = $5 - ($5 >>> 1 & 1431655765) | 0;
    var $13 = HEAPU32[$_04 + 4 >> 2];
    var $16 = $13 - ($13 >>> 1 & 1431655765) | 0;
    var $22 = ($16 & 858993459) + ($8 & 858993459) + ($8 >>> 2 & 858993459) + ($16 >>> 2 & 858993459) | 0;
    var $27 = HEAPU32[$_04 + 8 >> 2];
    var $30 = $27 - ($27 >>> 1 & 1431655765) | 0;
    var $35 = HEAPU32[$_04 + 12 >> 2];
    var $38 = $35 - ($35 >>> 1 & 1431655765) | 0;
    var $44 = ($38 & 858993459) + ($30 & 858993459) + ($30 >>> 2 & 858993459) + ($38 >>> 2 & 858993459) | 0;
    var $50 = ($22 >>> 4 & 252645135) + ($22 & 252645135) + ($44 & 252645135) + ($44 >>> 4 & 252645135) | 0;
    var $52 = ($50 >>> 8) + $50 | 0;
    var $56 = (($52 >>> 16) + $52 & 255) + $result_03 | 0;
    var $58 = $i_02 - 1 | 0;
    if (($58 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $i_02 = $58;
      var $result_03 = $56;
      var $_04 = $_04 + 16 | 0;
      __label__ = 4;
      break;
    }
   case 5:
    var $result_0_lcssa = $56;
    var $_0_lcssa = $up + ($3 << 2) | 0;
    __label__ = 6;
    break;
   case 6:
    var $_0_lcssa;
    var $result_0_lcssa;
    var $61 = $n & 3;
    if (($61 | 0) == 0) {
      var $result_1 = $result_0_lcssa;
      __label__ = 9;
      break;
    } else {
      var $_1 = $_0_lcssa;
      var $_01 = $61;
      var $x_0 = 0;
      __label__ = 7;
      break;
    }
   case 7:
    var $x_0;
    var $_01;
    var $_1;
    var $63 = HEAPU32[$_1 >> 2];
    var $66 = $63 - ($63 >>> 1 & 1431655765) | 0;
    var $70 = ($66 >>> 2 & 858993459) + ($66 & 858993459) | 0;
    var $74 = (($70 >>> 4) + $70 & 252645135) + $x_0 | 0;
    var $76 = $_01 - 1 | 0;
    if (($76 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_1 = $_1 + 4 | 0;
      var $_01 = $76;
      var $x_0 = $74;
      __label__ = 7;
      break;
    }
   case 8:
    var $80 = ($74 >>> 8) + $74 | 0;
    var $result_1 = (($80 >>> 16) + $80 & 255) + $result_0_lcssa | 0;
    __label__ = 9;
    break;
   case 9:
    var $result_1;
    return $result_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_popcount["X"] = 1;

function ___gmpn_hamdist($up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $n >> 2;
    if (($1 | 0) == 0) {
      var $result_0_lcssa = 0;
      var $_01_lcssa = $vp;
      var $_0_lcssa = $up;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = $n & -4;
    var $scevgep = $vp + ($3 << 2) | 0;
    var $i_04 = $1;
    var $result_05 = 0;
    var $_016 = $vp;
    var $_07 = $up;
    __label__ = 4;
    break;
   case 4:
    var $_07;
    var $_016;
    var $result_05;
    var $i_04;
    var $7 = HEAP32[$_016 >> 2] ^ HEAP32[$_07 >> 2];
    var $10 = $7 - ($7 >>> 1 & 1431655765) | 0;
    var $18 = HEAP32[$_016 + 4 >> 2] ^ HEAP32[$_07 + 4 >> 2];
    var $21 = $18 - ($18 >>> 1 & 1431655765) | 0;
    var $27 = ($10 >>> 2 & 858993459) + ($10 & 858993459) + ($21 & 858993459) + ($21 >>> 2 & 858993459) | 0;
    var $35 = HEAP32[$_016 + 8 >> 2] ^ HEAP32[$_07 + 8 >> 2];
    var $38 = $35 - ($35 >>> 1 & 1431655765) | 0;
    var $46 = HEAP32[$_016 + 12 >> 2] ^ HEAP32[$_07 + 12 >> 2];
    var $49 = $46 - ($46 >>> 1 & 1431655765) | 0;
    var $55 = ($38 >>> 2 & 858993459) + ($38 & 858993459) + ($49 & 858993459) + ($49 >>> 2 & 858993459) | 0;
    var $61 = ($27 >>> 4 & 252645135) + ($27 & 252645135) + ($55 & 252645135) + ($55 >>> 4 & 252645135) | 0;
    var $63 = ($61 >>> 8) + $61 | 0;
    var $67 = (($63 >>> 16) + $63 & 255) + $result_05 | 0;
    var $70 = $i_04 - 1 | 0;
    if (($70 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $i_04 = $70;
      var $result_05 = $67;
      var $_016 = $_016 + 16 | 0;
      var $_07 = $_07 + 16 | 0;
      __label__ = 4;
      break;
    }
   case 5:
    var $result_0_lcssa = $67;
    var $_01_lcssa = $scevgep;
    var $_0_lcssa = $up + ($3 << 2) | 0;
    __label__ = 6;
    break;
   case 6:
    var $_0_lcssa;
    var $_01_lcssa;
    var $result_0_lcssa;
    var $73 = $n & 3;
    if (($73 | 0) == 0) {
      var $result_1 = $result_0_lcssa;
      __label__ = 9;
      break;
    } else {
      var $_1 = $_0_lcssa;
      var $_12 = $_01_lcssa;
      var $_03 = $73;
      var $x_0 = 0;
      __label__ = 7;
      break;
    }
   case 7:
    var $x_0;
    var $_03;
    var $_12;
    var $_1;
    var $77 = HEAP32[$_12 >> 2] ^ HEAP32[$_1 >> 2];
    var $80 = $77 - ($77 >>> 1 & 1431655765) | 0;
    var $84 = ($80 >>> 2 & 858993459) + ($80 & 858993459) | 0;
    var $88 = (($84 >>> 4) + $84 & 252645135) + $x_0 | 0;
    var $91 = $_03 - 1 | 0;
    if (($91 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_1 = $_1 + 4 | 0;
      var $_12 = $_12 + 4 | 0;
      var $_03 = $91;
      var $x_0 = $88;
      __label__ = 7;
      break;
    }
   case 8:
    var $95 = ($88 >>> 8) + $88 | 0;
    var $result_1 = (($95 >>> 16) + $95 & 255) + $result_0_lcssa | 0;
    __label__ = 9;
    break;
   case 9:
    var $result_1;
    return $result_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_hamdist["X"] = 1;

function ___gmpn_cmp($__gmp_xp, $__gmp_yp, $__gmp_size) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__gmp_i_0 = $__gmp_size;
    __label__ = 3;
    break;
   case 3:
    var $__gmp_i_0;
    var $2 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $__gmp_result_0 = 0;
      __label__ = 6;
      break;
    }
   case 4:
    var $6 = HEAPU32[$__gmp_xp + ($2 << 2) >> 2];
    var $8 = HEAPU32[$__gmp_yp + ($2 << 2) >> 2];
    if (($6 | 0) == ($8 | 0)) {
      var $__gmp_i_0 = $2;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $12 = $6 >>> 0 > $8 >>> 0 ? 1 : -1;
    var $__gmp_result_0 = $12;
    __label__ = 6;
    break;
   case 6:
    var $__gmp_result_0;
    return $__gmp_result_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_dc_set_str($rp, $str, $str_len, $powtab, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $rp9 = $rp;
    var $1 = $str_len >>> 0 > 749;
    var $powtab_tr = $powtab;
    __label__ = 3;
    break;
   case 3:
    var $powtab_tr;
    var $3 = HEAPU32[$powtab_tr + 12 >> 2];
    if ($3 >>> 0 < $str_len >>> 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ($1) {
      var $powtab_tr = $powtab_tr + 20 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $9 = HEAP32[$powtab_tr + 16 >> 2];
    var $10 = ___gmpn_bc_set_str($rp, $str, $str_len, $9);
    var $_0 = $10;
    __label__ = 24;
    break;
   case 6:
    var $12 = $str_len - $3 | 0;
    if ($12 >>> 0 > 749) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $16 = HEAP32[$powtab_tr + 16 >> 2];
    var $17 = ___gmpn_bc_set_str($tp, $str, $12, $16);
    var $hn_0 = $17;
    __label__ = 9;
    break;
   case 8:
    var $20 = ___gmpn_dc_set_str($tp, $str, $12, $powtab_tr + 20 | 0, $rp);
    var $hn_0 = $20;
    __label__ = 9;
    break;
   case 9:
    var $hn_0;
    var $23 = HEAPU32[$powtab_tr + 8 >> 2];
    var $25 = $powtab_tr + 4 | 0;
    var $26 = HEAPU32[$25 >> 2];
    if (($hn_0 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    if (($26 | 0) == (-$23 | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 11:
    var $32 = $rp + ($23 << 2) | 0;
    var $34 = HEAP32[$powtab_tr >> 2];
    if (($26 | 0) > ($hn_0 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $36 = ___gmpn_mul($32, $34, $26, $tp, $hn_0);
    __label__ = 14;
    break;
   case 13:
    var $38 = ___gmpn_mul($32, $tp, $hn_0, $34, $26);
    __label__ = 14;
    break;
   case 14:
    if (($23 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $41 = $23 << 2;
    _memset($rp9, 0, $41, 4);
    __label__ = 17;
    break;
   case 16:
    var $43 = $26 + $23 << 2;
    _memset($rp9, 0, $43, 4);
    __label__ = 17;
    break;
   case 17:
    var $45 = $str + $12 | 0;
    if ($3 >>> 0 > 749) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $49 = HEAP32[$powtab_tr + 16 >> 2];
    var $50 = ___gmpn_bc_set_str($tp, $45, $3, $49);
    var $ln_0 = $50;
    __label__ = 20;
    break;
   case 19:
    var $54 = $tp + ($23 + 1 + HEAP32[$25 >> 2] << 2) | 0;
    var $55 = ___gmpn_dc_set_str($tp, $45, $3, $powtab_tr + 20 | 0, $54);
    var $ln_0 = $55;
    __label__ = 20;
    break;
   case 20:
    var $ln_0;
    if (($ln_0 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $59 = ___gmpn_add_n($rp, $rp, $tp, $ln_0);
    var $60 = $rp + ($ln_0 << 2) | 0;
    var $61 = HEAP32[$60 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($61, $59);
    var $62 = $uadd.f0;
    HEAP32[$60 >> 2] = $62;
    var $63 = $uadd.f1;
    if ($63) {
      var $__p_0 = $60;
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $__p_0;
    var $64 = $__p_0 + 4 | 0;
    var $66 = HEAP32[$64 >> 2] + 1 | 0;
    HEAP32[$64 >> 2] = $66;
    if (($66 | 0) == 0) {
      var $__p_0 = $64;
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $70 = $23 + $hn_0 + HEAP32[$25 >> 2] | 0;
    var $_0 = $70 - ((HEAP32[$rp + ($70 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 24;
    break;
   case 24:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dc_set_str["X"] = 1;

function ___gmpn_perfect_square_p($up, $usize) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $1 = HEAPU32[$up >> 2];
    if ((1 << ($1 & 31) & HEAP32[_sq_res_0x100 + (($1 >>> 5 & 7) << 2) >> 2] | 0) == 0) {
      var $_0 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $11 = ___gmpn_mod_34lsub1($up, $usize);
    var $14 = ($11 & 16777215) + ($11 >>> 24) | 0;
    var $15 = (i64Math.multiply($14, 0, 16404389, 0), i64Math.result[0]);
    var $16 = $15 & 33554431;
    var $17 = (i64Math.multiply($16, 0, 45, 0), i64Math.result[0]);
    var $18 = $17 >>> 25;
    if ((($18 - 32 >> 31 & 440671073) + 2336 & 1 << ($18 & 31) | 0) == 0) {
      var $_0 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $28 = (i64Math.multiply($14, 0, 15790321, 0), i64Math.result[0]);
    var $29 = $28 & 33554431;
    var $30 = (i64Math.multiply($29, 0, 17, 0), i64Math.result[0]);
    if ((107287 >>> ($30 >>> 25 >>> 0) & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $36 = (i64Math.multiply($14, 0, 15486661, 0), i64Math.result[0]);
    var $37 = $36 & 33554431;
    var $38 = (i64Math.multiply($37, 0, 13, 0), i64Math.result[0]);
    if ((2533 >>> ($38 >>> 25 >>> 0) & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $44 = (i64Math.multiply($14, 0, 14380471, 0), i64Math.result[0]);
    var $45 = $44 & 33554431;
    var $46 = (i64Math.multiply($45, 0, 7, 0), i64Math.result[0]);
    if ((105 >>> ($46 >>> 25 >>> 0) & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $54 = (($usize + 1 | 0) / 2 & -1) << 2;
    if ($54 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $57 = STACKTOP;
    STACKTOP += $54;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $62 = $57;
    var $61 = 0;
    __label__ = 10;
    break;
   case 9:
    var $59 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $54);
    var $62 = $59;
    var $61 = HEAP32[$__tmp_marker >> 2];
    __label__ = 10;
    break;
   case 10:
    var $61;
    var $62;
    var $64 = ___gmpn_sqrtrem($62, 0, $up, $usize);
    var $66 = ($64 | 0) == 0 & 1;
    if (($61 | 0) == 0) {
      var $_0 = $66;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($61);
    var $_0 = $66;
    __label__ = 12;
    break;
   case 12:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_perfect_square_p["X"] = 1;

function ___gmpn_perfect_power_p($np, $nn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $g = __stackBase__;
    var $d = __stackBase__ + 4;
    var $where = __stackBase__ + 8;
    var $__tmp_marker = __stackBase__ + 12;
    HEAP32[$g >> 2] = 0;
    HEAP32[$where >> 2] = 0;
    var $nn_lobit = $nn >>> 31;
    var $_nn = ($nn | 0) < 0 ? -$nn | 0 : $nn;
    if (($_nn | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($_nn | 0) == 0) {
      var $_0 = 1;
      __label__ = 76;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if ((HEAP32[$np >> 2] | 0) == 1) {
      var $_0 = 1;
      __label__ = 76;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $7 = ___gmpn_scan1($np, 0);
    if (($7 | 0) == 0) {
      var $ncn_1 = $_nn;
      var $nc_0 = $np;
      __label__ = 22;
      break;
    } else if (($7 | 0) == 1) {
      var $_0 = 0;
      __label__ = 76;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $9 = $7 >>> 5;
    var $10 = $9 + 1 | 0;
    if (($10 | 0) == ($_nn | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 6:
    var $14 = HEAP32[$np + ($9 << 2) >> 2];
    if (($14 - 1 & $14 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    if (($nn_lobit | 0) == 0) {
      var $24 = 1;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $24 = ($7 - 1 & $7 | 0) != 0;
    __label__ = 9;
    break;
   case 9:
    var $24;
    var $ans_0_ph = $24 & 1;
    __label__ = 74;
    break;
   case 10:
    var $27 = $7 & 31;
    var $28 = $_nn - $9 | 0;
    var $29 = $28 << 2;
    if ($29 >>> 0 < 65536) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $32 = STACKTOP;
    STACKTOP += $29;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $36 = $32;
    __label__ = 13;
    break;
   case 12:
    var $34 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $29);
    var $36 = $34;
    __label__ = 13;
    break;
   case 13:
    var $36;
    var $37 = $36;
    if (($27 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $40 = $np + ($9 << 2) | 0;
    var $41 = ___gmpn_rshift($37, $40, $28, $27);
    var $ncn_0 = $28 - ((HEAP32[$37 + ($28 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 21;
    break;
   case 15:
    if (($_nn | 0) == ($9 | 0)) {
      var $ncn_0 = $28;
      __label__ = 21;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $51 = $28 - 1 | 0;
    var $53 = HEAPU32[$np + ($9 << 2) >> 2];
    if (($51 | 0) == 0) {
      var $__dst_1 = $37;
      var $__x_1 = $53;
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $scevgep = $36 + (($_nn << 2) - 4 - ($7 >>> 3 & 536870908)) | 0;
    var $__n_0 = $51;
    var $__dst_0 = $37;
    var $__src_0 = $np + ($10 << 2) | 0;
    var $__x_0 = $53;
    __label__ = 18;
    break;
   case 18:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $64 = HEAP32[$__src_0 >> 2];
    var $65 = $__n_0 - 1 | 0;
    if (($65 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__n_0 = $65;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $64;
      __label__ = 18;
      break;
    }
   case 19:
    var $__dst_1 = $scevgep;
    var $__x_1 = $64;
    __label__ = 20;
    break;
   case 20:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $ncn_0 = $28;
    __label__ = 21;
    break;
   case 21:
    var $ncn_0;
    HEAP32[$g >> 2] = $7;
    var $ncn_1 = $ncn_0;
    var $nc_0 = $37;
    __label__ = 22;
    break;
   case 22:
    var $nc_0;
    var $ncn_1;
    if (($ncn_1 | 0) < 21) {
      var $trial_0 = 0;
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $_3 = ($ncn_1 | 0) < 101 ? 1 : 2;
    var $trial_0 = $_3;
    __label__ = 24;
    break;
   case 24:
    var $trial_0;
    var $76 = HEAPU16[_nrtrial + ($trial_0 << 1) >> 1] & 65535;
    var $77 = ___gmpn_trialdiv($nc_0, $ncn_1, $76, $where);
    if (($77 | 0) == 0) {
      var $ncn_3 = $ncn_1;
      var $nc_2 = $nc_0;
      __label__ = 70;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $81 = $ncn_1 << 2;
    if (($7 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $nc_1 = $nc_0;
      var $_pre_phi3 = $81;
      __label__ = 36;
      break;
    }
   case 26:
    if ($81 >>> 0 < 65536) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $85 = STACKTOP;
    STACKTOP += $81;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $89 = $85;
    __label__ = 29;
    break;
   case 28:
    var $87 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $81);
    var $89 = $87;
    __label__ = 29;
    break;
   case 29:
    var $89;
    var $90 = $89;
    if (($ncn_1 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $92 = STACKTOP;
    STACKTOP += 8;
    var $108 = 8;
    var $nc_1510 = $90;
    var $_in = $92 | 0;
    __label__ = 38;
    break;
   case 31:
    var $94 = $ncn_1 - 1 | 0;
    var $95 = HEAPU32[$np >> 2];
    if (($94 | 0) == 0) {
      var $__x4_1 = $95;
      var $__dst2_1 = $90;
      __label__ = 35;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $scevgep41 = $89 + ($81 - 4) | 0;
    var $__x4_0 = $95;
    var $__n1_0 = $94;
    var $__dst2_0 = $90;
    var $np_pn = $np;
    __label__ = 33;
    break;
   case 33:
    var $np_pn;
    var $__dst2_0;
    var $__n1_0;
    var $__x4_0;
    var $__src3_0 = $np_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $100 = HEAP32[$__src3_0 >> 2];
    var $101 = $__n1_0 - 1 | 0;
    if (($101 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      var $__x4_0 = $100;
      var $__n1_0 = $101;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $np_pn = $__src3_0;
      __label__ = 33;
      break;
    }
   case 34:
    var $__x4_1 = $100;
    var $__dst2_1 = $scevgep41;
    __label__ = 35;
    break;
   case 35:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $nc_1 = $90;
    var $_pre_phi3 = $81;
    __label__ = 36;
    break;
   case 36:
    var $_pre_phi3;
    var $nc_1;
    var $104 = $_pre_phi3 + 8 | 0;
    if ($104 >>> 0 < 65536) {
      __label__ = 37;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 37:
    var $106 = STACKTOP;
    STACKTOP += $104;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $108 = $104;
    var $nc_1510 = $nc_1;
    var $_in = $106;
    __label__ = 38;
    break;
   case 38:
    var $_in;
    var $nc_1510;
    var $108;
    var $109 = STACKTOP;
    STACKTOP += $108;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $114 = $109;
    var $nc_147 = $nc_1510;
    var $_in12 = $_in;
    __label__ = 40;
    break;
   case 39:
    var $111 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $104);
    var $112 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $104);
    var $114 = $112;
    var $nc_147 = $nc_1;
    var $_in12 = $111;
    __label__ = 40;
    break;
   case 40:
    var $_in12;
    var $nc_147;
    var $114;
    var $115 = $_in12;
    var $116 = $114;
    var $117 = $ncn_1 << 4;
    if ($117 >>> 0 < 65536) {
      __label__ = 41;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 41:
    var $120 = STACKTOP;
    STACKTOP += $117;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $124 = $120;
    __label__ = 43;
    break;
   case 42:
    var $122 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $117);
    var $124 = $122;
    __label__ = 43;
    break;
   case 43:
    var $124;
    var $125 = $124;
    var $ncn_2 = $ncn_1;
    var $factor_0 = $77;
    var $prev_0 = $115;
    var $next_0 = $116;
    __label__ = 44;
    break;
   case 44:
    var $next_0;
    var $prev_0;
    var $factor_0;
    var $ncn_2;
    var $129 = STRING_TABLE.___gmp_binvert_limb_table + ($factor_0 >>> 1 & 127) | 0;
    var $131 = HEAPU8[$129] & 255;
    var $132 = $131 << 1;
    var $133 = (i64Math.multiply($131, 0, $factor_0, 0), i64Math.result[0]);
    var $134 = (i64Math.multiply($133, 0, $131, 0), i64Math.result[0]);
    var $135 = $132 - $134 | 0;
    var $136 = $135 << 1;
    var $137 = (i64Math.multiply($135, 0, $factor_0, 0), i64Math.result[0]);
    var $138 = (i64Math.multiply($137, 0, $135, 0), i64Math.result[0]);
    var $139 = $136 - $138 | 0;
    HEAP32[$d >> 2] = $139;
    HEAP32[$prev_0 >> 2] = $139;
    var $pn_0 = 1;
    var $exp_0 = 1;
    var $prev_1 = $prev_0;
    var $next_1 = $next_0;
    __label__ = 45;
    break;
   case 45:
    var $next_1;
    var $prev_1;
    var $exp_0;
    var $pn_0;
    var $141 = $pn_0 << 1;
    var $142 = $141 - 1 | 0;
    if (($142 | 0) > ($ncn_2 | 0)) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    var $_pre_phi = $exp_0 << 1;
    __label__ = 48;
    break;
   case 47:
    ___gmpn_sqr($next_1, $prev_1, $pn_0);
    var $149 = $141 - ((HEAP32[$next_1 + ($142 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $150 = ___gmpn_divisible_p($nc_147, $ncn_2, $next_1, $149);
    var $152 = $exp_0 << 1;
    if (($150 | 0) == 0) {
      var $_pre_phi = $152;
      __label__ = 48;
      break;
    } else {
      var $prev_1 = $next_1;
      var $pn_0 = $149;
      var $exp_0 = $152;
      var $next_1 = $prev_1;
      __label__ = 45;
      break;
    }
   case 48:
    var $_pre_phi;
    var $pn_1_ph = $pn_0;
    var $exp_1_ph = $exp_0;
    var $prev_2_ph = $prev_1;
    var $next_2_ph = $next_1;
    var $l_0_ph = $exp_0 + 1 | 0;
    var $r_0_ph_in = $_pre_phi;
    __label__ = 49;
    break;
   case 49:
    var $r_0_ph_in;
    var $l_0_ph;
    var $next_2_ph;
    var $prev_2_ph;
    var $exp_1_ph;
    var $pn_1_ph;
    var $r_0_ph = $r_0_ph_in - 1 | 0;
    var $pn_1 = $pn_1_ph;
    var $exp_1 = $exp_1_ph;
    var $prev_2 = $prev_2_ph;
    var $next_2 = $next_2_ph;
    var $l_0 = $l_0_ph;
    __label__ = 50;
    break;
   case 50:
    var $l_0;
    var $next_2;
    var $prev_2;
    var $exp_1;
    var $pn_1;
    if ($l_0 >>> 0 > $r_0_ph >>> 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    var $159 = ($l_0 + $r_0_ph | 0) >>> 1;
    var $160 = $159 - $exp_1 | 0;
    if ($160 >>> 0 > 1) {
      __label__ = 52;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 52:
    var $163 = ___gmpn_pow_1($125, $d, 1, $160, $next_2);
    if (($pn_1 - 1 + $163 | 0) > ($ncn_2 | 0)) {
      var $pn_1_ph = $pn_1;
      var $exp_1_ph = $exp_1;
      var $prev_2_ph = $prev_2;
      var $next_2_ph = $next_2;
      var $l_0_ph = $l_0;
      var $r_0_ph_in = $159;
      __label__ = 49;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    var $168 = ___gmpn_mul($next_2, $prev_2, $pn_1, $125, $163);
    var $169 = $163 + $pn_1 | 0;
    var $xn_0 = $169 - ((HEAP32[$next_2 + ($169 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 55;
    break;
   case 54:
    var $177 = HEAP32[$d >> 2];
    var $178 = ___gmpn_mul_1($next_2, $prev_2, $pn_1, $177);
    HEAP32[$next_2 + ($pn_1 << 2) >> 2] = $178;
    var $xn_0 = (($178 | 0) != 0 & 1) + $pn_1 | 0;
    __label__ = 55;
    break;
   case 55:
    var $xn_0;
    var $184 = ___gmpn_divisible_p($nc_147, $ncn_2, $next_2, $xn_0);
    var $186 = $159 + 1 | 0;
    if (($184 | 0) == 0) {
      var $pn_1_ph = $pn_1;
      var $exp_1_ph = $exp_1;
      var $prev_2_ph = $prev_2;
      var $next_2_ph = $next_2;
      var $l_0_ph = $l_0;
      var $r_0_ph_in = $159;
      __label__ = 49;
      break;
    } else {
      var $prev_2 = $next_2;
      var $pn_1 = $xn_0;
      var $exp_1 = $159;
      var $l_0 = $186;
      var $next_2 = $prev_2;
      __label__ = 50;
      break;
    }
   case 56:
    if ((HEAP32[$g >> 2] | 0) == 0) {
      var $storemerge = $exp_1;
      __label__ = 58;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    var $191 = ___gmpn_gcd_1($g, 1, $exp_1);
    var $storemerge = $191;
    __label__ = 58;
    break;
   case 58:
    var $storemerge;
    HEAP32[$g >> 2] = $storemerge;
    if (($storemerge | 0) == 1) {
      var $ans_0_ph = 0;
      __label__ = 74;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    ___gmpn_divexact($next_2, $nc_147, $ncn_2, $prev_2, $pn_1);
    var $195 = $ncn_2 - $pn_1 | 0;
    var $199 = (HEAP32[$next_2 + ($195 << 2) >> 2] | 0) != 0 & 1;
    var $200 = $199 + $195 | 0;
    if (($200 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $202 = $200 - 1 | 0;
    var $203 = HEAP32[$next_2 >> 2];
    if (($202 | 0) == 0) {
      var $__x10_1 = $203;
      var $__dst8_1 = $nc_147;
      __label__ = 64;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 61:
    var $205 = $ncn_2 + $199 | 0;
    var $__x10_0 = $203;
    var $next_2_pn = $next_2;
    var $__dst8_0 = $nc_147;
    var $__n7_0 = $202;
    __label__ = 62;
    break;
   case 62:
    var $__n7_0;
    var $__dst8_0;
    var $next_2_pn;
    var $__x10_0;
    var $__src9_0 = $next_2_pn + 4 | 0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $208 = HEAP32[$__src9_0 >> 2];
    var $209 = $__n7_0 - 1 | 0;
    if (($209 | 0) == 0) {
      __label__ = 63;
      break;
    } else {
      var $__x10_0 = $208;
      var $next_2_pn = $__src9_0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $209;
      __label__ = 62;
      break;
    }
   case 63:
    var $__x10_1 = $208;
    var $__dst8_1 = $nc_147 + ($205 - 1 - $pn_1 << 2) | 0;
    __label__ = 64;
    break;
   case 64:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    if (($200 | 0) == 1) {
      __label__ = 65;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 65:
    if ((HEAP32[$nc_147 >> 2] | 0) == 1) {
      __label__ = 66;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 66:
    if (($nn_lobit | 0) == 0) {
      var $223 = 1;
      __label__ = 68;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $219 = HEAP32[$g >> 2];
    var $223 = ($219 - 1 & $219 | 0) != 0;
    __label__ = 68;
    break;
   case 68:
    var $223;
    var $ans_0_ph = $223 & 1;
    __label__ = 74;
    break;
   case 69:
    var $226 = ___gmpn_trialdiv($nc_147, $200, $76, $where);
    if (($226 | 0) == 0) {
      var $ncn_3 = $200;
      var $nc_2 = $nc_147;
      __label__ = 70;
      break;
    } else {
      var $ncn_2 = $200;
      var $factor_0 = $226;
      var $prev_0 = $prev_2;
      var $next_0 = $next_2;
      __label__ = 44;
      break;
    }
   case 70:
    var $nc_2;
    var $ncn_3;
    var $230 = HEAPU32[$nc_2 + ($ncn_3 - 1 << 2) >> 2];
    if ($230 >>> 0 < 65536) {
      __label__ = 71;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 71:
    var $234 = $230 >>> 0 < 256 ? 1 : 9;
    var $239 = $234;
    __label__ = 73;
    break;
   case 72:
    var $237 = $230 >>> 0 < 16777216 ? 17 : 25;
    var $239 = $237;
    __label__ = 73;
    break;
   case 73:
    var $239;
    var $241 = STRING_TABLE.___gmpn_clz_tab + ($230 >>> ($239 >>> 0)) | 0;
    var $247 = ($ncn_3 << 5) - 33 + $239 + (HEAPU8[$241] & 255) | 0;
    var $248 = $247 >>> 0;
    var $249 = _logs + ($trial_0 << 3) | 0;
    var $250 = (tempDoubleI32[0] = HEAP32[$249 >> 2], tempDoubleI32[1] = HEAP32[$249 + 4 >> 2], tempDoubleF64[0]);
    var $252 = $248 * $250 + 1e-9;
    var $253 = $252 >= 0 ? Math.floor($252) : Math.ceil($252);
    var $254 = $253 + 1 | 0;
    HEAP32[$d >> 2] = $254;
    var $255 = HEAP32[$g >> 2];
    var $256 = _perfpow($nc_2, $ncn_3, $254, $255, $247, $nn_lobit);
    var $ans_0_ph = $256;
    __label__ = 74;
    break;
   case 74:
    var $ans_0_ph;
    var $_pr = HEAP32[$__tmp_marker >> 2];
    if (($_pr | 0) == 0) {
      var $_0 = $ans_0_ph;
      __label__ = 76;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    ___gmp_tmp_reentrant_free($_pr);
    var $_0 = $ans_0_ph;
    __label__ = 76;
    break;
   case 76:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_perfect_power_p["X"] = 1;

function _perfpow($np, $nn, $ub, $g, $f, $neg) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 532;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ps = __stackBase__;
    var $__tmp_marker = __stackBase__ + 528;
    HEAP32[$__tmp_marker >> 2] = 0;
    ___gmp_init_primesieve($ps);
    var $2 = ($f + 3 | 0) >>> 1;
    var $3 = $nn << 2;
    if ($3 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $6 = STACKTOP;
    STACKTOP += $3;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $7 = STACKTOP;
    STACKTOP += $3;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $12 = $7;
    var $_in = $6;
    __label__ = 5;
    break;
   case 4:
    var $9 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $3);
    var $10 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $3);
    var $12 = $10;
    var $_in = $9;
    __label__ = 5;
    break;
   case 5:
    var $_in;
    var $12;
    var $13 = $_in;
    var $14 = $12;
    var $15 = (i64Math.multiply($nn, 0, 20, 0), i64Math.result[0]);
    if ($15 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $18 = STACKTOP;
    STACKTOP += $15;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $22 = $18;
    __label__ = 8;
    break;
   case 7:
    var $20 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $15);
    var $22 = $20;
    __label__ = 8;
    break;
   case 8:
    var $22;
    var $23 = $22;
    if (($nn | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    _memset($12, 0, $3, 4);
    __label__ = 10;
    break;
   case 10:
    var $27 = ($2 - 1 | 0) >>> 5;
    var $28 = $27 + 1 | 0;
    ___gmpn_binvert($13, $np, $28, $23);
    var $29 = $2 & 31;
    if (($29 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $34 = $13 + ($27 << 2) | 0;
    var $36 = HEAP32[$34 >> 2] & (1 << $29) - 1;
    HEAP32[$34 >> 2] = $36;
    __label__ = 12;
    break;
   case 12:
    if (($neg | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $40 = ___gmp_nextprime($ps);
    __label__ = 14;
    break;
   case 14:
    if (($g | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $44 = $g + 1 | 0;
    var $ub_ = $44 >>> 0 > $ub >>> 0 ? $ub : $44;
    __label__ = 16;
    break;
   case 16:
    var $46 = ___gmp_nextprime($ps);
    if ($46 >>> 0 < $ub_ >>> 0) {
      __label__ = 17;
      break;
    } else {
      var $ans_0 = 0;
      __label__ = 21;
      break;
    }
   case 17:
    if ((($g >>> 0) % ($46 >>> 0) | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 18:
    var $52 = _is_kth_power($14, $np, $46, $13, $nn, $f, $23);
    if (($52 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $ans_0 = 1;
      __label__ = 21;
      break;
    }
   case 19:
    var $54 = ___gmp_nextprime($ps);
    if ($54 >>> 0 < $ub >>> 0) {
      __label__ = 20;
      break;
    } else {
      var $ans_0 = 0;
      __label__ = 21;
      break;
    }
   case 20:
    var $57 = _is_kth_power($14, $np, $54, $13, $nn, $f, $23);
    if (($57 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $ans_0 = 1;
      __label__ = 21;
      break;
    }
   case 21:
    var $ans_0;
    var $59 = HEAP32[$__tmp_marker >> 2];
    if (($59 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    ___gmp_tmp_reentrant_free($59);
    __label__ = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return $ans_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_perfpow["X"] = 1;

function _is_kth_power($rp, $np, $k, $yp, $nn, $f, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $rp4 = $rp;
    if (($k | 0) == 2) {
      __label__ = 3;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 3:
    var $3 = $f + 1 | 0;
    var $4 = $3 >>> 1;
    var $5 = $3 >>> 6;
    var $6 = $5 + 1 | 0;
    var $7 = _binv_sqroot($rp, $yp, $6, $4, $tp);
    if (($7 | 0) == 0) {
      var $__n_0_ph = $6;
      __label__ = 17;
      break;
    } else {
      var $xn_0 = $6;
      __label__ = 4;
      break;
    }
   case 4:
    var $xn_0;
    if (($xn_0 | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $11 = $xn_0 - 1 | 0;
    if ((HEAP32[$rp + ($11 << 2) >> 2] | 0) == 0) {
      var $xn_0 = $11;
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $16 = _pow_equals($np, $nn, $rp, $xn_0, 2, $f, $tp);
    if (($16 | 0) == 0) {
      var $c_01 = 0;
      var $i_02 = 0;
      __label__ = 7;
      break;
    } else {
      var $_0 = 1;
      __label__ = 18;
      break;
    }
   case 7:
    var $i_02;
    var $c_01;
    var $18 = $rp + ($i_02 << 2) | 0;
    var $19 = HEAP32[$18 >> 2];
    var $20 = -($19 + $c_01 | 0) | 0;
    HEAP32[$18 >> 2] = $20;
    var $23 = ($19 | 0) != 0 & 1 | $c_01;
    var $24 = $i_02 + 1 | 0;
    if (($24 | 0) == ($6 | 0)) {
      __label__ = 8;
      break;
    } else {
      var $c_01 = $23;
      var $i_02 = $24;
      __label__ = 7;
      break;
    }
   case 8:
    var $28 = $rp + ($5 << 2) | 0;
    var $30 = HEAP32[$28 >> 2] & (1 << ($4 & 31)) - 1;
    HEAP32[$28 >> 2] = $30;
    var $rn_0 = $6;
    __label__ = 9;
    break;
   case 9:
    var $rn_0;
    if (($rn_0 | 0) > 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $34 = $rn_0 - 1 | 0;
    if ((HEAP32[$rp + ($34 << 2) >> 2] | 0) == 0) {
      var $rn_0 = $34;
      __label__ = 9;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $39 = _pow_equals($np, $nn, $rp, $rn_0, 2, $f, $tp);
    if (($39 | 0) == 0) {
      var $rn_2 = $rn_0;
      __label__ = 16;
      break;
    } else {
      var $_0 = 1;
      __label__ = 18;
      break;
    }
   case 12:
    var $42 = $f - 1 | 0;
    var $43 = Math.floor(($42 >>> 0) / ($k >>> 0));
    var $44 = $43 + 1 | 0;
    var $46 = ($43 >>> 5) + 1 | 0;
    _binv_root($rp, $yp, $k, $46, $44, $tp);
    var $rn_1 = $46;
    __label__ = 13;
    break;
   case 13:
    var $rn_1;
    if (($rn_1 | 0) > 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $50 = $rn_1 - 1 | 0;
    if ((HEAP32[$rp + ($50 << 2) >> 2] | 0) == 0) {
      var $rn_1 = $50;
      __label__ = 13;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $55 = _pow_equals($np, $nn, $rp, $rn_1, $k, $f, $tp);
    if (($55 | 0) == 0) {
      var $rn_2 = $rn_1;
      __label__ = 16;
      break;
    } else {
      var $_0 = 1;
      __label__ = 18;
      break;
    }
   case 16:
    var $rn_2;
    if (($rn_2 | 0) == 0) {
      var $_0 = 0;
      __label__ = 18;
      break;
    } else {
      var $__n_0_ph = $rn_2;
      __label__ = 17;
      break;
    }
   case 17:
    var $__n_0_ph;
    _memset($rp4, 0, $__n_0_ph << 2, 4);
    var $_0 = 0;
    __label__ = 18;
    break;
   case 18:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_is_kth_power["X"] = 1;

function _binv_sqroot($rp, $yp, $bn, $b, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 260;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $k = __stackBase__;
    var $order = __stackBase__ + 4;
    HEAP32[$k >> 2] = 3;
    var $1 = $tp + ($bn << 2) | 0;
    var $3 = $tp + ($bn << 1 << 2) | 0;
    HEAP32[$rp >> 2] = 1;
    var $5 = HEAP32[$yp >> 2];
    if (($b | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if (($5 & 3 | 0) == 1) {
      __label__ = 10;
      break;
    } else {
      var $_0 = 0;
      __label__ = 11;
      break;
    }
   case 4:
    if (($5 & 7 | 0) == 1) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 11;
      break;
    }
   case 5:
    if (($b | 0) == 2) {
      __label__ = 10;
      break;
    } else {
      var $_015 = $b;
      var $d_06 = 0;
      __label__ = 7;
      break;
    }
   case 6:
    if (($14 | 0) > 0) {
      var $i_03_in = $14;
      var $19 = 3;
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    var $d_06;
    var $_015;
    var $14 = $d_06 + 1 | 0;
    HEAP32[$order + ($d_06 << 2) >> 2] = $_015;
    var $17 = ($_015 + 2 | 0) >>> 1;
    if (($17 | 0) == 2) {
      __label__ = 6;
      break;
    } else {
      var $_015 = $17;
      var $d_06 = $14;
      __label__ = 7;
      break;
    }
   case 8:
    var $19;
    var $i_03_in;
    var $i_03 = $i_03_in - 1 | 0;
    var $21 = HEAPU32[$order + ($i_03 << 2) >> 2];
    var $22 = $21 >>> 5;
    var $23 = $22 + 1 | 0;
    var $24 = ___gmpn_mul_1($tp, $rp, $23, $19);
    ___gmpn_powlo($1, $rp, $k, 1, $23, $3);
    ___gmpn_mullo_n($rp, $yp, $1, $23);
    var $25 = ___gmpn_sub_n($1, $tp, $rp, $23);
    var $26 = ___gmpn_rshift($rp, $1, $23, 1);
    var $30 = $rp + ($22 << 2) | 0;
    var $32 = HEAP32[$30 >> 2] & (1 << ($21 & 31)) - 1;
    HEAP32[$30 >> 2] = $32;
    if (($i_03 | 0) > 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $i_03_in = $i_03;
    var $19 = HEAP32[$k >> 2];
    __label__ = 8;
    break;
   case 10:
    var $_0 = 1;
    __label__ = 11;
    break;
   case 11:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_binv_sqroot["X"] = 1;

function _pow_equals($np, $nn, $xp, $xn, $k, $f, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __stackBase__;
    var $__tmp_marker = __stackBase__ + 4;
    HEAP32[$1 >> 2] = $k;
    if (($xn | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if ((HEAP32[$xp >> 2] | 0) == 1) {
      var $_0 = 0;
      __label__ = 22;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $8 = ($nn >> 1) + 1 | 0;
    var $bn_0 = 1;
    __label__ = 5;
    break;
   case 5:
    var $bn_0;
    if ($bn_0 >>> 0 < $8 >>> 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $12 = $tp + ($bn_0 << 2) | 0;
    ___gmpn_powlo($tp, $xp, $1, 1, $bn_0, $12);
    var $13 = ___gmpn_cmp($tp, $np, $bn_0);
    if (($13 | 0) == 0) {
      var $bn_0 = $bn_0 << 1;
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 22;
      break;
    }
   case 7:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $19 = HEAPU32[$xp + ($xn - 1 << 2) >> 2];
    if ($19 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $23 = $19 >>> 0 < 256 ? 1 : 9;
    var $28 = $23;
    __label__ = 10;
    break;
   case 9:
    var $26 = $19 >>> 0 < 16777216 ? 17 : 25;
    var $28 = $26;
    __label__ = 10;
    break;
   case 10:
    var $28;
    var $30 = STRING_TABLE.___gmpn_clz_tab + ($19 >>> ($28 >>> 0)) | 0;
    var $36 = ($xn << 5) - 34 + $28 + (HEAPU8[$30] & 255) | 0;
    var $37 = HEAPU32[$1 >> 2];
    var $38 = $37 & 65535;
    var $39 = $37 >>> 16;
    var $40 = $36 & 65535;
    var $41 = $36 >>> 16;
    var $42 = (i64Math.multiply($40, 0, $38, 0), i64Math.result[0]);
    var $43 = (i64Math.multiply($41, 0, $38, 0), i64Math.result[0]);
    var $44 = (i64Math.multiply($40, 0, $39, 0), i64Math.result[0]);
    var $45 = (i64Math.multiply($41, 0, $39, 0), i64Math.result[0]);
    var $47 = ($42 >>> 16) + $43 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($47, $44);
    var $48 = $uadd.f0;
    var $49 = $uadd.f1;
    var $__x3_0 = $49 ? $45 + 65536 | 0 : $45;
    var $55 = $42 & 65535 | $48 << 16;
    var $58 = $55 - 1 | 0;
    if (($__x3_0 + ($48 >>> 16) | 0) == (($55 | 0) == 0 & 1 | 0)) {
      __label__ = 11;
      break;
    } else {
      var $ans_0 = 0;
      __label__ = 20;
      break;
    }
   case 11:
    if ($58 >>> 0 > ($f - 1 | 0) >>> 0) {
      var $ans_0 = 0;
      __label__ = 20;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $uadd1 = _llvm_uadd_with_overflow_i32($58, $37);
    var $64 = $uadd1.f1;
    if ($64) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    ___gmp_assert_fail(STRING_TABLE.__str69 | 0, 83, STRING_TABLE.__str170 | 0);
    throw "Reached an unreachable!";
   case 14:
    var $67 = $uadd1.f0;
    var $70 = ($67 >>> 3 & 536870908) + 8 | 0;
    if ($70 >>> 0 < 65536) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $73 = STACKTOP;
    STACKTOP += $70;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $77 = $73;
    __label__ = 17;
    break;
   case 16:
    var $75 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $70);
    var $77 = $75;
    __label__ = 17;
    break;
   case 17:
    var $77;
    var $79 = ___gmpn_pow_1($tp, $xp, $xn, $37, $77);
    if (($79 | 0) == ($nn | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $82 = ___gmpn_cmp($tp, $np, $nn);
    if (($82 | 0) == 0) {
      var $ans_0 = 1;
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $ans_0 = 0;
    __label__ = 20;
    break;
   case 20:
    var $ans_0;
    var $85 = HEAP32[$__tmp_marker >> 2];
    if (($85 | 0) == 0) {
      var $_0 = $ans_0;
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    ___gmp_tmp_reentrant_free($85);
    var $_0 = $ans_0;
    __label__ = 22;
    break;
   case 22:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_pow_equals["X"] = 1;

function _mpn_zero_p71($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _binv_root($rp, $yp, $k, $bn, $b, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 260;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $k2 = __stackBase__;
    var $order = __stackBase__ + 4;
    var $1 = $tp + ($bn << 2) | 0;
    var $3 = $tp + ($bn << 1 << 2) | 0;
    var $4 = $k + 1 | 0;
    HEAP32[$k2 >> 2] = $4;
    var $7 = STRING_TABLE.___gmp_binvert_limb_table + ($k >>> 1 & 127) | 0;
    var $9 = HEAPU8[$7] & 255;
    var $10 = $9 << 1;
    var $11 = (i64Math.multiply($9, 0, $k, 0), i64Math.result[0]);
    var $12 = (i64Math.multiply($11, 0, $9, 0), i64Math.result[0]);
    var $13 = $10 - $12 | 0;
    var $14 = $13 << 1;
    var $15 = (i64Math.multiply($13, 0, $k, 0), i64Math.result[0]);
    var $16 = (i64Math.multiply($15, 0, $13, 0), i64Math.result[0]);
    var $17 = $14 - $16 | 0;
    HEAP32[$rp >> 2] = 1;
    if (($b | 0) == 1) {
      __label__ = 9;
      break;
    } else {
      var $_03 = $b;
      var $d_04 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    if (($20 | 0) > 0) {
      var $i_02_in = $20;
      var $25 = $4;
      __label__ = 5;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 4:
    var $d_04;
    var $_03;
    var $20 = $d_04 + 1 | 0;
    HEAP32[$order + ($d_04 << 2) >> 2] = $_03;
    var $23 = ($_03 + 1 | 0) >>> 1;
    if (($23 | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      var $_03 = $23;
      var $d_04 = $20;
      __label__ = 4;
      break;
    }
   case 5:
    var $25;
    var $i_02_in;
    var $i_02 = $i_02_in - 1 | 0;
    var $27 = HEAPU32[$order + ($i_02 << 2) >> 2];
    var $29 = ($27 - 1 | 0) >>> 5;
    var $30 = $29 + 1 | 0;
    var $31 = ___gmpn_mul_1($tp, $rp, $30, $25);
    ___gmpn_powlo($1, $rp, $k2, 1, $30, $3);
    ___gmpn_mullo_n($rp, $yp, $1, $30);
    var $32 = ___gmpn_sub_n($1, $tp, $rp, $30);
    var $33 = ___gmpn_pi1_bdiv_q_1($rp, $1, $30, $k, $17, 0);
    var $34 = $27 & 31;
    if (($34 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    if (($i_02 | 0) > 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 7:
    var $i_02_in = $i_02;
    var $25 = HEAP32[$k2 >> 2];
    __label__ = 5;
    break;
   case 8:
    var $40 = $rp + ($29 << 2) | 0;
    var $42 = HEAP32[$40 >> 2] & (1 << $34) - 1;
    HEAP32[$40 >> 2] = $42;
    __label__ = 6;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_binv_root["X"] = 1;

function ___gmpn_gcd($gp, $up, $usize, $vp, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $gn = __stackBase__;
    var $__tmp_marker = __stackBase__ + 4;
    var $M = __stackBase__ + 8;
    var $2 = $usize - $n + 1 | 0;
    var $_n = ($2 | 0) > ($n | 0) ? $2 : $n;
    if (($n | 0) > 999) {
      __label__ = 3;
      break;
    } else {
      var $talloc_1 = $_n;
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = ($n << 1 | 0) / 3 & -1;
    var $8 = $n - $7 | 0;
    var $11 = (($8 + 1 | 0) / 2 & -1) << 2;
    var $12 = ___gmpn_hgcd_itch($8);
    var $14 = $n - 1 + $7 | 0;
    var $16 = ($12 | 0) > ($14 | 0) ? $12 : $14;
    var $18 = $11 + 4 + $16 | 0;
    var $__n = ($18 | 0) > ($_n | 0) ? $18 : $_n;
    var $talloc_1 = $__n;
    __label__ = 4;
    break;
   case 4:
    var $talloc_1;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $21 = $talloc_1 << 2;
    if ($21 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $24 = STACKTOP;
    STACKTOP += $21;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $28 = $24;
    __label__ = 7;
    break;
   case 6:
    var $26 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $21);
    var $28 = $26;
    __label__ = 7;
    break;
   case 7:
    var $28;
    var $29 = $28;
    if (($usize | 0) > ($n | 0)) {
      __label__ = 8;
      break;
    } else {
      var $_01 = $n;
      __label__ = 16;
      break;
    }
   case 8:
    ___gmpn_tdiv_qr($29, $up, 0, $up, $usize, $vp, $n);
    var $32 = _mpn_zero_p71($up, $n);
    if (($32 | 0) == 0) {
      var $_01 = $n;
      __label__ = 16;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if (($n | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $37 = $n - 1 | 0;
    var $38 = HEAPU32[$vp >> 2];
    if (($37 | 0) == 0) {
      var $__x_1 = $38;
      var $__dst_1 = $gp;
      __label__ = 13;
      break;
    } else {
      var $__x_0 = $38;
      var $vp_pn = $vp;
      var $__dst_0 = $gp;
      var $__n_0 = $37;
      __label__ = 11;
      break;
    }
   case 11:
    var $__n_0;
    var $__dst_0;
    var $vp_pn;
    var $__x_0;
    var $__src_0 = $vp_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $41 = HEAP32[$__src_0 >> 2];
    var $42 = $__n_0 - 1 | 0;
    if (($42 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $__x_0 = $41;
      var $vp_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $42;
      __label__ = 11;
      break;
    }
   case 12:
    var $__x_1 = $41;
    var $__dst_1 = $gp + ($37 << 2) | 0;
    __label__ = 13;
    break;
   case 13:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 14;
    break;
   case 14:
    var $45 = HEAP32[$__tmp_marker >> 2];
    if (($45 | 0) == 0) {
      var $_0 = $n;
      __label__ = 25;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    ___gmp_tmp_reentrant_free($45);
    var $_0 = $n;
    __label__ = 25;
    break;
   case 16:
    var $_01;
    if (($_01 | 0) > 999) {
      __label__ = 17;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 17:
    var $51 = ($_01 << 1 | 0) / 3 & -1;
    var $52 = $_01 - $51 | 0;
    var $56 = ((($52 + 1 | 0) / 2 & -1) << 2) + 4 | 0;
    ___gmpn_hgcd_matrix_init($M, $52, $29);
    var $57 = $up + ($51 << 2) | 0;
    var $58 = $vp + ($51 << 2) | 0;
    var $59 = $29 + ($56 << 2) | 0;
    var $60 = ___gmpn_hgcd($57, $58, $52, $M, $59);
    if (($60 | 0) > 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $63 = $60 + $51 | 0;
    var $64 = ___gmpn_hgcd_matrix_adjust($M, $63, $up, $vp, $51, $59);
    var $_01 = $64;
    __label__ = 16;
    break;
   case 19:
    var $66 = ___gmpn_gcd_subdiv_step($gp, $gn, $up, $vp, $_01, $29);
    if (($66 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $_01 = $66;
      __label__ = 16;
      break;
    }
   case 20:
    var $69 = HEAP32[$__tmp_marker >> 2];
    if (($69 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    ___gmp_tmp_reentrant_free($69);
    __label__ = 22;
    break;
   case 22:
    var $_0 = HEAP32[$gn >> 2];
    __label__ = 25;
    break;
   case 23:
    var $75 = ___gmpn_gcd_lehmer_n($gp, $up, $vp, $_01, $29);
    HEAP32[$gn >> 2] = $75;
    var $76 = HEAP32[$__tmp_marker >> 2];
    if (($76 | 0) == 0) {
      var $_0 = $75;
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    ___gmp_tmp_reentrant_free($76);
    var $_0 = $75;
    __label__ = 25;
    break;
   case 25:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_gcd["X"] = 1;

function _mpn_zero_p72($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_gcdext($gp, $up, $usizep, $ap, $an, $bp, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 72;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $M = __stackBase__ + 4;
    var $gn11 = __stackBase__ + 28;
    var $updated_un = __stackBase__ + 32;
    var $M12 = __stackBase__ + 36;
    var $gn19 = __stackBase__ + 60;
    var $updated_un20 = __stackBase__ + 64;
    var $lehmer_un = __stackBase__ + 68;
    var $1 = $n + 1 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $2 = $n << 2;
    var $3 = $2 | 3;
    var $5 = $an - $n + 1 | 0;
    var $_ = ($5 | 0) > ($3 | 0) ? $5 : $3;
    var $7 = ($n | 0) > 599;
    if ($7) {
      __label__ = 3;
      break;
    } else {
      var $talloc_3 = $_;
      __label__ = 4;
      break;
    }
   case 3:
    var $9 = ($n | 0) / 2 & -1;
    var $10 = ($n | 0) / 3 & -1;
    var $12 = ($9 | 0) < ($10 | 0) ? $9 : $10;
    var $14 = ($9 | 0) > ($10 | 0) ? $9 : $10;
    var $15 = $n - $12 | 0;
    var $19 = ((($15 + 1 | 0) / 2 & -1) << 2) + 4 | 0;
    var $20 = ___gmpn_hgcd_itch($15);
    var $22 = $n - 1 + $14 | 0;
    var $24 = ($20 | 0) > ($22 | 0) ? $20 : $22;
    var $25 = $24 + $19 | 0;
    var $__ = ($25 | 0) > ($_ | 0) ? $25 : $_;
    var $talloc_2 = ($__ | 0) < 4203 ? 4203 : $__;
    var $talloc_3 = $talloc_2 + ($1 << 1) | 0;
    var $matrix_scratch_0 = $19;
    __label__ = 4;
    break;
   case 4:
    var $matrix_scratch_0;
    var $talloc_3;
    var $31 = $talloc_3 << 2;
    if ($31 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $34 = STACKTOP;
    STACKTOP += $31;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $38 = $34;
    __label__ = 7;
    break;
   case 6:
    var $36 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $31);
    var $38 = $36;
    __label__ = 7;
    break;
   case 7:
    var $38;
    var $39 = $38;
    if (($an | 0) > ($n | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 8:
    ___gmpn_tdiv_qr($39, $ap, 0, $ap, $an, $bp, $n);
    var $42 = _mpn_zero_p72($ap, $n);
    if (($42 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if (($n | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $47 = $n - 1 | 0;
    var $48 = HEAP32[$bp >> 2];
    if (($47 | 0) == 0) {
      var $__dst_1 = $gp;
      var $__x_1 = $48;
      __label__ = 13;
      break;
    } else {
      var $__n_0 = $47;
      var $__dst_0 = $gp;
      var $bp_pn20 = $bp;
      var $__x_0 = $48;
      __label__ = 11;
      break;
    }
   case 11:
    var $__x_0;
    var $bp_pn20;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $bp_pn20 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $51 = HEAP32[$__src_0 >> 2];
    var $52 = $__n_0 - 1 | 0;
    if (($52 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $__n_0 = $52;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $bp_pn20 = $__src_0;
      var $__x_0 = $51;
      __label__ = 11;
      break;
    }
   case 12:
    var $__dst_1 = $gp + ($47 << 2) | 0;
    var $__x_1 = $51;
    __label__ = 13;
    break;
   case 13:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 14;
    break;
   case 14:
    HEAP32[$usizep >> 2] = 0;
    var $55 = HEAP32[$__tmp_marker >> 2];
    if (($55 | 0) == 0) {
      var $_0 = $n;
      __label__ = 129;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    ___gmp_tmp_reentrant_free($55);
    var $_0 = $n;
    __label__ = 129;
    break;
   case 16:
    if ($7) {
      __label__ = 19;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $60 = ___gmpn_gcdext_lehmer_n($gp, $up, $usizep, $ap, $bp, $n, $39);
    var $61 = HEAP32[$__tmp_marker >> 2];
    if (($61 | 0) == 0) {
      var $_0 = $60;
      __label__ = 129;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    ___gmp_tmp_reentrant_free($61);
    var $_0 = $60;
    __label__ = 129;
    break;
   case 19:
    if (($1 & 2147483647 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $67 = ($n << 3) + 8 | 0;
    _memset($38, 0, $67, 4);
    __label__ = 21;
    break;
   case 21:
    var $69 = $39 + ($1 << 2) | 0;
    var $_sum = $1 << 1;
    var $70 = $39 + ($_sum << 2) | 0;
    var $71 = ($n | 0) / 2 & -1;
    var $72 = $n - $71 | 0;
    ___gmpn_hgcd_matrix_init($M, $72, $70);
    var $73 = $ap + ($71 << 2) | 0;
    var $74 = $bp + ($71 << 2) | 0;
    var $_sum2 = $matrix_scratch_0 + $_sum | 0;
    var $75 = $39 + ($_sum2 << 2) | 0;
    var $76 = ___gmpn_hgcd($73, $74, $72, $M, $75);
    if (($76 | 0) > 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 22:
    var $79 = $76 + $71 | 0;
    var $80 = ___gmpn_hgcd_matrix_adjust($M, $79, $ap, $bp, $71, $75);
    var $81 = $M + 4 | 0;
    var $82 = HEAP32[$81 >> 2];
    if (($82 | 0) == 0) {
      var $un_0 = $82;
      __label__ = 33;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $85 = $82 - 1 | 0;
    var $87 = HEAP32[$M + 16 >> 2];
    var $88 = HEAP32[$87 >> 2];
    if (($85 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    HEAP32[$39 >> 2] = $88;
    var $_pr5 = $82;
    __label__ = 28;
    break;
   case 25:
    var $scevgep77 = $38 + (($82 << 2) - 4) | 0;
    var $__n3_0 = $85;
    var $__dst4_0 = $39;
    var $_pn19 = $87;
    var $__x6_0 = $88;
    __label__ = 26;
    break;
   case 26:
    var $__x6_0;
    var $_pn19;
    var $__dst4_0;
    var $__n3_0;
    var $__src5_0 = $_pn19 + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    var $94 = HEAP32[$__src5_0 >> 2];
    var $95 = $__n3_0 - 1 | 0;
    if (($95 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $__n3_0 = $95;
      var $__dst4_0 = $__dst4_0 + 4 | 0;
      var $_pn19 = $__src5_0;
      var $__x6_0 = $94;
      __label__ = 26;
      break;
    }
   case 27:
    var $scevgep7778 = $scevgep77;
    var $_pr_pre = HEAP32[$81 >> 2];
    HEAP32[$scevgep7778 >> 2] = $94;
    if (($_pr_pre | 0) == 0) {
      var $un_0 = $_pr_pre;
      __label__ = 33;
      break;
    } else {
      var $_pr5 = $_pr_pre;
      __label__ = 28;
      break;
    }
   case 28:
    var $_pr5;
    var $100 = $_pr5 - 1 | 0;
    var $102 = HEAP32[$M + 20 >> 2];
    var $103 = HEAP32[$102 >> 2];
    if (($100 | 0) == 0) {
      var $__dst8_1 = $69;
      var $__x10_1 = $103;
      var $_pre = $_pr5;
      __label__ = 32;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $scevgep80 = $38 + (($_pr5 << 2) + $2) | 0;
    var $__n7_0 = $100;
    var $__dst8_0 = $69;
    var $_pn = $102;
    var $__x10_0 = $103;
    __label__ = 30;
    break;
   case 30:
    var $__x10_0;
    var $_pn;
    var $__dst8_0;
    var $__n7_0;
    var $__src9_0 = $_pn + 4 | 0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $109 = HEAP32[$__src9_0 >> 2];
    var $110 = $__n7_0 - 1 | 0;
    if (($110 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $__n7_0 = $110;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $_pn = $__src9_0;
      var $__x10_0 = $109;
      __label__ = 30;
      break;
    }
   case 31:
    var $__dst8_1 = $scevgep80;
    var $__x10_1 = $109;
    var $_pre = HEAP32[$81 >> 2];
    __label__ = 32;
    break;
   case 32:
    var $_pre;
    var $__x10_1;
    var $__dst8_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    var $un_0 = $_pre;
    __label__ = 33;
    break;
   case 33:
    var $un_0;
    var $113 = $un_0 - 1 | 0;
    if ((HEAP32[$39 + ($un_0 + $n << 2) >> 2] | HEAP32[$39 + ($113 << 2) >> 2] | 0) == 0) {
      var $un_0 = $113;
      __label__ = 33;
      break;
    } else {
      var $_01_ph = $80;
      var $un_1_ph = $un_0;
      __label__ = 39;
      break;
    }
   case 34:
    HEAP32[$updated_un >> 2] = 1;
    HEAP32[$69 >> 2] = 1;
    var $121 = $39 + ($_sum + $n << 2) | 0;
    var $122 = ___gmpn_gcdext_subdiv_step($gp, $gn11, $up, $usizep, $ap, $bp, $n, $39, $69, $updated_un, $70, $121);
    if (($122 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 35:
    var $125 = HEAP32[$__tmp_marker >> 2];
    if (($125 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    ___gmp_tmp_reentrant_free($125);
    __label__ = 37;
    break;
   case 37:
    var $_0 = HEAP32[$gn11 >> 2];
    __label__ = 129;
    break;
   case 38:
    var $_01_ph = $122;
    var $un_1_ph = HEAP32[$updated_un >> 2];
    __label__ = 39;
    break;
   case 39:
    var $un_1_ph;
    var $_01_ph;
    var $133 = $38 + 4 | 0;
    var $134 = $n << 3;
    var $137 = $134 + ($matrix_scratch_0 << 2) + 4 | 0;
    var $_01 = $_01_ph;
    var $un_1 = $un_1_ph;
    __label__ = 40;
    break;
   case 40:
    var $un_1;
    var $_01;
    if (($_01 | 0) > 599) {
      __label__ = 41;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 41:
    var $140 = ($_01 | 0) / 3 & -1;
    var $141 = $_01 - $140 | 0;
    ___gmpn_hgcd_matrix_init($M12, $141, $70);
    var $142 = $ap + ($140 << 2) | 0;
    var $143 = $bp + ($140 << 2) | 0;
    var $144 = ___gmpn_hgcd($142, $143, $141, $M12, $75);
    if (($144 | 0) > 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 42:
    var $147 = $144 + $140 | 0;
    var $148 = ___gmpn_hgcd_matrix_adjust($M12, $147, $ap, $bp, $140, $75);
    if (($un_1 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $151 = $un_1 - 1 | 0;
    var $152 = HEAP32[$39 >> 2];
    if (($151 | 0) == 0) {
      var $__dst16_1 = $75;
      var $__x18_1 = $152;
      __label__ = 47;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $scevgep114 = $38 + ($137 + ($un_1 << 2)) | 0;
    var $__n15_0 = $151;
    var $__dst16_0 = $75;
    var $__src17_0 = $133;
    var $__x18_0 = $152;
    __label__ = 45;
    break;
   case 45:
    var $__x18_0;
    var $__src17_0;
    var $__dst16_0;
    var $__n15_0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    var $158 = HEAP32[$__src17_0 >> 2];
    var $159 = $__n15_0 - 1 | 0;
    if (($159 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      var $__n15_0 = $159;
      var $__dst16_0 = $__dst16_0 + 4 | 0;
      var $__src17_0 = $__src17_0 + 4 | 0;
      var $__x18_0 = $158;
      __label__ = 45;
      break;
    }
   case 46:
    var $__dst16_1 = $scevgep114;
    var $__x18_1 = $158;
    __label__ = 47;
    break;
   case 47:
    var $__x18_1;
    var $__dst16_1;
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    __label__ = 48;
    break;
   case 48:
    var $163 = $39 + ($un_1 + $_sum2 << 2) | 0;
    var $164 = _hgcd_mul_matrix_vector($M12, $39, $75, $69, $un_1, $163);
    var $_01 = $148;
    var $un_1 = $164;
    __label__ = 40;
    break;
   case 49:
    HEAP32[$updated_un20 >> 2] = $un_1;
    var $166 = $39 + ($_01 + $_sum << 2) | 0;
    var $167 = ___gmpn_gcdext_subdiv_step($gp, $gn19, $up, $usizep, $ap, $bp, $_01, $39, $69, $updated_un20, $70, $166);
    if (($167 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 50:
    var $170 = HEAP32[$__tmp_marker >> 2];
    if (($170 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    ___gmp_tmp_reentrant_free($170);
    __label__ = 52;
    break;
   case 52:
    var $_0 = HEAP32[$gn19 >> 2];
    __label__ = 129;
    break;
   case 53:
    var $_01 = $167;
    var $un_1 = HEAP32[$updated_un20 >> 2];
    __label__ = 40;
    break;
   case 54:
    var $178 = ___gmpn_cmp($ap, $bp, $_01);
    if (($178 | 0) == 0) {
      __label__ = 55;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 55:
    if (($_01 | 0) == 0) {
      var $__gmp_i_0 = $un_1;
      __label__ = 60;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 56:
    var $183 = $_01 - 1 | 0;
    var $184 = HEAP32[$ap >> 2];
    if (($183 | 0) == 0) {
      var $__dst22_1 = $gp;
      var $__x24_1 = $184;
      __label__ = 59;
      break;
    } else {
      var $__n21_0 = $183;
      var $__dst22_0 = $gp;
      var $ap_pn15 = $ap;
      var $__x24_0 = $184;
      __label__ = 57;
      break;
    }
   case 57:
    var $__x24_0;
    var $ap_pn15;
    var $__dst22_0;
    var $__n21_0;
    var $__src23_0 = $ap_pn15 + 4 | 0;
    HEAP32[$__dst22_0 >> 2] = $__x24_0;
    var $187 = HEAP32[$__src23_0 >> 2];
    var $188 = $__n21_0 - 1 | 0;
    if (($188 | 0) == 0) {
      __label__ = 58;
      break;
    } else {
      var $__n21_0 = $188;
      var $__dst22_0 = $__dst22_0 + 4 | 0;
      var $ap_pn15 = $__src23_0;
      var $__x24_0 = $187;
      __label__ = 57;
      break;
    }
   case 58:
    var $__dst22_1 = $gp + ($183 << 2) | 0;
    var $__x24_1 = $187;
    __label__ = 59;
    break;
   case 59:
    var $__x24_1;
    var $__dst22_1;
    HEAP32[$__dst22_1 >> 2] = $__x24_1;
    var $__gmp_i_0 = $un_1;
    __label__ = 60;
    break;
   case 60:
    var $__gmp_i_0;
    var $191 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 61;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 61:
    var $195 = HEAPU32[$39 + ($191 << 2) >> 2];
    var $197 = HEAPU32[$39 + ($__gmp_i_0 + $n << 2) >> 2];
    if (($195 | 0) == ($197 | 0)) {
      var $__gmp_i_0 = $191;
      __label__ = 60;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    if ($195 >>> 0 > $197 >>> 0) {
      __label__ = 63;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 63:
    var $un_3 = $un_1;
    var $indvars_iv107 = $up + ($un_1 - 1 << 2) | 0;
    __label__ = 72;
    break;
   case 64:
    var $un_2 = $un_1;
    var $indvars_iv102 = $up + ($un_1 - 1 << 2) | 0;
    __label__ = 65;
    break;
   case 65:
    var $indvars_iv102;
    var $un_2;
    if (($un_2 | 0) > 0) {
      __label__ = 66;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 66:
    var $203 = $un_2 - 1 | 0;
    if ((HEAP32[$39 + ($203 << 2) >> 2] | 0) == 0) {
      var $un_2 = $203;
      var $indvars_iv102 = $indvars_iv102 - 4 | 0;
      __label__ = 65;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    if (($un_2 | 0) == 0) {
      __label__ = 71;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    var $210 = $un_2 - 1 | 0;
    var $211 = HEAP32[$39 >> 2];
    if (($210 | 0) == 0) {
      var $__dst26_1 = $up;
      var $__x28_1 = $211;
      __label__ = 70;
      break;
    } else {
      var $__n25_0 = $210;
      var $__dst26_0 = $up;
      var $__src27_0 = $133;
      var $__x28_0 = $211;
      __label__ = 69;
      break;
    }
   case 69:
    var $__x28_0;
    var $__src27_0;
    var $__dst26_0;
    var $__n25_0;
    HEAP32[$__dst26_0 >> 2] = $__x28_0;
    var $215 = HEAP32[$__src27_0 >> 2];
    var $216 = $__n25_0 - 1 | 0;
    if (($216 | 0) == 0) {
      var $__dst26_1 = $indvars_iv102;
      var $__x28_1 = $215;
      __label__ = 70;
      break;
    } else {
      var $__n25_0 = $216;
      var $__dst26_0 = $__dst26_0 + 4 | 0;
      var $__src27_0 = $__src27_0 + 4 | 0;
      var $__x28_0 = $215;
      __label__ = 69;
      break;
    }
   case 70:
    var $__x28_1;
    var $__dst26_1;
    HEAP32[$__dst26_1 >> 2] = $__x28_1;
    __label__ = 71;
    break;
   case 71:
    var $storemerge = -$un_2 | 0;
    __label__ = 78;
    break;
   case 72:
    var $indvars_iv107;
    var $un_3;
    var $220 = $un_3 - 1 | 0;
    if ((HEAP32[$39 + ($un_3 + $n << 2) >> 2] | 0) == 0) {
      var $un_3 = $220;
      var $indvars_iv107 = $indvars_iv107 - 4 | 0;
      __label__ = 72;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    if (($un_3 | 0) == 0) {
      var $storemerge = 0;
      __label__ = 78;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 74:
    var $227 = HEAP32[$69 >> 2];
    if (($220 | 0) == 0) {
      var $__x32_1 = $227;
      var $__dst30_1 = $up;
      __label__ = 77;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    var $__x32_0 = $227;
    var $__src31_0 = $39 + ($n + 2 << 2) | 0;
    var $__dst30_0 = $up;
    var $__n29_0 = $220;
    __label__ = 76;
    break;
   case 76:
    var $__n29_0;
    var $__dst30_0;
    var $__src31_0;
    var $__x32_0;
    HEAP32[$__dst30_0 >> 2] = $__x32_0;
    var $233 = HEAP32[$__src31_0 >> 2];
    var $234 = $__n29_0 - 1 | 0;
    if (($234 | 0) == 0) {
      var $__x32_1 = $233;
      var $__dst30_1 = $indvars_iv107;
      __label__ = 77;
      break;
    } else {
      var $__x32_0 = $233;
      var $__src31_0 = $__src31_0 + 4 | 0;
      var $__dst30_0 = $__dst30_0 + 4 | 0;
      var $__n29_0 = $234;
      __label__ = 76;
      break;
    }
   case 77:
    var $__dst30_1;
    var $__x32_1;
    HEAP32[$__dst30_1 >> 2] = $__x32_1;
    var $storemerge = $un_3;
    __label__ = 78;
    break;
   case 78:
    var $storemerge;
    HEAP32[$usizep >> 2] = $storemerge;
    var $236 = HEAP32[$__tmp_marker >> 2];
    if (($236 | 0) == 0) {
      var $_0 = $_01;
      __label__ = 129;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 79:
    ___gmp_tmp_reentrant_free($236);
    var $_0 = $_01;
    __label__ = 129;
    break;
   case 80:
    var $240 = _mpn_zero_p72($39, $un_1);
    if (($240 | 0) == 0) {
      __label__ = 83;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 81:
    var $243 = ___gmpn_gcdext_lehmer_n($gp, $up, $usizep, $ap, $bp, $_01, $70);
    var $244 = HEAP32[$__tmp_marker >> 2];
    if (($244 | 0) == 0) {
      var $_0 = $243;
      __label__ = 129;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 82:
    ___gmp_tmp_reentrant_free($244);
    var $_0 = $243;
    __label__ = 129;
    break;
   case 83:
    var $_sum4 = $_01 + $_sum | 0;
    var $248 = $39 + ($_sum4 << 2) | 0;
    if (($_01 | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 84:
    var $251 = $_01 - 1 | 0;
    var $252 = HEAP32[$ap >> 2];
    if (($251 | 0) == 0) {
      __label__ = 86;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 85:
    var $254 = $134 | 4;
    var $scevgep88 = $38 + ($254 + ($_01 << 3)) | 0;
    var $__x38_0 = $252;
    var $ap_pn = $ap;
    var $__dst36_0 = $248;
    var $__n35_0 = $251;
    __label__ = 87;
    break;
   case 86:
    HEAP32[$248 >> 2] = $252;
    var $__x42_1 = HEAP32[$bp >> 2];
    var $__dst40_1 = $39 + ($_sum4 + $_01 << 2) | 0;
    __label__ = 91;
    break;
   case 87:
    var $__n35_0;
    var $__dst36_0;
    var $ap_pn;
    var $__x38_0;
    var $__src37_0 = $ap_pn + 4 | 0;
    HEAP32[$__dst36_0 >> 2] = $__x38_0;
    var $260 = HEAP32[$__src37_0 >> 2];
    var $261 = $__n35_0 - 1 | 0;
    if (($261 | 0) == 0) {
      __label__ = 88;
      break;
    } else {
      var $__x38_0 = $260;
      var $ap_pn = $__src37_0;
      var $__dst36_0 = $__dst36_0 + 4 | 0;
      var $__n35_0 = $261;
      __label__ = 87;
      break;
    }
   case 88:
    HEAP32[$scevgep88 >> 2] = $260;
    var $263 = $39 + ($_sum4 + $_01 << 2) | 0;
    var $264 = HEAP32[$bp >> 2];
    var $265 = (i64Math.multiply($_01, 0, 12, 0), i64Math.result[0]);
    var $scevgep84 = $38 + ($254 + $265) | 0;
    var $__x42_0 = $264;
    var $bp_pn = $bp;
    var $__dst40_0 = $263;
    var $__n39_0 = $251;
    __label__ = 89;
    break;
   case 89:
    var $__n39_0;
    var $__dst40_0;
    var $bp_pn;
    var $__x42_0;
    var $__src41_0 = $bp_pn + 4 | 0;
    HEAP32[$__dst40_0 >> 2] = $__x42_0;
    var $268 = HEAP32[$__src41_0 >> 2];
    var $269 = $__n39_0 - 1 | 0;
    if (($269 | 0) == 0) {
      __label__ = 90;
      break;
    } else {
      var $__x42_0 = $268;
      var $bp_pn = $__src41_0;
      var $__dst40_0 = $__dst40_0 + 4 | 0;
      var $__n39_0 = $269;
      __label__ = 89;
      break;
    }
   case 90:
    var $__x42_1 = $268;
    var $__dst40_1 = $scevgep84;
    __label__ = 91;
    break;
   case 91:
    var $__dst40_1;
    var $__x42_1;
    HEAP32[$__dst40_1 >> 2] = $__x42_1;
    __label__ = 92;
    break;
   case 92:
    var $_sum5 = $_sum4 + $_01 | 0;
    var $272 = $39 + ($_sum5 << 2) | 0;
    var $274 = $39 + ($_sum4 + ($_01 << 1) << 2) | 0;
    var $275 = ___gmpn_gcdext_lehmer_n($gp, $70, $lehmer_un, $248, $272, $_01, $274);
    var $u0n_0 = $un_1;
    var $indvars_iv = $up + ($un_1 - 1 << 2) | 0;
    __label__ = 93;
    break;
   case 93:
    var $indvars_iv;
    var $u0n_0;
    if (($u0n_0 | 0) > 0) {
      __label__ = 94;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 94:
    var $279 = $u0n_0 - 1 | 0;
    if ((HEAP32[$39 + ($279 << 2) >> 2] | 0) == 0) {
      var $u0n_0 = $279;
      var $indvars_iv = $indvars_iv - 4 | 0;
      __label__ = 93;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 95:
    var $284 = HEAP32[$lehmer_un >> 2];
    if (($284 | 0) == 0) {
      __label__ = 96;
      break;
    } else {
      __label__ = 102;
      break;
    }
   case 96:
    if (($u0n_0 | 0) == 0) {
      __label__ = 100;
      break;
    } else {
      __label__ = 97;
      break;
    }
   case 97:
    var $289 = $u0n_0 - 1 | 0;
    var $290 = HEAP32[$39 >> 2];
    if (($289 | 0) == 0) {
      var $__x46_1 = $290;
      var $__dst44_1 = $up;
      __label__ = 99;
      break;
    } else {
      var $__x46_0 = $290;
      var $__src45_0 = $133;
      var $__dst44_0 = $up;
      var $__n43_0 = $289;
      __label__ = 98;
      break;
    }
   case 98:
    var $__n43_0;
    var $__dst44_0;
    var $__src45_0;
    var $__x46_0;
    HEAP32[$__dst44_0 >> 2] = $__x46_0;
    var $294 = HEAP32[$__src45_0 >> 2];
    var $295 = $__n43_0 - 1 | 0;
    if (($295 | 0) == 0) {
      var $__x46_1 = $294;
      var $__dst44_1 = $indvars_iv;
      __label__ = 99;
      break;
    } else {
      var $__x46_0 = $294;
      var $__src45_0 = $__src45_0 + 4 | 0;
      var $__dst44_0 = $__dst44_0 + 4 | 0;
      var $__n43_0 = $295;
      __label__ = 98;
      break;
    }
   case 99:
    var $__dst44_1;
    var $__x46_1;
    HEAP32[$__dst44_1 >> 2] = $__x46_1;
    __label__ = 100;
    break;
   case 100:
    HEAP32[$usizep >> 2] = -$u0n_0 | 0;
    var $299 = HEAP32[$__tmp_marker >> 2];
    if (($299 | 0) == 0) {
      var $_0 = $275;
      __label__ = 129;
      break;
    } else {
      __label__ = 101;
      break;
    }
   case 101:
    ___gmp_tmp_reentrant_free($299);
    var $_0 = $275;
    __label__ = 129;
    break;
   case 102:
    var $303 = $39 + ($_sum5 + 1 << 2) | 0;
    var $304 = _compute_v($248, $ap, $bp, $_01, $gp, $275, $70, $284, $303);
    if (($284 | 0) > 0) {
      var $negate_0 = 0;
      var $309 = $284;
      __label__ = 104;
      break;
    } else {
      __label__ = 103;
      break;
    }
   case 103:
    var $307 = -$284 | 0;
    HEAP32[$lehmer_un >> 2] = $307;
    var $negate_0 = 1;
    var $309 = $307;
    __label__ = 104;
    break;
   case 104:
    var $309;
    var $negate_0;
    var $u1n_0 = $un_1;
    __label__ = 105;
    break;
   case 105:
    var $u1n_0;
    if (($u1n_0 | 0) > 0) {
      __label__ = 106;
      break;
    } else {
      __label__ = 107;
      break;
    }
   case 106:
    if ((HEAP32[$39 + ($u1n_0 + $n << 2) >> 2] | 0) == 0) {
      var $u1n_0 = $u1n_0 - 1 | 0;
      __label__ = 105;
      break;
    } else {
      __label__ = 107;
      break;
    }
   case 107:
    if (($u1n_0 | 0) == 0) {
      __label__ = 108;
      break;
    } else {
      __label__ = 116;
      break;
    }
   case 108:
    if (($304 | 0) == 0) {
      __label__ = 114;
      break;
    } else {
      __label__ = 109;
      break;
    }
   case 109:
    var $322 = $304 - 1 | 0;
    var $323 = HEAP32[$248 >> 2];
    if (($322 | 0) == 0) {
      var $__x50_1 = $323;
      var $__dst48_1 = $up;
      __label__ = 113;
      break;
    } else {
      __label__ = 110;
      break;
    }
   case 110:
    var $__x50_0 = $323;
    var $__src49_0 = $39 + ($_sum4 + 1 << 2) | 0;
    var $__dst48_0 = $up;
    var $__n47_0 = $322;
    __label__ = 111;
    break;
   case 111:
    var $__n47_0;
    var $__dst48_0;
    var $__src49_0;
    var $__x50_0;
    HEAP32[$__dst48_0 >> 2] = $__x50_0;
    var $329 = HEAP32[$__src49_0 >> 2];
    var $330 = $__n47_0 - 1 | 0;
    if (($330 | 0) == 0) {
      __label__ = 112;
      break;
    } else {
      var $__x50_0 = $329;
      var $__src49_0 = $__src49_0 + 4 | 0;
      var $__dst48_0 = $__dst48_0 + 4 | 0;
      var $__n47_0 = $330;
      __label__ = 111;
      break;
    }
   case 112:
    var $__x50_1 = $329;
    var $__dst48_1 = $up + ($322 << 2) | 0;
    __label__ = 113;
    break;
   case 113:
    var $__dst48_1;
    var $__x50_1;
    HEAP32[$__dst48_1 >> 2] = $__x50_1;
    __label__ = 114;
    break;
   case 114:
    var $336 = ($negate_0 | 0) != 0 ? $304 : -$304 | 0;
    HEAP32[$usizep >> 2] = $336;
    var $337 = HEAP32[$__tmp_marker >> 2];
    if (($337 | 0) == 0) {
      var $_0 = $275;
      __label__ = 129;
      break;
    } else {
      __label__ = 115;
      break;
    }
   case 115:
    ___gmp_tmp_reentrant_free($337);
    var $_0 = $275;
    __label__ = 129;
    break;
   case 116:
    if (($309 | 0) > ($u1n_0 | 0)) {
      __label__ = 118;
      break;
    } else {
      __label__ = 117;
      break;
    }
   case 117:
    var $343 = ___gmpn_mul($up, $69, $u1n_0, $70, $309);
    __label__ = 119;
    break;
   case 118:
    var $345 = ___gmpn_mul($up, $70, $309, $69, $u1n_0);
    __label__ = 119;
    break;
   case 119:
    var $347 = $309 + $u1n_0 | 0;
    var $353 = $347 - ((HEAP32[$up + ($347 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    if (($304 | 0) > 0) {
      __label__ = 120;
      break;
    } else {
      var $un_5 = $353;
      __label__ = 127;
      break;
    }
   case 120:
    if (($304 | 0) > ($u0n_0 | 0)) {
      __label__ = 122;
      break;
    } else {
      __label__ = 121;
      break;
    }
   case 121:
    var $358 = ___gmpn_mul($69, $39, $u0n_0, $248, $304);
    __label__ = 123;
    break;
   case 122:
    var $360 = ___gmpn_mul($69, $248, $304, $39, $u0n_0);
    __label__ = 123;
    break;
   case 123:
    var $362 = $304 + $u0n_0 | 0;
    var $367 = $362 - ((HEAP32[$39 + ($362 + $n << 2) >> 2] | 0) == 0 & 1) | 0;
    if (($367 | 0) > ($353 | 0)) {
      __label__ = 125;
      break;
    } else {
      __label__ = 124;
      break;
    }
   case 124:
    var $370 = ___gmpn_add($up, $up, $353, $69, $367);
    var $cy_0 = $370;
    var $un_4 = $353;
    __label__ = 126;
    break;
   case 125:
    var $372 = ___gmpn_add($up, $69, $367, $up, $353);
    var $cy_0 = $372;
    var $un_4 = $367;
    __label__ = 126;
    break;
   case 126:
    var $un_4;
    var $cy_0;
    HEAP32[$up + ($un_4 << 2) >> 2] = $cy_0;
    var $un_5 = (($cy_0 | 0) != 0 & 1) + $un_4 | 0;
    __label__ = 127;
    break;
   case 127:
    var $un_5;
    var $381 = ($negate_0 | 0) != 0 ? -$un_5 | 0 : $un_5;
    HEAP32[$usizep >> 2] = $381;
    var $382 = HEAP32[$__tmp_marker >> 2];
    if (($382 | 0) == 0) {
      var $_0 = $275;
      __label__ = 129;
      break;
    } else {
      __label__ = 128;
      break;
    }
   case 128:
    ___gmp_tmp_reentrant_free($382);
    var $_0 = $275;
    __label__ = 129;
    break;
   case 129:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_gcdext["X"] = 1;

function _hgcd_mul_matrix_vector($M, $rp, $ap, $bp, $n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $M + 4 | 0;
    var $2 = HEAP32[$1 >> 2];
    var $5 = HEAP32[$M + 8 >> 2];
    if (($2 | 0) < ($n | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $7 = ___gmpn_mul($tp, $5, $2, $ap, $n);
    var $9 = HEAP32[$M + 16 >> 2];
    var $10 = HEAP32[$1 >> 2];
    var $11 = ___gmpn_mul($rp, $9, $10, $bp, $n);
    __label__ = 5;
    break;
   case 4:
    var $13 = ___gmpn_mul($tp, $ap, $n, $5, $2);
    var $15 = HEAP32[$M + 16 >> 2];
    var $16 = HEAP32[$1 >> 2];
    var $17 = ___gmpn_mul($rp, $bp, $n, $15, $16);
    __label__ = 5;
    break;
   case 5:
    var $20 = HEAP32[$1 >> 2] + $n | 0;
    var $21 = ___gmpn_add_n($rp, $rp, $tp, $20);
    var $22 = HEAP32[$1 >> 2];
    var $25 = HEAP32[$M + 20 >> 2];
    if (($22 | 0) < ($n | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $27 = ___gmpn_mul($tp, $25, $22, $bp, $n);
    var $29 = HEAP32[$M + 12 >> 2];
    var $30 = HEAP32[$1 >> 2];
    var $31 = ___gmpn_mul($bp, $29, $30, $ap, $n);
    __label__ = 8;
    break;
   case 7:
    var $33 = ___gmpn_mul($tp, $bp, $n, $25, $22);
    var $35 = HEAP32[$M + 12 >> 2];
    var $36 = HEAP32[$1 >> 2];
    var $37 = ___gmpn_mul($bp, $ap, $n, $35, $36);
    __label__ = 8;
    break;
   case 8:
    var $40 = HEAP32[$1 >> 2] + $n | 0;
    var $41 = ___gmpn_add_n($bp, $bp, $tp, $40);
    var $43 = HEAP32[$1 >> 2] + $n | 0;
    if (($41 | $21 | 0) == 0) {
      var $_0 = $43;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $47 = $rp + ($43 << 2) | 0;
    HEAP32[$47 >> 2] = $21;
    var $48 = $bp + ($43 << 2) | 0;
    HEAP32[$48 >> 2] = $41;
    var $_1 = $43 + 1 | 0;
    __label__ = 11;
    break;
   case 10:
    var $_0;
    var $50 = $_0 - 1 | 0;
    if ((HEAP32[$bp + ($50 << 2) >> 2] | HEAP32[$rp + ($50 << 2) >> 2] | 0) == 0) {
      var $_0 = $50;
      __label__ = 10;
      break;
    } else {
      var $_1 = $_0;
      __label__ = 11;
      break;
    }
   case 11:
    var $_1;
    return $_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_hgcd_mul_matrix_vector["X"] = 1;

function _compute_v($vp, $ap, $bp, $n, $gp, $gn, $up, $usize, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = ($usize | 0) > -1 ? $usize : -$usize | 0;
    var $an_0 = $n;
    __label__ = 3;
    break;
   case 3:
    var $an_0;
    if (($an_0 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $7 = $an_0 - 1 | 0;
    if ((HEAP32[$ap + ($7 << 2) >> 2] | 0) == 0) {
      var $an_0 = $7;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($an_0 | 0) < ($3 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $14 = ___gmpn_mul($tp, $ap, $an_0, $up, $3);
    __label__ = 8;
    break;
   case 7:
    var $16 = ___gmpn_mul($tp, $up, $3, $ap, $an_0);
    __label__ = 8;
    break;
   case 8:
    var $18 = $an_0 + $3 | 0;
    var $24 = $18 - ((HEAP32[$tp + ($18 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    if (($usize | 0) > 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 9:
    var $27 = ___gmpn_sub($tp, $tp, $24, $gp, $gn);
    var $size_0 = $24;
    __label__ = 10;
    break;
   case 10:
    var $size_0;
    if (($size_0 | 0) > 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $31 = $size_0 - 1 | 0;
    if ((HEAP32[$tp + ($31 << 2) >> 2] | 0) == 0) {
      var $size_0 = $31;
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($size_0 | 0) == 0) {
      var $_0 = 0;
      __label__ = 19;
      break;
    } else {
      var $size_1 = $size_0;
      __label__ = 15;
      break;
    }
   case 13:
    var $38 = ___gmpn_add($tp, $tp, $24, $gp, $gn);
    if (($38 | 0) == 0) {
      var $size_1 = $24;
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $41 = $24 + 1 | 0;
    var $42 = $tp + ($24 << 2) | 0;
    HEAP32[$42 >> 2] = $38;
    var $size_1 = $41;
    __label__ = 15;
    break;
   case 15:
    var $size_1;
    var $bn_0 = $n;
    __label__ = 16;
    break;
   case 16:
    var $bn_0;
    if (($bn_0 | 0) > 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $47 = $bn_0 - 1 | 0;
    if ((HEAP32[$bp + ($47 << 2) >> 2] | 0) == 0) {
      var $bn_0 = $47;
      __label__ = 16;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $53 = $size_1 + 1 - $bn_0 | 0;
    ___gmpn_divexact($vp, $tp, $size_1, $bp, $bn_0);
    var $_0 = $53 - ((HEAP32[$vp + ($53 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 19;
    break;
   case 19:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_compute_v["X"] = 1;

function ___gmpn_tdiv_qr($qp, $rp, $qxn, $np, $nn, $dp, $dn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $dtmp = __stackBase__ + 4;
    var $dinv = __stackBase__ + 12;
    var $__tmp_marker1 = __stackBase__ + 16;
    if (($qxn | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    ___gmp_assert_fail(STRING_TABLE.__str73 | 0, 40, STRING_TABLE.__str174 | 0);
    throw "Reached an unreachable!";
   case 4:
    if (($dn | 0) == 0) {
      __label__ = 5;
      break;
    } else if (($dn | 0) == 1) {
      __label__ = 6;
      break;
    } else if (($dn | 0) == 2) {
      __label__ = 7;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 5:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 6:
    var $6 = HEAP32[$dp >> 2];
    var $7 = ___gmpn_divrem_1($qp, 0, $np, $nn, $6);
    HEAP32[$rp >> 2] = $7;
    __label__ = 181;
    break;
   case 7:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $10 = HEAPU32[$dp + 4 >> 2];
    if (($10 | 0) > -1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 8:
    if ($10 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $16 = $10 >>> 0 < 256 ? 1 : 9;
    var $21 = $16;
    __label__ = 11;
    break;
   case 10:
    var $19 = $10 >>> 0 < 16777216 ? 17 : 25;
    var $21 = $19;
    __label__ = 11;
    break;
   case 11:
    var $21;
    var $24 = STRING_TABLE.___gmpn_clz_tab + ($10 >>> ($21 >>> 0)) | 0;
    var $27 = 33 - $21 - (HEAPU8[$24] & 255) | 0;
    var $28 = $dtmp | 0;
    var $30 = HEAPU32[$dp >> 2];
    var $31 = 32 - $27 | 0;
    HEAP32[$dtmp + 4 >> 2] = $30 >>> ($31 >>> 0) | $10 << $27;
    HEAP32[$28 >> 2] = $30 << $27;
    var $37 = ($nn << 2) + 4 | 0;
    if ($37 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $40 = STACKTOP;
    STACKTOP += $37;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $44 = $40;
    __label__ = 14;
    break;
   case 13:
    var $42 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $37);
    var $44 = $42;
    __label__ = 14;
    break;
   case 14:
    var $44;
    var $45 = $44;
    var $46 = ___gmpn_lshift($45, $np, $nn, $27);
    HEAP32[$45 + ($nn << 2) >> 2] = $46;
    var $50 = (($46 | 0) != 0 & 1) + $nn | 0;
    var $51 = ___gmpn_divrem_2($qp, 0, $45, $50, $28);
    if (($46 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    HEAP32[$qp + ($nn - 2 << 2) >> 2] = $51;
    __label__ = 16;
    break;
   case 16:
    var $61 = HEAPU32[$44 + 4 >> 2];
    HEAP32[$rp >> 2] = $61 << $31 | HEAPU32[$45 >> 2] >>> ($27 >>> 0);
    HEAP32[$rp + 4 >> 2] = $61 >>> ($27 >>> 0);
    __label__ = 27;
    break;
   case 17:
    var $67 = $nn << 2;
    if ($67 >>> 0 < 65536) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $70 = STACKTOP;
    STACKTOP += $67;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $74 = $70;
    __label__ = 20;
    break;
   case 19:
    var $72 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $67);
    var $74 = $72;
    __label__ = 20;
    break;
   case 20:
    var $74;
    var $75 = $74;
    if (($nn | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $78 = $nn - 1 | 0;
    var $79 = HEAPU32[$np >> 2];
    if (($78 | 0) == 0) {
      var $__dst_1 = $75;
      var $__x_1 = $79;
      __label__ = 25;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $scevgep = $74 + ($67 - 4) | 0;
    var $__n_0 = $78;
    var $__dst_0 = $75;
    var $np_pn = $np;
    var $__x_0 = $79;
    __label__ = 23;
    break;
   case 23:
    var $__x_0;
    var $np_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $np_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $84 = HEAP32[$__src_0 >> 2];
    var $85 = $__n_0 - 1 | 0;
    if (($85 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $__n_0 = $85;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $np_pn = $__src_0;
      var $__x_0 = $84;
      __label__ = 23;
      break;
    }
   case 24:
    var $__dst_1 = $scevgep;
    var $__x_1 = $84;
    __label__ = 25;
    break;
   case 25:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 26;
    break;
   case 26:
    var $89 = ___gmpn_divrem_2($qp, 0, $75, $nn, $dp);
    HEAP32[$qp + ($nn - 2 << 2) >> 2] = $89;
    var $92 = HEAP32[$75 >> 2];
    HEAP32[$rp >> 2] = $92;
    var $95 = HEAP32[$74 + 4 >> 2];
    HEAP32[$rp + 4 >> 2] = $95;
    __label__ = 27;
    break;
   case 27:
    var $98 = HEAP32[$__tmp_marker >> 2];
    if (($98 | 0) == 0) {
      __label__ = 181;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    ___gmp_tmp_reentrant_free($98);
    __label__ = 181;
    break;
   case 29:
    HEAP32[$__tmp_marker1 >> 2] = 0;
    var $102 = $nn - 1 | 0;
    var $105 = $dn - 1 | 0;
    var $106 = $dp + ($105 << 2) | 0;
    var $108 = HEAPU32[$np + ($102 << 2) >> 2] >>> 0 >= HEAPU32[$106 >> 2] >>> 0;
    var $109 = $108 & 1;
    var $110 = $109 + $nn | 0;
    var $112 = ($110 | 0) < ($dn << 1 | 0);
    var $113 = $nn - $dn | 0;
    HEAP32[$qp + ($113 << 2) >> 2] = 0;
    if ($112) {
      __label__ = 79;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $116 = HEAPU32[$106 >> 2];
    if (($116 | 0) > -1) {
      __label__ = 31;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 31:
    if ($116 >>> 0 < 65536) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $122 = $116 >>> 0 < 256 ? 1 : 9;
    var $127 = $122;
    __label__ = 34;
    break;
   case 33:
    var $125 = $116 >>> 0 < 16777216 ? 17 : 25;
    var $127 = $125;
    __label__ = 34;
    break;
   case 34:
    var $127;
    var $130 = STRING_TABLE.___gmpn_clz_tab + ($116 >>> ($127 >>> 0)) | 0;
    var $133 = 33 - $127 - (HEAPU8[$130] & 255) | 0;
    var $134 = $dn << 2;
    if ($134 >>> 0 < 65536) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $137 = STACKTOP;
    STACKTOP += $134;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $141 = $137;
    __label__ = 37;
    break;
   case 36:
    var $139 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $134);
    var $141 = $139;
    __label__ = 37;
    break;
   case 37:
    var $141;
    var $142 = $141;
    var $143 = ___gmpn_lshift($142, $dp, $dn, $133);
    var $145 = ($nn << 2) + 4 | 0;
    if ($145 >>> 0 < 65536) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    var $148 = STACKTOP;
    STACKTOP += $145;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $152 = $148;
    __label__ = 40;
    break;
   case 39:
    var $150 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $145);
    var $152 = $150;
    __label__ = 40;
    break;
   case 40:
    var $152;
    var $153 = $152;
    var $154 = ___gmpn_lshift($153, $np, $nn, $133);
    HEAP32[$153 + ($nn << 2) >> 2] = $154;
    var $n2p2_0 = $153;
    var $d2p3_0 = $142;
    var $cnt5_0 = $133;
    __label__ = 51;
    break;
   case 41:
    var $157 = $nn << 2;
    var $158 = $157 + 4 | 0;
    if ($158 >>> 0 < 65536) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $161 = STACKTOP;
    STACKTOP += $158;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $165 = $161;
    __label__ = 44;
    break;
   case 43:
    var $163 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $158);
    var $165 = $163;
    __label__ = 44;
    break;
   case 44:
    var $165;
    var $166 = $165;
    if (($nn | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $169 = HEAPU32[$np >> 2];
    if (($102 | 0) == 0) {
      var $__dst9_1 = $166;
      var $__x11_1 = $169;
      __label__ = 49;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $scevgep75 = $165 + ($157 - 4) | 0;
    var $__n8_0 = $102;
    var $__dst9_0 = $166;
    var $np_pn17 = $np;
    var $__x11_0 = $169;
    __label__ = 47;
    break;
   case 47:
    var $__x11_0;
    var $np_pn17;
    var $__dst9_0;
    var $__n8_0;
    var $__src10_0 = $np_pn17 + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    var $174 = HEAP32[$__src10_0 >> 2];
    var $175 = $__n8_0 - 1 | 0;
    if (($175 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      var $__n8_0 = $175;
      var $__dst9_0 = $__dst9_0 + 4 | 0;
      var $np_pn17 = $__src10_0;
      var $__x11_0 = $174;
      __label__ = 47;
      break;
    }
   case 48:
    var $__dst9_1 = $scevgep75;
    var $__x11_1 = $174;
    __label__ = 49;
    break;
   case 49:
    var $__x11_1;
    var $__dst9_1;
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    __label__ = 50;
    break;
   case 50:
    HEAP32[$166 + ($nn << 2) >> 2] = 0;
    var $n2p2_0 = $166;
    var $d2p3_0 = $dp;
    var $cnt5_0 = 0;
    __label__ = 51;
    break;
   case 51:
    var $cnt5_0;
    var $d2p3_0;
    var $n2p2_0;
    var $182 = HEAPU32[$d2p3_0 + ($105 << 2) >> 2];
    var $183 = $182 >>> 16;
    var $184 = $182 & 65535;
    var $185 = $182 ^ -1;
    var $186 = Math.floor(($185 >>> 0) / ($183 >>> 0));
    var $187 = (i64Math.multiply($186, 0, $183, 0), i64Math.result[0]);
    var $188 = $185 - $187 | 0;
    var $189 = (i64Math.multiply($186, 0, $184, 0), i64Math.result[0]);
    var $191 = $188 << 16 | 65535;
    if ($191 >>> 0 < $189 >>> 0) {
      __label__ = 52;
      break;
    } else {
      var $__q1_0 = $186;
      var $__r1_0 = $191;
      __label__ = 54;
      break;
    }
   case 52:
    var $194 = $186 - 1 | 0;
    var $uadd16 = _llvm_uadd_with_overflow_i32($191, $182);
    var $195 = $uadd16.f0;
    var $196 = $uadd16.f1;
    if ($195 >>> 0 < $189 >>> 0 & ($196 ^ 1)) {
      __label__ = 53;
      break;
    } else {
      var $__q1_0 = $194;
      var $__r1_0 = $195;
      __label__ = 54;
      break;
    }
   case 53:
    var $__q1_0 = $186 - 2 | 0;
    var $__r1_0 = $195 + $182 | 0;
    __label__ = 54;
    break;
   case 54:
    var $__r1_0;
    var $__q1_0;
    var $202 = $__r1_0 - $189 | 0;
    var $203 = Math.floor(($202 >>> 0) / ($183 >>> 0));
    var $204 = (i64Math.multiply($203, 0, $183, 0), i64Math.result[0]);
    var $205 = $202 - $204 | 0;
    var $206 = (i64Math.multiply($203, 0, $184, 0), i64Math.result[0]);
    var $208 = $205 << 16 | 65535;
    if ($208 >>> 0 < $206 >>> 0) {
      __label__ = 55;
      break;
    } else {
      var $__q0_0 = $203;
      __label__ = 56;
      break;
    }
   case 55:
    var $uadd15 = _llvm_uadd_with_overflow_i32($208, $182);
    var $211 = $uadd15.f1;
    var $212 = $uadd15.f0;
    var $__v = $212 >>> 0 < $206 >>> 0 & ($211 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $203 | 0;
    __label__ = 56;
    break;
   case 56:
    var $__q0_0;
    var $216 = $__q0_0 | $__q1_0 << 16;
    var $217 = (i64Math.multiply($182, 0, $216, 0), i64Math.result[0]);
    var $220 = HEAPU32[$d2p3_0 + ($dn - 2 << 2) >> 2];
    var $uadd12 = _llvm_uadd_with_overflow_i32($217, $220);
    var $221 = $uadd12.f0;
    var $222 = $uadd12.f1;
    if ($222) {
      __label__ = 57;
      break;
    } else {
      var $v_0 = $216;
      var $p_0 = $221;
      __label__ = 58;
      break;
    }
   case 57:
    var $225 = ($221 >>> 0 >= $182 >>> 0) << 31 >> 31;
    var $v_0 = $216 - 1 + $225 | 0;
    var $p_0 = $221 - $182 - ($225 & $182) | 0;
    __label__ = 58;
    break;
   case 58:
    var $p_0;
    var $v_0;
    var $232 = $220 & 65535;
    var $233 = $220 >>> 16;
    var $234 = $v_0 & 65535;
    var $235 = $v_0 >>> 16;
    var $236 = (i64Math.multiply($232, 0, $234, 0), i64Math.result[0]);
    var $237 = (i64Math.multiply($232, 0, $235, 0), i64Math.result[0]);
    var $238 = (i64Math.multiply($233, 0, $234, 0), i64Math.result[0]);
    var $239 = (i64Math.multiply($233, 0, $235, 0), i64Math.result[0]);
    var $241 = ($236 >>> 16) + $237 | 0;
    var $uadd13 = _llvm_uadd_with_overflow_i32($241, $238);
    var $242 = $uadd13.f0;
    var $243 = $uadd13.f1;
    var $__x3_0 = $243 ? $239 + 65536 | 0 : $239;
    var $246 = $__x3_0 + ($242 >>> 16) | 0;
    var $249 = $242 << 16 | $236 & 65535;
    var $uadd14 = _llvm_uadd_with_overflow_i32($p_0, $246);
    var $250 = $uadd14.f0;
    var $251 = $uadd14.f1;
    if ($251) {
      __label__ = 59;
      break;
    } else {
      var $v_1 = $v_0;
      __label__ = 61;
      break;
    }
   case 59:
    var $253 = $v_0 - 1 | 0;
    if ($250 >>> 0 < $182 >>> 0) {
      var $v_1 = $253;
      __label__ = 61;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $_34 = $250 >>> 0 <= $182 >>> 0 & $249 >>> 0 < $220 >>> 0 ? $253 : $v_0 - 2 | 0;
    var $v_1 = $_34;
    __label__ = 61;
    break;
   case 61:
    var $v_1;
    HEAP32[$dinv >> 2] = $v_1;
    if (($dn | 0) > 49) {
      __label__ = 63;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    var $263 = ___gmpn_sbpi1_div_qr($qp, $n2p2_0, $110, $d2p3_0, $dn, $v_1);
    var $n2p2_1 = $n2p2_0;
    __label__ = 70;
    break;
   case 63:
    if (($dn | 0) > 199 & ($110 | 0) > 3999) {
      __label__ = 64;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 64:
    var $268 = $dn | 0;
    var $270 = $110 | 0;
    if ($268 * 3600 + $270 * 200 > $268 * $270) {
      __label__ = 65;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 65:
    var $276 = ___gmpn_dcpi1_div_qr($qp, $n2p2_0, $110, $d2p3_0, $dn, $dinv);
    var $n2p2_1 = $n2p2_0;
    __label__ = 70;
    break;
   case 66:
    var $278 = ___gmpn_mu_div_qr_itch($110, $dn, 0);
    var $279 = $278 << 2;
    if ($279 >>> 0 < 65536) {
      __label__ = 67;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 67:
    var $282 = STACKTOP;
    STACKTOP += $279;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $286 = $282;
    __label__ = 69;
    break;
   case 68:
    var $284 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $279);
    var $286 = $284;
    __label__ = 69;
    break;
   case 69:
    var $286;
    var $288 = ___gmpn_mu_div_qr($qp, $rp, $n2p2_0, $110, $d2p3_0, $dn, $286);
    var $n2p2_1 = $rp;
    __label__ = 70;
    break;
   case 70:
    var $n2p2_1;
    if (($cnt5_0 | 0) == 0) {
      __label__ = 72;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $292 = ___gmpn_rshift($rp, $n2p2_1, $dn, $cnt5_0);
    __label__ = 77;
    break;
   case 72:
    if (($dn | 0) == 0) {
      __label__ = 77;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $296 = HEAP32[$n2p2_1 >> 2];
    if (($105 | 0) == 0) {
      var $__dst13_1 = $rp;
      var $__x15_1 = $296;
      __label__ = 76;
      break;
    } else {
      var $__n12_0 = $105;
      var $__dst13_0 = $rp;
      var $n2p2_1_pn = $n2p2_1;
      var $__x15_0 = $296;
      __label__ = 74;
      break;
    }
   case 74:
    var $__x15_0;
    var $n2p2_1_pn;
    var $__dst13_0;
    var $__n12_0;
    var $__src14_0 = $n2p2_1_pn + 4 | 0;
    HEAP32[$__dst13_0 >> 2] = $__x15_0;
    var $299 = HEAP32[$__src14_0 >> 2];
    var $300 = $__n12_0 - 1 | 0;
    if (($300 | 0) == 0) {
      __label__ = 75;
      break;
    } else {
      var $__n12_0 = $300;
      var $__dst13_0 = $__dst13_0 + 4 | 0;
      var $n2p2_1_pn = $__src14_0;
      var $__x15_0 = $299;
      __label__ = 74;
      break;
    }
   case 75:
    var $__dst13_1 = $rp + ($105 << 2) | 0;
    var $__x15_1 = $299;
    __label__ = 76;
    break;
   case 76:
    var $__x15_1;
    var $__dst13_1;
    HEAP32[$__dst13_1 >> 2] = $__x15_1;
    __label__ = 77;
    break;
   case 77:
    var $303 = HEAP32[$__tmp_marker1 >> 2];
    if (($303 | 0) == 0) {
      __label__ = 181;
      break;
    } else {
      __label__ = 78;
      break;
    }
   case 78:
    ___gmp_tmp_reentrant_free($303);
    __label__ = 181;
    break;
   case 79:
    var $307 = $109 + $113 | 0;
    if (($307 | 0) == 0) {
      __label__ = 80;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 80:
    if (($dn | 0) == 0) {
      __label__ = 181;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 81:
    var $312 = HEAP32[$np >> 2];
    if (($105 | 0) == 0) {
      __label__ = 82;
      break;
    } else {
      var $__n20_0 = $105;
      var $__dst21_0 = $rp;
      var $np_pn11 = $np;
      var $__x23_0 = $312;
      __label__ = 83;
      break;
    }
   case 82:
    HEAP32[$rp >> 2] = $312;
    __label__ = 181;
    break;
   case 83:
    var $__x23_0;
    var $np_pn11;
    var $__dst21_0;
    var $__n20_0;
    var $__src22_0 = $np_pn11 + 4 | 0;
    HEAP32[$__dst21_0 >> 2] = $__x23_0;
    var $315 = HEAP32[$__src22_0 >> 2];
    var $316 = $__n20_0 - 1 | 0;
    if (($316 | 0) == 0) {
      __label__ = 84;
      break;
    } else {
      var $__n20_0 = $316;
      var $__dst21_0 = $__dst21_0 + 4 | 0;
      var $np_pn11 = $__src22_0;
      var $__x23_0 = $315;
      __label__ = 83;
      break;
    }
   case 84:
    var $_pre_pre = HEAP32[$__tmp_marker1 >> 2];
    HEAP32[$rp + ($105 << 2) >> 2] = $315;
    if (($_pre_pre | 0) == 0) {
      __label__ = 181;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 85:
    ___gmp_tmp_reentrant_free($_pre_pre);
    __label__ = 181;
    break;
   case 86:
    var $322 = $dn - $307 | 0;
    var $323 = HEAPU32[$106 >> 2];
    if (($323 | 0) > -1) {
      __label__ = 87;
      break;
    } else {
      __label__ = 99;
      break;
    }
   case 87:
    if ($323 >>> 0 < 65536) {
      __label__ = 88;
      break;
    } else {
      __label__ = 89;
      break;
    }
   case 88:
    var $329 = $323 >>> 0 < 256 ? 1 : 9;
    var $334 = $329;
    __label__ = 90;
    break;
   case 89:
    var $332 = $323 >>> 0 < 16777216 ? 17 : 25;
    var $334 = $332;
    __label__ = 90;
    break;
   case 90:
    var $334;
    var $337 = STRING_TABLE.___gmpn_clz_tab + ($323 >>> ($334 >>> 0)) | 0;
    var $340 = 33 - $334 - (HEAPU8[$337] & 255) | 0;
    var $341 = $307 << 2;
    if ($341 >>> 0 < 65536) {
      __label__ = 91;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 91:
    var $344 = STACKTOP;
    STACKTOP += $341;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $348 = $344;
    __label__ = 93;
    break;
   case 92:
    var $346 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $341);
    var $348 = $346;
    __label__ = 93;
    break;
   case 93:
    var $348;
    var $349 = $348;
    var $350 = $dp + ($322 << 2) | 0;
    var $351 = ___gmpn_lshift($349, $350, $307, $340);
    var $355 = 32 - $340 | 0;
    var $358 = HEAP32[$349 >> 2] | HEAPU32[$dp + ($322 - 1 << 2) >> 2] >>> ($355 >>> 0);
    HEAP32[$349 >> 2] = $358;
    var $359 = $307 << 1;
    var $361 = $307 << 3 | 4;
    if ($361 >>> 0 < 65536) {
      __label__ = 94;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 94:
    var $364 = STACKTOP;
    STACKTOP += $361;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $368 = $364;
    __label__ = 96;
    break;
   case 95:
    var $366 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $361);
    var $368 = $366;
    __label__ = 96;
    break;
   case 96:
    var $368;
    var $369 = $368;
    var $370 = $np + ($nn - $359 << 2) | 0;
    var $371 = ___gmpn_lshift($369, $370, $359, $340);
    if ($108) {
      __label__ = 97;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 97:
    HEAP32[$369 + ($359 << 2) >> 2] = $371;
    var $n2p16_0 = $368 + 4 | 0;
    var $d2p17_0 = $349;
    var $cnt19_0 = $340;
    __label__ = 108;
    break;
   case 98:
    var $382 = HEAP32[$369 >> 2] | HEAPU32[$np + ($102 - $359 << 2) >> 2] >>> ($355 >>> 0);
    HEAP32[$369 >> 2] = $382;
    var $n2p16_0 = $369;
    var $d2p17_0 = $349;
    var $cnt19_0 = $340;
    __label__ = 108;
    break;
   case 99:
    var $384 = $dp + ($322 << 2) | 0;
    var $385 = $307 << 1;
    var $387 = $307 << 3 | 4;
    if ($387 >>> 0 < 65536) {
      __label__ = 100;
      break;
    } else {
      __label__ = 101;
      break;
    }
   case 100:
    var $390 = STACKTOP;
    STACKTOP += $387;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $394 = $390;
    __label__ = 102;
    break;
   case 101:
    var $392 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $387);
    var $394 = $392;
    __label__ = 102;
    break;
   case 102:
    var $394;
    var $395 = $394;
    if (($385 | 0) == 0) {
      __label__ = 106;
      break;
    } else {
      __label__ = 103;
      break;
    }
   case 103:
    var $_sum = $nn - $385 | 0;
    var $scevgep80 = $394 + (($110 - $dn << 3) - 4) | 0;
    var $__n26_0 = $385 - 1 | 0;
    var $__dst27_0 = $395;
    var $__src28_0 = $np + ($_sum + 1 << 2) | 0;
    var $__x29_0 = HEAP32[$np + ($_sum << 2) >> 2];
    __label__ = 104;
    break;
   case 104:
    var $__x29_0;
    var $__src28_0;
    var $__dst27_0;
    var $__n26_0;
    HEAP32[$__dst27_0 >> 2] = $__x29_0;
    var $408 = HEAP32[$__src28_0 >> 2];
    var $409 = $__n26_0 - 1 | 0;
    if (($409 | 0) == 0) {
      __label__ = 105;
      break;
    } else {
      var $__n26_0 = $409;
      var $__dst27_0 = $__dst27_0 + 4 | 0;
      var $__src28_0 = $__src28_0 + 4 | 0;
      var $__x29_0 = $408;
      __label__ = 104;
      break;
    }
   case 105:
    HEAP32[$scevgep80 >> 2] = $408;
    __label__ = 106;
    break;
   case 106:
    if ($108) {
      __label__ = 107;
      break;
    } else {
      var $n2p16_0 = $395;
      var $d2p17_0 = $384;
      var $cnt19_0 = 0;
      __label__ = 108;
      break;
    }
   case 107:
    HEAP32[$395 + ($385 << 2) >> 2] = 0;
    var $n2p16_0 = $394 + 4 | 0;
    var $d2p17_0 = $384;
    var $cnt19_0 = 0;
    __label__ = 108;
    break;
   case 108:
    var $cnt19_0;
    var $d2p17_0;
    var $n2p16_0;
    if (($307 | 0) == 1) {
      __label__ = 109;
      break;
    } else if (($307 | 0) == 2) {
      __label__ = 116;
      break;
    } else {
      __label__ = 117;
      break;
    }
   case 109:
    var $419 = HEAPU32[$d2p17_0 >> 2];
    var $420 = $419 >>> 16;
    var $421 = $419 & 65535;
    var $423 = HEAPU32[$n2p16_0 + 4 >> 2];
    var $424 = Math.floor(($423 >>> 0) / ($420 >>> 0));
    var $425 = (i64Math.multiply($424, 0, $420, 0), i64Math.result[0]);
    var $426 = $423 - $425 | 0;
    var $427 = (i64Math.multiply($424, 0, $421, 0), i64Math.result[0]);
    var $429 = HEAPU32[$n2p16_0 >> 2];
    var $431 = $426 << 16 | $429 >>> 16;
    if ($431 >>> 0 < $427 >>> 0) {
      __label__ = 110;
      break;
    } else {
      var $__r134_0 = $431;
      var $__q132_0 = $424;
      __label__ = 112;
      break;
    }
   case 110:
    var $434 = $424 - 1 | 0;
    var $uadd8 = _llvm_uadd_with_overflow_i32($431, $419);
    var $435 = $uadd8.f0;
    var $436 = $uadd8.f1;
    if ($435 >>> 0 < $427 >>> 0 & ($436 ^ 1)) {
      __label__ = 111;
      break;
    } else {
      var $__r134_0 = $435;
      var $__q132_0 = $434;
      __label__ = 112;
      break;
    }
   case 111:
    var $__r134_0 = $435 + $419 | 0;
    var $__q132_0 = $424 - 2 | 0;
    __label__ = 112;
    break;
   case 112:
    var $__q132_0;
    var $__r134_0;
    var $442 = $__r134_0 - $427 | 0;
    var $443 = Math.floor(($442 >>> 0) / ($420 >>> 0));
    var $444 = (i64Math.multiply($443, 0, $420, 0), i64Math.result[0]);
    var $445 = $442 - $444 | 0;
    var $446 = (i64Math.multiply($443, 0, $421, 0), i64Math.result[0]);
    var $449 = $445 << 16 | $429 & 65535;
    if ($449 >>> 0 < $446 >>> 0) {
      __label__ = 113;
      break;
    } else {
      var $__r035_0 = $449;
      var $__q033_0 = $443;
      __label__ = 115;
      break;
    }
   case 113:
    var $452 = $443 - 1 | 0;
    var $uadd7 = _llvm_uadd_with_overflow_i32($449, $419);
    var $453 = $uadd7.f0;
    var $454 = $uadd7.f1;
    if ($453 >>> 0 < $446 >>> 0 & ($454 ^ 1)) {
      __label__ = 114;
      break;
    } else {
      var $__r035_0 = $453;
      var $__q033_0 = $452;
      __label__ = 115;
      break;
    }
   case 114:
    var $__r035_0 = $453 + $419 | 0;
    var $__q033_0 = $443 - 2 | 0;
    __label__ = 115;
    break;
   case 115:
    var $__q033_0;
    var $__r035_0;
    HEAP32[$n2p16_0 >> 2] = $__r035_0 - $446 | 0;
    HEAP32[$qp >> 2] = $__q033_0 | $__q132_0 << 16;
    __label__ = 141;
    break;
   case 116:
    var $464 = ___gmpn_divrem_2($qp, 0, $n2p16_0, 4, $d2p17_0);
    __label__ = 141;
    break;
   case 117:
    var $466 = $307 - 1 | 0;
    var $468 = HEAPU32[$d2p17_0 + ($466 << 2) >> 2];
    var $469 = $468 >>> 16;
    var $470 = $468 & 65535;
    var $471 = $468 ^ -1;
    var $472 = Math.floor(($471 >>> 0) / ($469 >>> 0));
    var $473 = (i64Math.multiply($472, 0, $469, 0), i64Math.result[0]);
    var $474 = $471 - $473 | 0;
    var $475 = (i64Math.multiply($472, 0, $470, 0), i64Math.result[0]);
    var $477 = $474 << 16 | 65535;
    if ($477 >>> 0 < $475 >>> 0) {
      __label__ = 118;
      break;
    } else {
      var $__r147_0 = $477;
      var $__q145_0 = $472;
      __label__ = 120;
      break;
    }
   case 118:
    var $480 = $472 - 1 | 0;
    var $uadd6 = _llvm_uadd_with_overflow_i32($477, $468);
    var $481 = $uadd6.f0;
    var $482 = $uadd6.f1;
    if ($481 >>> 0 < $475 >>> 0 & ($482 ^ 1)) {
      __label__ = 119;
      break;
    } else {
      var $__r147_0 = $481;
      var $__q145_0 = $480;
      __label__ = 120;
      break;
    }
   case 119:
    var $__r147_0 = $481 + $468 | 0;
    var $__q145_0 = $472 - 2 | 0;
    __label__ = 120;
    break;
   case 120:
    var $__q145_0;
    var $__r147_0;
    var $488 = $__r147_0 - $475 | 0;
    var $489 = Math.floor(($488 >>> 0) / ($469 >>> 0));
    var $490 = (i64Math.multiply($489, 0, $469, 0), i64Math.result[0]);
    var $491 = $488 - $490 | 0;
    var $492 = (i64Math.multiply($489, 0, $470, 0), i64Math.result[0]);
    var $494 = $491 << 16 | 65535;
    if ($494 >>> 0 < $492 >>> 0) {
      __label__ = 121;
      break;
    } else {
      var $__q046_0 = $489;
      __label__ = 122;
      break;
    }
   case 121:
    var $uadd5 = _llvm_uadd_with_overflow_i32($494, $468);
    var $497 = $uadd5.f1;
    var $498 = $uadd5.f0;
    var $_31_v = $498 >>> 0 < $492 >>> 0 & ($497 ^ 1) ? -2 : -1;
    var $__q046_0 = $_31_v + $489 | 0;
    __label__ = 122;
    break;
   case 122:
    var $__q046_0;
    var $502 = $__q046_0 | $__q145_0 << 16;
    var $503 = (i64Math.multiply($468, 0, $502, 0), i64Math.result[0]);
    var $506 = HEAPU32[$d2p17_0 + ($307 - 2 << 2) >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($503, $506);
    var $507 = $uadd.f0;
    var $508 = $uadd.f1;
    if ($508) {
      __label__ = 123;
      break;
    } else {
      var $p38_0 = $507;
      var $v37_0 = $502;
      __label__ = 124;
      break;
    }
   case 123:
    var $511 = ($507 >>> 0 >= $468 >>> 0) << 31 >> 31;
    var $p38_0 = $507 - $468 - ($511 & $468) | 0;
    var $v37_0 = $502 - 1 + $511 | 0;
    __label__ = 124;
    break;
   case 124:
    var $v37_0;
    var $p38_0;
    var $518 = $506 & 65535;
    var $519 = $506 >>> 16;
    var $520 = $v37_0 & 65535;
    var $521 = $v37_0 >>> 16;
    var $522 = (i64Math.multiply($518, 0, $520, 0), i64Math.result[0]);
    var $523 = (i64Math.multiply($518, 0, $521, 0), i64Math.result[0]);
    var $524 = (i64Math.multiply($519, 0, $520, 0), i64Math.result[0]);
    var $525 = (i64Math.multiply($519, 0, $521, 0), i64Math.result[0]);
    var $527 = ($522 >>> 16) + $523 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($527, $524);
    var $528 = $uadd1.f0;
    var $529 = $uadd1.f1;
    var $__x353_0 = $529 ? $525 + 65536 | 0 : $525;
    var $532 = $__x353_0 + ($528 >>> 16) | 0;
    var $535 = $528 << 16 | $522 & 65535;
    var $uadd2 = _llvm_uadd_with_overflow_i32($p38_0, $532);
    var $536 = $uadd2.f0;
    var $537 = $uadd2.f1;
    if ($537) {
      __label__ = 125;
      break;
    } else {
      var $v37_1 = $v37_0;
      __label__ = 127;
      break;
    }
   case 125:
    var $539 = $v37_0 - 1 | 0;
    if ($536 >>> 0 < $468 >>> 0) {
      var $v37_1 = $539;
      __label__ = 127;
      break;
    } else {
      __label__ = 126;
      break;
    }
   case 126:
    var $_35 = $536 >>> 0 <= $468 >>> 0 & $535 >>> 0 < $506 >>> 0 ? $539 : $v37_0 - 2 | 0;
    var $v37_1 = $_35;
    __label__ = 127;
    break;
   case 127:
    var $v37_1;
    HEAP32[$dinv >> 2] = $v37_1;
    if (($307 | 0) > 49) {
      __label__ = 129;
      break;
    } else {
      __label__ = 128;
      break;
    }
   case 128:
    var $549 = $307 << 1;
    var $550 = ___gmpn_sbpi1_div_qr($qp, $n2p16_0, $549, $d2p17_0, $307, $v37_1);
    __label__ = 141;
    break;
   case 129:
    var $553 = $307 << 1;
    if (($307 | 0) > 1999) {
      __label__ = 131;
      break;
    } else {
      __label__ = 130;
      break;
    }
   case 130:
    var $555 = ___gmpn_dcpi1_div_qr($qp, $n2p16_0, $553, $d2p17_0, $307, $dinv);
    __label__ = 141;
    break;
   case 131:
    var $557 = ___gmpn_mu_div_qr_itch($553, $307, 0);
    var $558 = $557 << 2;
    if ($558 >>> 0 < 65536) {
      __label__ = 132;
      break;
    } else {
      __label__ = 133;
      break;
    }
   case 132:
    var $561 = STACKTOP;
    STACKTOP += $558;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $565 = $561;
    __label__ = 134;
    break;
   case 133:
    var $563 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $558);
    var $565 = $563;
    __label__ = 134;
    break;
   case 134:
    var $565;
    var $566 = $565;
    if (($np | 0) == ($rp | 0)) {
      __label__ = 135;
      break;
    } else {
      var $r2p_0 = $rp;
      __label__ = 136;
      break;
    }
   case 135:
    var $r2p_0 = $np + ($nn - $307 << 2) | 0;
    __label__ = 136;
    break;
   case 136:
    var $r2p_0;
    var $572 = ___gmpn_mu_div_qr($qp, $r2p_0, $n2p16_0, $553, $d2p17_0, $307, $566);
    var $573 = HEAPU32[$r2p_0 >> 2];
    if (($466 | 0) == 0) {
      var $__x65_1 = $573;
      var $__dst63_1 = $n2p16_0;
      __label__ = 140;
      break;
    } else {
      __label__ = 137;
      break;
    }
   case 137:
    var $576 = $110 - 1 - $dn | 0;
    var $__x65_0 = $573;
    var $r2p_0_pn = $r2p_0;
    var $__dst63_0 = $n2p16_0;
    var $__n62_0 = $466;
    __label__ = 138;
    break;
   case 138:
    var $__n62_0;
    var $__dst63_0;
    var $r2p_0_pn;
    var $__x65_0;
    var $__src64_0 = $r2p_0_pn + 4 | 0;
    HEAP32[$__dst63_0 >> 2] = $__x65_0;
    var $579 = HEAP32[$__src64_0 >> 2];
    var $580 = $__n62_0 - 1 | 0;
    if (($580 | 0) == 0) {
      __label__ = 139;
      break;
    } else {
      var $__x65_0 = $579;
      var $r2p_0_pn = $__src64_0;
      var $__dst63_0 = $__dst63_0 + 4 | 0;
      var $__n62_0 = $580;
      __label__ = 138;
      break;
    }
   case 139:
    var $__x65_1 = $579;
    var $__dst63_1 = $n2p16_0 + ($576 << 2) | 0;
    __label__ = 140;
    break;
   case 140:
    var $__dst63_1;
    var $__x65_1;
    HEAP32[$__dst63_1 >> 2] = $__x65_1;
    __label__ = 141;
    break;
   case 141:
    var $584 = $322 - 2 | 0;
    if (($584 | 0) < 0) {
      var $dl_0 = 0;
      __label__ = 143;
      break;
    } else {
      __label__ = 142;
      break;
    }
   case 142:
    var $dl_0 = HEAPU32[$dp + ($584 << 2) >> 2] >>> 1;
    __label__ = 143;
    break;
   case 143:
    var $dl_0;
    var $590 = $322 - 1 | 0;
    var $591 = $dp + ($590 << 2) | 0;
    var $597 = HEAP32[$591 >> 2] << $cnt19_0 | $dl_0 >>> (($cnt19_0 & 31 ^ 31) >>> 0);
    var $598 = $307 - 1 | 0;
    var $600 = HEAPU32[$qp + ($598 << 2) >> 2];
    var $601 = $597 & 65535;
    var $602 = $597 >>> 16;
    var $603 = $600 & 65535;
    var $604 = $600 >>> 16;
    var $605 = (i64Math.multiply($601, 0, $603, 0), i64Math.result[0]);
    var $606 = (i64Math.multiply($601, 0, $604, 0), i64Math.result[0]);
    var $607 = (i64Math.multiply($602, 0, $603, 0), i64Math.result[0]);
    var $608 = (i64Math.multiply($602, 0, $604, 0), i64Math.result[0]);
    var $610 = ($605 >>> 16) + $606 | 0;
    var $uadd3 = _llvm_uadd_with_overflow_i32($610, $607);
    var $611 = $uadd3.f0;
    var $612 = $uadd3.f1;
    var $__x370_0 = $612 ? $608 + 65536 | 0 : $608;
    if (HEAPU32[$n2p16_0 + ($598 << 2) >> 2] >>> 0 < ($__x370_0 + ($611 >>> 16) | 0) >>> 0) {
      var $__p_0 = $qp;
      __label__ = 144;
      break;
    } else {
      var $rn_0 = $307;
      __label__ = 148;
      break;
    }
   case 144:
    var $__p_0;
    var $619 = HEAPU32[$__p_0 >> 2];
    HEAP32[$__p_0 >> 2] = $619 - 1 | 0;
    if (($619 | 0) == 0) {
      __label__ = 145;
      break;
    } else {
      __label__ = 146;
      break;
    }
   case 145:
    var $__p_0 = $__p_0 + 4 | 0;
    __label__ = 144;
    break;
   case 146:
    var $624 = ___gmpn_add_n($n2p16_0, $n2p16_0, $d2p17_0, $307);
    if (($624 | 0) == 0) {
      var $rn_0 = $307;
      __label__ = 148;
      break;
    } else {
      __label__ = 147;
      break;
    }
   case 147:
    HEAP32[$n2p16_0 + ($307 << 2) >> 2] = $624;
    var $rn_0 = $307 + 1 | 0;
    __label__ = 148;
    break;
   case 148:
    var $rn_0;
    if (($cnt19_0 | 0) == 0) {
      var $in_0 = $322;
      var $rn_2 = $rn_0;
      var $quotient_too_large_1 = 0;
      __label__ = 154;
      break;
    } else {
      __label__ = 149;
      break;
    }
   case 149:
    var $633 = ___gmpn_lshift($n2p16_0, $n2p16_0, $rn_0, 32 - $cnt19_0 | 0);
    var $636 = -1 >>> ($cnt19_0 >>> 0);
    var $639 = HEAP32[$n2p16_0 >> 2] | HEAP32[$np + ($590 << 2) >> 2] & $636;
    HEAP32[$n2p16_0 >> 2] = $639;
    var $641 = HEAP32[$591 >> 2] & $636;
    var $642 = ___gmpn_submul_1($n2p16_0, $qp, $307, $641);
    if (($307 | 0) == ($rn_0 | 0)) {
      __label__ = 153;
      break;
    } else {
      __label__ = 150;
      break;
    }
   case 150:
    var $645 = $n2p16_0 + ($307 << 2) | 0;
    var $646 = HEAPU32[$645 >> 2];
    if ($646 >>> 0 < $642 >>> 0) {
      __label__ = 151;
      break;
    } else {
      __label__ = 152;
      break;
    }
   case 151:
    ___gmp_assert_fail(STRING_TABLE.__str73 | 0, 332, STRING_TABLE.__str275 | 0);
    throw "Reached an unreachable!";
   case 152:
    var $650 = $646 - $642 | 0;
    HEAP32[$645 >> 2] = $650;
    var $in_0 = $590;
    var $rn_2 = $rn_0;
    var $quotient_too_large_1 = 0;
    __label__ = 154;
    break;
   case 153:
    var $652 = $633 - $642 | 0;
    HEAP32[$n2p16_0 + ($307 << 2) >> 2] = $652;
    var $in_0 = $590;
    var $rn_2 = $307 + 1 | 0;
    var $quotient_too_large_1 = $633 >>> 0 < $642 >>> 0 & 1;
    __label__ = 154;
    break;
   case 154:
    var $quotient_too_large_1;
    var $rn_2;
    var $in_0;
    var $658 = $dn << 2;
    if ($658 >>> 0 < 65536) {
      __label__ = 155;
      break;
    } else {
      __label__ = 156;
      break;
    }
   case 155:
    var $661 = STACKTOP;
    STACKTOP += $658;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $665 = $661;
    __label__ = 157;
    break;
   case 156:
    var $663 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $658);
    var $665 = $663;
    __label__ = 157;
    break;
   case 157:
    var $665;
    var $666 = $665;
    if (($in_0 | 0) < ($307 | 0)) {
      __label__ = 158;
      break;
    } else {
      __label__ = 167;
      break;
    }
   case 158:
    if (($in_0 | 0) == 0) {
      __label__ = 159;
      break;
    } else {
      __label__ = 166;
      break;
    }
   case 159:
    if (($rn_2 | 0) == 0) {
      __label__ = 164;
      break;
    } else {
      __label__ = 160;
      break;
    }
   case 160:
    var $673 = $rn_2 - 1 | 0;
    var $674 = HEAPU32[$n2p16_0 >> 2];
    if (($673 | 0) == 0) {
      var $__x82_1 = $674;
      var $__dst80_1 = $rp;
      __label__ = 163;
      break;
    } else {
      var $__x82_0 = $674;
      var $n2p16_0_pn4 = $n2p16_0;
      var $__dst80_0 = $rp;
      var $__n79_0 = $673;
      __label__ = 161;
      break;
    }
   case 161:
    var $__n79_0;
    var $__dst80_0;
    var $n2p16_0_pn4;
    var $__x82_0;
    var $__src81_0 = $n2p16_0_pn4 + 4 | 0;
    HEAP32[$__dst80_0 >> 2] = $__x82_0;
    var $677 = HEAP32[$__src81_0 >> 2];
    var $678 = $__n79_0 - 1 | 0;
    if (($678 | 0) == 0) {
      __label__ = 162;
      break;
    } else {
      var $__x82_0 = $677;
      var $n2p16_0_pn4 = $__src81_0;
      var $__dst80_0 = $__dst80_0 + 4 | 0;
      var $__n79_0 = $678;
      __label__ = 161;
      break;
    }
   case 162:
    var $__x82_1 = $677;
    var $__dst80_1 = $rp + ($673 << 2) | 0;
    __label__ = 163;
    break;
   case 163:
    var $__dst80_1;
    var $__x82_1;
    HEAP32[$__dst80_1 >> 2] = $__x82_1;
    __label__ = 164;
    break;
   case 164:
    if (($rn_2 | 0) == ($dn | 0)) {
      var $quotient_too_large_2 = $quotient_too_large_1;
      __label__ = 175;
      break;
    } else {
      __label__ = 165;
      break;
    }
   case 165:
    ___gmp_assert_fail(STRING_TABLE.__str73 | 0, 353, STRING_TABLE.__str376 | 0);
    throw "Reached an unreachable!";
   case 166:
    var $685 = ___gmpn_mul($666, $qp, $307, $dp, $in_0);
    __label__ = 168;
    break;
   case 167:
    var $687 = ___gmpn_mul($666, $dp, $in_0, $qp, $307);
    __label__ = 168;
    break;
   case 168:
    var $690 = ___gmpn_sub($n2p16_0, $n2p16_0, $rn_2, $666 + ($in_0 << 2) | 0, $307);
    if (($in_0 | 0) == ($dn | 0)) {
      __label__ = 169;
      break;
    } else {
      __label__ = 170;
      break;
    }
   case 169:
    var $_pre_phi = $rp + ($in_0 << 2) | 0;
    __label__ = 174;
    break;
   case 170:
    var $694 = $dn - $in_0 - 1 | 0;
    var $695 = $rp + ($in_0 << 2) | 0;
    var $696 = HEAP32[$n2p16_0 >> 2];
    if (($694 | 0) == 0) {
      var $__x86_1 = $696;
      var $__dst84_1 = $695;
      __label__ = 173;
      break;
    } else {
      var $__x86_0 = $696;
      var $n2p16_0_pn = $n2p16_0;
      var $__dst84_0 = $695;
      var $__n83_0 = $694;
      __label__ = 171;
      break;
    }
   case 171:
    var $__n83_0;
    var $__dst84_0;
    var $n2p16_0_pn;
    var $__x86_0;
    var $__src85_0 = $n2p16_0_pn + 4 | 0;
    HEAP32[$__dst84_0 >> 2] = $__x86_0;
    var $699 = HEAP32[$__src85_0 >> 2];
    var $700 = $__n83_0 - 1 | 0;
    if (($700 | 0) == 0) {
      __label__ = 172;
      break;
    } else {
      var $__x86_0 = $699;
      var $n2p16_0_pn = $__src85_0;
      var $__dst84_0 = $__dst84_0 + 4 | 0;
      var $__n83_0 = $700;
      __label__ = 171;
      break;
    }
   case 172:
    var $__x86_1 = $699;
    var $__dst84_1 = $rp + ($105 << 2) | 0;
    __label__ = 173;
    break;
   case 173:
    var $__dst84_1;
    var $__x86_1;
    HEAP32[$__dst84_1 >> 2] = $__x86_1;
    var $_pre_phi = $695;
    __label__ = 174;
    break;
   case 174:
    var $_pre_phi;
    var $704 = ___gmpn_sub_n($rp, $np, $666, $in_0);
    var $705 = ___gmpn_sub_1($_pre_phi, $_pre_phi, $rn_2, $704);
    var $quotient_too_large_2 = $690 | $quotient_too_large_1 | $705;
    __label__ = 175;
    break;
   case 175:
    var $quotient_too_large_2;
    if (($quotient_too_large_2 | 0) == 0) {
      __label__ = 179;
      break;
    } else {
      var $__p88_0 = $qp;
      __label__ = 176;
      break;
    }
   case 176:
    var $__p88_0;
    var $710 = HEAP32[$__p88_0 >> 2];
    var $711 = $710 - 1 | 0;
    HEAP32[$__p88_0 >> 2] = $711;
    if (($710 | 0) == 0) {
      __label__ = 177;
      break;
    } else {
      __label__ = 178;
      break;
    }
   case 177:
    var $__p88_0 = $__p88_0 + 4 | 0;
    __label__ = 176;
    break;
   case 178:
    var $715 = ___gmpn_add_n($rp, $rp, $dp, $dn);
    __label__ = 179;
    break;
   case 179:
    var $716 = HEAP32[$__tmp_marker1 >> 2];
    if (($716 | 0) == 0) {
      __label__ = 181;
      break;
    } else {
      __label__ = 180;
      break;
    }
   case 180:
    ___gmp_tmp_reentrant_free($716);
    __label__ = 181;
    break;
   case 181:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_tdiv_qr["X"] = 1;

function ___gmp_get_memory_functions($alloc_func, $realloc_func, $free_func) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($alloc_func | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = HEAP32[___gmp_allocate_func >> 2];
    HEAP32[$alloc_func >> 2] = $3;
    __label__ = 4;
    break;
   case 4:
    if (($realloc_func | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $7 = HEAP32[___gmp_reallocate_func >> 2];
    HEAP32[$realloc_func >> 2] = $7;
    __label__ = 6;
    break;
   case 6:
    if (($free_func | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $11 = HEAP32[___gmp_free_func >> 2];
    HEAP32[$free_func >> 2] = $11;
    __label__ = 8;
    break;
   case 8:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_set_memory_functions($alloc_func, $realloc_func, $free_func) {
  var $__gmp_default_allocate_alloc_func = ($alloc_func | 0) == 0 ? 2 : $alloc_func;
  var $_01 = ($realloc_func | 0) == 0 ? 4 : $realloc_func;
  var $__gmp_default_free_free_func = ($free_func | 0) == 0 ? 6 : $free_func;
  HEAP32[___gmp_allocate_func >> 2] = $__gmp_default_allocate_alloc_func;
  HEAP32[___gmp_reallocate_func >> 2] = $_01;
  HEAP32[___gmp_free_func >> 2] = $__gmp_default_free_free_func;
  return;
}

function ___gmpn_get_d($up, $size, $sign, $exp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($size | 0) == 0) {
      var $_0 = 0;
      __label__ = 21;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = $size << 5;
    if ($3 >>> 0 > (2147483647 - $exp | 0) >>> 0) {
      var $_03 = 1024;
      var $mhi_3 = 0;
      var $mlo_3 = 0;
      __label__ = 20;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_sum = $size - 1 | 0;
    var $7 = $up + ($_sum << 2) | 0;
    var $8 = HEAPU32[$7 >> 2];
    if ($8 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $12 = $8 >>> 0 < 256 ? 1 : 9;
    var $17 = $12;
    __label__ = 7;
    break;
   case 6:
    var $15 = $8 >>> 0 < 16777216 ? 17 : 25;
    var $17 = $15;
    __label__ = 7;
    break;
   case 7:
    var $17;
    var $20 = STRING_TABLE.___gmpn_clz_tab + ($8 >>> ($17 >>> 0)) | 0;
    var $23 = 33 - $17 - (HEAPU8[$20] & 255) | 0;
    var $25 = $3 - 1 + $exp - $23 | 0;
    var $26 = $8 << $23;
    var $27 = $26 >>> 11;
    if (($23 | 0) < 11) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $_01 = $7;
    var $_02 = $_sum;
    var $nbits_0_in = -$23 | 0;
    var $mhi_0 = $27;
    var $mlo_0 = $26 << 21;
    __label__ = 11;
    break;
   case 9:
    if (($_sum | 0) == 0) {
      var $mhi_1 = $27;
      var $mlo_1 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $34 = 32 - $23 | 0;
    var $_sum13 = $size - 2 | 0;
    var $35 = $up + ($_sum13 << 2) | 0;
    var $36 = HEAPU32[$35 >> 2];
    var $_01 = $35;
    var $_02 = $_sum13;
    var $nbits_0_in = $34;
    var $mhi_0 = ($36 >>> ($34 >>> 0) | $26) >>> 11;
    var $mlo_0 = $36 << $23 - 11;
    __label__ = 11;
    break;
   case 11:
    var $mlo_0;
    var $mhi_0;
    var $nbits_0_in;
    var $_02;
    var $_01;
    var $nbits_0 = $nbits_0_in + 11 | 0;
    if (($nbits_0 | 0) > 31 | ($_02 | 0) == 0) {
      var $mhi_1 = $mhi_0;
      var $mlo_1 = $mlo_0;
      __label__ = 14;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $49 = HEAPU32[$_01 - 4 >> 2] >>> ($nbits_0 >>> 0) | $mlo_0;
    if (($nbits_0 | 0) > -1 | ($_02 | 0) == 1) {
      var $mhi_1 = $mhi_0;
      var $mlo_1 = $49;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $mhi_1 = $mhi_0;
    var $mlo_1 = HEAPU32[$_01 - 8 >> 2] >>> (($nbits_0_in + 43 | 0) >>> 0) | $49;
    __label__ = 14;
    break;
   case 14:
    var $mlo_1;
    var $mhi_1;
    if (($25 | 0) > 1023) {
      var $_03 = 1024;
      var $mhi_3 = 0;
      var $mlo_3 = 0;
      __label__ = 20;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if (($25 | 0) < -1022) {
      __label__ = 16;
      break;
    } else {
      var $_03 = $25;
      var $mhi_3 = $mhi_1;
      var $mlo_3 = $mlo_1;
      __label__ = 20;
      break;
    }
   case 16:
    if (($25 | 0) < -1074) {
      var $_0 = 0;
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $65 = -1022 - $25 | 0;
    var $66 = ($65 | 0) > 31;
    var $mhi_1_mlo_1 = $66 ? $mhi_1 : $mlo_1;
    var $_mhi_1 = $66 ? 0 : $mhi_1;
    var $_ = $66 ? $65 - 32 | 0 : $65;
    var $68 = $mhi_1_mlo_1 >>> ($_ >>> 0);
    if (($_ | 0) == 0) {
      var $74 = 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $74 = $_mhi_1 << 32 - $_;
    __label__ = 19;
    break;
   case 19:
    var $74;
    var $_03 = -1023;
    var $mhi_3 = $_mhi_1 >>> ($_ >>> 0);
    var $mlo_3 = $74 | $68;
    __label__ = 20;
    break;
   case 20:
    var $mlo_3;
    var $mhi_3;
    var $_03;
    var $ins$1 = $mhi_3 & 1048575 | $sign & -2147483648 | ($_03 << 20) + 1072693248 & 2146435072 | 0;
    var $87 = (tempDoubleI32[0] = 0 | $mlo_3, tempDoubleI32[1] = $ins$1, tempDoubleF64[0]);
    var $_0 = $87;
    __label__ = 21;
    break;
   case 21:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_get_d["X"] = 1;

function ___gmpf_abs($r, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($r | 0) == ($u | 0)) {
      var $size_1 = $5;
      __label__ = 11;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $10 = HEAP32[$r >> 2] + 1 | 0;
    var $12 = HEAP32[$r + 12 >> 2];
    var $14 = HEAP32[$u + 12 >> 2];
    if (($5 | 0) > ($10 | 0)) {
      __label__ = 4;
      break;
    } else {
      var $size_0 = $5;
      var $up_0 = $14;
      __label__ = 5;
      break;
    }
   case 4:
    var $size_0 = $10;
    var $up_0 = $14 + ($5 - $10 << 2) | 0;
    __label__ = 5;
    break;
   case 5:
    var $up_0;
    var $size_0;
    if (($size_0 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $22 = $size_0 - 1 | 0;
    var $23 = HEAP32[$up_0 >> 2];
    if (($22 | 0) == 0) {
      var $__x_1 = $23;
      var $__dst_1 = $12;
      __label__ = 9;
      break;
    } else {
      var $__x_0 = $23;
      var $up_0_pn = $up_0;
      var $__dst_0 = $12;
      var $__n_0 = $22;
      __label__ = 7;
      break;
    }
   case 7:
    var $__n_0;
    var $__dst_0;
    var $up_0_pn;
    var $__x_0;
    var $__src_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $26 = HEAP32[$__src_0 >> 2];
    var $27 = $__n_0 - 1 | 0;
    if (($27 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $26;
      var $up_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $27;
      __label__ = 7;
      break;
    }
   case 8:
    var $__x_1 = $26;
    var $__dst_1 = $12 + ($22 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 10;
    break;
   case 10:
    var $32 = HEAP32[$u + 8 >> 2];
    HEAP32[$r + 8 >> 2] = $32;
    var $size_1 = $size_0;
    __label__ = 11;
    break;
   case 11:
    var $size_1;
    HEAP32[$r + 4 >> 2] = $size_1;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_abs["X"] = 1;

function ___gmp_assert_header($filename, $linenum) {
  var __stackBase__ = STACKTOP;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($filename | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (HEAP8[$filename] << 24 >> 24 == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $6 = HEAP32[_stderr >> 2];
    var $7 = _fprintf($6, STRING_TABLE.__str81 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
    if (($linenum | 0) == -1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $10 = HEAP32[_stderr >> 2];
    var $11 = _fprintf($10, STRING_TABLE.__str182 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $linenum, tempInt));
    __label__ = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_divexact_by3($dst, $src, $size) {
  var $1 = ___gmpn_bdiv_dbm1c($dst, $src, $size, 1431655765, 0);
  return $1 & 3;
}

function ___gmpn_divmod_1($dst, $src, $size, $divisor) {
  var $1 = ___gmpn_divrem_1($dst, 0, $src, $size, $divisor);
  return $1;
}

function ___gmpz_legendre($a, $b) {
  var $1 = ___gmpz_jacobi($a, $b);
  return $1;
}

function ___gmp_extract_double($rp, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($d == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    tempDoubleF64[0] = $d;
    var $3$0 = tempDoubleI32[0];
    var $3$1 = tempDoubleI32[1];
    var $6 = ($3$1 >>> 20 | 0 << 12) & 2047;
    var $10 = $3$0;
    var $13 = $10 >>> 21 | ($3$0 >>> 21 | $3$1 << 11) & 2147481600 | -2147483648;
    var $14 = $10 << 11;
    if (($6 | 0) == 0) {
      var $exp_0 = 1;
      var $manl_0 = $14;
      var $manh_0 = $13;
      __label__ = 4;
      break;
    } else {
      var $exp_1 = $6;
      var $manl_1 = $14;
      var $manh_1 = $13;
      __label__ = 5;
      break;
    }
   case 4:
    var $manh_0;
    var $manl_0;
    var $exp_0;
    var $16 = $manh_0 << 1;
    var $18 = $manl_0 >>> 31 | $16;
    var $19 = $manl_0 << 1;
    var $20 = $exp_0 - 1 | 0;
    if (($16 | 0) > -1) {
      var $exp_0 = $20;
      var $manl_0 = $19;
      var $manh_0 = $18;
      __label__ = 4;
      break;
    } else {
      var $exp_1 = $20;
      var $manl_1 = $19;
      var $manh_1 = $18;
      __label__ = 5;
      break;
    }
   case 5:
    var $manh_1;
    var $manl_1;
    var $exp_1;
    var $22 = $exp_1 + 1026 | 0;
    var $23 = $22 & 31;
    var $24 = ($22 | 0) / 32 & -1;
    if (($23 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $28 = 32 - $23 | 0;
    HEAP32[$rp + 8 >> 2] = $manh_1 >>> ($28 >>> 0);
    HEAP32[$rp + 4 >> 2] = $manl_1 >>> ($28 >>> 0) | $manh_1 << $23;
    var $exp_2 = $24 - 63 | 0;
    var $storemerge = $manl_1 << $23;
    __label__ = 8;
    break;
   case 7:
    HEAP32[$rp + 8 >> 2] = $manh_1;
    HEAP32[$rp + 4 >> 2] = $manl_1;
    var $exp_2 = $24 - 64 | 0;
    var $storemerge = 0;
    __label__ = 8;
    break;
   case 8:
    var $storemerge;
    var $exp_2;
    HEAP32[$rp >> 2] = $storemerge;
    var $_0 = $exp_2;
    __label__ = 10;
    break;
   case 9:
    var $rp7 = $rp;
    HEAP32[$rp7 >> 2] = 0;
    HEAP32[$rp7 + 4 >> 2] = 0;
    HEAP32[$rp7 + 8 >> 2] = 0;
    var $_0 = 0;
    __label__ = 10;
    break;
   case 10:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_extract_double["X"] = 1;

function ___gmp_default_free($blk_ptr, $blk_size) {
  _free($blk_ptr);
  return;
}

function ___gmpf_add($r, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $v_negated = __stackBase__ + 4;
    var $2 = HEAP32[$u + 4 >> 2];
    var $4 = HEAP32[$v + 4 >> 2];
    if (($2 | 0) == 0) {
      var $_01 = $v;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $_01;
    if (($_01 | 0) == ($r | 0)) {
      __label__ = 60;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    ___gmpf_set($r, $_01);
    __label__ = 60;
    break;
   case 5:
    if (($4 | 0) == 0) {
      var $_01 = $u;
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($4 ^ $2 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $15 = -$4 | 0;
    HEAP32[$v_negated + 4 >> 2] = $15;
    var $18 = HEAP32[$v + 8 >> 2];
    HEAP32[$v_negated + 8 >> 2] = $18;
    var $21 = HEAP32[$v + 12 >> 2];
    HEAP32[$v_negated + 12 >> 2] = $21;
    ___gmpf_sub($r, $u, $v_negated);
    __label__ = 60;
    break;
   case 8:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $24 = ($2 | 0) < 0;
    var $26 = HEAP32[$u + 8 >> 2];
    var $28 = HEAP32[$v + 8 >> 2];
    var $29 = ($26 | 0) < ($28 | 0);
    var $_ = $29 ? $26 : $28;
    var $_2 = $29 ? $28 : $26;
    var $_3 = $29 ? $2 : $4;
    var $_4 = $29 ? $4 : $2;
    var $u_v = $29 ? $u : $v;
    var $v_u = $29 ? $v : $u;
    var $32 = ($_4 | 0) > -1 ? $_4 : -$_4 | 0;
    var $35 = ($_3 | 0) > -1 ? $_3 : -$_3 | 0;
    var $37 = HEAP32[$v_u + 12 >> 2];
    var $39 = HEAP32[$u_v + 12 >> 2];
    var $41 = HEAP32[$r + 12 >> 2];
    var $43 = HEAPU32[$r >> 2];
    var $44 = $_2 - $_ | 0;
    if (($32 | 0) > ($43 | 0)) {
      __label__ = 9;
      break;
    } else {
      var $up_0 = $37;
      var $usize_1 = $32;
      __label__ = 10;
      break;
    }
   case 9:
    var $up_0 = $37 + ($32 - $43 << 2) | 0;
    var $usize_1 = $43;
    __label__ = 10;
    break;
   case 10:
    var $usize_1;
    var $up_0;
    var $50 = $44 + $35 | 0;
    if (($50 | 0) > ($43 | 0)) {
      __label__ = 11;
      break;
    } else {
      var $vp_0 = $39;
      var $vsize_1 = $35;
      __label__ = 12;
      break;
    }
   case 11:
    var $vp_0 = $39 + ($50 - $43 << 2) | 0;
    var $vsize_1 = $43 - $44 | 0;
    __label__ = 12;
    break;
   case 12:
    var $vsize_1;
    var $vp_0;
    var $57 = $43 << 2;
    if ($57 >>> 0 < 65536) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $60 = STACKTOP;
    STACKTOP += $57;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $64 = $60;
    __label__ = 15;
    break;
   case 14:
    var $62 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $57);
    var $64 = $62;
    __label__ = 15;
    break;
   case 15:
    var $64;
    var $65 = $64;
    if (($44 | 0) < ($43 | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if (($41 | 0) == ($up_0 | 0) | ($usize_1 | 0) == 0) {
      var $rsize_1 = $usize_1;
      var $uexp_0 = $_2;
      __label__ = 58;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $71 = $usize_1 - 1 | 0;
    var $72 = HEAPU32[$up_0 >> 2];
    if (($71 | 0) == 0) {
      var $__dst_1 = $41;
      var $__x_1 = $72;
      __label__ = 20;
      break;
    } else {
      var $__n_0 = $71;
      var $__dst_0 = $41;
      var $up_0_pn4 = $up_0;
      var $__x_0 = $72;
      __label__ = 18;
      break;
    }
   case 18:
    var $__x_0;
    var $up_0_pn4;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $up_0_pn4 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $75 = HEAP32[$__src_0 >> 2];
    var $76 = $__n_0 - 1 | 0;
    if (($76 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__n_0 = $76;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $up_0_pn4 = $__src_0;
      var $__x_0 = $75;
      __label__ = 18;
      break;
    }
   case 19:
    var $__dst_1 = $41 + ($71 << 2) | 0;
    var $__x_1 = $75;
    __label__ = 20;
    break;
   case 20:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $rsize_1 = $usize_1;
    var $uexp_0 = $_2;
    __label__ = 58;
    break;
   case 21:
    var $81 = $vsize_1 + $44 | 0;
    if (($usize_1 | 0) > ($44 | 0)) {
      __label__ = 22;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 22:
    if (($81 | 0) > ($usize_1 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $85 = $usize_1 - $44 | 0;
    var $86 = $85 - $vsize_1 | 0;
    if (($85 | 0) == ($vsize_1 | 0)) {
      __label__ = 29;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $89 = $86 - 1 | 0;
    var $90 = HEAP32[$up_0 >> 2];
    if (($89 | 0) == 0) {
      var $__dst2_1 = $65;
      var $__x4_1 = $90;
      __label__ = 28;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $scevgep36 = $64 + (($usize_1 + $_ << 2) - 4 - ($vsize_1 + $_2 << 2)) | 0;
    var $__n1_0 = $89;
    var $__dst2_0 = $65;
    var $up_0_pn3 = $up_0;
    var $__x4_0 = $90;
    __label__ = 26;
    break;
   case 26:
    var $__x4_0;
    var $up_0_pn3;
    var $__dst2_0;
    var $__n1_0;
    var $__src3_0 = $up_0_pn3 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $100 = HEAP32[$__src3_0 >> 2];
    var $101 = $__n1_0 - 1 | 0;
    if (($101 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $__n1_0 = $101;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $up_0_pn3 = $__src3_0;
      var $__x4_0 = $100;
      __label__ = 26;
      break;
    }
   case 27:
    var $__dst2_1 = $scevgep36;
    var $__x4_1 = $100;
    __label__ = 28;
    break;
   case 28:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 29;
    break;
   case 29:
    var $105 = $65 + ($86 << 2) | 0;
    var $106 = $up_0 + ($86 << 2) | 0;
    var $107 = $usize_1 - $86 | 0;
    var $108 = ___gmpn_add($105, $106, $107, $vp_0, $vsize_1);
    var $rsize_0 = $usize_1;
    var $cy_0 = $108;
    __label__ = 51;
    break;
   case 30:
    var $110 = $81 - $usize_1 | 0;
    if (($81 | 0) == ($usize_1 | 0)) {
      __label__ = 36;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $113 = $110 - 1 | 0;
    var $114 = HEAP32[$vp_0 >> 2];
    if (($113 | 0) == 0) {
      var $__dst7_1 = $65;
      var $__x9_1 = $114;
      __label__ = 35;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $scevgep39 = $64 + (($vsize_1 + $_2 << 2) - 4 - ($usize_1 + $_ << 2)) | 0;
    var $__n6_0 = $113;
    var $__dst7_0 = $65;
    var $vp_0_pn2 = $vp_0;
    var $__x9_0 = $114;
    __label__ = 33;
    break;
   case 33:
    var $__x9_0;
    var $vp_0_pn2;
    var $__dst7_0;
    var $__n6_0;
    var $__src8_0 = $vp_0_pn2 + 4 | 0;
    HEAP32[$__dst7_0 >> 2] = $__x9_0;
    var $124 = HEAP32[$__src8_0 >> 2];
    var $125 = $__n6_0 - 1 | 0;
    if (($125 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      var $__n6_0 = $125;
      var $__dst7_0 = $__dst7_0 + 4 | 0;
      var $vp_0_pn2 = $__src8_0;
      var $__x9_0 = $124;
      __label__ = 33;
      break;
    }
   case 34:
    var $__dst7_1 = $scevgep39;
    var $__x9_1 = $124;
    __label__ = 35;
    break;
   case 35:
    var $__x9_1;
    var $__dst7_1;
    HEAP32[$__dst7_1 >> 2] = $__x9_1;
    __label__ = 36;
    break;
   case 36:
    var $129 = $65 + ($110 << 2) | 0;
    var $130 = $vp_0 + ($110 << 2) | 0;
    var $131 = $usize_1 - $44 | 0;
    var $132 = ___gmpn_add($129, $up_0, $usize_1, $130, $131);
    var $rsize_0 = $81;
    var $cy_0 = $132;
    __label__ = 51;
    break;
   case 37:
    var $134 = $81 - $usize_1 | 0;
    if (($vsize_1 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $137 = $vsize_1 - 1 | 0;
    var $138 = HEAP32[$vp_0 >> 2];
    if (($137 | 0) == 0) {
      var $__dst12_1 = $65;
      var $__x14_1 = $138;
      __label__ = 42;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $scevgep29 = $64 + (($vsize_1 << 2) - 4) | 0;
    var $__n11_0 = $137;
    var $__dst12_0 = $65;
    var $vp_0_pn = $vp_0;
    var $__x14_0 = $138;
    __label__ = 40;
    break;
   case 40:
    var $__x14_0;
    var $vp_0_pn;
    var $__dst12_0;
    var $__n11_0;
    var $__src13_0 = $vp_0_pn + 4 | 0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    var $144 = HEAP32[$__src13_0 >> 2];
    var $145 = $__n11_0 - 1 | 0;
    if (($145 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      var $__n11_0 = $145;
      var $__dst12_0 = $__dst12_0 + 4 | 0;
      var $vp_0_pn = $__src13_0;
      var $__x14_0 = $144;
      __label__ = 40;
      break;
    }
   case 41:
    var $__dst12_1 = $scevgep29;
    var $__x14_1 = $144;
    __label__ = 42;
    break;
   case 42:
    var $__x14_1;
    var $__dst12_1;
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    __label__ = 43;
    break;
   case 43:
    if (($44 | 0) == ($usize_1 | 0)) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $153 = $_2 - $usize_1 - $_ << 2;
    _memset($64 + ($vsize_1 << 2) | 0, 0, $153, 4);
    __label__ = 45;
    break;
   case 45:
    if (($usize_1 | 0) == 0) {
      var $rsize_0 = $81;
      var $cy_0 = 0;
      __label__ = 51;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $157 = $usize_1 - 1 | 0;
    var $158 = $65 + ($134 << 2) | 0;
    var $159 = HEAP32[$up_0 >> 2];
    if (($157 | 0) == 0) {
      var $__x20_1 = $159;
      var $__dst18_1 = $158;
      __label__ = 50;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $scevgep33 = $64 + (($vsize_1 + $_2 << 2) - 4 - ($_ << 2)) | 0;
    var $__x20_0 = $159;
    var $up_0_pn = $up_0;
    var $__dst18_0 = $158;
    var $__n17_0 = $157;
    __label__ = 48;
    break;
   case 48:
    var $__n17_0;
    var $__dst18_0;
    var $up_0_pn;
    var $__x20_0;
    var $__src19_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst18_0 >> 2] = $__x20_0;
    var $168 = HEAP32[$__src19_0 >> 2];
    var $169 = $__n17_0 - 1 | 0;
    if (($169 | 0) == 0) {
      __label__ = 49;
      break;
    } else {
      var $__x20_0 = $168;
      var $up_0_pn = $__src19_0;
      var $__dst18_0 = $__dst18_0 + 4 | 0;
      var $__n17_0 = $169;
      __label__ = 48;
      break;
    }
   case 49:
    var $__x20_1 = $168;
    var $__dst18_1 = $scevgep33;
    __label__ = 50;
    break;
   case 50:
    var $__dst18_1;
    var $__x20_1;
    HEAP32[$__dst18_1 >> 2] = $__x20_1;
    var $rsize_0 = $81;
    var $cy_0 = 0;
    __label__ = 51;
    break;
   case 51:
    var $cy_0;
    var $rsize_0;
    if (($rsize_0 | 0) == 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    var $175 = $rsize_0 - 1 | 0;
    var $176 = HEAP32[$65 >> 2];
    if (($175 | 0) == 0) {
      var $__x24_1 = $176;
      var $__dst22_1 = $41;
      __label__ = 56;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    var $__x24_0 = $176;
    var $__src23_0 = $64 + 4 | 0;
    var $__dst22_0 = $41;
    var $__n21_0 = $175;
    __label__ = 54;
    break;
   case 54:
    var $__n21_0;
    var $__dst22_0;
    var $__src23_0;
    var $__x24_0;
    HEAP32[$__dst22_0 >> 2] = $__x24_0;
    var $183 = HEAP32[$__src23_0 >> 2];
    var $184 = $__n21_0 - 1 | 0;
    if (($184 | 0) == 0) {
      __label__ = 55;
      break;
    } else {
      var $__x24_0 = $183;
      var $__src23_0 = $__src23_0 + 4 | 0;
      var $__dst22_0 = $__dst22_0 + 4 | 0;
      var $__n21_0 = $184;
      __label__ = 54;
      break;
    }
   case 55:
    var $__x24_1 = $183;
    var $__dst22_1 = $41 + ($175 << 2) | 0;
    __label__ = 56;
    break;
   case 56:
    var $__dst22_1;
    var $__x24_1;
    HEAP32[$__dst22_1 >> 2] = $__x24_1;
    __label__ = 57;
    break;
   case 57:
    var $188 = $41 + ($rsize_0 << 2) | 0;
    HEAP32[$188 >> 2] = $cy_0;
    var $rsize_1 = $rsize_0 + $cy_0 | 0;
    var $uexp_0 = $cy_0 + $_2 | 0;
    __label__ = 58;
    break;
   case 58:
    var $uexp_0;
    var $rsize_1;
    var $192 = $24 ? -$rsize_1 | 0 : $rsize_1;
    HEAP32[$r + 4 >> 2] = $192;
    HEAP32[$r + 8 >> 2] = $uexp_0;
    var $195 = HEAP32[$__tmp_marker >> 2];
    if (($195 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    ___gmp_tmp_reentrant_free($195);
    __label__ = 60;
    break;
   case 60:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_add["X"] = 1;

function ___gmp_assert_fail($filename, $linenum, $expr) {
  ___gmp_assert_header($filename, $linenum);
  var $1 = HEAP32[_stderr >> 2];
  var $2 = _fprintf($1, STRING_TABLE.__str283 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $expr, tempInt));
  _abort();
  throw "Reached an unreachable!";
}

function ___gmp_exception($error_bit) {
  var $2 = HEAP32[___gmp_errno >> 2] | $error_bit;
  HEAP32[___gmp_errno >> 2] = $2;
  _abort();
  throw "Reached an unreachable!";
}

function ___gmp_sqrt_of_negative() {
  ___gmp_exception(4);
  throw "Reached an unreachable!";
}

function ___gmp_divide_by_zero() {
  ___gmp_exception(2);
  throw "Reached an unreachable!";
}

function ___gmp_invalid_operation() {
  var $1 = _raise(8);
  _abort();
  throw "Reached an unreachable!";
}

function ___gmp_default_allocate($size) {
  var __stackBase__ = STACKTOP;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = _malloc($size);
    if (($1 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = HEAP32[_stderr >> 2];
    var $5 = _fprintf($4, STRING_TABLE.__str100 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $size, tempInt));
    _abort();
    throw "Reached an unreachable!";
   case 4:
    STACKTOP = __stackBase__;
    return $1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_default_reallocate($oldptr, $old_size, $new_size) {
  var __stackBase__ = STACKTOP;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = _realloc($oldptr, $new_size);
    if (($1 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = HEAP32[_stderr >> 2];
    var $5 = _fprintf($4, STRING_TABLE.__str1101 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $old_size, HEAP32[tempInt + 4 >> 2] = $new_size, tempInt));
    _abort();
    throw "Reached an unreachable!";
   case 4:
    STACKTOP = __stackBase__;
    return $1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_cmp_si($u, $vval) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 8 >> 2];
    var $4 = HEAPU32[$u + 4 >> 2];
    if (($4 >>> 31 | 0) == ($vval >>> 31 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($4 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $_0 = (($vval | 0) != 0) << 31 >> 31;
    __label__ = 15;
    break;
   case 5:
    if (($vval | 0) == 0) {
      var $_0 = 1;
      __label__ = 15;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $_0 = $4 >> 31 | 1;
    __label__ = 15;
    break;
   case 7:
    var $19 = $4 >> 31 | 1;
    var $21 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $24 = ($vval | 0) > -1 ? $vval : -$vval | 0;
    if (($2 | 0) > 1) {
      var $_0 = $19;
      __label__ = 15;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if (($2 | 0) < 1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $_0 = -$19 | 0;
    __label__ = 15;
    break;
   case 10:
    var $32 = HEAPU32[$u + 12 >> 2];
    var $35 = HEAPU32[$32 + ($21 - 1 << 2) >> 2];
    if ($35 >>> 0 > $24 >>> 0) {
      var $_0 = $19;
      __label__ = 15;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if ($35 >>> 0 < $24 >>> 0) {
      __label__ = 12;
      break;
    } else {
      var $usize_0_in = $21;
      var $up_0 = $32;
      __label__ = 13;
      break;
    }
   case 12:
    var $_0 = -$19 | 0;
    __label__ = 15;
    break;
   case 13:
    var $up_0;
    var $usize_0_in;
    var $usize_0 = $usize_0_in - 1 | 0;
    if ((HEAP32[$up_0 >> 2] | 0) == 0) {
      var $usize_0_in = $usize_0;
      var $up_0 = $up_0 + 4 | 0;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $_ = ($usize_0 | 0) > 0 ? $19 : 0;
    var $_0 = $_;
    __label__ = 15;
    break;
   case 15:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_cmp_si["X"] = 1;

function ___gmpf_cmp_ui($u, $vval) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 8 >> 2];
    var $4 = HEAPU32[$u + 4 >> 2];
    if (($4 | 0) < 0) {
      var $_0 = -1;
      __label__ = 11;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($vval | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $_0 = ($4 | 0) != 0 & 1;
    __label__ = 11;
    break;
   case 5:
    if (($2 | 0) > 1) {
      var $_0 = 1;
      __label__ = 11;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($2 | 0) < 1) {
      var $_0 = -1;
      __label__ = 11;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $17 = HEAPU32[$u + 12 >> 2];
    var $20 = HEAPU32[$17 + ($4 - 1 << 2) >> 2];
    if ($20 >>> 0 > $vval >>> 0) {
      var $_0 = 1;
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ($20 >>> 0 < $vval >>> 0) {
      var $_0 = -1;
      __label__ = 11;
      break;
    } else {
      var $usize_0_in = $4;
      var $up_0 = $17;
      __label__ = 9;
      break;
    }
   case 9:
    var $up_0;
    var $usize_0_in;
    var $usize_0 = $usize_0_in - 1 | 0;
    if ((HEAP32[$up_0 >> 2] | 0) == 0) {
      var $usize_0_in = $usize_0;
      var $up_0 = $up_0 + 4 | 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $_0 = ($usize_0 | 0) > 0 & 1;
    __label__ = 11;
    break;
   case 11:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_add_ui($sum, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $u_negated = __stackBase__;
    var $2 = HEAP32[$u + 12 >> 2];
    var $4 = HEAP32[$sum + 12 >> 2];
    var $6 = HEAP32[$sum >> 2];
    var $7 = $u + 8 | 0;
    var $8 = HEAP32[$7 >> 2];
    var $10 = HEAP32[$u + 4 >> 2];
    if (($10 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($10 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmpf_set_ui($sum, $v);
    __label__ = 48;
    break;
   case 5:
    var $16 = -$10 | 0;
    HEAP32[$u_negated + 4 >> 2] = $16;
    HEAP32[$u_negated + 8 >> 2] = $8;
    HEAP32[$u_negated + 12 >> 2] = $2;
    ___gmpf_sub_ui($sum, $u_negated, $v);
    var $20 = $sum + 4 | 0;
    var $22 = -HEAP32[$20 >> 2] | 0;
    HEAP32[$20 >> 2] = $22;
    __label__ = 48;
    break;
   case 6:
    if (($v | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 7:
    if (($u | 0) == ($sum | 0)) {
      __label__ = 48;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $28 = $6 + 1 | 0;
    var $_ = ($10 | 0) < ($28 | 0) ? $10 : $28;
    if (($_ | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $32 = $_ - 1 | 0;
    var $_sum5 = $10 - $_ | 0;
    var $34 = HEAP32[$2 + ($_sum5 << 2) >> 2];
    if (($32 | 0) == 0) {
      var $__dst_1 = $4;
      var $__x_1 = $34;
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $37 = $10 ^ -1;
    var $38 = -2 - $6 | 0;
    var $smax = ($38 | 0) < ($37 | 0) ? $37 : $38;
    var $40 = -2 - $smax | 0;
    var $__n_0 = $32;
    var $__dst_0 = $4;
    var $__src_0 = $2 + ($_sum5 + 1 << 2) | 0;
    var $__x_0 = $34;
    __label__ = 11;
    break;
   case 11:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $44 = HEAP32[$__src_0 >> 2];
    var $45 = $__n_0 - 1 | 0;
    if (($45 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $__n_0 = $45;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $44;
      __label__ = 11;
      break;
    }
   case 12:
    var $__dst_1 = $4 + ($40 << 2) | 0;
    var $__x_1 = $44;
    __label__ = 13;
    break;
   case 13:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 14;
    break;
   case 14:
    HEAP32[$sum + 4 >> 2] = $_;
    var $50 = HEAP32[$7 >> 2];
    HEAP32[$sum + 8 >> 2] = $50;
    __label__ = 48;
    break;
   case 15:
    if (($8 | 0) > 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 16:
    if (($8 | 0) > ($6 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if (($8 | 0) > ($10 | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 18:
    if (($10 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $61 = $10 - 1 | 0;
    var $62 = $4 + ($8 - 1 << 2) | 0;
    var $64 = HEAP32[$2 + ($61 << 2) >> 2];
    if (($61 | 0) == 0) {
      var $__dst2_1 = $62;
      var $__x4_1 = $64;
      __label__ = 23;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $67 = $8 - $10 | 0;
    var $__n1_0 = $61;
    var $__dst2_0 = $62;
    var $__src3_0 = $2 + ($10 - 2 << 2) | 0;
    var $__x4_0 = $64;
    __label__ = 21;
    break;
   case 21:
    var $__x4_0;
    var $__src3_0;
    var $__dst2_0;
    var $__n1_0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $71 = HEAP32[$__src3_0 >> 2];
    var $72 = $__n1_0 - 1 | 0;
    if (($72 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      var $__n1_0 = $72;
      var $__dst2_0 = $__dst2_0 - 4 | 0;
      var $__src3_0 = $__src3_0 - 4 | 0;
      var $__x4_0 = $71;
      __label__ = 21;
      break;
    }
   case 22:
    var $__dst2_1 = $4 + ($67 << 2) | 0;
    var $__x4_1 = $71;
    __label__ = 23;
    break;
   case 23:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 24;
    break;
   case 24:
    HEAP32[$4 >> 2] = $v;
    if (($8 - $10 | 0) == 1) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $scevgep3132 = $4 + 4 | 0;
    var $80 = $8 + 1073741823 - $10 << 2;
    _memset($scevgep3132, 0, $80, 4);
    __label__ = 26;
    break;
   case 26:
    HEAP32[$sum + 4 >> 2] = $8;
    HEAP32[$sum + 8 >> 2] = $8;
    __label__ = 48;
    break;
   case 27:
    if (($10 | 0) > ($6 | 0)) {
      __label__ = 28;
      break;
    } else {
      var $up_0 = $2;
      var $usize_0 = $10;
      __label__ = 29;
      break;
    }
   case 28:
    var $up_0 = $2 + ($10 - $6 << 2) | 0;
    var $usize_0 = $6;
    __label__ = 29;
    break;
   case 29:
    var $usize_0;
    var $up_0;
    var $_sum_pre = $usize_0 - $8 | 0;
    if (($4 | 0) == ($up_0 | 0) | ($usize_0 | 0) == ($8 | 0)) {
      var $_sum_pre_phi = $_sum_pre;
      __label__ = 35;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $93 = $_sum_pre - 1 | 0;
    var $94 = HEAP32[$up_0 >> 2];
    if (($93 | 0) == 0) {
      var $__x10_1 = $94;
      var $__dst8_1 = $4;
      __label__ = 34;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $97 = $usize_0 - 1 - $8 | 0;
    var $__x10_0 = $94;
    var $up_0_pn = $up_0;
    var $__n7_0 = $93;
    var $__dst8_0 = $4;
    __label__ = 32;
    break;
   case 32:
    var $__dst8_0;
    var $__n7_0;
    var $up_0_pn;
    var $__x10_0;
    var $__src9_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $100 = HEAP32[$__src9_0 >> 2];
    var $101 = $__n7_0 - 1 | 0;
    if (($101 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      var $__x10_0 = $100;
      var $up_0_pn = $__src9_0;
      var $__n7_0 = $101;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      __label__ = 32;
      break;
    }
   case 33:
    var $__x10_1 = $100;
    var $__dst8_1 = $4 + ($97 << 2) | 0;
    __label__ = 34;
    break;
   case 34:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    var $_sum_pre_phi = $_sum_pre;
    __label__ = 35;
    break;
   case 35:
    var $_sum_pre_phi;
    var $104 = $4 + ($usize_0 << 2) | 0;
    var $105 = $4 + ($_sum_pre_phi << 2) | 0;
    var $107 = ___gmpn_add_1($105, $up_0 + ($_sum_pre_phi << 2) | 0, $8, $v);
    HEAP32[$104 >> 2] = $107;
    var $108 = $107 + $usize_0 | 0;
    HEAP32[$sum + 4 >> 2] = $108;
    var $110 = $107 + $8 | 0;
    HEAP32[$sum + 8 >> 2] = $110;
    __label__ = 48;
    break;
   case 36:
    if (($6 | 0) > (-$8 | 0)) {
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    HEAP32[$4 >> 2] = $v;
    HEAP32[$sum + 4 >> 2] = 1;
    HEAP32[$sum + 8 >> 2] = 1;
    __label__ = 48;
    break;
   case 38:
    var $120 = $10 - $8 + 1 | 0;
    if (($120 | 0) > ($6 | 0)) {
      __label__ = 39;
      break;
    } else {
      var $up_1 = $2;
      var $usize_1 = $10;
      __label__ = 40;
      break;
    }
   case 39:
    var $123 = $120 - $6 | 0;
    var $up_1 = $2 + ($123 << 2) | 0;
    var $usize_1 = $10 - $123 | 0;
    __label__ = 40;
    break;
   case 40:
    var $usize_1;
    var $up_1;
    if (($4 | 0) == ($up_1 | 0) | ($usize_1 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $130 = $usize_1 - 1 | 0;
    var $131 = HEAP32[$up_1 >> 2];
    if (($130 | 0) == 0) {
      var $__x14_1 = $131;
      var $__dst12_1 = $4;
      __label__ = 44;
      break;
    } else {
      var $__x14_0 = $131;
      var $up_1_pn = $up_1;
      var $__dst12_0 = $4;
      var $__n11_0 = $130;
      __label__ = 42;
      break;
    }
   case 42:
    var $__n11_0;
    var $__dst12_0;
    var $up_1_pn;
    var $__x14_0;
    var $__src13_0 = $up_1_pn + 4 | 0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    var $134 = HEAP32[$__src13_0 >> 2];
    var $135 = $__n11_0 - 1 | 0;
    if (($135 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      var $__x14_0 = $134;
      var $up_1_pn = $__src13_0;
      var $__dst12_0 = $__dst12_0 + 4 | 0;
      var $__n11_0 = $135;
      __label__ = 42;
      break;
    }
   case 43:
    var $__x14_1 = $134;
    var $__dst12_1 = $4 + ($130 << 2) | 0;
    __label__ = 44;
    break;
   case 44:
    var $__dst12_1;
    var $__x14_1;
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    __label__ = 45;
    break;
   case 45:
    if (($8 | 0) == 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $scevgep2526 = $4 + ($usize_1 << 2) | 0;
    var $140 = (i64Math.multiply($8, 0, -4, 0), i64Math.result[0]);
    _memset($scevgep2526, 0, $140, 4);
    __label__ = 47;
    break;
   case 47:
    var $142 = $usize_1 - $8 | 0;
    var $143 = $4 + ($142 << 2) | 0;
    HEAP32[$143 >> 2] = $v;
    var $144 = $142 + 1 | 0;
    HEAP32[$sum + 4 >> 2] = $144;
    HEAP32[$sum + 8 >> 2] = 1;
    __label__ = 48;
    break;
   case 48:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_add_ui["X"] = 1;

function ___gmpf_ceil($r, $u) {
  ___gmpf_ceil_or_floor($r, $u, 1);
  return;
}

function ___gmpf_ceil_or_floor($r, $u, $dir) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 19;
    break;
   case 4:
    var $9 = HEAP32[$r + 12 >> 2];
    var $11 = HEAP32[$u + 8 >> 2];
    if (($11 | 0) < 1) {
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    if (($2 ^ $dir | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    HEAP32[$9 >> 2] = 1;
    HEAP32[$r + 8 >> 2] = 1;
    HEAP32[$r + 4 >> 2] = $dir;
    __label__ = 19;
    break;
   case 7:
    var $20 = $r + 8 | 0;
    HEAP32[$20 >> 2] = $11;
    var $22 = HEAP32[$u + 12 >> 2];
    var $23 = ($2 | 0) > -1;
    var $25 = $23 ? $2 : -$2 | 0;
    var $27 = ($25 | 0) < ($11 | 0) ? $25 : $11;
    var $29 = HEAP32[$r >> 2];
    var $30 = $29 + 1 | 0;
    var $32 = ($27 | 0) < ($30 | 0) ? $27 : $30;
    var $_sum = $25 - $32 | 0;
    var $33 = $22 + ($_sum << 2) | 0;
    if (($2 ^ $dir | 0) > -1) {
      var $p_0 = $22;
      __label__ = 8;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 8:
    var $p_0;
    if (($p_0 | 0) == ($33 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ((HEAP32[$p_0 >> 2] | 0) == 0) {
      var $p_0 = $p_0 + 4 | 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $42 = ___gmpn_add_1($9, $33, $32, 1);
    if (($42 | 0) == 0) {
      var $asize_0 = $32;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    HEAP32[$9 >> 2] = 1;
    var $46 = HEAP32[$20 >> 2] + 1 | 0;
    HEAP32[$20 >> 2] = $46;
    var $asize_0 = 1;
    __label__ = 12;
    break;
   case 12:
    var $asize_0;
    var $49 = $23 ? $asize_0 : -$asize_0 | 0;
    HEAP32[$r + 4 >> 2] = $49;
    __label__ = 19;
    break;
   case 13:
    var $52 = $23 ? $32 : -$32 | 0;
    HEAP32[$r + 4 >> 2] = $52;
    if (($9 | 0) == ($33 | 0) | ($32 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $57 = $32 - 1 | 0;
    var $58 = HEAP32[$33 >> 2];
    if (($57 | 0) == 0) {
      var $__x_1 = $58;
      var $__dst_1 = $9;
      __label__ = 18;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $61 = $25 ^ -1;
    var $62 = $11 ^ -1;
    var $smax = ($61 | 0) > ($62 | 0) ? $61 : $62;
    var $64 = -2 - $29 | 0;
    var $smax6 = ($smax | 0) > ($64 | 0) ? $smax : $64;
    var $66 = -2 - $smax6 | 0;
    var $__x_0 = $58;
    var $__src_0 = $22 + ($_sum + 1 << 2) | 0;
    var $__dst_0 = $9;
    var $__n_0 = $57;
    __label__ = 16;
    break;
   case 16:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $70 = HEAP32[$__src_0 >> 2];
    var $71 = $__n_0 - 1 | 0;
    if (($71 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $__x_0 = $70;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $71;
      __label__ = 16;
      break;
    }
   case 17:
    var $__x_1 = $70;
    var $__dst_1 = $9 + ($66 << 2) | 0;
    __label__ = 18;
    break;
   case 18:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 19;
    break;
   case 19:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_ceil_or_floor["X"] = 1;

function ___gmpf_floor($r, $u) {
  ___gmpf_ceil_or_floor($r, $u, -1);
  return;
}

function ___gmpf_clear($m) {
  var $1 = HEAP32[___gmp_free_func >> 2];
  var $4 = HEAP32[$m + 12 >> 2];
  var $8 = (HEAP32[$m >> 2] << 2) + 4 | 0;
  FUNCTION_TABLE[$1]($4, $8);
  return;
}

function ___gmpf_clears($x) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ap = __stackBase__;
    HEAP32[$ap >> 2] = arguments[___gmpf_clears.length];
    if (($x | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $x;
      __label__ = 3;
      break;
    }
   case 3:
    var $_01;
    ___gmpf_clear($_01);
    var $3 = HEAP32[$ap >> 2];
    var $4 = $3;
    var $5 = $3 + 4 | 0;
    HEAP32[$ap >> 2] = $5;
    var $6 = HEAP32[$4 >> 2];
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $6;
      __label__ = 3;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_cmp($u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 8 >> 2];
    var $4 = HEAP32[$v + 8 >> 2];
    var $6 = HEAP32[$u + 4 >> 2];
    var $8 = HEAP32[$v + 4 >> 2];
    if (($8 ^ $6 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $_0 = (($8 | 0) != 0) << 31 >> 31;
    __label__ = 21;
    break;
   case 5:
    if (($8 | 0) == 0) {
      var $_0 = 1;
      __label__ = 21;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $_0 = $6 >> 31 | 1;
    __label__ = 21;
    break;
   case 7:
    var $22 = ($6 | 0) > -1;
    var $24 = $6 >> 31 | 1;
    if (($2 | 0) > ($4 | 0)) {
      var $_0 = $24;
      __label__ = 21;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if (($2 | 0) < ($4 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $_0 = -$24 | 0;
    __label__ = 21;
    break;
   case 10:
    var $32 = $22 ? $6 : -$6 | 0;
    var $35 = ($8 | 0) > -1 ? $8 : -$8 | 0;
    var $37 = HEAP32[$u + 12 >> 2];
    var $39 = HEAP32[$v + 12 >> 2];
    if ((HEAP32[$37 >> 2] | 0) == 0) {
      var $usize_05 = $32;
      var $up_06 = $37;
      __label__ = 12;
      break;
    } else {
      var $usize_0_lcssa = $32;
      var $up_0_lcssa = $37;
      __label__ = 11;
      break;
    }
   case 11:
    var $up_0_lcssa;
    var $usize_0_lcssa;
    if ((HEAP32[$39 >> 2] | 0) == 0) {
      var $vp_02 = $39;
      var $vsize_03 = $35;
      __label__ = 13;
      break;
    } else {
      var $vp_0_lcssa = $39;
      var $vsize_0_lcssa = $35;
      __label__ = 14;
      break;
    }
   case 12:
    var $up_06;
    var $usize_05;
    var $44 = $up_06 + 4 | 0;
    var $45 = $usize_05 - 1 | 0;
    if ((HEAP32[$44 >> 2] | 0) == 0) {
      var $usize_05 = $45;
      var $up_06 = $44;
      __label__ = 12;
      break;
    } else {
      var $usize_0_lcssa = $45;
      var $up_0_lcssa = $44;
      __label__ = 11;
      break;
    }
   case 13:
    var $vsize_03;
    var $vp_02;
    var $48 = $vp_02 + 4 | 0;
    var $49 = $vsize_03 - 1 | 0;
    if ((HEAP32[$48 >> 2] | 0) == 0) {
      var $vp_02 = $48;
      var $vsize_03 = $49;
      __label__ = 13;
      break;
    } else {
      var $vp_0_lcssa = $48;
      var $vsize_0_lcssa = $49;
      __label__ = 14;
      break;
    }
   case 14:
    var $vsize_0_lcssa;
    var $vp_0_lcssa;
    if (($usize_0_lcssa | 0) > ($vsize_0_lcssa | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $55 = ___gmpn_cmp($up_0_lcssa + ($usize_0_lcssa - $vsize_0_lcssa << 2) | 0, $vp_0_lcssa, $vsize_0_lcssa);
    if (($55 | 0) == 0) {
      var $_0 = $24;
      __label__ = 21;
      break;
    } else {
      var $cmp_0 = $55;
      __label__ = 20;
      break;
    }
   case 16:
    if (($vsize_0_lcssa | 0) > ($usize_0_lcssa | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 17:
    var $61 = ___gmpn_cmp($up_0_lcssa, $vp_0_lcssa + ($vsize_0_lcssa - $usize_0_lcssa << 2) | 0, $usize_0_lcssa);
    if (($61 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      var $cmp_0 = $61;
      __label__ = 20;
      break;
    }
   case 18:
    var $_0 = -$24 | 0;
    __label__ = 21;
    break;
   case 19:
    var $66 = ___gmpn_cmp($up_0_lcssa, $vp_0_lcssa, $usize_0_lcssa);
    if (($66 | 0) == 0) {
      var $_0 = 0;
      __label__ = 21;
      break;
    } else {
      var $cmp_0 = $66;
      __label__ = 20;
      break;
    }
   case 20:
    var $cmp_0;
    var $71 = ($cmp_0 | 0) > 0 ? $24 : -$24 | 0;
    var $_0 = $71;
    __label__ = 21;
    break;
   case 21:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_cmp["X"] = 1;

function ___gmpf_cmp_d($f, $d) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $darray = __stackBase__;
    var $df = __stackBase__ + 12;
    tempDoubleF64[0] = $d;
    var $1$0 = tempDoubleI32[0];
    var $1$1 = tempDoubleI32[1];
    if (($1$0 & 0) == 0 && ($1$1 & 2146435072) == 2146435072) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($1$0 & -1) == 0 && ($1$1 & 1048575) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $9 = $d < 0 ? 1 : -1;
    var $_0 = $9;
    __label__ = 11;
    break;
   case 5:
    ___gmp_invalid_operation();
    throw "Reached an unreachable!";
   case 6:
    if ($d == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $_0 = HEAP32[$f + 4 >> 2];
    __label__ = 11;
    break;
   case 8:
    var $17 = $darray | 0;
    var $18 = $df | 0;
    HEAP32[$df + 12 >> 2] = $17;
    var $20 = $d >= 0;
    var $21 = $20 ? 3 : -3;
    HEAP32[$df + 4 >> 2] = $21;
    if ($20) {
      var $26 = $d;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $26 = -$d;
    __label__ = 10;
    break;
   case 10:
    var $26;
    var $27 = ___gmp_extract_double($17, $26);
    HEAP32[$df + 8 >> 2] = $27;
    var $29 = ___gmpf_cmp($f, $18);
    var $_0 = $29;
    __label__ = 11;
    break;
   case 11:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_get_default_prec() {
  return (HEAP32[___gmp_default_fp_limb_precision >> 2] << 5) - 32 | 0;
}

function ___gmpf_eq($u, $v, $n_bits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 8 >> 2];
    var $4 = HEAP32[$v + 8 >> 2];
    var $6 = HEAPU32[$u + 4 >> 2];
    var $8 = HEAPU32[$v + 4 >> 2];
    if (($8 ^ $6 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 3:
    var $13 = ($8 | 0) == 0;
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $_0 = $13 & 1;
    __label__ = 26;
    break;
   case 5:
    if (($2 | 0) == ($4 | 0) & ($13 ^ 1)) {
      __label__ = 6;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 6:
    var $21 = ($6 | 0) > -1 ? $6 : -$6 | 0;
    var $24 = ($8 | 0) > -1 ? $8 : -$8 | 0;
    var $26 = HEAPU32[$u + 12 >> 2];
    var $28 = HEAPU32[$v + 12 >> 2];
    var $30 = HEAPU32[$26 + ($21 - 1 << 2) >> 2];
    if ($30 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $34 = $30 >>> 0 < 256 ? 1 : 9;
    var $39 = $34;
    __label__ = 9;
    break;
   case 8:
    var $37 = $30 >>> 0 < 16777216 ? 17 : 25;
    var $39 = $37;
    __label__ = 9;
    break;
   case 9:
    var $39;
    var $42 = STRING_TABLE.___gmpn_clz_tab + ($30 >>> ($39 >>> 0)) | 0;
    var $45 = 33 - $39 - (HEAPU8[$42] & 255) | 0;
    if ((HEAPU32[$28 + ($24 - 1 << 2) >> 2] >>> ((31 - $45 | 0) >>> 0) | 0) == 1) {
      __label__ = 10;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 10:
    var $52 = $45 + $n_bits | 0;
    var $54 = ($52 + 31 | 0) >>> 5;
    var $56 = ($21 | 0) < ($54 | 0) ? $21 : $54;
    var $58 = ($24 | 0) < ($54 | 0) ? $24 : $54;
    var $60 = ($56 | 0) < ($58 | 0) ? $56 : $58;
    var $62 = $56 + $58 - $60 | 0;
    var $_sum2 = $21 - $60 | 0;
    var $63 = $26 + ($_sum2 << 2) | 0;
    var $_sum3 = $24 - $60 | 0;
    var $64 = $28 + ($_sum3 << 2) | 0;
    var $i_0_in = $60;
    __label__ = 11;
    break;
   case 11:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0 | 0) > 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    if ((HEAP32[$26 + ($i_0 + $_sum2 << 2) >> 2] | 0) == (HEAP32[$28 + ($i_0 + $_sum3 << 2) >> 2] | 0)) {
      var $i_0_in = $i_0;
      __label__ = 11;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 13:
    var $75 = $52 + 32 - ($62 << 5) | 0;
    var $76 = $62 - $60 | 0;
    var $78 = HEAP32[$63 >> 2];
    var $79 = HEAP32[$64 >> 2];
    if (($62 | 0) == ($60 | 0)) {
      __label__ = 22;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if (($78 | 0) == ($79 | 0)) {
      __label__ = 15;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 15:
    if (($56 | 0) > ($58 | 0)) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $p_0 = $26 + ($_sum2 - $76 << 2) | 0;
    __label__ = 18;
    break;
   case 17:
    var $p_0 = $28 + ($_sum3 - $76 << 2) | 0;
    __label__ = 18;
    break;
   case 18:
    var $p_0;
    var $i_1_in = $76;
    __label__ = 19;
    break;
   case 19:
    var $i_1_in;
    var $i_1 = $i_1_in - 1 | 0;
    if (($i_1 | 0) > 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    if ((HEAP32[$p_0 + ($i_1 << 2) >> 2] | 0) == 0) {
      var $i_1_in = $i_1;
      __label__ = 19;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 21:
    var $diff_0 = HEAP32[$p_0 >> 2];
    __label__ = 23;
    break;
   case 22:
    var $diff_0 = $79 ^ $78;
    __label__ = 23;
    break;
   case 23:
    var $diff_0;
    if ($75 >>> 0 < 32) {
      __label__ = 24;
      break;
    } else {
      var $diff_1 = $diff_0;
      __label__ = 25;
      break;
    }
   case 24:
    var $diff_1 = $diff_0 >>> ((32 - $75 | 0) >>> 0);
    __label__ = 25;
    break;
   case 25:
    var $diff_1;
    var $_0 = ($diff_1 | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 26:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_eq["X"] = 1;

function ___gmpf_fits_sint_p($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$f + 4 >> 2];
    if (($2 | 0) == 0) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = HEAP32[$f + 8 >> 2];
    if (($6 | 0) < 1) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($6 | 0) == 1) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 6;
      break;
    }
   case 5:
    var $14 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $_0 = HEAPU32[HEAP32[$f + 12 >> 2] + ($14 - 1 << 2) >> 2] >>> 0 <= (($2 >>> 31) + 2147483647 | 0) >>> 0 & 1;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_fits_slong_p($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$f + 4 >> 2];
    if (($2 | 0) == 0) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = HEAP32[$f + 8 >> 2];
    if (($6 | 0) < 1) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($6 | 0) == 1) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 6;
      break;
    }
   case 5:
    var $14 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $_0 = HEAPU32[HEAP32[$f + 12 >> 2] + ($14 - 1 << 2) >> 2] >>> 0 <= (($2 >>> 31) + 2147483647 | 0) >>> 0 & 1;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_fits_sshort_p($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$f + 4 >> 2];
    if (($2 | 0) == 0) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = HEAP32[$f + 8 >> 2];
    if (($6 | 0) < 1) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($6 | 0) == 1) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 6;
      break;
    }
   case 5:
    var $14 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $_0 = HEAPU32[HEAP32[$f + 12 >> 2] + ($14 - 1 << 2) >> 2] >>> 0 <= (($2 >>> 31) + 32767 | 0) >>> 0 & 1;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_fits_uint_p($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$f + 4 >> 2];
    if (($2 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($2 | 0) == 0 & 1;
    __label__ = 6;
    break;
   case 4:
    var $9 = HEAPU32[$f + 8 >> 2];
    if (($9 | 0) < 1) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $_0 = ($9 | 0) == 1 & 1;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_fits_ulong_p($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$f + 4 >> 2];
    if (($2 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($2 | 0) == 0 & 1;
    __label__ = 6;
    break;
   case 4:
    var $9 = HEAPU32[$f + 8 >> 2];
    if (($9 | 0) < 1) {
      var $_0 = 1;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $_0 = ($9 | 0) == 1 & 1;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_fits_ushort_p($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$f + 4 >> 2];
    if (($2 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($2 | 0) == 0 & 1;
    __label__ = 7;
    break;
   case 4:
    var $9 = HEAPU32[$f + 8 >> 2];
    if (($9 | 0) < 1) {
      var $_0 = 1;
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($9 | 0) == 1) {
      __label__ = 6;
      break;
    } else {
      var $_0 = 0;
      __label__ = 7;
      break;
    }
   case 6:
    var $_0 = HEAPU32[HEAP32[$f + 12 >> 2] + ($2 - 1 << 2) >> 2] >>> 0 < 65536 & 1;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_get_prec($x) {
  return (HEAP32[$x >> 2] << 5) - 32 | 0;
}

function ___gmpf_div_2exp($r, $u, $exp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$r + 12 >> 2];
    var $4 = HEAPU32[$r >> 2];
    var $6 = HEAPU32[$u + 8 >> 2];
    var $8 = HEAP32[$u + 4 >> 2];
    if (($8 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 18;
    break;
   case 4:
    var $14 = ($8 | 0) > -1;
    var $16 = $14 ? $8 : -$8 | 0;
    var $18 = HEAPU32[$u + 12 >> 2];
    var $19 = $exp & 31;
    if (($19 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 5:
    var $22 = $4 + 1 | 0;
    if (($16 | 0) > ($22 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $up_0 = $18;
      var $abs_usize_0 = $16;
      __label__ = 7;
      break;
    }
   case 6:
    var $up_0 = $18 + ($16 - $22 << 2) | 0;
    var $abs_usize_0 = $22;
    __label__ = 7;
    break;
   case 7:
    var $abs_usize_0;
    var $up_0;
    if (($2 | 0) == ($up_0 | 0) | ($abs_usize_0 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $31 = $abs_usize_0 - 1 | 0;
    var $32 = HEAP32[$up_0 >> 2];
    if (($31 | 0) == 0) {
      var $__x_1 = $32;
      var $__dst_1 = $2;
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $32;
      var $up_0_pn = $up_0;
      var $__dst_0 = $2;
      var $__n_0 = $31;
      __label__ = 9;
      break;
    }
   case 9:
    var $__n_0;
    var $__dst_0;
    var $up_0_pn;
    var $__x_0;
    var $__src_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $35 = HEAP32[$__src_0 >> 2];
    var $36 = $__n_0 - 1 | 0;
    if (($36 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $__x_0 = $35;
      var $up_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $36;
      __label__ = 9;
      break;
    }
   case 10:
    var $__x_1 = $35;
    var $__dst_1 = $2 + ($31 << 2) | 0;
    __label__ = 11;
    break;
   case 11:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 12;
    break;
   case 12:
    HEAP32[$r + 8 >> 2] = $6 - ($exp >>> 5) | 0;
    var $abs_usize_2 = $abs_usize_0;
    __label__ = 17;
    break;
   case 13:
    if (($16 | 0) > ($4 | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $47 = $18 + ($16 - $4 << 2) | 0;
    var $48 = $2 + 4 | 0;
    var $49 = ___gmpn_rshift($48, $47, $4, $19);
    HEAP32[$2 >> 2] = $49;
    var $adj_0 = (HEAP32[$2 + ($4 << 2) >> 2] | 0) != 0 & 1;
    var $abs_usize_1 = $4;
    __label__ = 16;
    break;
   case 15:
    var $55 = 32 - $19 | 0;
    var $56 = ___gmpn_lshift($2, $18, $16, $55);
    var $57 = $2 + ($16 << 2) | 0;
    HEAP32[$57 >> 2] = $56;
    var $adj_0 = ($56 | 0) != 0 & 1;
    var $abs_usize_1 = $16;
    __label__ = 16;
    break;
   case 16:
    var $abs_usize_1;
    var $adj_0;
    HEAP32[$r + 8 >> 2] = $6 + ($exp >>> 5 ^ -1) + $adj_0 | 0;
    var $abs_usize_2 = $adj_0 + $abs_usize_1 | 0;
    __label__ = 17;
    break;
   case 17:
    var $abs_usize_2;
    var $69 = $14 ? $abs_usize_2 : -$abs_usize_2 | 0;
    HEAP32[$r + 4 >> 2] = $69;
    __label__ = 18;
    break;
   case 18:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_div_2exp["X"] = 1;

function ___gmpf_dump($u) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $exp = __stackBase__;
    var $1 = ___gmpf_get_str(0, $exp, 10, 0, $u);
    if (HEAP8[$1] << 24 >> 24 == 45) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = $1 + 1 | 0;
    var $6 = HEAP32[$exp >> 2];
    var $7 = _printf(STRING_TABLE.__str124 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = $6, tempInt));
    __label__ = 5;
    break;
   case 4:
    var $9 = HEAP32[$exp >> 2];
    var $10 = _printf(STRING_TABLE.__str1125 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $9, tempInt));
    __label__ = 5;
    break;
   case 5:
    var $12 = HEAP32[___gmp_free_func >> 2];
    var $13 = _strlen($1);
    var $14 = $13 + 1 | 0;
    FUNCTION_TABLE[$12]($1, $14);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_get_d($src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    if (($2 | 0) == 0) {
      var $_0 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $7 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $11 = HEAP32[$src + 8 >> 2] - $7 << 5;
    var $13 = HEAP32[$src + 12 >> 2];
    var $14 = ___gmpn_get_d($13, $7, $2, $11);
    var $_0 = $14;
    __label__ = 4;
    break;
   case 4:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_get_d_2exp($exp2, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$exp2 >> 2] = 0;
    var $_0 = 0;
    __label__ = 8;
    break;
   case 4:
    var $7 = HEAPU32[$src + 12 >> 2];
    var $10 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $13 = HEAPU32[$7 + ($10 - 1 << 2) >> 2];
    if ($13 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $17 = $13 >>> 0 < 256 ? 1 : 9;
    var $22 = $17;
    __label__ = 7;
    break;
   case 6:
    var $20 = $13 >>> 0 < 16777216 ? 17 : 25;
    var $22 = $20;
    __label__ = 7;
    break;
   case 7:
    var $22;
    var $25 = STRING_TABLE.___gmpn_clz_tab + ($13 >>> ($22 >>> 0)) | 0;
    var $28 = 33 - $22 - (HEAPU8[$25] & 255) | 0;
    var $32 = (HEAP32[$src + 8 >> 2] << 5) - $28 | 0;
    HEAP32[$exp2 >> 2] = $32;
    var $34 = $28 - ($10 << 5) | 0;
    var $35 = ___gmpn_get_d($7, $10, 0, $34);
    var $_0 = $35;
    __label__ = 8;
    break;
   case 8:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_div($r, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$u + 4 >> 2];
    var $4 = HEAPU32[$v + 4 >> 2];
    var $5 = $4 ^ $2;
    var $8 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $11 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $13 = HEAPU32[$r >> 2];
    if (($11 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($8 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 34;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $23 = HEAP32[$u + 8 >> 2];
    var $25 = HEAP32[$v + 8 >> 2];
    var $27 = HEAPU32[$r + 12 >> 2];
    var $29 = HEAPU32[$u + 12 >> 2];
    var $31 = HEAPU32[$v + 12 >> 2];
    var $32 = $13 + 1 | 0;
    var $33 = $32 + ($8 ^ -1) + $11 | 0;
    var $_ = ($33 | 0) < 0 ? -$33 | 0 : 0;
    var $39 = $29 + ($_ << 2) | 0;
    var $40 = $8 - $_ | 0;
    var $41 = $_ + $33 | 0;
    var $42 = $13 + $11 | 0;
    if (($33 | 0) > 0 | ($27 | 0) == ($29 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 7:
    var $44 = $42 << 2;
    var $45 = $44 + 4 | 0;
    if ($45 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $48 = STACKTOP;
    STACKTOP += $45;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $52 = $48;
    __label__ = 10;
    break;
   case 9:
    var $50 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $45);
    var $52 = $50;
    __label__ = 10;
    break;
   case 10:
    var $52;
    var $53 = $52;
    if (($41 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $55 = $42 - $8 | 0;
    var $57 = ($55 | 0) > 0 ? $55 << 2 : 0;
    _memset($52, 0, $57, 4);
    __label__ = 12;
    break;
   case 12:
    if (($8 | 0) == ($_ | 0)) {
      var $up_0 = $53;
      var $tp_0 = $53;
      var $usize_0 = $42;
      __label__ = 22;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $61 = $40 - 1 | 0;
    var $62 = $53 + ($41 << 2) | 0;
    var $63 = HEAPU32[$39 >> 2];
    if (($61 | 0) == 0) {
      var $__x_1 = $63;
      var $__dst2_1 = $62;
      __label__ = 17;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $scevgep = $52 + ($44 - 4) | 0;
    var $__x_0 = $63;
    var $__src_0 = $29 + ($_ + 1 << 2) | 0;
    var $__dst2_0 = $62;
    var $__n1_0 = $61;
    __label__ = 15;
    break;
   case 15:
    var $__n1_0;
    var $__dst2_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $70 = HEAP32[$__src_0 >> 2];
    var $71 = $__n1_0 - 1 | 0;
    if (($71 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $__x_0 = $70;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $71;
      __label__ = 15;
      break;
    }
   case 16:
    var $__x_1 = $70;
    var $__dst2_1 = $scevgep;
    __label__ = 17;
    break;
   case 17:
    var $__dst2_1;
    var $__x_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    var $up_0 = $53;
    var $tp_0 = $53;
    var $usize_0 = $42;
    __label__ = 22;
    break;
   case 18:
    var $76 = ($40 << 2) + 4 | 0;
    if ($76 >>> 0 < 65536) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $79 = STACKTOP;
    STACKTOP += $76;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $83 = $79;
    __label__ = 21;
    break;
   case 20:
    var $81 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $76);
    var $83 = $81;
    __label__ = 21;
    break;
   case 21:
    var $83;
    var $up_0 = $39;
    var $tp_0 = $83;
    var $usize_0 = $40;
    __label__ = 22;
    break;
   case 22:
    var $usize_0;
    var $tp_0;
    var $up_0;
    if (($27 | 0) == ($31 | 0)) {
      __label__ = 23;
      break;
    } else {
      var $vp_0 = $31;
      __label__ = 32;
      break;
    }
   case 23:
    var $88 = $11 << 2;
    if ($88 >>> 0 < 65536) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $91 = STACKTOP;
    STACKTOP += $88;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $95 = $91;
    __label__ = 26;
    break;
   case 25:
    var $93 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88);
    var $95 = $93;
    __label__ = 26;
    break;
   case 26:
    var $95;
    var $96 = $95;
    if (($4 | 0) == 0) {
      var $vp_0 = $96;
      __label__ = 32;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $99 = $11 - 1 | 0;
    var $100 = HEAPU32[$27 >> 2];
    if (($99 | 0) == 0) {
      var $__x6_1 = $100;
      var $__dst4_1 = $96;
      __label__ = 31;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $scevgep16 = $95 + ($88 - 4) | 0;
    var $__x6_0 = $100;
    var $_pn = $27;
    var $__dst4_0 = $96;
    var $__n3_0 = $99;
    __label__ = 29;
    break;
   case 29:
    var $__n3_0;
    var $__dst4_0;
    var $_pn;
    var $__x6_0;
    var $__src5_0 = $_pn + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    var $105 = HEAP32[$__src5_0 >> 2];
    var $106 = $__n3_0 - 1 | 0;
    if (($106 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      var $__x6_0 = $105;
      var $_pn = $__src5_0;
      var $__dst4_0 = $__dst4_0 + 4 | 0;
      var $__n3_0 = $106;
      __label__ = 29;
      break;
    }
   case 30:
    var $__x6_1 = $105;
    var $__dst4_1 = $scevgep16;
    __label__ = 31;
    break;
   case 31:
    var $__dst4_1;
    var $__x6_1;
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    var $vp_0 = $96;
    __label__ = 32;
    break;
   case 32:
    var $vp_0;
    ___gmpn_div_q($27, $up_0, $usize_0, $vp_0, $11, $tp_0);
    var $111 = (HEAP32[$27 + ($13 << 2) >> 2] | 0) == 0;
    var $113 = $32 - ($111 & 1) | 0;
    var $116 = $23 + 1 - $25 + ($111 << 31 >> 31) | 0;
    var $119 = ($5 | 0) > -1 ? $113 : -$113 | 0;
    HEAP32[$r + 4 >> 2] = $119;
    HEAP32[$r + 8 >> 2] = $116;
    var $122 = HEAP32[$__tmp_marker >> 2];
    if (($122 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    ___gmp_tmp_reentrant_free($122);
    __label__ = 34;
    break;
   case 34:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_div["X"] = 1;

function ___gmpf_div_ui($r, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$u + 4 >> 2];
    var $3 = ($2 | 0) > -1;
    var $5 = $3 ? $2 : -$2 | 0;
    var $7 = HEAPU32[$r >> 2];
    if (($v | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 21;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $17 = HEAP32[$r + 12 >> 2];
    var $19 = HEAP32[$u + 12 >> 2];
    var $20 = $7 + 1 | 0;
    var $22 = ($7 << 2) + 8 | 0;
    if ($22 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $25 = STACKTOP;
    STACKTOP += $22;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $29 = $25;
    __label__ = 9;
    break;
   case 8:
    var $27 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $22);
    var $29 = $27;
    __label__ = 9;
    break;
   case 9:
    var $29;
    var $30 = $29;
    if (($5 | 0) > ($20 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $up_0 = $19 + ($5 - $20 << 2) | 0;
    var $rtp_0 = $30;
    var $usize_0 = $20;
    __label__ = 14;
    break;
   case 11:
    var $36 = $20 - $5 | 0;
    if (($20 | 0) == ($5 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $38 = $36 << 2;
    _memset($29, 0, $38, 4);
    __label__ = 13;
    break;
   case 13:
    var $up_0 = $19;
    var $rtp_0 = $30 + ($36 << 2) | 0;
    var $usize_0 = $5;
    __label__ = 14;
    break;
   case 14:
    var $usize_0;
    var $rtp_0;
    var $up_0;
    if (($usize_0 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $44 = $usize_0 - 1 | 0;
    var $45 = HEAP32[$up_0 >> 2];
    if (($44 | 0) == 0) {
      var $__x_1 = $45;
      var $__dst2_1 = $rtp_0;
      __label__ = 18;
      break;
    } else {
      var $__x_0 = $45;
      var $up_0_pn = $up_0;
      var $__dst2_0 = $rtp_0;
      var $__n1_0 = $44;
      __label__ = 16;
      break;
    }
   case 16:
    var $__n1_0;
    var $__dst2_0;
    var $up_0_pn;
    var $__x_0;
    var $__src_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $48 = HEAP32[$__src_0 >> 2];
    var $49 = $__n1_0 - 1 | 0;
    if (($49 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $__x_0 = $48;
      var $up_0_pn = $__src_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $49;
      __label__ = 16;
      break;
    }
   case 17:
    var $__x_1 = $48;
    var $__dst2_1 = $rtp_0 + ($44 << 2) | 0;
    __label__ = 18;
    break;
   case 18:
    var $__dst2_1;
    var $__x_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    __label__ = 19;
    break;
   case 19:
    var $52 = ___gmpn_divrem_1($17, 0, $30, $20, $v);
    var $56 = (HEAP32[$17 + ($7 << 2) >> 2] | 0) == 0 & 1;
    var $57 = $20 - $56 | 0;
    var $60 = HEAP32[$u + 8 >> 2] - $56 | 0;
    var $62 = $3 ? $57 : -$57 | 0;
    HEAP32[$r + 4 >> 2] = $62;
    HEAP32[$r + 8 >> 2] = $60;
    var $65 = HEAP32[$__tmp_marker >> 2];
    if (($65 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    ___gmp_tmp_reentrant_free($65);
    __label__ = 21;
    break;
   case 21:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_div_ui["X"] = 1;

function ___gmpf_get_si($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$f + 8 >> 2];
    var $4 = HEAP32[$f + 4 >> 2];
    var $6 = HEAP32[$f + 12 >> 2];
    if (($2 | 0) < 1) {
      var $_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $11 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    if (($11 | 0) < ($2 | 0)) {
      var $fl_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $fl_0 = HEAP32[$6 + ($11 - $2 << 2) >> 2];
    __label__ = 5;
    break;
   case 5:
    var $fl_0;
    if (($4 | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $_0 = $fl_0 & 2147483647;
    __label__ = 8;
    break;
   case 7:
    var $_0 = ($fl_0 + 2147483647 | -2147483648) ^ 2147483647;
    __label__ = 8;
    break;
   case 8:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_get_ui($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$f + 8 >> 2];
    var $4 = HEAP32[$f + 4 >> 2];
    var $6 = HEAP32[$f + 12 >> 2];
    if (($2 | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      var $fl_0 = 0;
      __label__ = 5;
      break;
    }
   case 3:
    var $11 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    if (($11 | 0) < ($2 | 0)) {
      var $fl_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $fl_0 = HEAP32[$6 + ($11 - $2 << 2) >> 2];
    __label__ = 5;
    break;
   case 5:
    var $fl_0;
    return $fl_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_integer_p($f) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$f + 4 >> 2];
    if (($2 | 0) == 0) {
      var $_0 = 1;
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = HEAP32[$f + 8 >> 2];
    if (($6 | 0) < 1) {
      var $_0 = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $11 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $12 = $11 - $6 | 0;
    var $14 = HEAP32[$f + 12 >> 2];
    var $i_0 = 0;
    __label__ = 5;
    break;
   case 5:
    var $i_0;
    if (($i_0 | 0) < ($12 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $_0 = 1;
      __label__ = 7;
      break;
    }
   case 6:
    if ((HEAP32[$14 + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0 = $i_0 + 1 | 0;
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 7;
      break;
    }
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_get_str($dbuf, $exp, $base, $n_digits, $u) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $ign = __stackBase__ + 4;
    var $ign3 = __stackBase__ + 8;
    var $2 = HEAPU32[$u + 12 >> 2];
    var $3 = $u + 4 | 0;
    var $4 = HEAP32[$3 >> 2];
    var $7 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $9 = HEAPU32[$u + 8 >> 2];
    if (($base | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($base | 0) == 0) {
      var $_02 = 10;
      var $num_to_text_0 = STRING_TABLE.__str494 | 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($base | 0) > 36) {
      __label__ = 5;
      break;
    } else {
      var $_02 = $base;
      var $num_to_text_0 = STRING_TABLE.__str494 | 0;
      __label__ = 7;
      break;
    }
   case 5:
    if (($base | 0) > 62) {
      var $_0 = 0;
      __label__ = 72;
      break;
    } else {
      var $_02 = $base;
      var $num_to_text_0 = STRING_TABLE.__str1131 | 0;
      __label__ = 7;
      break;
    }
   case 6:
    var $_02 = -$base | 0;
    var $num_to_text_0 = STRING_TABLE.__str1495 | 0;
    __label__ = 7;
    break;
   case 7:
    var $num_to_text_0;
    var $_02;
    var $24 = ((HEAP32[$u >> 2] << 5) - 32 | 0) >>> 0;
    var $25 = ___gmpn_bases + $_02 * 20 + 4 | 0;
    var $26 = (tempDoubleI32[0] = HEAP32[$25 >> 2], tempDoubleI32[1] = HEAP32[$25 + 4 >> 2], tempDoubleF64[0]);
    var $27 = $24 * $26;
    var $28 = $27 >= 0 ? Math.floor($27) : Math.ceil($27);
    var $29 = $28 + 2 | 0;
    var $_03 = ($n_digits | 0) == 0 | $29 >>> 0 < $n_digits >>> 0 ? $29 : $n_digits;
    if (($dbuf | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_01 = $dbuf;
      var $alloc_size_0 = 0;
      __label__ = 9;
      break;
    }
   case 8:
    var $34 = $_03 + 2 | 0;
    var $35 = HEAP32[___gmp_allocate_func >> 2];
    var $36 = FUNCTION_TABLE[$35]($34);
    var $_01 = $36;
    var $alloc_size_0 = $34;
    __label__ = 9;
    break;
   case 9:
    var $alloc_size_0;
    var $_01;
    if (($7 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    HEAP32[$exp >> 2] = 0;
    HEAP8[$_01] = 0;
    var $_3 = 0;
    __label__ = 69;
    break;
   case 11:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $41 = $_03 + 67 | 0;
    if ($41 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $44 = STACKTOP;
    STACKTOP += $41;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $48 = $44;
    __label__ = 14;
    break;
   case 13:
    var $46 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $41);
    var $48 = $46;
    __label__ = 14;
    break;
   case 14:
    var $48;
    var $50 = $26 * 32;
    var $53 = (($_03 >>> 0) / $50 & -1) + 2 | 0;
    if (($9 | 0) > ($53 | 0)) {
      __label__ = 34;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $58 = (($53 - $9 | 0) >>> 0) * $50;
    var $59 = $58 >= 0 ? Math.floor($58) : Math.ceil($58);
    if (($7 | 0) > ($53 | 0)) {
      __label__ = 16;
      break;
    } else {
      var $up_0 = $2;
      var $un_0 = $7;
      __label__ = 17;
      break;
    }
   case 16:
    var $up_0 = $2 + ($7 - $53 << 2) | 0;
    var $un_0 = $53;
    __label__ = 17;
    break;
   case 17:
    var $un_0;
    var $up_0;
    var $66 = ($53 << 3) + 8 | 0;
    if ($66 >>> 0 < 65536) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $69 = STACKTOP;
    STACKTOP += $66;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $70 = STACKTOP;
    STACKTOP += $66;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $75 = $70;
    var $_in = $69;
    __label__ = 20;
    break;
   case 19:
    var $72 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $66);
    var $73 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $66);
    var $75 = $73;
    var $_in = $72;
    __label__ = 20;
    break;
   case 20:
    var $_in;
    var $75;
    var $76 = $_in;
    var $77 = $75;
    var $78 = _mpn_pow_1_highpart($76, $ign, $_02, $59, $53, $77);
    if (($un_0 | 0) > ($78 | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $81 = ___gmpn_mul($77, $up_0, $un_0, $76, $78);
    __label__ = 23;
    break;
   case 22:
    var $83 = ___gmpn_mul($77, $76, $78, $up_0, $un_0);
    __label__ = 23;
    break;
   case 23:
    var $85 = $78 + $un_0 | 0;
    var $90 = (HEAP32[$77 + ($85 - 1 << 2) >> 2] | 0) == 0 & 1;
    var $91 = $85 - $90 | 0;
    var $92 = $un_0 - $9 | 0;
    var $93 = HEAPU32[$ign >> 2];
    var $94 = $92 - $93 | 0;
    if (($94 | 0) < 0) {
      __label__ = 24;
      break;
    } else {
      var $tn_0 = $91;
      var $off_0 = $94;
      __label__ = 33;
      break;
    }
   case 24:
    if (($85 | 0) == ($90 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $99 = $91 - 1 | 0;
    var $100 = $77 + ($99 - $94 << 2) | 0;
    var $102 = HEAPU32[$77 + ($99 << 2) >> 2];
    if (($99 | 0) == 0) {
      var $__dst_1 = $100;
      var $__x_1 = $102;
      __label__ = 29;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $scevgep = $75 + (($9 + $93 << 2) - ($un_0 << 2)) | 0;
    var $__n_0 = $99;
    var $__dst_0 = $100;
    var $__src_0 = $77 + ($91 - 2 << 2) | 0;
    var $__x_0 = $102;
    __label__ = 27;
    break;
   case 27:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $112 = HEAP32[$__src_0 >> 2];
    var $113 = $__n_0 - 1 | 0;
    if (($113 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      var $__n_0 = $113;
      var $__dst_0 = $__dst_0 - 4 | 0;
      var $__src_0 = $__src_0 - 4 | 0;
      var $__x_0 = $112;
      __label__ = 27;
      break;
    }
   case 28:
    var $__dst_1 = $scevgep;
    var $__x_1 = $112;
    __label__ = 29;
    break;
   case 29:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 30;
    break;
   case 30:
    if (($92 | 0) == ($93 | 0)) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $120 = $9 + $93 - $un_0 << 2;
    _memset($75, 0, $120, 4);
    __label__ = 32;
    break;
   case 32:
    var $tn_0 = $91 - $94 | 0;
    var $off_0 = 0;
    __label__ = 33;
    break;
   case 33:
    var $off_0;
    var $tn_0;
    var $126 = ___gmpn_get_str($48, $_02, $77 + ($off_0 << 2) | 0, $tn_0 - $off_0 | 0);
    var $exp_in_base_0 = $126 - $59 | 0;
    var $n_digits_computed_0 = $126;
    __label__ = 54;
    break;
   case 34:
    var $129 = $9 - $53 | 0;
    var $131 = ($129 >>> 0) * $50;
    var $132 = $131 >= 0 ? Math.floor($131) : Math.ceil($131);
    if (($7 | 0) > ($53 | 0)) {
      __label__ = 35;
      break;
    } else {
      var $up_1 = $2;
      var $un_1 = $7;
      __label__ = 36;
      break;
    }
   case 35:
    var $up_1 = $2 + ($7 - $53 << 2) | 0;
    var $un_1 = $53;
    __label__ = 36;
    break;
   case 36:
    var $un_1;
    var $up_1;
    var $139 = ($53 << 3) + 8 | 0;
    if ($139 >>> 0 < 65536) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    var $142 = STACKTOP;
    STACKTOP += $139;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $143 = STACKTOP;
    STACKTOP += $139;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $148 = $143;
    var $_in8 = $142;
    __label__ = 39;
    break;
   case 38:
    var $145 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $139);
    var $146 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $139);
    var $148 = $146;
    var $_in8 = $145;
    __label__ = 39;
    break;
   case 39:
    var $_in8;
    var $148;
    var $149 = $_in8;
    var $150 = $148;
    var $151 = _mpn_pow_1_highpart($149, $ign3, $_02, $132, $53, $150);
    var $152 = HEAPU32[$ign3 >> 2];
    var $154 = $129 - $152 + $53 | 0;
    var $155 = $154 << 2;
    if ($155 >>> 0 < 65536) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $158 = STACKTOP;
    STACKTOP += $155;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $162 = $158;
    __label__ = 42;
    break;
   case 41:
    var $160 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $155);
    var $162 = $160;
    __label__ = 42;
    break;
   case 42:
    var $162;
    var $163 = $162;
    var $164 = $154 - $un_1 | 0;
    if (($154 | 0) == ($un_1 | 0)) {
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $168 = $9 - $un_1 - $152 << 2;
    _memset($162, 0, $168, 4);
    __label__ = 44;
    break;
   case 44:
    if (($un_1 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $172 = $un_1 - 1 | 0;
    var $173 = $163 + ($164 << 2) | 0;
    var $174 = HEAPU32[$up_1 >> 2];
    if (($172 | 0) == 0) {
      var $__x11_1 = $174;
      var $__dst9_1 = $173;
      __label__ = 49;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $scevgep24 = $162 + (($9 << 2) - 4 - ($152 << 2)) | 0;
    var $__x11_0 = $174;
    var $up_1_pn = $up_1;
    var $__dst9_0 = $173;
    var $__n8_0 = $172;
    __label__ = 47;
    break;
   case 47:
    var $__n8_0;
    var $__dst9_0;
    var $up_1_pn;
    var $__x11_0;
    var $__src10_0 = $up_1_pn + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    var $182 = HEAP32[$__src10_0 >> 2];
    var $183 = $__n8_0 - 1 | 0;
    if (($183 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      var $__x11_0 = $182;
      var $up_1_pn = $__src10_0;
      var $__dst9_0 = $__dst9_0 + 4 | 0;
      var $__n8_0 = $183;
      __label__ = 47;
      break;
    }
   case 48:
    var $__x11_1 = $182;
    var $__dst9_1 = $scevgep24;
    __label__ = 49;
    break;
   case 49:
    var $__dst9_1;
    var $__x11_1;
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    __label__ = 50;
    break;
   case 50:
    var $187 = $151 << 2;
    if ($187 >>> 0 < 65536) {
      __label__ = 51;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 51:
    var $190 = STACKTOP;
    STACKTOP += $187;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $194 = $190;
    __label__ = 53;
    break;
   case 52:
    var $192 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $187);
    var $194 = $192;
    __label__ = 53;
    break;
   case 53:
    var $194;
    ___gmpn_tdiv_qr($150, $194, 0, $163, $154, $149, $151);
    var $196 = $154 - $151 | 0;
    var $201 = $196 + 1 + (((HEAP32[$150 + ($196 << 2) >> 2] | 0) == 0) << 31 >> 31) | 0;
    var $202 = ___gmpn_get_str($48, $_02, $150, $201);
    var $exp_in_base_0 = $202 + $132 | 0;
    var $n_digits_computed_0 = $202;
    __label__ = 54;
    break;
   case 54:
    var $n_digits_computed_0;
    var $exp_in_base_0;
    if ($n_digits_computed_0 >>> 0 > $_03 >>> 0) {
      __label__ = 55;
      break;
    } else {
      var $exp_in_base_1 = $exp_in_base_0;
      var $n_digits_computed_2 = $n_digits_computed_0;
      __label__ = 59;
      break;
    }
   case 55:
    if (((HEAPU8[$48 + $_03 | 0] & 255) << 1 | 0) < ($_02 | 0)) {
      var $exp_in_base_1 = $exp_in_base_0;
      var $n_digits_computed_2 = $n_digits_computed_0;
      __label__ = 59;
      break;
    } else {
      var $n_digits_computed_1 = $_03;
      __label__ = 56;
      break;
    }
   case 56:
    var $n_digits_computed_1;
    var $212 = $n_digits_computed_1 - 1 | 0;
    var $213 = $48 + $212 | 0;
    var $215 = HEAP8[$213] + 1 & 255;
    HEAP8[$213] = $215;
    if (($215 & 255 | 0) == ($_02 | 0)) {
      __label__ = 57;
      break;
    } else {
      var $exp_in_base_1 = $exp_in_base_0;
      var $n_digits_computed_2 = $n_digits_computed_1;
      __label__ = 59;
      break;
    }
   case 57:
    if (($212 | 0) == 0) {
      __label__ = 58;
      break;
    } else {
      var $n_digits_computed_1 = $212;
      __label__ = 56;
      break;
    }
   case 58:
    HEAP8[$48] = 1;
    var $exp_in_base_1 = $exp_in_base_0 + 1 | 0;
    var $n_digits_computed_2 = 1;
    __label__ = 59;
    break;
   case 59:
    var $n_digits_computed_2;
    var $exp_in_base_1;
    var $222 = $_03 ^ -1;
    var $223 = $n_digits_computed_2 ^ -1;
    var $umax = $222 >>> 0 > $223 >>> 0 ? $222 : $223;
    var $indvars_iv = $umax ^ -1;
    __label__ = 60;
    break;
   case 60:
    var $indvars_iv;
    if (($indvars_iv | 0) == 0) {
      __label__ = 61;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 61:
    var $_lobit28 = HEAPU32[$3 >> 2] >>> 31;
    __label__ = 65;
    break;
   case 62:
    var $indvars_iv_next = $indvars_iv - 1 | 0;
    if (HEAP8[$48 + $indvars_iv_next | 0] << 24 >> 24 == 0) {
      var $indvars_iv = $indvars_iv_next;
      __label__ = 60;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $_lobit = HEAPU32[$3 >> 2] >>> 31;
    var $i_020 = 0;
    __label__ = 64;
    break;
   case 64:
    var $i_020;
    var $238 = HEAP8[$num_to_text_0 + (HEAPU8[$48 + $i_020 | 0] & 255) | 0];
    HEAP8[$_01 + ($i_020 + $_lobit) | 0] = $238;
    var $240 = $i_020 + 1 | 0;
    if (($240 | 0) == ($indvars_iv | 0)) {
      var $_lobit28 = $_lobit;
      __label__ = 65;
      break;
    } else {
      var $i_020 = $240;
      __label__ = 64;
      break;
    }
   case 65:
    var $_lobit28;
    HEAP8[$_01 + ($_lobit28 + $indvars_iv) | 0] = 0;
    HEAP32[$exp >> 2] = $exp_in_base_1;
    if ((HEAP32[$3 >> 2] | 0) < 0) {
      __label__ = 66;
      break;
    } else {
      var $_2 = $indvars_iv;
      __label__ = 67;
      break;
    }
   case 66:
    HEAP8[$_01] = 45;
    var $_2 = $indvars_iv + 1 | 0;
    __label__ = 67;
    break;
   case 67:
    var $_2;
    var $246 = HEAP32[$__tmp_marker >> 2];
    if (($246 | 0) == 0) {
      var $_3 = $_2;
      __label__ = 69;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    ___gmp_tmp_reentrant_free($246);
    var $_3 = $_2;
    __label__ = 69;
    break;
   case 69:
    var $_3;
    if (($alloc_size_0 | 0) == 0) {
      var $_0 = $_01;
      __label__ = 72;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $252 = $_3 + 1 | 0;
    if (($alloc_size_0 | 0) == ($252 | 0)) {
      var $_0 = $_01;
      __label__ = 72;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $255 = HEAP32[___gmp_reallocate_func >> 2];
    var $256 = FUNCTION_TABLE[$255]($_01, $alloc_size_0, $252);
    var $_0 = $256;
    __label__ = 72;
    break;
   case 72:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_get_str["X"] = 1;

function _mpn_pow_1_highpart($rp, $ignp, $base, $exp, $prec, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($exp | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$rp >> 2] = 1;
    var $_0 = 1;
    var $storemerge = 0;
    __label__ = 21;
    break;
   case 4:
    HEAP32[$rp >> 2] = $base;
    if ($exp >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $7 = $exp >>> 0 < 256 ? 1 : 9;
    var $12 = $7;
    __label__ = 7;
    break;
   case 6:
    var $10 = $exp >>> 0 < 16777216 ? 17 : 25;
    var $12 = $10;
    __label__ = 7;
    break;
   case 7:
    var $12;
    var $14 = STRING_TABLE.___gmpn_clz_tab + ($exp >>> ($12 >>> 0)) | 0;
    var $18 = $12 - 3 + (HEAPU8[$14] & 255) | 0;
    if (($18 | 0) > -1) {
      var $rn_04 = 1;
      var $i_05 = $18;
      var $off_06 = 0;
      var $ign_07 = 0;
      var $_028 = $tp;
      var $_019 = $rp;
      __label__ = 8;
      break;
    } else {
      var $rn_0_lcssa = 1;
      var $off_0_lcssa = 0;
      var $ign_0_lcssa = 0;
      var $_01_lcssa = $rp;
      __label__ = 13;
      break;
    }
   case 8:
    var $_019;
    var $_028;
    var $ign_07;
    var $off_06;
    var $i_05;
    var $rn_04;
    ___gmpn_sqr($_028, $_019 + ($off_06 << 2) | 0, $rn_04);
    var $21 = $rn_04 << 1;
    var $27 = $21 - ((HEAP32[$_028 + ($21 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $28 = $ign_07 << 1;
    if (($27 | 0) > ($prec | 0)) {
      __label__ = 9;
      break;
    } else {
      var $ign_1 = $28;
      var $off_1 = 0;
      var $rn_1 = $27;
      __label__ = 10;
      break;
    }
   case 9:
    var $31 = $27 - $prec | 0;
    var $ign_1 = $31 + $28 | 0;
    var $off_1 = $31;
    var $rn_1 = $prec;
    __label__ = 10;
    break;
   case 10:
    var $rn_1;
    var $off_1;
    var $ign_1;
    if ((1 << $i_05 & $exp | 0) == 0) {
      var $off_2 = $off_1;
      var $rn_2 = $rn_1;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $39 = ___gmpn_mul_1($_028, $_028 + ($off_1 << 2) | 0, $rn_1, $base);
    HEAP32[$_028 + ($rn_1 << 2) >> 2] = $39;
    var $off_2 = 0;
    var $rn_2 = (($39 | 0) != 0 & 1) + $rn_1 | 0;
    __label__ = 12;
    break;
   case 12:
    var $rn_2;
    var $off_2;
    if (($i_05 | 0) > 0) {
      var $_028 = $_019;
      var $rn_04 = $rn_2;
      var $i_05 = $i_05 - 1 | 0;
      var $off_06 = $off_2;
      var $ign_07 = $ign_1;
      var $_019 = $_028;
      __label__ = 8;
      break;
    } else {
      var $rn_0_lcssa = $rn_2;
      var $off_0_lcssa = $off_2;
      var $ign_0_lcssa = $ign_1;
      var $_01_lcssa = $_028;
      __label__ = 13;
      break;
    }
   case 13:
    var $_01_lcssa;
    var $ign_0_lcssa;
    var $off_0_lcssa;
    var $rn_0_lcssa;
    if (($rn_0_lcssa | 0) > ($prec | 0)) {
      __label__ = 14;
      break;
    } else {
      var $_1 = $_01_lcssa;
      var $ign_2 = $ign_0_lcssa;
      var $rn_3 = $rn_0_lcssa;
      __label__ = 15;
      break;
    }
   case 14:
    var $49 = $rn_0_lcssa - $prec | 0;
    var $_1 = $_01_lcssa + ($49 << 2) | 0;
    var $ign_2 = $ign_0_lcssa + $49 | 0;
    var $rn_3 = $prec;
    __label__ = 15;
    break;
   case 15:
    var $rn_3;
    var $ign_2;
    var $_1;
    var $53 = $_1 + ($off_0_lcssa << 2) | 0;
    if (($53 | 0) == ($rp | 0) | ($rn_3 | 0) == 0) {
      var $_0 = $rn_3;
      var $storemerge = $ign_2;
      __label__ = 21;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $57 = $rn_3 - 1 | 0;
    var $58 = HEAP32[$53 >> 2];
    if (($57 | 0) == 0) {
      var $__x_1 = $58;
      var $__dst_1 = $rp;
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $__x_0 = $58;
    var $__src_0 = $_1 + ($off_0_lcssa + 1 << 2) | 0;
    var $__dst_0 = $rp;
    var $__n_0 = $57;
    __label__ = 18;
    break;
   case 18:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $64 = HEAP32[$__src_0 >> 2];
    var $65 = $__n_0 - 1 | 0;
    if (($65 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__x_0 = $64;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $65;
      __label__ = 18;
      break;
    }
   case 19:
    var $__x_1 = $64;
    var $__dst_1 = $rp + ($57 << 2) | 0;
    __label__ = 20;
    break;
   case 20:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_0 = $rn_3;
    var $storemerge = $ign_2;
    __label__ = 21;
    break;
   case 21:
    var $storemerge;
    var $_0;
    HEAP32[$ignp >> 2] = $storemerge;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_pow_1_highpart["X"] = 1;

function ___gmpf_init($r) {
  var $1 = HEAP32[___gmp_default_fp_limb_precision >> 2];
  HEAP32[$r + 4 >> 2] = 0;
  HEAP32[$r + 8 >> 2] = 0;
  HEAP32[$r >> 2] = $1;
  var $5 = HEAP32[___gmp_allocate_func >> 2];
  var $7 = ($1 << 2) + 4 | 0;
  var $8 = FUNCTION_TABLE[$5]($7);
  var $9 = $8;
  HEAP32[$r + 12 >> 2] = $9;
  return;
}

function ___gmpf_init2($r, $prec_in_bits) {
  var $2 = $prec_in_bits >>> 0 < 53 ? 3 : ($prec_in_bits + 63 | 0) >>> 5;
  HEAP32[$r + 4 >> 2] = 0;
  HEAP32[$r + 8 >> 2] = 0;
  HEAP32[$r >> 2] = $2;
  var $6 = HEAP32[___gmp_allocate_func >> 2];
  var $8 = ($2 << 2) + 4 | 0;
  var $9 = FUNCTION_TABLE[$6]($8);
  var $10 = $9;
  HEAP32[$r + 12 >> 2] = $10;
  return;
}

function ___gmpf_inits($x) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ap = __stackBase__;
    HEAP32[$ap >> 2] = arguments[___gmpf_inits.length];
    if (($x | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $x;
      __label__ = 3;
      break;
    }
   case 3:
    var $_01;
    ___gmpf_init($_01);
    var $3 = HEAP32[$ap >> 2];
    var $4 = $3;
    var $5 = $3 + 4 | 0;
    HEAP32[$ap >> 2] = $5;
    var $6 = HEAP32[$4 >> 2];
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $6;
      __label__ = 3;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_inp_str($rop, $stream, $base) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_stream = ($stream | 0) == 0 ? HEAP32[_stdin >> 2] : $stream;
    var $3 = HEAP32[___gmp_allocate_func >> 2];
    var $4 = FUNCTION_TABLE[$3](100);
    var $nread_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $nread_0;
    var $6 = _getc($_stream);
    var $7 = $nread_0 + 1 | 0;
    var $8 = _isspace($6);
    if (($8 | 0) == 0) {
      var $c_0 = $6;
      var $str_0 = $4;
      var $alloc_size_0 = 100;
      var $str_size_0 = 0;
      __label__ = 4;
      break;
    } else {
      var $nread_0 = $7;
      __label__ = 3;
      break;
    }
   case 4:
    var $str_size_0;
    var $alloc_size_0;
    var $str_0;
    var $c_0;
    if ($str_size_0 >>> 0 < $alloc_size_0 >>> 0) {
      var $str_1 = $str_0;
      var $alloc_size_1 = $alloc_size_0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $12 = (i64Math.multiply($alloc_size_0, 0, 3, 0), i64Math.result[0]);
    var $13 = $12 >>> 1;
    var $14 = HEAP32[___gmp_reallocate_func >> 2];
    var $15 = FUNCTION_TABLE[$14]($str_0, $alloc_size_0, $13);
    var $str_1 = $15;
    var $alloc_size_1 = $13;
    __label__ = 6;
    break;
   case 6:
    var $alloc_size_1;
    var $str_1;
    if (($c_0 | 0) == -1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $19 = _isspace($c_0);
    if (($19 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $23 = $str_size_0 + 1 | 0;
    HEAP8[$str_1 + $str_size_0 | 0] = $c_0 & 255;
    var $25 = _getc($_stream);
    var $c_0 = $25;
    var $str_0 = $str_1;
    var $alloc_size_0 = $alloc_size_1;
    var $str_size_0 = $23;
    __label__ = 4;
    break;
   case 9:
    var $27 = _ungetc($c_0, $_stream);
    if ($str_size_0 >>> 0 < $alloc_size_1 >>> 0) {
      var $str_2 = $str_1;
      var $alloc_size_2 = $alloc_size_1;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $30 = (i64Math.multiply($alloc_size_1, 0, 3, 0), i64Math.result[0]);
    var $31 = $30 >>> 1;
    var $32 = HEAP32[___gmp_reallocate_func >> 2];
    var $33 = FUNCTION_TABLE[$32]($str_1, $alloc_size_1, $31);
    var $str_2 = $33;
    var $alloc_size_2 = $31;
    __label__ = 11;
    break;
   case 11:
    var $alloc_size_2;
    var $str_2;
    HEAP8[$str_2 + $str_size_0 | 0] = 0;
    var $36 = ___gmpf_set_str($rop, $str_2, $base);
    var $37 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$37]($str_2, $alloc_size_2);
    var $_0 = ($36 | 0) == -1 ? 0 : $str_size_0 + $nread_0 | 0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_inp_str["X"] = 1;

function ___gmpf_init_set($r, $s) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAP32[___gmp_default_fp_limb_precision >> 2];
    var $2 = HEAP32[___gmp_allocate_func >> 2];
    var $3 = $1 + 1 | 0;
    var $4 = $3 << 2;
    var $5 = FUNCTION_TABLE[$2]($4);
    var $6 = $5;
    HEAP32[$r + 12 >> 2] = $6;
    HEAP32[$r >> 2] = $1;
    var $10 = HEAP32[$s + 4 >> 2];
    var $11 = ($10 | 0) > -1;
    var $13 = $11 ? $10 : -$10 | 0;
    var $15 = HEAP32[$s + 12 >> 2];
    if (($13 | 0) > ($3 | 0)) {
      __label__ = 3;
      break;
    } else {
      var $sp_0 = $15;
      var $size_0 = $13;
      __label__ = 4;
      break;
    }
   case 3:
    var $sp_0 = $15 + ($13 - $3 << 2) | 0;
    var $size_0 = $3;
    __label__ = 4;
    break;
   case 4:
    var $size_0;
    var $sp_0;
    var $22 = HEAP32[$s + 8 >> 2];
    HEAP32[$r + 8 >> 2] = $22;
    var $25 = $11 ? $size_0 : -$size_0 | 0;
    HEAP32[$r + 4 >> 2] = $25;
    if (($size_0 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $29 = $size_0 - 1 | 0;
    var $30 = HEAP32[$sp_0 >> 2];
    if (($29 | 0) == 0) {
      var $__x_1 = $30;
      var $__dst_1 = $6;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $30;
      var $sp_0_pn = $sp_0;
      var $__dst_0 = $6;
      var $__n_0 = $29;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $sp_0_pn;
    var $__x_0;
    var $__src_0 = $sp_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $33 = HEAP32[$__src_0 >> 2];
    var $34 = $__n_0 - 1 | 0;
    if (($34 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $33;
      var $sp_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $34;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $33;
    var $__dst_1 = $6 + ($29 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_init_set["X"] = 1;

function ___gmpf_init_set_d($r, $val) {
  var $1 = HEAP32[___gmp_default_fp_limb_precision >> 2];
  HEAP32[$r >> 2] = $1;
  var $3 = HEAP32[___gmp_allocate_func >> 2];
  var $5 = ($1 << 2) + 4 | 0;
  var $6 = FUNCTION_TABLE[$3]($5);
  var $7 = $6;
  HEAP32[$r + 12 >> 2] = $7;
  ___gmpf_set_d($r, $val);
  return;
}

function ___gmpf_init_set_si($r, $val) {
  var $1 = HEAP32[___gmp_default_fp_limb_precision >> 2];
  HEAP32[$r >> 2] = $1;
  var $3 = HEAP32[___gmp_allocate_func >> 2];
  var $5 = ($1 << 2) + 4 | 0;
  var $6 = FUNCTION_TABLE[$3]($5);
  var $7 = $6;
  HEAP32[$r + 12 >> 2] = $7;
  var $9 = ($val | 0) > -1;
  var $11 = $9 ? $val : -$val | 0;
  HEAP32[$7 >> 2] = $11;
  var $12 = ($val | 0) != 0;
  var $13 = $12 & 1;
  HEAP32[$r + 8 >> 2] = $13;
  var $16 = $9 ? $13 : $12 << 31 >> 31;
  HEAP32[$r + 4 >> 2] = $16;
  return;
}

function ___gmpf_set_default_prec($prec_in_bits) {
  var $2 = $prec_in_bits >>> 0 < 53 ? 3 : ($prec_in_bits + 63 | 0) >>> 5;
  HEAP32[___gmp_default_fp_limb_precision >> 2] = $2;
  return;
}

function ___gmpf_neg($r, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $3 = -$2 | 0;
    if (($r | 0) == ($u | 0)) {
      var $size_0 = $3;
      __label__ = 11;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $8 = HEAP32[$r >> 2] + 1 | 0;
    var $9 = ($3 | 0) > -1;
    var $10 = $9 ? $3 : $2;
    var $12 = HEAP32[$r + 12 >> 2];
    var $14 = HEAP32[$u + 12 >> 2];
    if (($10 | 0) > ($8 | 0)) {
      __label__ = 4;
      break;
    } else {
      var $asize_0 = $10;
      var $up_0 = $14;
      __label__ = 5;
      break;
    }
   case 4:
    var $asize_0 = $8;
    var $up_0 = $14 + ($10 - $8 << 2) | 0;
    __label__ = 5;
    break;
   case 5:
    var $up_0;
    var $asize_0;
    if (($asize_0 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $22 = $asize_0 - 1 | 0;
    var $23 = HEAP32[$up_0 >> 2];
    if (($22 | 0) == 0) {
      var $__x_1 = $23;
      var $__dst_1 = $12;
      __label__ = 9;
      break;
    } else {
      var $__x_0 = $23;
      var $up_0_pn = $up_0;
      var $__dst_0 = $12;
      var $__n_0 = $22;
      __label__ = 7;
      break;
    }
   case 7:
    var $__n_0;
    var $__dst_0;
    var $up_0_pn;
    var $__x_0;
    var $__src_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $26 = HEAP32[$__src_0 >> 2];
    var $27 = $__n_0 - 1 | 0;
    if (($27 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $26;
      var $up_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $27;
      __label__ = 7;
      break;
    }
   case 8:
    var $__x_1 = $26;
    var $__dst_1 = $12 + ($22 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 10;
    break;
   case 10:
    var $32 = HEAP32[$u + 8 >> 2];
    HEAP32[$r + 8 >> 2] = $32;
    var $35 = $9 ? $asize_0 : -$asize_0 | 0;
    var $size_0 = $35;
    __label__ = 11;
    break;
   case 11:
    var $size_0;
    HEAP32[$r + 4 >> 2] = $size_0;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_neg["X"] = 1;

function ___gmpf_set($r, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = HEAP32[$r >> 2] + 1 | 0;
    var $5 = HEAP32[$u + 4 >> 2];
    var $6 = ($5 | 0) > -1;
    var $8 = $6 ? $5 : -$5 | 0;
    var $10 = HEAP32[$r + 12 >> 2];
    var $12 = HEAP32[$u + 12 >> 2];
    if (($8 | 0) > ($3 | 0)) {
      __label__ = 3;
      break;
    } else {
      var $up_0 = $12;
      var $asize_0 = $8;
      __label__ = 4;
      break;
    }
   case 3:
    var $up_0 = $12 + ($8 - $3 << 2) | 0;
    var $asize_0 = $3;
    __label__ = 4;
    break;
   case 4:
    var $asize_0;
    var $up_0;
    var $19 = HEAP32[$u + 8 >> 2];
    HEAP32[$r + 8 >> 2] = $19;
    var $22 = $6 ? $asize_0 : -$asize_0 | 0;
    HEAP32[$r + 4 >> 2] = $22;
    if (($asize_0 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $26 = $asize_0 - 1 | 0;
    var $27 = HEAP32[$up_0 >> 2];
    if (($26 | 0) == 0) {
      var $__x_1 = $27;
      var $__dst_1 = $10;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $27;
      var $up_0_pn = $up_0;
      var $__dst_0 = $10;
      var $__n_0 = $26;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $up_0_pn;
    var $__x_0;
    var $__src_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $30 = HEAP32[$__src_0 >> 2];
    var $31 = $__n_0 - 1 | 0;
    if (($31 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $30;
      var $up_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $31;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $30;
    var $__dst_1 = $10 + ($26 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_set["X"] = 1;

function ___gmpf_set_prec_raw($x, $prec_in_bits) {
  var $2 = $prec_in_bits >>> 0 < 53 ? 3 : ($prec_in_bits + 63 | 0) >>> 5;
  HEAP32[$x >> 2] = $2;
  return;
}

function ___gmpf_init_set_str($r, $s, $base) {
  var $1 = HEAP32[___gmp_default_fp_limb_precision >> 2];
  HEAP32[$r + 4 >> 2] = 0;
  HEAP32[$r + 8 >> 2] = 0;
  HEAP32[$r >> 2] = $1;
  var $5 = HEAP32[___gmp_allocate_func >> 2];
  var $7 = ($1 << 2) + 4 | 0;
  var $8 = FUNCTION_TABLE[$5]($7);
  var $9 = $8;
  HEAP32[$r + 12 >> 2] = $9;
  var $11 = ___gmpf_set_str($r, $s, $base);
  return $11;
}

function ___gmpf_init_set_ui($r, $val) {
  var $1 = HEAP32[___gmp_default_fp_limb_precision >> 2];
  HEAP32[$r >> 2] = $1;
  var $3 = HEAP32[___gmp_allocate_func >> 2];
  var $5 = ($1 << 2) + 4 | 0;
  var $6 = FUNCTION_TABLE[$3]($5);
  var $7 = $6;
  HEAP32[$r + 12 >> 2] = $7;
  HEAP32[$7 >> 2] = $val;
  var $10 = ($val | 0) != 0 & 1;
  HEAP32[$r + 4 >> 2] = $10;
  HEAP32[$r + 8 >> 2] = $10;
  return;
}

function ___gmpf_mul($r, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$r >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $4 = HEAP32[$u + 4 >> 2];
    var $6 = HEAP32[$v + 4 >> 2];
    var $7 = $6 ^ $4;
    var $10 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $13 = ($6 | 0) > -1 ? $6 : -$6 | 0;
    var $15 = HEAP32[$u + 12 >> 2];
    var $17 = HEAP32[$v + 12 >> 2];
    if (($10 | 0) > ($2 | 0)) {
      __label__ = 3;
      break;
    } else {
      var $up_0 = $15;
      var $usize_0 = $10;
      __label__ = 4;
      break;
    }
   case 3:
    var $up_0 = $15 + ($10 - $2 << 2) | 0;
    var $usize_0 = $2;
    __label__ = 4;
    break;
   case 4:
    var $usize_0;
    var $up_0;
    if (($13 | 0) > ($2 | 0)) {
      __label__ = 5;
      break;
    } else {
      var $vp_0 = $17;
      var $vsize_0 = $13;
      __label__ = 6;
      break;
    }
   case 5:
    var $vp_0 = $17 + ($13 - $2 << 2) | 0;
    var $vsize_0 = $2;
    __label__ = 6;
    break;
   case 6:
    var $vsize_0;
    var $vp_0;
    if (($usize_0 | 0) == 0 | ($vsize_0 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 23;
    break;
   case 8:
    var $33 = $vsize_0 + $usize_0 | 0;
    var $34 = $33 << 2;
    if ($34 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $37 = STACKTOP;
    STACKTOP += $34;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $41 = $37;
    __label__ = 11;
    break;
   case 10:
    var $39 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $34);
    var $41 = $39;
    __label__ = 11;
    break;
   case 11:
    var $41;
    var $42 = $41;
    if (($usize_0 | 0) < ($vsize_0 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $45 = ___gmpn_mul($42, $up_0, $usize_0, $vp_0, $vsize_0);
    var $49 = $45;
    __label__ = 14;
    break;
   case 13:
    var $47 = ___gmpn_mul($42, $vp_0, $vsize_0, $up_0, $usize_0);
    var $49 = $47;
    __label__ = 14;
    break;
   case 14:
    var $49;
    var $50 = ($49 | 0) == 0;
    var $52 = $33 - ($50 & 1) | 0;
    var $53 = $2 + 1 | 0;
    if (($52 | 0) > ($53 | 0)) {
      __label__ = 15;
      break;
    } else {
      var $rsize_0 = $52;
      var $tp_0 = $42;
      __label__ = 16;
      break;
    }
   case 15:
    var $rsize_0 = $53;
    var $tp_0 = $42 + ($52 - $53 << 2) | 0;
    __label__ = 16;
    break;
   case 16:
    var $tp_0;
    var $rsize_0;
    var $60 = HEAPU32[$r + 12 >> 2];
    if (($rsize_0 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $63 = $rsize_0 - 1 | 0;
    var $64 = HEAPU32[$tp_0 >> 2];
    if (($63 | 0) == 0) {
      var $__x_1 = $64;
      var $__dst_1 = $60;
      __label__ = 20;
      break;
    } else {
      var $__x_0 = $64;
      var $tp_0_pn = $tp_0;
      var $__dst_0 = $60;
      var $__n_0 = $63;
      __label__ = 18;
      break;
    }
   case 18:
    var $__n_0;
    var $__dst_0;
    var $tp_0_pn;
    var $__x_0;
    var $__src_0 = $tp_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $67 = HEAP32[$__src_0 >> 2];
    var $68 = $__n_0 - 1 | 0;
    if (($68 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__x_0 = $67;
      var $tp_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $68;
      __label__ = 18;
      break;
    }
   case 19:
    var $__x_1 = $67;
    var $__dst_1 = $60 + ($63 << 2) | 0;
    __label__ = 20;
    break;
   case 20:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 21;
    break;
   case 21:
    var $77 = HEAP32[$u + 8 >> 2] + ($50 << 31 >> 31) + HEAP32[$v + 8 >> 2] | 0;
    HEAP32[$r + 8 >> 2] = $77;
    var $81 = ($7 | 0) > -1 ? $rsize_0 : -$rsize_0 | 0;
    HEAP32[$r + 4 >> 2] = $81;
    var $_pre = HEAP32[$__tmp_marker >> 2];
    if (($_pre | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    ___gmp_tmp_reentrant_free($_pre);
    __label__ = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_mul["X"] = 1;

function ___gmpf_mul_2exp($r, $u, $exp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$r + 12 >> 2];
    var $4 = HEAPU32[$r >> 2];
    var $6 = HEAPU32[$u + 8 >> 2];
    var $8 = HEAP32[$u + 4 >> 2];
    if (($8 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 18;
    break;
   case 4:
    var $14 = ($8 | 0) > -1;
    var $16 = $14 ? $8 : -$8 | 0;
    var $18 = HEAPU32[$u + 12 >> 2];
    var $19 = $exp & 31;
    if (($19 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 5:
    var $22 = $4 + 1 | 0;
    if (($16 | 0) > ($22 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $up_0 = $18;
      var $abs_usize_0 = $16;
      __label__ = 7;
      break;
    }
   case 6:
    var $up_0 = $18 + ($16 - $22 << 2) | 0;
    var $abs_usize_0 = $22;
    __label__ = 7;
    break;
   case 7:
    var $abs_usize_0;
    var $up_0;
    if (($2 | 0) == ($up_0 | 0) | ($abs_usize_0 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $31 = $abs_usize_0 - 1 | 0;
    var $32 = HEAP32[$up_0 >> 2];
    if (($31 | 0) == 0) {
      var $__x_1 = $32;
      var $__dst_1 = $2;
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $32;
      var $up_0_pn = $up_0;
      var $__dst_0 = $2;
      var $__n_0 = $31;
      __label__ = 9;
      break;
    }
   case 9:
    var $__n_0;
    var $__dst_0;
    var $up_0_pn;
    var $__x_0;
    var $__src_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $35 = HEAP32[$__src_0 >> 2];
    var $36 = $__n_0 - 1 | 0;
    if (($36 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $__x_0 = $35;
      var $up_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $36;
      __label__ = 9;
      break;
    }
   case 10:
    var $__x_1 = $35;
    var $__dst_1 = $2 + ($31 << 2) | 0;
    __label__ = 11;
    break;
   case 11:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 12;
    break;
   case 12:
    HEAP32[$r + 8 >> 2] = $6 + ($exp >>> 5) | 0;
    var $abs_usize_2 = $abs_usize_0;
    __label__ = 17;
    break;
   case 13:
    if (($16 | 0) > ($4 | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $47 = $18 + ($16 - $4 << 2) | 0;
    var $48 = $2 + 4 | 0;
    var $49 = 32 - $19 | 0;
    var $50 = ___gmpn_rshift($48, $47, $4, $49);
    HEAP32[$2 >> 2] = $50;
    var $adj_0 = (HEAP32[$2 + ($4 << 2) >> 2] | 0) != 0 & 1;
    var $abs_usize_1 = $4;
    __label__ = 16;
    break;
   case 15:
    var $56 = ___gmpn_lshift($2, $18, $16, $19);
    var $57 = $2 + ($16 << 2) | 0;
    HEAP32[$57 >> 2] = $56;
    var $adj_0 = ($56 | 0) != 0 & 1;
    var $abs_usize_1 = $16;
    __label__ = 16;
    break;
   case 16:
    var $abs_usize_1;
    var $adj_0;
    HEAP32[$r + 8 >> 2] = $6 + ($exp >>> 5) + $adj_0 | 0;
    var $abs_usize_2 = $adj_0 + $abs_usize_1 | 0;
    __label__ = 17;
    break;
   case 17:
    var $abs_usize_2;
    var $68 = $14 ? $abs_usize_2 : -$abs_usize_2 | 0;
    HEAP32[$r + 4 >> 2] = $68;
    __label__ = 18;
    break;
   case 18:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_mul_2exp["X"] = 1;

function ___gmpf_mul_ui($r, $u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    if (($v | 0) == 0 | ($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 13;
    break;
   case 4:
    var $9 = ($2 | 0) > -1;
    var $11 = $9 ? $2 : -$2 | 0;
    var $13 = HEAPU32[$r >> 2];
    var $15 = HEAPU32[$u + 12 >> 2];
    var $16 = $11 - $13 | 0;
    if (($16 | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      var $up_0 = $15;
      var $size_0 = $11;
      var $cin_2 = 0;
      __label__ = 9;
      break;
    }
   case 5:
    var $19 = $16 - 1 | 0;
    var $21 = HEAPU32[$15 + ($19 << 2) >> 2];
    var $22 = $21 & 65535;
    var $23 = $21 >>> 16;
    var $24 = $v & 65535;
    var $25 = $v >>> 16;
    var $26 = (i64Math.multiply($22, 0, $24, 0), i64Math.result[0]);
    var $27 = (i64Math.multiply($22, 0, $25, 0), i64Math.result[0]);
    var $28 = (i64Math.multiply($23, 0, $24, 0), i64Math.result[0]);
    var $29 = (i64Math.multiply($23, 0, $25, 0), i64Math.result[0]);
    var $31 = ($26 >>> 16) + $27 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($31, $28);
    var $32 = $uadd1.f0;
    var $33 = $uadd1.f1;
    var $__x3_0 = $33 ? $29 + 65536 | 0 : $29;
    var $cin_0 = $__x3_0 + ($32 >>> 16) | 0;
    var $i_0 = $19;
    var $lo_0 = $32 << 16 | $26 & 65535;
    __label__ = 6;
    break;
   case 6:
    var $lo_0;
    var $i_0;
    var $cin_0;
    var $41 = $i_0 - 1 | 0;
    if (($41 | 0) < 0) {
      var $cin_1 = $cin_0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $45 = HEAPU32[$15 + ($41 << 2) >> 2];
    var $46 = $45 & 65535;
    var $47 = $45 >>> 16;
    var $48 = (i64Math.multiply($46, 0, $24, 0), i64Math.result[0]);
    var $49 = (i64Math.multiply($46, 0, $25, 0), i64Math.result[0]);
    var $50 = (i64Math.multiply($47, 0, $24, 0), i64Math.result[0]);
    var $51 = (i64Math.multiply($47, 0, $25, 0), i64Math.result[0]);
    var $53 = ($48 >>> 16) + $49 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($53, $50);
    var $54 = $uadd2.f0;
    var $55 = $uadd2.f1;
    var $__x34_0 = $55 ? $51 + 65536 | 0 : $51;
    var $58 = $__x34_0 + ($54 >>> 16) | 0;
    var $61 = $54 << 16 | $48 & 65535;
    var $uadd3 = _llvm_uadd_with_overflow_i32($58, $lo_0);
    var $62 = $uadd3.f0;
    var $63 = $uadd3.f1;
    var $65 = ($63 & 1) + $cin_0 | 0;
    if (($62 | 0) == -1) {
      var $cin_0 = $65;
      var $i_0 = $41;
      var $lo_0 = $61;
      __label__ = 6;
      break;
    } else {
      var $cin_1 = $65;
      __label__ = 8;
      break;
    }
   case 8:
    var $cin_1;
    var $up_0 = $15 + ($16 << 2) | 0;
    var $size_0 = $13;
    var $cin_2 = $cin_1;
    __label__ = 9;
    break;
   case 9:
    var $cin_2;
    var $size_0;
    var $up_0;
    var $71 = HEAPU32[$r + 12 >> 2];
    var $72 = ___gmpn_mul_1($71, $up_0, $size_0, $v);
    var $73 = HEAP32[$71 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($73, $cin_2);
    var $74 = $uadd.f0;
    HEAP32[$71 >> 2] = $74;
    var $75 = $uadd.f1;
    if ($75) {
      var $__gmp_i_0 = 1;
      __label__ = 10;
      break;
    } else {
      var $cbit_0 = 0;
      __label__ = 12;
      break;
    }
   case 10:
    var $__gmp_i_0;
    if (($__gmp_i_0 | 0) < ($size_0 | 0)) {
      __label__ = 11;
      break;
    } else {
      var $cbit_0 = 1;
      __label__ = 12;
      break;
    }
   case 11:
    var $78 = $71 + ($__gmp_i_0 << 2) | 0;
    var $80 = HEAP32[$78 >> 2] + 1 | 0;
    HEAP32[$78 >> 2] = $80;
    if (($80 | 0) == 0) {
      var $__gmp_i_0 = $__gmp_i_0 + 1 | 0;
      __label__ = 10;
      break;
    } else {
      var $cbit_0 = 0;
      __label__ = 12;
      break;
    }
   case 12:
    var $cbit_0;
    var $83 = $cbit_0 + $72 | 0;
    HEAP32[$71 + ($size_0 << 2) >> 2] = $83;
    var $86 = ($83 | 0) != 0 & 1;
    var $89 = $86 + HEAP32[$u + 8 >> 2] | 0;
    HEAP32[$r + 8 >> 2] = $89;
    var $91 = $86 + $size_0 | 0;
    var $93 = $9 ? $91 : -$91 | 0;
    HEAP32[$r + 4 >> 2] = $93;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_mul_ui["X"] = 1;

function ___gmpf_out_str($stream, $base, $n_digits, $op) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $exp = __stackBase__;
    var $__tmp_marker = __stackBase__ + 4;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $_base = ($base | 0) == 0 ? 10 : $base;
    if (($n_digits | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $_02 = $n_digits;
      __label__ = 4;
      break;
    }
   case 3:
    var $8 = ((HEAP32[$op >> 2] << 5) - 32 | 0) >>> 0;
    var $9 = ___gmpn_bases + $_base * 20 + 4 | 0;
    var $10 = (tempDoubleI32[0] = HEAP32[$9 >> 2], tempDoubleI32[1] = HEAP32[$9 + 4 >> 2], tempDoubleF64[0]);
    var $11 = $8 * $10;
    var $12 = $11 >= 0 ? Math.floor($11) : Math.ceil($11);
    var $_02 = $12 + 2 | 0;
    __label__ = 4;
    break;
   case 4:
    var $_02;
    var $_stream = ($stream | 0) == 0 ? HEAP32[_stdout >> 2] : $stream;
    var $17 = $_02 + 2 | 0;
    if ($17 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $20 = STACKTOP;
    STACKTOP += $17;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $24 = $20;
    __label__ = 7;
    break;
   case 6:
    var $22 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $17);
    var $24 = $22;
    __label__ = 7;
    break;
   case 7:
    var $24;
    var $25 = ___gmpf_get_str($24, $exp, $_base, $_02, $op);
    var $26 = _strlen($24);
    if (HEAP8[$24] << 24 >> 24 == 45) {
      __label__ = 8;
      break;
    } else {
      var $_1 = $26;
      var $written_0 = 1;
      var $str_0 = $24;
      __label__ = 9;
      break;
    }
   case 8:
    var $30 = $24 + 1 | 0;
    var $31 = _fputc(45, $_stream);
    var $_1 = $26 - 1 | 0;
    var $written_0 = 2;
    var $str_0 = $30;
    __label__ = 9;
    break;
   case 9:
    var $str_0;
    var $written_0;
    var $_1;
    var $34 = _nl_langinfo(50);
    var $35 = _strlen($34);
    var $36 = _putc(48, $_stream);
    var $37 = _fwrite($34, 1, $35, $_stream);
    var $38 = _fwrite($str_0, 1, $_1, $_stream);
    var $40 = ($_base | 0) < 11 ? STRING_TABLE.__str144 | 0 : STRING_TABLE.__str1145 | 0;
    var $41 = HEAP32[$exp >> 2];
    var $42 = _fprintf($_stream, $40, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $41, tempInt));
    var $45 = $written_0 + $35 + $38 + $42 | 0;
    var $46 = HEAP32[$__tmp_marker >> 2];
    if (($46 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    ___gmp_tmp_reentrant_free($46);
    __label__ = 11;
    break;
   case 11:
    var $50 = _ferror($_stream);
    var $52 = ($50 | 0) != 0 ? 0 : $45;
    STACKTOP = __stackBase__;
    return $52;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_out_str["X"] = 1;

function ___gmpf_pow_ui($r, $b, $e) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __stackBase__ | 0;
    var $2 = ___gmpf_get_prec($r);
    ___gmpf_init2($1, $2);
    ___gmpf_set($1, $b);
    ___gmpf_set_ui($r, 1);
    if (($e & 1 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    ___gmpf_set($r, $1);
    __label__ = 4;
    break;
   case 4:
    var $e2_01 = $e >>> 1;
    if (($e2_01 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $e2_02 = $e2_01;
      __label__ = 5;
      break;
    }
   case 5:
    var $e2_02;
    ___gmpf_mul($1, $1, $1);
    if (($e2_02 & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $e2_0 = $e2_02 >>> 1;
    if (($e2_0 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $e2_02 = $e2_0;
      __label__ = 5;
      break;
    }
   case 7:
    ___gmpf_mul($r, $r, $1);
    __label__ = 6;
    break;
   case 8:
    ___gmpf_clear($1);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_random2($x, $xs, $exp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $elimb = __stackBase__;
    var $3 = ($xs | 0) > -1 ? $xs : -$xs | 0;
    if (($3 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$x + 8 >> 2] = 0;
    HEAP32[$x + 4 >> 2] = 0;
    __label__ = 7;
    break;
   case 4:
    var $11 = HEAP32[$x >> 2] + 1 | 0;
    var $_ = ($3 | 0) > ($11 | 0) ? $11 : $3;
    var $14 = HEAP32[$x + 12 >> 2];
    ___gmpn_random2($14, $_);
    if (HEAP8[___gmp_rands_initialized] << 24 >> 24 == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP8[___gmp_rands_initialized] = 1;
    ___gmp_randinit_mt_noseed(___gmp_rands | 0);
    __label__ = 6;
    break;
   case 6:
    var $22 = HEAP32[HEAP32[___gmp_rands + 16 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$22](___gmp_rands | 0, $elimb, 32);
    var $25 = ($exp | 0) > -1 ? $exp : -$exp | 0;
    HEAP32[$x + 8 >> 2] = (HEAPU32[$elimb >> 2] >>> 0) % (($25 << 1 | 1) >>> 0) - $25 | 0;
    var $34 = ($xs | 0) < 0 ? -$_ | 0 : $_;
    HEAP32[$x + 4 >> 2] = $34;
    __label__ = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_reldiff($rdiff, $x, $y) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $d = __stackBase__;
    var $__tmp_marker = __stackBase__ + 16;
    var $2 = HEAPU32[$x + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $8 = (HEAP32[$y + 4 >> 2] | 0) != 0 & 1;
    ___gmpf_set_ui($rdiff, $8);
    __label__ = 9;
    break;
   case 4:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $14 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $15 = $14 + HEAP32[$rdiff >> 2] | 0;
    var $16 = $d | 0;
    HEAP32[$d >> 2] = $15;
    var $19 = ($15 << 2) + 4 | 0;
    if ($19 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $22 = STACKTOP;
    STACKTOP += $19;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $27 = $22;
    var $26 = 0;
    __label__ = 7;
    break;
   case 6:
    var $24 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $19);
    var $27 = $24;
    var $26 = HEAP32[$__tmp_marker >> 2];
    __label__ = 7;
    break;
   case 7:
    var $26;
    var $27;
    HEAP32[$d + 12 >> 2] = $27;
    ___gmpf_sub($16, $x, $y);
    var $30 = $d + 4 | 0;
    var $31 = HEAP32[$30 >> 2];
    var $34 = ($31 | 0) > -1 ? $31 : -$31 | 0;
    HEAP32[$30 >> 2] = $34;
    ___gmpf_div($rdiff, $16, $x);
    if (($26 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    ___gmp_tmp_reentrant_free($26);
    __label__ = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_set_prec($x, $new_prec_in_bits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = $new_prec_in_bits >>> 0 < 53 ? 3 : ($new_prec_in_bits + 63 | 0) >>> 5;
    var $3 = $x | 0;
    var $4 = HEAPU32[$3 >> 2];
    if (($2 | 0) == ($4 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP32[$3 >> 2] = $2;
    var $7 = $2 + 1 | 0;
    var $8 = $x + 4 | 0;
    var $9 = HEAP32[$8 >> 2];
    var $10 = ($9 | 0) > -1;
    var $12 = $10 ? $9 : -$9 | 0;
    var $13 = $x + 12 | 0;
    var $14 = HEAPU32[$13 >> 2];
    if (($12 | 0) > ($7 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 4:
    var $17 = $2 ^ -1;
    var $18 = $10 ? $7 : $17;
    HEAP32[$8 >> 2] = $18;
    var $_sum = $12 + $17 | 0;
    var $20 = HEAP32[$14 + ($_sum << 2) >> 2];
    if (($2 | 0) == 0) {
      var $__x_1 = $20;
      var $__dst_1 = $14;
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $__x_0 = $20;
    var $__src_0 = $14 + ($_sum + 1 << 2) | 0;
    var $__dst_0 = $14;
    var $__n_0 = $2;
    __label__ = 6;
    break;
   case 6:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $26 = HEAP32[$__src_0 >> 2];
    var $27 = $__n_0 - 1 | 0;
    if (($27 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $26;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $27;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $26;
    var $__dst_1 = $14 + ($2 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    var $31 = HEAP32[___gmp_reallocate_func >> 2];
    var $32 = $14;
    var $34 = ($4 << 2) + 4 | 0;
    var $35 = $7 << 2;
    var $36 = FUNCTION_TABLE[$31]($32, $34, $35);
    var $37 = $36;
    HEAP32[$13 >> 2] = $37;
    __label__ = 10;
    break;
   case 10:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_set_prec["X"] = 1;

function ___gmpf_set_d($r, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    tempDoubleF64[0] = $d;
    if ((tempDoubleI32[0] & 0) == 0 && (tempDoubleI32[1] & 2146435072) == 2146435072) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_invalid_operation();
    throw "Reached an unreachable!";
   case 4:
    if ($d == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 9;
    break;
   case 6:
    var $11 = $d < 0;
    if ($d < 0) {
      __label__ = 7;
      break;
    } else {
      var $16 = $d;
      __label__ = 8;
      break;
    }
   case 7:
    var $16 = -$d;
    __label__ = 8;
    break;
   case 8:
    var $16;
    var $17 = $11 ? -3 : 3;
    HEAP32[$r + 4 >> 2] = $17;
    var $20 = HEAP32[$r + 12 >> 2];
    var $21 = ___gmp_extract_double($20, $16);
    HEAP32[$r + 8 >> 2] = $21;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_set_si($dest, $val) {
  var $1 = ($val | 0) > -1;
  var $3 = $1 ? $val : -$val | 0;
  var $5 = HEAP32[$dest + 12 >> 2];
  HEAP32[$5 >> 2] = $3;
  var $6 = ($val | 0) != 0;
  var $7 = $6 & 1;
  HEAP32[$dest + 8 >> 2] = $7;
  var $10 = $1 ? $7 : $6 << 31 >> 31;
  HEAP32[$dest + 4 >> 2] = $10;
  return;
}

function ___gmpf_set_ui($f, $val) {
  var $2 = HEAP32[$f + 12 >> 2];
  HEAP32[$2 >> 2] = $val;
  var $4 = ($val | 0) != 0 & 1;
  HEAP32[$f + 4 >> 2] = $4;
  HEAP32[$f + 8 >> 2] = $4;
  return;
}

function ___gmpf_set_q($r, $q) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$q + 4 >> 2];
    var $4 = HEAPU32[$q + 16 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 18;
    break;
   case 4:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $11 = HEAPU32[$r >> 2];
    var $13 = HEAP32[$r + 12 >> 2];
    var $14 = ($2 | 0) > -1;
    var $16 = $14 ? $2 : -$2 | 0;
    var $18 = HEAP32[$q + 8 >> 2];
    var $20 = HEAP32[$q + 20 >> 2];
    var $22 = $16 - $4 + 1 | 0;
    var $23 = $11 + 1 | 0;
    var $24 = $23 - $22 | 0;
    var $25 = $24 + $16 | 0;
    var $26 = ($24 | 0) > 0;
    var $27 = $26 ? $25 : 0;
    var $29 = $27 + $4 << 2;
    if ($29 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $32 = STACKTOP;
    STACKTOP += $29;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $36 = $32;
    __label__ = 7;
    break;
   case 6:
    var $34 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $29);
    var $36 = $34;
    __label__ = 7;
    break;
   case 7:
    var $36;
    var $37 = $36;
    var $38 = $37 + ($4 << 2) | 0;
    if ($26) {
      __label__ = 8;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 8:
    if (($23 | 0) == ($22 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $scevgep = $36 + ($4 << 2) | 0;
    var $44 = $4 + $11 - $16 << 2;
    _memset($scevgep, 0, $44, 4);
    __label__ = 10;
    break;
   case 10:
    var $46 = $16 - 1 | 0;
    var $47 = $37 + ($24 + $4 << 2) | 0;
    var $48 = HEAPU32[$18 >> 2];
    if (($46 | 0) == 0) {
      var $__x_1 = $48;
      var $__dst2_1 = $47;
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $scevgep5 = $36 + (($4 << 3) + ($11 << 2) - 4) | 0;
    var $__x_0 = $48;
    var $_pn = $18;
    var $__dst2_0 = $47;
    var $__n1_0 = $46;
    __label__ = 12;
    break;
   case 12:
    var $__n1_0;
    var $__dst2_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $56 = HEAP32[$__src_0 >> 2];
    var $57 = $__n1_0 - 1 | 0;
    if (($57 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__x_0 = $56;
      var $_pn = $__src_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $57;
      __label__ = 12;
      break;
    }
   case 13:
    var $__x_1 = $56;
    var $__dst2_1 = $scevgep5;
    __label__ = 14;
    break;
   case 14:
    var $__dst2_1;
    var $__x_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    var $np_0 = $38;
    __label__ = 16;
    break;
   case 15:
    var $np_0 = $18 + (-$24 << 2) | 0;
    __label__ = 16;
    break;
   case 16:
    var $np_0;
    ___gmpn_tdiv_qr($13, $37, 0, $np_0, $25, $20, $4);
    var $67 = (HEAP32[$13 + ($11 << 2) >> 2] | 0) == 0 & 1;
    var $68 = $23 - $67 | 0;
    var $69 = $22 - $67 | 0;
    HEAP32[$r + 8 >> 2] = $69;
    var $72 = $14 ? $68 : -$68 | 0;
    HEAP32[$r + 4 >> 2] = $72;
    var $74 = HEAP32[$__tmp_marker >> 2];
    if (($74 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    ___gmp_tmp_reentrant_free($74);
    __label__ = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_set_q["X"] = 1;

function ___gmpf_set_str($x, $str, $base) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $radj = __stackBase__ + 4;
    var $1 = _nl_langinfo(50);
    var $2 = _strlen($1);
    var $c_0_in_in = $str;
    __label__ = 3;
    break;
   case 3:
    var $c_0_in_in;
    var $c_0_in = HEAPU8[$c_0_in_in];
    var $c_0 = $c_0_in & 255;
    var $4 = _isspace($c_0);
    var $6 = $c_0_in_in + 1 | 0;
    if (($4 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $c_0_in_in = $6;
      __label__ = 3;
      break;
    }
   case 4:
    if ($c_0_in << 24 >> 24 == 45) {
      __label__ = 5;
      break;
    } else {
      var $_1 = $c_0_in_in;
      var $c_1 = $c_0;
      var $negative_0 = 0;
      __label__ = 6;
      break;
    }
   case 5:
    var $_1 = $6;
    var $c_1 = HEAPU8[$6] & 255;
    var $negative_0 = 1;
    __label__ = 6;
    break;
   case 6:
    var $negative_0;
    var $c_1;
    var $_1;
    var $_base = ($base | 0) == 0 ? 10 : $base;
    var $14 = ($_base | 0) < 0;
    var $exp_base_0 = $14 ? 10 : $_base;
    var $_14 = $14 ? -$_base | 0 : $_base;
    if (($_14 | 0) > 36) {
      __label__ = 7;
      break;
    } else {
      var $digit_value_0 = STRING_TABLE.___gmp_digit_value_tab | 0;
      __label__ = 8;
      break;
    }
   case 7:
    if (($_14 | 0) > 62) {
      var $_0 = -1;
      __label__ = 104;
      break;
    } else {
      var $digit_value_0 = STRING_TABLE.___gmp_digit_value_tab + 224 | 0;
      __label__ = 8;
      break;
    }
   case 8:
    var $digit_value_0;
    var $24 = ($_14 | 0) == 0 ? 10 : $_14;
    if ((HEAPU8[$digit_value_0 + $c_1 | 0] & 255 | 0) < ($24 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $i_0 = 0;
      __label__ = 9;
      break;
    }
   case 9:
    var $i_0;
    if ($i_0 >>> 0 < $2 >>> 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    if (HEAP8[$_1 + $i_0 | 0] << 24 >> 24 == HEAP8[$1 + $i_0 | 0] << 24 >> 24) {
      var $i_0 = $i_0 + 1 | 0;
      __label__ = 9;
      break;
    } else {
      var $_0 = -1;
      __label__ = 104;
      break;
    }
   case 11:
    if ((HEAPU8[$digit_value_0 + (HEAPU8[$_1 + $2 | 0] & 255) | 0] & 255 | 0) < ($24 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $_0 = -1;
      __label__ = 104;
      break;
    }
   case 12:
    var $43 = _strlen($_1);
    var $44 = ($_14 | 0) < 11;
    var $i_1_in = $43;
    __label__ = 13;
    break;
   case 13:
    var $i_1_in;
    var $i_1 = $i_1_in - 1 | 0;
    if (($i_1 | 0) == 0) {
      var $str_size_0 = $43;
      var $expptr_0 = 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $48 = HEAP8[$_1 + $i_1 | 0];
    if ($48 << 24 >> 24 == 64) {
      __label__ = 17;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if ($44) {
      __label__ = 16;
      break;
    } else {
      var $i_1_in = $i_1;
      __label__ = 13;
      break;
    }
   case 16:
    if ($48 << 24 >> 24 == 101 || $48 << 24 >> 24 == 69) {
      __label__ = 17;
      break;
    } else {
      var $i_1_in = $i_1;
      __label__ = 13;
      break;
    }
   case 17:
    var $str_size_0 = $i_1;
    var $expptr_0 = $_1 + $i_1_in | 0;
    __label__ = 18;
    break;
   case 18:
    var $expptr_0;
    var $str_size_0;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $54 = $str_size_0 + 1 | 0;
    if ($54 >>> 0 < 65536) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $57 = STACKTOP;
    STACKTOP += $54;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $61 = $57;
    __label__ = 21;
    break;
   case 20:
    var $59 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $54);
    var $61 = $59;
    __label__ = 21;
    break;
   case 21:
    var $61;
    var $62 = $2 - 1 | 0;
    var $_2 = $_1;
    var $s_0 = $61;
    var $i_2 = 0;
    var $dotpos_0 = 0;
    __label__ = 22;
    break;
   case 22:
    var $dotpos_0;
    var $i_2;
    var $s_0;
    var $_2;
    if ($i_2 >>> 0 < $str_size_0 >>> 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 23:
    var $67 = HEAPU8[$_2] & 255;
    var $68 = _isspace($67);
    if (($68 | 0) == 0) {
      var $j_0 = 0;
      __label__ = 24;
      break;
    } else {
      var $_3 = $_2;
      var $s_1 = $s_0;
      var $i_3 = $i_2;
      var $dotpos_1 = $dotpos_0;
      __label__ = 34;
      break;
    }
   case 24:
    var $j_0;
    if ($j_0 >>> 0 < $2 >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    if (HEAP8[$_2 + $j_0 | 0] << 24 >> 24 == HEAP8[$1 + $j_0 | 0] << 24 >> 24) {
      var $j_0 = $j_0 + 1 | 0;
      __label__ = 24;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 26:
    if (($dotpos_0 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $81 = HEAP32[$__tmp_marker >> 2];
    if (($81 | 0) == 0) {
      var $_0 = -1;
      __label__ = 104;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    ___gmp_tmp_reentrant_free($81);
    var $_0 = -1;
    __label__ = 104;
    break;
   case 29:
    var $_3 = $_2 + $62 | 0;
    var $s_1 = $s_0;
    var $i_3 = $i_2 + $62 | 0;
    var $dotpos_1 = $s_0;
    __label__ = 34;
    break;
   case 30:
    var $89 = HEAPU8[$digit_value_0 + $67 | 0];
    if (($89 & 255 | 0) < ($_14 | 0)) {
      __label__ = 33;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $93 = HEAPU32[$__tmp_marker >> 2];
    if (($93 | 0) == 0) {
      var $_0 = -1;
      __label__ = 104;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    ___gmp_tmp_reentrant_free($93);
    var $_0 = -1;
    __label__ = 104;
    break;
   case 33:
    HEAP8[$s_0] = $89;
    var $_3 = $_2;
    var $s_1 = $s_0 + 1 | 0;
    var $i_3 = $i_2;
    var $dotpos_1 = $dotpos_0;
    __label__ = 34;
    break;
   case 34:
    var $dotpos_1;
    var $i_3;
    var $s_1;
    var $_3;
    var $_2 = $_3 + 1 | 0;
    var $s_0 = $s_1;
    var $i_2 = $i_3 + 1 | 0;
    var $dotpos_0 = $dotpos_1;
    __label__ = 22;
    break;
   case 35:
    var $102 = $s_0;
    var $104 = $102 - $61 | 0;
    var $106 = HEAPU32[$x >> 2];
    var $107 = $106 + 1 | 0;
    var $109 = ___gmpn_bases + $_14 * 20 + 4 | 0;
    var $110 = (tempDoubleI32[0] = HEAP32[$109 >> 2], tempDoubleI32[1] = HEAP32[$109 + 4 >> 2], tempDoubleF64[0]);
    var $115 = ((($104 >>> 0) / ($110 * 32) & -1) << 2) + 8 | 0;
    if ($115 >>> 0 < 65536) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $118 = STACKTOP;
    STACKTOP += $115;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $122 = $118;
    __label__ = 38;
    break;
   case 37:
    var $120 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $115);
    var $122 = $120;
    __label__ = 38;
    break;
   case 38:
    var $122;
    var $123 = $122;
    var $124 = ___gmpn_set_str($123, $61, $104, $_14);
    if (($124 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 39:
    HEAP32[$x + 4 >> 2] = 0;
    HEAP32[$x + 8 >> 2] = 0;
    var $129 = HEAP32[$__tmp_marker >> 2];
    if (($129 | 0) == 0) {
      var $_0 = 0;
      __label__ = 104;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    ___gmp_tmp_reentrant_free($129);
    var $_0 = 0;
    __label__ = 104;
    break;
   case 41:
    if (($124 | 0) > ($107 | 0)) {
      __label__ = 42;
      break;
    } else {
      var $mn_0 = $124;
      var $mp_0 = $123;
      var $madj_0 = 0;
      __label__ = 43;
      break;
    }
   case 42:
    var $135 = $124 - $107 | 0;
    var $mn_0 = $107;
    var $mp_0 = $123 + ($135 << 2) | 0;
    var $madj_0 = $135;
    __label__ = 43;
    break;
   case 43:
    var $madj_0;
    var $mp_0;
    var $mn_0;
    if (($expptr_0 | 0) == 0) {
      var $exp_in_base_1 = 0;
      __label__ = 51;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $140 = HEAP8[$expptr_0];
    var $141 = $140 << 24 >> 24 == 45;
    var $142 = $141 << 31 >> 31;
    var $145 = $141 ? 1 : -(($140 << 24 >> 24 == 43) << 31 >> 31) | 0;
    var $151 = HEAPU8[$digit_value_0 + (HEAPU8[$expptr_0 + $145 | 0] & 255) | 0] & 255;
    if (($151 | 0) < ($exp_base_0 | 0)) {
      __label__ = 47;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $154 = HEAPU32[$__tmp_marker >> 2];
    if (($154 | 0) == 0) {
      var $_0 = -1;
      __label__ = 104;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    ___gmp_tmp_reentrant_free($154);
    var $_0 = -1;
    __label__ = 104;
    break;
   case 47:
    var $dig1_014 = HEAPU8[$digit_value_0 + (HEAPU8[$expptr_0 + ($145 + 1) | 0] & 255) | 0] & 255;
    if (($dig1_014 | 0) < ($exp_base_0 | 0)) {
      __label__ = 48;
      break;
    } else {
      var $exp_in_base_0_lcssa = $151;
      __label__ = 50;
      break;
    }
   case 48:
    var $exp_in_base_015 = $151;
    var $expptr_116 = $expptr_0 + ($145 + 2) | 0;
    var $dig1_017 = $dig1_014;
    __label__ = 49;
    break;
   case 49:
    var $dig1_017;
    var $expptr_116;
    var $exp_in_base_015;
    var $162 = (i64Math.multiply($exp_in_base_015, 0, $exp_base_0, 0), i64Math.result[0]);
    var $163 = $dig1_017 + $162 | 0;
    var $dig1_0 = HEAPU8[$digit_value_0 + (HEAPU8[$expptr_116] & 255) | 0] & 255;
    if (($dig1_0 | 0) < ($exp_base_0 | 0)) {
      var $exp_in_base_015 = $163;
      var $expptr_116 = $expptr_116 + 1 | 0;
      var $dig1_017 = $dig1_0;
      __label__ = 49;
      break;
    } else {
      var $exp_in_base_0_lcssa = $163;
      __label__ = 50;
      break;
    }
   case 50:
    var $exp_in_base_0_lcssa;
    var $exp_in_base_1 = ($exp_in_base_0_lcssa ^ $142) - $142 | 0;
    __label__ = 51;
    break;
   case 51:
    var $exp_in_base_1;
    if (($dotpos_0 | 0) == 0) {
      var $exp_in_base_2 = $exp_in_base_1;
      __label__ = 53;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    var $exp_in_base_2 = $dotpos_0 - $102 + $exp_in_base_1 | 0;
    __label__ = 53;
    break;
   case 53:
    var $exp_in_base_2;
    var $175 = ($exp_in_base_2 | 0) < 0;
    var $178 = ($exp_in_base_2 | 0) > -1 ? $exp_in_base_2 : -$exp_in_base_2 | 0;
    if (($178 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 54:
    if (($mn_0 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 55:
    var $183 = $mn_0 - 1 | 0;
    var $185 = HEAP32[$x + 12 >> 2];
    var $186 = HEAP32[$mp_0 >> 2];
    if (($183 | 0) == 0) {
      var $__x_1 = $186;
      var $__dst_1 = $185;
      __label__ = 58;
      break;
    } else {
      var $__x_0 = $186;
      var $mp_0_pn5 = $mp_0;
      var $__dst_0 = $185;
      var $__n_0 = $183;
      __label__ = 56;
      break;
    }
   case 56:
    var $__n_0;
    var $__dst_0;
    var $mp_0_pn5;
    var $__x_0;
    var $__src_0 = $mp_0_pn5 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $189 = HEAP32[$__src_0 >> 2];
    var $190 = $__n_0 - 1 | 0;
    if (($190 | 0) == 0) {
      __label__ = 57;
      break;
    } else {
      var $__x_0 = $189;
      var $mp_0_pn5 = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $190;
      __label__ = 56;
      break;
    }
   case 57:
    var $__x_1 = $189;
    var $__dst_1 = $185 + ($183 << 2) | 0;
    __label__ = 58;
    break;
   case 58:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 59;
    break;
   case 59:
    var $195 = ($negative_0 | 0) != 0 ? -$mn_0 | 0 : $mn_0;
    HEAP32[$x + 4 >> 2] = $195;
    HEAP32[$x + 8 >> 2] = $mn_0 + $madj_0 | 0;
    var $199 = HEAP32[$__tmp_marker >> 2];
    if (($199 | 0) == 0) {
      var $_0 = 0;
      __label__ = 104;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    ___gmp_tmp_reentrant_free($199);
    var $_0 = 0;
    __label__ = 104;
    break;
   case 61:
    var $203 = $106 + 2 | 0;
    var $204 = $203 << 3;
    if ($204 >>> 0 < 65536) {
      __label__ = 62;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 62:
    var $207 = STACKTOP;
    STACKTOP += $204;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $208 = STACKTOP;
    STACKTOP += $204;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $213 = $208;
    var $_in = $207;
    __label__ = 64;
    break;
   case 63:
    var $210 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $204);
    var $211 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $204);
    var $213 = $211;
    var $_in = $210;
    __label__ = 64;
    break;
   case 64:
    var $_in;
    var $213;
    var $214 = $_in;
    var $216 = _mpn_pow_1_highpart156($214, $radj, $_14, $178, $107, $213);
    if ($175) {
      __label__ = 65;
      break;
    } else {
      __label__ = 89;
      break;
    }
   case 65:
    if (($mn_0 | 0) < ($216 | 0)) {
      __label__ = 66;
      break;
    } else {
      var $mn_1 = $mn_0;
      var $mp_1 = $mp_0;
      var $madj_1 = $madj_0;
      __label__ = 78;
      break;
    }
   case 66:
    var $220 = $216 << 2;
    var $221 = $220 + 4 | 0;
    if ($221 >>> 0 < 65536) {
      __label__ = 67;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 67:
    var $224 = STACKTOP;
    STACKTOP += $221;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $228 = $224;
    __label__ = 69;
    break;
   case 68:
    var $226 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $221);
    var $228 = $226;
    __label__ = 69;
    break;
   case 69:
    var $228;
    var $229 = $228;
    if (($216 | 0) == ($mn_0 | 0)) {
      __label__ = 71;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $232 = $216 - $mn_0 << 2;
    _memset($228, 0, $232, 4);
    __label__ = 71;
    break;
   case 71:
    if (($mn_0 | 0) == 0) {
      __label__ = 77;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 72:
    var $236 = $mn_0 - 1 | 0;
    var $237 = $229 + ($216 - $mn_0 << 2) | 0;
    var $238 = HEAPU32[$mp_0 >> 2];
    if (($236 | 0) == 0) {
      var $__x7_1 = $238;
      var $__dst5_1 = $237;
      __label__ = 76;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $scevgep = $228 + ($220 - 4) | 0;
    var $__x7_0 = $238;
    var $mp_0_pn = $mp_0;
    var $__dst5_0 = $237;
    var $__n4_0 = $236;
    __label__ = 74;
    break;
   case 74:
    var $__n4_0;
    var $__dst5_0;
    var $mp_0_pn;
    var $__x7_0;
    var $__src6_0 = $mp_0_pn + 4 | 0;
    HEAP32[$__dst5_0 >> 2] = $__x7_0;
    var $243 = HEAP32[$__src6_0 >> 2];
    var $244 = $__n4_0 - 1 | 0;
    if (($244 | 0) == 0) {
      __label__ = 75;
      break;
    } else {
      var $__x7_0 = $243;
      var $mp_0_pn = $__src6_0;
      var $__dst5_0 = $__dst5_0 + 4 | 0;
      var $__n4_0 = $244;
      __label__ = 74;
      break;
    }
   case 75:
    var $__x7_1 = $243;
    var $__dst5_1 = $scevgep;
    __label__ = 76;
    break;
   case 76:
    var $__dst5_1;
    var $__x7_1;
    HEAP32[$__dst5_1 >> 2] = $__x7_1;
    __label__ = 77;
    break;
   case 77:
    var $mn_1 = $216;
    var $mp_1 = $229;
    var $madj_1 = $madj_0 + ($mn_0 - $216) | 0;
    __label__ = 78;
    break;
   case 78:
    var $madj_1;
    var $mp_1;
    var $mn_1;
    var $253 = HEAPU32[$214 + ($216 - 1 << 2) >> 2];
    if (($253 | 0) > -1) {
      __label__ = 79;
      break;
    } else {
      var $mn_2 = $mn_1;
      __label__ = 84;
      break;
    }
   case 79:
    if ($253 >>> 0 < 65536) {
      __label__ = 80;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 80:
    var $259 = $253 >>> 0 < 256 ? 1 : 9;
    var $264 = $259;
    __label__ = 82;
    break;
   case 81:
    var $262 = $253 >>> 0 < 16777216 ? 17 : 25;
    var $264 = $262;
    __label__ = 82;
    break;
   case 82:
    var $264;
    var $267 = STRING_TABLE.___gmpn_clz_tab + ($253 >>> ($264 >>> 0)) | 0;
    var $270 = 33 - $264 - (HEAPU8[$267] & 255) | 0;
    var $271 = ___gmpn_lshift($214, $214, $216, $270);
    var $272 = ___gmpn_lshift($mp_1, $mp_1, $mn_1, $270);
    if (($272 | 0) == 0) {
      var $mn_2 = $mn_1;
      __label__ = 84;
      break;
    } else {
      __label__ = 83;
      break;
    }
   case 83:
    HEAP32[$mp_1 + ($mn_1 << 2) >> 2] = $272;
    var $mn_2 = $mn_1 + 1 | 0;
    __label__ = 84;
    break;
   case 84:
    var $mn_2;
    var $278 = $203 << 2;
    if ($278 >>> 0 < 65536) {
      __label__ = 85;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 85:
    var $281 = STACKTOP;
    STACKTOP += $278;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $285 = $281;
    __label__ = 87;
    break;
   case 86:
    var $283 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $278);
    var $285 = $283;
    __label__ = 87;
    break;
   case 87:
    var $285;
    var $286 = $285;
    var $287 = $mn_2 - $216 | 0;
    var $288 = $107 - $287 | 0;
    var $289 = ___gmpn_divrem($286, $288, $mp_1, $mn_2, $214, $216);
    var $293 = $289 + $287 + ($madj_1 - HEAP32[$radj >> 2]) | 0;
    if (($289 | 0) == 0) {
      var $rn_0 = $107;
      var $tp_0 = $286;
      var $exp_in_limbs_0 = $293;
      __label__ = 97;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 88:
    HEAP32[$286 + ($107 << 2) >> 2] = $289;
    var $rn_0 = $107;
    var $tp_0 = $285 + 4 | 0;
    var $exp_in_limbs_0 = $293;
    __label__ = 97;
    break;
   case 89:
    var $300 = $216 + $mn_0 | 0;
    var $301 = $300 << 2;
    if ($301 >>> 0 < 65536) {
      __label__ = 90;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 90:
    var $304 = STACKTOP;
    STACKTOP += $301;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $308 = $304;
    __label__ = 92;
    break;
   case 91:
    var $306 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $301);
    var $308 = $306;
    __label__ = 92;
    break;
   case 92:
    var $308;
    var $309 = $308;
    if (($216 | 0) > ($mn_0 | 0)) {
      __label__ = 93;
      break;
    } else {
      __label__ = 94;
      break;
    }
   case 93:
    var $312 = ___gmpn_mul($309, $214, $216, $mp_0, $mn_0);
    __label__ = 95;
    break;
   case 94:
    var $314 = ___gmpn_mul($309, $mp_0, $mn_0, $214, $216);
    __label__ = 95;
    break;
   case 95:
    var $321 = $300 - ((HEAP32[$309 + ($300 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $324 = HEAP32[$radj >> 2] + $madj_0 + $321 | 0;
    if (($321 | 0) > ($107 | 0)) {
      __label__ = 96;
      break;
    } else {
      var $rn_0 = $321;
      var $tp_0 = $309;
      var $exp_in_limbs_0 = $324;
      __label__ = 97;
      break;
    }
   case 96:
    var $rn_0 = $107;
    var $tp_0 = $309 + ($321 - $107 << 2) | 0;
    var $exp_in_limbs_0 = $324;
    __label__ = 97;
    break;
   case 97:
    var $exp_in_limbs_0;
    var $tp_0;
    var $rn_0;
    if (($rn_0 | 0) == 0) {
      __label__ = 102;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 98:
    var $332 = $rn_0 - 1 | 0;
    var $334 = HEAPU32[$x + 12 >> 2];
    var $335 = HEAP32[$tp_0 >> 2];
    if (($332 | 0) == 0) {
      var $__x11_1 = $335;
      var $__dst9_1 = $334;
      __label__ = 101;
      break;
    } else {
      var $__x11_0 = $335;
      var $tp_0_pn = $tp_0;
      var $__dst9_0 = $334;
      var $__n8_0 = $332;
      __label__ = 99;
      break;
    }
   case 99:
    var $__n8_0;
    var $__dst9_0;
    var $tp_0_pn;
    var $__x11_0;
    var $__src10_0 = $tp_0_pn + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    var $338 = HEAP32[$__src10_0 >> 2];
    var $339 = $__n8_0 - 1 | 0;
    if (($339 | 0) == 0) {
      __label__ = 100;
      break;
    } else {
      var $__x11_0 = $338;
      var $tp_0_pn = $__src10_0;
      var $__dst9_0 = $__dst9_0 + 4 | 0;
      var $__n8_0 = $339;
      __label__ = 99;
      break;
    }
   case 100:
    var $__x11_1 = $338;
    var $__dst9_1 = $334 + ($332 << 2) | 0;
    __label__ = 101;
    break;
   case 101:
    var $__dst9_1;
    var $__x11_1;
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    __label__ = 102;
    break;
   case 102:
    var $344 = ($negative_0 | 0) != 0 ? -$rn_0 | 0 : $rn_0;
    HEAP32[$x + 4 >> 2] = $344;
    HEAP32[$x + 8 >> 2] = $exp_in_limbs_0;
    var $347 = HEAP32[$__tmp_marker >> 2];
    if (($347 | 0) == 0) {
      var $_0 = 0;
      __label__ = 104;
      break;
    } else {
      __label__ = 103;
      break;
    }
   case 103:
    ___gmp_tmp_reentrant_free($347);
    var $_0 = 0;
    __label__ = 104;
    break;
   case 104:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_set_str["X"] = 1;

function _mpn_pow_1_highpart156($rp, $ignp, $base, $exp, $prec, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    HEAP32[$rp >> 2] = $base;
    if ($exp >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = $exp >>> 0 < 256 ? 1 : 9;
    var $9 = $4;
    __label__ = 5;
    break;
   case 4:
    var $7 = $exp >>> 0 < 16777216 ? 17 : 25;
    var $9 = $7;
    __label__ = 5;
    break;
   case 5:
    var $9;
    var $11 = STRING_TABLE.___gmpn_clz_tab + ($exp >>> ($9 >>> 0)) | 0;
    var $15 = $9 - 3 + (HEAPU8[$11] & 255) | 0;
    if (($15 | 0) > -1) {
      var $rn_03 = 1;
      var $i_04 = $15;
      var $off_05 = 0;
      var $ign_06 = 0;
      var $_017 = $tp;
      var $_08 = $rp;
      __label__ = 6;
      break;
    } else {
      var $rn_0_lcssa = 1;
      var $off_0_lcssa = 0;
      var $ign_0_lcssa = 0;
      var $_0_lcssa = $rp;
      __label__ = 11;
      break;
    }
   case 6:
    var $_08;
    var $_017;
    var $ign_06;
    var $off_05;
    var $i_04;
    var $rn_03;
    ___gmpn_sqr($_017, $_08 + ($off_05 << 2) | 0, $rn_03);
    var $18 = $rn_03 << 1;
    var $24 = $18 - ((HEAP32[$_017 + ($18 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $25 = $ign_06 << 1;
    if (($24 | 0) > ($prec | 0)) {
      __label__ = 7;
      break;
    } else {
      var $ign_1 = $25;
      var $off_1 = 0;
      var $rn_1 = $24;
      __label__ = 8;
      break;
    }
   case 7:
    var $28 = $24 - $prec | 0;
    var $ign_1 = $28 + $25 | 0;
    var $off_1 = $28;
    var $rn_1 = $prec;
    __label__ = 8;
    break;
   case 8:
    var $rn_1;
    var $off_1;
    var $ign_1;
    if ((1 << $i_04 & $exp | 0) == 0) {
      var $off_2 = $off_1;
      var $rn_2 = $rn_1;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $36 = ___gmpn_mul_1($_017, $_017 + ($off_1 << 2) | 0, $rn_1, $base);
    HEAP32[$_017 + ($rn_1 << 2) >> 2] = $36;
    var $off_2 = 0;
    var $rn_2 = (($36 | 0) != 0 & 1) + $rn_1 | 0;
    __label__ = 10;
    break;
   case 10:
    var $rn_2;
    var $off_2;
    if (($i_04 | 0) > 0) {
      var $_017 = $_08;
      var $rn_03 = $rn_2;
      var $i_04 = $i_04 - 1 | 0;
      var $off_05 = $off_2;
      var $ign_06 = $ign_1;
      var $_08 = $_017;
      __label__ = 6;
      break;
    } else {
      var $rn_0_lcssa = $rn_2;
      var $off_0_lcssa = $off_2;
      var $ign_0_lcssa = $ign_1;
      var $_0_lcssa = $_017;
      __label__ = 11;
      break;
    }
   case 11:
    var $_0_lcssa;
    var $ign_0_lcssa;
    var $off_0_lcssa;
    var $rn_0_lcssa;
    if (($rn_0_lcssa | 0) > ($prec | 0)) {
      __label__ = 12;
      break;
    } else {
      var $_1 = $_0_lcssa;
      var $ign_2 = $ign_0_lcssa;
      var $rn_3 = $rn_0_lcssa;
      __label__ = 13;
      break;
    }
   case 12:
    var $46 = $rn_0_lcssa - $prec | 0;
    var $_1 = $_0_lcssa + ($46 << 2) | 0;
    var $ign_2 = $ign_0_lcssa + $46 | 0;
    var $rn_3 = $prec;
    __label__ = 13;
    break;
   case 13:
    var $rn_3;
    var $ign_2;
    var $_1;
    if (($rn_3 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $52 = $rn_3 - 1 | 0;
    var $54 = HEAP32[$_1 + ($off_0_lcssa << 2) >> 2];
    if (($52 | 0) == 0) {
      var $__x_1 = $54;
      var $__dst_1 = $rp;
      __label__ = 18;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $__x_0 = $54;
    var $__src_0 = $_1 + ($off_0_lcssa + 1 << 2) | 0;
    var $__dst_0 = $rp;
    var $__n_0 = $52;
    __label__ = 16;
    break;
   case 16:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $60 = HEAP32[$__src_0 >> 2];
    var $61 = $__n_0 - 1 | 0;
    if (($61 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $__x_0 = $60;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $61;
      __label__ = 16;
      break;
    }
   case 17:
    var $__x_1 = $60;
    var $__dst_1 = $rp + ($52 << 2) | 0;
    __label__ = 18;
    break;
   case 18:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 19;
    break;
   case 19:
    HEAP32[$ignp >> 2] = $ign_2;
    return $rn_3;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_pow_1_highpart156["X"] = 1;

function ___gmpf_set_z($r, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = HEAP32[$r >> 2] + 1 | 0;
    var $5 = HEAP32[$u + 4 >> 2];
    var $6 = ($5 | 0) > -1;
    var $8 = $6 ? $5 : -$5 | 0;
    var $10 = HEAP32[$r + 12 >> 2];
    var $12 = HEAP32[$u + 8 >> 2];
    HEAP32[$r + 8 >> 2] = $8;
    if (($8 | 0) > ($3 | 0)) {
      __label__ = 3;
      break;
    } else {
      var $up_0 = $12;
      var $asize_0 = $8;
      __label__ = 4;
      break;
    }
   case 3:
    var $up_0 = $12 + ($8 - $3 << 2) | 0;
    var $asize_0 = $3;
    __label__ = 4;
    break;
   case 4:
    var $asize_0;
    var $up_0;
    var $20 = $6 ? $asize_0 : -$asize_0 | 0;
    HEAP32[$r + 4 >> 2] = $20;
    if (($asize_0 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $24 = $asize_0 - 1 | 0;
    var $25 = HEAP32[$up_0 >> 2];
    if (($24 | 0) == 0) {
      var $__x_1 = $25;
      var $__dst_1 = $10;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $25;
      var $up_0_pn = $up_0;
      var $__dst_0 = $10;
      var $__n_0 = $24;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $up_0_pn;
    var $__x_0;
    var $__src_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $28 = HEAP32[$__src_0 >> 2];
    var $29 = $__n_0 - 1 | 0;
    if (($29 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $28;
      var $up_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $29;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $28;
    var $__dst_1 = $10 + ($24 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_size($f) {
  var $2 = HEAP32[$f + 4 >> 2];
  var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
  return $5;
}

function ___gmpf_sqrt_ui($r, $u) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if (($u | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 11;
    break;
   case 4:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $7 = HEAPU32[$r >> 2];
    var $8 = $7 << 1;
    var $9 = $8 - 2 | 0;
    var $10 = $8 - 1 | 0;
    var $11 = $10 << 2;
    if ($11 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $14 = STACKTOP;
    STACKTOP += $11;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $18 = $14;
    __label__ = 7;
    break;
   case 6:
    var $16 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $11);
    var $18 = $16;
    __label__ = 7;
    break;
   case 7:
    var $18;
    var $19 = $18;
    if (($9 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $22 = ($7 << 3) - 8 | 0;
    _memset($18, 0, $22, 4);
    __label__ = 9;
    break;
   case 9:
    HEAP32[$19 + ($9 << 2) >> 2] = $u;
    var $25 = HEAP32[$r + 12 >> 2];
    var $26 = ___gmpn_sqrtrem($25, 0, $19, $10);
    HEAP32[$r + 4 >> 2] = $7;
    HEAP32[$r + 8 >> 2] = 1;
    var $29 = HEAP32[$__tmp_marker >> 2];
    if (($29 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    ___gmp_tmp_reentrant_free($29);
    __label__ = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_sqrt($r, $u) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$u + 4 >> 2];
    if (($2 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($2 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmp_sqrt_of_negative();
    throw "Reached an unreachable!";
   case 5:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 26;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $12 = HEAPU32[$u + 8 >> 2];
    var $14 = HEAPU32[$r >> 2];
    var $16 = HEAP32[$u + 12 >> 2];
    var $17 = $12 & 1;
    var $18 = $14 << 1;
    var $19 = $18 - $17 | 0;
    HEAP32[$r + 4 >> 2] = $14;
    HEAP32[$r + 8 >> 2] = ($17 + $12 | 0) / 2 & -1;
    var $24 = $19 << 2;
    if ($24 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $27 = STACKTOP;
    STACKTOP += $24;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $31 = $27;
    __label__ = 9;
    break;
   case 8:
    var $29 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $24);
    var $31 = $29;
    __label__ = 9;
    break;
   case 9:
    var $31;
    var $32 = $31;
    if (($2 | 0) > ($19 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 10:
    var $35 = $2 - $19 | 0;
    if (($18 | 0) == ($17 | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $39 = $19 - 1 | 0;
    var $40 = HEAP32[$16 + ($35 << 2) >> 2];
    if (($39 | 0) == 0) {
      var $__x_1 = $40;
      var $__dst_1 = $32;
      __label__ = 15;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $scevgep11 = $31 + (($14 << 3) - 4 - ($12 << 2 & 4)) | 0;
    var $__x_0 = $40;
    var $__n_0 = $39;
    var $__dst_0 = $32;
    var $__src_0 = $16 + ($35 + 1 << 2) | 0;
    __label__ = 13;
    break;
   case 13:
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $51 = HEAP32[$__src_0 >> 2];
    var $52 = $__n_0 - 1 | 0;
    if (($52 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $__x_0 = $51;
      var $__n_0 = $52;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      __label__ = 13;
      break;
    }
   case 14:
    var $__x_1 = $51;
    var $__dst_1 = $scevgep11;
    __label__ = 15;
    break;
   case 15:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 24;
    break;
   case 16:
    var $56 = $19 - $2 | 0;
    if (($19 | 0) == ($2 | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $60 = $18 - $2 - $17 << 2;
    _memset($31, 0, $60, 4);
    __label__ = 18;
    break;
   case 18:
    if (($2 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $64 = $2 - 1 | 0;
    var $65 = $32 + ($56 << 2) | 0;
    var $66 = HEAP32[$16 >> 2];
    if (($64 | 0) == 0) {
      var $__x6_1 = $66;
      var $__dst4_1 = $65;
      __label__ = 23;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $scevgep = $31 + (($14 << 3) - 4 - ($12 << 2 & 4)) | 0;
    var $__x6_0 = $66;
    var $_pn = $16;
    var $__dst4_0 = $65;
    var $__n3_0 = $64;
    __label__ = 21;
    break;
   case 21:
    var $__n3_0;
    var $__dst4_0;
    var $_pn;
    var $__x6_0;
    var $__src5_0 = $_pn + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    var $75 = HEAP32[$__src5_0 >> 2];
    var $76 = $__n3_0 - 1 | 0;
    if (($76 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      var $__x6_0 = $75;
      var $_pn = $__src5_0;
      var $__dst4_0 = $__dst4_0 + 4 | 0;
      var $__n3_0 = $76;
      __label__ = 21;
      break;
    }
   case 22:
    var $__x6_1 = $75;
    var $__dst4_1 = $scevgep;
    __label__ = 23;
    break;
   case 23:
    var $__dst4_1;
    var $__x6_1;
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    __label__ = 24;
    break;
   case 24:
    var $80 = HEAP32[$r + 12 >> 2];
    var $81 = ___gmpn_sqrtrem($80, 0, $32, $19);
    var $82 = HEAP32[$__tmp_marker >> 2];
    if (($82 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    ___gmp_tmp_reentrant_free($82);
    __label__ = 26;
    break;
   case 26:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_sqrt["X"] = 1;

function ___gmpf_swap($u, $v) {
  var $1 = $u | 0;
  var $2 = HEAP32[$1 >> 2];
  var $3 = $v | 0;
  var $4 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $2;
  HEAP32[$1 >> 2] = $4;
  var $5 = $u + 4 | 0;
  var $6 = HEAP32[$5 >> 2];
  var $7 = $v + 4 | 0;
  var $8 = HEAP32[$7 >> 2];
  HEAP32[$7 >> 2] = $6;
  HEAP32[$5 >> 2] = $8;
  var $9 = $u + 8 | 0;
  var $10 = HEAP32[$9 >> 2];
  var $11 = $v + 8 | 0;
  var $12 = HEAP32[$11 >> 2];
  HEAP32[$11 >> 2] = $10;
  HEAP32[$9 >> 2] = $12;
  var $13 = $u + 12 | 0;
  var $14 = HEAP32[$13 >> 2];
  var $15 = $v + 12 | 0;
  var $16 = HEAP32[$15 >> 2];
  HEAP32[$15 >> 2] = $14;
  HEAP32[$13 >> 2] = $16;
  return;
}

function ___gmpf_sub($r, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $v_negated = __stackBase__ + 4;
    var $2 = HEAPU32[$u + 4 >> 2];
    var $4 = HEAPU32[$v + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmpf_neg($r, $v);
    __label__ = 130;
    break;
   case 4:
    if (($4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    if (($r | 0) == ($u | 0)) {
      __label__ = 130;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    ___gmpf_set($r, $u);
    __label__ = 130;
    break;
   case 7:
    if (($4 ^ $2 | 0) < 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    HEAP32[$v_negated + 4 >> 2] = -$4 | 0;
    var $19 = HEAP32[$v + 8 >> 2];
    HEAP32[$v_negated + 8 >> 2] = $19;
    var $22 = HEAP32[$v + 12 >> 2];
    HEAP32[$v_negated + 12 >> 2] = $22;
    ___gmpf_add($r, $u, $v_negated);
    __label__ = 130;
    break;
   case 9:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $_lobit = $2 >>> 31;
    var $26 = HEAP32[$u + 8 >> 2];
    var $28 = HEAPU32[$v + 8 >> 2];
    if (($26 | 0) < ($28 | 0)) {
      __label__ = 10;
      break;
    } else {
      var $_0 = $u;
      var $_02 = $v;
      var $usize_0 = $2;
      var $vsize_0 = $4;
      var $negate_0 = $_lobit;
      var $34 = $26;
      var $33 = $28;
      __label__ = 11;
      break;
    }
   case 10:
    var $_0 = $v;
    var $_02 = $u;
    var $usize_0 = $4;
    var $vsize_0 = $2;
    var $negate_0 = $_lobit ^ 1;
    var $34 = $28;
    var $33 = $26;
    __label__ = 11;
    break;
   case 11:
    var $33;
    var $34;
    var $negate_0;
    var $vsize_0;
    var $usize_0;
    var $_02;
    var $_0;
    var $37 = ($usize_0 | 0) > -1 ? $usize_0 : -$usize_0 | 0;
    var $40 = ($vsize_0 | 0) > -1 ? $vsize_0 : -$vsize_0 | 0;
    var $42 = HEAPU32[$_0 + 12 >> 2];
    var $44 = HEAPU32[$_02 + 12 >> 2];
    var $46 = HEAPU32[$r + 12 >> 2];
    var $48 = HEAPU32[$r >> 2];
    var $49 = $48 + 1 | 0;
    var $50 = $34 - $33 | 0;
    if (($50 | 0) < 2) {
      __label__ = 12;
      break;
    } else {
      var $up_3 = $42;
      var $vp_5 = $44;
      var $usize_6 = $37;
      var $vsize_10 = $40;
      var $exp_6 = $34;
      var $negate_4 = $negate_0;
      __label__ = 69;
      break;
    }
   case 12:
    var $56 = HEAPU32[$42 + ($37 - 1 << 2) >> 2];
    if (($34 | 0) == ($33 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 13:
    var $60 = HEAPU32[$44 + ($40 - 1 << 2) >> 2];
    if (($56 | 0) == ($60 | 0)) {
      var $usize_1 = $37;
      var $vsize_1 = $40;
      var $exp_0 = $33;
      __label__ = 14;
      break;
    } else {
      var $usize_2 = $37;
      var $vsize_4 = $40;
      var $exp_2 = $33;
      var $102 = $56;
      var $101 = $60;
      __label__ = 28;
      break;
    }
   case 14:
    var $exp_0;
    var $vsize_1;
    var $usize_1;
    var $62 = $usize_1 - 1 | 0;
    var $63 = $vsize_1 - 1 | 0;
    var $64 = $exp_0 - 1 | 0;
    if (($62 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 15:
    var $vp_0_ph = $44;
    var $vsize_2_ph = $63;
    var $negate_1_ph = $negate_0 ^ 1;
    __label__ = 16;
    break;
   case 16:
    var $negate_1_ph;
    var $vsize_2_ph;
    var $vp_0_ph;
    var $vsize_2 = $vsize_2_ph;
    var $exp_1 = $64;
    __label__ = 17;
    break;
   case 17:
    var $exp_1;
    var $vsize_2;
    if (($vsize_2 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $71 = $vsize_2 - 1 | 0;
    if ((HEAP32[$vp_0_ph + ($71 << 2) >> 2] | 0) == 0) {
      var $vsize_2 = $71;
      var $exp_1 = $exp_1 - 1 | 0;
      __label__ = 17;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    if (($vsize_2 | 0) > ($49 | 0)) {
      __label__ = 20;
      break;
    } else {
      var $vp_1 = $vp_0_ph;
      var $vsize_3 = $vsize_2;
      __label__ = 21;
      break;
    }
   case 20:
    var $vp_1 = $vp_0_ph + ($vsize_2 - $49 << 2) | 0;
    var $vsize_3 = $49;
    __label__ = 21;
    break;
   case 21:
    var $vsize_3;
    var $vp_1;
    if (($vsize_3 | 0) == 0) {
      var $rsize_2 = 0;
      var $exp_8 = $exp_1;
      var $negate_6 = $negate_1_ph;
      __label__ = 128;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $83 = $vsize_3 - 1 | 0;
    var $84 = HEAP32[$vp_1 >> 2];
    if (($83 | 0) == 0) {
      var $__dst_1 = $46;
      var $__x_1 = $84;
      __label__ = 25;
      break;
    } else {
      var $__n_0 = $83;
      var $__dst_0 = $46;
      var $vp_1_pn = $vp_1;
      var $__x_0 = $84;
      __label__ = 23;
      break;
    }
   case 23:
    var $__x_0;
    var $vp_1_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $vp_1_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $87 = HEAP32[$__src_0 >> 2];
    var $88 = $__n_0 - 1 | 0;
    if (($88 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $__n_0 = $88;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $vp_1_pn = $__src_0;
      var $__x_0 = $87;
      __label__ = 23;
      break;
    }
   case 24:
    var $__dst_1 = $46 + ($83 << 2) | 0;
    var $__x_1 = $87;
    __label__ = 25;
    break;
   case 25:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $rsize_2 = $vsize_3;
    var $exp_8 = $exp_1;
    var $negate_6 = $negate_1_ph;
    __label__ = 128;
    break;
   case 26:
    if (($63 | 0) == 0) {
      var $vp_0_ph = $42;
      var $vsize_2_ph = $62;
      var $negate_1_ph = $negate_0;
      __label__ = 16;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $96 = HEAP32[$42 + ($usize_1 - 2 << 2) >> 2];
    var $99 = HEAP32[$44 + ($vsize_1 - 2 << 2) >> 2];
    if (($96 | 0) == ($99 | 0)) {
      var $usize_1 = $62;
      var $vsize_1 = $63;
      var $exp_0 = $64;
      __label__ = 14;
      break;
    } else {
      var $usize_2 = $62;
      var $vsize_4 = $63;
      var $exp_2 = $64;
      var $102 = $96;
      var $101 = $99;
      __label__ = 28;
      break;
    }
   case 28:
    var $101;
    var $102;
    var $exp_2;
    var $vsize_4;
    var $usize_2;
    var $103 = $102 >>> 0 < $101 >>> 0;
    var $_negate_0 = $103 & 1 ^ $negate_0;
    var $usize_2_vsize_4 = $103 ? $usize_2 : $vsize_4;
    var $vsize_4_usize_2 = $103 ? $vsize_4 : $usize_2;
    var $_ = $103 ? $42 : $44;
    var $_6 = $103 ? $44 : $42;
    var $108 = $usize_2_vsize_4 - 1 | 0;
    if ((HEAP32[$_6 + ($vsize_4_usize_2 - 1 << 2) >> 2] | 0) == (HEAP32[$_ + ($108 << 2) >> 2] + 1 | 0)) {
      var $up_1_ph = $_6;
      var $vp_3_ph = $_;
      var $usize_4_in_ph = $vsize_4_usize_2;
      var $vsize_6_ph = $108;
      var $exp_3_in_ph = $exp_2;
      var $negate_3_ph = $_negate_0;
      __label__ = 33;
      break;
    } else {
      var $up_3 = $_6;
      var $vp_5 = $_;
      var $usize_6 = $vsize_4_usize_2;
      var $vsize_10 = $usize_2_vsize_4;
      var $exp_6 = $exp_2;
      var $negate_4 = $_negate_0;
      __label__ = 69;
      break;
    }
   case 29:
    if (($56 | 0) == 1) {
      __label__ = 30;
      break;
    } else {
      var $up_3 = $42;
      var $vp_5 = $44;
      var $usize_6 = $37;
      var $vsize_10 = $40;
      var $exp_6 = $34;
      var $negate_4 = $negate_0;
      __label__ = 69;
      break;
    }
   case 30:
    if ((HEAP32[$44 + ($40 - 1 << 2) >> 2] | 0) == -1) {
      __label__ = 31;
      break;
    } else {
      var $up_3 = $42;
      var $vp_5 = $44;
      var $usize_6 = $37;
      var $vsize_10 = $40;
      var $exp_6 = $34;
      var $negate_4 = $negate_0;
      __label__ = 69;
      break;
    }
   case 31:
    if (($37 | 0) > 1) {
      __label__ = 32;
      break;
    } else {
      var $up_1_ph = $42;
      var $vp_3_ph = $44;
      var $usize_4_in_ph = $37;
      var $vsize_6_ph = $40;
      var $exp_3_in_ph = $34;
      var $negate_3_ph = $negate_0;
      __label__ = 33;
      break;
    }
   case 32:
    if ((HEAP32[$42 + ($37 - 2 << 2) >> 2] | 0) == 0) {
      var $up_1_ph = $42;
      var $vp_3_ph = $44;
      var $usize_4_in_ph = $37;
      var $vsize_6_ph = $40;
      var $exp_3_in_ph = $34;
      var $negate_3_ph = $negate_0;
      __label__ = 33;
      break;
    } else {
      var $up_3 = $42;
      var $vp_5 = $44;
      var $usize_6 = $37;
      var $vsize_10 = $40;
      var $exp_6 = $34;
      var $negate_4 = $negate_0;
      __label__ = 69;
      break;
    }
   case 33:
    var $negate_3_ph;
    var $exp_3_in_ph;
    var $vsize_6_ph;
    var $usize_4_in_ph;
    var $vp_3_ph;
    var $up_1_ph;
    var $usize_4_in = $usize_4_in_ph;
    var $vsize_6 = $vsize_6_ph;
    var $exp_3_in = $exp_3_in_ph;
    __label__ = 34;
    break;
   case 34:
    var $exp_3_in;
    var $vsize_6;
    var $usize_4_in;
    var $usize_4 = $usize_4_in - 1 | 0;
    var $exp_3 = $exp_3_in - 1 | 0;
    var $129 = ($usize_4 | 0) == 0;
    if (($vsize_6 | 0) == 0 | $129) {
      __label__ = 37;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    if ((HEAP32[$up_1_ph + ($usize_4_in - 2 << 2) >> 2] | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $136 = $vsize_6 - 1 | 0;
    if ((HEAP32[$vp_3_ph + ($136 << 2) >> 2] | 0) == -1) {
      var $usize_4_in = $usize_4;
      var $vsize_6 = $136;
      var $exp_3_in = $exp_3;
      __label__ = 34;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    if ($129) {
      var $vsize_7 = $vsize_6;
      var $exp_4 = $exp_3;
      __label__ = 38;
      break;
    } else {
      var $vsize_8 = $vsize_6;
      var $exp_5 = $exp_3;
      __label__ = 40;
      break;
    }
   case 38:
    var $exp_4;
    var $vsize_7;
    if (($vsize_7 | 0) == 0) {
      var $vsize_8 = 0;
      var $exp_5 = $exp_4;
      __label__ = 40;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $142 = $vsize_7 - 1 | 0;
    if ((HEAP32[$vp_3_ph + ($142 << 2) >> 2] | 0) == -1) {
      var $vsize_7 = $142;
      var $exp_4 = $exp_4 - 1 | 0;
      __label__ = 38;
      break;
    } else {
      var $vsize_8 = $vsize_7;
      var $exp_5 = $exp_4;
      __label__ = 40;
      break;
    }
   case 40:
    var $exp_5;
    var $vsize_8;
    if (($usize_4 | 0) > ($48 | 0)) {
      __label__ = 41;
      break;
    } else {
      var $up_2 = $up_1_ph;
      var $usize_5 = $usize_4;
      __label__ = 42;
      break;
    }
   case 41:
    var $up_2 = $up_1_ph + ($usize_4 - $48 << 2) | 0;
    var $usize_5 = $48;
    __label__ = 42;
    break;
   case 42:
    var $usize_5;
    var $up_2;
    if (($vsize_8 | 0) > ($48 | 0)) {
      __label__ = 43;
      break;
    } else {
      var $vp_4 = $vp_3_ph;
      var $vsize_9 = $vsize_8;
      __label__ = 44;
      break;
    }
   case 43:
    var $vp_4 = $vp_3_ph + ($vsize_8 - $48 << 2) | 0;
    var $vsize_9 = $48;
    __label__ = 44;
    break;
   case 44:
    var $vsize_9;
    var $vp_4;
    var $157 = $49 << 2;
    if ($157 >>> 0 < 65536) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    var $160 = STACKTOP;
    STACKTOP += $157;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $164 = $160;
    __label__ = 47;
    break;
   case 46:
    var $162 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $157);
    var $164 = $162;
    __label__ = 47;
    break;
   case 47:
    var $164;
    var $165 = $164;
    if (($vsize_9 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 48:
    if (($usize_5 | 0) > 0) {
      var $i_071 = 0;
      __label__ = 49;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 49:
    var $i_071;
    var $169 = HEAP32[$up_2 + ($i_071 << 2) >> 2];
    HEAP32[$165 + ($i_071 << 2) >> 2] = $169;
    var $171 = $i_071 + 1 | 0;
    if (($171 | 0) == ($usize_5 | 0)) {
      __label__ = 50;
      break;
    } else {
      var $i_071 = $171;
      __label__ = 49;
      break;
    }
   case 50:
    HEAP32[$165 + ($usize_5 << 2) >> 2] = 1;
    var $tp_0_ph = $165;
    var $rsize_1_ph = $usize_5 + 1 | 0;
    var $exp_7_ph = $exp_5 + 1 | 0;
    var $negate_5_ph = $negate_3_ph;
    __label__ = 122;
    break;
   case 51:
    if (($usize_5 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 52:
    if (($vsize_9 | 0) > 0) {
      var $i2_059 = 0;
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 53:
    var $i2_059;
    var $180 = HEAP32[$vp_4 + ($i2_059 << 2) >> 2] ^ -1;
    HEAP32[$165 + ($i2_059 << 2) >> 2] = $180;
    var $182 = $i2_059 + 1 | 0;
    if (($182 | 0) == ($vsize_9 | 0)) {
      __label__ = 54;
      break;
    } else {
      var $i2_059 = $182;
      __label__ = 53;
      break;
    }
   case 54:
    var $183 = ___gmpn_add_1($165, $165, $vsize_9, 1);
    if (($183 | 0) == 1) {
      __label__ = 55;
      break;
    } else {
      var $tp_0_ph = $165;
      var $rsize_1_ph = $vsize_9;
      var $exp_7_ph = $exp_5;
      var $negate_5_ph = $negate_3_ph;
      __label__ = 122;
      break;
    }
   case 55:
    HEAP32[$165 + ($vsize_9 << 2) >> 2] = 1;
    var $tp_0_ph = $165;
    var $rsize_1_ph = $vsize_9 + 1 | 0;
    var $exp_7_ph = $exp_5 + 1 | 0;
    var $negate_5_ph = $negate_3_ph;
    __label__ = 122;
    break;
   case 56:
    if (($usize_5 | 0) < ($vsize_9 | 0)) {
      __label__ = 64;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    var $192 = $usize_5 - $vsize_9 | 0;
    if (($usize_5 | 0) == ($vsize_9 | 0)) {
      __label__ = 63;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $195 = $192 - 1 | 0;
    var $196 = HEAP32[$up_2 >> 2];
    if (($195 | 0) == 0) {
      var $__dst5_1 = $165;
      var $__x7_1 = $196;
      __label__ = 62;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    var $scevgep152 = $164 + (($usize_5 << 2) - 4 - ($vsize_9 << 2)) | 0;
    var $__n4_0 = $195;
    var $__dst5_0 = $165;
    var $up_2_pn = $up_2;
    var $__x7_0 = $196;
    __label__ = 60;
    break;
   case 60:
    var $__x7_0;
    var $up_2_pn;
    var $__dst5_0;
    var $__n4_0;
    var $__src6_0 = $up_2_pn + 4 | 0;
    HEAP32[$__dst5_0 >> 2] = $__x7_0;
    var $204 = HEAP32[$__src6_0 >> 2];
    var $205 = $__n4_0 - 1 | 0;
    if (($205 | 0) == 0) {
      __label__ = 61;
      break;
    } else {
      var $__n4_0 = $205;
      var $__dst5_0 = $__dst5_0 + 4 | 0;
      var $up_2_pn = $__src6_0;
      var $__x7_0 = $204;
      __label__ = 60;
      break;
    }
   case 61:
    var $__dst5_1 = $scevgep152;
    var $__x7_1 = $204;
    __label__ = 62;
    break;
   case 62:
    var $__x7_1;
    var $__dst5_1;
    HEAP32[$__dst5_1 >> 2] = $__x7_1;
    __label__ = 63;
    break;
   case 63:
    var $211 = ___gmpn_sub_n($165 + ($192 << 2) | 0, $up_2 + ($192 << 2) | 0, $vp_4, $vsize_9);
    var $rsize_0 = $usize_5;
    var $cy_limb_0 = $211;
    __label__ = 67;
    break;
   case 64:
    var $213 = $vsize_9 - $usize_5 | 0;
    if (($213 | 0) > 0) {
      var $i9_054 = 0;
      __label__ = 65;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 65:
    var $i9_054;
    var $217 = HEAP32[$vp_4 + ($i9_054 << 2) >> 2] ^ -1;
    HEAP32[$165 + ($i9_054 << 2) >> 2] = $217;
    var $219 = $i9_054 + 1 | 0;
    if (($219 | 0) == ($213 | 0)) {
      __label__ = 66;
      break;
    } else {
      var $i9_054 = $219;
      __label__ = 65;
      break;
    }
   case 66:
    var $220 = $165 + ($213 << 2) | 0;
    var $222 = ___gmpn_sub_n($220, $up_2, $vp_4 + ($213 << 2) | 0, $usize_5);
    var $223 = ___gmpn_sub_1($220, $220, $usize_5, 1);
    var $224 = ___gmpn_add_1($165, $165, $vsize_9, 1);
    var $rsize_0 = $vsize_9;
    var $cy_limb_0 = $223 + $222 - $224 | 0;
    __label__ = 67;
    break;
   case 67:
    var $cy_limb_0;
    var $rsize_0;
    if (($cy_limb_0 | 0) == 0) {
      __label__ = 68;
      break;
    } else {
      var $tp_0_ph = $165;
      var $rsize_1_ph = $rsize_0;
      var $exp_7_ph = $exp_5;
      var $negate_5_ph = $negate_3_ph;
      __label__ = 122;
      break;
    }
   case 68:
    HEAP32[$165 + ($rsize_0 << 2) >> 2] = 1;
    var $tp_0_ph = $165;
    var $rsize_1_ph = $rsize_0 + 1 | 0;
    var $exp_7_ph = $exp_5 + 1 | 0;
    var $negate_5_ph = $negate_3_ph;
    __label__ = 122;
    break;
   case 69:
    var $negate_4;
    var $exp_6;
    var $vsize_10;
    var $usize_6;
    var $vp_5;
    var $up_3;
    if (($usize_6 | 0) > ($49 | 0)) {
      __label__ = 70;
      break;
    } else {
      var $up_4 = $up_3;
      var $usize_7 = $usize_6;
      __label__ = 71;
      break;
    }
   case 70:
    var $up_4 = $up_3 + ($usize_6 - $49 << 2) | 0;
    var $usize_7 = $49;
    __label__ = 71;
    break;
   case 71:
    var $usize_7;
    var $up_4;
    var $239 = $vsize_10 + $50 | 0;
    if (($239 | 0) > ($49 | 0)) {
      __label__ = 72;
      break;
    } else {
      var $vp_6 = $vp_5;
      var $vsize_11 = $vsize_10;
      __label__ = 73;
      break;
    }
   case 72:
    var $vp_6 = $vp_5 + ($239 - $49 << 2) | 0;
    var $vsize_11 = $49 - $50 | 0;
    __label__ = 73;
    break;
   case 73:
    var $vsize_11;
    var $vp_6;
    var $246 = $49 << 2;
    if ($246 >>> 0 < 65536) {
      __label__ = 74;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 74:
    var $249 = STACKTOP;
    STACKTOP += $246;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $253 = $249;
    __label__ = 76;
    break;
   case 75:
    var $251 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $246);
    var $253 = $251;
    __label__ = 76;
    break;
   case 76:
    var $253;
    var $254 = $253;
    if (($50 | 0) < ($49 | 0)) {
      __label__ = 77;
      break;
    } else {
      __label__ = 78;
      break;
    }
   case 77:
    var $256 = $vsize_11 + $34 | 0;
    var $257 = $usize_7 + $33 | 0;
    var $266 = $vsize_11 << 2;
    var $vp_7 = $vp_6;
    var $indvar = 0;
    var $indvars_iv99 = $vsize_11;
    var $indvars_iv103 = $253 + (($257 << 2) - 4 - ($256 << 2)) | 0;
    var $indvars_iv108 = $256 - $usize_7 - $33 | 0;
    var $indvars_iv115 = $253 + (($usize_7 << 2) - 4 - $266) | 0;
    var $indvars_iv120 = $vsize_11 - $usize_7 | 0;
    var $indvars_iv127 = $46 + ($vsize_11 - 1 << 2) | 0;
    __label__ = 83;
    break;
   case 78:
    if (($254 | 0) == ($up_4 | 0) | ($usize_7 | 0) == 0) {
      var $rsize_2 = $usize_7;
      var $exp_8 = $exp_6;
      var $negate_6 = $negate_4;
      __label__ = 128;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 79:
    var $274 = $usize_7 - 1 | 0;
    var $275 = HEAP32[$up_4 >> 2];
    if (($274 | 0) == 0) {
      var $__dst11_1 = $46;
      var $__x13_1 = $275;
      __label__ = 82;
      break;
    } else {
      var $__n10_0 = $274;
      var $__dst11_0 = $46;
      var $up_4_pn4 = $up_4;
      var $__x13_0 = $275;
      __label__ = 80;
      break;
    }
   case 80:
    var $__x13_0;
    var $up_4_pn4;
    var $__dst11_0;
    var $__n10_0;
    var $__src12_0 = $up_4_pn4 + 4 | 0;
    HEAP32[$__dst11_0 >> 2] = $__x13_0;
    var $278 = HEAP32[$__src12_0 >> 2];
    var $279 = $__n10_0 - 1 | 0;
    if (($279 | 0) == 0) {
      __label__ = 81;
      break;
    } else {
      var $__n10_0 = $279;
      var $__dst11_0 = $__dst11_0 + 4 | 0;
      var $up_4_pn4 = $__src12_0;
      var $__x13_0 = $278;
      __label__ = 80;
      break;
    }
   case 81:
    var $__dst11_1 = $46 + ($274 << 2) | 0;
    var $__x13_1 = $278;
    __label__ = 82;
    break;
   case 82:
    var $__x13_1;
    var $__dst11_1;
    HEAP32[$__dst11_1 >> 2] = $__x13_1;
    var $rsize_2 = $usize_7;
    var $exp_8 = $exp_6;
    var $negate_6 = $negate_4;
    __label__ = 128;
    break;
   case 83:
    var $indvars_iv127;
    var $indvars_iv120;
    var $indvars_iv115;
    var $indvars_iv108;
    var $indvars_iv103;
    var $indvars_iv99;
    var $indvar;
    var $vp_7;
    if (($indvars_iv99 | 0) == 0) {
      __label__ = 84;
      break;
    } else {
      __label__ = 89;
      break;
    }
   case 84:
    if (($usize_7 | 0) == 0) {
      var $rsize_2 = 0;
      var $exp_8 = $exp_6;
      var $negate_6 = $negate_4;
      __label__ = 128;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 85:
    var $287 = $usize_7 - 1 | 0;
    var $288 = HEAP32[$up_4 >> 2];
    if (($287 | 0) == 0) {
      var $__dst15_1 = $46;
      var $__x17_1 = $288;
      __label__ = 88;
      break;
    } else {
      var $__n14_0 = $287;
      var $__dst15_0 = $46;
      var $up_4_pn = $up_4;
      var $__x17_0 = $288;
      __label__ = 86;
      break;
    }
   case 86:
    var $__x17_0;
    var $up_4_pn;
    var $__dst15_0;
    var $__n14_0;
    var $__src16_0 = $up_4_pn + 4 | 0;
    HEAP32[$__dst15_0 >> 2] = $__x17_0;
    var $291 = HEAP32[$__src16_0 >> 2];
    var $292 = $__n14_0 - 1 | 0;
    if (($292 | 0) == 0) {
      __label__ = 87;
      break;
    } else {
      var $__n14_0 = $292;
      var $__dst15_0 = $__dst15_0 + 4 | 0;
      var $up_4_pn = $__src16_0;
      var $__x17_0 = $291;
      __label__ = 86;
      break;
    }
   case 87:
    var $__dst15_1 = $46 + ($287 << 2) | 0;
    var $__x17_1 = $291;
    __label__ = 88;
    break;
   case 88:
    var $__x17_1;
    var $__dst15_1;
    HEAP32[$__dst15_1 >> 2] = $__x17_1;
    var $rsize_2 = $usize_7;
    var $exp_8 = $exp_6;
    var $negate_6 = $negate_4;
    __label__ = 128;
    break;
   case 89:
    var $296 = HEAPU32[$vp_7 >> 2];
    if (($296 | 0) == 0) {
      __label__ = 90;
      break;
    } else {
      var $up_5 = $up_4;
      var $usize_8 = $usize_7;
      var $indvar97 = 0;
      var $indvars_iv105 = $indvars_iv103;
      var $indvars_iv110 = $indvars_iv108;
      var $indvars_iv117 = $indvars_iv115;
      var $indvars_iv122 = $indvars_iv120;
      __label__ = 91;
      break;
    }
   case 90:
    var $vp_7 = $vp_7 + 4 | 0;
    var $indvar = $indvar + 1 | 0;
    var $indvars_iv99 = $indvars_iv99 - 1 | 0;
    var $indvars_iv103 = $indvars_iv103 + 4 | 0;
    var $indvars_iv108 = $indvars_iv108 - 1 | 0;
    var $indvars_iv115 = $indvars_iv115 + 4 | 0;
    var $indvars_iv120 = $indvars_iv120 - 1 | 0;
    var $indvars_iv127 = $indvars_iv127 - 4 | 0;
    __label__ = 83;
    break;
   case 91:
    var $indvars_iv122;
    var $indvars_iv117;
    var $indvars_iv110;
    var $indvars_iv105;
    var $indvar97;
    var $usize_8;
    var $up_5;
    if (($usize_8 | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 92:
    var $302 = $indvars_iv99 - 1 | 0;
    if (($302 | 0) == 0) {
      var $__dst19_1 = $46;
      var $__x21_1 = $296;
      __label__ = 94;
      break;
    } else {
      var $__n18_0 = $302;
      var $__dst19_0 = $46;
      var $vp_7_pn = $vp_7;
      var $__x21_0 = $296;
      __label__ = 93;
      break;
    }
   case 93:
    var $__x21_0;
    var $vp_7_pn;
    var $__dst19_0;
    var $__n18_0;
    var $__src20_0 = $vp_7_pn + 4 | 0;
    HEAP32[$__dst19_0 >> 2] = $__x21_0;
    var $305 = HEAP32[$__src20_0 >> 2];
    var $306 = $__n18_0 - 1 | 0;
    if (($306 | 0) == 0) {
      var $__dst19_1 = $indvars_iv127;
      var $__x21_1 = $305;
      __label__ = 94;
      break;
    } else {
      var $__n18_0 = $306;
      var $__dst19_0 = $__dst19_0 + 4 | 0;
      var $vp_7_pn = $__src20_0;
      var $__x21_0 = $305;
      __label__ = 93;
      break;
    }
   case 94:
    var $__x21_1;
    var $__dst19_1;
    HEAP32[$__dst19_1 >> 2] = $__x21_1;
    var $rsize_2 = $indvars_iv99;
    var $exp_8 = $exp_6;
    var $negate_6 = $negate_4 ^ 1;
    __label__ = 128;
    break;
   case 95:
    var $311 = HEAP32[$up_5 >> 2];
    if (($311 | 0) == 0) {
      __label__ = 96;
      break;
    } else {
      __label__ = 97;
      break;
    }
   case 96:
    var $up_5 = $up_5 + 4 | 0;
    var $usize_8 = $usize_8 - 1 | 0;
    var $indvar97 = $indvar97 + 1 | 0;
    var $indvars_iv105 = $indvars_iv105 - 4 | 0;
    var $indvars_iv110 = $indvars_iv110 + 1 | 0;
    var $indvars_iv117 = $indvars_iv117 - 4 | 0;
    var $indvars_iv122 = $indvars_iv122 + 1 | 0;
    __label__ = 91;
    break;
   case 97:
    var $indvars_iv105107 = $indvars_iv105;
    var $indvars_iv117119 = $indvars_iv117;
    if (($usize_8 | 0) > ($50 | 0)) {
      __label__ = 98;
      break;
    } else {
      __label__ = 117;
      break;
    }
   case 98:
    if (($34 | 0) == ($33 | 0)) {
      __label__ = 99;
      break;
    } else {
      __label__ = 108;
      break;
    }
   case 99:
    if (($usize_8 | 0) < ($indvars_iv99 | 0)) {
      __label__ = 105;
      break;
    } else {
      __label__ = 100;
      break;
    }
   case 100:
    var $323 = $usize_8 - $indvars_iv99 | 0;
    if (($usize_8 | 0) == ($indvars_iv99 | 0)) {
      __label__ = 104;
      break;
    } else {
      __label__ = 101;
      break;
    }
   case 101:
    var $326 = $323 - 1 | 0;
    if (($326 | 0) == 0) {
      var $__x26_1 = $311;
      var $__dst24_1 = $254;
      __label__ = 103;
      break;
    } else {
      var $__x26_0 = $311;
      var $__n23_0 = $326;
      var $__dst24_0 = $254;
      var $up_5_pn3 = $up_5;
      __label__ = 102;
      break;
    }
   case 102:
    var $up_5_pn3;
    var $__dst24_0;
    var $__n23_0;
    var $__x26_0;
    var $__src25_0 = $up_5_pn3 + 4 | 0;
    HEAP32[$__dst24_0 >> 2] = $__x26_0;
    var $329 = HEAP32[$__src25_0 >> 2];
    var $330 = $__n23_0 - 1 | 0;
    if (($330 | 0) == 0) {
      var $__x26_1 = $329;
      var $__dst24_1 = $indvars_iv117119;
      __label__ = 103;
      break;
    } else {
      var $__x26_0 = $329;
      var $__n23_0 = $330;
      var $__dst24_0 = $__dst24_0 + 4 | 0;
      var $up_5_pn3 = $__src25_0;
      __label__ = 102;
      break;
    }
   case 103:
    var $__dst24_1;
    var $__x26_1;
    HEAP32[$__dst24_1 >> 2] = $__x26_1;
    __label__ = 104;
    break;
   case 104:
    var $335 = ___gmpn_sub_n($254 + ($323 << 2) | 0, $up_5 + ($323 << 2) | 0, $vp_7, $indvars_iv99);
    var $tp_0_ph = $254;
    var $rsize_1_ph = $usize_8;
    var $exp_7_ph = $exp_6;
    var $negate_5_ph = $negate_4;
    __label__ = 122;
    break;
   case 105:
    var $337 = $indvars_iv99 - $usize_8 | 0;
    HEAP32[$254 >> 2] = -$296 | 0;
    if (($337 | 0) > 1) {
      var $i28_029 = 1;
      __label__ = 106;
      break;
    } else {
      __label__ = 107;
      break;
    }
   case 106:
    var $i28_029;
    var $342 = HEAP32[$vp_7 + ($i28_029 << 2) >> 2] ^ -1;
    HEAP32[$254 + ($i28_029 << 2) >> 2] = $342;
    var $344 = $i28_029 + 1 | 0;
    if (($344 | 0) == ($indvars_iv122 | 0)) {
      __label__ = 107;
      break;
    } else {
      var $i28_029 = $344;
      __label__ = 106;
      break;
    }
   case 107:
    var $345 = $254 + ($337 << 2) | 0;
    var $347 = ___gmpn_sub_n($345, $up_5, $vp_7 + ($337 << 2) | 0, $usize_8);
    var $348 = ___gmpn_sub_1($345, $345, $usize_8, 1);
    var $tp_0_ph = $254;
    var $rsize_1_ph = $indvars_iv99;
    var $exp_7_ph = $exp_6;
    var $negate_5_ph = $negate_4;
    __label__ = 122;
    break;
   case 108:
    var $350 = $indvars_iv99 + $50 | 0;
    if (($350 | 0) > ($usize_8 | 0)) {
      __label__ = 114;
      break;
    } else {
      __label__ = 109;
      break;
    }
   case 109:
    var $353 = $usize_8 - $50 | 0;
    var $354 = $353 - $indvars_iv99 | 0;
    if (($353 | 0) == ($indvars_iv99 | 0)) {
      __label__ = 113;
      break;
    } else {
      __label__ = 110;
      break;
    }
   case 110:
    var $357 = $354 - 1 | 0;
    if (($357 | 0) == 0) {
      var $__x33_1 = $311;
      var $__dst31_1 = $254;
      __label__ = 112;
      break;
    } else {
      var $__x33_0 = $311;
      var $up_5_pn = $up_5;
      var $__dst31_0 = $254;
      var $__n30_0 = $357;
      __label__ = 111;
      break;
    }
   case 111:
    var $__n30_0;
    var $__dst31_0;
    var $up_5_pn;
    var $__x33_0;
    var $__src32_0 = $up_5_pn + 4 | 0;
    HEAP32[$__dst31_0 >> 2] = $__x33_0;
    var $360 = HEAP32[$__src32_0 >> 2];
    var $361 = $__n30_0 - 1 | 0;
    if (($361 | 0) == 0) {
      var $__x33_1 = $360;
      var $__dst31_1 = $indvars_iv105107;
      __label__ = 112;
      break;
    } else {
      var $__x33_0 = $360;
      var $up_5_pn = $__src32_0;
      var $__dst31_0 = $__dst31_0 + 4 | 0;
      var $__n30_0 = $361;
      __label__ = 111;
      break;
    }
   case 112:
    var $__dst31_1;
    var $__x33_1;
    HEAP32[$__dst31_1 >> 2] = $__x33_1;
    __label__ = 113;
    break;
   case 113:
    var $367 = ___gmpn_sub($254 + ($354 << 2) | 0, $up_5 + ($354 << 2) | 0, $usize_8 - $354 | 0, $vp_7, $indvars_iv99);
    var $tp_0_ph = $254;
    var $rsize_1_ph = $usize_8;
    var $exp_7_ph = $exp_6;
    var $negate_5_ph = $negate_4;
    __label__ = 122;
    break;
   case 114:
    var $369 = $350 - $usize_8 | 0;
    HEAP32[$254 >> 2] = -$296 | 0;
    if (($369 | 0) > 1) {
      var $i35_021 = 1;
      __label__ = 115;
      break;
    } else {
      __label__ = 116;
      break;
    }
   case 115:
    var $i35_021;
    var $374 = HEAP32[$vp_7 + ($i35_021 << 2) >> 2] ^ -1;
    HEAP32[$254 + ($i35_021 << 2) >> 2] = $374;
    var $376 = $i35_021 + 1 | 0;
    if (($376 | 0) == ($indvars_iv110 | 0)) {
      __label__ = 116;
      break;
    } else {
      var $i35_021 = $376;
      __label__ = 115;
      break;
    }
   case 116:
    var $377 = $254 + ($369 << 2) | 0;
    var $380 = ___gmpn_sub($377, $up_5, $usize_8, $vp_7 + ($369 << 2) | 0, $usize_8 - $50 | 0);
    var $381 = ___gmpn_sub_1($377, $377, $usize_8, 1);
    var $tp_0_ph = $254;
    var $rsize_1_ph = $350;
    var $exp_7_ph = $exp_6;
    var $negate_5_ph = $negate_4;
    __label__ = 122;
    break;
   case 117:
    var $383 = $indvars_iv99 + $50 | 0;
    var $384 = $383 - $usize_8 | 0;
    HEAP32[$254 >> 2] = -$296 | 0;
    if (($indvars_iv99 | 0) > 1) {
      var $i37_014 = 1;
      __label__ = 119;
      break;
    } else {
      __label__ = 118;
      break;
    }
   case 118:
    if (($indvars_iv99 | 0) < ($384 | 0)) {
      __label__ = 120;
      break;
    } else {
      __label__ = 121;
      break;
    }
   case 119:
    var $i37_014;
    var $390 = HEAP32[$vp_7 + ($i37_014 << 2) >> 2] ^ -1;
    HEAP32[$254 + ($i37_014 << 2) >> 2] = $390;
    var $392 = $i37_014 + 1 | 0;
    if (($392 | 0) == ($indvars_iv99 | 0)) {
      __label__ = 118;
      break;
    } else {
      var $i37_014 = $392;
      __label__ = 119;
      break;
    }
   case 120:
    var $393 = (i64Math.multiply($indvar, 0, -4, 0), i64Math.result[0]);
    var $scevgep96 = $253 + ($393 + $266) | 0;
    _memset($scevgep96, -1, ($indvar97 << 2) + ($34 - $257 << 2) | 0, 4);
    __label__ = 121;
    break;
   case 121:
    var $401 = ___gmpn_sub_1($254 + ($384 << 2) | 0, $up_5, $usize_8, 1);
    var $tp_0_ph = $254;
    var $rsize_1_ph = $383;
    var $exp_7_ph = $exp_6;
    var $negate_5_ph = $negate_4;
    __label__ = 122;
    break;
   case 122:
    var $negate_5_ph;
    var $exp_7_ph;
    var $rsize_1_ph;
    var $tp_0_ph;
    var $rsize_1 = $rsize_1_ph;
    var $exp_7 = $exp_7_ph;
    var $indvars_iv = $46 + ($rsize_1_ph - 1 << 2) | 0;
    __label__ = 123;
    break;
   case 123:
    var $indvars_iv;
    var $exp_7;
    var $rsize_1;
    if (($rsize_1 | 0) == 0) {
      var $rsize_2 = 0;
      var $exp_8 = $exp_7;
      var $negate_6 = $negate_5_ph;
      __label__ = 128;
      break;
    } else {
      __label__ = 124;
      break;
    }
   case 124:
    var $406 = $rsize_1 - 1 | 0;
    if ((HEAP32[$tp_0_ph + ($406 << 2) >> 2] | 0) == 0) {
      var $rsize_1 = $406;
      var $exp_7 = $exp_7 - 1 | 0;
      var $indvars_iv = $indvars_iv - 4 | 0;
      __label__ = 123;
      break;
    } else {
      __label__ = 125;
      break;
    }
   case 125:
    var $411 = HEAP32[$tp_0_ph >> 2];
    if (($406 | 0) == 0) {
      var $__x41_1 = $411;
      var $__dst39_1 = $46;
      __label__ = 127;
      break;
    } else {
      var $__x41_0 = $411;
      var $tp_0_pn = $tp_0_ph;
      var $__dst39_0 = $46;
      var $__n38_0 = $406;
      __label__ = 126;
      break;
    }
   case 126:
    var $__n38_0;
    var $__dst39_0;
    var $tp_0_pn;
    var $__x41_0;
    var $__src40_0 = $tp_0_pn + 4 | 0;
    HEAP32[$__dst39_0 >> 2] = $__x41_0;
    var $414 = HEAP32[$__src40_0 >> 2];
    var $415 = $__n38_0 - 1 | 0;
    if (($415 | 0) == 0) {
      var $__x41_1 = $414;
      var $__dst39_1 = $indvars_iv;
      __label__ = 127;
      break;
    } else {
      var $__x41_0 = $414;
      var $tp_0_pn = $__src40_0;
      var $__dst39_0 = $__dst39_0 + 4 | 0;
      var $__n38_0 = $415;
      __label__ = 126;
      break;
    }
   case 127:
    var $__dst39_1;
    var $__x41_1;
    HEAP32[$__dst39_1 >> 2] = $__x41_1;
    var $rsize_2 = $rsize_1;
    var $exp_8 = $exp_7;
    var $negate_6 = $negate_5_ph;
    __label__ = 128;
    break;
   case 128:
    var $negate_6;
    var $exp_8;
    var $rsize_2;
    var $419 = ($negate_6 | 0) != 0 ? -$rsize_2 | 0 : $rsize_2;
    HEAP32[$r + 4 >> 2] = $419;
    var $_exp_8 = ($rsize_2 | 0) == 0 ? 0 : $exp_8;
    HEAP32[$r + 8 >> 2] = $_exp_8;
    var $423 = HEAP32[$__tmp_marker >> 2];
    if (($423 | 0) == 0) {
      __label__ = 130;
      break;
    } else {
      __label__ = 129;
      break;
    }
   case 129:
    ___gmp_tmp_reentrant_free($423);
    __label__ = 130;
    break;
   case 130:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_sub["X"] = 1;

function ___gmpf_sub_ui($sum, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $vv = __stackBase__;
    var $vl = __stackBase__ + 16;
    if (($v | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmpf_set($sum, $u);
    __label__ = 5;
    break;
   case 4:
    HEAP32[$vl >> 2] = $v;
    HEAP32[$vv + 4 >> 2] = 1;
    HEAP32[$vv + 12 >> 2] = $vl;
    HEAP32[$vv + 8 >> 2] = 1;
    ___gmpf_sub($sum, $u, $vv);
    __label__ = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_trunc($r, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 8 >> 2];
    var $4 = HEAP32[$u + 4 >> 2];
    if (($4 | 0) == 0 | ($2 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 10;
    break;
   case 4:
    var $12 = HEAP32[$u + 12 >> 2];
    HEAP32[$r + 8 >> 2] = $2;
    var $14 = ($4 | 0) > -1;
    var $16 = $14 ? $4 : -$4 | 0;
    var $18 = ($16 | 0) < ($2 | 0) ? $16 : $2;
    var $20 = HEAP32[$r >> 2];
    var $21 = $20 + 1 | 0;
    var $23 = ($18 | 0) < ($21 | 0) ? $18 : $21;
    var $_sum = $16 - $23 | 0;
    var $24 = $12 + ($_sum << 2) | 0;
    var $26 = HEAP32[$r + 12 >> 2];
    var $28 = $14 ? $23 : -$23 | 0;
    HEAP32[$r + 4 >> 2] = $28;
    if (($26 | 0) == ($24 | 0) | ($23 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $33 = $23 - 1 | 0;
    var $34 = HEAP32[$24 >> 2];
    if (($33 | 0) == 0) {
      var $__x_1 = $34;
      var $__dst_1 = $26;
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $37 = $16 ^ -1;
    var $38 = $2 ^ -1;
    var $smax = ($37 | 0) > ($38 | 0) ? $37 : $38;
    var $40 = -2 - $20 | 0;
    var $smax5 = ($smax | 0) > ($40 | 0) ? $smax : $40;
    var $42 = -2 - $smax5 | 0;
    var $__x_0 = $34;
    var $__src_0 = $12 + ($_sum + 1 << 2) | 0;
    var $__dst_0 = $26;
    var $__n_0 = $33;
    __label__ = 7;
    break;
   case 7:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $46 = HEAP32[$__src_0 >> 2];
    var $47 = $__n_0 - 1 | 0;
    if (($47 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $46;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $47;
      __label__ = 7;
      break;
    }
   case 8:
    var $__x_1 = $46;
    var $__dst_1 = $26 + ($42 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 10;
    break;
   case 10:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_trunc["X"] = 1;

function ___gmpf_ui_sub($r, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ulimb = __stackBase__;
    var $__tmp_marker = __stackBase__ + 4;
    var $v_negated = __stackBase__ + 8;
    var $2 = HEAP32[$v + 4 >> 2];
    if (($u | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmpf_neg($r, $v);
    __label__ = 97;
    break;
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    ___gmpf_set_ui($r, $u);
    __label__ = 97;
    break;
   case 6:
    if (($2 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $11 = -$2 | 0;
    HEAP32[$v_negated + 4 >> 2] = $11;
    var $14 = HEAP32[$v + 8 >> 2];
    HEAP32[$v_negated + 8 >> 2] = $14;
    var $17 = HEAP32[$v + 12 >> 2];
    HEAP32[$v_negated + 12 >> 2] = $17;
    ___gmpf_add_ui($r, $v_negated, $u);
    __label__ = 97;
    break;
   case 8:
    HEAP32[$__tmp_marker >> 2] = 0;
    HEAP32[$ulimb >> 2] = $u;
    var $21 = HEAP32[$v + 8 >> 2];
    var $24 = HEAP32[$v + 12 >> 2];
    var $26 = HEAP32[$r >> 2];
    if (($21 | 0) > 1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $up_0 = $24;
    var $vp_0 = $ulimb;
    var $usize_0 = $2;
    var $vsize_0 = 1;
    var $prec_0 = $26 + 1 | 0;
    var $uexp_0 = $21;
    var $ediff_0 = $21 - 1 | 0;
    var $negate_0 = 1;
    __label__ = 11;
    break;
   case 10:
    var $up_0 = $ulimb;
    var $vp_0 = $24;
    var $usize_0 = 1;
    var $vsize_0 = $2;
    var $prec_0 = $26;
    var $uexp_0 = 1;
    var $ediff_0 = 1 - $21 | 0;
    var $negate_0 = 0;
    __label__ = 11;
    break;
   case 11:
    var $negate_0;
    var $ediff_0;
    var $uexp_0;
    var $prec_0;
    var $vsize_0;
    var $usize_0;
    var $vp_0;
    var $up_0;
    var $rp_0 = HEAP32[$r + 12 >> 2];
    var $33 = ($ediff_0 | 0) == 0;
    if ($33) {
      var $usize_1 = $usize_0;
      var $vsize_1 = $vsize_0;
      var $uexp_1 = $uexp_0;
      __label__ = 12;
      break;
    } else {
      var $usize_5 = $usize_0;
      var $vsize_5 = $vsize_0;
      var $uexp_5 = $uexp_0;
      __label__ = 21;
      break;
    }
   case 12:
    var $uexp_1;
    var $vsize_1;
    var $usize_1;
    var $34 = $usize_1 - 1 | 0;
    var $35 = $vsize_1 - 1 | 0;
    if ((HEAP32[$up_0 + ($34 << 2) >> 2] | 0) == (HEAP32[$vp_0 + ($35 << 2) >> 2] | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 13:
    var $42 = $uexp_1 - 1 | 0;
    if (($34 | 0) == 0) {
      var $vsize_4 = $35;
      var $uexp_4 = $42;
      __label__ = 19;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if (($35 | 0) == 0) {
      var $usize_2 = $34;
      var $uexp_2 = $42;
      __label__ = 16;
      break;
    } else {
      var $usize_1 = $34;
      var $vsize_1 = $35;
      var $uexp_1 = $42;
      __label__ = 12;
      break;
    }
   case 15:
    if (($vsize_1 | 0) == 0) {
      var $usize_2 = $usize_1;
      var $uexp_2 = $uexp_1;
      __label__ = 16;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 16:
    var $uexp_2;
    var $usize_2;
    if (($usize_2 | 0) == 0) {
      var $vsize_4 = 0;
      var $uexp_4 = $uexp_2;
      __label__ = 19;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $50 = $usize_2 - 1 | 0;
    if ((HEAP32[$up_0 + ($50 << 2) >> 2] | 0) == 0) {
      var $usize_2 = $50;
      var $uexp_2 = $uexp_2 - 1 | 0;
      __label__ = 16;
      break;
    } else {
      var $usize_5 = $usize_2;
      var $vsize_5 = 0;
      var $uexp_5 = $uexp_2;
      __label__ = 21;
      break;
    }
   case 18:
    if (($usize_1 | 0) == 0) {
      var $vsize_4 = $vsize_1;
      var $uexp_4 = $uexp_1;
      __label__ = 19;
      break;
    } else {
      var $usize_5 = $usize_1;
      var $vsize_5 = $vsize_1;
      var $uexp_5 = $uexp_1;
      __label__ = 21;
      break;
    }
   case 19:
    var $uexp_4;
    var $vsize_4;
    if (($vsize_4 | 0) == 0) {
      var $usize_5 = 0;
      var $vsize_5 = 0;
      var $uexp_5 = $uexp_4;
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $58 = $vsize_4 - 1 | 0;
    if ((HEAP32[$vp_0 + ($58 << 2) >> 2] | 0) == 0) {
      var $vsize_4 = $58;
      var $uexp_4 = $uexp_4 - 1 | 0;
      __label__ = 19;
      break;
    } else {
      var $usize_5 = 0;
      var $vsize_5 = $vsize_4;
      var $uexp_5 = $uexp_4;
      __label__ = 21;
      break;
    }
   case 21:
    var $uexp_5;
    var $vsize_5;
    var $usize_5;
    if (($usize_5 | 0) > ($prec_0 | 0)) {
      __label__ = 22;
      break;
    } else {
      var $up_1 = $up_0;
      var $usize_6 = $usize_5;
      __label__ = 23;
      break;
    }
   case 22:
    var $up_1 = $up_0 + ($usize_5 - $prec_0 << 2) | 0;
    var $usize_6 = $prec_0;
    __label__ = 23;
    break;
   case 23:
    var $usize_6;
    var $up_1;
    var $68 = $vsize_5 + $ediff_0 | 0;
    if (($68 | 0) > ($prec_0 | 0)) {
      __label__ = 24;
      break;
    } else {
      var $vp_1 = $vp_0;
      var $vsize_6 = $vsize_5;
      __label__ = 25;
      break;
    }
   case 24:
    var $vp_1 = $vp_0 + ($68 - $prec_0 << 2) | 0;
    var $vsize_6 = $prec_0 - $ediff_0 | 0;
    __label__ = 25;
    break;
   case 25:
    var $vsize_6;
    var $vp_1;
    var $75 = $prec_0 << 2;
    if ($75 >>> 0 < 65536) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $78 = STACKTOP;
    STACKTOP += $75;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $82 = $78;
    __label__ = 28;
    break;
   case 27:
    var $80 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $75);
    var $82 = $80;
    __label__ = 28;
    break;
   case 28:
    var $82;
    var $83 = $82;
    if (($ediff_0 | 0) < ($prec_0 | 0)) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $85 = $vsize_6 + $ediff_0 | 0;
    var $86 = $usize_6 << 2;
    var $87 = $86 - 4 | 0;
    var $91 = $vsize_6 << 2;
    var $vp_2 = $vp_1;
    var $indvar = 0;
    var $indvars_iv91 = $vsize_6;
    var $indvars_iv95 = $82 + ($87 - ($85 << 2)) | 0;
    var $indvars_iv100 = $85 - $usize_6 | 0;
    var $indvars_iv107 = $82 + ($91 - 4 - $86) | 0;
    var $indvars_iv112 = $vsize_6 - $usize_6 | 0;
    var $indvars_iv117 = $usize_6 - $vsize_6 | 0;
    var $indvars_iv124 = $82 + ($87 - $91) | 0;
    var $indvars_iv139 = $rp_0 + ($vsize_6 - 1 << 2) | 0;
    __label__ = 35;
    break;
   case 30:
    if (($83 | 0) == ($up_1 | 0) | ($usize_6 | 0) == 0) {
      var $rsize_1 = $usize_6;
      var $uexp_7 = $uexp_5;
      var $negate_2 = $negate_0;
      __label__ = 95;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $102 = $usize_6 - 1 | 0;
    var $103 = HEAP32[$up_1 >> 2];
    if (($102 | 0) == 0) {
      var $__dst_1 = $rp_0;
      var $__x_1 = $103;
      __label__ = 34;
      break;
    } else {
      var $__n_0 = $102;
      var $__dst_0 = $rp_0;
      var $up_1_pn6 = $up_1;
      var $__x_0 = $103;
      __label__ = 32;
      break;
    }
   case 32:
    var $__x_0;
    var $up_1_pn6;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $up_1_pn6 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $106 = HEAP32[$__src_0 >> 2];
    var $107 = $__n_0 - 1 | 0;
    if (($107 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      var $__n_0 = $107;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $up_1_pn6 = $__src_0;
      var $__x_0 = $106;
      __label__ = 32;
      break;
    }
   case 33:
    var $__dst_1 = $rp_0 + ($102 << 2) | 0;
    var $__x_1 = $106;
    __label__ = 34;
    break;
   case 34:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $rsize_1 = $usize_6;
    var $uexp_7 = $uexp_5;
    var $negate_2 = $negate_0;
    __label__ = 95;
    break;
   case 35:
    var $indvars_iv139;
    var $indvars_iv124;
    var $indvars_iv117;
    var $indvars_iv112;
    var $indvars_iv107;
    var $indvars_iv100;
    var $indvars_iv95;
    var $indvars_iv91;
    var $indvar;
    var $vp_2;
    if (($indvars_iv91 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 36:
    if (($usize_6 | 0) == 0) {
      var $rsize_1 = 0;
      var $uexp_7 = $uexp_5;
      var $negate_2 = $negate_0;
      __label__ = 95;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $115 = $usize_6 - 1 | 0;
    var $116 = HEAP32[$up_1 >> 2];
    if (($115 | 0) == 0) {
      var $__dst2_1 = $rp_0;
      var $__x4_1 = $116;
      __label__ = 40;
      break;
    } else {
      var $__n1_0 = $115;
      var $__dst2_0 = $rp_0;
      var $up_1_pn = $up_1;
      var $__x4_0 = $116;
      __label__ = 38;
      break;
    }
   case 38:
    var $__x4_0;
    var $up_1_pn;
    var $__dst2_0;
    var $__n1_0;
    var $__src3_0 = $up_1_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $119 = HEAP32[$__src3_0 >> 2];
    var $120 = $__n1_0 - 1 | 0;
    if (($120 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      var $__n1_0 = $120;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $up_1_pn = $__src3_0;
      var $__x4_0 = $119;
      __label__ = 38;
      break;
    }
   case 39:
    var $__dst2_1 = $rp_0 + ($115 << 2) | 0;
    var $__x4_1 = $119;
    __label__ = 40;
    break;
   case 40:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $rsize_1 = $usize_6;
    var $uexp_7 = $uexp_5;
    var $negate_2 = $negate_0;
    __label__ = 95;
    break;
   case 41:
    var $124 = HEAPU32[$vp_2 >> 2];
    if (($124 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      var $up_2 = $up_1;
      var $usize_7 = $usize_6;
      var $indvar89 = 0;
      var $indvars_iv97 = $indvars_iv95;
      var $indvars_iv102 = $indvars_iv100;
      var $indvars_iv109 = $indvars_iv107;
      var $indvars_iv114 = $indvars_iv112;
      var $indvars_iv119 = $indvars_iv117;
      var $indvars_iv126 = $indvars_iv124;
      __label__ = 43;
      break;
    }
   case 42:
    var $vp_2 = $vp_2 + 4 | 0;
    var $indvar = $indvar + 1 | 0;
    var $indvars_iv91 = $indvars_iv91 - 1 | 0;
    var $indvars_iv95 = $indvars_iv95 + 4 | 0;
    var $indvars_iv100 = $indvars_iv100 - 1 | 0;
    var $indvars_iv107 = $indvars_iv107 - 4 | 0;
    var $indvars_iv112 = $indvars_iv112 - 1 | 0;
    var $indvars_iv117 = $indvars_iv117 + 1 | 0;
    var $indvars_iv124 = $indvars_iv124 + 4 | 0;
    var $indvars_iv139 = $indvars_iv139 - 4 | 0;
    __label__ = 35;
    break;
   case 43:
    var $indvars_iv126;
    var $indvars_iv119;
    var $indvars_iv114;
    var $indvars_iv109;
    var $indvars_iv102;
    var $indvars_iv97;
    var $indvar89;
    var $usize_7;
    var $up_2;
    if (($usize_7 | 0) == 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 44:
    var $130 = $indvars_iv91 - 1 | 0;
    if (($130 | 0) == 0) {
      var $__dst6_1 = $rp_0;
      var $__x8_1 = $124;
      __label__ = 46;
      break;
    } else {
      var $__n5_0 = $130;
      var $__dst6_0 = $rp_0;
      var $vp_2_pn5 = $vp_2;
      var $__x8_0 = $124;
      __label__ = 45;
      break;
    }
   case 45:
    var $__x8_0;
    var $vp_2_pn5;
    var $__dst6_0;
    var $__n5_0;
    var $__src7_0 = $vp_2_pn5 + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $133 = HEAP32[$__src7_0 >> 2];
    var $134 = $__n5_0 - 1 | 0;
    if (($134 | 0) == 0) {
      var $__dst6_1 = $indvars_iv139;
      var $__x8_1 = $133;
      __label__ = 46;
      break;
    } else {
      var $__n5_0 = $134;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $vp_2_pn5 = $__src7_0;
      var $__x8_0 = $133;
      __label__ = 45;
      break;
    }
   case 46:
    var $__x8_1;
    var $__dst6_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    var $rsize_1 = $indvars_iv91;
    var $uexp_7 = $uexp_5;
    var $negate_2 = $negate_0 ^ 1;
    __label__ = 95;
    break;
   case 47:
    var $139 = HEAPU32[$up_2 >> 2];
    if (($139 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 48:
    var $up_2 = $up_2 + 4 | 0;
    var $usize_7 = $usize_7 - 1 | 0;
    var $indvar89 = $indvar89 + 1 | 0;
    var $indvars_iv97 = $indvars_iv97 - 4 | 0;
    var $indvars_iv102 = $indvars_iv102 + 1 | 0;
    var $indvars_iv109 = $indvars_iv109 + 4 | 0;
    var $indvars_iv114 = $indvars_iv114 + 1 | 0;
    var $indvars_iv119 = $indvars_iv119 - 1 | 0;
    var $indvars_iv126 = $indvars_iv126 - 4 | 0;
    __label__ = 43;
    break;
   case 49:
    var $indvars_iv9799 = $indvars_iv97;
    var $indvars_iv109111 = $indvars_iv109;
    var $indvars_iv126128 = $indvars_iv126;
    if (($usize_7 | 0) > ($ediff_0 | 0)) {
      __label__ = 50;
      break;
    } else {
      __label__ = 83;
      break;
    }
   case 50:
    if ($33) {
      __label__ = 51;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 51:
    if (($usize_7 | 0) > ($indvars_iv91 | 0)) {
      __label__ = 52;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 52:
    var $_sum3 = $usize_7 - $indvars_iv91 | 0;
    var $150 = $up_2 + ($_sum3 << 2) | 0;
    var $151 = ___gmpn_cmp($150, $vp_2, $indvars_iv91);
    if (($151 | 0) > -1) {
      __label__ = 53;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 53:
    if (($usize_7 | 0) == ($indvars_iv91 | 0)) {
      __label__ = 57;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    var $156 = $_sum3 - 1 | 0;
    if (($156 | 0) == 0) {
      var $__dst10_1 = $83;
      var $__x12_1 = $139;
      __label__ = 56;
      break;
    } else {
      var $__n9_0 = $156;
      var $__dst10_0 = $83;
      var $up_2_pn4 = $up_2;
      var $__x12_0 = $139;
      __label__ = 55;
      break;
    }
   case 55:
    var $__x12_0;
    var $up_2_pn4;
    var $__dst10_0;
    var $__n9_0;
    var $__src11_0 = $up_2_pn4 + 4 | 0;
    HEAP32[$__dst10_0 >> 2] = $__x12_0;
    var $159 = HEAP32[$__src11_0 >> 2];
    var $160 = $__n9_0 - 1 | 0;
    if (($160 | 0) == 0) {
      var $__dst10_1 = $indvars_iv126128;
      var $__x12_1 = $159;
      __label__ = 56;
      break;
    } else {
      var $__n9_0 = $160;
      var $__dst10_0 = $__dst10_0 + 4 | 0;
      var $up_2_pn4 = $__src11_0;
      var $__x12_0 = $159;
      __label__ = 55;
      break;
    }
   case 56:
    var $__x12_1;
    var $__dst10_1;
    HEAP32[$__dst10_1 >> 2] = $__x12_1;
    __label__ = 57;
    break;
   case 57:
    var $164 = ___gmpn_sub_n($83 + ($_sum3 << 2) | 0, $150, $vp_2, $indvars_iv91);
    var $rsize_0_ph = $usize_7;
    var $negate_1_ph = $negate_0;
    __label__ = 88;
    break;
   case 58:
    HEAP32[$83 >> 2] = -$139 | 0;
    if (($_sum3 | 0) > 1) {
      var $i_034 = 1;
      __label__ = 59;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 59:
    var $i_034;
    var $170 = HEAP32[$up_2 + ($i_034 << 2) >> 2] ^ -1;
    HEAP32[$83 + ($i_034 << 2) >> 2] = $170;
    var $172 = $i_034 + 1 | 0;
    if (($172 | 0) == ($indvars_iv119 | 0)) {
      __label__ = 60;
      break;
    } else {
      var $i_034 = $172;
      __label__ = 59;
      break;
    }
   case 60:
    var $173 = $83 + ($_sum3 << 2) | 0;
    var $174 = ___gmpn_sub_n($173, $vp_2, $150, $indvars_iv91);
    var $175 = ___gmpn_sub_1($173, $173, $indvars_iv91, 1);
    var $rsize_0_ph = $usize_7;
    var $negate_1_ph = $negate_0 ^ 1;
    __label__ = 88;
    break;
   case 61:
    var $178 = ($usize_7 | 0) < ($indvars_iv91 | 0);
    var $_sum = $indvars_iv91 - $usize_7 | 0;
    var $179 = $vp_2 + ($_sum << 2) | 0;
    var $180 = ___gmpn_cmp($up_2, $179, $usize_7);
    var $181 = ($180 | 0) > 0;
    if ($178) {
      __label__ = 62;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 62:
    if ($181) {
      __label__ = 63;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 63:
    HEAP32[$83 >> 2] = -$124 | 0;
    if (($_sum | 0) > 1) {
      var $i16_030 = 1;
      __label__ = 64;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 64:
    var $i16_030;
    var $188 = HEAP32[$vp_2 + ($i16_030 << 2) >> 2] ^ -1;
    HEAP32[$83 + ($i16_030 << 2) >> 2] = $188;
    var $190 = $i16_030 + 1 | 0;
    if (($190 | 0) == ($indvars_iv114 | 0)) {
      __label__ = 65;
      break;
    } else {
      var $i16_030 = $190;
      __label__ = 64;
      break;
    }
   case 65:
    var $191 = $83 + ($_sum << 2) | 0;
    var $192 = ___gmpn_sub_n($191, $up_2, $179, $usize_7);
    var $193 = ___gmpn_sub_1($191, $191, $usize_7, 1);
    var $rsize_0_ph = $indvars_iv91;
    var $negate_1_ph = $negate_0;
    __label__ = 88;
    break;
   case 66:
    if (($indvars_iv91 | 0) == ($usize_7 | 0)) {
      __label__ = 70;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $197 = $_sum - 1 | 0;
    if (($197 | 0) == 0) {
      var $__dst19_1 = $83;
      var $__x21_1 = $124;
      __label__ = 69;
      break;
    } else {
      var $__n18_0 = $197;
      var $__dst19_0 = $83;
      var $vp_2_pn = $vp_2;
      var $__x21_0 = $124;
      __label__ = 68;
      break;
    }
   case 68:
    var $__x21_0;
    var $vp_2_pn;
    var $__dst19_0;
    var $__n18_0;
    var $__src20_0 = $vp_2_pn + 4 | 0;
    HEAP32[$__dst19_0 >> 2] = $__x21_0;
    var $200 = HEAP32[$__src20_0 >> 2];
    var $201 = $__n18_0 - 1 | 0;
    if (($201 | 0) == 0) {
      var $__dst19_1 = $indvars_iv109111;
      var $__x21_1 = $200;
      __label__ = 69;
      break;
    } else {
      var $__n18_0 = $201;
      var $__dst19_0 = $__dst19_0 + 4 | 0;
      var $vp_2_pn = $__src20_0;
      var $__x21_0 = $200;
      __label__ = 68;
      break;
    }
   case 69:
    var $__x21_1;
    var $__dst19_1;
    HEAP32[$__dst19_1 >> 2] = $__x21_1;
    __label__ = 70;
    break;
   case 70:
    var $205 = ___gmpn_sub_n($83 + ($_sum << 2) | 0, $179, $up_2, $usize_7);
    var $rsize_0_ph = $indvars_iv91;
    var $negate_1_ph = $negate_0 ^ 1;
    __label__ = 88;
    break;
   case 71:
    if ($181) {
      __label__ = 72;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 72:
    var $209 = ___gmpn_sub_n($83, $up_2, $vp_2, $usize_7);
    var $rsize_0_ph = $usize_7;
    var $negate_1_ph = $negate_0;
    __label__ = 88;
    break;
   case 73:
    var $211 = ___gmpn_sub_n($83, $vp_2, $up_2, $usize_7);
    var $rsize_0_ph = $usize_7;
    var $negate_1_ph = $negate_0 ^ 1;
    __label__ = 88;
    break;
   case 74:
    var $214 = $indvars_iv91 + $ediff_0 | 0;
    if (($214 | 0) > ($usize_7 | 0)) {
      __label__ = 80;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    var $217 = $usize_7 - $ediff_0 | 0;
    var $218 = $217 - $indvars_iv91 | 0;
    if (($217 | 0) == ($indvars_iv91 | 0)) {
      __label__ = 79;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    var $221 = $218 - 1 | 0;
    if (($221 | 0) == 0) {
      var $__x27_1 = $139;
      var $__dst25_1 = $83;
      __label__ = 78;
      break;
    } else {
      var $__x27_0 = $139;
      var $up_2_pn = $up_2;
      var $__dst25_0 = $83;
      var $__n24_0 = $221;
      __label__ = 77;
      break;
    }
   case 77:
    var $__n24_0;
    var $__dst25_0;
    var $up_2_pn;
    var $__x27_0;
    var $__src26_0 = $up_2_pn + 4 | 0;
    HEAP32[$__dst25_0 >> 2] = $__x27_0;
    var $224 = HEAP32[$__src26_0 >> 2];
    var $225 = $__n24_0 - 1 | 0;
    if (($225 | 0) == 0) {
      var $__x27_1 = $224;
      var $__dst25_1 = $indvars_iv9799;
      __label__ = 78;
      break;
    } else {
      var $__x27_0 = $224;
      var $up_2_pn = $__src26_0;
      var $__dst25_0 = $__dst25_0 + 4 | 0;
      var $__n24_0 = $225;
      __label__ = 77;
      break;
    }
   case 78:
    var $__dst25_1;
    var $__x27_1;
    HEAP32[$__dst25_1 >> 2] = $__x27_1;
    __label__ = 79;
    break;
   case 79:
    var $231 = ___gmpn_sub($83 + ($218 << 2) | 0, $up_2 + ($218 << 2) | 0, $usize_7 - $218 | 0, $vp_2, $indvars_iv91);
    var $rsize_0_ph = $usize_7;
    var $negate_1_ph = $negate_0;
    __label__ = 88;
    break;
   case 80:
    var $233 = $214 - $usize_7 | 0;
    HEAP32[$83 >> 2] = -$124 | 0;
    if (($233 | 0) > 1) {
      var $i29_022 = 1;
      __label__ = 81;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 81:
    var $i29_022;
    var $238 = HEAP32[$vp_2 + ($i29_022 << 2) >> 2] ^ -1;
    HEAP32[$83 + ($i29_022 << 2) >> 2] = $238;
    var $240 = $i29_022 + 1 | 0;
    if (($240 | 0) == ($indvars_iv102 | 0)) {
      __label__ = 82;
      break;
    } else {
      var $i29_022 = $240;
      __label__ = 81;
      break;
    }
   case 82:
    var $241 = $83 + ($233 << 2) | 0;
    var $244 = ___gmpn_sub($241, $up_2, $usize_7, $vp_2 + ($233 << 2) | 0, $usize_7 - $ediff_0 | 0);
    var $245 = ___gmpn_sub_1($241, $241, $usize_7, 1);
    var $rsize_0_ph = $214;
    var $negate_1_ph = $negate_0;
    __label__ = 88;
    break;
   case 83:
    var $247 = $indvars_iv91 + $ediff_0 | 0;
    var $248 = $247 - $usize_7 | 0;
    HEAP32[$83 >> 2] = -$124 | 0;
    if (($indvars_iv91 | 0) > 1) {
      var $i31_015 = 1;
      __label__ = 85;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 84:
    if (($indvars_iv91 | 0) < ($248 | 0)) {
      __label__ = 86;
      break;
    } else {
      __label__ = 87;
      break;
    }
   case 85:
    var $i31_015;
    var $254 = HEAP32[$vp_2 + ($i31_015 << 2) >> 2] ^ -1;
    HEAP32[$83 + ($i31_015 << 2) >> 2] = $254;
    var $256 = $i31_015 + 1 | 0;
    if (($256 | 0) == ($indvars_iv91 | 0)) {
      __label__ = 84;
      break;
    } else {
      var $i31_015 = $256;
      __label__ = 85;
      break;
    }
   case 86:
    var $257 = (i64Math.multiply($indvar, 0, -4, 0), i64Math.result[0]);
    var $scevgep88 = $82 + ($257 + $91) | 0;
    _memset($scevgep88, -1, ($indvar89 << 2) + ($ediff_0 - $usize_6 << 2) | 0, 4);
    __label__ = 87;
    break;
   case 87:
    var $265 = ___gmpn_sub_1($83 + ($248 << 2) | 0, $up_2, $usize_7, 1);
    var $rsize_0_ph = $247;
    var $negate_1_ph = $negate_0;
    __label__ = 88;
    break;
   case 88:
    var $negate_1_ph;
    var $rsize_0_ph;
    var $rsize_0 = $rsize_0_ph;
    var $uexp_6 = $uexp_5;
    var $indvars_iv131 = $rp_0 + ($rsize_0_ph - 1 << 2) | 0;
    __label__ = 89;
    break;
   case 89:
    var $indvars_iv131;
    var $uexp_6;
    var $rsize_0;
    if (($rsize_0 | 0) == 0) {
      var $rsize_1 = 0;
      var $uexp_7 = $uexp_6;
      var $negate_2 = $negate_1_ph;
      __label__ = 95;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 90:
    var $270 = $rsize_0 - 1 | 0;
    if ((HEAP32[$83 + ($270 << 2) >> 2] | 0) == 0) {
      var $rsize_0 = $270;
      var $uexp_6 = $uexp_6 - 1 | 0;
      var $indvars_iv131 = $indvars_iv131 - 4 | 0;
      __label__ = 89;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 91:
    var $275 = HEAP32[$83 >> 2];
    if (($270 | 0) == 0) {
      var $__x35_1 = $275;
      var $__dst33_1 = $rp_0;
      __label__ = 94;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 92:
    var $__x35_0 = $275;
    var $__src34_0 = $82 + 4 | 0;
    var $__dst33_0 = $rp_0;
    var $__n32_0 = $270;
    __label__ = 93;
    break;
   case 93:
    var $__n32_0;
    var $__dst33_0;
    var $__src34_0;
    var $__x35_0;
    HEAP32[$__dst33_0 >> 2] = $__x35_0;
    var $282 = HEAP32[$__src34_0 >> 2];
    var $283 = $__n32_0 - 1 | 0;
    if (($283 | 0) == 0) {
      var $__x35_1 = $282;
      var $__dst33_1 = $indvars_iv131;
      __label__ = 94;
      break;
    } else {
      var $__x35_0 = $282;
      var $__src34_0 = $__src34_0 + 4 | 0;
      var $__dst33_0 = $__dst33_0 + 4 | 0;
      var $__n32_0 = $283;
      __label__ = 93;
      break;
    }
   case 94:
    var $__dst33_1;
    var $__x35_1;
    HEAP32[$__dst33_1 >> 2] = $__x35_1;
    var $rsize_1 = $rsize_0;
    var $uexp_7 = $uexp_6;
    var $negate_2 = $negate_1_ph;
    __label__ = 95;
    break;
   case 95:
    var $negate_2;
    var $uexp_7;
    var $rsize_1;
    var $287 = ($negate_2 | 0) != 0 ? -$rsize_1 | 0 : $rsize_1;
    HEAP32[$r + 4 >> 2] = $287;
    HEAP32[$r + 8 >> 2] = $uexp_7;
    var $290 = HEAP32[$__tmp_marker >> 2];
    if (($290 | 0) == 0) {
      __label__ = 97;
      break;
    } else {
      __label__ = 96;
      break;
    }
   case 96:
    ___gmp_tmp_reentrant_free($290);
    __label__ = 97;
    break;
   case 97:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_ui_sub["X"] = 1;

function ___gmpf_urandomb($rop, $rstate, $nbits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$rop + 12 >> 2];
    var $4 = ($nbits + 31 | 0) >>> 5;
    var $7 = HEAP32[$rop >> 2] + 1 | 0;
    var $or_cond = ($4 | 0) > ($7 | 0) | ($4 | 0) == 0;
    var $_0 = $or_cond ? $7 << 5 : $nbits;
    var $nlimbs_0 = $or_cond ? $7 : $4;
    var $15 = HEAP32[HEAP32[$rstate + 16 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$15]($rstate, $2, $_0);
    var $16 = $_0 & 31;
    if (($16 | 0) == 0) {
      var $exp_0 = 0;
      var $nlimbs_1 = $nlimbs_0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $19 = 32 - $16 | 0;
    var $20 = ___gmpn_lshift($2, $2, $nlimbs_0, $19);
    var $exp_0 = 0;
    var $nlimbs_1 = $nlimbs_0;
    __label__ = 4;
    break;
   case 4:
    var $nlimbs_1;
    var $exp_0;
    if (($nlimbs_1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $23 = $nlimbs_1 - 1 | 0;
    if ((HEAP32[$2 + ($23 << 2) >> 2] | 0) == 0) {
      var $exp_0 = $exp_0 - 1 | 0;
      var $nlimbs_1 = $23;
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    HEAP32[$rop + 8 >> 2] = $exp_0;
    HEAP32[$rop + 4 >> 2] = $nlimbs_1;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpf_ui_div($r, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$v + 4 >> 2];
    var $3 = ($2 | 0) > -1;
    var $5 = $3 ? $2 : -$2 | 0;
    var $7 = HEAPU32[$r >> 2];
    if (($5 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($u | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$r + 4 >> 2] = 0;
    HEAP32[$r + 8 >> 2] = 0;
    __label__ = 20;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $17 = HEAP32[$v + 8 >> 2];
    var $19 = HEAPU32[$r + 12 >> 2];
    var $21 = HEAPU32[$v + 12 >> 2];
    var $23 = 1 - $5 + 1 | 0;
    var $24 = $7 + 1 | 0;
    var $25 = $24 - $23 | 0;
    var $26 = $25 + 1 | 0;
    var $27 = ($19 | 0) == ($21 | 0);
    var $28 = $27 ? $5 : 0;
    var $29 = $26 + $5 | 0;
    var $31 = $29 + $28 << 2;
    if ($31 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $34 = STACKTOP;
    STACKTOP += $31;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $38 = $34;
    __label__ = 9;
    break;
   case 8:
    var $36 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $31);
    var $38 = $36;
    __label__ = 9;
    break;
   case 9:
    var $38;
    var $39 = $38;
    var $40 = $39 + ($5 << 2) | 0;
    var $41 = $39 + ($29 << 2) | 0;
    if ($27) {
      __label__ = 10;
      break;
    } else {
      var $vp_0 = $21;
      __label__ = 16;
      break;
    }
   case 10:
    if (($2 | 0) == 0) {
      var $vp_0 = $41;
      __label__ = 16;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $45 = $5 - 1 | 0;
    var $46 = HEAPU32[$19 >> 2];
    if (($45 | 0) == 0) {
      var $__x_1 = $46;
      var $__dst_1 = $41;
      __label__ = 15;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $48 = (i64Math.multiply($5, 0, 12, 0), i64Math.result[0]);
    var $scevgep = $38 + ($48 + ($7 << 2) - 4) | 0;
    var $__x_0 = $46;
    var $_pn = $19;
    var $__dst_0 = $41;
    var $__n_0 = $45;
    __label__ = 13;
    break;
   case 13:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $54 = HEAP32[$__src_0 >> 2];
    var $55 = $__n_0 - 1 | 0;
    if (($55 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $__x_0 = $54;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $55;
      __label__ = 13;
      break;
    }
   case 14:
    var $__x_1 = $54;
    var $__dst_1 = $scevgep;
    __label__ = 15;
    break;
   case 15:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $vp_0 = $41;
    __label__ = 16;
    break;
   case 16:
    var $vp_0;
    if (($24 | 0) == ($23 | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $scevgep8 = $38 + ($5 << 2) | 0;
    var $63 = ($5 + $7 << 2) - 4 | 0;
    _memset($scevgep8, 0, $63, 4);
    __label__ = 18;
    break;
   case 18:
    HEAP32[$39 + ($25 + $5 << 2) >> 2] = $u;
    ___gmpn_tdiv_qr($19, $39, 0, $40, $26, $vp_0, $5);
    var $67 = (HEAP32[$19 + ($7 << 2) >> 2] | 0) == 0;
    var $69 = $24 - ($67 & 1) | 0;
    var $71 = 2 - $17 + ($67 << 31 >> 31) | 0;
    var $73 = $3 ? $69 : -$69 | 0;
    HEAP32[$r + 4 >> 2] = $73;
    HEAP32[$r + 8 >> 2] = $71;
    var $76 = HEAP32[$__tmp_marker >> 2];
    if (($76 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    ___gmp_tmp_reentrant_free($76);
    __label__ = 20;
    break;
   case 20:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpf_ui_div["X"] = 1;

function ___gmpn_dcpi1_bdiv_q_n_itch($n) {
  return $n;
}

function _mpn_mulmod_bnm1_itch($rn, $an, $bn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn >> 1;
    if (($1 | 0) < ($an | 0)) {
      __label__ = 3;
      break;
    } else {
      var $7 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ($1 | 0) < ($bn | 0) ? $rn : $1;
    var $7 = $5;
    __label__ = 4;
    break;
   case 4:
    var $7;
    return $rn + 4 + $7 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_and_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__n_0 = -$n | 0;
    __label__ = 3;
    break;
   case 3:
    var $__n_0;
    var $_sum = $__n_0 + $n | 0;
    var $7 = HEAP32[$vp + ($_sum << 2) >> 2] & HEAP32[$up + ($_sum << 2) >> 2];
    HEAP32[$rp + ($_sum << 2) >> 2] = $7;
    var $9 = $__n_0 + 1 | 0;
    if (($9 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $__n_0 = $9;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_andn_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__n_0 = -$n | 0;
    __label__ = 3;
    break;
   case 3:
    var $__n_0;
    var $_sum = $__n_0 + $n | 0;
    var $8 = HEAP32[$up + ($_sum << 2) >> 2] & (HEAP32[$vp + ($_sum << 2) >> 2] ^ -1);
    HEAP32[$rp + ($_sum << 2) >> 2] = $8;
    var $10 = $__n_0 + 1 | 0;
    if (($10 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $__n_0 = $10;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_copyd($rp, $up, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 0) {
      var $i_02_in = $n;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $i_02_in;
    var $i_02 = $i_02_in - 1 | 0;
    var $3 = HEAP32[$up + ($i_02 << 2) >> 2];
    HEAP32[$rp + ($i_02 << 2) >> 2] = $3;
    if (($i_02 | 0) > 0) {
      var $i_02_in = $i_02;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_copyi($rp, $up, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $i_02 = -$n | 0;
    __label__ = 4;
    break;
   case 4:
    var $i_02;
    var $_sum = $i_02 + $n | 0;
    var $5 = HEAP32[$up + ($_sum << 2) >> 2];
    HEAP32[$rp + ($_sum << 2) >> 2] = $5;
    var $7 = $i_02 + 1 | 0;
    if (($7 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $i_02 = $7;
      __label__ = 4;
      break;
    }
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_add_1($__gmp_dst, $__gmp_src, $__gmp_size, $__gmp_n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAP32[$__gmp_src >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($1, $__gmp_n);
    var $2 = $uadd.f0;
    HEAP32[$__gmp_dst >> 2] = $2;
    var $3 = $uadd.f1;
    if ($3) {
      var $__gmp_i_0 = 1;
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    var $__gmp_i_0;
    if (($__gmp_i_0 | 0) < ($__gmp_size | 0)) {
      __label__ = 4;
      break;
    } else {
      var $__gmp_c_0 = 1;
      __label__ = 9;
      break;
    }
   case 4:
    var $8 = HEAP32[$__gmp_src + ($__gmp_i_0 << 2) >> 2] + 1 | 0;
    HEAP32[$__gmp_dst + ($__gmp_i_0 << 2) >> 2] = $8;
    var $10 = $__gmp_i_0 + 1 | 0;
    if (($8 | 0) == 0) {
      var $__gmp_i_0 = $10;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($__gmp_src | 0) != ($__gmp_dst | 0) & ($10 | 0) < ($__gmp_size | 0)) {
      var $__gmp_j_04 = $10;
      __label__ = 6;
      break;
    } else {
      var $__gmp_c_0 = 0;
      __label__ = 9;
      break;
    }
   case 6:
    var $__gmp_j_04;
    var $16 = HEAP32[$__gmp_src + ($__gmp_j_04 << 2) >> 2];
    HEAP32[$__gmp_dst + ($__gmp_j_04 << 2) >> 2] = $16;
    var $18 = $__gmp_j_04 + 1 | 0;
    if (($18 | 0) == ($__gmp_size | 0)) {
      var $__gmp_c_0 = 0;
      __label__ = 9;
      break;
    } else {
      var $__gmp_j_04 = $18;
      __label__ = 6;
      break;
    }
   case 7:
    if (($__gmp_src | 0) != ($__gmp_dst | 0) & ($__gmp_size | 0) > 1) {
      var $__gmp_j1_01 = 1;
      __label__ = 8;
      break;
    } else {
      var $__gmp_c_0 = 0;
      __label__ = 9;
      break;
    }
   case 8:
    var $__gmp_j1_01;
    var $23 = HEAP32[$__gmp_src + ($__gmp_j1_01 << 2) >> 2];
    HEAP32[$__gmp_dst + ($__gmp_j1_01 << 2) >> 2] = $23;
    var $25 = $__gmp_j1_01 + 1 | 0;
    if (($25 | 0) == ($__gmp_size | 0)) {
      var $__gmp_c_0 = 0;
      __label__ = 9;
      break;
    } else {
      var $__gmp_j1_01 = $25;
      __label__ = 8;
      break;
    }
   case 9:
    var $__gmp_c_0;
    return $__gmp_c_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_add_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_0 = $rp;
    var $_01 = $up;
    var $_02 = $vp;
    var $_03 = $n;
    var $cy_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $cy_0;
    var $_03;
    var $_02;
    var $_01;
    var $_0;
    var $2 = $_01 + 4 | 0;
    var $3 = HEAP32[$_01 >> 2];
    var $4 = $_02 + 4 | 0;
    var $5 = HEAP32[$_02 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($3, $5);
    var $6 = $uadd.f0;
    var $7 = $uadd.f1;
    var $uadd4 = _llvm_uadd_with_overflow_i32($6, $cy_0);
    var $8 = $uadd4.f0;
    var $9 = $uadd4.f1;
    var $11 = ($7 | $9) & 1;
    HEAP32[$_0 >> 2] = $8;
    var $13 = $_03 - 1 | 0;
    if (($13 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_0 + 4 | 0;
      var $_01 = $2;
      var $_02 = $4;
      var $_03 = $13;
      var $cy_0 = $11;
      __label__ = 3;
      break;
    }
   case 4:
    return $11;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_addmul_1($rp, $up, $n, $vl) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $vl & 65535;
    var $2 = $vl >>> 16;
    var $_0 = $rp;
    var $_01 = $up;
    var $_02 = $n;
    var $cl_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $cl_0;
    var $_02;
    var $_01;
    var $_0;
    var $4 = $_01 + 4 | 0;
    var $5 = HEAPU32[$_01 >> 2];
    var $6 = $5 & 65535;
    var $7 = $5 >>> 16;
    var $8 = (i64Math.multiply($6, 0, $1, 0), i64Math.result[0]);
    var $9 = (i64Math.multiply($6, 0, $2, 0), i64Math.result[0]);
    var $10 = (i64Math.multiply($7, 0, $1, 0), i64Math.result[0]);
    var $11 = (i64Math.multiply($7, 0, $2, 0), i64Math.result[0]);
    var $13 = ($8 >>> 16) + $9 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($13, $10);
    var $14 = $uadd.f0;
    var $15 = $uadd.f1;
    var $__x3_0 = $15 ? $11 + 65536 | 0 : $11;
    var $17 = $14 >>> 16;
    var $20 = $14 << 16 | $8 & 65535;
    var $uadd3 = _llvm_uadd_with_overflow_i32($20, $cl_0);
    var $21 = $uadd3.f0;
    var $22 = $uadd3.f1;
    var $23 = $22 & 1;
    var $24 = HEAP32[$_0 >> 2];
    var $uadd4 = _llvm_uadd_with_overflow_i32($24, $21);
    var $25 = $uadd4.f0;
    var $26 = $uadd4.f1;
    var $30 = $__x3_0 + $17 + $23 + ($26 & 1) | 0;
    HEAP32[$_0 >> 2] = $25;
    var $32 = $_02 - 1 | 0;
    if (($32 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_0 + 4 | 0;
      var $_01 = $4;
      var $_02 = $32;
      var $cl_0 = $30;
      __label__ = 3;
      break;
    }
   case 4:
    return $30;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_bdiv_dbm1c($qp, $ap, $n, $bd, $h) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      var $_0_lcssa = $h;
      __label__ = 5;
      break;
    }
   case 3:
    var $2 = $bd & 65535;
    var $3 = $bd >>> 16;
    var $_03 = $h;
    var $i_04 = 0;
    __label__ = 4;
    break;
   case 4:
    var $i_04;
    var $_03;
    var $6 = HEAPU32[$ap + ($i_04 << 2) >> 2];
    var $7 = $6 & 65535;
    var $8 = $6 >>> 16;
    var $9 = (i64Math.multiply($7, 0, $2, 0), i64Math.result[0]);
    var $10 = (i64Math.multiply($7, 0, $3, 0), i64Math.result[0]);
    var $11 = (i64Math.multiply($8, 0, $2, 0), i64Math.result[0]);
    var $12 = (i64Math.multiply($8, 0, $3, 0), i64Math.result[0]);
    var $14 = ($9 >>> 16) + $10 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($14, $11);
    var $15 = $uadd.f0;
    var $16 = $uadd.f1;
    var $__x3_0 = $16 ? $12 + 65536 | 0 : $12;
    var $18 = $15 >>> 16;
    var $21 = $15 << 16 | $9 & 65535;
    var $22 = $_03 >>> 0 < $21 >>> 0;
    var $23 = $_03 - $21 | 0;
    HEAP32[$qp + ($i_04 << 2) >> 2] = $23;
    var $26 = $23 - ($__x3_0 + $18) + ($22 << 31 >> 31) | 0;
    var $27 = $i_04 + 1 | 0;
    if (($27 | 0) == ($n | 0)) {
      var $_0_lcssa = $26;
      __label__ = 5;
      break;
    } else {
      var $_03 = $26;
      var $i_04 = $27;
      __label__ = 4;
      break;
    }
   case 5:
    var $_0_lcssa;
    return $_0_lcssa;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_bdiv_q($qp, $np, $nn, $dp, $dn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($dn | 0) > 179) {
      __label__ = 9;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($nn | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $5 = $nn - 1 | 0;
    var $6 = HEAP32[$np >> 2];
    if (($5 | 0) == 0) {
      var $__x_1 = $6;
      var $__dst_1 = $tp;
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $6;
      var $np_pn = $np;
      var $__n_0 = $5;
      var $__dst_0 = $tp;
      __label__ = 5;
      break;
    }
   case 5:
    var $__dst_0;
    var $__n_0;
    var $np_pn;
    var $__x_0;
    var $__src_0 = $np_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $9 = HEAP32[$__src_0 >> 2];
    var $10 = $__n_0 - 1 | 0;
    if (($10 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $__x_0 = $9;
      var $np_pn = $__src_0;
      var $__n_0 = $10;
      var $__dst_0 = $__dst_0 + 4 | 0;
      __label__ = 5;
      break;
    }
   case 6:
    var $__x_1 = $9;
    var $__dst_1 = $tp + ($5 << 2) | 0;
    __label__ = 7;
    break;
   case 7:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 8;
    break;
   case 8:
    var $14 = HEAPU32[$dp >> 2];
    var $17 = STRING_TABLE.___gmp_binvert_limb_table + ($14 >>> 1 & 127) | 0;
    var $19 = HEAPU8[$17] & 255;
    var $20 = $19 << 1;
    var $21 = (i64Math.multiply($19, 0, $14, 0), i64Math.result[0]);
    var $22 = (i64Math.multiply($21, 0, $19, 0), i64Math.result[0]);
    var $23 = $20 - $22 | 0;
    var $24 = $23 << 1;
    var $25 = (i64Math.multiply($23, 0, $14, 0), i64Math.result[0]);
    var $26 = (i64Math.multiply($25, 0, $23, 0), i64Math.result[0]);
    var $27 = $26 - $24 | 0;
    ___gmpn_sbpi1_bdiv_q($qp, $tp, $nn, $dp, $dn, $27);
    __label__ = 17;
    break;
   case 9:
    if (($dn | 0) > 1999) {
      __label__ = 16;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    if (($nn | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $33 = $nn - 1 | 0;
    var $34 = HEAPU32[$np >> 2];
    if (($33 | 0) == 0) {
      var $__x5_1 = $34;
      var $__dst3_1 = $tp;
      __label__ = 14;
      break;
    } else {
      var $__x5_0 = $34;
      var $np_pn1 = $np;
      var $__dst3_0 = $tp;
      var $__n2_0 = $33;
      __label__ = 12;
      break;
    }
   case 12:
    var $__n2_0;
    var $__dst3_0;
    var $np_pn1;
    var $__x5_0;
    var $__src4_0 = $np_pn1 + 4 | 0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $37 = HEAP32[$__src4_0 >> 2];
    var $38 = $__n2_0 - 1 | 0;
    if (($38 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__x5_0 = $37;
      var $np_pn1 = $__src4_0;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__n2_0 = $38;
      __label__ = 12;
      break;
    }
   case 13:
    var $__x5_1 = $37;
    var $__dst3_1 = $tp + ($33 << 2) | 0;
    __label__ = 14;
    break;
   case 14:
    var $__dst3_1;
    var $__x5_1;
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    __label__ = 15;
    break;
   case 15:
    var $42 = HEAPU32[$dp >> 2];
    var $45 = STRING_TABLE.___gmp_binvert_limb_table + ($42 >>> 1 & 127) | 0;
    var $47 = HEAPU8[$45] & 255;
    var $48 = $47 << 1;
    var $49 = (i64Math.multiply($47, 0, $42, 0), i64Math.result[0]);
    var $50 = (i64Math.multiply($49, 0, $47, 0), i64Math.result[0]);
    var $51 = $48 - $50 | 0;
    var $52 = $51 << 1;
    var $53 = (i64Math.multiply($51, 0, $42, 0), i64Math.result[0]);
    var $54 = (i64Math.multiply($53, 0, $51, 0), i64Math.result[0]);
    var $55 = $54 - $52 | 0;
    ___gmpn_dcpi1_bdiv_q($qp, $tp, $nn, $dp, $dn, $55);
    __label__ = 17;
    break;
   case 16:
    ___gmpn_mu_bdiv_q($qp, $np, $nn, $dp, $dn, $tp);
    __label__ = 17;
    break;
   case 17:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_bdiv_q["X"] = 1;

function ___gmpn_bdiv_q_itch($nn, $dn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($dn | 0) > 1999) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $nn;
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = ___gmpn_mu_bdiv_q_itch($nn, $dn);
    var $_0 = $3;
    __label__ = 4;
    break;
   case 4:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_pi1_bdiv_q_1($rp, $up, $n, $d, $di, $shift) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$up >> 2];
    if (($shift | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($n | 0) > 1) {
      __label__ = 4;
      break;
    } else {
      var $u_0_lcssa = $2;
      var $c_0_lcssa = 0;
      var $i_0_lcssa = 0;
      __label__ = 7;
      break;
    }
   case 4:
    var $4 = 32 - $shift | 0;
    var $5 = $d & 65535;
    var $6 = $d >>> 16;
    var $u_05 = $2;
    var $c_06 = 0;
    var $i_07 = 1;
    __label__ = 5;
    break;
   case 5:
    var $i_07;
    var $c_06;
    var $u_05;
    var $9 = HEAPU32[$up + ($i_07 << 2) >> 2];
    var $12 = $9 << $4 | $u_05 >>> ($shift >>> 0);
    var $13 = $12 - $c_06 | 0;
    var $15 = $13 >>> 0 > $12 >>> 0 & 1;
    var $16 = (i64Math.multiply($13, 0, $di, 0), i64Math.result[0]);
    HEAP32[$rp + ($i_07 - 1 << 2) >> 2] = $16;
    var $18 = $16 & 65535;
    var $19 = $16 >>> 16;
    var $20 = (i64Math.multiply($18, 0, $5, 0), i64Math.result[0]);
    var $21 = (i64Math.multiply($18, 0, $6, 0), i64Math.result[0]);
    var $22 = (i64Math.multiply($19, 0, $5, 0), i64Math.result[0]);
    var $23 = (i64Math.multiply($19, 0, $6, 0), i64Math.result[0]);
    var $25 = ($20 >>> 16) + $21 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($25, $22);
    var $26 = $uadd2.f0;
    var $27 = $uadd2.f1;
    var $__x3_0 = $27 ? $23 + 65536 | 0 : $23;
    var $31 = $15 + ($26 >>> 16) + $__x3_0 | 0;
    var $32 = $i_07 + 1 | 0;
    if (($32 | 0) == ($n | 0)) {
      __label__ = 6;
      break;
    } else {
      var $u_05 = $9;
      var $c_06 = $31;
      var $i_07 = $32;
      __label__ = 5;
      break;
    }
   case 6:
    var $u_0_lcssa = $9;
    var $c_0_lcssa = $31;
    var $i_0_lcssa = $n - 1 | 0;
    __label__ = 7;
    break;
   case 7:
    var $i_0_lcssa;
    var $c_0_lcssa;
    var $u_0_lcssa;
    var $36 = ($u_0_lcssa >>> ($shift >>> 0)) - $c_0_lcssa | 0;
    var $37 = (i64Math.multiply($36, 0, $di, 0), i64Math.result[0]);
    HEAP32[$rp + ($i_0_lcssa << 2) >> 2] = $37;
    var $c_2 = $c_0_lcssa;
    __label__ = 11;
    break;
   case 8:
    var $40 = (i64Math.multiply($2, 0, $di, 0), i64Math.result[0]);
    HEAP32[$rp >> 2] = $40;
    if (($n | 0) > 1) {
      __label__ = 9;
      break;
    } else {
      var $c_2 = 0;
      __label__ = 11;
      break;
    }
   case 9:
    var $42 = $d & 65535;
    var $43 = $d >>> 16;
    var $l_010 = $40;
    var $c_111 = 0;
    var $i_112 = 1;
    __label__ = 10;
    break;
   case 10:
    var $i_112;
    var $c_111;
    var $l_010;
    var $45 = $l_010 & 65535;
    var $46 = $l_010 >>> 16;
    var $47 = (i64Math.multiply($45, 0, $42, 0), i64Math.result[0]);
    var $48 = (i64Math.multiply($45, 0, $43, 0), i64Math.result[0]);
    var $49 = (i64Math.multiply($46, 0, $42, 0), i64Math.result[0]);
    var $50 = (i64Math.multiply($46, 0, $43, 0), i64Math.result[0]);
    var $52 = ($47 >>> 16) + $48 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($52, $49);
    var $53 = $uadd.f0;
    var $54 = $uadd.f1;
    var $__x34_0 = $54 ? $50 + 65536 | 0 : $50;
    var $58 = HEAPU32[$up + ($i_112 << 2) >> 2];
    var $59 = $58 - $c_111 - ($53 >>> 16) - $__x34_0 | 0;
    var $61 = $59 >>> 0 > $58 >>> 0 & 1;
    var $62 = (i64Math.multiply($59, 0, $di, 0), i64Math.result[0]);
    HEAP32[$rp + ($i_112 << 2) >> 2] = $62;
    var $64 = $i_112 + 1 | 0;
    if (($64 | 0) == ($n | 0)) {
      var $c_2 = $61;
      __label__ = 11;
      break;
    } else {
      var $l_010 = $62;
      var $c_111 = $61;
      var $i_112 = $64;
      __label__ = 10;
      break;
    }
   case 11:
    var $c_2;
    return $c_2;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_pi1_bdiv_q_1["X"] = 1;

function ___gmpn_bdiv_q_1($rp, $up, $n, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($d & 1 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $shift_0 = 0;
      var $_0 = $d;
      __label__ = 7;
      break;
    }
   case 3:
    var $5 = $d & -$d;
    if ($5 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $9 = $5 >>> 0 < 256 ? 1 : 9;
    var $14 = $9;
    __label__ = 6;
    break;
   case 5:
    var $12 = $5 >>> 0 < 16777216 ? 17 : 25;
    var $14 = $12;
    __label__ = 6;
    break;
   case 6:
    var $14;
    var $16 = STRING_TABLE.___gmpn_clz_tab + ($5 >>> ($14 >>> 0)) | 0;
    var $20 = $14 - 2 + (HEAPU8[$16] & 255) | 0;
    var $shift_0 = $20;
    var $_0 = $d >>> ($20 >>> 0);
    __label__ = 7;
    break;
   case 7:
    var $_0;
    var $shift_0;
    var $25 = STRING_TABLE.___gmp_binvert_limb_table + ($_0 >>> 1 & 127) | 0;
    var $27 = HEAPU8[$25] & 255;
    var $28 = $27 << 1;
    var $29 = (i64Math.multiply($27, 0, $_0, 0), i64Math.result[0]);
    var $30 = (i64Math.multiply($29, 0, $27, 0), i64Math.result[0]);
    var $31 = $28 - $30 | 0;
    var $32 = $31 << 1;
    var $33 = (i64Math.multiply($31, 0, $_0, 0), i64Math.result[0]);
    var $34 = (i64Math.multiply($33, 0, $31, 0), i64Math.result[0]);
    var $35 = $32 - $34 | 0;
    var $36 = ___gmpn_pi1_bdiv_q_1($rp, $up, $n, $_0, $35, $shift_0);
    return $36;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_bdiv_qr($qp, $rp, $np, $nn, $dp, $dn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($dn | 0) > 49) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = $nn - $dn | 0;
    if (($3 | 0) > 49) {
      __label__ = 15;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($nn | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $8 = $nn - 1 | 0;
    var $9 = HEAP32[$np >> 2];
    if (($8 | 0) == 0) {
      var $__dst_1 = $tp;
      var $__x_1 = $9;
      __label__ = 8;
      break;
    } else {
      var $__n_0 = $8;
      var $__dst_0 = $tp;
      var $np_pn = $np;
      var $__x_0 = $9;
      __label__ = 6;
      break;
    }
   case 6:
    var $__x_0;
    var $np_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $np_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $12 = HEAP32[$__src_0 >> 2];
    var $13 = $__n_0 - 1 | 0;
    if (($13 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__n_0 = $13;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $np_pn = $__src_0;
      var $__x_0 = $12;
      __label__ = 6;
      break;
    }
   case 7:
    var $__dst_1 = $tp + ($8 << 2) | 0;
    var $__x_1 = $12;
    __label__ = 8;
    break;
   case 8:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    var $17 = HEAPU32[$dp >> 2];
    var $20 = STRING_TABLE.___gmp_binvert_limb_table + ($17 >>> 1 & 127) | 0;
    var $22 = HEAPU8[$20] & 255;
    var $23 = $22 << 1;
    var $24 = (i64Math.multiply($22, 0, $17, 0), i64Math.result[0]);
    var $25 = (i64Math.multiply($24, 0, $22, 0), i64Math.result[0]);
    var $26 = $23 - $25 | 0;
    var $27 = $26 << 1;
    var $28 = (i64Math.multiply($26, 0, $17, 0), i64Math.result[0]);
    var $29 = (i64Math.multiply($28, 0, $26, 0), i64Math.result[0]);
    var $30 = $29 - $27 | 0;
    var $31 = ___gmpn_sbpi1_bdiv_qr($qp, $tp, $nn, $dp, $dn, $30);
    if (($dn | 0) == 0) {
      var $rh_0 = $31;
      __label__ = 28;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $34 = $dn - 1 | 0;
    var $_sum = $nn - $dn | 0;
    var $36 = HEAPU32[$tp + ($_sum << 2) >> 2];
    if (($34 | 0) == 0) {
      var $__x5_1 = $36;
      var $__dst3_1 = $rp;
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $__x5_0 = $36;
    var $__n2_0 = $34;
    var $__dst3_0 = $rp;
    var $__src4_0 = $tp + ($_sum + 1 << 2) | 0;
    __label__ = 12;
    break;
   case 12:
    var $__src4_0;
    var $__dst3_0;
    var $__n2_0;
    var $__x5_0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $42 = HEAP32[$__src4_0 >> 2];
    var $43 = $__n2_0 - 1 | 0;
    if (($43 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__x5_0 = $42;
      var $__n2_0 = $43;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__src4_0 = $__src4_0 + 4 | 0;
      __label__ = 12;
      break;
    }
   case 13:
    var $__x5_1 = $42;
    var $__dst3_1 = $rp + ($34 << 2) | 0;
    __label__ = 14;
    break;
   case 14:
    var $__dst3_1;
    var $__x5_1;
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    var $rh_0 = $31;
    __label__ = 28;
    break;
   case 15:
    if (($dn | 0) > 1999) {
      __label__ = 27;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if (($nn | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $51 = $nn - 1 | 0;
    var $52 = HEAP32[$np >> 2];
    if (($51 | 0) == 0) {
      var $__x9_1 = $52;
      var $__dst7_1 = $tp;
      __label__ = 20;
      break;
    } else {
      var $__x9_0 = $52;
      var $np_pn4 = $np;
      var $__dst7_0 = $tp;
      var $__n6_0 = $51;
      __label__ = 18;
      break;
    }
   case 18:
    var $__n6_0;
    var $__dst7_0;
    var $np_pn4;
    var $__x9_0;
    var $__src8_0 = $np_pn4 + 4 | 0;
    HEAP32[$__dst7_0 >> 2] = $__x9_0;
    var $55 = HEAP32[$__src8_0 >> 2];
    var $56 = $__n6_0 - 1 | 0;
    if (($56 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__x9_0 = $55;
      var $np_pn4 = $__src8_0;
      var $__dst7_0 = $__dst7_0 + 4 | 0;
      var $__n6_0 = $56;
      __label__ = 18;
      break;
    }
   case 19:
    var $__x9_1 = $55;
    var $__dst7_1 = $tp + ($51 << 2) | 0;
    __label__ = 20;
    break;
   case 20:
    var $__dst7_1;
    var $__x9_1;
    HEAP32[$__dst7_1 >> 2] = $__x9_1;
    __label__ = 21;
    break;
   case 21:
    var $60 = HEAPU32[$dp >> 2];
    var $63 = STRING_TABLE.___gmp_binvert_limb_table + ($60 >>> 1 & 127) | 0;
    var $65 = HEAPU8[$63] & 255;
    var $66 = $65 << 1;
    var $67 = (i64Math.multiply($65, 0, $60, 0), i64Math.result[0]);
    var $68 = (i64Math.multiply($67, 0, $65, 0), i64Math.result[0]);
    var $69 = $66 - $68 | 0;
    var $70 = $69 << 1;
    var $71 = (i64Math.multiply($69, 0, $60, 0), i64Math.result[0]);
    var $72 = (i64Math.multiply($71, 0, $69, 0), i64Math.result[0]);
    var $73 = $72 - $70 | 0;
    var $74 = ___gmpn_dcpi1_bdiv_qr($qp, $tp, $nn, $dp, $dn, $73);
    if (($dn | 0) == 0) {
      var $rh_0 = $74;
      __label__ = 28;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $77 = $dn - 1 | 0;
    var $79 = HEAPU32[$tp + ($3 << 2) >> 2];
    if (($77 | 0) == 0) {
      var $__x15_1 = $79;
      var $__dst13_1 = $rp;
      __label__ = 26;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $__x15_0 = $79;
    var $__src14_0 = $tp + ($3 + 1 << 2) | 0;
    var $__dst13_0 = $rp;
    var $__n12_0 = $77;
    __label__ = 24;
    break;
   case 24:
    var $__n12_0;
    var $__dst13_0;
    var $__src14_0;
    var $__x15_0;
    HEAP32[$__dst13_0 >> 2] = $__x15_0;
    var $85 = HEAP32[$__src14_0 >> 2];
    var $86 = $__n12_0 - 1 | 0;
    if (($86 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      var $__x15_0 = $85;
      var $__src14_0 = $__src14_0 + 4 | 0;
      var $__dst13_0 = $__dst13_0 + 4 | 0;
      var $__n12_0 = $86;
      __label__ = 24;
      break;
    }
   case 25:
    var $__x15_1 = $85;
    var $__dst13_1 = $rp + ($77 << 2) | 0;
    __label__ = 26;
    break;
   case 26:
    var $__dst13_1;
    var $__x15_1;
    HEAP32[$__dst13_1 >> 2] = $__x15_1;
    var $rh_0 = $74;
    __label__ = 28;
    break;
   case 27:
    var $90 = ___gmpn_mu_bdiv_qr($qp, $rp, $np, $nn, $dp, $dn, $tp);
    var $rh_0 = $90;
    __label__ = 28;
    break;
   case 28:
    var $rh_0;
    return $rh_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_bdiv_qr["X"] = 1;

function ___gmpn_bdiv_qr_itch($nn, $dn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($dn | 0) > 1999) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $nn;
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = ___gmpn_mu_bdiv_qr_itch($nn, $dn);
    var $_0 = $3;
    __label__ = 4;
    break;
   case 4:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_binvert_itch($n) {
  var $1 = ___gmpn_mulmod_bnm1_next_size($n);
  var $3 = $n + 1 >> 1;
  var $4 = _mpn_mulmod_bnm1_itch($1, $n, $3);
  return $4 + $1 | 0;
}

function ___gmpn_binvert($rp, $up, $n, $scratch) {
  var __stackBase__ = STACKTOP;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $scratch10 = $scratch;
    var $sizes = STACKTOP;
    STACKTOP += 92;
    var $1 = $sizes | 0;
    if (($n | 0) > 299) {
      var $rn_04 = $n;
      var $sizp_05 = $1;
      __label__ = 3;
      break;
    } else {
      var $rn_0_lcssa = $n;
      var $sizp_0_lcssa = $1;
      __label__ = 4;
      break;
    }
   case 3:
    var $sizp_05;
    var $rn_04;
    var $3 = $sizp_05 + 4 | 0;
    HEAP32[$sizp_05 >> 2] = $rn_04;
    var $5 = $rn_04 + 1 >> 1;
    if (($5 | 0) > 299) {
      var $rn_04 = $5;
      var $sizp_05 = $3;
      __label__ = 3;
      break;
    } else {
      var $rn_0_lcssa = $5;
      var $sizp_0_lcssa = $3;
      __label__ = 4;
      break;
    }
   case 4:
    var $sizp_0_lcssa;
    var $rn_0_lcssa;
    if (($rn_0_lcssa | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    _memset($scratch10, 0, $rn_0_lcssa << 2, 4);
    __label__ = 6;
    break;
   case 6:
    HEAP32[$scratch >> 2] = 1;
    var $10 = HEAPU32[$up >> 2];
    var $13 = STRING_TABLE.___gmp_binvert_limb_table + ($10 >>> 1 & 127) | 0;
    var $15 = HEAPU8[$13] & 255;
    var $16 = $15 << 1;
    var $17 = (i64Math.multiply($15, 0, $10, 0), i64Math.result[0]);
    var $18 = (i64Math.multiply($17, 0, $15, 0), i64Math.result[0]);
    var $19 = $16 - $18 | 0;
    var $20 = $19 << 1;
    var $21 = (i64Math.multiply($19, 0, $10, 0), i64Math.result[0]);
    var $22 = (i64Math.multiply($21, 0, $19, 0), i64Math.result[0]);
    var $24 = $22 - $20 | 0;
    if (($rn_0_lcssa | 0) > 179) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    ___gmpn_sbpi1_bdiv_q($rp, $scratch, $rn_0_lcssa, $up, $rn_0_lcssa, $24);
    __label__ = 9;
    break;
   case 8:
    ___gmpn_dcpi1_bdiv_q($rp, $scratch, $rn_0_lcssa, $up, $rn_0_lcssa, $24);
    __label__ = 9;
    break;
   case 9:
    if (($rn_0_lcssa | 0) < ($n | 0)) {
      var $rn_12 = $rn_0_lcssa;
      var $sizp_13 = $sizp_0_lcssa;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $sizp_13;
    var $rn_12;
    var $28 = $sizp_13 - 4 | 0;
    var $29 = HEAP32[$28 >> 2];
    var $30 = ___gmpn_mulmod_bnm1_next_size($29);
    var $31 = $scratch + ($30 << 2) | 0;
    ___gmpn_mulmod_bnm1($scratch, $30, $up, $29, $rp, $rn_12, $31);
    var $33 = $29 + $rn_12 - $30 | 0;
    var $34 = ___gmpn_sub_1($31, $scratch, $33, 1);
    var $35 = $rp + ($rn_12 << 2) | 0;
    var $36 = $scratch + ($rn_12 << 2) | 0;
    var $37 = $29 - $rn_12 | 0;
    ___gmpn_mullo_n($35, $rp, $36, $37);
    var $38 = ___gmpn_neg($35, $35, $37);
    if (($29 | 0) < ($n | 0)) {
      var $rn_12 = $29;
      var $sizp_13 = $28;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_binvert["X"] = 1;

function ___gmpn_dcpi1_bdiv_q_n($qp, $np, $dp, $n, $dinv, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 179) {
      var $_025 = $n;
      var $_016 = $np;
      var $_07 = $qp;
      __label__ = 3;
      break;
    } else {
      var $_02_lcssa = $n;
      var $_01_lcssa = $np;
      var $_0_lcssa = $qp;
      __label__ = 6;
      break;
    }
   case 3:
    var $_07;
    var $_016;
    var $_025;
    var $2 = $_025 >> 1;
    var $3 = $_025 - $2 | 0;
    var $4 = ___gmpn_dcpi1_bdiv_qr_n($_07, $_016, $dp, $2, $dinv, $tp);
    var $5 = $dp + ($3 << 2) | 0;
    ___gmpn_mullo_n($tp, $_07, $5, $2);
    var $6 = $_016 + ($3 << 2) | 0;
    var $7 = ___gmpn_sub_n($6, $6, $tp, $2);
    var $9 = $_016 + ($2 << 2) | 0;
    if (($2 | 0) < ($3 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $12 = HEAP32[$dp + ($2 << 2) >> 2];
    var $13 = ___gmpn_submul_1($9, $_07, $2, $12);
    var $15 = $_016 + ($_025 - 1 << 2) | 0;
    var $17 = HEAP32[$15 >> 2] - ($13 + $4) | 0;
    HEAP32[$15 >> 2] = $17;
    __label__ = 5;
    break;
   case 5:
    var $18 = $_07 + ($2 << 2) | 0;
    if (($3 | 0) > 179) {
      var $_025 = $3;
      var $_016 = $9;
      var $_07 = $18;
      __label__ = 3;
      break;
    } else {
      var $_02_lcssa = $3;
      var $_01_lcssa = $9;
      var $_0_lcssa = $18;
      __label__ = 6;
      break;
    }
   case 6:
    var $_0_lcssa;
    var $_01_lcssa;
    var $_02_lcssa;
    ___gmpn_sbpi1_bdiv_q($_0_lcssa, $_01_lcssa, $_02_lcssa, $dp, $_02_lcssa, $dinv);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_dcpi1_bdiv_qr_n_itch($n) {
  return $n;
}

function ___gmpn_dcpi1_bdiv_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = STACKTOP;
    STACKTOP += $dn << 2;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $3 = $2;
    if (($nn | 0) > ($dn | 0)) {
      var $qn_0 = $nn;
      __label__ = 3;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 3:
    var $qn_0;
    var $5 = $qn_0 - $dn | 0;
    if (($5 | 0) > ($dn | 0)) {
      var $qn_0 = $5;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($5 | 0) > 49) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $10 = $5 << 1;
    var $11 = ___gmpn_sbpi1_bdiv_qr($qp, $np, $10, $dp, $5, $dinv);
    var $cy_0 = $11;
    __label__ = 7;
    break;
   case 6:
    var $13 = ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $5, $dinv, $3);
    var $cy_0 = $13;
    __label__ = 7;
    break;
   case 7:
    var $cy_0;
    if (($5 | 0) == ($dn | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $cy_1 = $cy_0;
    var $_pre_phi = $np + ($5 << 2) | 0;
    var $_pre_phi3 = $nn - $5 | 0;
    __label__ = 15;
    break;
   case 9:
    var $17 = $dn - $5 | 0;
    var $19 = $dp + ($5 << 2) | 0;
    if (($5 | 0) > ($17 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $21 = ___gmpn_mul($3, $qp, $5, $19, $17);
    __label__ = 12;
    break;
   case 11:
    var $23 = ___gmpn_mul($3, $19, $17, $qp, $5);
    __label__ = 12;
    break;
   case 12:
    var $25 = $3 + ($5 << 2) | 0;
    var $26 = HEAP32[$25 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($26, $cy_0);
    var $27 = $uadd.f0;
    HEAP32[$25 >> 2] = $27;
    var $28 = $uadd.f1;
    if ($28) {
      var $__p_0 = $25;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $__p_0;
    var $29 = $__p_0 + 4 | 0;
    var $31 = HEAP32[$29 >> 2] + 1 | 0;
    HEAP32[$29 >> 2] = $31;
    if (($31 | 0) == 0) {
      var $__p_0 = $29;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $33 = $np + ($5 << 2) | 0;
    var $34 = $nn - $5 | 0;
    var $35 = ___gmpn_sub($33, $33, $34, $3, $dn);
    var $cy_1 = 0;
    var $_pre_phi = $33;
    var $_pre_phi3 = $34;
    __label__ = 15;
    break;
   case 15:
    var $_pre_phi3;
    var $_pre_phi;
    var $cy_1;
    var $37 = $qp + ($5 << 2) | 0;
    if (($_pre_phi3 | 0) > ($dn | 0)) {
      var $qn_12 = $_pre_phi3;
      var $cy_23 = $cy_1;
      var $_014 = $_pre_phi;
      var $_05 = $37;
      __label__ = 16;
      break;
    } else {
      var $_01_lcssa = $_pre_phi;
      var $_0_lcssa = $37;
      __label__ = 17;
      break;
    }
   case 16:
    var $_05;
    var $_014;
    var $cy_23;
    var $qn_12;
    var $39 = $_014 + ($dn << 2) | 0;
    var $40 = ___gmpn_sub_1($39, $39, $qn_12, $cy_23);
    var $41 = ___gmpn_dcpi1_bdiv_qr_n($_05, $_014, $dp, $dn, $dinv, $3);
    var $42 = $_05 + ($dn << 2) | 0;
    var $43 = $qn_12 - $dn | 0;
    if (($43 | 0) > ($dn | 0)) {
      var $qn_12 = $43;
      var $cy_23 = $41;
      var $_014 = $39;
      var $_05 = $42;
      __label__ = 16;
      break;
    } else {
      var $_01_lcssa = $39;
      var $_0_lcssa = $42;
      __label__ = 17;
      break;
    }
   case 17:
    var $_0_lcssa;
    var $_01_lcssa;
    ___gmpn_dcpi1_bdiv_q_n($_0_lcssa, $_01_lcssa, $dp, $dn, $dinv, $3);
    __label__ = 21;
    break;
   case 18:
    if (($nn | 0) > 179) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    ___gmpn_sbpi1_bdiv_q($qp, $np, $nn, $dp, $nn, $dinv);
    __label__ = 21;
    break;
   case 20:
    ___gmpn_dcpi1_bdiv_q_n($qp, $np, $dp, $nn, $dinv, $3);
    __label__ = 21;
    break;
   case 21:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dcpi1_bdiv_q["X"] = 1;

function ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $n, $dinv, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $n >> 1;
    var $2 = $n - $1 | 0;
    if (($1 | 0) > 49) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = $n & -2;
    var $6 = ___gmpn_sbpi1_bdiv_qr($qp, $np, $5, $dp, $1, $dinv);
    var $cy_0 = $6;
    __label__ = 5;
    break;
   case 4:
    var $8 = ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $1, $dinv, $tp);
    var $cy_0 = $8;
    __label__ = 5;
    break;
   case 5:
    var $cy_0;
    var $10 = $dp + ($1 << 2) | 0;
    var $11 = ___gmpn_mul($tp, $10, $2, $qp, $1);
    var $12 = $tp + ($1 << 2) | 0;
    var $13 = HEAP32[$12 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($13, $cy_0);
    var $14 = $uadd.f0;
    HEAP32[$12 >> 2] = $14;
    var $15 = $uadd.f1;
    if ($15) {
      var $__p_0 = $12;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $__p_0;
    var $16 = $__p_0 + 4 | 0;
    var $18 = HEAP32[$16 >> 2] + 1 | 0;
    HEAP32[$16 >> 2] = $18;
    if (($18 | 0) == 0) {
      var $__p_0 = $16;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $20 = $np + ($1 << 2) | 0;
    var $21 = $2 + $n | 0;
    var $22 = ___gmpn_sub($20, $20, $21, $tp, $n);
    var $24 = $qp + ($1 << 2) | 0;
    if (($2 | 0) > 49) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $26 = $2 << 1;
    var $27 = ___gmpn_sbpi1_bdiv_qr($24, $20, $26, $dp, $2, $dinv);
    var $cy_1 = $27;
    __label__ = 10;
    break;
   case 9:
    var $29 = ___gmpn_dcpi1_bdiv_qr_n($24, $20, $dp, $2, $dinv, $tp);
    var $cy_1 = $29;
    __label__ = 10;
    break;
   case 10:
    var $cy_1;
    var $31 = $dp + ($2 << 2) | 0;
    var $32 = ___gmpn_mul($tp, $24, $2, $31, $1);
    var $33 = $tp + ($2 << 2) | 0;
    var $34 = HEAP32[$33 >> 2];
    var $uadd1 = _llvm_uadd_with_overflow_i32($34, $cy_1);
    var $35 = $uadd1.f0;
    HEAP32[$33 >> 2] = $35;
    var $36 = $uadd1.f1;
    if ($36) {
      var $__p2_0 = $33;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $__p2_0;
    var $37 = $__p2_0 + 4 | 0;
    var $39 = HEAP32[$37 >> 2] + 1 | 0;
    HEAP32[$37 >> 2] = $39;
    if (($39 | 0) == 0) {
      var $__p2_0 = $37;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $41 = $np + ($n << 2) | 0;
    var $42 = ___gmpn_sub_n($41, $41, $tp, $n);
    return $42 + $22 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dcpi1_bdiv_qr_n["X"] = 1;

function ___gmpn_dcpi1_bdiv_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = STACKTOP;
    STACKTOP += $dn << 2;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $3 = $2;
    var $4 = $nn - $dn | 0;
    if (($4 | 0) > ($dn | 0)) {
      var $qn_0 = $4;
      __label__ = 3;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 3:
    var $qn_0;
    var $6 = $qn_0 - $dn | 0;
    if (($6 | 0) > ($dn | 0)) {
      var $qn_0 = $6;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($6 | 0) > 49) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $11 = $6 << 1;
    var $12 = ___gmpn_sbpi1_bdiv_qr($qp, $np, $11, $dp, $6, $dinv);
    var $cy_0 = $12;
    __label__ = 7;
    break;
   case 6:
    var $14 = ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $6, $dinv, $3);
    var $cy_0 = $14;
    __label__ = 7;
    break;
   case 7:
    var $cy_0;
    if (($6 | 0) == ($dn | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $cy_1 = $cy_0;
    var $rr_0 = 0;
    var $_pre_phi = $np + ($6 << 2) | 0;
    __label__ = 15;
    break;
   case 9:
    var $18 = $dn - $6 | 0;
    var $20 = $dp + ($6 << 2) | 0;
    if (($6 | 0) > ($18 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $22 = ___gmpn_mul($3, $qp, $6, $20, $18);
    __label__ = 12;
    break;
   case 11:
    var $24 = ___gmpn_mul($3, $20, $18, $qp, $6);
    __label__ = 12;
    break;
   case 12:
    var $26 = $3 + ($6 << 2) | 0;
    var $27 = HEAP32[$26 >> 2];
    var $uadd3 = _llvm_uadd_with_overflow_i32($27, $cy_0);
    var $28 = $uadd3.f0;
    HEAP32[$26 >> 2] = $28;
    var $29 = $uadd3.f1;
    if ($29) {
      var $__p_0 = $26;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $__p_0;
    var $30 = $__p_0 + 4 | 0;
    var $32 = HEAP32[$30 >> 2] + 1 | 0;
    HEAP32[$30 >> 2] = $32;
    if (($32 | 0) == 0) {
      var $__p_0 = $30;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $34 = $np + ($6 << 2) | 0;
    var $35 = $nn - $6 | 0;
    var $36 = ___gmpn_sub($34, $34, $35, $3, $dn);
    var $cy_1 = 0;
    var $rr_0 = $36;
    var $_pre_phi = $34;
    __label__ = 15;
    break;
   case 15:
    var $_pre_phi;
    var $rr_0;
    var $cy_1;
    var $_01 = $qp + ($6 << 2) | 0;
    var $_02 = $_pre_phi;
    var $cy_2 = $cy_1;
    var $rr_1 = $rr_0;
    var $qn_1 = $4 - $6 | 0;
    __label__ = 16;
    break;
   case 16:
    var $qn_1;
    var $rr_1;
    var $cy_2;
    var $_02;
    var $_01;
    var $41 = $_02 + ($dn << 2) | 0;
    var $42 = ___gmpn_sub_1($41, $41, $qn_1, $cy_2);
    var $43 = $42 + $rr_1 | 0;
    var $44 = ___gmpn_dcpi1_bdiv_qr_n($_01, $_02, $dp, $dn, $dinv, $3);
    var $46 = $qn_1 - $dn | 0;
    if (($46 | 0) > 0) {
      var $_01 = $_01 + ($dn << 2) | 0;
      var $_02 = $41;
      var $cy_2 = $44;
      var $rr_1 = $43;
      var $qn_1 = $46;
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $_0 = $43 + $44 | 0;
    __label__ = 29;
    break;
   case 18:
    if (($4 | 0) > 49) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $53 = $4 << 1;
    var $54 = ___gmpn_sbpi1_bdiv_qr($qp, $np, $53, $dp, $4, $dinv);
    var $cy_3 = $54;
    __label__ = 21;
    break;
   case 20:
    var $56 = ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $4, $dinv, $3);
    var $cy_3 = $56;
    __label__ = 21;
    break;
   case 21:
    var $cy_3;
    if (($4 | 0) == ($dn | 0)) {
      var $cy_4 = $cy_3;
      var $rr_2 = 0;
      __label__ = 28;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $60 = $dn - $4 | 0;
    var $62 = $dp + ($4 << 2) | 0;
    if (($4 | 0) > ($60 | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $64 = ___gmpn_mul($3, $qp, $4, $62, $60);
    __label__ = 25;
    break;
   case 24:
    var $66 = ___gmpn_mul($3, $62, $60, $qp, $4);
    __label__ = 25;
    break;
   case 25:
    var $68 = $3 + ($4 << 2) | 0;
    var $69 = HEAP32[$68 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($69, $cy_3);
    var $70 = $uadd.f0;
    HEAP32[$68 >> 2] = $70;
    var $71 = $uadd.f1;
    if ($71) {
      var $__p2_0 = $68;
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $__p2_0;
    var $72 = $__p2_0 + 4 | 0;
    var $74 = HEAP32[$72 >> 2] + 1 | 0;
    HEAP32[$72 >> 2] = $74;
    if (($74 | 0) == 0) {
      var $__p2_0 = $72;
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $76 = $np + ($4 << 2) | 0;
    var $77 = ___gmpn_sub($76, $76, $dn, $3, $dn);
    var $cy_4 = 0;
    var $rr_2 = $77;
    __label__ = 28;
    break;
   case 28:
    var $rr_2;
    var $cy_4;
    var $_0 = $cy_4 + $rr_2 | 0;
    __label__ = 29;
    break;
   case 29:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dcpi1_bdiv_qr["X"] = 1;

function ___gmpn_dcpi1_div_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn + 1 | 0;
    var $3 = STACKTOP;
    STACKTOP += $1 << 2;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $4 = $3;
    if (($nn | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $7 = $nn - 1 | 0;
    var $9 = $3 + 4 | 0;
    var $10 = HEAP32[$np >> 2];
    if (($7 | 0) == 0) {
      var $__x_1 = $10;
      var $__dst_1 = $9;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $scevgep = $3 + ($nn << 2) | 0;
    var $__x_0 = $10;
    var $np_pn = $np;
    var $__n_0 = $7;
    var $__dst_0 = $9;
    __label__ = 5;
    break;
   case 5:
    var $__dst_0;
    var $__n_0;
    var $np_pn;
    var $__x_0;
    var $__src_0 = $np_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $15 = HEAP32[$__src_0 >> 2];
    var $16 = $__n_0 - 1 | 0;
    if (($16 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $__x_0 = $15;
      var $np_pn = $__src_0;
      var $__n_0 = $16;
      var $__dst_0 = $__dst_0 + 4 | 0;
      __label__ = 5;
      break;
    }
   case 6:
    var $__x_1 = $15;
    var $__dst_1 = $scevgep;
    __label__ = 7;
    break;
   case 7:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 8;
    break;
   case 8:
    HEAP32[$4 >> 2] = 0;
    var $20 = $nn - $dn | 0;
    var $23 = STACKTOP;
    STACKTOP += ($20 << 2) + 4 | 0;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $24 = $23;
    var $25 = ___gmpn_dcpi1_divappr_q($24, $4, $1, $dp, $dn, $dinv);
    if ((HEAP32[$24 >> 2] | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 9:
    var $31 = $23 + 4 | 0;
    if (($20 | 0) > ($dn | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $33 = ___gmpn_mul($4, $31, $20, $dp, $dn);
    __label__ = 12;
    break;
   case 11:
    var $35 = ___gmpn_mul($4, $dp, $dn, $31, $20);
    __label__ = 12;
    break;
   case 12:
    if (($25 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $39 = $4 + ($20 << 2) | 0;
    var $40 = ___gmpn_add_n($39, $39, $dp, $dn);
    if (($40 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $41 = ___gmpn_cmp($4, $np, $nn);
    if (($41 | 0) > 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $44 = ___gmpn_sub_1($qp, $31, $20, 1);
    var $qh_0 = $25 - $44 | 0;
    __label__ = 28;
    break;
   case 16:
    if (($nn | 0) == ($dn | 0)) {
      var $qh_0 = $25;
      __label__ = 28;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $49 = $20 - 1 | 0;
    var $50 = HEAP32[$31 >> 2];
    if (($49 | 0) == 0) {
      var $__x4_1 = $50;
      var $__dst2_1 = $qp;
      __label__ = 21;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $55 = $nn - 1 - $dn | 0;
    var $__x4_0 = $50;
    var $__src3_0 = $23 + 8 | 0;
    var $__dst2_0 = $qp;
    var $__n1_0 = $49;
    __label__ = 19;
    break;
   case 19:
    var $__n1_0;
    var $__dst2_0;
    var $__src3_0;
    var $__x4_0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $59 = HEAP32[$__src3_0 >> 2];
    var $60 = $__n1_0 - 1 | 0;
    if (($60 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $__x4_0 = $59;
      var $__src3_0 = $__src3_0 + 4 | 0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $60;
      __label__ = 19;
      break;
    }
   case 20:
    var $__x4_1 = $59;
    var $__dst2_1 = $qp + ($55 << 2) | 0;
    __label__ = 21;
    break;
   case 21:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $qh_0 = $25;
    __label__ = 28;
    break;
   case 22:
    if (($nn | 0) == ($dn | 0)) {
      var $qh_0 = $25;
      __label__ = 28;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $66 = $20 - 1 | 0;
    var $69 = HEAP32[$23 + 4 >> 2];
    if (($66 | 0) == 0) {
      var $__x8_1 = $69;
      var $__dst6_1 = $qp;
      __label__ = 27;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $74 = $nn - 1 - $dn | 0;
    var $__x8_0 = $69;
    var $__src7_0 = $23 + 8 | 0;
    var $__dst6_0 = $qp;
    var $__n5_0 = $66;
    __label__ = 25;
    break;
   case 25:
    var $__n5_0;
    var $__dst6_0;
    var $__src7_0;
    var $__x8_0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $78 = HEAP32[$__src7_0 >> 2];
    var $79 = $__n5_0 - 1 | 0;
    if (($79 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $__x8_0 = $78;
      var $__src7_0 = $__src7_0 + 4 | 0;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $__n5_0 = $79;
      __label__ = 25;
      break;
    }
   case 26:
    var $__x8_1 = $78;
    var $__dst6_1 = $qp + ($74 << 2) | 0;
    __label__ = 27;
    break;
   case 27:
    var $__dst6_1;
    var $__x8_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    var $qh_0 = $25;
    __label__ = 28;
    break;
   case 28:
    var $qh_0;
    return $qh_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dcpi1_div_q["X"] = 1;

function ___gmpn_dcpi1_div_qr_n($qp, $np, $dp, $n, $dinv, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $n >> 1;
    var $2 = $n - $1 | 0;
    var $4 = $qp + ($1 << 2) | 0;
    var $5 = $n & -2;
    var $6 = $np + ($5 << 2) | 0;
    if (($2 | 0) > 49) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $8 = $2 << 1;
    var $9 = $dp + ($1 << 2) | 0;
    var $11 = HEAP32[$dinv >> 2];
    var $12 = ___gmpn_sbpi1_div_qr($4, $6, $8, $9, $2, $11);
    var $qh_0 = $12;
    __label__ = 5;
    break;
   case 4:
    var $14 = $dp + ($1 << 2) | 0;
    var $15 = ___gmpn_dcpi1_div_qr_n($4, $6, $14, $2, $dinv, $tp);
    var $qh_0 = $15;
    __label__ = 5;
    break;
   case 5:
    var $qh_0;
    var $17 = ___gmpn_mul($tp, $4, $2, $dp, $1);
    var $18 = $np + ($1 << 2) | 0;
    var $19 = ___gmpn_sub_n($18, $18, $tp, $n);
    if (($qh_0 | 0) == 0) {
      var $qh_1_ph = 0;
      var $cy_0_ph = $19;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $22 = $np + ($n << 2) | 0;
    var $23 = ___gmpn_sub_n($22, $22, $dp, $1);
    var $qh_1_ph = $qh_0;
    var $cy_0_ph = $23 + $19 | 0;
    __label__ = 7;
    break;
   case 7:
    var $cy_0_ph;
    var $qh_1_ph;
    if (($cy_0_ph | 0) == 0) {
      var $qh_1_lcssa = $qh_1_ph;
      __label__ = 9;
      break;
    } else {
      var $cy_03 = $cy_0_ph;
      var $qh_14 = $qh_1_ph;
      __label__ = 8;
      break;
    }
   case 8:
    var $qh_14;
    var $cy_03;
    var $26 = ___gmpn_sub_1($4, $4, $2, 1);
    var $27 = $qh_14 - $26 | 0;
    var $28 = ___gmpn_add_n($18, $18, $dp, $n);
    var $29 = $cy_03 - $28 | 0;
    if (($cy_03 | 0) == ($28 | 0)) {
      var $qh_1_lcssa = $27;
      __label__ = 9;
      break;
    } else {
      var $cy_03 = $29;
      var $qh_14 = $27;
      __label__ = 8;
      break;
    }
   case 9:
    var $qh_1_lcssa;
    var $32 = $np + ($2 << 2) | 0;
    var $33 = $dp + ($2 << 2) | 0;
    if (($1 | 0) > 49) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $36 = HEAP32[$dinv >> 2];
    var $37 = ___gmpn_sbpi1_div_qr($qp, $32, $5, $33, $1, $36);
    var $ql_0 = $37;
    __label__ = 12;
    break;
   case 11:
    var $39 = ___gmpn_dcpi1_div_qr_n($qp, $32, $33, $1, $dinv, $tp);
    var $ql_0 = $39;
    __label__ = 12;
    break;
   case 12:
    var $ql_0;
    var $41 = ___gmpn_mul($tp, $dp, $2, $qp, $1);
    var $42 = ___gmpn_sub_n($np, $np, $tp, $n);
    if (($ql_0 | 0) == 0) {
      var $cy_1_ph = $42;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $45 = ___gmpn_sub_n($18, $18, $dp, $2);
    var $cy_1_ph = $45 + $42 | 0;
    __label__ = 14;
    break;
   case 14:
    var $cy_1_ph;
    if (($cy_1_ph | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $cy_11 = $cy_1_ph;
      __label__ = 15;
      break;
    }
   case 15:
    var $cy_11;
    var $48 = ___gmpn_sub_1($qp, $qp, $1, 1);
    var $49 = ___gmpn_add_n($np, $np, $dp, $n);
    var $50 = $cy_11 - $49 | 0;
    if (($cy_11 | 0) == ($49 | 0)) {
      __label__ = 16;
      break;
    } else {
      var $cy_11 = $50;
      __label__ = 15;
      break;
    }
   case 16:
    return $qh_1_lcssa;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dcpi1_div_qr_n["X"] = 1;

function ___gmpn_dcpi1_div_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = STACKTOP;
    STACKTOP += $dn << 2;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $3 = $2;
    var $4 = $nn - $dn | 0;
    if (($4 | 0) > ($dn | 0)) {
      var $qn_0 = $4;
      __label__ = 3;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 3:
    var $qn_0;
    var $6 = $qn_0 - $dn | 0;
    if (($6 | 0) > ($dn | 0)) {
      var $qn_0 = $6;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_sum9 = $4 - $6 | 0;
    var $9 = $qp + ($_sum9 << 2) | 0;
    var $_sum10 = $nn - $6 | 0;
    var $10 = $np + ($_sum10 << 2) | 0;
    if (($6 | 0) == 1) {
      __label__ = 5;
      break;
    } else if (($6 | 0) == 2) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 5:
    var $_sum24 = $_sum10 - $dn | 0;
    var $12 = $np + ($_sum24 << 2) | 0;
    var $13 = $np + ($_sum24 + 1 << 2) | 0;
    var $14 = ___gmpn_cmp($13, $dp, $dn);
    var $_lobit_not = $14 >>> 31 ^ 1;
    if (($14 | 0) > -1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $17 = ___gmpn_sub_n($13, $13, $dp, $dn);
    __label__ = 7;
    break;
   case 7:
    var $19 = HEAPU32[$10 >> 2];
    var $20 = $np + ($_sum10 - 1 << 2) | 0;
    var $21 = HEAPU32[$20 >> 2];
    var $22 = $np + ($_sum10 - 2 << 2) | 0;
    var $23 = HEAPU32[$22 >> 2];
    var $_sum29 = $dn - 1 | 0;
    var $25 = HEAPU32[$dp + ($_sum29 << 2) >> 2];
    var $_sum30 = $dn - 2 | 0;
    var $27 = HEAPU32[$dp + ($_sum30 << 2) >> 2];
    if (($19 | 0) == ($25 | 0) & ($21 | 0) == ($27 | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $31 = ___gmpn_submul_1($12, $dp, $dn, -1);
    var $qh_1 = $_lobit_not;
    var $q_2 = -1;
    __label__ = 17;
    break;
   case 9:
    var $34 = HEAPU32[$dinv >> 2];
    var $35 = $19 & 65535;
    var $36 = $19 >>> 16;
    var $37 = $34 & 65535;
    var $38 = $34 >>> 16;
    var $39 = (i64Math.multiply($37, 0, $35, 0), i64Math.result[0]);
    var $40 = (i64Math.multiply($38, 0, $35, 0), i64Math.result[0]);
    var $41 = (i64Math.multiply($37, 0, $36, 0), i64Math.result[0]);
    var $42 = (i64Math.multiply($38, 0, $36, 0), i64Math.result[0]);
    var $44 = ($39 >>> 16) + $40 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($44, $41);
    var $45 = $uadd.f0;
    var $46 = $uadd.f1;
    var $__x3_0 = $46 ? $42 + 65536 | 0 : $42;
    var $48 = $45 >>> 16;
    var $51 = $45 << 16 | $39 & 65535;
    var $uadd31 = _llvm_uadd_with_overflow_i32($51, $21);
    var $52 = $uadd31.f0;
    var $53 = $uadd31.f1;
    var $57 = $48 + $19 + ($53 & 1) + $__x3_0 | 0;
    var $58 = (i64Math.multiply($57, 0, $25, 0), i64Math.result[0]);
    var $59 = $23 - $27 | 0;
    var $_neg36 = ($23 >>> 0 < $27 >>> 0) << 31 >> 31;
    var $61 = $27 & 65535;
    var $62 = $27 >>> 16;
    var $63 = $57 & 65535;
    var $64 = $57 >>> 16;
    var $65 = (i64Math.multiply($63, 0, $61, 0), i64Math.result[0]);
    var $66 = (i64Math.multiply($64, 0, $61, 0), i64Math.result[0]);
    var $67 = (i64Math.multiply($63, 0, $62, 0), i64Math.result[0]);
    var $68 = (i64Math.multiply($64, 0, $62, 0), i64Math.result[0]);
    var $70 = ($65 >>> 16) + $66 | 0;
    var $uadd32 = _llvm_uadd_with_overflow_i32($70, $67);
    var $71 = $uadd32.f0;
    var $72 = $uadd32.f1;
    var $__x38_0 = $72 ? $68 + 65536 | 0 : $68;
    var $77 = $65 & 65535 | $71 << 16;
    var $78 = $59 - $77 | 0;
    var $84 = $21 - $25 + $_neg36 - ($71 >>> 16) - $58 - $__x38_0 + (($59 >>> 0 < $77 >>> 0) << 31 >> 31) | 0;
    var $86 = ($84 >>> 0 >= $52 >>> 0) << 31 >> 31;
    var $88 = $57 + 1 + $86 | 0;
    var $89 = $86 & $27;
    var $uadd33 = _llvm_uadd_with_overflow_i32($78, $89);
    var $90 = $uadd33.f0;
    var $92 = $uadd33.f1;
    var $95 = $84 + ($92 & 1) + ($86 & $25) | 0;
    if ($95 >>> 0 < $25 >>> 0) {
      var $q_0 = $88;
      var $n0_0 = $90;
      var $n1_0 = $95;
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $99 = $90 >>> 0 < $27 >>> 0;
    if ($95 >>> 0 <= $25 >>> 0 & $99) {
      var $q_0 = $88;
      var $n0_0 = $90;
      var $n1_0 = $95;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $q_0 = $88 + 1 | 0;
    var $n0_0 = $90 - $27 | 0;
    var $n1_0 = ($99 << 31 >> 31) - $25 + $95 | 0;
    __label__ = 12;
    break;
   case 12:
    var $n1_0;
    var $n0_0;
    var $q_0;
    if (($dn | 0) > 2) {
      __label__ = 13;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 13:
    var $108 = ___gmpn_submul_1($12, $dp, $_sum30, $q_0);
    var $110 = $n0_0 >>> 0 < $108 >>> 0 & 1;
    var $112 = $n1_0 >>> 0 < $110 >>> 0;
    var $113 = $n1_0 - $110 | 0;
    HEAP32[$22 >> 2] = $n0_0 - $108 | 0;
    if ($112) {
      __label__ = 14;
      break;
    } else {
      var $qh_0 = $_lobit_not;
      var $q_1 = $q_0;
      var $n1_1 = $113;
      __label__ = 16;
      break;
    }
   case 14:
    var $115 = ___gmpn_add_n($12, $12, $dp, $_sum29);
    var $qh_0 = $_lobit_not - (($q_0 | 0) == 0 & 1) | 0;
    var $q_1 = $q_0 - 1 | 0;
    var $n1_1 = $113 + $25 + $115 | 0;
    __label__ = 16;
    break;
   case 15:
    HEAP32[$22 >> 2] = $n0_0;
    var $qh_0 = $_lobit_not;
    var $q_1 = $q_0;
    var $n1_1 = $n1_0;
    __label__ = 16;
    break;
   case 16:
    var $n1_1;
    var $q_1;
    var $qh_0;
    HEAP32[$20 >> 2] = $n1_1;
    var $qh_1 = $qh_0;
    var $q_2 = $q_1;
    __label__ = 17;
    break;
   case 17:
    var $q_2;
    var $qh_1;
    HEAP32[$9 >> 2] = $q_2;
    var $qh_4 = $qh_1;
    __label__ = 30;
    break;
   case 18:
    var $126 = $np + ($_sum10 - 2 << 2) | 0;
    var $127 = $dp + ($dn - 2 << 2) | 0;
    var $128 = ___gmpn_divrem_2($9, 0, $126, 4, $127);
    var $qh_2 = $128;
    __label__ = 22;
    break;
   case 19:
    var $131 = $np + ($_sum10 - $6 << 2) | 0;
    if (($6 | 0) > 49) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $133 = $6 << 1;
    var $134 = $dp + ($dn - $6 << 2) | 0;
    var $136 = HEAP32[$dinv >> 2];
    var $137 = ___gmpn_sbpi1_div_qr($9, $131, $133, $134, $6, $136);
    var $qh_2 = $137;
    __label__ = 22;
    break;
   case 21:
    var $139 = $dp + ($dn - $6 << 2) | 0;
    var $140 = ___gmpn_dcpi1_div_qr_n($9, $131, $139, $6, $dinv, $3);
    var $qh_2 = $140;
    __label__ = 22;
    break;
   case 22:
    var $qh_2;
    if (($6 | 0) == ($dn | 0)) {
      var $qh_4 = $qh_2;
      __label__ = 30;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $144 = $dn - $6 | 0;
    if (($6 | 0) > ($144 | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $147 = ___gmpn_mul($3, $9, $6, $dp, $144);
    __label__ = 26;
    break;
   case 25:
    var $149 = ___gmpn_mul($3, $dp, $144, $9, $6);
    __label__ = 26;
    break;
   case 26:
    var $_sum16 = $_sum10 - $dn | 0;
    var $151 = $np + ($_sum16 << 2) | 0;
    var $152 = ___gmpn_sub_n($151, $151, $3, $dn);
    if (($qh_2 | 0) == 0) {
      var $qh_3_ph = 0;
      var $cy_0_ph = $152;
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $155 = $np + ($_sum16 + $6 << 2) | 0;
    var $156 = ___gmpn_sub_n($155, $155, $dp, $144);
    var $qh_3_ph = $qh_2;
    var $cy_0_ph = $156 + $152 | 0;
    __label__ = 28;
    break;
   case 28:
    var $cy_0_ph;
    var $qh_3_ph;
    if (($cy_0_ph | 0) == 0) {
      var $qh_4 = $qh_3_ph;
      __label__ = 30;
      break;
    } else {
      var $cy_045 = $cy_0_ph;
      var $qh_346 = $qh_3_ph;
      __label__ = 29;
      break;
    }
   case 29:
    var $qh_346;
    var $cy_045;
    var $159 = ___gmpn_sub_1($9, $9, $6, 1);
    var $160 = $qh_346 - $159 | 0;
    var $161 = ___gmpn_add_n($151, $151, $dp, $dn);
    var $162 = $cy_045 - $161 | 0;
    if (($cy_045 | 0) == ($161 | 0)) {
      var $qh_4 = $160;
      __label__ = 30;
      break;
    } else {
      var $cy_045 = $162;
      var $qh_346 = $160;
      __label__ = 29;
      break;
    }
   case 30:
    var $qh_4;
    var $164 = -$dn | 0;
    var $_sum13 = $164 << 1;
    var $_0 = $9;
    var $_01 = $10;
    var $qn_1 = $_sum9;
    __label__ = 31;
    break;
   case 31:
    var $qn_1;
    var $_01;
    var $_0;
    var $166 = $_0 + ($164 << 2) | 0;
    var $167 = $_01 + ($164 << 2) | 0;
    var $168 = $_01 + ($_sum13 << 2) | 0;
    var $169 = ___gmpn_dcpi1_div_qr_n($166, $168, $dp, $dn, $dinv, $3);
    var $170 = $qn_1 - $dn | 0;
    if (($170 | 0) > 0) {
      var $_0 = $166;
      var $_01 = $167;
      var $qn_1 = $170;
      __label__ = 31;
      break;
    } else {
      var $qh_7 = $qh_4;
      __label__ = 43;
      break;
    }
   case 32:
    var $_sum = $dn - $4 | 0;
    var $174 = $np + ($_sum << 2) | 0;
    if (($4 | 0) > 49) {
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $176 = $4 << 1;
    var $177 = $dp + ($_sum << 2) | 0;
    var $179 = HEAP32[$dinv >> 2];
    var $180 = ___gmpn_sbpi1_div_qr($qp, $174, $176, $177, $4, $179);
    var $qh_5 = $180;
    __label__ = 35;
    break;
   case 34:
    var $182 = $dp + ($_sum << 2) | 0;
    var $183 = ___gmpn_dcpi1_div_qr_n($qp, $174, $182, $4, $dinv, $3);
    var $qh_5 = $183;
    __label__ = 35;
    break;
   case 35:
    var $qh_5;
    if (($4 | 0) == ($dn | 0)) {
      var $qh_7 = $qh_5;
      __label__ = 43;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    if (($4 | 0) > ($_sum | 0)) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    var $189 = ___gmpn_mul($3, $qp, $4, $dp, $_sum);
    __label__ = 39;
    break;
   case 38:
    var $191 = ___gmpn_mul($3, $dp, $_sum, $qp, $4);
    __label__ = 39;
    break;
   case 39:
    var $193 = ___gmpn_sub_n($np, $np, $3, $dn);
    if (($qh_5 | 0) == 0) {
      var $qh_6_ph = 0;
      var $cy_1_ph = $193;
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $196 = $np + ($4 << 2) | 0;
    var $197 = ___gmpn_sub_n($196, $196, $dp, $_sum);
    var $qh_6_ph = $qh_5;
    var $cy_1_ph = $197 + $193 | 0;
    __label__ = 41;
    break;
   case 41:
    var $cy_1_ph;
    var $qh_6_ph;
    if (($cy_1_ph | 0) == 0) {
      var $qh_7 = $qh_6_ph;
      __label__ = 43;
      break;
    } else {
      var $cy_141 = $cy_1_ph;
      var $qh_642 = $qh_6_ph;
      __label__ = 42;
      break;
    }
   case 42:
    var $qh_642;
    var $cy_141;
    var $200 = ___gmpn_sub_1($qp, $qp, $4, 1);
    var $201 = $qh_642 - $200 | 0;
    var $202 = ___gmpn_add_n($np, $np, $dp, $dn);
    var $203 = $cy_141 - $202 | 0;
    if (($cy_141 | 0) == ($202 | 0)) {
      var $qh_7 = $201;
      __label__ = 43;
      break;
    } else {
      var $cy_141 = $203;
      var $qh_642 = $201;
      __label__ = 42;
      break;
    }
   case 43:
    var $qh_7;
    return $qh_7;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dcpi1_div_qr["X"] = 1;

function ___gmpn_dcpi1_divappr_q_n($qp, $np, $dp, $n, $dinv, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $qp6 = $qp;
    var $1 = $n >> 1;
    var $2 = $n - $1 | 0;
    var $4 = $qp + ($1 << 2) | 0;
    var $5 = $n & -2;
    var $6 = $np + ($5 << 2) | 0;
    if (($2 | 0) > 49) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $8 = $2 << 1;
    var $9 = $dp + ($1 << 2) | 0;
    var $11 = HEAP32[$dinv >> 2];
    var $12 = ___gmpn_sbpi1_div_qr($4, $6, $8, $9, $2, $11);
    var $qh_0 = $12;
    __label__ = 5;
    break;
   case 4:
    var $14 = $dp + ($1 << 2) | 0;
    var $15 = ___gmpn_dcpi1_div_qr_n($4, $6, $14, $2, $dinv, $tp);
    var $qh_0 = $15;
    __label__ = 5;
    break;
   case 5:
    var $qh_0;
    var $17 = ___gmpn_mul($tp, $4, $2, $dp, $1);
    var $18 = $np + ($1 << 2) | 0;
    var $19 = ___gmpn_sub_n($18, $18, $tp, $n);
    if (($qh_0 | 0) == 0) {
      var $qh_1_ph = 0;
      var $cy_0_ph = $19;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $22 = $np + ($n << 2) | 0;
    var $23 = ___gmpn_sub_n($22, $22, $dp, $1);
    var $qh_1_ph = $qh_0;
    var $cy_0_ph = $23 + $19 | 0;
    __label__ = 7;
    break;
   case 7:
    var $cy_0_ph;
    var $qh_1_ph;
    if (($cy_0_ph | 0) == 0) {
      var $qh_1_lcssa = $qh_1_ph;
      __label__ = 9;
      break;
    } else {
      var $cy_03 = $cy_0_ph;
      var $qh_14 = $qh_1_ph;
      __label__ = 8;
      break;
    }
   case 8:
    var $qh_14;
    var $cy_03;
    var $26 = ___gmpn_sub_1($4, $4, $2, 1);
    var $27 = $qh_14 - $26 | 0;
    var $28 = ___gmpn_add_n($18, $18, $dp, $n);
    var $29 = $cy_03 - $28 | 0;
    if (($cy_03 | 0) == ($28 | 0)) {
      var $qh_1_lcssa = $27;
      __label__ = 9;
      break;
    } else {
      var $cy_03 = $29;
      var $qh_14 = $27;
      __label__ = 8;
      break;
    }
   case 9:
    var $qh_1_lcssa;
    var $32 = $np + ($2 << 2) | 0;
    var $33 = $dp + ($2 << 2) | 0;
    if (($1 | 0) > 199) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $36 = HEAP32[$dinv >> 2];
    var $37 = ___gmpn_sbpi1_divappr_q($qp, $32, $5, $33, $1, $36);
    var $ql_0 = $37;
    __label__ = 12;
    break;
   case 11:
    var $39 = ___gmpn_dcpi1_divappr_q_n($qp, $32, $33, $1, $dinv, $tp);
    var $ql_0 = $39;
    __label__ = 12;
    break;
   case 12:
    var $ql_0;
    if (($ql_0 | 0) != 0 & ($1 | 0) > 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $44 = $n << 1 & -4;
    _memset($qp6, -1, $44, 4);
    __label__ = 14;
    break;
   case 14:
    return $qh_1_lcssa;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dcpi1_divappr_q_n["X"] = 1;

function ___gmpn_dcpi1_divappr_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    var $3 = $1 + 1 | 0;
    if (($1 | 0) < ($dn | 0)) {
      __label__ = 39;
      break;
    } else {
      var $qn_0 = $3;
      __label__ = 3;
      break;
    }
   case 3:
    var $qn_0;
    var $4 = $qn_0 - $dn | 0;
    if (($4 | 0) > ($dn | 0)) {
      var $qn_0 = $4;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $7 = $qp + ($1 - $4 << 2) | 0;
    var $_sum8 = $nn - $4 | 0;
    var $8 = $np + ($_sum8 << 2) | 0;
    var $10 = STACKTOP;
    STACKTOP += $dn << 2;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $11 = $10;
    if (($4 | 0) == 1) {
      __label__ = 5;
      break;
    } else if (($4 | 0) == 2) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 5:
    var $_sum27 = $_sum8 - $dn | 0;
    var $13 = $np + ($_sum27 << 2) | 0;
    var $14 = $np + ($_sum27 + 1 << 2) | 0;
    var $15 = ___gmpn_cmp($14, $dp, $dn);
    var $_lobit_not = $15 >>> 31 ^ 1;
    if (($15 | 0) > -1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $18 = ___gmpn_sub_n($14, $14, $dp, $dn);
    __label__ = 7;
    break;
   case 7:
    var $20 = HEAPU32[$8 >> 2];
    var $21 = $np + ($_sum8 - 1 << 2) | 0;
    var $22 = HEAPU32[$21 >> 2];
    var $23 = $np + ($_sum8 - 2 << 2) | 0;
    var $24 = HEAPU32[$23 >> 2];
    var $_sum32 = $dn - 1 | 0;
    var $26 = HEAPU32[$dp + ($_sum32 << 2) >> 2];
    var $_sum33 = $dn - 2 | 0;
    var $28 = HEAPU32[$dp + ($_sum33 << 2) >> 2];
    if (($20 | 0) == ($26 | 0) & ($22 | 0) == ($28 | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $32 = ___gmpn_submul_1($13, $dp, $dn, -1);
    var $qh_1 = $_lobit_not;
    var $q_2 = -1;
    __label__ = 17;
    break;
   case 9:
    var $35 = HEAPU32[$dinv >> 2];
    var $36 = $20 & 65535;
    var $37 = $20 >>> 16;
    var $38 = $35 & 65535;
    var $39 = $35 >>> 16;
    var $40 = (i64Math.multiply($38, 0, $36, 0), i64Math.result[0]);
    var $41 = (i64Math.multiply($39, 0, $36, 0), i64Math.result[0]);
    var $42 = (i64Math.multiply($38, 0, $37, 0), i64Math.result[0]);
    var $43 = (i64Math.multiply($39, 0, $37, 0), i64Math.result[0]);
    var $45 = ($40 >>> 16) + $41 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($45, $42);
    var $46 = $uadd.f0;
    var $47 = $uadd.f1;
    var $__x3_0 = $47 ? $43 + 65536 | 0 : $43;
    var $49 = $46 >>> 16;
    var $52 = $46 << 16 | $40 & 65535;
    var $uadd34 = _llvm_uadd_with_overflow_i32($52, $22);
    var $53 = $uadd34.f0;
    var $54 = $uadd34.f1;
    var $58 = $49 + $20 + ($54 & 1) + $__x3_0 | 0;
    var $59 = (i64Math.multiply($58, 0, $26, 0), i64Math.result[0]);
    var $60 = $24 - $28 | 0;
    var $_neg39 = ($24 >>> 0 < $28 >>> 0) << 31 >> 31;
    var $62 = $28 & 65535;
    var $63 = $28 >>> 16;
    var $64 = $58 & 65535;
    var $65 = $58 >>> 16;
    var $66 = (i64Math.multiply($64, 0, $62, 0), i64Math.result[0]);
    var $67 = (i64Math.multiply($65, 0, $62, 0), i64Math.result[0]);
    var $68 = (i64Math.multiply($64, 0, $63, 0), i64Math.result[0]);
    var $69 = (i64Math.multiply($65, 0, $63, 0), i64Math.result[0]);
    var $71 = ($66 >>> 16) + $67 | 0;
    var $uadd35 = _llvm_uadd_with_overflow_i32($71, $68);
    var $72 = $uadd35.f0;
    var $73 = $uadd35.f1;
    var $__x38_0 = $73 ? $69 + 65536 | 0 : $69;
    var $78 = $66 & 65535 | $72 << 16;
    var $79 = $60 - $78 | 0;
    var $85 = $22 - $26 + $_neg39 - ($72 >>> 16) - $59 - $__x38_0 + (($60 >>> 0 < $78 >>> 0) << 31 >> 31) | 0;
    var $87 = ($85 >>> 0 >= $53 >>> 0) << 31 >> 31;
    var $89 = $58 + 1 + $87 | 0;
    var $90 = $87 & $28;
    var $uadd36 = _llvm_uadd_with_overflow_i32($79, $90);
    var $91 = $uadd36.f0;
    var $93 = $uadd36.f1;
    var $96 = $85 + ($93 & 1) + ($87 & $26) | 0;
    if ($96 >>> 0 < $26 >>> 0) {
      var $q_0 = $89;
      var $n1_0 = $96;
      var $n0_0 = $91;
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $100 = $91 >>> 0 < $28 >>> 0;
    if ($96 >>> 0 <= $26 >>> 0 & $100) {
      var $q_0 = $89;
      var $n1_0 = $96;
      var $n0_0 = $91;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $q_0 = $89 + 1 | 0;
    var $n1_0 = ($100 << 31 >> 31) - $26 + $96 | 0;
    var $n0_0 = $91 - $28 | 0;
    __label__ = 12;
    break;
   case 12:
    var $n0_0;
    var $n1_0;
    var $q_0;
    if (($dn | 0) > 2) {
      __label__ = 13;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 13:
    var $109 = ___gmpn_submul_1($13, $dp, $_sum33, $q_0);
    var $111 = $n0_0 >>> 0 < $109 >>> 0 & 1;
    var $113 = $n1_0 >>> 0 < $111 >>> 0;
    var $114 = $n1_0 - $111 | 0;
    HEAP32[$23 >> 2] = $n0_0 - $109 | 0;
    if ($113) {
      __label__ = 14;
      break;
    } else {
      var $qh_0 = $_lobit_not;
      var $q_1 = $q_0;
      var $n1_1 = $114;
      __label__ = 16;
      break;
    }
   case 14:
    var $116 = ___gmpn_add_n($13, $13, $dp, $_sum32);
    var $qh_0 = $_lobit_not - (($q_0 | 0) == 0 & 1) | 0;
    var $q_1 = $q_0 - 1 | 0;
    var $n1_1 = $114 + $26 + $116 | 0;
    __label__ = 16;
    break;
   case 15:
    HEAP32[$23 >> 2] = $n0_0;
    var $qh_0 = $_lobit_not;
    var $q_1 = $q_0;
    var $n1_1 = $n1_0;
    __label__ = 16;
    break;
   case 16:
    var $n1_1;
    var $q_1;
    var $qh_0;
    HEAP32[$21 >> 2] = $n1_1;
    var $qh_1 = $qh_0;
    var $q_2 = $q_1;
    __label__ = 17;
    break;
   case 17:
    var $q_2;
    var $qh_1;
    HEAP32[$7 >> 2] = $q_2;
    var $qh_4 = $qh_1;
    __label__ = 30;
    break;
   case 18:
    var $127 = $np + ($_sum8 - 2 << 2) | 0;
    var $128 = $dp + ($dn - 2 << 2) | 0;
    var $129 = ___gmpn_divrem_2($7, 0, $127, 4, $128);
    var $qh_2 = $129;
    __label__ = 22;
    break;
   case 19:
    var $132 = $np + ($_sum8 - $4 << 2) | 0;
    if (($4 | 0) > 49) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $134 = $4 << 1;
    var $135 = $dp + ($dn - $4 << 2) | 0;
    var $137 = HEAP32[$dinv >> 2];
    var $138 = ___gmpn_sbpi1_div_qr($7, $132, $134, $135, $4, $137);
    var $qh_2 = $138;
    __label__ = 22;
    break;
   case 21:
    var $140 = $dp + ($dn - $4 << 2) | 0;
    var $141 = ___gmpn_dcpi1_div_qr_n($7, $132, $140, $4, $dinv, $11);
    var $qh_2 = $141;
    __label__ = 22;
    break;
   case 22:
    var $qh_2;
    if (($4 | 0) == ($dn | 0)) {
      var $qh_4 = $qh_2;
      __label__ = 30;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $145 = $dn - $4 | 0;
    if (($4 | 0) > ($145 | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $148 = ___gmpn_mul($11, $7, $4, $dp, $145);
    __label__ = 26;
    break;
   case 25:
    var $150 = ___gmpn_mul($11, $dp, $145, $7, $4);
    __label__ = 26;
    break;
   case 26:
    var $_sum19 = $_sum8 - $dn | 0;
    var $152 = $np + ($_sum19 << 2) | 0;
    var $153 = ___gmpn_sub_n($152, $152, $11, $dn);
    if (($qh_2 | 0) == 0) {
      var $qh_3_ph = 0;
      var $cy_0_ph = $153;
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $156 = $np + ($_sum19 + $4 << 2) | 0;
    var $157 = ___gmpn_sub_n($156, $156, $dp, $145);
    var $qh_3_ph = $qh_2;
    var $cy_0_ph = $157 + $153 | 0;
    __label__ = 28;
    break;
   case 28:
    var $cy_0_ph;
    var $qh_3_ph;
    if (($cy_0_ph | 0) == 0) {
      var $qh_4 = $qh_3_ph;
      __label__ = 30;
      break;
    } else {
      var $cy_046 = $cy_0_ph;
      var $qh_347 = $qh_3_ph;
      __label__ = 29;
      break;
    }
   case 29:
    var $qh_347;
    var $cy_046;
    var $160 = ___gmpn_sub_1($7, $7, $4, 1);
    var $161 = $qh_347 - $160 | 0;
    var $162 = ___gmpn_add_n($152, $152, $dp, $dn);
    var $163 = $cy_046 - $162 | 0;
    if (($cy_046 | 0) == ($162 | 0)) {
      var $qh_4 = $161;
      __label__ = 30;
      break;
    } else {
      var $cy_046 = $163;
      var $qh_347 = $161;
      __label__ = 29;
      break;
    }
   case 30:
    var $qh_4;
    var $165 = $3 - $4 | 0;
    var $167 = -$dn | 0;
    var $_sum16 = $167 << 1;
    if (($165 | 0) > ($dn | 0)) {
      var $qn_151 = $165;
      var $_0152 = $8;
      var $_053 = $7;
      __label__ = 31;
      break;
    } else {
      var $qn_1_lcssa = $165;
      var $_01_lcssa = $8;
      var $_0_lcssa = $7;
      var $_sum12_pre_phi = $_sum16;
      __label__ = 32;
      break;
    }
   case 31:
    var $_053;
    var $_0152;
    var $qn_151;
    var $168 = $_053 + ($167 << 2) | 0;
    var $169 = $_0152 + ($167 << 2) | 0;
    var $170 = $_0152 + ($_sum16 << 2) | 0;
    var $171 = ___gmpn_dcpi1_div_qr_n($168, $170, $dp, $dn, $dinv, $11);
    var $172 = $qn_151 - $dn | 0;
    if (($172 | 0) > ($dn | 0)) {
      var $qn_151 = $172;
      var $_0152 = $169;
      var $_053 = $168;
      __label__ = 31;
      break;
    } else {
      var $qn_1_lcssa = $172;
      var $_01_lcssa = $169;
      var $_0_lcssa = $168;
      var $_sum12_pre_phi = $_sum16;
      __label__ = 32;
      break;
    }
   case 32:
    var $_sum12_pre_phi;
    var $_0_lcssa;
    var $_01_lcssa;
    var $qn_1_lcssa;
    var $174 = 1 - $qn_1_lcssa | 0;
    var $175 = $_0_lcssa + ($174 << 2) | 0;
    var $176 = HEAP32[$_0_lcssa >> 2];
    var $178 = ___gmpn_dcpi1_divappr_q_n($175, $_01_lcssa + ($_sum12_pre_phi << 2) | 0, $dp, $dn, $dinv, $11);
    if (($qn_1_lcssa | 0) == 1) {
      __label__ = 38;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $181 = $qn_1_lcssa - 2 | 0;
    var $183 = HEAP32[$_0_lcssa + ($174 + 1 << 2) >> 2];
    if (($181 | 0) == 0) {
      var $__x20_1 = $183;
      var $__dst_1 = $175;
      __label__ = 37;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $__x20_0 = $183;
    var $__src_0 = $_0_lcssa + ($174 + 2 << 2) | 0;
    var $__dst_0 = $175;
    var $__n_0 = $181;
    __label__ = 35;
    break;
   case 35:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x20_0;
    HEAP32[$__dst_0 >> 2] = $__x20_0;
    var $189 = HEAP32[$__src_0 >> 2];
    var $190 = $__n_0 - 1 | 0;
    if (($190 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      var $__x20_0 = $189;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $190;
      __label__ = 35;
      break;
    }
   case 36:
    var $__x20_1 = $189;
    var $__dst_1 = $_0_lcssa - 4 | 0;
    __label__ = 37;
    break;
   case 37:
    var $__dst_1;
    var $__x20_1;
    HEAP32[$__dst_1 >> 2] = $__x20_1;
    __label__ = 38;
    break;
   case 38:
    HEAP32[$_0_lcssa >> 2] = $176;
    var $qh_6 = $qh_4;
    __label__ = 48;
    break;
   case 39:
    var $195 = $3 << 2;
    var $196 = STACKTOP;
    STACKTOP += $195;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $197 = $196;
    if (($1 | 0) > 199) {
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $200 = $np + ($dn - 2 - $1 << 2) | 0;
    var $201 = $3 << 1;
    var $203 = $dp + (($1 ^ -1) + $dn << 2) | 0;
    var $205 = HEAP32[$dinv >> 2];
    var $206 = ___gmpn_sbpi1_divappr_q($197, $200, $201, $203, $3, $205);
    var $qh_5 = $206;
    __label__ = 42;
    break;
   case 41:
    var $208 = STACKTOP;
    STACKTOP += $195;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $209 = $208;
    var $210 = $np + ($dn - 2 - $1 << 2) | 0;
    var $212 = $dp + (($1 ^ -1) + $dn << 2) | 0;
    var $213 = ___gmpn_dcpi1_divappr_q_n($197, $210, $212, $3, $dinv, $209);
    var $qh_5 = $213;
    __label__ = 42;
    break;
   case 42:
    var $qh_5;
    if (($nn | 0) == ($dn | 0)) {
      var $qh_6 = $qh_5;
      __label__ = 48;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $217 = $1 - 1 | 0;
    var $220 = HEAP32[$196 + 4 >> 2];
    if (($217 | 0) == 0) {
      var $__x24_1 = $220;
      var $__dst22_1 = $qp;
      __label__ = 47;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $225 = $nn - 1 - $dn | 0;
    var $__x24_0 = $220;
    var $__src23_0 = $196 + 8 | 0;
    var $__dst22_0 = $qp;
    var $__n21_0 = $217;
    __label__ = 45;
    break;
   case 45:
    var $__n21_0;
    var $__dst22_0;
    var $__src23_0;
    var $__x24_0;
    HEAP32[$__dst22_0 >> 2] = $__x24_0;
    var $229 = HEAP32[$__src23_0 >> 2];
    var $230 = $__n21_0 - 1 | 0;
    if (($230 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      var $__x24_0 = $229;
      var $__src23_0 = $__src23_0 + 4 | 0;
      var $__dst22_0 = $__dst22_0 + 4 | 0;
      var $__n21_0 = $230;
      __label__ = 45;
      break;
    }
   case 46:
    var $__x24_1 = $229;
    var $__dst22_1 = $qp + ($225 << 2) | 0;
    __label__ = 47;
    break;
   case 47:
    var $__dst22_1;
    var $__x24_1;
    HEAP32[$__dst22_1 >> 2] = $__x24_1;
    var $qh_6 = $qh_5;
    __label__ = 48;
    break;
   case 48:
    var $qh_6;
    return $qh_6;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_dcpi1_divappr_q["X"] = 1;

function ___gmpn_div_q($qp, $np, $nn, $dp, $dn, $scratch) {
  var __stackBase__ = STACKTOP;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $qp145 = $qp;
    var $dinv = STACKTOP;
    STACKTOP += 4;
    var $__tmp_marker = STACKTOP;
    STACKTOP += 4;
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($dn | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = HEAP32[$dp >> 2];
    var $4 = ___gmpn_divrem_1($qp, 0, $np, $nn, $3);
    __label__ = 184;
    break;
   case 4:
    var $6 = $nn - $dn | 0;
    var $7 = $6 + 1 | 0;
    if (($6 + 6 | 0) < ($dn | 0)) {
      __label__ = 84;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $11 = $dn - 1 | 0;
    var $13 = HEAPU32[$dp + ($11 << 2) >> 2];
    if (($13 | 0) > -1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 6:
    if ($13 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $19 = $13 >>> 0 < 256 ? 1 : 9;
    var $24 = $19;
    __label__ = 9;
    break;
   case 8:
    var $22 = $13 >>> 0 < 16777216 ? 17 : 25;
    var $24 = $22;
    __label__ = 9;
    break;
   case 9:
    var $24;
    var $27 = STRING_TABLE.___gmpn_clz_tab + ($13 >>> ($24 >>> 0)) | 0;
    var $30 = 33 - $24 - (HEAPU8[$27] & 255) | 0;
    var $31 = ___gmpn_lshift($scratch, $np, $nn, $30);
    HEAP32[$scratch + ($nn << 2) >> 2] = $31;
    var $35 = (($31 | 0) != 0 & 1) + $nn | 0;
    var $36 = $dn << 2;
    if ($36 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $39 = STACKTOP;
    STACKTOP += $36;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $43 = $39;
    __label__ = 12;
    break;
   case 11:
    var $41 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $36);
    var $43 = $41;
    __label__ = 12;
    break;
   case 12:
    var $43;
    var $44 = $43;
    var $45 = ___gmpn_lshift($44, $dp, $dn, $30);
    if (($dn | 0) == 2) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $48 = ___gmpn_divrem_2($qp, 0, $scratch, $35, $44);
    var $qh_0 = $48;
    __label__ = 44;
    break;
   case 14:
    if (($dn | 0) > 199) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    if (($35 - $dn | 0) > 199) {
      __label__ = 27;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $56 = HEAPU32[$44 + ($11 << 2) >> 2];
    var $57 = $56 >>> 16;
    var $58 = $56 & 65535;
    var $59 = $56 ^ -1;
    var $60 = Math.floor(($59 >>> 0) / ($57 >>> 0));
    var $61 = (i64Math.multiply($60, 0, $57, 0), i64Math.result[0]);
    var $62 = $59 - $61 | 0;
    var $63 = (i64Math.multiply($60, 0, $58, 0), i64Math.result[0]);
    var $65 = $62 << 16 | 65535;
    if ($65 >>> 0 < $63 >>> 0) {
      __label__ = 17;
      break;
    } else {
      var $__q1_0 = $60;
      var $__r1_0 = $65;
      __label__ = 19;
      break;
    }
   case 17:
    var $68 = $60 - 1 | 0;
    var $uadd40 = _llvm_uadd_with_overflow_i32($65, $56);
    var $69 = $uadd40.f0;
    var $70 = $uadd40.f1;
    if ($69 >>> 0 < $63 >>> 0 & ($70 ^ 1)) {
      __label__ = 18;
      break;
    } else {
      var $__q1_0 = $68;
      var $__r1_0 = $69;
      __label__ = 19;
      break;
    }
   case 18:
    var $__q1_0 = $60 - 2 | 0;
    var $__r1_0 = $69 + $56 | 0;
    __label__ = 19;
    break;
   case 19:
    var $__r1_0;
    var $__q1_0;
    var $76 = $__r1_0 - $63 | 0;
    var $77 = Math.floor(($76 >>> 0) / ($57 >>> 0));
    var $78 = (i64Math.multiply($77, 0, $57, 0), i64Math.result[0]);
    var $79 = $76 - $78 | 0;
    var $80 = (i64Math.multiply($77, 0, $58, 0), i64Math.result[0]);
    var $82 = $79 << 16 | 65535;
    if ($82 >>> 0 < $80 >>> 0) {
      __label__ = 20;
      break;
    } else {
      var $__q0_0 = $77;
      __label__ = 21;
      break;
    }
   case 20:
    var $uadd39 = _llvm_uadd_with_overflow_i32($82, $56);
    var $85 = $uadd39.f1;
    var $86 = $uadd39.f0;
    var $__v = $86 >>> 0 < $80 >>> 0 & ($85 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $77 | 0;
    __label__ = 21;
    break;
   case 21:
    var $__q0_0;
    var $90 = $__q0_0 | $__q1_0 << 16;
    var $91 = (i64Math.multiply($56, 0, $90, 0), i64Math.result[0]);
    var $94 = HEAPU32[$44 + ($dn - 2 << 2) >> 2];
    var $uadd36 = _llvm_uadd_with_overflow_i32($91, $94);
    var $95 = $uadd36.f0;
    var $96 = $uadd36.f1;
    if ($96) {
      __label__ = 22;
      break;
    } else {
      var $v_0 = $90;
      var $p_0 = $95;
      __label__ = 23;
      break;
    }
   case 22:
    var $99 = ($95 >>> 0 >= $56 >>> 0) << 31 >> 31;
    var $v_0 = $90 - 1 + $99 | 0;
    var $p_0 = $95 - $56 - ($99 & $56) | 0;
    __label__ = 23;
    break;
   case 23:
    var $p_0;
    var $v_0;
    var $106 = $94 & 65535;
    var $107 = $94 >>> 16;
    var $108 = $v_0 & 65535;
    var $109 = $v_0 >>> 16;
    var $110 = (i64Math.multiply($106, 0, $108, 0), i64Math.result[0]);
    var $111 = (i64Math.multiply($106, 0, $109, 0), i64Math.result[0]);
    var $112 = (i64Math.multiply($107, 0, $108, 0), i64Math.result[0]);
    var $113 = (i64Math.multiply($107, 0, $109, 0), i64Math.result[0]);
    var $115 = ($110 >>> 16) + $111 | 0;
    var $uadd37 = _llvm_uadd_with_overflow_i32($115, $112);
    var $116 = $uadd37.f0;
    var $117 = $uadd37.f1;
    var $__x3_0 = $117 ? $113 + 65536 | 0 : $113;
    var $120 = $__x3_0 + ($116 >>> 16) | 0;
    var $123 = $116 << 16 | $110 & 65535;
    var $uadd38 = _llvm_uadd_with_overflow_i32($p_0, $120);
    var $124 = $uadd38.f0;
    var $125 = $uadd38.f1;
    if ($125) {
      __label__ = 24;
      break;
    } else {
      var $v_1 = $v_0;
      __label__ = 26;
      break;
    }
   case 24:
    var $127 = $v_0 - 1 | 0;
    if ($124 >>> 0 < $56 >>> 0) {
      var $v_1 = $127;
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $_103 = $124 >>> 0 <= $56 >>> 0 & $123 >>> 0 < $94 >>> 0 ? $127 : $v_0 - 2 | 0;
    var $v_1 = $_103;
    __label__ = 26;
    break;
   case 26:
    var $v_1;
    HEAP32[$dinv >> 2] = $v_1;
    var $135 = ___gmpn_sbpi1_div_q($qp, $scratch, $35, $44, $dn, $v_1);
    var $qh_0 = $135;
    __label__ = 44;
    break;
   case 27:
    if (($nn | 0) > 3999) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $139 = $dn | 0;
    var $141 = $nn | 0;
    if ($139 * 3600 + $141 * 200 > $139 * $141) {
      __label__ = 29;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 29:
    var $148 = HEAPU32[$44 + ($11 << 2) >> 2];
    var $149 = $148 >>> 16;
    var $150 = $148 & 65535;
    var $151 = $148 ^ -1;
    var $152 = Math.floor(($151 >>> 0) / ($149 >>> 0));
    var $153 = (i64Math.multiply($152, 0, $149, 0), i64Math.result[0]);
    var $154 = $151 - $153 | 0;
    var $155 = (i64Math.multiply($152, 0, $150, 0), i64Math.result[0]);
    var $157 = $154 << 16 | 65535;
    if ($157 >>> 0 < $155 >>> 0) {
      __label__ = 30;
      break;
    } else {
      var $__q19_0 = $152;
      var $__r111_0 = $157;
      __label__ = 32;
      break;
    }
   case 30:
    var $160 = $152 - 1 | 0;
    var $uadd45 = _llvm_uadd_with_overflow_i32($157, $148);
    var $161 = $uadd45.f0;
    var $162 = $uadd45.f1;
    if ($161 >>> 0 < $155 >>> 0 & ($162 ^ 1)) {
      __label__ = 31;
      break;
    } else {
      var $__q19_0 = $160;
      var $__r111_0 = $161;
      __label__ = 32;
      break;
    }
   case 31:
    var $__q19_0 = $152 - 2 | 0;
    var $__r111_0 = $161 + $148 | 0;
    __label__ = 32;
    break;
   case 32:
    var $__r111_0;
    var $__q19_0;
    var $168 = $__r111_0 - $155 | 0;
    var $169 = Math.floor(($168 >>> 0) / ($149 >>> 0));
    var $170 = (i64Math.multiply($169, 0, $149, 0), i64Math.result[0]);
    var $171 = $168 - $170 | 0;
    var $172 = (i64Math.multiply($169, 0, $150, 0), i64Math.result[0]);
    var $174 = $171 << 16 | 65535;
    if ($174 >>> 0 < $172 >>> 0) {
      __label__ = 33;
      break;
    } else {
      var $__q010_0 = $169;
      __label__ = 34;
      break;
    }
   case 33:
    var $uadd44 = _llvm_uadd_with_overflow_i32($174, $148);
    var $177 = $uadd44.f1;
    var $178 = $uadd44.f0;
    var $_88_v = $178 >>> 0 < $172 >>> 0 & ($177 ^ 1) ? -2 : -1;
    var $__q010_0 = $_88_v + $169 | 0;
    __label__ = 34;
    break;
   case 34:
    var $__q010_0;
    var $182 = $__q010_0 | $__q19_0 << 16;
    var $183 = (i64Math.multiply($148, 0, $182, 0), i64Math.result[0]);
    var $186 = HEAPU32[$44 + ($dn - 2 << 2) >> 2];
    var $uadd41 = _llvm_uadd_with_overflow_i32($183, $186);
    var $187 = $uadd41.f0;
    var $188 = $uadd41.f1;
    if ($188) {
      __label__ = 35;
      break;
    } else {
      var $v1_0 = $182;
      var $p2_0 = $187;
      __label__ = 36;
      break;
    }
   case 35:
    var $191 = ($187 >>> 0 >= $148 >>> 0) << 31 >> 31;
    var $v1_0 = $182 - 1 + $191 | 0;
    var $p2_0 = $187 - $148 - ($191 & $148) | 0;
    __label__ = 36;
    break;
   case 36:
    var $p2_0;
    var $v1_0;
    var $198 = $186 & 65535;
    var $199 = $186 >>> 16;
    var $200 = $v1_0 & 65535;
    var $201 = $v1_0 >>> 16;
    var $202 = (i64Math.multiply($198, 0, $200, 0), i64Math.result[0]);
    var $203 = (i64Math.multiply($198, 0, $201, 0), i64Math.result[0]);
    var $204 = (i64Math.multiply($199, 0, $200, 0), i64Math.result[0]);
    var $205 = (i64Math.multiply($199, 0, $201, 0), i64Math.result[0]);
    var $207 = ($202 >>> 16) + $203 | 0;
    var $uadd42 = _llvm_uadd_with_overflow_i32($207, $204);
    var $208 = $uadd42.f0;
    var $209 = $uadd42.f1;
    var $__x317_0 = $209 ? $205 + 65536 | 0 : $205;
    var $212 = $__x317_0 + ($208 >>> 16) | 0;
    var $215 = $208 << 16 | $202 & 65535;
    var $uadd43 = _llvm_uadd_with_overflow_i32($p2_0, $212);
    var $216 = $uadd43.f0;
    var $217 = $uadd43.f1;
    if ($217) {
      __label__ = 37;
      break;
    } else {
      var $v1_1 = $v1_0;
      __label__ = 39;
      break;
    }
   case 37:
    var $219 = $v1_0 - 1 | 0;
    if ($216 >>> 0 < $148 >>> 0) {
      var $v1_1 = $219;
      __label__ = 39;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $_104 = $216 >>> 0 <= $148 >>> 0 & $215 >>> 0 < $186 >>> 0 ? $219 : $v1_0 - 2 | 0;
    var $v1_1 = $_104;
    __label__ = 39;
    break;
   case 39:
    var $v1_1;
    HEAP32[$dinv >> 2] = $v1_1;
    var $227 = ___gmpn_dcpi1_div_q($qp, $scratch, $35, $44, $dn, $dinv);
    var $qh_0 = $227;
    __label__ = 44;
    break;
   case 40:
    var $229 = ___gmpn_mu_div_q_itch($35, $dn, 0);
    var $230 = $229 << 2;
    if ($230 >>> 0 < 65536) {
      __label__ = 41;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 41:
    var $233 = STACKTOP;
    STACKTOP += $230;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $237 = $233;
    __label__ = 43;
    break;
   case 42:
    var $235 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $230);
    var $237 = $235;
    __label__ = 43;
    break;
   case 43:
    var $237;
    var $239 = ___gmpn_mu_div_q($qp, $scratch, $35, $44, $dn, $237);
    var $qh_0 = $239;
    __label__ = 44;
    break;
   case 44:
    var $qh_0;
    if (($31 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    HEAP32[$qp + ($6 << 2) >> 2] = $qh_0;
    __label__ = 182;
    break;
   case 46:
    if (($qh_0 | 0) != 0 & ($35 - $dn | 0) > 0) {
      __label__ = 181;
      break;
    } else {
      __label__ = 182;
      break;
    }
   case 47:
    if (($scratch | 0) == ($np | 0) | ($nn | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    var $252 = $nn - 1 | 0;
    var $253 = HEAP32[$np >> 2];
    if (($252 | 0) == 0) {
      var $__dst_1 = $scratch;
      var $__x_1 = $253;
      __label__ = 51;
      break;
    } else {
      var $__n_0 = $252;
      var $__dst_0 = $scratch;
      var $np_pn = $np;
      var $__x_0 = $253;
      __label__ = 49;
      break;
    }
   case 49:
    var $__x_0;
    var $np_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $np_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $256 = HEAP32[$__src_0 >> 2];
    var $257 = $__n_0 - 1 | 0;
    if (($257 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      var $__n_0 = $257;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $np_pn = $__src_0;
      var $__x_0 = $256;
      __label__ = 49;
      break;
    }
   case 50:
    var $__dst_1 = $scratch + ($252 << 2) | 0;
    var $__x_1 = $256;
    __label__ = 51;
    break;
   case 51:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 52;
    break;
   case 52:
    if (($dn | 0) == 2) {
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 53:
    var $263 = ___gmpn_divrem_2($qp, 0, $scratch, $nn, $dp);
    var $qh_1 = $263;
    __label__ = 83;
    break;
   case 54:
    if (($dn | 0) > 199 & ($6 | 0) > 199) {
      __label__ = 66;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 55:
    var $268 = $13 >>> 16;
    var $269 = $13 & 65535;
    var $270 = $13 ^ -1;
    var $271 = Math.floor(($270 >>> 0) / ($268 >>> 0));
    var $272 = (i64Math.multiply($271, 0, $268, 0), i64Math.result[0]);
    var $273 = $270 - $272 | 0;
    var $274 = (i64Math.multiply($271, 0, $269, 0), i64Math.result[0]);
    var $276 = $273 << 16 | 65535;
    if ($276 >>> 0 < $274 >>> 0) {
      __label__ = 56;
      break;
    } else {
      var $__q133_0 = $271;
      var $__r135_0 = $276;
      __label__ = 58;
      break;
    }
   case 56:
    var $279 = $271 - 1 | 0;
    var $uadd30 = _llvm_uadd_with_overflow_i32($276, $13);
    var $280 = $uadd30.f0;
    var $281 = $uadd30.f1;
    if ($280 >>> 0 < $274 >>> 0 & ($281 ^ 1)) {
      __label__ = 57;
      break;
    } else {
      var $__q133_0 = $279;
      var $__r135_0 = $280;
      __label__ = 58;
      break;
    }
   case 57:
    var $__q133_0 = $271 - 2 | 0;
    var $__r135_0 = $280 + $13 | 0;
    __label__ = 58;
    break;
   case 58:
    var $__r135_0;
    var $__q133_0;
    var $287 = $__r135_0 - $274 | 0;
    var $288 = Math.floor(($287 >>> 0) / ($268 >>> 0));
    var $289 = (i64Math.multiply($288, 0, $268, 0), i64Math.result[0]);
    var $290 = $287 - $289 | 0;
    var $291 = (i64Math.multiply($288, 0, $269, 0), i64Math.result[0]);
    var $293 = $290 << 16 | 65535;
    if ($293 >>> 0 < $291 >>> 0) {
      __label__ = 59;
      break;
    } else {
      var $__q034_0 = $288;
      __label__ = 60;
      break;
    }
   case 59:
    var $uadd29 = _llvm_uadd_with_overflow_i32($293, $13);
    var $296 = $uadd29.f1;
    var $297 = $uadd29.f0;
    var $_89_v = $297 >>> 0 < $291 >>> 0 & ($296 ^ 1) ? -2 : -1;
    var $__q034_0 = $_89_v + $288 | 0;
    __label__ = 60;
    break;
   case 60:
    var $__q034_0;
    var $301 = $__q034_0 | $__q133_0 << 16;
    var $302 = (i64Math.multiply($301, 0, $13, 0), i64Math.result[0]);
    var $305 = HEAPU32[$dp + ($dn - 2 << 2) >> 2];
    var $uadd26 = _llvm_uadd_with_overflow_i32($302, $305);
    var $306 = $uadd26.f0;
    var $307 = $uadd26.f1;
    if ($307) {
      __label__ = 61;
      break;
    } else {
      var $v25_0 = $301;
      var $p26_0 = $306;
      __label__ = 62;
      break;
    }
   case 61:
    var $310 = ($306 >>> 0 >= $13 >>> 0) << 31 >> 31;
    var $v25_0 = $301 - 1 + $310 | 0;
    var $p26_0 = $306 - $13 - ($310 & $13) | 0;
    __label__ = 62;
    break;
   case 62:
    var $p26_0;
    var $v25_0;
    var $317 = $305 & 65535;
    var $318 = $305 >>> 16;
    var $319 = $v25_0 & 65535;
    var $320 = $v25_0 >>> 16;
    var $321 = (i64Math.multiply($317, 0, $319, 0), i64Math.result[0]);
    var $322 = (i64Math.multiply($317, 0, $320, 0), i64Math.result[0]);
    var $323 = (i64Math.multiply($318, 0, $319, 0), i64Math.result[0]);
    var $324 = (i64Math.multiply($318, 0, $320, 0), i64Math.result[0]);
    var $326 = ($321 >>> 16) + $322 | 0;
    var $uadd27 = _llvm_uadd_with_overflow_i32($326, $323);
    var $327 = $uadd27.f0;
    var $328 = $uadd27.f1;
    var $__x341_0 = $328 ? $324 + 65536 | 0 : $324;
    var $331 = $__x341_0 + ($327 >>> 16) | 0;
    var $334 = $327 << 16 | $321 & 65535;
    var $uadd28 = _llvm_uadd_with_overflow_i32($p26_0, $331);
    var $335 = $uadd28.f0;
    var $336 = $uadd28.f1;
    if ($336) {
      __label__ = 63;
      break;
    } else {
      var $v25_1 = $v25_0;
      __label__ = 65;
      break;
    }
   case 63:
    var $338 = $v25_0 - 1 | 0;
    if ($335 >>> 0 < $13 >>> 0) {
      var $v25_1 = $338;
      __label__ = 65;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $_105 = $335 >>> 0 <= $13 >>> 0 & $334 >>> 0 < $305 >>> 0 ? $338 : $v25_0 - 2 | 0;
    var $v25_1 = $_105;
    __label__ = 65;
    break;
   case 65:
    var $v25_1;
    HEAP32[$dinv >> 2] = $v25_1;
    var $346 = ___gmpn_sbpi1_div_q($qp, $scratch, $nn, $dp, $dn, $v25_1);
    var $qh_1 = $346;
    __label__ = 83;
    break;
   case 66:
    if (($nn | 0) > 3999) {
      __label__ = 67;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 67:
    var $350 = $dn | 0;
    var $352 = $nn | 0;
    if ($350 * 3600 + $352 * 200 > $350 * $352) {
      __label__ = 68;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 68:
    var $358 = $13 >>> 16;
    var $359 = $13 & 65535;
    var $360 = $13 ^ -1;
    var $361 = Math.floor(($360 >>> 0) / ($358 >>> 0));
    var $362 = (i64Math.multiply($361, 0, $358, 0), i64Math.result[0]);
    var $363 = $360 - $362 | 0;
    var $364 = (i64Math.multiply($361, 0, $359, 0), i64Math.result[0]);
    var $366 = $363 << 16 | 65535;
    if ($366 >>> 0 < $364 >>> 0) {
      __label__ = 69;
      break;
    } else {
      var $__r158_0 = $366;
      var $__q156_0 = $361;
      __label__ = 71;
      break;
    }
   case 69:
    var $369 = $361 - 1 | 0;
    var $uadd35 = _llvm_uadd_with_overflow_i32($366, $13);
    var $370 = $uadd35.f0;
    var $371 = $uadd35.f1;
    if ($370 >>> 0 < $364 >>> 0 & ($371 ^ 1)) {
      __label__ = 70;
      break;
    } else {
      var $__r158_0 = $370;
      var $__q156_0 = $369;
      __label__ = 71;
      break;
    }
   case 70:
    var $__r158_0 = $370 + $13 | 0;
    var $__q156_0 = $361 - 2 | 0;
    __label__ = 71;
    break;
   case 71:
    var $__q156_0;
    var $__r158_0;
    var $377 = $__r158_0 - $364 | 0;
    var $378 = Math.floor(($377 >>> 0) / ($358 >>> 0));
    var $379 = (i64Math.multiply($378, 0, $358, 0), i64Math.result[0]);
    var $380 = $377 - $379 | 0;
    var $381 = (i64Math.multiply($378, 0, $359, 0), i64Math.result[0]);
    var $383 = $380 << 16 | 65535;
    if ($383 >>> 0 < $381 >>> 0) {
      __label__ = 72;
      break;
    } else {
      var $__q057_0 = $378;
      __label__ = 73;
      break;
    }
   case 72:
    var $uadd34 = _llvm_uadd_with_overflow_i32($383, $13);
    var $386 = $uadd34.f1;
    var $387 = $uadd34.f0;
    var $_90_v = $387 >>> 0 < $381 >>> 0 & ($386 ^ 1) ? -2 : -1;
    var $__q057_0 = $_90_v + $378 | 0;
    __label__ = 73;
    break;
   case 73:
    var $__q057_0;
    var $391 = $__q057_0 | $__q156_0 << 16;
    var $392 = (i64Math.multiply($391, 0, $13, 0), i64Math.result[0]);
    var $395 = HEAPU32[$dp + ($dn - 2 << 2) >> 2];
    var $uadd31 = _llvm_uadd_with_overflow_i32($392, $395);
    var $396 = $uadd31.f0;
    var $397 = $uadd31.f1;
    if ($397) {
      __label__ = 74;
      break;
    } else {
      var $p49_0 = $396;
      var $v48_0 = $391;
      __label__ = 75;
      break;
    }
   case 74:
    var $400 = ($396 >>> 0 >= $13 >>> 0) << 31 >> 31;
    var $p49_0 = $396 - $13 - ($400 & $13) | 0;
    var $v48_0 = $391 - 1 + $400 | 0;
    __label__ = 75;
    break;
   case 75:
    var $v48_0;
    var $p49_0;
    var $407 = $395 & 65535;
    var $408 = $395 >>> 16;
    var $409 = $v48_0 & 65535;
    var $410 = $v48_0 >>> 16;
    var $411 = (i64Math.multiply($407, 0, $409, 0), i64Math.result[0]);
    var $412 = (i64Math.multiply($407, 0, $410, 0), i64Math.result[0]);
    var $413 = (i64Math.multiply($408, 0, $409, 0), i64Math.result[0]);
    var $414 = (i64Math.multiply($408, 0, $410, 0), i64Math.result[0]);
    var $416 = ($411 >>> 16) + $412 | 0;
    var $uadd32 = _llvm_uadd_with_overflow_i32($416, $413);
    var $417 = $uadd32.f0;
    var $418 = $uadd32.f1;
    var $__x364_0 = $418 ? $414 + 65536 | 0 : $414;
    var $421 = $__x364_0 + ($417 >>> 16) | 0;
    var $424 = $417 << 16 | $411 & 65535;
    var $uadd33 = _llvm_uadd_with_overflow_i32($p49_0, $421);
    var $425 = $uadd33.f0;
    var $426 = $uadd33.f1;
    if ($426) {
      __label__ = 76;
      break;
    } else {
      var $v48_1 = $v48_0;
      __label__ = 78;
      break;
    }
   case 76:
    var $428 = $v48_0 - 1 | 0;
    if ($425 >>> 0 < $13 >>> 0) {
      var $v48_1 = $428;
      __label__ = 78;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    var $_106 = $425 >>> 0 <= $13 >>> 0 & $424 >>> 0 < $395 >>> 0 ? $428 : $v48_0 - 2 | 0;
    var $v48_1 = $_106;
    __label__ = 78;
    break;
   case 78:
    var $v48_1;
    HEAP32[$dinv >> 2] = $v48_1;
    var $436 = ___gmpn_dcpi1_div_q($qp, $scratch, $nn, $dp, $dn, $dinv);
    var $qh_1 = $436;
    __label__ = 83;
    break;
   case 79:
    var $438 = ___gmpn_mu_div_q_itch($nn, $dn, 0);
    var $439 = $438 << 2;
    if ($439 >>> 0 < 65536) {
      __label__ = 80;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 80:
    var $442 = STACKTOP;
    STACKTOP += $439;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $446 = $442;
    __label__ = 82;
    break;
   case 81:
    var $444 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $439);
    var $446 = $444;
    __label__ = 82;
    break;
   case 82:
    var $446;
    var $448 = ___gmpn_mu_div_q($qp, $np, $nn, $dp, $dn, $446);
    var $qh_1 = $448;
    __label__ = 83;
    break;
   case 83:
    var $qh_1;
    HEAP32[$qp + ($6 << 2) >> 2] = $qh_1;
    __label__ = 182;
    break;
   case 84:
    var $452 = $6 + 2 | 0;
    var $453 = $452 << 2;
    var $454 = $453 >>> 0 < 65536;
    if ($454) {
      __label__ = 85;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 85:
    var $456 = STACKTOP;
    STACKTOP += $453;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $460 = $456;
    __label__ = 87;
    break;
   case 86:
    var $458 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $453);
    var $460 = $458;
    __label__ = 87;
    break;
   case 87:
    var $460;
    var $461 = $460;
    var $462 = $7 << 1;
    var $463 = $462 | 1;
    if (($scratch | 0) == ($np | 0)) {
      __label__ = 88;
      break;
    } else {
      var $new_np_0 = $scratch;
      __label__ = 92;
      break;
    }
   case 88:
    var $467 = ($463 << 2) + 4 | 0;
    if ($467 >>> 0 < 65536) {
      __label__ = 89;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 89:
    var $470 = STACKTOP;
    STACKTOP += $467;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $474 = $470;
    __label__ = 91;
    break;
   case 90:
    var $472 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $467);
    var $474 = $472;
    __label__ = 91;
    break;
   case 91:
    var $474;
    var $new_np_0 = $474;
    __label__ = 92;
    break;
   case 92:
    var $new_np_0;
    var $477 = $dn - 1 | 0;
    var $479 = HEAPU32[$dp + ($477 << 2) >> 2];
    if (($479 | 0) > -1) {
      __label__ = 93;
      break;
    } else {
      __label__ = 132;
      break;
    }
   case 93:
    if ($479 >>> 0 < 65536) {
      __label__ = 94;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 94:
    var $485 = $479 >>> 0 < 256 ? 1 : 9;
    var $490 = $485;
    __label__ = 96;
    break;
   case 95:
    var $488 = $479 >>> 0 < 16777216 ? 17 : 25;
    var $490 = $488;
    __label__ = 96;
    break;
   case 96:
    var $490;
    var $493 = STRING_TABLE.___gmpn_clz_tab + ($479 >>> ($490 >>> 0)) | 0;
    var $496 = 33 - $490 - (HEAPU8[$493] & 255) | 0;
    var $497 = $np + ($nn - $463 << 2) | 0;
    var $498 = ___gmpn_lshift($new_np_0, $497, $463, $496);
    HEAP32[$new_np_0 + ($463 << 2) >> 2] = $498;
    var $502 = (($498 | 0) != 0 & 1) + $463 | 0;
    if ($454) {
      __label__ = 97;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 97:
    var $504 = STACKTOP;
    STACKTOP += $453;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $508 = $504;
    __label__ = 99;
    break;
   case 98:
    var $506 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $453);
    var $508 = $506;
    __label__ = 99;
    break;
   case 99:
    var $508;
    var $509 = $508;
    var $511 = $dp + ($dn - 2 - $6 << 2) | 0;
    var $512 = ___gmpn_lshift($509, $511, $452, $496);
    var $519 = HEAP32[$509 >> 2] | HEAPU32[$dp + ($477 + (-2 - $6) << 2) >> 2] >>> ((32 - $496 | 0) >>> 0);
    HEAP32[$509 >> 2] = $519;
    if (($nn | 0) == ($dn | 0)) {
      __label__ = 100;
      break;
    } else {
      __label__ = 101;
      break;
    }
   case 100:
    var $522 = ___gmpn_divrem_2($461, 0, $new_np_0, $502, $509);
    var $qh_2 = $522;
    __label__ = 129;
    break;
   case 101:
    if (($7 | 0) > 198) {
      __label__ = 113;
      break;
    } else {
      __label__ = 102;
      break;
    }
   case 102:
    var $527 = HEAPU32[$509 + ($7 << 2) >> 2];
    var $528 = $527 >>> 16;
    var $529 = $527 & 65535;
    var $530 = $527 ^ -1;
    var $531 = Math.floor(($530 >>> 0) / ($528 >>> 0));
    var $532 = (i64Math.multiply($531, 0, $528, 0), i64Math.result[0]);
    var $533 = $530 - $532 | 0;
    var $534 = (i64Math.multiply($531, 0, $529, 0), i64Math.result[0]);
    var $536 = $533 << 16 | 65535;
    if ($536 >>> 0 < $534 >>> 0) {
      __label__ = 103;
      break;
    } else {
      var $__r185_0 = $536;
      var $__q183_0 = $531;
      __label__ = 105;
      break;
    }
   case 103:
    var $539 = $531 - 1 | 0;
    var $uadd20 = _llvm_uadd_with_overflow_i32($536, $527);
    var $540 = $uadd20.f0;
    var $541 = $uadd20.f1;
    if ($540 >>> 0 < $534 >>> 0 & ($541 ^ 1)) {
      __label__ = 104;
      break;
    } else {
      var $__r185_0 = $540;
      var $__q183_0 = $539;
      __label__ = 105;
      break;
    }
   case 104:
    var $__r185_0 = $540 + $527 | 0;
    var $__q183_0 = $531 - 2 | 0;
    __label__ = 105;
    break;
   case 105:
    var $__q183_0;
    var $__r185_0;
    var $547 = $__r185_0 - $534 | 0;
    var $548 = Math.floor(($547 >>> 0) / ($528 >>> 0));
    var $549 = (i64Math.multiply($548, 0, $528, 0), i64Math.result[0]);
    var $550 = $547 - $549 | 0;
    var $551 = (i64Math.multiply($548, 0, $529, 0), i64Math.result[0]);
    var $553 = $550 << 16 | 65535;
    if ($553 >>> 0 < $551 >>> 0) {
      __label__ = 106;
      break;
    } else {
      var $__q084_0 = $548;
      __label__ = 107;
      break;
    }
   case 106:
    var $uadd19 = _llvm_uadd_with_overflow_i32($553, $527);
    var $556 = $uadd19.f1;
    var $557 = $uadd19.f0;
    var $_91_v = $557 >>> 0 < $551 >>> 0 & ($556 ^ 1) ? -2 : -1;
    var $__q084_0 = $_91_v + $548 | 0;
    __label__ = 107;
    break;
   case 107:
    var $__q084_0;
    var $561 = $__q084_0 | $__q183_0 << 16;
    var $562 = (i64Math.multiply($527, 0, $561, 0), i64Math.result[0]);
    var $564 = HEAPU32[$509 + ($6 << 2) >> 2];
    var $uadd16 = _llvm_uadd_with_overflow_i32($562, $564);
    var $565 = $uadd16.f0;
    var $566 = $uadd16.f1;
    if ($566) {
      __label__ = 108;
      break;
    } else {
      var $p76_0 = $565;
      var $v75_0 = $561;
      __label__ = 109;
      break;
    }
   case 108:
    var $569 = ($565 >>> 0 >= $527 >>> 0) << 31 >> 31;
    var $p76_0 = $565 - $527 - ($569 & $527) | 0;
    var $v75_0 = $561 - 1 + $569 | 0;
    __label__ = 109;
    break;
   case 109:
    var $v75_0;
    var $p76_0;
    var $576 = $564 & 65535;
    var $577 = $564 >>> 16;
    var $578 = $v75_0 & 65535;
    var $579 = $v75_0 >>> 16;
    var $580 = (i64Math.multiply($576, 0, $578, 0), i64Math.result[0]);
    var $581 = (i64Math.multiply($576, 0, $579, 0), i64Math.result[0]);
    var $582 = (i64Math.multiply($577, 0, $578, 0), i64Math.result[0]);
    var $583 = (i64Math.multiply($577, 0, $579, 0), i64Math.result[0]);
    var $585 = ($580 >>> 16) + $581 | 0;
    var $uadd17 = _llvm_uadd_with_overflow_i32($585, $582);
    var $586 = $uadd17.f0;
    var $587 = $uadd17.f1;
    var $__x391_0 = $587 ? $583 + 65536 | 0 : $583;
    var $590 = $__x391_0 + ($586 >>> 16) | 0;
    var $593 = $586 << 16 | $580 & 65535;
    var $uadd18 = _llvm_uadd_with_overflow_i32($p76_0, $590);
    var $594 = $uadd18.f0;
    var $595 = $uadd18.f1;
    if ($595) {
      __label__ = 110;
      break;
    } else {
      var $v75_1 = $v75_0;
      __label__ = 112;
      break;
    }
   case 110:
    var $597 = $v75_0 - 1 | 0;
    if ($594 >>> 0 < $527 >>> 0) {
      var $v75_1 = $597;
      __label__ = 112;
      break;
    } else {
      __label__ = 111;
      break;
    }
   case 111:
    var $_107 = $594 >>> 0 <= $527 >>> 0 & $593 >>> 0 < $564 >>> 0 ? $597 : $v75_0 - 2 | 0;
    var $v75_1 = $_107;
    __label__ = 112;
    break;
   case 112:
    var $v75_1;
    HEAP32[$dinv >> 2] = $v75_1;
    var $605 = ___gmpn_sbpi1_divappr_q($461, $new_np_0, $502, $509, $452, $v75_1);
    var $qh_2 = $605;
    __label__ = 129;
    break;
   case 113:
    if (($7 | 0) > 1998) {
      __label__ = 125;
      break;
    } else {
      __label__ = 114;
      break;
    }
   case 114:
    var $610 = HEAPU32[$509 + ($7 << 2) >> 2];
    var $611 = $610 >>> 16;
    var $612 = $610 & 65535;
    var $613 = $610 ^ -1;
    var $614 = Math.floor(($613 >>> 0) / ($611 >>> 0));
    var $615 = (i64Math.multiply($614, 0, $611, 0), i64Math.result[0]);
    var $616 = $613 - $615 | 0;
    var $617 = (i64Math.multiply($614, 0, $612, 0), i64Math.result[0]);
    var $619 = $616 << 16 | 65535;
    if ($619 >>> 0 < $617 >>> 0) {
      __label__ = 115;
      break;
    } else {
      var $__r1108_0 = $619;
      var $__q1106_0 = $614;
      __label__ = 117;
      break;
    }
   case 115:
    var $622 = $614 - 1 | 0;
    var $uadd25 = _llvm_uadd_with_overflow_i32($619, $610);
    var $623 = $uadd25.f0;
    var $624 = $uadd25.f1;
    if ($623 >>> 0 < $617 >>> 0 & ($624 ^ 1)) {
      __label__ = 116;
      break;
    } else {
      var $__r1108_0 = $623;
      var $__q1106_0 = $622;
      __label__ = 117;
      break;
    }
   case 116:
    var $__r1108_0 = $623 + $610 | 0;
    var $__q1106_0 = $614 - 2 | 0;
    __label__ = 117;
    break;
   case 117:
    var $__q1106_0;
    var $__r1108_0;
    var $630 = $__r1108_0 - $617 | 0;
    var $631 = Math.floor(($630 >>> 0) / ($611 >>> 0));
    var $632 = (i64Math.multiply($631, 0, $611, 0), i64Math.result[0]);
    var $633 = $630 - $632 | 0;
    var $634 = (i64Math.multiply($631, 0, $612, 0), i64Math.result[0]);
    var $636 = $633 << 16 | 65535;
    if ($636 >>> 0 < $634 >>> 0) {
      __label__ = 118;
      break;
    } else {
      var $__q0107_0 = $631;
      __label__ = 119;
      break;
    }
   case 118:
    var $uadd24 = _llvm_uadd_with_overflow_i32($636, $610);
    var $639 = $uadd24.f1;
    var $640 = $uadd24.f0;
    var $_92_v = $640 >>> 0 < $634 >>> 0 & ($639 ^ 1) ? -2 : -1;
    var $__q0107_0 = $_92_v + $631 | 0;
    __label__ = 119;
    break;
   case 119:
    var $__q0107_0;
    var $644 = $__q0107_0 | $__q1106_0 << 16;
    var $645 = (i64Math.multiply($610, 0, $644, 0), i64Math.result[0]);
    var $647 = HEAPU32[$509 + ($6 << 2) >> 2];
    var $uadd21 = _llvm_uadd_with_overflow_i32($645, $647);
    var $648 = $uadd21.f0;
    var $649 = $uadd21.f1;
    if ($649) {
      __label__ = 120;
      break;
    } else {
      var $p99_0 = $648;
      var $v98_0 = $644;
      __label__ = 121;
      break;
    }
   case 120:
    var $652 = ($648 >>> 0 >= $610 >>> 0) << 31 >> 31;
    var $p99_0 = $648 - $610 - ($652 & $610) | 0;
    var $v98_0 = $644 - 1 + $652 | 0;
    __label__ = 121;
    break;
   case 121:
    var $v98_0;
    var $p99_0;
    var $659 = $647 & 65535;
    var $660 = $647 >>> 16;
    var $661 = $v98_0 & 65535;
    var $662 = $v98_0 >>> 16;
    var $663 = (i64Math.multiply($659, 0, $661, 0), i64Math.result[0]);
    var $664 = (i64Math.multiply($659, 0, $662, 0), i64Math.result[0]);
    var $665 = (i64Math.multiply($660, 0, $661, 0), i64Math.result[0]);
    var $666 = (i64Math.multiply($660, 0, $662, 0), i64Math.result[0]);
    var $668 = ($663 >>> 16) + $664 | 0;
    var $uadd22 = _llvm_uadd_with_overflow_i32($668, $665);
    var $669 = $uadd22.f0;
    var $670 = $uadd22.f1;
    var $__x3114_0 = $670 ? $666 + 65536 | 0 : $666;
    var $673 = $__x3114_0 + ($669 >>> 16) | 0;
    var $676 = $669 << 16 | $663 & 65535;
    var $uadd23 = _llvm_uadd_with_overflow_i32($p99_0, $673);
    var $677 = $uadd23.f0;
    var $678 = $uadd23.f1;
    if ($678) {
      __label__ = 122;
      break;
    } else {
      var $v98_1 = $v98_0;
      __label__ = 124;
      break;
    }
   case 122:
    var $680 = $v98_0 - 1 | 0;
    if ($677 >>> 0 < $610 >>> 0) {
      var $v98_1 = $680;
      __label__ = 124;
      break;
    } else {
      __label__ = 123;
      break;
    }
   case 123:
    var $_108 = $677 >>> 0 <= $610 >>> 0 & $676 >>> 0 < $647 >>> 0 ? $680 : $v98_0 - 2 | 0;
    var $v98_1 = $_108;
    __label__ = 124;
    break;
   case 124:
    var $v98_1;
    HEAP32[$dinv >> 2] = $v98_1;
    var $688 = ___gmpn_dcpi1_divappr_q($461, $new_np_0, $502, $509, $452, $dinv);
    var $qh_2 = $688;
    __label__ = 129;
    break;
   case 125:
    var $690 = ___gmpn_mu_divappr_q_itch($502, $452, 0);
    var $691 = $690 << 2;
    if ($691 >>> 0 < 65536) {
      __label__ = 126;
      break;
    } else {
      __label__ = 127;
      break;
    }
   case 126:
    var $694 = STACKTOP;
    STACKTOP += $691;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $698 = $694;
    __label__ = 128;
    break;
   case 127:
    var $696 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $691);
    var $698 = $696;
    __label__ = 128;
    break;
   case 128:
    var $698;
    var $700 = ___gmpn_mu_divappr_q($461, $new_np_0, $502, $509, $452, $698);
    var $qh_2 = $700;
    __label__ = 129;
    break;
   case 129:
    var $qh_2;
    if (($498 | 0) == 0) {
      __label__ = 130;
      break;
    } else {
      __label__ = 131;
      break;
    }
   case 130:
    HEAP32[$461 + ($7 << 2) >> 2] = $qh_2;
    __label__ = 168;
    break;
   case 131:
    if (($qh_2 | 0) != 0 & ($502 - $452 | 0) > 0) {
      __label__ = 167;
      break;
    } else {
      __label__ = 168;
      break;
    }
   case 132:
    var $_sum = $nn - $463 | 0;
    var $711 = HEAPU32[$np + ($_sum << 2) >> 2];
    if (($462 | 0) == 0) {
      var $__x128_1 = $711;
      var $__dst126_1 = $new_np_0;
      __label__ = 136;
      break;
    } else {
      __label__ = 133;
      break;
    }
   case 133:
    var $717 = ($nn << 1) + 2 - ($dn << 1) | 0;
    var $__x128_0 = $711;
    var $__src127_0 = $np + ($_sum + 1 << 2) | 0;
    var $__dst126_0 = $new_np_0;
    var $__n125_0 = $462;
    __label__ = 134;
    break;
   case 134:
    var $__n125_0;
    var $__dst126_0;
    var $__src127_0;
    var $__x128_0;
    HEAP32[$__dst126_0 >> 2] = $__x128_0;
    var $721 = HEAP32[$__src127_0 >> 2];
    var $722 = $__n125_0 - 1 | 0;
    if (($722 | 0) == 0) {
      __label__ = 135;
      break;
    } else {
      var $__x128_0 = $721;
      var $__src127_0 = $__src127_0 + 4 | 0;
      var $__dst126_0 = $__dst126_0 + 4 | 0;
      var $__n125_0 = $722;
      __label__ = 134;
      break;
    }
   case 135:
    var $__x128_1 = $721;
    var $__dst126_1 = $new_np_0 + ($717 << 2) | 0;
    __label__ = 136;
    break;
   case 136:
    var $__dst126_1;
    var $__x128_1;
    HEAP32[$__dst126_1 >> 2] = $__x128_1;
    var $725 = -2 - $6 | 0;
    var $726 = $dp + ($725 + $dn << 2) | 0;
    if (($nn | 0) == ($dn | 0)) {
      __label__ = 137;
      break;
    } else {
      __label__ = 138;
      break;
    }
   case 137:
    var $729 = ___gmpn_divrem_2($461, 0, $new_np_0, $463, $726);
    var $qh_3 = $729;
    __label__ = 166;
    break;
   case 138:
    if (($7 | 0) > 198) {
      __label__ = 150;
      break;
    } else {
      __label__ = 139;
      break;
    }
   case 139:
    var $733 = $479 >>> 16;
    var $734 = $479 & 65535;
    var $735 = $479 ^ -1;
    var $736 = Math.floor(($735 >>> 0) / ($733 >>> 0));
    var $737 = (i64Math.multiply($736, 0, $733, 0), i64Math.result[0]);
    var $738 = $735 - $737 | 0;
    var $739 = (i64Math.multiply($736, 0, $734, 0), i64Math.result[0]);
    var $741 = $738 << 16 | 65535;
    if ($741 >>> 0 < $739 >>> 0) {
      __label__ = 140;
      break;
    } else {
      var $__r1139_0 = $741;
      var $__q1137_0 = $736;
      __label__ = 142;
      break;
    }
   case 140:
    var $744 = $736 - 1 | 0;
    var $uadd7 = _llvm_uadd_with_overflow_i32($741, $479);
    var $745 = $uadd7.f0;
    var $746 = $uadd7.f1;
    if ($745 >>> 0 < $739 >>> 0 & ($746 ^ 1)) {
      __label__ = 141;
      break;
    } else {
      var $__r1139_0 = $745;
      var $__q1137_0 = $744;
      __label__ = 142;
      break;
    }
   case 141:
    var $__r1139_0 = $745 + $479 | 0;
    var $__q1137_0 = $736 - 2 | 0;
    __label__ = 142;
    break;
   case 142:
    var $__q1137_0;
    var $__r1139_0;
    var $752 = $__r1139_0 - $739 | 0;
    var $753 = Math.floor(($752 >>> 0) / ($733 >>> 0));
    var $754 = (i64Math.multiply($753, 0, $733, 0), i64Math.result[0]);
    var $755 = $752 - $754 | 0;
    var $756 = (i64Math.multiply($753, 0, $734, 0), i64Math.result[0]);
    var $758 = $755 << 16 | 65535;
    if ($758 >>> 0 < $756 >>> 0) {
      __label__ = 143;
      break;
    } else {
      var $__q0138_0 = $753;
      __label__ = 144;
      break;
    }
   case 143:
    var $uadd6 = _llvm_uadd_with_overflow_i32($758, $479);
    var $761 = $uadd6.f1;
    var $762 = $uadd6.f0;
    var $_93_v = $762 >>> 0 < $756 >>> 0 & ($761 ^ 1) ? -2 : -1;
    var $__q0138_0 = $_93_v + $753 | 0;
    __label__ = 144;
    break;
   case 144:
    var $__q0138_0;
    var $766 = $__q0138_0 | $__q1137_0 << 16;
    var $767 = (i64Math.multiply($766, 0, $479, 0), i64Math.result[0]);
    var $769 = HEAPU32[$dp + ($725 + $nn << 2) >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($767, $769);
    var $770 = $uadd.f0;
    var $771 = $uadd.f1;
    if ($771) {
      __label__ = 145;
      break;
    } else {
      var $p130_0 = $770;
      var $v129_0 = $766;
      __label__ = 146;
      break;
    }
   case 145:
    var $774 = ($770 >>> 0 >= $479 >>> 0) << 31 >> 31;
    var $p130_0 = $770 - $479 - ($774 & $479) | 0;
    var $v129_0 = $766 - 1 + $774 | 0;
    __label__ = 146;
    break;
   case 146:
    var $v129_0;
    var $p130_0;
    var $781 = $769 & 65535;
    var $782 = $769 >>> 16;
    var $783 = $v129_0 & 65535;
    var $784 = $v129_0 >>> 16;
    var $785 = (i64Math.multiply($781, 0, $783, 0), i64Math.result[0]);
    var $786 = (i64Math.multiply($781, 0, $784, 0), i64Math.result[0]);
    var $787 = (i64Math.multiply($782, 0, $783, 0), i64Math.result[0]);
    var $788 = (i64Math.multiply($782, 0, $784, 0), i64Math.result[0]);
    var $790 = ($785 >>> 16) + $786 | 0;
    var $uadd4 = _llvm_uadd_with_overflow_i32($790, $787);
    var $791 = $uadd4.f0;
    var $792 = $uadd4.f1;
    var $__x3145_0 = $792 ? $788 + 65536 | 0 : $788;
    var $795 = $__x3145_0 + ($791 >>> 16) | 0;
    var $798 = $791 << 16 | $785 & 65535;
    var $uadd5 = _llvm_uadd_with_overflow_i32($p130_0, $795);
    var $799 = $uadd5.f0;
    var $800 = $uadd5.f1;
    if ($800) {
      __label__ = 147;
      break;
    } else {
      var $v129_1 = $v129_0;
      __label__ = 149;
      break;
    }
   case 147:
    var $802 = $v129_0 - 1 | 0;
    if ($799 >>> 0 < $479 >>> 0) {
      var $v129_1 = $802;
      __label__ = 149;
      break;
    } else {
      __label__ = 148;
      break;
    }
   case 148:
    var $_109 = $799 >>> 0 <= $479 >>> 0 & $798 >>> 0 < $769 >>> 0 ? $802 : $v129_0 - 2 | 0;
    var $v129_1 = $_109;
    __label__ = 149;
    break;
   case 149:
    var $v129_1;
    HEAP32[$dinv >> 2] = $v129_1;
    var $810 = ___gmpn_sbpi1_divappr_q($461, $new_np_0, $463, $726, $452, $v129_1);
    var $qh_3 = $810;
    __label__ = 166;
    break;
   case 150:
    if (($7 | 0) > 1998) {
      __label__ = 162;
      break;
    } else {
      __label__ = 151;
      break;
    }
   case 151:
    var $814 = $479 >>> 16;
    var $815 = $479 & 65535;
    var $816 = $479 ^ -1;
    var $817 = Math.floor(($816 >>> 0) / ($814 >>> 0));
    var $818 = (i64Math.multiply($817, 0, $814, 0), i64Math.result[0]);
    var $819 = $816 - $818 | 0;
    var $820 = (i64Math.multiply($817, 0, $815, 0), i64Math.result[0]);
    var $822 = $819 << 16 | 65535;
    if ($822 >>> 0 < $820 >>> 0) {
      __label__ = 152;
      break;
    } else {
      var $__r1162_0 = $822;
      var $__q1160_0 = $817;
      __label__ = 154;
      break;
    }
   case 152:
    var $825 = $817 - 1 | 0;
    var $uadd13 = _llvm_uadd_with_overflow_i32($822, $479);
    var $826 = $uadd13.f0;
    var $827 = $uadd13.f1;
    if ($826 >>> 0 < $820 >>> 0 & ($827 ^ 1)) {
      __label__ = 153;
      break;
    } else {
      var $__r1162_0 = $826;
      var $__q1160_0 = $825;
      __label__ = 154;
      break;
    }
   case 153:
    var $__r1162_0 = $826 + $479 | 0;
    var $__q1160_0 = $817 - 2 | 0;
    __label__ = 154;
    break;
   case 154:
    var $__q1160_0;
    var $__r1162_0;
    var $833 = $__r1162_0 - $820 | 0;
    var $834 = Math.floor(($833 >>> 0) / ($814 >>> 0));
    var $835 = (i64Math.multiply($834, 0, $814, 0), i64Math.result[0]);
    var $836 = $833 - $835 | 0;
    var $837 = (i64Math.multiply($834, 0, $815, 0), i64Math.result[0]);
    var $839 = $836 << 16 | 65535;
    if ($839 >>> 0 < $837 >>> 0) {
      __label__ = 155;
      break;
    } else {
      var $__q0161_0 = $834;
      __label__ = 156;
      break;
    }
   case 155:
    var $uadd12 = _llvm_uadd_with_overflow_i32($839, $479);
    var $842 = $uadd12.f1;
    var $843 = $uadd12.f0;
    var $_94_v = $843 >>> 0 < $837 >>> 0 & ($842 ^ 1) ? -2 : -1;
    var $__q0161_0 = $_94_v + $834 | 0;
    __label__ = 156;
    break;
   case 156:
    var $__q0161_0;
    var $847 = $__q0161_0 | $__q1160_0 << 16;
    var $848 = (i64Math.multiply($847, 0, $479, 0), i64Math.result[0]);
    var $850 = HEAPU32[$dp + ($725 + $nn << 2) >> 2];
    var $uadd9 = _llvm_uadd_with_overflow_i32($848, $850);
    var $851 = $uadd9.f0;
    var $852 = $uadd9.f1;
    if ($852) {
      __label__ = 157;
      break;
    } else {
      var $p153_0 = $851;
      var $v152_0 = $847;
      __label__ = 158;
      break;
    }
   case 157:
    var $855 = ($851 >>> 0 >= $479 >>> 0) << 31 >> 31;
    var $p153_0 = $851 - $479 - ($855 & $479) | 0;
    var $v152_0 = $847 - 1 + $855 | 0;
    __label__ = 158;
    break;
   case 158:
    var $v152_0;
    var $p153_0;
    var $862 = $850 & 65535;
    var $863 = $850 >>> 16;
    var $864 = $v152_0 & 65535;
    var $865 = $v152_0 >>> 16;
    var $866 = (i64Math.multiply($862, 0, $864, 0), i64Math.result[0]);
    var $867 = (i64Math.multiply($862, 0, $865, 0), i64Math.result[0]);
    var $868 = (i64Math.multiply($863, 0, $864, 0), i64Math.result[0]);
    var $869 = (i64Math.multiply($863, 0, $865, 0), i64Math.result[0]);
    var $871 = ($866 >>> 16) + $867 | 0;
    var $uadd10 = _llvm_uadd_with_overflow_i32($871, $868);
    var $872 = $uadd10.f0;
    var $873 = $uadd10.f1;
    var $__x3168_0 = $873 ? $869 + 65536 | 0 : $869;
    var $876 = $__x3168_0 + ($872 >>> 16) | 0;
    var $879 = $872 << 16 | $866 & 65535;
    var $uadd11 = _llvm_uadd_with_overflow_i32($p153_0, $876);
    var $880 = $uadd11.f0;
    var $881 = $uadd11.f1;
    if ($881) {
      __label__ = 159;
      break;
    } else {
      var $v152_1 = $v152_0;
      __label__ = 161;
      break;
    }
   case 159:
    var $883 = $v152_0 - 1 | 0;
    if ($880 >>> 0 < $479 >>> 0) {
      var $v152_1 = $883;
      __label__ = 161;
      break;
    } else {
      __label__ = 160;
      break;
    }
   case 160:
    var $_110 = $880 >>> 0 <= $479 >>> 0 & $879 >>> 0 < $850 >>> 0 ? $883 : $v152_0 - 2 | 0;
    var $v152_1 = $_110;
    __label__ = 161;
    break;
   case 161:
    var $v152_1;
    HEAP32[$dinv >> 2] = $v152_1;
    var $891 = ___gmpn_dcpi1_divappr_q($461, $new_np_0, $463, $726, $452, $dinv);
    var $qh_3 = $891;
    __label__ = 166;
    break;
   case 162:
    var $893 = ___gmpn_mu_divappr_q_itch($463, $452, 0);
    var $894 = $893 << 2;
    if ($894 >>> 0 < 65536) {
      __label__ = 163;
      break;
    } else {
      __label__ = 164;
      break;
    }
   case 163:
    var $897 = STACKTOP;
    STACKTOP += $894;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $901 = $897;
    __label__ = 165;
    break;
   case 164:
    var $899 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $894);
    var $901 = $899;
    __label__ = 165;
    break;
   case 165:
    var $901;
    var $903 = ___gmpn_mu_divappr_q($461, $new_np_0, $463, $726, $452, $901);
    var $qh_3 = $903;
    __label__ = 166;
    break;
   case 166:
    var $qh_3;
    HEAP32[$461 + ($7 << 2) >> 2] = $qh_3;
    __label__ = 168;
    break;
   case 167:
    var $908 = $nn + 2 - $dn << 2;
    _memset($460, -1, $908, 4);
    __label__ = 168;
    break;
   case 168:
    if (($7 | 0) == 0) {
      __label__ = 174;
      break;
    } else {
      __label__ = 169;
      break;
    }
   case 169:
    var $913 = HEAP32[$460 + 4 >> 2];
    if (($nn | 0) == ($dn | 0)) {
      var $__x180_1 = $913;
      var $__dst178_1 = $qp;
      __label__ = 173;
      break;
    } else {
      __label__ = 170;
      break;
    }
   case 170:
    var $__x180_0 = $913;
    var $__src179_0 = $460 + 8 | 0;
    var $__dst178_0 = $qp;
    var $__n177_0 = $6;
    __label__ = 171;
    break;
   case 171:
    var $__n177_0;
    var $__dst178_0;
    var $__src179_0;
    var $__x180_0;
    HEAP32[$__dst178_0 >> 2] = $__x180_0;
    var $920 = HEAP32[$__src179_0 >> 2];
    var $921 = $__n177_0 - 1 | 0;
    if (($921 | 0) == 0) {
      __label__ = 172;
      break;
    } else {
      var $__x180_0 = $920;
      var $__src179_0 = $__src179_0 + 4 | 0;
      var $__dst178_0 = $__dst178_0 + 4 | 0;
      var $__n177_0 = $921;
      __label__ = 171;
      break;
    }
   case 172:
    var $__x180_1 = $920;
    var $__dst178_1 = $qp + ($6 << 2) | 0;
    __label__ = 173;
    break;
   case 173:
    var $__dst178_1;
    var $__x180_1;
    HEAP32[$__dst178_1 >> 2] = $__x180_1;
    __label__ = 174;
    break;
   case 174:
    if (HEAPU32[$461 >> 2] >>> 0 < 5) {
      __label__ = 175;
      break;
    } else {
      __label__ = 182;
      break;
    }
   case 175:
    var $928 = $nn + 1 | 0;
    var $929 = $928 << 2;
    if ($929 >>> 0 < 65536) {
      __label__ = 176;
      break;
    } else {
      __label__ = 177;
      break;
    }
   case 176:
    var $932 = STACKTOP;
    STACKTOP += $929;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $936 = $932;
    __label__ = 178;
    break;
   case 177:
    var $934 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $929);
    var $936 = $934;
    __label__ = 178;
    break;
   case 178:
    var $936;
    var $937 = $936;
    var $940 = ___gmpn_mul($937, $dp, $dn, $460 + 4 | 0, $7);
    if (($928 - ((HEAP32[$937 + ($nn << 2) >> 2] | 0) == 0 & 1) | 0) > ($nn | 0)) {
      var $__p_0 = $qp;
      __label__ = 180;
      break;
    } else {
      __label__ = 179;
      break;
    }
   case 179:
    var $948 = ___gmpn_cmp($np, $937, $nn);
    if (($948 | 0) < 0) {
      var $__p_0 = $qp;
      __label__ = 180;
      break;
    } else {
      __label__ = 182;
      break;
    }
   case 180:
    var $__p_0;
    var $951 = HEAP32[$__p_0 >> 2];
    var $952 = $951 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $952;
    if (($951 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 180;
      break;
    } else {
      __label__ = 182;
      break;
    }
   case 181:
    var $956 = $nn + 1 - $dn << 2;
    _memset($qp145, -1, $956, 4);
    __label__ = 182;
    break;
   case 182:
    var $957 = HEAP32[$__tmp_marker >> 2];
    if (($957 | 0) == 0) {
      __label__ = 184;
      break;
    } else {
      __label__ = 183;
      break;
    }
   case 183:
    ___gmp_tmp_reentrant_free($957);
    __label__ = 184;
    break;
   case 184:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_div_q["X"] = 1;

function ___gmpn_divexact_1($dst, $src, $size, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAPU32[$src >> 2];
    if (($size | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = Math.floor(($1 >>> 0) / ($divisor >>> 0));
    HEAP32[$dst >> 2] = $4;
    __label__ = 15;
    break;
   case 4:
    if (($divisor & 1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $_0 = $divisor;
      var $shift_0 = 0;
      __label__ = 9;
      break;
    }
   case 5:
    var $10 = $divisor & -$divisor;
    if ($10 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $14 = $10 >>> 0 < 256 ? 1 : 9;
    var $19 = $14;
    __label__ = 8;
    break;
   case 7:
    var $17 = $10 >>> 0 < 16777216 ? 17 : 25;
    var $19 = $17;
    __label__ = 8;
    break;
   case 8:
    var $19;
    var $21 = STRING_TABLE.___gmpn_clz_tab + ($10 >>> ($19 >>> 0)) | 0;
    var $25 = $19 - 2 + (HEAPU8[$21] & 255) | 0;
    var $_0 = $divisor >>> ($25 >>> 0);
    var $shift_0 = $25;
    __label__ = 9;
    break;
   case 9:
    var $shift_0;
    var $_0;
    var $30 = STRING_TABLE.___gmp_binvert_limb_table + ($_0 >>> 1 & 127) | 0;
    var $32 = HEAPU8[$30] & 255;
    var $33 = $32 << 1;
    var $34 = (i64Math.multiply($32, 0, $_0, 0), i64Math.result[0]);
    var $35 = (i64Math.multiply($34, 0, $32, 0), i64Math.result[0]);
    var $36 = $33 - $35 | 0;
    var $37 = $36 << 1;
    var $38 = (i64Math.multiply($36, 0, $_0, 0), i64Math.result[0]);
    var $39 = (i64Math.multiply($38, 0, $36, 0), i64Math.result[0]);
    var $40 = $37 - $39 | 0;
    if (($shift_0 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $43 = $size - 1 | 0;
    var $44 = 32 - $shift_0 | 0;
    var $45 = $_0 & 65535;
    var $46 = $_0 >>> 16;
    var $47 = ($43 | 0) > 1;
    var $i_0 = 0;
    var $c_0 = 0;
    var $s_0 = $1;
    __label__ = 11;
    break;
   case 11:
    var $s_0;
    var $c_0;
    var $i_0;
    var $49 = $i_0 + 1 | 0;
    var $51 = HEAPU32[$src + ($49 << 2) >> 2];
    var $54 = $51 << $44 | $s_0 >>> ($shift_0 >>> 0);
    var $55 = $54 - $c_0 | 0;
    var $57 = $55 >>> 0 > $54 >>> 0 & 1;
    var $58 = (i64Math.multiply($55, 0, $40, 0), i64Math.result[0]);
    HEAP32[$dst + ($i_0 << 2) >> 2] = $58;
    var $60 = $58 & 65535;
    var $61 = $58 >>> 16;
    var $62 = (i64Math.multiply($60, 0, $45, 0), i64Math.result[0]);
    var $63 = (i64Math.multiply($60, 0, $46, 0), i64Math.result[0]);
    var $64 = (i64Math.multiply($61, 0, $45, 0), i64Math.result[0]);
    var $65 = (i64Math.multiply($61, 0, $46, 0), i64Math.result[0]);
    var $67 = ($62 >>> 16) + $63 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($67, $64);
    var $68 = $uadd1.f0;
    var $69 = $uadd1.f1;
    var $__x3_0 = $69 ? $65 + 65536 | 0 : $65;
    var $73 = $57 + ($68 >>> 16) + $__x3_0 | 0;
    if (($49 | 0) < ($43 | 0)) {
      var $i_0 = $49;
      var $c_0 = $73;
      var $s_0 = $51;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $smax = $47 ? $43 : 1;
    var $77 = ($51 >>> ($shift_0 >>> 0)) - $73 | 0;
    var $78 = (i64Math.multiply($77, 0, $40, 0), i64Math.result[0]);
    HEAP32[$dst + ($smax << 2) >> 2] = $78;
    __label__ = 15;
    break;
   case 13:
    var $81 = (i64Math.multiply($40, 0, $1, 0), i64Math.result[0]);
    HEAP32[$dst >> 2] = $81;
    var $82 = $_0 & 65535;
    var $83 = $_0 >>> 16;
    var $i_1 = 1;
    var $c_1 = 0;
    var $l_0 = $81;
    __label__ = 14;
    break;
   case 14:
    var $l_0;
    var $c_1;
    var $i_1;
    var $85 = $l_0 & 65535;
    var $86 = $l_0 >>> 16;
    var $87 = (i64Math.multiply($85, 0, $82, 0), i64Math.result[0]);
    var $88 = (i64Math.multiply($85, 0, $83, 0), i64Math.result[0]);
    var $89 = (i64Math.multiply($86, 0, $82, 0), i64Math.result[0]);
    var $90 = (i64Math.multiply($86, 0, $83, 0), i64Math.result[0]);
    var $92 = ($87 >>> 16) + $88 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($92, $89);
    var $93 = $uadd.f0;
    var $94 = $uadd.f1;
    var $__x34_0 = $94 ? $90 + 65536 | 0 : $90;
    var $98 = HEAPU32[$src + ($i_1 << 2) >> 2];
    var $99 = $98 - $c_1 - ($93 >>> 16) - $__x34_0 | 0;
    var $101 = $99 >>> 0 > $98 >>> 0 & 1;
    var $102 = (i64Math.multiply($99, 0, $40, 0), i64Math.result[0]);
    HEAP32[$dst + ($i_1 << 2) >> 2] = $102;
    var $104 = $i_1 + 1 | 0;
    if (($104 | 0) < ($size | 0)) {
      var $i_1 = $104;
      var $c_1 = $101;
      var $l_0 = $102;
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_divexact_1["X"] = 1;

function ___gmpn_divexact_by3c($rp, $up, $un, $c) {
  var $1 = (i64Math.multiply($c, 0, 1431655765, 0), i64Math.result[0]);
  var $2 = ___gmpn_bdiv_dbm1c($rp, $up, $un, 1431655765, $1);
  return $2 & 3;
}

function ___gmpn_divrem($qp, $qxn, $np, $nn, $dp, $dn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $__tmp_marker3 = __stackBase__ + 4;
    if (($dn | 0) == 1) {
      __label__ = 3;
      break;
    } else if (($dn | 0) == 2) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 3:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $2 = $nn + $qxn | 0;
    var $3 = $2 << 2;
    if ($3 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $6 = STACKTOP;
    STACKTOP += $3;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $10 = $6;
    __label__ = 6;
    break;
   case 5:
    var $8 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $3);
    var $10 = $8;
    __label__ = 6;
    break;
   case 6:
    var $10;
    var $11 = $10;
    var $12 = HEAP32[$dp >> 2];
    var $13 = ___gmpn_divrem_1($11, $qxn, $np, $nn, $12);
    HEAP32[$np >> 2] = $13;
    var $14 = $2 - 1 | 0;
    if (($14 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $17 = $2 - 2 | 0;
    var $18 = HEAPU32[$11 >> 2];
    if (($17 | 0) == 0) {
      var $__dst_1 = $qp;
      var $__x_1 = $18;
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $__n_0 = $17;
    var $__dst_0 = $qp;
    var $__src_0 = $10 + 4 | 0;
    var $__x_0 = $18;
    __label__ = 9;
    break;
   case 9:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $25 = HEAP32[$__src_0 >> 2];
    var $26 = $__n_0 - 1 | 0;
    if (($26 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $__n_0 = $26;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $25;
      __label__ = 9;
      break;
    }
   case 10:
    var $__dst_1 = $qp + ($17 << 2) | 0;
    var $__x_1 = $25;
    __label__ = 11;
    break;
   case 11:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 12;
    break;
   case 12:
    var $30 = HEAP32[$11 + ($14 << 2) >> 2];
    var $31 = HEAP32[$__tmp_marker >> 2];
    if (($31 | 0) == 0) {
      var $_0 = $30;
      __label__ = 65;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmp_tmp_reentrant_free($31);
    var $_0 = $30;
    __label__ = 65;
    break;
   case 14:
    var $35 = ___gmpn_divrem_2($qp, $qxn, $np, $nn, $dp);
    var $_0 = $35;
    __label__ = 65;
    break;
   case 15:
    HEAP32[$__tmp_marker3 >> 2] = 0;
    if (($qxn | 0) == 0) {
      __label__ = 44;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $39 = $nn + $qxn | 0;
    var $40 = $39 << 2;
    if ($40 >>> 0 < 65536) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $42 = STACKTOP;
    STACKTOP += $40;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $_ph_in = $42;
    __label__ = 19;
    break;
   case 18:
    var $44 = ___gmp_tmp_reentrant_alloc($__tmp_marker3, $40);
    var $_ph_in = $44;
    __label__ = 19;
    break;
   case 19:
    var $_ph_in;
    var $_ph = $_ph_in;
    var $46 = $qxn << 2;
    _memset($_ph_in, 0, $46, 4);
    if (($nn | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $49 = $nn - 1 | 0;
    var $50 = $_ph + ($qxn << 2) | 0;
    var $51 = HEAPU32[$np >> 2];
    if (($49 | 0) == 0) {
      var $__dst7_1 = $50;
      var $__x9_1 = $51;
      __label__ = 24;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $53 = $39 - 1 | 0;
    var $__n6_0 = $49;
    var $__dst7_0 = $50;
    var $np_pn = $np;
    var $__x9_0 = $51;
    __label__ = 22;
    break;
   case 22:
    var $__x9_0;
    var $np_pn;
    var $__dst7_0;
    var $__n6_0;
    var $__src8_0 = $np_pn + 4 | 0;
    HEAP32[$__dst7_0 >> 2] = $__x9_0;
    var $56 = HEAP32[$__src8_0 >> 2];
    var $57 = $__n6_0 - 1 | 0;
    if (($57 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      var $__n6_0 = $57;
      var $__dst7_0 = $__dst7_0 + 4 | 0;
      var $np_pn = $__src8_0;
      var $__x9_0 = $56;
      __label__ = 22;
      break;
    }
   case 23:
    var $__dst7_1 = $_ph + ($53 << 2) | 0;
    var $__x9_1 = $56;
    __label__ = 24;
    break;
   case 24:
    var $__x9_1;
    var $__dst7_1;
    HEAP32[$__dst7_1 >> 2] = $__x9_1;
    __label__ = 25;
    break;
   case 25:
    var $62 = $nn - $dn + $qxn | 0;
    var $64 = ($62 << 2) + 4 | 0;
    if ($64 >>> 0 < 65536) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $67 = STACKTOP;
    STACKTOP += $64;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $71 = $67;
    __label__ = 28;
    break;
   case 27:
    var $69 = ___gmp_tmp_reentrant_alloc($__tmp_marker3, $64);
    var $71 = $69;
    __label__ = 28;
    break;
   case 28:
    var $71;
    var $72 = $71;
    var $73 = $dn << 2;
    if ($73 >>> 0 < 65536) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $76 = STACKTOP;
    STACKTOP += $73;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $80 = $76;
    __label__ = 31;
    break;
   case 30:
    var $78 = ___gmp_tmp_reentrant_alloc($__tmp_marker3, $73);
    var $80 = $78;
    __label__ = 31;
    break;
   case 31:
    var $80;
    var $81 = $80;
    ___gmpn_tdiv_qr($72, $81, 0, $_ph, $39, $dp, $dn);
    if (($dn | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $84 = $dn - 1 | 0;
    var $85 = HEAPU32[$81 >> 2];
    if (($84 | 0) == 0) {
      var $__dst11_1 = $np;
      var $__x13_1 = $85;
      __label__ = 36;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $__n10_0 = $84;
    var $__dst11_0 = $np;
    var $__src12_0 = $80 + 4 | 0;
    var $__x13_0 = $85;
    __label__ = 34;
    break;
   case 34:
    var $__x13_0;
    var $__src12_0;
    var $__dst11_0;
    var $__n10_0;
    HEAP32[$__dst11_0 >> 2] = $__x13_0;
    var $92 = HEAP32[$__src12_0 >> 2];
    var $93 = $__n10_0 - 1 | 0;
    if (($93 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $__n10_0 = $93;
      var $__dst11_0 = $__dst11_0 + 4 | 0;
      var $__src12_0 = $__src12_0 + 4 | 0;
      var $__x13_0 = $92;
      __label__ = 34;
      break;
    }
   case 35:
    var $__dst11_1 = $np + ($84 << 2) | 0;
    var $__x13_1 = $92;
    __label__ = 36;
    break;
   case 36:
    var $__x13_1;
    var $__dst11_1;
    HEAP32[$__dst11_1 >> 2] = $__x13_1;
    __label__ = 37;
    break;
   case 37:
    if (($62 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $99 = $62 - 1 | 0;
    var $100 = HEAP32[$72 >> 2];
    if (($99 | 0) == 0) {
      var $__x17_1 = $100;
      var $__dst15_1 = $qp;
      __label__ = 42;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $105 = $39 - 1 - $dn | 0;
    var $__x17_0 = $100;
    var $__src16_0 = $71 + 4 | 0;
    var $__n14_0 = $99;
    var $__dst15_0 = $qp;
    __label__ = 40;
    break;
   case 40:
    var $__dst15_0;
    var $__n14_0;
    var $__src16_0;
    var $__x17_0;
    HEAP32[$__dst15_0 >> 2] = $__x17_0;
    var $109 = HEAP32[$__src16_0 >> 2];
    var $110 = $__n14_0 - 1 | 0;
    if (($110 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      var $__x17_0 = $109;
      var $__src16_0 = $__src16_0 + 4 | 0;
      var $__n14_0 = $110;
      var $__dst15_0 = $__dst15_0 + 4 | 0;
      __label__ = 40;
      break;
    }
   case 41:
    var $__x17_1 = $109;
    var $__dst15_1 = $qp + ($105 << 2) | 0;
    __label__ = 42;
    break;
   case 42:
    var $__dst15_1;
    var $__x17_1;
    HEAP32[$__dst15_1 >> 2] = $__x17_1;
    __label__ = 43;
    break;
   case 43:
    var $qhl_0_in = $72 + ($62 << 2) | 0;
    __label__ = 63;
    break;
   case 44:
    var $116 = $nn - $dn | 0;
    var $118 = ($116 << 2) + 4 | 0;
    if ($118 >>> 0 < 65536) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    var $121 = STACKTOP;
    STACKTOP += $118;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $125 = $121;
    __label__ = 47;
    break;
   case 46:
    var $123 = ___gmp_tmp_reentrant_alloc($__tmp_marker3, $118);
    var $125 = $123;
    __label__ = 47;
    break;
   case 47:
    var $125;
    var $126 = $125;
    var $127 = $dn << 2;
    if ($127 >>> 0 < 65536) {
      __label__ = 48;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 48:
    var $130 = STACKTOP;
    STACKTOP += $127;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $134 = $130;
    __label__ = 50;
    break;
   case 49:
    var $132 = ___gmp_tmp_reentrant_alloc($__tmp_marker3, $127);
    var $134 = $132;
    __label__ = 50;
    break;
   case 50:
    var $134;
    var $135 = $134;
    ___gmpn_tdiv_qr($126, $135, 0, $np, $nn, $dp, $dn);
    if (($dn | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    var $138 = $dn - 1 | 0;
    var $139 = HEAPU32[$135 >> 2];
    if (($138 | 0) == 0) {
      var $__x21_1 = $139;
      var $__dst19_1 = $np;
      __label__ = 55;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    var $__x21_0 = $139;
    var $__src20_0 = $134 + 4 | 0;
    var $__dst19_0 = $np;
    var $__n18_0 = $138;
    __label__ = 53;
    break;
   case 53:
    var $__n18_0;
    var $__dst19_0;
    var $__src20_0;
    var $__x21_0;
    HEAP32[$__dst19_0 >> 2] = $__x21_0;
    var $146 = HEAP32[$__src20_0 >> 2];
    var $147 = $__n18_0 - 1 | 0;
    if (($147 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      var $__x21_0 = $146;
      var $__src20_0 = $__src20_0 + 4 | 0;
      var $__dst19_0 = $__dst19_0 + 4 | 0;
      var $__n18_0 = $147;
      __label__ = 53;
      break;
    }
   case 54:
    var $__x21_1 = $146;
    var $__dst19_1 = $np + ($138 << 2) | 0;
    __label__ = 55;
    break;
   case 55:
    var $__dst19_1;
    var $__x21_1;
    HEAP32[$__dst19_1 >> 2] = $__x21_1;
    __label__ = 56;
    break;
   case 56:
    if (($nn | 0) == ($dn | 0)) {
      __label__ = 62;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    var $153 = $116 - 1 | 0;
    var $154 = HEAP32[$126 >> 2];
    if (($153 | 0) == 0) {
      var $__x25_1 = $154;
      var $__dst23_1 = $qp;
      __label__ = 61;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $159 = $nn - 1 - $dn | 0;
    var $__x25_0 = $154;
    var $__src24_0 = $125 + 4 | 0;
    var $__dst23_0 = $qp;
    var $__n22_0 = $153;
    __label__ = 59;
    break;
   case 59:
    var $__n22_0;
    var $__dst23_0;
    var $__src24_0;
    var $__x25_0;
    HEAP32[$__dst23_0 >> 2] = $__x25_0;
    var $163 = HEAP32[$__src24_0 >> 2];
    var $164 = $__n22_0 - 1 | 0;
    if (($164 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      var $__x25_0 = $163;
      var $__src24_0 = $__src24_0 + 4 | 0;
      var $__dst23_0 = $__dst23_0 + 4 | 0;
      var $__n22_0 = $164;
      __label__ = 59;
      break;
    }
   case 60:
    var $__x25_1 = $163;
    var $__dst23_1 = $qp + ($159 << 2) | 0;
    __label__ = 61;
    break;
   case 61:
    var $__dst23_1;
    var $__x25_1;
    HEAP32[$__dst23_1 >> 2] = $__x25_1;
    __label__ = 62;
    break;
   case 62:
    var $qhl_0_in = $126 + ($116 << 2) | 0;
    __label__ = 63;
    break;
   case 63:
    var $qhl_0_in;
    var $qhl_0 = HEAP32[$qhl_0_in >> 2];
    var $170 = HEAP32[$__tmp_marker3 >> 2];
    if (($170 | 0) == 0) {
      var $_0 = $qhl_0;
      __label__ = 65;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    ___gmp_tmp_reentrant_free($170);
    var $_0 = $qhl_0;
    __label__ = 65;
    break;
   case 65:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_divrem["X"] = 1;

function ___gmpn_divrem_1($qp, $qxn, $up, $un, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $un + $qxn | 0;
    if (($1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 60;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = $qp + ($1 - 1 << 2) | 0;
    var $7 = ($un | 0) != 0;
    if (($d | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 4:
    if ($7) {
      __label__ = 5;
      break;
    } else {
      var $_01 = $5;
      var $_02 = 0;
      var $r_0 = 0;
      __label__ = 6;
      break;
    }
   case 5:
    var $10 = $un - 1 | 0;
    var $12 = HEAPU32[$up + ($10 << 2) >> 2];
    var $13 = $12 >>> 0 >= $d >>> 0;
    var $15 = $qp + ($1 - 2 << 2) | 0;
    HEAP32[$5 >> 2] = $13 & 1;
    var $_01 = $15;
    var $_02 = $10;
    var $r_0 = $12 - ($13 << 31 >> 31 & $d) | 0;
    __label__ = 6;
    break;
   case 6:
    var $r_0;
    var $_02;
    var $_01;
    var $20 = $d >>> 16;
    var $21 = $d & 65535;
    var $22 = $d ^ -1;
    var $23 = Math.floor(($22 >>> 0) / ($20 >>> 0));
    var $24 = (i64Math.multiply($23, 0, $20, 0), i64Math.result[0]);
    var $25 = $22 - $24 | 0;
    var $26 = (i64Math.multiply($23, 0, $21, 0), i64Math.result[0]);
    var $28 = $25 << 16 | 65535;
    if ($28 >>> 0 < $26 >>> 0) {
      __label__ = 7;
      break;
    } else {
      var $__q110_0 = $23;
      var $__r112_0 = $28;
      __label__ = 9;
      break;
    }
   case 7:
    var $31 = $23 - 1 | 0;
    var $uadd14 = _llvm_uadd_with_overflow_i32($28, $d);
    var $32 = $uadd14.f0;
    var $33 = $uadd14.f1;
    if ($32 >>> 0 < $26 >>> 0 & ($33 ^ 1)) {
      __label__ = 8;
      break;
    } else {
      var $__q110_0 = $31;
      var $__r112_0 = $32;
      __label__ = 9;
      break;
    }
   case 8:
    var $__q110_0 = $23 - 2 | 0;
    var $__r112_0 = $32 + $d | 0;
    __label__ = 9;
    break;
   case 9:
    var $__r112_0;
    var $__q110_0;
    var $39 = $__r112_0 - $26 | 0;
    var $40 = Math.floor(($39 >>> 0) / ($20 >>> 0));
    var $41 = (i64Math.multiply($40, 0, $20, 0), i64Math.result[0]);
    var $42 = $39 - $41 | 0;
    var $43 = (i64Math.multiply($40, 0, $21, 0), i64Math.result[0]);
    var $45 = $42 << 16 | 65535;
    if ($45 >>> 0 < $43 >>> 0) {
      __label__ = 10;
      break;
    } else {
      var $__q011_0 = $40;
      __label__ = 11;
      break;
    }
   case 10:
    var $uadd13 = _llvm_uadd_with_overflow_i32($45, $d);
    var $48 = $uadd13.f1;
    var $49 = $uadd13.f0;
    var $__v = $49 >>> 0 < $43 >>> 0 & ($48 ^ 1) ? -2 : -1;
    var $__q011_0 = $__v + $40 | 0;
    __label__ = 11;
    break;
   case 11:
    var $__q011_0;
    var $53 = $__q011_0 | $__q110_0 << 16;
    if (($_02 | 0) > 0) {
      __label__ = 12;
      break;
    } else {
      var $r_1_lcssa = $r_0;
      var $_1_lcssa = $_01;
      __label__ = 14;
      break;
    }
   case 12:
    var $55 = $__q011_0 & 65535;
    var $56 = $53 >>> 16;
    var $57 = -$_02 | 0;
    var $r_146 = $r_0;
    var $_147 = $_01;
    var $i_048_in = $_02;
    __label__ = 16;
    break;
   case 13:
    var $r_1_lcssa = $_r_1;
    var $_1_lcssa = $_01 + ($57 << 2) | 0;
    __label__ = 14;
    break;
   case 14:
    var $_1_lcssa;
    var $r_1_lcssa;
    if (($qxn | 0) > 0) {
      __label__ = 15;
      break;
    } else {
      var $_0 = $r_1_lcssa;
      __label__ = 60;
      break;
    }
   case 15:
    var $59 = $__q011_0 & 65535;
    var $60 = $53 >>> 16;
    var $r_240 = $r_1_lcssa;
    var $_241 = $_1_lcssa;
    var $i_142_in = $qxn;
    __label__ = 21;
    break;
   case 16:
    var $i_048_in;
    var $_147;
    var $r_146;
    var $i_048 = $i_048_in - 1 | 0;
    var $63 = HEAPU32[$up + ($i_048 << 2) >> 2];
    var $64 = $r_146 & 65535;
    var $65 = $r_146 >>> 16;
    var $66 = (i64Math.multiply($64, 0, $55, 0), i64Math.result[0]);
    var $67 = (i64Math.multiply($64, 0, $56, 0), i64Math.result[0]);
    var $68 = (i64Math.multiply($65, 0, $55, 0), i64Math.result[0]);
    var $69 = (i64Math.multiply($65, 0, $56, 0), i64Math.result[0]);
    var $71 = ($66 >>> 16) + $67 | 0;
    var $uadd11 = _llvm_uadd_with_overflow_i32($71, $68);
    var $72 = $uadd11.f0;
    var $73 = $uadd11.f1;
    var $__x3_0 = $73 ? $69 + 65536 | 0 : $69;
    var $75 = $72 >>> 16;
    var $78 = $72 << 16 | $66 & 65535;
    var $uadd12 = _llvm_uadd_with_overflow_i32($78, $63);
    var $79 = $uadd12.f0;
    var $80 = $uadd12.f1;
    var $85 = $r_146 + 1 + $__x3_0 + $75 + ($80 & 1) | 0;
    var $86 = (i64Math.multiply($85, 0, $d, 0), i64Math.result[0]);
    var $87 = $63 - $86 | 0;
    if ($87 >>> 0 > $79 >>> 0) {
      __label__ = 17;
      break;
    } else {
      var $_qh_0 = $85;
      var $_r_0 = $87;
      __label__ = 18;
      break;
    }
   case 17:
    var $_qh_0 = $85 - 1 | 0;
    var $_r_0 = $87 + $d | 0;
    __label__ = 18;
    break;
   case 18:
    var $_r_0;
    var $_qh_0;
    if ($_r_0 >>> 0 < $d >>> 0) {
      var $_qh_1 = $_qh_0;
      var $_r_1 = $_r_0;
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $_qh_1 = $_qh_0 + 1 | 0;
    var $_r_1 = $_r_0 - $d | 0;
    __label__ = 20;
    break;
   case 20:
    var $_r_1;
    var $_qh_1;
    HEAP32[$_147 >> 2] = $_qh_1;
    if (($i_048 | 0) > 0) {
      var $r_146 = $_r_1;
      var $_147 = $_147 - 4 | 0;
      var $i_048_in = $i_048;
      __label__ = 16;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 21:
    var $i_142_in;
    var $_241;
    var $r_240;
    var $i_142 = $i_142_in - 1 | 0;
    var $101 = $r_240 & 65535;
    var $102 = $r_240 >>> 16;
    var $103 = (i64Math.multiply($101, 0, $59, 0), i64Math.result[0]);
    var $104 = (i64Math.multiply($101, 0, $60, 0), i64Math.result[0]);
    var $105 = (i64Math.multiply($102, 0, $59, 0), i64Math.result[0]);
    var $106 = (i64Math.multiply($102, 0, $60, 0), i64Math.result[0]);
    var $108 = ($103 >>> 16) + $104 | 0;
    var $uadd10 = _llvm_uadd_with_overflow_i32($108, $105);
    var $109 = $uadd10.f0;
    var $110 = $uadd10.f1;
    var $__x321_0 = $110 ? $106 + 65536 | 0 : $106;
    var $113 = $__x321_0 + ($109 >>> 16) | 0;
    var $116 = $109 << 16 | $103 & 65535;
    var $118 = $r_240 + 1 + $113 | 0;
    var $119 = (i64Math.multiply($118, 0, $d, 0), i64Math.result[0]);
    var $120 = -$119 | 0;
    if ($116 >>> 0 < $120 >>> 0) {
      __label__ = 22;
      break;
    } else {
      var $_r17_0 = $120;
      var $_qh15_0 = $118;
      __label__ = 23;
      break;
    }
   case 22:
    var $_r17_0 = $d - $119 | 0;
    var $_qh15_0 = $113 + $r_240 | 0;
    __label__ = 23;
    break;
   case 23:
    var $_qh15_0;
    var $_r17_0;
    if ($_r17_0 >>> 0 < $d >>> 0) {
      var $_r17_1 = $_r17_0;
      var $_qh15_1 = $_qh15_0;
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $_r17_1 = $_r17_0 - $d | 0;
    var $_qh15_1 = $_qh15_0 + 1 | 0;
    __label__ = 25;
    break;
   case 25:
    var $_qh15_1;
    var $_r17_1;
    HEAP32[$_241 >> 2] = $_qh15_1;
    if (($i_142 | 0) > 0) {
      var $r_240 = $_r17_1;
      var $_241 = $_241 - 4 | 0;
      var $i_142_in = $i_142;
      __label__ = 21;
      break;
    } else {
      var $_0 = $_r17_1;
      __label__ = 60;
      break;
    }
   case 26:
    if ($7) {
      __label__ = 27;
      break;
    } else {
      var $_3 = $5;
      var $_13 = 0;
      var $r_3 = 0;
      __label__ = 30;
      break;
    }
   case 27:
    var $135 = $un - 1 | 0;
    var $137 = HEAPU32[$up + ($135 << 2) >> 2];
    if ($137 >>> 0 < $d >>> 0) {
      __label__ = 28;
      break;
    } else {
      var $_3 = $5;
      var $_13 = $un;
      var $r_3 = 0;
      __label__ = 30;
      break;
    }
   case 28:
    HEAP32[$5 >> 2] = 0;
    if (($1 | 0) == 1) {
      var $_0 = $137;
      __label__ = 60;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $_3 = $qp + ($1 - 2 << 2) | 0;
    var $_13 = $135;
    var $r_3 = $137;
    __label__ = 30;
    break;
   case 30:
    var $r_3;
    var $_13;
    var $_3;
    if ($d >>> 0 < 65536) {
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 31:
    var $147 = $d >>> 0 < 256 ? 1 : 9;
    var $152 = $147;
    __label__ = 33;
    break;
   case 32:
    var $150 = $d >>> 0 < 16777216 ? 17 : 25;
    var $152 = $150;
    __label__ = 33;
    break;
   case 33:
    var $152;
    var $155 = STRING_TABLE.___gmpn_clz_tab + ($d >>> ($152 >>> 0)) | 0;
    var $158 = 33 - $152 - (HEAPU8[$155] & 255) | 0;
    var $159 = $d << $158;
    var $160 = $r_3 << $158;
    var $161 = $159 >>> 16;
    var $162 = $159 & 65535;
    var $163 = $159 ^ -1;
    var $164 = Math.floor(($163 >>> 0) / ($161 >>> 0));
    var $165 = (i64Math.multiply($161, 0, $164, 0), i64Math.result[0]);
    var $166 = $163 - $165 | 0;
    var $167 = (i64Math.multiply($162, 0, $164, 0), i64Math.result[0]);
    var $169 = $166 << 16 | 65535;
    if ($169 >>> 0 < $167 >>> 0) {
      __label__ = 34;
      break;
    } else {
      var $__r134_0 = $169;
      var $__q132_0 = $164;
      __label__ = 36;
      break;
    }
   case 34:
    var $172 = $164 - 1 | 0;
    var $uadd9 = _llvm_uadd_with_overflow_i32($169, $159);
    var $173 = $uadd9.f0;
    var $174 = $uadd9.f1;
    if ($173 >>> 0 < $167 >>> 0 & ($174 ^ 1)) {
      __label__ = 35;
      break;
    } else {
      var $__r134_0 = $173;
      var $__q132_0 = $172;
      __label__ = 36;
      break;
    }
   case 35:
    var $__r134_0 = $173 + $159 | 0;
    var $__q132_0 = $164 - 2 | 0;
    __label__ = 36;
    break;
   case 36:
    var $__q132_0;
    var $__r134_0;
    var $180 = $__r134_0 - $167 | 0;
    var $181 = Math.floor(($180 >>> 0) / ($161 >>> 0));
    var $182 = (i64Math.multiply($181, 0, $161, 0), i64Math.result[0]);
    var $183 = $180 - $182 | 0;
    var $184 = (i64Math.multiply($181, 0, $162, 0), i64Math.result[0]);
    var $186 = $183 << 16 | 65535;
    if ($186 >>> 0 < $184 >>> 0) {
      __label__ = 37;
      break;
    } else {
      var $__q033_0 = $181;
      __label__ = 38;
      break;
    }
   case 37:
    var $uadd8 = _llvm_uadd_with_overflow_i32($186, $159);
    var $189 = $uadd8.f1;
    var $190 = $uadd8.f0;
    var $_24_v = $190 >>> 0 < $184 >>> 0 & ($189 ^ 1) ? -2 : -1;
    var $__q033_0 = $_24_v + $181 | 0;
    __label__ = 38;
    break;
   case 38:
    var $__q033_0;
    var $194 = $__q033_0 | $__q132_0 << 16;
    if (($_13 | 0) == 0) {
      var $_6_ph = $_3;
      var $r_6_ph = $160;
      __label__ = 52;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $199 = HEAPU32[$up + ($_13 - 1 << 2) >> 2];
    var $200 = 32 - $158 | 0;
    var $202 = $199 >>> ($200 >>> 0) | $160;
    var $203 = $_13 - 2 | 0;
    var $205 = $__q033_0 & 65535;
    var $206 = $194 >>> 16;
    if (($203 | 0) > -1) {
      __label__ = 40;
      break;
    } else {
      var $r_4_lcssa = $202;
      var $n1_0_lcssa = $199;
      var $_4_lcssa = $_3;
      var $_pre_phi = $205;
      var $_pre_phi3 = $206;
      __label__ = 47;
      break;
    }
   case 40:
    var $207 = 1 - $_13 | 0;
    var $smax = ($207 | 0) > -1 ? $207 : -1;
    var $210 = -($_13 + $smax | 0) | 0;
    var $r_425 = $202;
    var $n1_026 = $199;
    var $i_227 = $203;
    var $_428 = $_3;
    __label__ = 41;
    break;
   case 41:
    var $_428;
    var $i_227;
    var $n1_026;
    var $r_425;
    var $213 = HEAPU32[$up + ($i_227 << 2) >> 2];
    var $214 = $r_425 & 65535;
    var $215 = $r_425 >>> 16;
    var $216 = (i64Math.multiply($214, 0, $205, 0), i64Math.result[0]);
    var $217 = (i64Math.multiply($214, 0, $206, 0), i64Math.result[0]);
    var $218 = (i64Math.multiply($215, 0, $205, 0), i64Math.result[0]);
    var $219 = (i64Math.multiply($215, 0, $206, 0), i64Math.result[0]);
    var $221 = ($216 >>> 16) + $217 | 0;
    var $uadd6 = _llvm_uadd_with_overflow_i32($221, $218);
    var $222 = $uadd6.f0;
    var $223 = $uadd6.f1;
    var $__x343_0 = $223 ? $219 + 65536 | 0 : $219;
    var $225 = $222 >>> 16;
    var $228 = $222 << 16 | $216 & 65535;
    var $231 = $213 >>> ($200 >>> 0) | $n1_026 << $158;
    var $uadd7 = _llvm_uadd_with_overflow_i32($228, $231);
    var $232 = $uadd7.f0;
    var $233 = $uadd7.f1;
    var $238 = $r_425 + 1 + $__x343_0 + $225 + ($233 & 1) | 0;
    var $239 = (i64Math.multiply($238, 0, $159, 0), i64Math.result[0]);
    var $240 = $231 - $239 | 0;
    if ($240 >>> 0 > $232 >>> 0) {
      __label__ = 42;
      break;
    } else {
      var $_r39_0 = $240;
      var $_qh37_0 = $238;
      __label__ = 43;
      break;
    }
   case 42:
    var $_r39_0 = $240 + $159 | 0;
    var $_qh37_0 = $238 - 1 | 0;
    __label__ = 43;
    break;
   case 43:
    var $_qh37_0;
    var $_r39_0;
    if ($_r39_0 >>> 0 < $159 >>> 0) {
      var $_r39_1 = $_r39_0;
      var $_qh37_1 = $_qh37_0;
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $_r39_1 = $_r39_0 - $159 | 0;
    var $_qh37_1 = $_qh37_0 + 1 | 0;
    __label__ = 45;
    break;
   case 45:
    var $_qh37_1;
    var $_r39_1;
    HEAP32[$_428 >> 2] = $_qh37_1;
    if (($i_227 | 0) > 0) {
      var $r_425 = $_r39_1;
      var $n1_026 = $213;
      var $i_227 = $i_227 - 1 | 0;
      var $_428 = $_428 - 4 | 0;
      __label__ = 41;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $r_4_lcssa = $_r39_1;
    var $n1_0_lcssa = $213;
    var $_4_lcssa = $_3 + ($210 << 2) | 0;
    var $_pre_phi = $205;
    var $_pre_phi3 = $206;
    __label__ = 47;
    break;
   case 47:
    var $_pre_phi3;
    var $_pre_phi;
    var $_4_lcssa;
    var $n1_0_lcssa;
    var $r_4_lcssa;
    var $254 = $r_4_lcssa & 65535;
    var $255 = $r_4_lcssa >>> 16;
    var $256 = (i64Math.multiply($254, 0, $_pre_phi, 0), i64Math.result[0]);
    var $257 = (i64Math.multiply($254, 0, $_pre_phi3, 0), i64Math.result[0]);
    var $258 = (i64Math.multiply($255, 0, $_pre_phi, 0), i64Math.result[0]);
    var $259 = (i64Math.multiply($255, 0, $_pre_phi3, 0), i64Math.result[0]);
    var $261 = ($256 >>> 16) + $257 | 0;
    var $uadd4 = _llvm_uadd_with_overflow_i32($261, $258);
    var $262 = $uadd4.f0;
    var $263 = $uadd4.f1;
    var $__x357_0 = $263 ? $259 + 65536 | 0 : $259;
    var $265 = $262 >>> 16;
    var $268 = $262 << 16 | $256 & 65535;
    var $269 = $n1_0_lcssa << $158;
    var $uadd5 = _llvm_uadd_with_overflow_i32($268, $269);
    var $270 = $uadd5.f0;
    var $271 = $uadd5.f1;
    var $276 = $r_4_lcssa + 1 + $__x357_0 + $265 + ($271 & 1) | 0;
    var $277 = (i64Math.multiply($276, 0, $159, 0), i64Math.result[0]);
    var $278 = $269 - $277 | 0;
    if ($278 >>> 0 > $270 >>> 0) {
      __label__ = 48;
      break;
    } else {
      var $_r53_0 = $278;
      var $_qh51_0 = $276;
      __label__ = 49;
      break;
    }
   case 48:
    var $_r53_0 = $278 + $159 | 0;
    var $_qh51_0 = $276 - 1 | 0;
    __label__ = 49;
    break;
   case 49:
    var $_qh51_0;
    var $_r53_0;
    if ($_r53_0 >>> 0 < $159 >>> 0) {
      var $_r53_1 = $_r53_0;
      var $_qh51_1 = $_qh51_0;
      __label__ = 51;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $_r53_1 = $_r53_0 - $159 | 0;
    var $_qh51_1 = $_qh51_0 + 1 | 0;
    __label__ = 51;
    break;
   case 51:
    var $_qh51_1;
    var $_r53_1;
    HEAP32[$_4_lcssa >> 2] = $_qh51_1;
    var $_6_ph = $_4_lcssa - 4 | 0;
    var $r_6_ph = $_r53_1;
    __label__ = 52;
    break;
   case 52:
    var $r_6_ph;
    var $_6_ph;
    if (($qxn | 0) > 0) {
      __label__ = 53;
      break;
    } else {
      var $r_6_lcssa = $r_6_ph;
      __label__ = 59;
      break;
    }
   case 53:
    var $291 = $__q033_0 & 65535;
    var $292 = $194 >>> 16;
    var $r_632 = $r_6_ph;
    var $_633 = $_6_ph;
    var $i_334_in = $qxn;
    __label__ = 54;
    break;
   case 54:
    var $i_334_in;
    var $_633;
    var $r_632;
    var $i_334 = $i_334_in - 1 | 0;
    var $294 = $r_632 & 65535;
    var $295 = $r_632 >>> 16;
    var $296 = (i64Math.multiply($294, 0, $291, 0), i64Math.result[0]);
    var $297 = (i64Math.multiply($294, 0, $292, 0), i64Math.result[0]);
    var $298 = (i64Math.multiply($295, 0, $291, 0), i64Math.result[0]);
    var $299 = (i64Math.multiply($295, 0, $292, 0), i64Math.result[0]);
    var $301 = ($296 >>> 16) + $297 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($301, $298);
    var $302 = $uadd.f0;
    var $303 = $uadd.f1;
    var $__x371_0 = $303 ? $299 + 65536 | 0 : $299;
    var $306 = $__x371_0 + ($302 >>> 16) | 0;
    var $309 = $302 << 16 | $296 & 65535;
    var $311 = $r_632 + 1 + $306 | 0;
    var $312 = (i64Math.multiply($311, 0, $159, 0), i64Math.result[0]);
    var $313 = -$312 | 0;
    if ($309 >>> 0 < $313 >>> 0) {
      __label__ = 55;
      break;
    } else {
      var $_r67_0 = $313;
      var $_qh65_0 = $311;
      __label__ = 56;
      break;
    }
   case 55:
    var $_r67_0 = $159 - $312 | 0;
    var $_qh65_0 = $306 + $r_632 | 0;
    __label__ = 56;
    break;
   case 56:
    var $_qh65_0;
    var $_r67_0;
    if ($_r67_0 >>> 0 < $159 >>> 0) {
      var $_r67_1 = $_r67_0;
      var $_qh65_1 = $_qh65_0;
      __label__ = 58;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    var $_r67_1 = $_r67_0 - $159 | 0;
    var $_qh65_1 = $_qh65_0 + 1 | 0;
    __label__ = 58;
    break;
   case 58:
    var $_qh65_1;
    var $_r67_1;
    HEAP32[$_633 >> 2] = $_qh65_1;
    if (($i_334 | 0) > 0) {
      var $r_632 = $_r67_1;
      var $_633 = $_633 - 4 | 0;
      var $i_334_in = $i_334;
      __label__ = 54;
      break;
    } else {
      var $r_6_lcssa = $_r67_1;
      __label__ = 59;
      break;
    }
   case 59:
    var $r_6_lcssa;
    var $_0 = $r_6_lcssa >>> ($158 >>> 0);
    __label__ = 60;
    break;
   case 60:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_divrem_1["X"] = 1;

function ___gmpn_divrem_2($qp, $qxn, $np, $nn, $dp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = $np + ($nn - 2 << 2) | 0;
    var $4 = HEAPU32[$dp + 4 >> 2];
    var $5 = HEAPU32[$dp >> 2];
    var $6 = -$5 | 0;
    var $8 = HEAPU32[$np + ($nn - 1 << 2) >> 2];
    var $9 = HEAPU32[$2 >> 2];
    if ($8 >>> 0 < $4 >>> 0) {
      var $most_significant_q_limb_0 = 0;
      var $n1_0 = $8;
      var $n0_0 = $9;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $13 = $9 >>> 0 < $5 >>> 0;
    if ($8 >>> 0 <= $4 >>> 0 & $13) {
      var $most_significant_q_limb_0 = 0;
      var $n1_0 = $8;
      var $n0_0 = $9;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $most_significant_q_limb_0 = 1;
    var $n1_0 = $8 - $4 + ($13 << 31 >> 31) | 0;
    var $n0_0 = $9 - $5 | 0;
    __label__ = 5;
    break;
   case 5:
    var $n0_0;
    var $n1_0;
    var $most_significant_q_limb_0;
    var $19 = $4 >>> 16;
    var $20 = $4 & 65535;
    var $21 = $4 ^ -1;
    var $22 = Math.floor(($21 >>> 0) / ($19 >>> 0));
    var $23 = (i64Math.multiply($22, 0, $19, 0), i64Math.result[0]);
    var $24 = $21 - $23 | 0;
    var $25 = (i64Math.multiply($22, 0, $20, 0), i64Math.result[0]);
    var $27 = $24 << 16 | 65535;
    if ($27 >>> 0 < $25 >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $__q1_0 = $22;
      var $__r1_0 = $27;
      __label__ = 8;
      break;
    }
   case 6:
    var $30 = $22 - 1 | 0;
    var $uadd7 = _llvm_uadd_with_overflow_i32($27, $4);
    var $31 = $uadd7.f0;
    var $32 = $uadd7.f1;
    if ($31 >>> 0 < $25 >>> 0 & ($32 ^ 1)) {
      __label__ = 7;
      break;
    } else {
      var $__q1_0 = $30;
      var $__r1_0 = $31;
      __label__ = 8;
      break;
    }
   case 7:
    var $__q1_0 = $22 - 2 | 0;
    var $__r1_0 = $31 + $4 | 0;
    __label__ = 8;
    break;
   case 8:
    var $__r1_0;
    var $__q1_0;
    var $38 = $__r1_0 - $25 | 0;
    var $39 = Math.floor(($38 >>> 0) / ($19 >>> 0));
    var $40 = (i64Math.multiply($39, 0, $19, 0), i64Math.result[0]);
    var $41 = $38 - $40 | 0;
    var $42 = (i64Math.multiply($39, 0, $20, 0), i64Math.result[0]);
    var $44 = $41 << 16 | 65535;
    if ($44 >>> 0 < $42 >>> 0) {
      __label__ = 9;
      break;
    } else {
      var $__q0_0 = $39;
      __label__ = 10;
      break;
    }
   case 9:
    var $uadd6 = _llvm_uadd_with_overflow_i32($44, $4);
    var $47 = $uadd6.f1;
    var $48 = $uadd6.f0;
    var $__v = $48 >>> 0 < $42 >>> 0 & ($47 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $39 | 0;
    __label__ = 10;
    break;
   case 10:
    var $__q0_0;
    var $52 = $qxn - 3 + $nn | 0;
    if (($52 | 0) > -1) {
      __label__ = 11;
      break;
    } else {
      var $n0_1_lcssa = $n0_0;
      var $n1_1_lcssa = $n1_0;
      var $_0_lcssa = $2;
      __label__ = 29;
      break;
    }
   case 11:
    var $58 = $5 - (($5 | 0) != 0 & 1) | 0;
    var $59 = $__q0_0 & 65535;
    var $60 = ($__q0_0 | $__q1_0 << 16) >>> 16;
    var $61 = $5 & 65535;
    var $62 = $5 >>> 16;
    var $n0_115 = $n0_0;
    var $n1_116 = $n1_0;
    var $i_017 = $52;
    var $_018 = $2;
    __label__ = 12;
    break;
   case 12:
    var $_018;
    var $i_017;
    var $n1_116;
    var $n0_115;
    if (($i_017 | 0) < ($qxn | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $_1 = $_018 - 4 | 0;
    __label__ = 15;
    break;
   case 14:
    HEAP32[$_018 >> 2] = 0;
    var $_1 = $_018;
    __label__ = 15;
    break;
   case 15:
    var $_1;
    if (($n1_116 | 0) == ($4 | 0)) {
      __label__ = 16;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 16:
    var $uadd4 = _llvm_uadd_with_overflow_i32($n0_115, $4);
    var $71 = $uadd4.f0;
    var $72 = $uadd4.f1;
    if ($72) {
      __label__ = 17;
      break;
    } else {
      var $n1_2 = $58;
      var $n0_2 = $6;
      var $r_1 = $71;
      var $q_1 = -1;
      __label__ = 23;
      break;
    }
   case 17:
    var $74 = HEAP32[$_1 >> 2];
    var $uadd5 = _llvm_uadd_with_overflow_i32($74, $5);
    var $75 = $uadd5.f0;
    var $76 = $uadd5.f1;
    var $79 = $71 - $5 + ($76 & 1) | 0;
    HEAP32[$qp + ($i_017 << 2) >> 2] = -1;
    var $n1_5 = $79;
    var $n0_5 = $75;
    __label__ = 28;
    break;
   case 18:
    var $82 = $n1_116 & 65535;
    var $83 = $n1_116 >>> 16;
    var $84 = (i64Math.multiply($82, 0, $59, 0), i64Math.result[0]);
    var $85 = (i64Math.multiply($82, 0, $60, 0), i64Math.result[0]);
    var $86 = (i64Math.multiply($83, 0, $59, 0), i64Math.result[0]);
    var $87 = (i64Math.multiply($83, 0, $60, 0), i64Math.result[0]);
    var $89 = ($84 >>> 16) + $85 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($89, $86);
    var $90 = $uadd.f0;
    var $91 = $uadd.f1;
    var $__x3_0 = $91 ? $87 + 65536 | 0 : $87;
    var $93 = $90 >>> 16;
    var $96 = $90 << 16 | $84 & 65535;
    var $uadd1 = _llvm_uadd_with_overflow_i32($96, $n0_115);
    var $97 = $uadd1.f0;
    var $98 = $uadd1.f1;
    var $103 = $n1_116 + 1 + $__x3_0 + $93 + ($98 & 1) | 0;
    var $104 = (i64Math.multiply($103, 0, $4, 0), i64Math.result[0]);
    var $105 = $n0_115 - $104 | 0;
    if ($105 >>> 0 > $97 >>> 0) {
      __label__ = 19;
      break;
    } else {
      var $_r_0 = $105;
      var $_qh_0 = $103;
      __label__ = 20;
      break;
    }
   case 19:
    var $_r_0 = $105 + $4 | 0;
    var $_qh_0 = $103 - 1 | 0;
    __label__ = 20;
    break;
   case 20:
    var $_qh_0;
    var $_r_0;
    if ($_r_0 >>> 0 < $4 >>> 0) {
      var $_r_1 = $_r_0;
      var $_qh_1 = $_qh_0;
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $_r_1 = $_r_0 - $4 | 0;
    var $_qh_1 = $_qh_0 + 1 | 0;
    __label__ = 22;
    break;
   case 22:
    var $_qh_1;
    var $_r_1;
    var $116 = $_qh_1 & 65535;
    var $117 = $_qh_1 >>> 16;
    var $118 = (i64Math.multiply($116, 0, $61, 0), i64Math.result[0]);
    var $119 = (i64Math.multiply($117, 0, $61, 0), i64Math.result[0]);
    var $120 = (i64Math.multiply($116, 0, $62, 0), i64Math.result[0]);
    var $121 = (i64Math.multiply($117, 0, $62, 0), i64Math.result[0]);
    var $123 = ($118 >>> 16) + $119 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($123, $120);
    var $124 = $uadd2.f0;
    var $125 = $uadd2.f1;
    var $__x315_0 = $125 ? $121 + 65536 | 0 : $121;
    var $n1_2 = $__x315_0 + ($124 >>> 16) | 0;
    var $n0_2 = $124 << 16 | $118 & 65535;
    var $r_1 = $_r_1;
    var $q_1 = $_qh_1;
    __label__ = 23;
    break;
   case 23:
    var $q_1;
    var $r_1;
    var $n0_2;
    var $n1_2;
    var $132 = HEAPU32[$_1 >> 2];
    var $n1_3 = $n1_2;
    var $n0_3 = $n0_2;
    var $r_2 = $r_1;
    var $q_2 = $q_1;
    __label__ = 24;
    break;
   case 24:
    var $q_2;
    var $r_2;
    var $n0_3;
    var $n1_3;
    if ($n1_3 >>> 0 > $r_2 >>> 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    if (($n1_3 | 0) == ($r_2 | 0) & $n0_3 >>> 0 > $132 >>> 0) {
      __label__ = 26;
      break;
    } else {
      var $n1_4 = $n1_3;
      var $n0_4 = $n0_3;
      var $r_3 = $r_2;
      var $q_3 = $q_2;
      __label__ = 27;
      break;
    }
   case 26:
    var $139 = $q_2 - 1 | 0;
    var $140 = $n0_3 - $5 | 0;
    var $143 = $n1_3 - ($n0_3 >>> 0 < $5 >>> 0 & 1) | 0;
    var $uadd3 = _llvm_uadd_with_overflow_i32($r_2, $4);
    var $144 = $uadd3.f0;
    var $145 = $uadd3.f1;
    if ($145) {
      var $n1_4 = $143;
      var $n0_4 = $140;
      var $r_3 = $144;
      var $q_3 = $139;
      __label__ = 27;
      break;
    } else {
      var $n1_3 = $143;
      var $n0_3 = $140;
      var $r_2 = $144;
      var $q_2 = $139;
      __label__ = 24;
      break;
    }
   case 27:
    var $q_3;
    var $r_3;
    var $n0_4;
    var $n1_4;
    HEAP32[$qp + ($i_017 << 2) >> 2] = $q_3;
    var $n1_5 = $r_3 - $n1_4 + (($132 >>> 0 < $n0_4 >>> 0) << 31 >> 31) | 0;
    var $n0_5 = $132 - $n0_4 | 0;
    __label__ = 28;
    break;
   case 28:
    var $n0_5;
    var $n1_5;
    if (($i_017 | 0) > 0) {
      var $n0_115 = $n0_5;
      var $n1_116 = $n1_5;
      var $i_017 = $i_017 - 1 | 0;
      var $_018 = $_1;
      __label__ = 12;
      break;
    } else {
      var $n0_1_lcssa = $n0_5;
      var $n1_1_lcssa = $n1_5;
      var $_0_lcssa = $_1;
      __label__ = 29;
      break;
    }
   case 29:
    var $_0_lcssa;
    var $n1_1_lcssa;
    var $n0_1_lcssa;
    HEAP32[$_0_lcssa + 4 >> 2] = $n1_1_lcssa;
    HEAP32[$_0_lcssa >> 2] = $n0_1_lcssa;
    return $most_significant_q_limb_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_divrem_2["X"] = 1;

function ___gmpn_gcdext_1($up, $vp, $a, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($a >>> 0 < $b >>> 0) {
      var $v1_1 = 1;
      var $_1 = $a;
      var $_13 = $b;
      var $u0_1 = 1;
      var $v0_1 = 0;
      var $u1_1 = 0;
      __label__ = 5;
      break;
    } else {
      var $v1_0 = 1;
      var $_01 = $a;
      var $_02 = $b;
      var $u0_0 = 1;
      var $v0_0 = 0;
      var $u1_0 = 0;
      __label__ = 3;
      break;
    }
   case 3:
    var $u1_0;
    var $v0_0;
    var $u0_0;
    var $_02;
    var $_01;
    var $v1_0;
    var $3 = Math.floor(($_01 >>> 0) / ($_02 >>> 0));
    var $4 = (i64Math.multiply($3, 0, $_02, 0), i64Math.result[0]);
    if (($_01 | 0) == ($4 | 0)) {
      var $_0 = $_02;
      var $storemerge = $v1_0;
      var $storemerge4 = $u1_0;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $7 = $_01 - $4 | 0;
    var $8 = (i64Math.multiply($3, 0, $u1_0, 0), i64Math.result[0]);
    var $9 = $u0_0 - $8 | 0;
    var $10 = (i64Math.multiply($3, 0, $v1_0, 0), i64Math.result[0]);
    var $v1_1 = $v1_0;
    var $_1 = $7;
    var $_13 = $_02;
    var $u0_1 = $9;
    var $v0_1 = $v0_0 - $10 | 0;
    var $u1_1 = $u1_0;
    __label__ = 5;
    break;
   case 5:
    var $u1_1;
    var $v0_1;
    var $u0_1;
    var $_13;
    var $_1;
    var $v1_1;
    var $13 = Math.floor(($_13 >>> 0) / ($_1 >>> 0));
    var $14 = (i64Math.multiply($13, 0, $_1, 0), i64Math.result[0]);
    if (($_13 | 0) == ($14 | 0)) {
      var $_0 = $_1;
      var $storemerge = $v0_1;
      var $storemerge4 = $u0_1;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $17 = $_13 - $14 | 0;
    var $18 = (i64Math.multiply($13, 0, $u0_1, 0), i64Math.result[0]);
    var $19 = $u1_1 - $18 | 0;
    var $20 = (i64Math.multiply($13, 0, $v0_1, 0), i64Math.result[0]);
    var $v1_0 = $v1_1 - $20 | 0;
    var $_01 = $_1;
    var $_02 = $17;
    var $u0_0 = $u0_1;
    var $v0_0 = $v0_1;
    var $u1_0 = $19;
    __label__ = 3;
    break;
   case 7:
    var $storemerge4;
    var $storemerge;
    var $_0;
    HEAP32[$up >> 2] = $storemerge4;
    HEAP32[$vp >> 2] = $storemerge;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_zero_p213($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_gcd_1($up, $size, $vlimb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAPU32[$up >> 2];
    var $3 = $vlimb & -$vlimb;
    if ($3 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = $3 >>> 0 < 256 ? 1 : 9;
    var $12 = $7;
    __label__ = 5;
    break;
   case 4:
    var $10 = $3 >>> 0 < 16777216 ? 17 : 25;
    var $12 = $10;
    __label__ = 5;
    break;
   case 5:
    var $12;
    var $14 = STRING_TABLE.___gmpn_clz_tab + ($3 >>> ($12 >>> 0)) | 0;
    var $18 = $12 - 2 + (HEAPU8[$14] & 255) | 0;
    var $19 = $vlimb >>> ($18 >>> 0);
    if (($size | 0) > 1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 6:
    if (($1 | 0) == 0) {
      var $zero_bits_0 = $18;
      __label__ = 11;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $25 = $1 & -$1;
    if ($25 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $29 = $25 >>> 0 < 256 ? 1 : 9;
    var $34 = $29;
    __label__ = 10;
    break;
   case 9:
    var $32 = $25 >>> 0 < 16777216 ? 17 : 25;
    var $34 = $32;
    __label__ = 10;
    break;
   case 10:
    var $34;
    var $36 = STRING_TABLE.___gmpn_clz_tab + ($25 >>> ($34 >>> 0)) | 0;
    var $40 = $34 - 2 + (HEAPU8[$36] & 255) | 0;
    var $42 = $18 >>> 0 < $40 >>> 0 ? $18 : $40;
    var $zero_bits_0 = $42;
    __label__ = 11;
    break;
   case 11:
    var $zero_bits_0;
    if (($size | 0) > 9) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $46 = ___gmpn_modexact_1c_odd($up, $size, $19, 0);
    var $50 = $46;
    __label__ = 14;
    break;
   case 13:
    var $48 = ___gmpn_mod_1($up, $size, $19);
    var $50 = $48;
    __label__ = 14;
    break;
   case 14:
    var $50;
    if (($50 | 0) == 0) {
      var $_4 = $19;
      var $zero_bits_4 = $zero_bits_0;
      __label__ = 29;
      break;
    } else {
      var $_2 = $19;
      var $ulimb_2 = $50;
      var $zero_bits_2 = $zero_bits_0;
      __label__ = 23;
      break;
    }
   case 15:
    var $54 = $1 & -$1;
    if ($54 >>> 0 < 65536) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $58 = $54 >>> 0 < 256 ? 1 : 9;
    var $63 = $58;
    __label__ = 18;
    break;
   case 17:
    var $61 = $54 >>> 0 < 16777216 ? 17 : 25;
    var $63 = $61;
    __label__ = 18;
    break;
   case 18:
    var $63;
    var $65 = STRING_TABLE.___gmpn_clz_tab + ($54 >>> ($63 >>> 0)) | 0;
    var $69 = $63 - 2 + (HEAPU8[$65] & 255) | 0;
    var $70 = $1 >>> ($69 >>> 0);
    var $72 = $18 >>> 0 < $69 >>> 0 ? $18 : $69;
    var $73 = $19 >>> 0 > $70 >>> 0;
    var $_ = $73 ? $19 : $70;
    var $_5 = $73 ? $70 : $19;
    if ($_ >>> 16 >>> 0 > $_5 >>> 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $77 = ($_ >>> 0) % ($_5 >>> 0);
    if (($77 | 0) == 0) {
      var $_4 = $_5;
      var $zero_bits_4 = $72;
      __label__ = 29;
      break;
    } else {
      var $_2 = $_5;
      var $ulimb_2 = $77;
      var $zero_bits_2 = $72;
      __label__ = 23;
      break;
    }
   case 20:
    var $_1 = $_5 >>> 1;
    var $ulimb_1 = $_ >>> 1;
    var $zero_bits_1 = $72;
    __label__ = 21;
    break;
   case 21:
    var $zero_bits_1;
    var $ulimb_1;
    var $_1;
    if (($ulimb_1 | 0) == ($_1 | 0)) {
      __label__ = 28;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $85 = $ulimb_1 - $_1 | 0;
    var $86 = $85 >> 31;
    var $t_0 = $85;
    var $_3 = ($86 & $85) + $_1 | 0;
    var $ulimb_3 = ($86 ^ $85) - $86 | 0;
    var $zero_bits_3 = $zero_bits_1;
    __label__ = 24;
    break;
   case 23:
    var $zero_bits_2;
    var $ulimb_2;
    var $_2;
    var $t_0 = $ulimb_2;
    var $_3 = $_2 >>> 1;
    var $ulimb_3 = $ulimb_2;
    var $zero_bits_3 = $zero_bits_2;
    __label__ = 24;
    break;
   case 24:
    var $zero_bits_3;
    var $ulimb_3;
    var $_3;
    var $t_0;
    var $95 = $t_0 & -$t_0;
    if ($95 >>> 0 < 65536) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $99 = $95 >>> 0 < 256 ? 1 : 9;
    var $104 = $99;
    __label__ = 27;
    break;
   case 26:
    var $102 = $95 >>> 0 < 16777216 ? 17 : 25;
    var $104 = $102;
    __label__ = 27;
    break;
   case 27:
    var $104;
    var $106 = STRING_TABLE.___gmpn_clz_tab + ($95 >>> ($104 >>> 0)) | 0;
    var $_1 = $_3;
    var $ulimb_1 = $ulimb_3 >>> (($104 - 1 + (HEAPU8[$106] & 255) | 0) >>> 0);
    var $zero_bits_1 = $zero_bits_3;
    __label__ = 21;
    break;
   case 28:
    var $_4 = $ulimb_1 << 1 | 1;
    var $zero_bits_4 = $zero_bits_1;
    __label__ = 29;
    break;
   case 29:
    var $zero_bits_4;
    var $_4;
    return $_4 << $zero_bits_4;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_gcd_1["X"] = 1;

function ___gmpn_gcd_lehmer_n($gp, $ap, $bp, $n, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $M = __stackBase__;
    var $gn = __stackBase__ + 16;
    var $_01_ph = $ap;
    var $_03_ph = $n;
    var $_04_ph = $tp;
    __label__ = 3;
    break;
   case 3:
    var $_04_ph;
    var $_03_ph;
    var $_01_ph;
    var $_03 = $_03_ph;
    __label__ = 4;
    break;
   case 4:
    var $_03;
    if (($_03 | 0) > 2) {
      __label__ = 5;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 5:
    var $4 = $_03 - 1 | 0;
    var $6 = HEAPU32[$_01_ph + ($4 << 2) >> 2];
    var $8 = HEAPU32[$bp + ($4 << 2) >> 2];
    var $9 = $8 | $6;
    if (($9 | 0) < 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $12 = $_03 - 2 | 0;
    var $bl_0 = HEAP32[$bp + ($12 << 2) >> 2];
    var $ah_0 = $6;
    var $al_0 = HEAP32[$_01_ph + ($12 << 2) >> 2];
    var $bh_0 = $8;
    __label__ = 11;
    break;
   case 7:
    if ($9 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $21 = $9 >>> 0 < 256 ? 1 : 9;
    var $26 = $21;
    __label__ = 10;
    break;
   case 9:
    var $24 = $9 >>> 0 < 16777216 ? 17 : 25;
    var $26 = $24;
    __label__ = 10;
    break;
   case 10:
    var $26;
    var $29 = STRING_TABLE.___gmpn_clz_tab + ($9 >>> ($26 >>> 0)) | 0;
    var $32 = 33 - $26 - (HEAPU8[$29] & 255) | 0;
    var $34 = $_03 - 2 | 0;
    var $36 = HEAPU32[$_01_ph + ($34 << 2) >> 2];
    var $37 = 32 - $32 | 0;
    var $41 = $_03 - 3 | 0;
    var $48 = HEAPU32[$bp + ($34 << 2) >> 2];
    var $bl_0 = HEAPU32[$bp + ($41 << 2) >> 2] >>> ($37 >>> 0) | $48 << $32;
    var $ah_0 = $36 >>> ($37 >>> 0) | $6 << $32;
    var $al_0 = HEAPU32[$_01_ph + ($41 << 2) >> 2] >>> ($37 >>> 0) | $36 << $32;
    var $bh_0 = $48 >>> ($37 >>> 0) | $8 << $32;
    __label__ = 11;
    break;
   case 11:
    var $bh_0;
    var $al_0;
    var $ah_0;
    var $bl_0;
    var $57 = ___gmpn_hgcd2($ah_0, $al_0, $bh_0, $bl_0, $M);
    if (($57 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $60 = ___gmpn_hgcd_mul_matrix1_inverse_vector($M, $_04_ph, $_01_ph, $bp, $_03);
    var $_01_ph = $_04_ph;
    var $_03_ph = $60;
    var $_04_ph = $_01_ph;
    __label__ = 3;
    break;
   case 13:
    var $62 = ___gmpn_gcd_subdiv_step($gp, $gn, $_01_ph, $bp, $_03, $_04_ph);
    if (($62 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $_03 = $62;
      __label__ = 4;
      break;
    }
   case 14:
    var $_0 = HEAP32[$gn >> 2];
    __label__ = 26;
    break;
   case 15:
    if (($_03 | 0) == 1) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $69 = HEAP32[$bp >> 2];
    var $70 = ___gmpn_gcd_1($_01_ph, 1, $69);
    HEAP32[$gp >> 2] = $70;
    var $_0 = 1;
    __label__ = 26;
    break;
   case 17:
    var $74 = (HEAP32[$_01_ph >> 2] & 1 | 0) == 0;
    var $_01_bp = $74 ? $_01_ph : $bp;
    var $bp__01 = $74 ? $bp : $_01_ph;
    var $75 = HEAPU32[$_01_bp >> 2];
    if (($75 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $79 = HEAP32[$_01_bp + 4 >> 2];
    var $80 = ___gmpn_gcd_1($bp__01, 2, $79);
    HEAP32[$gp >> 2] = $80;
    var $_0 = 1;
    __label__ = 26;
    break;
   case 19:
    if (($75 & 1 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $_01_bp_val = $75;
    var $_01_bp_idx_val = HEAP32[$_01_bp + 4 >> 2];
    __label__ = 25;
    break;
   case 21:
    var $86 = $75 & -$75;
    if ($86 >>> 0 < 65536) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $90 = $86 >>> 0 < 256 ? 1 : 9;
    var $95 = $90;
    __label__ = 24;
    break;
   case 23:
    var $93 = $86 >>> 0 < 16777216 ? 17 : 25;
    var $95 = $93;
    __label__ = 24;
    break;
   case 24:
    var $95;
    var $97 = STRING_TABLE.___gmpn_clz_tab + ($86 >>> ($95 >>> 0)) | 0;
    var $101 = $95 - 33 + (HEAPU8[$97] & 255) | 0;
    var $102 = $101 + 31 | 0;
    var $103 = $_01_bp + 4 | 0;
    var $104 = HEAPU32[$103 >> 2];
    var $108 = $104 << 1 - $101 | $75 >>> ($102 >>> 0);
    HEAP32[$_01_bp >> 2] = $108;
    var $109 = $104 >>> ($102 >>> 0);
    HEAP32[$103 >> 2] = $109;
    var $_01_bp_val = $108;
    var $_01_bp_idx_val = $109;
    __label__ = 25;
    break;
   case 25:
    var $_01_bp_idx_val;
    var $_01_bp_val;
    var $bp__01_val = HEAP32[$bp__01 >> 2];
    var $bp__01_idx_val = HEAP32[$bp__01 + 4 >> 2];
    var $111 = _gcd_2($gp, $bp__01_val, $bp__01_idx_val, $_01_bp_val, $_01_bp_idx_val);
    var $_0 = $111;
    __label__ = 26;
    break;
   case 26:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_gcd_lehmer_n["X"] = 1;

function _gcd_2($gp, $up_val, $up_1_val, $vp_val, $vp_1_val) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $v1_0_ph = $vp_1_val;
    var $v0_0_ph = $vp_val;
    var $u0_0_ph = $up_val;
    var $u1_0_ph = $up_1_val;
    __label__ = 3;
    break;
   case 3:
    var $u1_0_ph;
    var $u0_0_ph;
    var $v0_0_ph;
    var $v1_0_ph;
    var $v1_0 = $v1_0_ph;
    var $v0_0 = $v0_0_ph;
    __label__ = 4;
    break;
   case 4:
    var $v0_0;
    var $v1_0;
    var $2 = ($u1_0_ph | 0) == ($v1_0 | 0);
    var $3 = ($u0_0_ph | 0) == ($v0_0 | 0);
    if ($2 | $3) {
      __label__ = 14;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ($u1_0_ph >>> 0 > $v1_0 >>> 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 6:
    var $8 = $u1_0_ph - $v1_0 + (($u0_0_ph >>> 0 < $v0_0 >>> 0) << 31 >> 31) | 0;
    var $9 = $u0_0_ph - $v0_0 | 0;
    var $11 = $9 & -$9;
    if ($11 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $15 = $11 >>> 0 < 256 ? 1 : 9;
    var $20 = $15;
    __label__ = 9;
    break;
   case 8:
    var $18 = $11 >>> 0 < 16777216 ? 17 : 25;
    var $20 = $18;
    __label__ = 9;
    break;
   case 9:
    var $20;
    var $22 = STRING_TABLE.___gmpn_clz_tab + ($11 >>> ($20 >>> 0)) | 0;
    var $26 = $20 - 33 + (HEAPU8[$22] & 255) | 0;
    var $27 = $26 + 31 | 0;
    var $32 = $8 >>> ($27 >>> 0);
    var $v1_0_ph = $v1_0;
    var $v0_0_ph = $v0_0;
    var $u0_0_ph = $8 << 1 - $26 | $9 >>> ($27 >>> 0);
    var $u1_0_ph = $32;
    __label__ = 3;
    break;
   case 10:
    var $35 = $v1_0 - $u1_0_ph + (($v0_0 >>> 0 < $u0_0_ph >>> 0) << 31 >> 31) | 0;
    var $36 = $v0_0 - $u0_0_ph | 0;
    var $38 = $36 & -$36;
    if ($38 >>> 0 < 65536) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $42 = $38 >>> 0 < 256 ? 1 : 9;
    var $47 = $42;
    __label__ = 13;
    break;
   case 12:
    var $45 = $38 >>> 0 < 16777216 ? 17 : 25;
    var $47 = $45;
    __label__ = 13;
    break;
   case 13:
    var $47;
    var $49 = STRING_TABLE.___gmpn_clz_tab + ($38 >>> ($47 >>> 0)) | 0;
    var $53 = $47 - 33 + (HEAPU8[$49] & 255) | 0;
    var $54 = $53 + 31 | 0;
    var $58 = $35 << 1 - $53 | $36 >>> ($54 >>> 0);
    var $v1_0 = $35 >>> ($54 >>> 0);
    var $v0_0 = $58;
    __label__ = 4;
    break;
   case 14:
    HEAP32[$gp >> 2] = $u0_0_ph;
    HEAP32[$gp + 4 >> 2] = $u1_0_ph;
    var $62 = ($u1_0_ph | 0) != 0 ? 2 : 1;
    if ($2 & $3) {
      var $_0 = $62;
      __label__ = 23;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if ($3) {
      __label__ = 16;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 16:
    if ($u1_0_ph >>> 0 > $v1_0 >>> 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $77 = $u1_0_ph - $v1_0 | 0;
    __label__ = 22;
    break;
   case 18:
    var $77 = $v1_0 - $u1_0_ph | 0;
    __label__ = 22;
    break;
   case 19:
    if ($u0_0_ph >>> 0 > $v0_0 >>> 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $77 = $u0_0_ph - $v0_0 | 0;
    __label__ = 22;
    break;
   case 21:
    var $77 = $v0_0 - $u0_0_ph | 0;
    __label__ = 22;
    break;
   case 22:
    var $77;
    var $78 = ___gmpn_gcd_1($gp, $62, $77);
    HEAP32[$gp >> 2] = $78;
    var $_0 = 1;
    __label__ = 23;
    break;
   case 23:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_gcd_2["X"] = 1;

function ___gmpn_gcd_subdiv_step($gp, $gn, $ap, $bp, $n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $an_0 = $n;
    __label__ = 3;
    break;
   case 3:
    var $an_0;
    if (($an_0 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $bn_0 = $n;
      __label__ = 5;
      break;
    }
   case 4:
    var $4 = $an_0 - 1 | 0;
    if ((HEAP32[$ap + ($4 << 2) >> 2] | 0) == 0) {
      var $an_0 = $4;
      __label__ = 3;
      break;
    } else {
      var $bn_0 = $n;
      __label__ = 5;
      break;
    }
   case 5:
    var $bn_0;
    if (($bn_0 | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $10 = $bn_0 - 1 | 0;
    if ((HEAP32[$bp + ($10 << 2) >> 2] | 0) == 0) {
      var $bn_0 = $10;
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($an_0 | 0) == 0) {
      var $_02 = $bp;
      var $bn_1 = $bn_0;
      __label__ = 8;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 8:
    var $bn_1;
    var $_02;
    if (($bn_1 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $19 = $bn_1 - 1 | 0;
    var $20 = HEAP32[$_02 >> 2];
    if (($19 | 0) == 0) {
      var $__dst_1 = $gp;
      var $__x_1 = $20;
      __label__ = 12;
      break;
    } else {
      var $__n_0 = $19;
      var $__dst_0 = $gp;
      var $_02_pn = $_02;
      var $__x_0 = $20;
      __label__ = 10;
      break;
    }
   case 10:
    var $__x_0;
    var $_02_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_02_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $23 = HEAP32[$__src_0 >> 2];
    var $24 = $__n_0 - 1 | 0;
    if (($24 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__n_0 = $24;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_02_pn = $__src_0;
      var $__x_0 = $23;
      __label__ = 10;
      break;
    }
   case 11:
    var $__dst_1 = $gp + ($19 << 2) | 0;
    var $__x_1 = $23;
    __label__ = 12;
    break;
   case 12:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    HEAP32[$gn >> 2] = $bn_1;
    var $_0 = 0;
    __label__ = 35;
    break;
   case 14:
    if (($bn_0 | 0) == 0) {
      var $an_15 = $an_0;
      var $_017 = $ap;
      __label__ = 16;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 15:
    var $an_1;
    var $_01;
    if (($an_1 | 0) == 0) {
      var $an_16 = 0;
      __label__ = 20;
      break;
    } else {
      var $an_15 = $an_1;
      var $_017 = $_01;
      __label__ = 16;
      break;
    }
   case 16:
    var $_017;
    var $an_15;
    var $31 = $an_15 - 1 | 0;
    var $32 = HEAP32[$_017 >> 2];
    if (($31 | 0) == 0) {
      var $__dst2_1 = $gp;
      var $__x4_1 = $32;
      __label__ = 19;
      break;
    } else {
      var $__n1_0 = $31;
      var $__dst2_0 = $gp;
      var $_01_pn = $_017;
      var $__x4_0 = $32;
      __label__ = 17;
      break;
    }
   case 17:
    var $__x4_0;
    var $_01_pn;
    var $__dst2_0;
    var $__n1_0;
    var $__src3_0 = $_01_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $35 = HEAP32[$__src3_0 >> 2];
    var $36 = $__n1_0 - 1 | 0;
    if (($36 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      var $__n1_0 = $36;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $_01_pn = $__src3_0;
      var $__x4_0 = $35;
      __label__ = 17;
      break;
    }
   case 18:
    var $__dst2_1 = $gp + ($31 << 2) | 0;
    var $__x4_1 = $35;
    __label__ = 19;
    break;
   case 19:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $an_16 = $an_15;
    __label__ = 20;
    break;
   case 20:
    var $an_16;
    HEAP32[$gn >> 2] = $an_16;
    var $_0 = 0;
    __label__ = 35;
    break;
   case 21:
    if (($an_0 | 0) < ($bn_0 | 0)) {
      var $_1 = $bp;
      var $_13 = $ap;
      var $an_2 = $bn_0;
      var $bn_2 = $an_0;
      __label__ = 26;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if (($an_0 | 0) == ($bn_0 | 0)) {
      var $__gmp_i_0 = $an_0;
      __label__ = 23;
      break;
    } else {
      var $_1 = $ap;
      var $_13 = $bp;
      var $an_2 = $an_0;
      var $bn_2 = $bn_0;
      __label__ = 26;
      break;
    }
   case 23:
    var $__gmp_i_0;
    var $44 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 24;
      break;
    } else {
      var $_01 = $ap;
      var $an_1 = $an_0;
      __label__ = 15;
      break;
    }
   case 24:
    var $48 = HEAPU32[$ap + ($44 << 2) >> 2];
    var $50 = HEAPU32[$bp + ($44 << 2) >> 2];
    if (($48 | 0) == ($50 | 0)) {
      var $__gmp_i_0 = $44;
      __label__ = 23;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $not_10 = $48 >>> 0 <= $50 >>> 0;
    var $ap_bp = $not_10 ? $ap : $bp;
    var $bp_ap = $not_10 ? $bp : $ap;
    var $_1 = $bp_ap;
    var $_13 = $ap_bp;
    var $an_2 = $an_0;
    var $bn_2 = $an_0;
    __label__ = 26;
    break;
   case 26:
    var $bn_2;
    var $an_2;
    var $_13;
    var $_1;
    var $54 = ___gmpn_sub($_1, $_1, $an_2, $_13, $bn_2);
    var $an_3 = $an_2;
    __label__ = 27;
    break;
   case 27:
    var $an_3;
    if (($an_3 | 0) > 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $58 = $an_3 - 1 | 0;
    if ((HEAP32[$_1 + ($58 << 2) >> 2] | 0) == 0) {
      var $an_3 = $58;
      __label__ = 27;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    if (($an_3 | 0) < ($bn_2 | 0)) {
      var $_2 = $_13;
      var $_24 = $_1;
      var $an_4 = $bn_2;
      var $bn_3 = $an_3;
      __label__ = 34;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    if (($an_3 | 0) == ($bn_2 | 0)) {
      var $__gmp_i9_0 = $bn_2;
      __label__ = 31;
      break;
    } else {
      var $_2 = $_1;
      var $_24 = $_13;
      var $an_4 = $an_3;
      var $bn_3 = $bn_2;
      __label__ = 34;
      break;
    }
   case 31:
    var $__gmp_i9_0;
    var $66 = $__gmp_i9_0 - 1 | 0;
    if (($__gmp_i9_0 | 0) > 0) {
      __label__ = 32;
      break;
    } else {
      var $_01 = $_1;
      var $an_1 = $bn_2;
      __label__ = 15;
      break;
    }
   case 32:
    var $70 = HEAPU32[$_1 + ($66 << 2) >> 2];
    var $72 = HEAPU32[$_13 + ($66 << 2) >> 2];
    if (($70 | 0) == ($72 | 0)) {
      var $__gmp_i9_0 = $66;
      __label__ = 31;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $not_ = $70 >>> 0 <= $72 >>> 0;
    var $_1__13 = $not_ ? $_1 : $_13;
    var $_13__1 = $not_ ? $_13 : $_1;
    var $_2 = $_13__1;
    var $_24 = $_1__13;
    var $an_4 = $bn_2;
    var $bn_3 = $bn_2;
    __label__ = 34;
    break;
   case 34:
    var $bn_3;
    var $an_4;
    var $_24;
    var $_2;
    ___gmpn_tdiv_qr($tp, $_2, 0, $_2, $an_4, $_24, $bn_3);
    var $76 = _mpn_zero_p213($_2, $bn_3);
    if (($76 | 0) == 0) {
      var $_0 = $bn_3;
      __label__ = 35;
      break;
    } else {
      var $_02 = $_24;
      var $bn_1 = $bn_3;
      __label__ = 8;
      break;
    }
   case 35:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_gcd_subdiv_step["X"] = 1;

function ___gmpn_gcdext_lehmer_n($gp, $up, $usize, $ap, $bp, $n, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $M = __stackBase__;
    var $gn = __stackBase__ + 16;
    var $updated_un = __stackBase__ + 20;
    var $u = __stackBase__ + 24;
    var $v = __stackBase__ + 28;
    var $1 = $n + 1 | 0;
    var $2 = (i64Math.multiply($1, 0, 3, 0), i64Math.result[0]);
    if (($2 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $tp40 = $tp;
    var $4 = (i64Math.multiply($n, 0, 12, 0), i64Math.result[0]);
    var $5 = $4 + 12 | 0;
    _memset($tp40, 0, $5, 4);
    __label__ = 4;
    break;
   case 4:
    var $7 = $tp + ($1 << 2) | 0;
    var $_sum = $1 << 1;
    var $8 = $tp + ($_sum << 2) | 0;
    var $9 = $tp + ($_sum + $1 << 2) | 0;
    HEAP32[$7 >> 2] = 1;
    var $10 = $bp + 4 | 0;
    var $_01_ph = $ap;
    var $_02_ph = $n;
    var $_03_ph = $9;
    var $un_0_ph = 1;
    var $u0_0_ph = $tp;
    var $u2_0_ph = $8;
    __label__ = 5;
    break;
   case 5:
    var $u2_0_ph;
    var $u0_0_ph;
    var $un_0_ph;
    var $_03_ph;
    var $_02_ph;
    var $_01_ph;
    var $11 = $_01_ph + 4 | 0;
    var $_02 = $_02_ph;
    var $un_0 = $un_0_ph;
    __label__ = 6;
    break;
   case 6:
    var $un_0;
    var $_02;
    if (($_02 | 0) > 1) {
      __label__ = 7;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 7:
    var $15 = $_02 - 1 | 0;
    var $17 = HEAPU32[$_01_ph + ($15 << 2) >> 2];
    var $19 = HEAPU32[$bp + ($15 << 2) >> 2];
    var $20 = $19 | $17;
    if (($20 | 0) < 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $23 = $_02 - 2 | 0;
    var $ah_0 = $17;
    var $al_0 = HEAP32[$_01_ph + ($23 << 2) >> 2];
    var $bh_0 = $19;
    var $bl_0 = HEAP32[$bp + ($23 << 2) >> 2];
    __label__ = 18;
    break;
   case 9:
    var $30 = $20 >>> 0 < 65536;
    if (($_02 | 0) == 2) {
      __label__ = 10;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 10:
    if ($30) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $34 = $20 >>> 0 < 256 ? 1 : 9;
    var $39 = $34;
    __label__ = 13;
    break;
   case 12:
    var $37 = $20 >>> 0 < 16777216 ? 17 : 25;
    var $39 = $37;
    __label__ = 13;
    break;
   case 13:
    var $39;
    var $42 = STRING_TABLE.___gmpn_clz_tab + ($20 >>> ($39 >>> 0)) | 0;
    var $45 = 33 - $39 - (HEAPU8[$42] & 255) | 0;
    var $48 = HEAPU32[$_01_ph >> 2];
    var $49 = 32 - $45 | 0;
    var $55 = HEAPU32[$bp >> 2];
    var $ah_0 = $48 >>> ($49 >>> 0) | HEAP32[$11 >> 2] << $45;
    var $al_0 = $48 << $45;
    var $bh_0 = $55 >>> ($49 >>> 0) | HEAP32[$10 >> 2] << $45;
    var $bl_0 = $55 << $45;
    __label__ = 18;
    break;
   case 14:
    if ($30) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $62 = $20 >>> 0 < 256 ? 1 : 9;
    var $67 = $62;
    __label__ = 17;
    break;
   case 16:
    var $65 = $20 >>> 0 < 16777216 ? 17 : 25;
    var $67 = $65;
    __label__ = 17;
    break;
   case 17:
    var $67;
    var $70 = STRING_TABLE.___gmpn_clz_tab + ($20 >>> ($67 >>> 0)) | 0;
    var $73 = 33 - $67 - (HEAPU8[$70] & 255) | 0;
    var $75 = $_02 - 2 | 0;
    var $77 = HEAPU32[$_01_ph + ($75 << 2) >> 2];
    var $78 = 32 - $73 | 0;
    var $82 = $_02 - 3 | 0;
    var $89 = HEAPU32[$bp + ($75 << 2) >> 2];
    var $ah_0 = $77 >>> ($78 >>> 0) | $17 << $73;
    var $al_0 = HEAPU32[$_01_ph + ($82 << 2) >> 2] >>> ($78 >>> 0) | $77 << $73;
    var $bh_0 = $89 >>> ($78 >>> 0) | $19 << $73;
    var $bl_0 = HEAPU32[$bp + ($82 << 2) >> 2] >>> ($78 >>> 0) | $89 << $73;
    __label__ = 18;
    break;
   case 18:
    var $bl_0;
    var $bh_0;
    var $al_0;
    var $ah_0;
    var $98 = ___gmpn_hgcd2($ah_0, $al_0, $bh_0, $bl_0, $M);
    if (($98 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $101 = ___gmpn_hgcd_mul_matrix1_inverse_vector($M, $_03_ph, $_01_ph, $bp, $_02);
    var $102 = ___gmpn_hgcd_mul_matrix1_vector($M, $u2_0_ph, $u0_0_ph, $7, $un_0);
    var $_01_ph = $_03_ph;
    var $u0_0_ph = $u2_0_ph;
    var $_02_ph = $101;
    var $un_0_ph = $102;
    var $u2_0_ph = $u0_0_ph;
    var $_03_ph = $_01_ph;
    __label__ = 5;
    break;
   case 20:
    HEAP32[$updated_un >> 2] = $un_0;
    var $104 = ___gmpn_gcdext_subdiv_step($gp, $gn, $up, $usize, $_01_ph, $bp, $_02, $u0_0_ph, $7, $updated_un, $_03_ph, $u2_0_ph);
    if (($104 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $_0 = HEAP32[$gn >> 2];
    __label__ = 75;
    break;
   case 22:
    var $_02 = $104;
    var $un_0 = HEAP32[$updated_un >> 2];
    __label__ = 6;
    break;
   case 23:
    var $111 = HEAPU32[$_01_ph >> 2];
    if (($111 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    ___gmp_assert_fail(STRING_TABLE.__str215 | 0, 122, STRING_TABLE.__str1216 | 0);
    throw "Reached an unreachable!";
   case 25:
    var $115 = HEAPU32[$bp >> 2];
    if (($115 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    ___gmp_assert_fail(STRING_TABLE.__str215 | 0, 123, STRING_TABLE.__str2217 | 0);
    throw "Reached an unreachable!";
   case 27:
    if (($111 | 0) == ($115 | 0)) {
      __label__ = 28;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 28:
    HEAP32[$gp >> 2] = $111;
    var $__gmp_i_0 = $un_0;
    __label__ = 29;
    break;
   case 29:
    var $__gmp_i_0;
    var $122 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 30:
    var $126 = HEAPU32[$u0_0_ph + ($122 << 2) >> 2];
    var $128 = HEAPU32[$tp + ($__gmp_i_0 + $n << 2) >> 2];
    if (($126 | 0) == ($128 | 0)) {
      var $__gmp_i_0 = $122;
      __label__ = 29;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    if ($126 >>> 0 > $128 >>> 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $un_2 = $un_0;
    var $indvars_iv57 = $up + ($un_0 - 1 << 2) | 0;
    __label__ = 41;
    break;
   case 33:
    var $un_1 = $un_0;
    var $indvars_iv52 = $up + ($un_0 - 1 << 2) | 0;
    __label__ = 34;
    break;
   case 34:
    var $indvars_iv52;
    var $un_1;
    if (($un_1 | 0) > 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $134 = $un_1 - 1 | 0;
    if ((HEAP32[$u0_0_ph + ($134 << 2) >> 2] | 0) == 0) {
      var $un_1 = $134;
      var $indvars_iv52 = $indvars_iv52 - 4 | 0;
      __label__ = 34;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    if (($un_1 | 0) == 0) {
      __label__ = 40;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $141 = $un_1 - 1 | 0;
    var $142 = HEAP32[$u0_0_ph >> 2];
    if (($141 | 0) == 0) {
      var $__x_1 = $142;
      var $__dst6_1 = $up;
      __label__ = 39;
      break;
    } else {
      var $__x_0 = $142;
      var $u0_0_pn9 = $u0_0_ph;
      var $__dst6_0 = $up;
      var $__n5_0 = $141;
      __label__ = 38;
      break;
    }
   case 38:
    var $__n5_0;
    var $__dst6_0;
    var $u0_0_pn9;
    var $__x_0;
    var $__src_0 = $u0_0_pn9 + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x_0;
    var $145 = HEAP32[$__src_0 >> 2];
    var $146 = $__n5_0 - 1 | 0;
    if (($146 | 0) == 0) {
      var $__x_1 = $145;
      var $__dst6_1 = $indvars_iv52;
      __label__ = 39;
      break;
    } else {
      var $__x_0 = $145;
      var $u0_0_pn9 = $__src_0;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $__n5_0 = $146;
      __label__ = 38;
      break;
    }
   case 39:
    var $__dst6_1;
    var $__x_1;
    HEAP32[$__dst6_1 >> 2] = $__x_1;
    __label__ = 40;
    break;
   case 40:
    var $storemerge = -$un_1 | 0;
    __label__ = 47;
    break;
   case 41:
    var $indvars_iv57;
    var $un_2;
    var $150 = $un_2 - 1 | 0;
    if ((HEAP32[$tp + ($un_2 + $n << 2) >> 2] | 0) == 0) {
      var $un_2 = $150;
      var $indvars_iv57 = $indvars_iv57 - 4 | 0;
      __label__ = 41;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    if (($un_2 | 0) == 0) {
      var $storemerge = 0;
      __label__ = 47;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $157 = HEAP32[$7 >> 2];
    if (($150 | 0) == 0) {
      var $__x10_1 = $157;
      var $__dst8_1 = $up;
      __label__ = 46;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $__x10_0 = $157;
    var $__src9_0 = $tp + ($n + 2 << 2) | 0;
    var $__dst8_0 = $up;
    var $__n7_0 = $150;
    __label__ = 45;
    break;
   case 45:
    var $__n7_0;
    var $__dst8_0;
    var $__src9_0;
    var $__x10_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $163 = HEAP32[$__src9_0 >> 2];
    var $164 = $__n7_0 - 1 | 0;
    if (($164 | 0) == 0) {
      var $__x10_1 = $163;
      var $__dst8_1 = $indvars_iv57;
      __label__ = 46;
      break;
    } else {
      var $__x10_0 = $163;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $164;
      __label__ = 45;
      break;
    }
   case 46:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    var $storemerge = $un_2;
    __label__ = 47;
    break;
   case 47:
    var $storemerge;
    HEAP32[$usize >> 2] = $storemerge;
    var $_0 = 1;
    __label__ = 75;
    break;
   case 48:
    var $168 = ___gmpn_gcdext_1($u, $v, $111, $115);
    HEAP32[$gp >> 2] = $168;
    var $169 = HEAPU32[$u >> 2];
    if (($169 | 0) == 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 49:
    var $un_3 = $un_0;
    var $indvars_iv47 = $up + ($un_0 - 1 << 2) | 0;
    __label__ = 50;
    break;
   case 50:
    var $indvars_iv47;
    var $un_3;
    if (($un_3 | 0) > 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 51:
    var $174 = $un_3 - 1 | 0;
    if ((HEAP32[$u0_0_ph + ($174 << 2) >> 2] | 0) == 0) {
      var $un_3 = $174;
      var $indvars_iv47 = $indvars_iv47 - 4 | 0;
      __label__ = 50;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    if (($un_3 | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    var $181 = $un_3 - 1 | 0;
    var $182 = HEAP32[$u0_0_ph >> 2];
    if (($181 | 0) == 0) {
      var $__x14_1 = $182;
      var $__dst12_1 = $up;
      __label__ = 55;
      break;
    } else {
      var $__x14_0 = $182;
      var $u0_0_pn = $u0_0_ph;
      var $__dst12_0 = $up;
      var $__n11_0 = $181;
      __label__ = 54;
      break;
    }
   case 54:
    var $__n11_0;
    var $__dst12_0;
    var $u0_0_pn;
    var $__x14_0;
    var $__src13_0 = $u0_0_pn + 4 | 0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    var $185 = HEAP32[$__src13_0 >> 2];
    var $186 = $__n11_0 - 1 | 0;
    if (($186 | 0) == 0) {
      var $__x14_1 = $185;
      var $__dst12_1 = $indvars_iv47;
      __label__ = 55;
      break;
    } else {
      var $__x14_0 = $185;
      var $u0_0_pn = $__src13_0;
      var $__dst12_0 = $__dst12_0 + 4 | 0;
      var $__n11_0 = $186;
      __label__ = 54;
      break;
    }
   case 55:
    var $__dst12_1;
    var $__x14_1;
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    __label__ = 56;
    break;
   case 56:
    HEAP32[$usize >> 2] = -$un_3 | 0;
    var $_0 = 1;
    __label__ = 75;
    break;
   case 57:
    var $191 = HEAP32[$v >> 2];
    if (($191 | 0) == 0) {
      __label__ = 58;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 58:
    var $un_4 = $un_0;
    var $indvars_iv = $up + ($un_0 - 1 << 2) | 0;
    __label__ = 59;
    break;
   case 59:
    var $indvars_iv;
    var $un_4;
    if (($un_4 | 0) > 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 60:
    if ((HEAP32[$tp + ($un_4 + $n << 2) >> 2] | 0) == 0) {
      var $un_4 = $un_4 - 1 | 0;
      var $indvars_iv = $indvars_iv - 4 | 0;
      __label__ = 59;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 61:
    if (($un_4 | 0) == 0) {
      __label__ = 66;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    var $203 = $un_4 - 1 | 0;
    var $204 = HEAP32[$7 >> 2];
    if (($203 | 0) == 0) {
      var $__x18_1 = $204;
      var $__dst16_1 = $up;
      __label__ = 65;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $__x18_0 = $204;
    var $__src17_0 = $tp + ($n + 2 << 2) | 0;
    var $__dst16_0 = $up;
    var $__n15_0 = $203;
    __label__ = 64;
    break;
   case 64:
    var $__n15_0;
    var $__dst16_0;
    var $__src17_0;
    var $__x18_0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    var $210 = HEAP32[$__src17_0 >> 2];
    var $211 = $__n15_0 - 1 | 0;
    if (($211 | 0) == 0) {
      var $__x18_1 = $210;
      var $__dst16_1 = $indvars_iv;
      __label__ = 65;
      break;
    } else {
      var $__x18_0 = $210;
      var $__src17_0 = $__src17_0 + 4 | 0;
      var $__dst16_0 = $__dst16_0 + 4 | 0;
      var $__n15_0 = $211;
      __label__ = 64;
      break;
    }
   case 65:
    var $__dst16_1;
    var $__x18_1;
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    __label__ = 66;
    break;
   case 66:
    HEAP32[$usize >> 2] = $un_4;
    var $_0 = 1;
    __label__ = 75;
    break;
   case 67:
    if (($169 | 0) > 0) {
      __label__ = 68;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 68:
    var $217 = -$191 | 0;
    HEAP32[$v >> 2] = $217;
    var $negate_0 = 0;
    var $222 = $169;
    var $221 = $217;
    __label__ = 70;
    break;
   case 69:
    var $219 = -$169 | 0;
    HEAP32[$u >> 2] = $219;
    var $negate_0 = 1;
    var $222 = $219;
    var $221 = $191;
    __label__ = 70;
    break;
   case 70:
    var $221;
    var $222;
    var $negate_0;
    var $223 = ___gmpn_mul_1($up, $7, $un_0, $222);
    var $224 = ___gmpn_addmul_1($up, $u0_0_ph, $un_0, $221);
    if (($224 | $223 | 0) == 0) {
      var $un_5 = $un_0;
      __label__ = 73;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $uadd = _llvm_uadd_with_overflow_i32($223, $224);
    var $228 = $uadd.f0;
    var $229 = $un_0 + 1 | 0;
    HEAP32[$up + ($un_0 << 2) >> 2] = $228;
    var $231 = $uadd.f1;
    if ($231) {
      __label__ = 72;
      break;
    } else {
      var $un_5 = $229;
      __label__ = 73;
      break;
    }
   case 72:
    HEAP32[$up + ($229 << 2) >> 2] = 1;
    var $un_5 = $un_0 + 2 | 0;
    __label__ = 73;
    break;
   case 73:
    var $un_5;
    var $235 = $un_5 - 1 | 0;
    if ((HEAP32[$up + ($235 << 2) >> 2] | 0) == 0) {
      var $un_5 = $235;
      __label__ = 73;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 74:
    var $242 = ($negate_0 | 0) != 0 ? -$un_5 | 0 : $un_5;
    HEAP32[$usize >> 2] = $242;
    var $_0 = 1;
    __label__ = 75;
    break;
   case 75:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_gcdext_lehmer_n["X"] = 1;

function _mpn_zero_p222($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_gcdext_subdiv_step($gp, $gn, $up, $usizep, $ap, $bp, $n, $u0, $u1, $unp, $qp, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $an_0 = $n;
    var $indvars_iv74 = $gp + ($n - 1 << 2) | 0;
    __label__ = 3;
    break;
   case 3:
    var $indvars_iv74;
    var $an_0;
    if (($an_0 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $bn_0 = $n;
      __label__ = 5;
      break;
    }
   case 4:
    var $5 = $an_0 - 1 | 0;
    if ((HEAP32[$ap + ($5 << 2) >> 2] | 0) == 0) {
      var $an_0 = $5;
      var $indvars_iv74 = $indvars_iv74 - 4 | 0;
      __label__ = 3;
      break;
    } else {
      var $bn_0 = $n;
      __label__ = 5;
      break;
    }
   case 5:
    var $bn_0;
    if (($bn_0 | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $11 = $bn_0 - 1 | 0;
    if ((HEAP32[$bp + ($11 << 2) >> 2] | 0) == 0) {
      var $bn_0 = $11;
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $16 = HEAPU32[$unp >> 2];
    if (($an_0 | 0) == 0) {
      var $_02 = $bp;
      var $_04 = $u0;
      var $bn_1 = $bn_0;
      var $un_0 = $16;
      var $swapped_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 8:
    var $swapped_0;
    var $un_0;
    var $bn_1;
    var $_04;
    var $_02;
    if (($bn_1 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $20 = $bn_1 - 1 | 0;
    var $21 = HEAP32[$_02 >> 2];
    if (($20 | 0) == 0) {
      var $__dst_1 = $gp;
      var $__x_1 = $21;
      __label__ = 12;
      break;
    } else {
      var $__n_0 = $20;
      var $__dst_0 = $gp;
      var $_02_pn = $_02;
      var $__x_0 = $21;
      __label__ = 10;
      break;
    }
   case 10:
    var $__x_0;
    var $_02_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_02_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $24 = HEAP32[$__src_0 >> 2];
    var $25 = $__n_0 - 1 | 0;
    if (($25 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__n_0 = $25;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_02_pn = $__src_0;
      var $__x_0 = $24;
      __label__ = 10;
      break;
    }
   case 11:
    var $__dst_1 = $gp + ($20 << 2) | 0;
    var $__x_1 = $24;
    __label__ = 12;
    break;
   case 12:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    HEAP32[$gn >> 2] = $bn_1;
    var $un_1 = $un_0;
    var $indvars_iv87 = $up + ($un_0 - 1 << 2) | 0;
    __label__ = 14;
    break;
   case 14:
    var $indvars_iv87;
    var $un_1;
    if (($un_1 | 0) > 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $33 = $un_1 - 1 | 0;
    if ((HEAP32[$_04 + ($33 << 2) >> 2] | 0) == 0) {
      var $un_1 = $33;
      var $indvars_iv87 = $indvars_iv87 - 4 | 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if (($un_1 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $40 = $un_1 - 1 | 0;
    var $41 = HEAP32[$_04 >> 2];
    if (($40 | 0) == 0) {
      var $__dst2_1 = $up;
      var $__x4_1 = $41;
      __label__ = 19;
      break;
    } else {
      var $__n1_0 = $40;
      var $__dst2_0 = $up;
      var $_04_pn = $_04;
      var $__x4_0 = $41;
      __label__ = 18;
      break;
    }
   case 18:
    var $__x4_0;
    var $_04_pn;
    var $__dst2_0;
    var $__n1_0;
    var $__src3_0 = $_04_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $44 = HEAP32[$__src3_0 >> 2];
    var $45 = $__n1_0 - 1 | 0;
    if (($45 | 0) == 0) {
      var $__dst2_1 = $indvars_iv87;
      var $__x4_1 = $44;
      __label__ = 19;
      break;
    } else {
      var $__n1_0 = $45;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $_04_pn = $__src3_0;
      var $__x4_0 = $44;
      __label__ = 18;
      break;
    }
   case 19:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 20;
    break;
   case 20:
    var $50 = ($swapped_0 | 0) != 0 ? $un_1 : -$un_1 | 0;
    HEAP32[$usizep >> 2] = $50;
    var $_0 = 0;
    __label__ = 76;
    break;
   case 21:
    if (($bn_0 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 22:
    var $54 = $an_0 - 1 | 0;
    var $55 = HEAP32[$ap >> 2];
    if (($54 | 0) == 0) {
      var $__dst6_1 = $gp;
      var $__x8_1 = $55;
      __label__ = 24;
      break;
    } else {
      var $__n5_0 = $54;
      var $__dst6_0 = $gp;
      var $ap_pn10 = $ap;
      var $__x8_0 = $55;
      __label__ = 23;
      break;
    }
   case 23:
    var $__x8_0;
    var $ap_pn10;
    var $__dst6_0;
    var $__n5_0;
    var $__src7_0 = $ap_pn10 + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $58 = HEAP32[$__src7_0 >> 2];
    var $59 = $__n5_0 - 1 | 0;
    if (($59 | 0) == 0) {
      var $__dst6_1 = $indvars_iv74;
      var $__x8_1 = $58;
      __label__ = 24;
      break;
    } else {
      var $__n5_0 = $59;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $ap_pn10 = $__src7_0;
      var $__x8_0 = $58;
      __label__ = 23;
      break;
    }
   case 24:
    var $__x8_1;
    var $__dst6_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    HEAP32[$gn >> 2] = $an_0;
    var $un_2 = $16;
    var $indvars_iv79 = $up + ($16 - 1 << 2) | 0;
    __label__ = 25;
    break;
   case 25:
    var $indvars_iv79;
    var $un_2;
    if (($un_2 | 0) > 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $65 = $un_2 - 1 | 0;
    if ((HEAP32[$u1 + ($65 << 2) >> 2] | 0) == 0) {
      var $un_2 = $65;
      var $indvars_iv79 = $indvars_iv79 - 4 | 0;
      __label__ = 25;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    if (($un_2 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $72 = $un_2 - 1 | 0;
    var $73 = HEAP32[$u1 >> 2];
    if (($72 | 0) == 0) {
      var $__dst10_1 = $up;
      var $__x12_1 = $73;
      __label__ = 30;
      break;
    } else {
      var $__n9_0 = $72;
      var $__dst10_0 = $up;
      var $u1_pn9 = $u1;
      var $__x12_0 = $73;
      __label__ = 29;
      break;
    }
   case 29:
    var $__x12_0;
    var $u1_pn9;
    var $__dst10_0;
    var $__n9_0;
    var $__src11_0 = $u1_pn9 + 4 | 0;
    HEAP32[$__dst10_0 >> 2] = $__x12_0;
    var $76 = HEAP32[$__src11_0 >> 2];
    var $77 = $__n9_0 - 1 | 0;
    if (($77 | 0) == 0) {
      var $__dst10_1 = $indvars_iv79;
      var $__x12_1 = $76;
      __label__ = 30;
      break;
    } else {
      var $__n9_0 = $77;
      var $__dst10_0 = $__dst10_0 + 4 | 0;
      var $u1_pn9 = $__src11_0;
      var $__x12_0 = $76;
      __label__ = 29;
      break;
    }
   case 30:
    var $__x12_1;
    var $__dst10_1;
    HEAP32[$__dst10_1 >> 2] = $__x12_1;
    __label__ = 31;
    break;
   case 31:
    HEAP32[$usizep >> 2] = $un_2;
    var $_0 = 0;
    __label__ = 76;
    break;
   case 32:
    if (($an_0 | 0) < ($bn_0 | 0)) {
      var $_01 = $bp;
      var $_13 = $ap;
      var $_15 = $u1;
      var $_07 = $u0;
      var $an_1 = $bn_0;
      var $bn_2 = $an_0;
      var $swapped_2 = 1;
      __label__ = 57;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    if (($an_0 | 0) == ($bn_0 | 0)) {
      var $__gmp_i_0 = $an_0;
      __label__ = 34;
      break;
    } else {
      var $_01 = $ap;
      var $_13 = $bp;
      var $_15 = $u0;
      var $_07 = $u1;
      var $an_1 = $an_0;
      var $bn_2 = $bn_0;
      var $swapped_2 = 0;
      __label__ = 57;
      break;
    }
   case 34:
    var $__gmp_i_0;
    var $84 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $88 = HEAPU32[$ap + ($84 << 2) >> 2];
    var $90 = HEAPU32[$bp + ($84 << 2) >> 2];
    if (($88 | 0) == ($90 | 0)) {
      var $__gmp_i_0 = $84;
      __label__ = 34;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 36:
    var $92 = $an_0 - 1 | 0;
    var $93 = HEAP32[$ap >> 2];
    if (($92 | 0) == 0) {
      var $__x17_1 = $93;
      var $__dst15_1 = $gp;
      __label__ = 38;
      break;
    } else {
      var $__x17_0 = $93;
      var $__n14_0 = $92;
      var $__dst15_0 = $gp;
      var $ap_pn = $ap;
      __label__ = 37;
      break;
    }
   case 37:
    var $ap_pn;
    var $__dst15_0;
    var $__n14_0;
    var $__x17_0;
    var $__src16_0 = $ap_pn + 4 | 0;
    HEAP32[$__dst15_0 >> 2] = $__x17_0;
    var $96 = HEAP32[$__src16_0 >> 2];
    var $97 = $__n14_0 - 1 | 0;
    if (($97 | 0) == 0) {
      var $__x17_1 = $96;
      var $__dst15_1 = $indvars_iv74;
      __label__ = 38;
      break;
    } else {
      var $__x17_0 = $96;
      var $__n14_0 = $97;
      var $__dst15_0 = $__dst15_0 + 4 | 0;
      var $ap_pn = $__src16_0;
      __label__ = 37;
      break;
    }
   case 38:
    var $__dst15_1;
    var $__x17_1;
    HEAP32[$__dst15_1 >> 2] = $__x17_1;
    HEAP32[$gn >> 2] = $an_0;
    var $__gmp_i18_0 = $16;
    __label__ = 39;
    break;
   case 39:
    var $__gmp_i18_0;
    var $101 = $__gmp_i18_0 - 1 | 0;
    if (($__gmp_i18_0 | 0) > 0) {
      __label__ = 40;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 40:
    var $105 = HEAPU32[$u0 + ($101 << 2) >> 2];
    var $107 = HEAPU32[$u1 + ($101 << 2) >> 2];
    if (($105 | 0) == ($107 | 0)) {
      var $__gmp_i18_0 = $101;
      __label__ = 39;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    if ($105 >>> 0 > $107 >>> 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $un_4 = $16;
    var $indvars_iv62 = $up + ($16 - 1 << 2) | 0;
    __label__ = 50;
    break;
   case 43:
    var $un_3 = $16;
    var $indvars_iv58 = $up + ($16 - 1 << 2) | 0;
    __label__ = 44;
    break;
   case 44:
    var $indvars_iv58;
    var $un_3;
    if (($un_3 | 0) > 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    var $115 = $un_3 - 1 | 0;
    if ((HEAP32[$u0 + ($115 << 2) >> 2] | 0) == 0) {
      var $un_3 = $115;
      var $indvars_iv58 = $indvars_iv58 - 4 | 0;
      __label__ = 44;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    if (($un_3 | 0) == 0) {
      var $un_5 = 0;
      var $swapped_1 = 1;
      __label__ = 55;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $122 = $un_3 - 1 | 0;
    var $123 = HEAP32[$u0 >> 2];
    if (($122 | 0) == 0) {
      var $__x24_1 = $123;
      var $__dst22_1 = $up;
      __label__ = 49;
      break;
    } else {
      var $__x24_0 = $123;
      var $u0_pn = $u0;
      var $__dst22_0 = $up;
      var $__n21_0 = $122;
      __label__ = 48;
      break;
    }
   case 48:
    var $__n21_0;
    var $__dst22_0;
    var $u0_pn;
    var $__x24_0;
    var $__src23_0 = $u0_pn + 4 | 0;
    HEAP32[$__dst22_0 >> 2] = $__x24_0;
    var $126 = HEAP32[$__src23_0 >> 2];
    var $127 = $__n21_0 - 1 | 0;
    if (($127 | 0) == 0) {
      var $__x24_1 = $126;
      var $__dst22_1 = $indvars_iv58;
      __label__ = 49;
      break;
    } else {
      var $__x24_0 = $126;
      var $u0_pn = $__src23_0;
      var $__dst22_0 = $__dst22_0 + 4 | 0;
      var $__n21_0 = $127;
      __label__ = 48;
      break;
    }
   case 49:
    var $__dst22_1;
    var $__x24_1;
    HEAP32[$__dst22_1 >> 2] = $__x24_1;
    var $un_5 = $un_3;
    var $swapped_1 = 1;
    __label__ = 55;
    break;
   case 50:
    var $indvars_iv62;
    var $un_4;
    var $129 = $un_4 - 1 | 0;
    if ((HEAP32[$u1 + ($129 << 2) >> 2] | 0) == 0) {
      var $un_4 = $129;
      var $indvars_iv62 = $indvars_iv62 - 4 | 0;
      __label__ = 50;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    if (($un_4 | 0) == 0) {
      var $un_5 = 0;
      var $swapped_1 = 0;
      __label__ = 55;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    var $136 = HEAP32[$u1 >> 2];
    if (($129 | 0) == 0) {
      var $__x28_1 = $136;
      var $__dst26_1 = $up;
      __label__ = 54;
      break;
    } else {
      var $__x28_0 = $136;
      var $u1_pn = $u1;
      var $__dst26_0 = $up;
      var $__n25_0 = $129;
      __label__ = 53;
      break;
    }
   case 53:
    var $__n25_0;
    var $__dst26_0;
    var $u1_pn;
    var $__x28_0;
    var $__src27_0 = $u1_pn + 4 | 0;
    HEAP32[$__dst26_0 >> 2] = $__x28_0;
    var $139 = HEAP32[$__src27_0 >> 2];
    var $140 = $__n25_0 - 1 | 0;
    if (($140 | 0) == 0) {
      var $__x28_1 = $139;
      var $__dst26_1 = $indvars_iv62;
      __label__ = 54;
      break;
    } else {
      var $__x28_0 = $139;
      var $u1_pn = $__src27_0;
      var $__dst26_0 = $__dst26_0 + 4 | 0;
      var $__n25_0 = $140;
      __label__ = 53;
      break;
    }
   case 54:
    var $__dst26_1;
    var $__x28_1;
    HEAP32[$__dst26_1 >> 2] = $__x28_1;
    var $un_5 = $un_4;
    var $swapped_1 = 0;
    __label__ = 55;
    break;
   case 55:
    var $swapped_1;
    var $un_5;
    var $144 = $swapped_1 ? -$un_5 | 0 : $un_5;
    HEAP32[$usizep >> 2] = $144;
    var $_0 = 0;
    __label__ = 76;
    break;
   case 56:
    var $not_15 = $88 >>> 0 <= $90 >>> 0;
    var $u0_u1 = $not_15 ? $u0 : $u1;
    var $u1_u0 = $not_15 ? $u1 : $u0;
    var $ap_bp = $not_15 ? $ap : $bp;
    var $bp_ap = $not_15 ? $bp : $ap;
    var $_01 = $bp_ap;
    var $_13 = $ap_bp;
    var $_15 = $u1_u0;
    var $_07 = $u0_u1;
    var $an_1 = $an_0;
    var $bn_2 = $an_0;
    var $swapped_2 = $not_15 & 1;
    __label__ = 57;
    break;
   case 57:
    var $swapped_2;
    var $bn_2;
    var $an_1;
    var $_07;
    var $_15;
    var $_13;
    var $_01;
    var $147 = ___gmpn_sub($_01, $_01, $an_1, $_13, $bn_2);
    var $an_2 = $an_1;
    __label__ = 58;
    break;
   case 58:
    var $an_2;
    if (($an_2 | 0) > 0) {
      __label__ = 59;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 59:
    var $151 = $an_2 - 1 | 0;
    if ((HEAP32[$_01 + ($151 << 2) >> 2] | 0) == 0) {
      var $an_2 = $151;
      __label__ = 58;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $156 = ___gmpn_add_n($_07, $_07, $_15, $16);
    HEAP32[$_07 + ($16 << 2) >> 2] = $156;
    var $160 = (($156 | 0) != 0 & 1) + $16 | 0;
    if (($an_2 | 0) < ($bn_2 | 0)) {
      __label__ = 61;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 61:
    var $_1 = $_13;
    var $_2 = $_01;
    var $_26 = $_07;
    var $_18 = $_15;
    var $an_3 = $bn_2;
    var $bn_3 = $an_2;
    var $swapped_3 = $swapped_2 ^ 1;
    __label__ = 66;
    break;
   case 62:
    if (($an_2 | 0) == ($bn_2 | 0)) {
      var $__gmp_i35_0 = $bn_2;
      __label__ = 63;
      break;
    } else {
      var $_1 = $_01;
      var $_2 = $_13;
      var $_26 = $_15;
      var $_18 = $_07;
      var $an_3 = $an_2;
      var $bn_3 = $bn_2;
      var $swapped_3 = $swapped_2;
      __label__ = 66;
      break;
    }
   case 63:
    var $__gmp_i35_0;
    var $166 = $__gmp_i35_0 - 1 | 0;
    if (($__gmp_i35_0 | 0) > 0) {
      __label__ = 64;
      break;
    } else {
      var $_02 = $_13;
      var $_04 = $_15;
      var $bn_1 = $bn_2;
      var $un_0 = $160;
      var $swapped_0 = $swapped_2;
      __label__ = 8;
      break;
    }
   case 64:
    var $170 = HEAPU32[$_01 + ($166 << 2) >> 2];
    var $172 = HEAPU32[$_13 + ($166 << 2) >> 2];
    if (($170 | 0) == ($172 | 0)) {
      var $__gmp_i35_0 = $166;
      __label__ = 63;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    var $not_14 = $170 >>> 0 <= $172 >>> 0;
    var $_15__07 = $not_14 ? $_15 : $_07;
    var $_07__15 = $not_14 ? $_07 : $_15;
    var $_01__13 = $not_14 ? $_01 : $_13;
    var $_13__01 = $not_14 ? $_13 : $_01;
    var $_1 = $_13__01;
    var $_2 = $_01__13;
    var $_26 = $_07__15;
    var $_18 = $_15__07;
    var $an_3 = $bn_2;
    var $bn_3 = $bn_2;
    var $swapped_3 = $not_14 & 1 ^ $swapped_2;
    __label__ = 66;
    break;
   case 66:
    var $swapped_3;
    var $bn_3;
    var $an_3;
    var $_18;
    var $_26;
    var $_2;
    var $_1;
    var $177 = $an_3 - $bn_3 | 0;
    ___gmpn_tdiv_qr($qp, $_1, 0, $_1, $an_3, $_2, $bn_3);
    var $178 = _mpn_zero_p222($_1, $bn_3);
    if (($178 | 0) == 0) {
      var $u0n_0 = $160;
      __label__ = 67;
      break;
    } else {
      var $_02 = $_2;
      var $_04 = $_26;
      var $bn_1 = $bn_3;
      var $un_0 = $160;
      var $swapped_0 = $swapped_3;
      __label__ = 8;
      break;
    }
   case 67:
    var $u0n_0;
    if (($u0n_0 | 0) > 0) {
      __label__ = 68;
      break;
    } else {
      var $un_6 = $160;
      __label__ = 75;
      break;
    }
   case 68:
    var $182 = $u0n_0 - 1 | 0;
    if ((HEAP32[$_26 + ($182 << 2) >> 2] | 0) == 0) {
      var $u0n_0 = $182;
      __label__ = 67;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 69:
    var $191 = $177 + 1 + (((HEAP32[$qp + ($177 << 2) >> 2] | 0) == 0) << 31 >> 31) | 0;
    if (($191 | 0) > ($u0n_0 | 0)) {
      __label__ = 70;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 70:
    var $194 = ___gmpn_mul($tp, $qp, $191, $_26, $u0n_0);
    __label__ = 72;
    break;
   case 71:
    var $196 = ___gmpn_mul($tp, $_26, $u0n_0, $qp, $191);
    __label__ = 72;
    break;
   case 72:
    var $198 = $191 + $u0n_0 | 0;
    if (($198 | 0) > ($160 | 0)) {
      __label__ = 73;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 73:
    var $201 = ___gmpn_add($_18, $tp, $198, $_18, $160);
    var $un_6 = $198 - ((HEAP32[$_18 + ($198 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 75;
    break;
   case 74:
    var $209 = ___gmpn_add($_18, $_18, $160, $tp, $198);
    HEAP32[$_18 + ($160 << 2) >> 2] = $209;
    var $un_6 = (($209 | 0) != 0 & 1) + $160 | 0;
    __label__ = 75;
    break;
   case 75:
    var $un_6;
    HEAP32[$unp >> 2] = $un_6;
    var $_0 = $bn_3;
    __label__ = 76;
    break;
   case 76:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_gcdext_subdiv_step["X"] = 1;

function ___gmpn_hgcd_matrix_init($M, $n, $p) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = ($n + 1 | 0) / 2 & -1;
    var $3 = $2 + 1 | 0;
    HEAP32[$M >> 2] = $3;
    HEAP32[$M + 4 >> 2] = 1;
    if (($3 & 1073741823 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $p1 = $p;
    var $8 = ($2 << 4) + 16 | 0;
    _memset($p1, 0, $8, 4);
    __label__ = 4;
    break;
   case 4:
    var $10 = $M + 8 | 0;
    HEAP32[$10 >> 2] = $p;
    HEAP32[$M + 12 >> 2] = $p + ($3 << 2) | 0;
    HEAP32[$M + 16 >> 2] = $p + ($3 << 1 << 2) | 0;
    var $16 = (i64Math.multiply($3, 0, 3, 0), i64Math.result[0]);
    var $17 = $p + ($16 << 2) | 0;
    HEAP32[$M + 20 >> 2] = $17;
    HEAP32[$17 >> 2] = 1;
    var $19 = HEAP32[$10 >> 2];
    HEAP32[$19 >> 2] = 1;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_hgcd_lehmer($ap, $bp, $n, $M, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = (($n | 0) / 2 & -1) + 1 | 0;
    var $3 = _hgcd_step($n, $ap, $bp, $2, $M, $tp);
    if (($3 | 0) == 0) {
      var $_0 = 0;
      __label__ = 4;
      break;
    } else {
      var $nn_0 = $3;
      __label__ = 3;
      break;
    }
   case 3:
    var $nn_0;
    var $5 = _hgcd_step($nn_0, $ap, $bp, $2, $M, $tp);
    if (($5 | 0) == 0) {
      var $_0 = $nn_0;
      __label__ = 4;
      break;
    } else {
      var $nn_0 = $5;
      __label__ = 3;
      break;
    }
   case 4:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _hgcd_step($n, $ap, $bp, $s, $M, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $M1 = __stackBase__;
    var $1 = $n - 1 | 0;
    var $3 = HEAPU32[$ap + ($1 << 2) >> 2];
    var $5 = HEAPU32[$bp + ($1 << 2) >> 2];
    var $6 = $5 | $3;
    if (($s + 1 | 0) == ($n | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if ($6 >>> 0 < 4) {
      var $an_0 = $n;
      __label__ = 18;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $12 = $n - 2 | 0;
    var $ah_0 = $3;
    var $al_0 = HEAP32[$ap + ($12 << 2) >> 2];
    var $bh_0 = $5;
    var $bl_0 = HEAP32[$bp + ($12 << 2) >> 2];
    __label__ = 11;
    break;
   case 5:
    if (($6 | 0) < 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $20 = $n - 2 | 0;
    var $ah_0 = $3;
    var $al_0 = HEAP32[$ap + ($20 << 2) >> 2];
    var $bh_0 = $5;
    var $bl_0 = HEAP32[$bp + ($20 << 2) >> 2];
    __label__ = 11;
    break;
   case 7:
    if ($6 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $29 = $6 >>> 0 < 256 ? 1 : 9;
    var $34 = $29;
    __label__ = 10;
    break;
   case 9:
    var $32 = $6 >>> 0 < 16777216 ? 17 : 25;
    var $34 = $32;
    __label__ = 10;
    break;
   case 10:
    var $34;
    var $37 = STRING_TABLE.___gmpn_clz_tab + ($6 >>> ($34 >>> 0)) | 0;
    var $40 = 33 - $34 - (HEAPU8[$37] & 255) | 0;
    var $42 = $n - 2 | 0;
    var $44 = HEAPU32[$ap + ($42 << 2) >> 2];
    var $45 = 32 - $40 | 0;
    var $49 = $n - 3 | 0;
    var $56 = HEAPU32[$bp + ($42 << 2) >> 2];
    var $ah_0 = $44 >>> ($45 >>> 0) | $3 << $40;
    var $al_0 = HEAPU32[$ap + ($49 << 2) >> 2] >>> ($45 >>> 0) | $44 << $40;
    var $bh_0 = $56 >>> ($45 >>> 0) | $5 << $40;
    var $bl_0 = HEAPU32[$bp + ($49 << 2) >> 2] >>> ($45 >>> 0) | $56 << $40;
    __label__ = 11;
    break;
   case 11:
    var $bl_0;
    var $bh_0;
    var $al_0;
    var $ah_0;
    var $65 = ___gmpn_hgcd2($ah_0, $al_0, $bh_0, $bl_0, $M1);
    if (($65 | 0) == 0) {
      var $an_0 = $n;
      __label__ = 18;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    _hgcd_matrix_mul_1($M, $M1, $tp);
    if (($n | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $70 = HEAPU32[$ap >> 2];
    if (($1 | 0) == 0) {
      var $__x_1 = $70;
      var $__dst_1 = $tp;
      __label__ = 16;
      break;
    } else {
      var $__x_0 = $70;
      var $ap_pn = $ap;
      var $__n_0 = $1;
      var $__dst_0 = $tp;
      __label__ = 14;
      break;
    }
   case 14:
    var $__dst_0;
    var $__n_0;
    var $ap_pn;
    var $__x_0;
    var $__src_0 = $ap_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $73 = HEAP32[$__src_0 >> 2];
    var $74 = $__n_0 - 1 | 0;
    if (($74 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $__x_0 = $73;
      var $ap_pn = $__src_0;
      var $__n_0 = $74;
      var $__dst_0 = $__dst_0 + 4 | 0;
      __label__ = 14;
      break;
    }
   case 15:
    var $__x_1 = $73;
    var $__dst_1 = $tp + ($1 << 2) | 0;
    __label__ = 16;
    break;
   case 16:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 17;
    break;
   case 17:
    var $78 = ___gmpn_hgcd_mul_matrix1_inverse_vector($M1, $ap, $tp, $bp, $n);
    var $_0 = $78;
    __label__ = 53;
    break;
   case 18:
    var $an_0;
    if (($an_0 | 0) > ($s | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $81 = $an_0 - 1 | 0;
    if ((HEAP32[$ap + ($81 << 2) >> 2] | 0) == (HEAP32[$bp + ($81 << 2) >> 2] | 0)) {
      var $an_0 = $81;
      __label__ = 18;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    if (($an_0 | 0) == ($s | 0)) {
      var $_0 = 0;
      __label__ = 53;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $90 = $an_0 - 1 | 0;
    var $95 = HEAPU32[$ap + ($90 << 2) >> 2] >>> 0 > HEAPU32[$bp + ($90 << 2) >> 2] >>> 0;
    var $_ = $95 & 1;
    var $bp_ap = $95 ? $bp : $ap;
    var $ap_bp = $95 ? $ap : $bp;
    var $bn_0 = $n;
    __label__ = 22;
    break;
   case 22:
    var $bn_0;
    if (($bn_0 | 0) > 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $99 = $bn_0 - 1 | 0;
    if ((HEAP32[$bp_ap + ($99 << 2) >> 2] | 0) == 0) {
      var $bn_0 = $99;
      __label__ = 22;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    if (($bn_0 | 0) > ($s | 0)) {
      __label__ = 25;
      break;
    } else {
      var $_0 = 0;
      __label__ = 53;
      break;
    }
   case 25:
    if ((HEAP32[$ap_bp + ($90 << 2) >> 2] | 0) == (HEAP32[$bp_ap + ($90 << 2) >> 2] + 1 | 0)) {
      var $k_0 = $90;
      __label__ = 26;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 26:
    var $k_0;
    if (($k_0 | 0) > ($s | 0)) {
      __label__ = 27;
      break;
    } else {
      var $__gmp_i_0 = $k_0;
      __label__ = 29;
      break;
    }
   case 27:
    var $114 = $k_0 - 1 | 0;
    if ((HEAP32[$ap_bp + ($114 << 2) >> 2] | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      var $__gmp_i_0 = $k_0;
      __label__ = 29;
      break;
    }
   case 28:
    if ((HEAP32[$bp_ap + ($114 << 2) >> 2] | 0) == -1) {
      var $k_0 = $114;
      __label__ = 26;
      break;
    } else {
      var $__gmp_i_0 = $k_0;
      __label__ = 29;
      break;
    }
   case 29:
    var $__gmp_i_0;
    var $122 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 30:
    var $126 = HEAPU32[$ap_bp + ($122 << 2) >> 2];
    var $128 = HEAPU32[$bp_ap + ($122 << 2) >> 2];
    if (($126 | 0) == ($128 | 0)) {
      var $__gmp_i_0 = $122;
      __label__ = 29;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    if ($126 >>> 0 > $128 >>> 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    if (($k_0 | 0) == ($s | 0)) {
      var $_0 = 0;
      __label__ = 53;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $134 = ___gmpn_sub_n($ap_bp, $ap_bp, $bp_ap, $k_0);
    var $an_1 = $k_0;
    __label__ = 36;
    break;
   case 34:
    var $135 = ___gmpn_sub_n($ap_bp, $ap_bp, $bp_ap, $k_0);
    HEAP32[$ap_bp + ($k_0 << 2) >> 2] = 1;
    var $an_1 = $k_0 + 1 | 0;
    __label__ = 36;
    break;
   case 35:
    var $139 = ___gmpn_sub_n($ap_bp, $ap_bp, $bp_ap, $an_0);
    var $an_1 = $an_0;
    __label__ = 36;
    break;
   case 36:
    var $an_1;
    _hgcd_matrix_update_1($M, $_);
    if (($an_1 | 0) < ($bn_0 | 0)) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    var $_1 = $bp_ap;
    var $_13 = $ap_bp;
    var $an_2 = $bn_0;
    var $bn_1 = $an_1;
    var $col_1 = $_ ^ 1;
    __label__ = 43;
    break;
   case 38:
    if (($an_1 | 0) == ($bn_0 | 0)) {
      var $__gmp_i3_0 = $bn_0;
      __label__ = 39;
      break;
    } else {
      var $_1 = $ap_bp;
      var $_13 = $bp_ap;
      var $an_2 = $an_1;
      var $bn_1 = $bn_0;
      var $col_1 = $_;
      __label__ = 43;
      break;
    }
   case 39:
    var $__gmp_i3_0;
    var $146 = $__gmp_i3_0 - 1 | 0;
    if (($__gmp_i3_0 | 0) > 0) {
      __label__ = 40;
      break;
    } else {
      var $c2_0 = 0;
      __label__ = 42;
      break;
    }
   case 40:
    var $150 = HEAPU32[$ap_bp + ($146 << 2) >> 2];
    var $152 = HEAPU32[$bp_ap + ($146 << 2) >> 2];
    if (($150 | 0) == ($152 | 0)) {
      var $__gmp_i3_0 = $146;
      __label__ = 39;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $c2_0 = $150 >>> 0 <= $152 >>> 0;
    __label__ = 42;
    break;
   case 42:
    var $c2_0;
    var $ap_bp_bp_ap = $c2_0 ? $ap_bp : $bp_ap;
    var $bp_ap_ap_bp = $c2_0 ? $bp_ap : $ap_bp;
    var $_1 = $bp_ap_ap_bp;
    var $_13 = $ap_bp_bp_ap;
    var $an_2 = $bn_0;
    var $bn_1 = $bn_0;
    var $col_1 = ($95 ^ $c2_0) & 1;
    __label__ = 43;
    break;
   case 43:
    var $col_1;
    var $bn_1;
    var $an_2;
    var $_13;
    var $_1;
    var $157 = 1 - $bn_1 + $an_2 | 0;
    ___gmpn_tdiv_qr($tp, $_1, 0, $_1, $an_2, $_13, $bn_1);
    var $163 = $157 - ((HEAP32[$tp + ($157 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $an_3 = $bn_1;
    __label__ = 44;
    break;
   case 44:
    var $an_3;
    if (($an_3 | 0) > ($s | 0)) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    var $167 = $an_3 - 1 | 0;
    if ((HEAP32[$_1 + ($167 << 2) >> 2] | 0) == 0) {
      var $an_3 = $167;
      __label__ = 44;
      break;
    } else {
      var $bn_3 = $bn_1;
      var $qn_0 = $163;
      __label__ = 51;
      break;
    }
   case 46:
    var $172 = ___gmpn_add($_1, $_13, $bn_1, $_1, $an_3);
    if (($172 | 0) == 0) {
      var $bn_2 = $bn_1;
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    HEAP32[$_1 + ($bn_1 << 2) >> 2] = $172;
    HEAP32[$_13 + ($bn_1 << 2) >> 2] = 0;
    var $bn_2 = $bn_1 + 1 | 0;
    __label__ = 48;
    break;
   case 48:
    var $bn_2;
    var $__p_0 = $tp;
    __label__ = 49;
    break;
   case 49:
    var $__p_0;
    var $181 = HEAP32[$__p_0 >> 2];
    var $182 = $181 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $182;
    if (($181 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 49;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $bn_3 = $bn_2;
    var $qn_0 = $163 - ((HEAP32[$tp + ($163 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 51;
    break;
   case 51:
    var $qn_0;
    var $bn_3;
    if (($qn_0 | 0) > 0) {
      __label__ = 52;
      break;
    } else {
      var $_0 = $bn_3;
      __label__ = 53;
      break;
    }
   case 52:
    var $193 = $tp + ($qn_0 << 2) | 0;
    _hgcd_matrix_update_q($M, $tp, $qn_0, $col_1, $193);
    var $_0 = $bn_3;
    __label__ = 53;
    break;
   case 53:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_hgcd_step["X"] = 1;

function ___gmpn_hgcd_itch($n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 399) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $n;
      __label__ = 7;
      break;
    }
   case 3:
    var $4 = ($n - 1 | 0) / 399 & -1;
    if ($4 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $8 = $4 >>> 0 < 256 ? 1 : 9;
    var $13 = $8;
    __label__ = 6;
    break;
   case 5:
    var $11 = $4 >>> 0 < 16777216 ? 17 : 25;
    var $13 = $11;
    __label__ = 6;
    break;
   case 6:
    var $13;
    var $15 = STRING_TABLE.___gmpn_clz_tab + ($4 >>> ($13 >>> 0)) | 0;
    var $19 = $13 - 33 + (HEAPU8[$15] & 255) | 0;
    var $21 = ($n + 3 | 0) / 4 & -1;
    var $22 = (i64Math.multiply($21, 0, 20, 0), i64Math.result[0]);
    var $23 = (i64Math.multiply($19, 0, 22, 0), i64Math.result[0]);
    var $_0 = $22 + 1104 + $23 | 0;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_hgcd_matrix_mul($M, $M1, $tp) {
  var $1 = $M + 8 | 0;
  var $2 = HEAP32[$1 >> 2];
  var $3 = $M + 12 | 0;
  var $4 = HEAP32[$3 >> 2];
  var $5 = $M + 16 | 0;
  var $6 = HEAP32[$5 >> 2];
  var $7 = $M + 20 | 0;
  var $8 = HEAP32[$7 >> 2];
  var $9 = $M + 4 | 0;
  var $10 = HEAP32[$9 >> 2];
  var $12 = HEAP32[$M1 + 8 >> 2];
  var $14 = HEAP32[$M1 + 12 >> 2];
  var $16 = HEAP32[$M1 + 16 >> 2];
  var $18 = HEAP32[$M1 + 20 >> 2];
  var $19 = $M1 + 4 | 0;
  var $20 = HEAP32[$19 >> 2];
  ___gmpn_matrix22_mul($2, $4, $6, $8, $10, $12, $14, $16, $18, $20, $tp);
  var $23 = HEAP32[$19 >> 2] + HEAP32[$9 >> 2] | 0;
  var $24 = HEAPU32[$1 >> 2];
  var $27 = HEAPU32[$3 >> 2];
  var $30 = HEAPU32[$5 >> 2];
  var $33 = HEAPU32[$7 >> 2];
  var $41 = $23 - ((HEAP32[$27 + ($23 << 2) >> 2] | HEAP32[$24 + ($23 << 2) >> 2] | HEAP32[$30 + ($23 << 2) >> 2] | HEAP32[$33 + ($23 << 2) >> 2] | 0) == 0 & 1) | 0;
  var $55 = $41 - ((HEAP32[$27 + ($41 << 2) >> 2] | HEAP32[$24 + ($41 << 2) >> 2] | HEAP32[$30 + ($41 << 2) >> 2] | HEAP32[$33 + ($41 << 2) >> 2] | 0) == 0 & 1) | 0;
  var $69 = $55 + 1 + (((HEAP32[$27 + ($55 << 2) >> 2] | HEAP32[$24 + ($55 << 2) >> 2] | HEAP32[$30 + ($55 << 2) >> 2] | HEAP32[$33 + ($55 << 2) >> 2] | 0) == 0) << 31 >> 31) | 0;
  HEAP32[$9 >> 2] = $69;
  return;
}

___gmpn_hgcd_matrix_mul["X"] = 1;

function ___gmpn_hgcd_matrix_adjust($M, $n, $ap, $bp, $p, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $tp + ($p << 2) | 0;
    var $2 = $M + 4 | 0;
    var $3 = HEAP32[$2 >> 2];
    var $4 = $tp + ($3 + $p << 2) | 0;
    var $7 = HEAP32[$M + 20 >> 2];
    if (($3 | 0) < ($p | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $9 = ___gmpn_mul($tp, $7, $3, $ap, $p);
    var $11 = HEAP32[$M + 16 >> 2];
    var $12 = HEAP32[$2 >> 2];
    var $13 = ___gmpn_mul($4, $11, $12, $ap, $p);
    __label__ = 5;
    break;
   case 4:
    var $15 = ___gmpn_mul($tp, $ap, $p, $7, $3);
    var $17 = HEAP32[$M + 16 >> 2];
    var $18 = HEAP32[$2 >> 2];
    var $19 = ___gmpn_mul($4, $ap, $p, $17, $18);
    __label__ = 5;
    break;
   case 5:
    var $21 = ($p | 0) != 0;
    if ($21) {
      __label__ = 6;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 6:
    var $23 = $p - 1 | 0;
    var $24 = HEAP32[$tp >> 2];
    if (($23 | 0) == 0) {
      var $__x_1 = $24;
      var $__dst_1 = $ap;
      __label__ = 9;
      break;
    } else {
      var $__x_0 = $24;
      var $tp_pn1 = $tp;
      var $__dst_0 = $ap;
      var $__n_0 = $23;
      __label__ = 7;
      break;
    }
   case 7:
    var $__n_0;
    var $__dst_0;
    var $tp_pn1;
    var $__x_0;
    var $__src_0 = $tp_pn1 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $27 = HEAP32[$__src_0 >> 2];
    var $28 = $__n_0 - 1 | 0;
    if (($28 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $27;
      var $tp_pn1 = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $28;
      __label__ = 7;
      break;
    }
   case 8:
    var $__x_1 = $27;
    var $__dst_1 = $ap + ($23 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 10;
    break;
   case 10:
    var $32 = $ap + ($p << 2) | 0;
    var $33 = $n - $p | 0;
    var $34 = HEAP32[$2 >> 2];
    var $35 = ___gmpn_add($32, $32, $33, $1, $34);
    var $36 = HEAP32[$2 >> 2];
    var $39 = HEAP32[$M + 12 >> 2];
    if (($36 | 0) < ($p | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $41 = ___gmpn_mul($tp, $39, $36, $bp, $p);
    __label__ = 13;
    break;
   case 12:
    var $43 = ___gmpn_mul($tp, $bp, $p, $39, $36);
    __label__ = 13;
    break;
   case 13:
    var $46 = HEAP32[$2 >> 2] + $p | 0;
    var $47 = ___gmpn_sub($ap, $ap, $n, $tp, $46);
    var $48 = $35 - $47 | 0;
    var $49 = HEAP32[$2 >> 2];
    var $52 = HEAP32[$M + 8 >> 2];
    if (($49 | 0) < ($p | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $54 = ___gmpn_mul($tp, $52, $49, $bp, $p);
    __label__ = 16;
    break;
   case 15:
    var $56 = ___gmpn_mul($tp, $bp, $p, $52, $49);
    __label__ = 16;
    break;
   case 16:
    if ($21) {
      __label__ = 17;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 17:
    var $59 = $p - 1 | 0;
    var $60 = HEAP32[$tp >> 2];
    if (($59 | 0) == 0) {
      var $__x4_1 = $60;
      var $__dst2_1 = $bp;
      __label__ = 20;
      break;
    } else {
      var $__x4_0 = $60;
      var $tp_pn = $tp;
      var $__dst2_0 = $bp;
      var $__n1_0 = $59;
      __label__ = 18;
      break;
    }
   case 18:
    var $__n1_0;
    var $__dst2_0;
    var $tp_pn;
    var $__x4_0;
    var $__src3_0 = $tp_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $63 = HEAP32[$__src3_0 >> 2];
    var $64 = $__n1_0 - 1 | 0;
    if (($64 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__x4_0 = $63;
      var $tp_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $64;
      __label__ = 18;
      break;
    }
   case 19:
    var $__x4_1 = $63;
    var $__dst2_1 = $bp + ($59 << 2) | 0;
    __label__ = 20;
    break;
   case 20:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 21;
    break;
   case 21:
    var $68 = $bp + ($p << 2) | 0;
    var $69 = HEAP32[$2 >> 2];
    var $70 = ___gmpn_add($68, $68, $33, $1, $69);
    var $72 = HEAP32[$2 >> 2] + $p | 0;
    var $73 = ___gmpn_sub($bp, $bp, $n, $4, $72);
    if (($35 | 0) == ($47 | 0) & ($70 | 0) == ($73 | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $77 = $70 - $73 | 0;
    HEAP32[$ap + ($n << 2) >> 2] = $48;
    HEAP32[$bp + ($n << 2) >> 2] = $77;
    var $_0 = $n + 1 | 0;
    __label__ = 25;
    break;
   case 23:
    var $82 = $n - 1 | 0;
    if ((HEAP32[$ap + ($82 << 2) >> 2] | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $_0 = $n;
      __label__ = 25;
      break;
    }
   case 24:
    var $_n = (HEAP32[$bp + ($82 << 2) >> 2] | 0) == 0 ? $82 : $n;
    return $_n;
   case 25:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_hgcd_matrix_adjust["X"] = 1;

function ___gmpn_hgcd($ap, $bp, $n, $M, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $M1 = __stackBase__;
    var $1 = ($n | 0) / 2 & -1;
    var $2 = $1 + 1 | 0;
    var $3 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $5 = (($3 | 0) / 4 & -1) + 1 | 0;
    if (($2 | 0) < ($n | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 15;
      break;
    }
   case 3:
    if (($n | 0) > 399) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $10 = ___gmpn_hgcd_lehmer($ap, $bp, $n, $M, $tp);
    var $_0 = $10;
    __label__ = 15;
    break;
   case 5:
    var $12 = $ap + ($1 << 2) | 0;
    var $13 = $bp + ($1 << 2) | 0;
    var $14 = $n - $1 | 0;
    var $15 = ___gmpn_hgcd($12, $13, $14, $M, $tp);
    if (($15 | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      var $success_0 = 0;
      var $_01 = $n;
      __label__ = 7;
      break;
    }
   case 6:
    var $18 = $15 + $1 | 0;
    var $19 = ___gmpn_hgcd_matrix_adjust($M, $18, $ap, $bp, $1, $tp);
    var $success_0 = 1;
    var $_01 = $19;
    __label__ = 7;
    break;
   case 7:
    var $_01;
    var $success_0;
    if (($_01 | 0) > ($5 | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    var $22 = _hgcd_step($_01, $ap, $bp, $2, $M, $tp);
    if (($22 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $success_0 = 1;
      var $_01 = $22;
      __label__ = 7;
      break;
    }
   case 9:
    var $26 = ($success_0 | 0) != 0 ? $_01 : 0;
    var $_0 = $26;
    __label__ = 15;
    break;
   case 10:
    if (($_01 | 0) > ($1 + 3 | 0)) {
      __label__ = 11;
      break;
    } else {
      var $success_1 = $success_0;
      var $_1 = $_01;
      __label__ = 13;
      break;
    }
   case 11:
    var $33 = ($2 << 1) - $_01 + 1 | 0;
    var $34 = $_01 - $33 | 0;
    var $38 = ((($34 + 1 | 0) / 2 & -1) << 2) + 4 | 0;
    ___gmpn_hgcd_matrix_init($M1, $34, $tp);
    var $39 = $ap + ($33 << 2) | 0;
    var $40 = $bp + ($33 << 2) | 0;
    var $41 = $tp + ($38 << 2) | 0;
    var $42 = ___gmpn_hgcd($39, $40, $34, $M1, $41);
    if (($42 | 0) > 0) {
      __label__ = 12;
      break;
    } else {
      var $success_1 = $success_0;
      var $_1 = $_01;
      __label__ = 13;
      break;
    }
   case 12:
    var $45 = $42 + $33 | 0;
    var $46 = ___gmpn_hgcd_matrix_adjust($M1, $45, $ap, $bp, $33, $41);
    ___gmpn_hgcd_matrix_mul($M, $M1, $41);
    var $success_1 = 1;
    var $_1 = $46;
    __label__ = 13;
    break;
   case 13:
    var $_1;
    var $success_1;
    var $47 = _hgcd_step($_1, $ap, $bp, $2, $M, $tp);
    if (($47 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $success_1 = 1;
      var $_1 = $47;
      __label__ = 13;
      break;
    }
   case 14:
    var $51 = ($success_1 | 0) != 0 ? $_1 : 0;
    var $_0 = $51;
    __label__ = 15;
    break;
   case 15:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_hgcd["X"] = 1;

function _hgcd_matrix_mul_1($M, $M1, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $M + 4 | 0;
    var $2 = HEAP32[$1 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $16 = $2;
    var $_pre_phi = $M + 8 | 0;
    __label__ = 8;
    break;
   case 4:
    var $5 = $2 - 1 | 0;
    var $6 = $M + 8 | 0;
    var $7 = HEAP32[$6 >> 2];
    var $8 = HEAP32[$7 >> 2];
    if (($5 | 0) == 0) {
      var $__x_1 = $8;
      var $__dst_1 = $tp;
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $8;
      var $__n_0 = $5;
      var $__dst_0 = $tp;
      var $_pn1 = $7;
      __label__ = 5;
      break;
    }
   case 5:
    var $_pn1;
    var $__dst_0;
    var $__n_0;
    var $__x_0;
    var $__src_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $11 = HEAP32[$__src_0 >> 2];
    var $12 = $__n_0 - 1 | 0;
    if (($12 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $__x_0 = $11;
      var $__n_0 = $12;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn1 = $__src_0;
      __label__ = 5;
      break;
    }
   case 6:
    var $__x_1 = $11;
    var $__dst_1 = $tp + ($5 << 2) | 0;
    __label__ = 7;
    break;
   case 7:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $16 = HEAP32[$1 >> 2];
    var $_pre_phi = $6;
    __label__ = 8;
    break;
   case 8:
    var $_pre_phi;
    var $16;
    var $17 = HEAP32[$_pre_phi >> 2];
    var $19 = HEAP32[$M + 12 >> 2];
    var $20 = ___gmpn_hgcd_mul_matrix1_vector($M1, $17, $tp, $19, $16);
    var $21 = HEAP32[$1 >> 2];
    if (($21 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $35 = $21;
    var $_pre_phi5 = $M + 16 | 0;
    __label__ = 14;
    break;
   case 10:
    var $24 = $21 - 1 | 0;
    var $25 = $M + 16 | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = HEAP32[$26 >> 2];
    if (($24 | 0) == 0) {
      var $__x4_1 = $27;
      var $__dst2_1 = $tp;
      __label__ = 13;
      break;
    } else {
      var $__x4_0 = $27;
      var $_pn = $26;
      var $__dst2_0 = $tp;
      var $__n1_0 = $24;
      __label__ = 11;
      break;
    }
   case 11:
    var $__n1_0;
    var $__dst2_0;
    var $_pn;
    var $__x4_0;
    var $__src3_0 = $_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $30 = HEAP32[$__src3_0 >> 2];
    var $31 = $__n1_0 - 1 | 0;
    if (($31 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $__x4_0 = $30;
      var $_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $31;
      __label__ = 11;
      break;
    }
   case 12:
    var $__x4_1 = $30;
    var $__dst2_1 = $tp + ($24 << 2) | 0;
    __label__ = 13;
    break;
   case 13:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $35 = HEAP32[$1 >> 2];
    var $_pre_phi5 = $25;
    __label__ = 14;
    break;
   case 14:
    var $_pre_phi5;
    var $35;
    var $36 = HEAP32[$_pre_phi5 >> 2];
    var $38 = HEAP32[$M + 20 >> 2];
    var $39 = ___gmpn_hgcd_mul_matrix1_vector($M1, $36, $tp, $38, $35);
    var $41 = ($20 | 0) > ($39 | 0) ? $20 : $39;
    HEAP32[$1 >> 2] = $41;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_hgcd_matrix_mul_1["X"] = 1;

function _hgcd_matrix_update_1($M, $col) {
  var $1 = $M + 8 + ($col << 2) | 0;
  var $2 = HEAP32[$1 >> 2];
  var $4 = HEAP32[$M + 8 >> 2];
  var $6 = HEAP32[$M + 12 >> 2];
  var $7 = $M + 4 | 0;
  var $8 = HEAP32[$7 >> 2];
  var $9 = ___gmpn_add_n($2, $4, $6, $8);
  var $10 = $M + 16 + ($col << 2) | 0;
  var $11 = HEAP32[$10 >> 2];
  var $13 = HEAP32[$M + 16 >> 2];
  var $15 = HEAP32[$M + 20 >> 2];
  var $16 = HEAP32[$7 >> 2];
  var $17 = ___gmpn_add_n($11, $13, $15, $16);
  var $20 = HEAP32[$1 >> 2] + (HEAP32[$7 >> 2] << 2) | 0;
  HEAP32[$20 >> 2] = $9;
  var $23 = HEAP32[$10 >> 2] + (HEAP32[$7 >> 2] << 2) | 0;
  HEAP32[$23 >> 2] = $17;
  var $28 = HEAP32[$7 >> 2] + (($17 | $9 | 0) != 0 & 1) | 0;
  HEAP32[$7 >> 2] = $28;
  return;
}

function _hgcd_matrix_update_q($M, $qp, $qn, $col, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($qn | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = HEAP32[$qp >> 2];
    var $4 = $M + 8 + ($col << 2) | 0;
    var $5 = HEAP32[$4 >> 2];
    var $6 = 1 - $col | 0;
    var $8 = HEAP32[$M + 8 + ($6 << 2) >> 2];
    var $9 = $M + 4 | 0;
    var $10 = HEAP32[$9 >> 2];
    var $11 = ___gmpn_addmul_1($5, $8, $10, $3);
    var $12 = $M + 16 + ($col << 2) | 0;
    var $13 = HEAP32[$12 >> 2];
    var $15 = HEAP32[$M + 16 + ($6 << 2) >> 2];
    var $16 = HEAP32[$9 >> 2];
    var $17 = ___gmpn_addmul_1($13, $15, $16, $3);
    var $20 = HEAP32[$4 >> 2] + (HEAP32[$9 >> 2] << 2) | 0;
    HEAP32[$20 >> 2] = $11;
    var $23 = HEAP32[$12 >> 2] + (HEAP32[$9 >> 2] << 2) | 0;
    HEAP32[$23 >> 2] = $17;
    var $28 = HEAP32[$9 >> 2] + (($17 | $11 | 0) != 0 & 1) | 0;
    HEAP32[$9 >> 2] = $28;
    __label__ = 16;
    break;
   case 4:
    var $30 = $M + 4 | 0;
    var $31 = HEAPU32[$30 >> 2];
    var $32 = 1 - $col | 0;
    var $33 = $M + 16 + ($32 << 2) | 0;
    var $34 = $M + 8 + ($32 << 2) | 0;
    var $n_0 = $31;
    __label__ = 5;
    break;
   case 5:
    var $n_0;
    var $36 = $n_0 + $qn | 0;
    if (($36 | 0) > ($31 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $50 = HEAP32[$34 >> 2];
    __label__ = 9;
    break;
   case 7:
    var $39 = $n_0 - 1 | 0;
    var $40 = HEAP32[$34 >> 2];
    if ((HEAP32[$40 + ($39 << 2) >> 2] | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $50 = $40;
      __label__ = 9;
      break;
    }
   case 8:
    if ((HEAP32[HEAP32[$33 >> 2] + ($39 << 2) >> 2] | 0) == 0) {
      var $n_0 = $39;
      __label__ = 5;
      break;
    } else {
      var $50 = $40;
      __label__ = 9;
      break;
    }
   case 9:
    var $50;
    var $51 = ($n_0 | 0) < ($qn | 0);
    if ($51) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $53 = ___gmpn_mul($tp, $50, $n_0, $qp, $qn);
    __label__ = 12;
    break;
   case 11:
    var $55 = ___gmpn_mul($tp, $qp, $qn, $50, $n_0);
    __label__ = 12;
    break;
   case 12:
    var $57 = $M + 8 + ($col << 2) | 0;
    var $58 = HEAP32[$57 >> 2];
    var $59 = HEAP32[$30 >> 2];
    var $60 = ___gmpn_add($58, $tp, $36, $58, $59);
    var $61 = HEAP32[$33 >> 2];
    if ($51) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 13:
    HEAP32[$30 >> 2] = $36 + 1 | 0;
    var $64 = $n_0 - 1 | 0;
    var $66 = HEAP32[$57 >> 2] + ($64 << 2) | 0;
    HEAP32[$66 >> 2] = $60;
    var $68 = HEAP32[$90 >> 2] + ($64 << 2) | 0;
    HEAP32[$68 >> 2] = $93;
    __label__ = 16;
    break;
   case 14:
    var $70 = $36 - 1 | 0;
    var $80 = $36 - ((HEAP32[HEAP32[$90 >> 2] + ($70 << 2) >> 2] | HEAP32[HEAP32[$57 >> 2] + ($70 << 2) >> 2] | 0) == 0 & 1) | 0;
    if (($80 | 0) > (HEAP32[$30 >> 2] | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    HEAP32[$30 >> 2] = $80;
    __label__ = 16;
    break;
   case 16:
    return;
   case 17:
    var $86 = ___gmpn_mul($tp, $61, $n_0, $qp, $qn);
    __label__ = 19;
    break;
   case 18:
    var $88 = ___gmpn_mul($tp, $qp, $qn, $61, $n_0);
    __label__ = 19;
    break;
   case 19:
    var $90 = $M + 16 + ($col << 2) | 0;
    var $91 = HEAP32[$90 >> 2];
    var $92 = HEAP32[$30 >> 2];
    var $93 = ___gmpn_add($91, $tp, $36, $91, $92);
    if (($93 | $60 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   default:
    assert(0, "bad label: " + __label__);
  }
}

_hgcd_matrix_update_q["X"] = 1;

function ___gmpn_hgcd2($ah, $al, $bh, $bl, $M) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $r = __stackBase__;
    var $r4 = __stackBase__ + 8;
    var $r6 = __stackBase__ + 16;
    var $r8 = __stackBase__ + 20;
    if ($ah >>> 0 < 2 | $bh >>> 0 < 2) {
      var $_0 = 0;
      __label__ = 43;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ($ah >>> 0 > $bh >>> 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $7 = $al >>> 0 > $bl >>> 0;
    if (($ah | 0) == ($bh | 0) & $7) {
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    var $11 = (($al >>> 0 < $bl >>> 0) << 31 >> 31) + ($ah - $bh) | 0;
    if ($11 >>> 0 < 2) {
      var $_0 = 0;
      __label__ = 43;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $_01 = $11;
    var $_02 = $al - $bl | 0;
    var $_05 = $bh;
    var $_010 = $bl;
    var $u01_0 = 1;
    var $u10_0 = 0;
    __label__ = 9;
    break;
   case 7:
    var $17 = ($7 << 31 >> 31) + ($bh - $ah) | 0;
    if ($17 >>> 0 < 2) {
      var $_0 = 0;
      __label__ = 43;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_01 = $ah;
    var $_02 = $al;
    var $_05 = $17;
    var $_010 = $bl - $al | 0;
    var $u01_0 = 0;
    var $u10_0 = 1;
    __label__ = 9;
    break;
   case 9:
    var $u10_0;
    var $u01_0;
    var $_010;
    var $_05;
    var $_02;
    var $_01;
    if ($_01 >>> 0 < $_05 >>> 0) {
      var $_2 = $_01;
      var $_24 = $_02;
      var $_27 = $_05;
      var $_212 = $_010;
      var $u00_2 = 1;
      var $u01_2 = $u01_0;
      var $u10_2 = $u10_0;
      var $u11_2 = 1;
      __label__ = 19;
      break;
    } else {
      var $_1 = $_01;
      var $_13 = $_02;
      var $_16 = $_05;
      var $_111 = $_010;
      var $u00_1 = 1;
      var $u01_1 = $u01_0;
      var $u10_1 = $u10_0;
      var $u11_1 = 1;
      __label__ = 10;
      break;
    }
   case 10:
    var $u11_1;
    var $u10_1;
    var $u01_1;
    var $u00_1;
    var $_111;
    var $_16;
    var $_13;
    var $_1;
    if (($_1 | 0) == ($_16 | 0)) {
      var $u00_5 = $u00_1;
      var $u01_5 = $u01_1;
      var $u10_5 = $u10_1;
      var $u11_5 = $u11_1;
      __label__ = 42;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if ($_1 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $_3 = $_1 << 16 | $_13 >>> 16;
    var $_38 = $_16 << 16 | $_111 >>> 16;
    var $u00_3 = $u00_1;
    var $u01_3 = $u01_1;
    var $u10_3 = $u10_1;
    var $u11_3 = $u11_1;
    __label__ = 28;
    break;
   case 13:
    var $35 = $_13 - $_111 | 0;
    var $38 = $_1 - $_16 + (($_13 >>> 0 < $_111 >>> 0) << 31 >> 31) | 0;
    if ($38 >>> 0 < 2) {
      var $u00_5 = $u00_1;
      var $u01_5 = $u01_1;
      var $u10_5 = $u10_1;
      var $u11_5 = $u11_1;
      __label__ = 42;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if ($38 >>> 0 > $_16 >>> 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $_2 = $38;
    var $_24 = $35;
    var $_27 = $_16;
    var $_212 = $_111;
    var $u00_2 = $u00_1;
    var $u01_2 = $u00_1 + $u01_1 | 0;
    var $u10_2 = $u10_1;
    var $u11_2 = $u10_1 + $u11_1 | 0;
    __label__ = 19;
    break;
   case 16:
    var $46 = $r | 0;
    var $47 = _div2($46, $38, $35, $_16, $_111);
    var $49 = HEAPU32[$r + 4 >> 2];
    if ($49 >>> 0 < 2) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $52 = (i64Math.multiply($47, 0, $u00_1, 0), i64Math.result[0]);
    var $53 = $52 + $u01_1 | 0;
    var $54 = (i64Math.multiply($47, 0, $u10_1, 0), i64Math.result[0]);
    var $u00_5 = $u00_1;
    var $u01_5 = $53;
    var $u10_5 = $u10_1;
    var $u11_5 = $54 + $u11_1 | 0;
    __label__ = 42;
    break;
   case 18:
    var $57 = HEAP32[$46 >> 2];
    var $58 = $47 + 1 | 0;
    var $59 = (i64Math.multiply($58, 0, $u00_1, 0), i64Math.result[0]);
    var $60 = $59 + $u01_1 | 0;
    var $61 = (i64Math.multiply($58, 0, $u10_1, 0), i64Math.result[0]);
    var $_2 = $49;
    var $_24 = $57;
    var $_27 = $_16;
    var $_212 = $_111;
    var $u00_2 = $u00_1;
    var $u01_2 = $60;
    var $u10_2 = $u10_1;
    var $u11_2 = $61 + $u11_1 | 0;
    __label__ = 19;
    break;
   case 19:
    var $u11_2;
    var $u10_2;
    var $u01_2;
    var $u00_2;
    var $_212;
    var $_27;
    var $_24;
    var $_2;
    if (($_2 | 0) == ($_27 | 0)) {
      var $u00_5 = $u00_2;
      var $u01_5 = $u01_2;
      var $u10_5 = $u10_2;
      var $u11_5 = $u11_2;
      __label__ = 42;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    if ($_27 >>> 0 < 65536) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $_4 = $_2 << 16 | $_24 >>> 16;
    var $_49 = $_27 << 16 | $_212 >>> 16;
    var $u00_4 = $u00_2;
    var $u01_4 = $u01_2;
    var $u10_4 = $u10_2;
    var $u11_4 = $u11_2;
    __label__ = 35;
    break;
   case 22:
    var $75 = $_212 - $_24 | 0;
    var $78 = $_27 - $_2 + (($_212 >>> 0 < $_24 >>> 0) << 31 >> 31) | 0;
    if ($78 >>> 0 < 2) {
      var $u00_5 = $u00_2;
      var $u01_5 = $u01_2;
      var $u10_5 = $u10_2;
      var $u11_5 = $u11_2;
      __label__ = 42;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    if ($78 >>> 0 > $_2 >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $_1 = $_2;
    var $_13 = $_24;
    var $_16 = $78;
    var $_111 = $75;
    var $u00_1 = $u00_2 + $u01_2 | 0;
    var $u01_1 = $u01_2;
    var $u10_1 = $u10_2 + $u11_2 | 0;
    var $u11_1 = $u11_2;
    __label__ = 10;
    break;
   case 25:
    var $86 = $r4 | 0;
    var $87 = _div2($86, $78, $75, $_2, $_24);
    var $89 = HEAPU32[$r4 + 4 >> 2];
    if ($89 >>> 0 < 2) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $92 = (i64Math.multiply($87, 0, $u01_2, 0), i64Math.result[0]);
    var $93 = $92 + $u00_2 | 0;
    var $94 = (i64Math.multiply($87, 0, $u11_2, 0), i64Math.result[0]);
    var $u00_5 = $93;
    var $u01_5 = $u01_2;
    var $u10_5 = $94 + $u10_2 | 0;
    var $u11_5 = $u11_2;
    __label__ = 42;
    break;
   case 27:
    var $97 = HEAP32[$86 >> 2];
    var $98 = $87 + 1 | 0;
    var $99 = (i64Math.multiply($98, 0, $u01_2, 0), i64Math.result[0]);
    var $100 = $99 + $u00_2 | 0;
    var $101 = (i64Math.multiply($98, 0, $u11_2, 0), i64Math.result[0]);
    var $_1 = $_2;
    var $_13 = $_24;
    var $_16 = $89;
    var $_111 = $97;
    var $u00_1 = $100;
    var $u01_1 = $u01_2;
    var $u10_1 = $101 + $u10_2 | 0;
    var $u11_1 = $u11_2;
    __label__ = 10;
    break;
   case 28:
    var $u11_3;
    var $u10_3;
    var $u01_3;
    var $u00_3;
    var $_38;
    var $_3;
    if (($_3 | 0) == ($_38 | 0)) {
      var $u00_5 = $u00_3;
      var $u01_5 = $u01_3;
      var $u10_5 = $u10_3;
      var $u11_5 = $u11_3;
      __label__ = 42;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $106 = $_3 - $_38 | 0;
    if ($106 >>> 0 < 131072) {
      var $u00_5 = $u00_3;
      var $u01_5 = $u01_3;
      var $u10_5 = $u10_3;
      var $u11_5 = $u11_3;
      __label__ = 42;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    if ($106 >>> 0 > $_38 >>> 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $_4 = $106;
    var $_49 = $_38;
    var $u00_4 = $u00_3;
    var $u01_4 = $u00_3 + $u01_3 | 0;
    var $u10_4 = $u10_3;
    var $u11_4 = $u10_3 + $u11_3 | 0;
    __label__ = 35;
    break;
   case 32:
    var $114 = _div1($r6, $106, $_38);
    var $115 = HEAPU32[$r6 >> 2];
    if ($115 >>> 0 < 131072) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $118 = (i64Math.multiply($114, 0, $u00_3, 0), i64Math.result[0]);
    var $119 = $118 + $u01_3 | 0;
    var $120 = (i64Math.multiply($114, 0, $u10_3, 0), i64Math.result[0]);
    var $u00_5 = $u00_3;
    var $u01_5 = $119;
    var $u10_5 = $u10_3;
    var $u11_5 = $120 + $u11_3 | 0;
    __label__ = 42;
    break;
   case 34:
    var $123 = $114 + 1 | 0;
    var $124 = (i64Math.multiply($123, 0, $u00_3, 0), i64Math.result[0]);
    var $125 = $124 + $u01_3 | 0;
    var $126 = (i64Math.multiply($123, 0, $u10_3, 0), i64Math.result[0]);
    var $_4 = $115;
    var $_49 = $_38;
    var $u00_4 = $u00_3;
    var $u01_4 = $125;
    var $u10_4 = $u10_3;
    var $u11_4 = $126 + $u11_3 | 0;
    __label__ = 35;
    break;
   case 35:
    var $u11_4;
    var $u10_4;
    var $u01_4;
    var $u00_4;
    var $_49;
    var $_4;
    if (($_4 | 0) == ($_49 | 0)) {
      var $u00_5 = $u00_4;
      var $u01_5 = $u01_4;
      var $u10_5 = $u10_4;
      var $u11_5 = $u11_4;
      __label__ = 42;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $131 = $_49 - $_4 | 0;
    if ($131 >>> 0 < 131072) {
      var $u00_5 = $u00_4;
      var $u01_5 = $u01_4;
      var $u10_5 = $u10_4;
      var $u11_5 = $u11_4;
      __label__ = 42;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    if ($131 >>> 0 > $_4 >>> 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $_3 = $_4;
    var $_38 = $131;
    var $u00_3 = $u00_4 + $u01_4 | 0;
    var $u01_3 = $u01_4;
    var $u10_3 = $u10_4 + $u11_4 | 0;
    var $u11_3 = $u11_4;
    __label__ = 28;
    break;
   case 39:
    var $139 = _div1($r8, $131, $_4);
    var $140 = HEAPU32[$r8 >> 2];
    if ($140 >>> 0 < 131072) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $143 = (i64Math.multiply($139, 0, $u01_4, 0), i64Math.result[0]);
    var $144 = $143 + $u00_4 | 0;
    var $145 = (i64Math.multiply($139, 0, $u11_4, 0), i64Math.result[0]);
    var $u00_5 = $144;
    var $u01_5 = $u01_4;
    var $u10_5 = $145 + $u10_4 | 0;
    var $u11_5 = $u11_4;
    __label__ = 42;
    break;
   case 41:
    var $148 = $139 + 1 | 0;
    var $149 = (i64Math.multiply($148, 0, $u01_4, 0), i64Math.result[0]);
    var $150 = $149 + $u00_4 | 0;
    var $151 = (i64Math.multiply($148, 0, $u11_4, 0), i64Math.result[0]);
    var $_3 = $_4;
    var $_38 = $140;
    var $u00_3 = $150;
    var $u01_3 = $u01_4;
    var $u10_3 = $151 + $u10_4 | 0;
    var $u11_3 = $u11_4;
    __label__ = 28;
    break;
   case 42:
    var $u11_5;
    var $u10_5;
    var $u01_5;
    var $u00_5;
    HEAP32[$M >> 2] = $u00_5;
    HEAP32[$M + 4 >> 2] = $u01_5;
    HEAP32[$M + 8 >> 2] = $u10_5;
    HEAP32[$M + 12 >> 2] = $u11_5;
    var $_0 = 1;
    __label__ = 43;
    break;
   case 43:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_hgcd2["X"] = 1;

function _div1($rp, $n0, $d0) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n0 | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if (($d0 | 0) > -1) {
      var $cnt_026 = 1;
      var $_0127 = $d0;
      __label__ = 6;
      break;
    } else {
      var $cnt_118 = 1;
      var $q_019 = 0;
      var $_1220 = $d0;
      var $_021 = $n0;
      __label__ = 7;
      break;
    }
   case 4:
    if ($d0 >>> 0 > $n0 >>> 0) {
      var $_4 = $n0;
      var $q_4 = 0;
      __label__ = 15;
      break;
    } else {
      var $_2311 = $d0;
      var $cnt1_012 = 0;
      __label__ = 11;
      break;
    }
   case 5:
    if (($6 | 0) == 0) {
      var $_4 = $n0;
      var $q_4 = 0;
      __label__ = 15;
      break;
    } else {
      var $cnt_118 = $6;
      var $q_019 = 0;
      var $_1220 = $5;
      var $_021 = $n0;
      __label__ = 7;
      break;
    }
   case 6:
    var $_0127;
    var $cnt_026;
    var $5 = $_0127 << 1;
    var $6 = $cnt_026 + 1 | 0;
    if (($5 | 0) > -1) {
      var $cnt_026 = $6;
      var $_0127 = $5;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 7:
    var $_021;
    var $_1220;
    var $q_019;
    var $cnt_118;
    var $8 = $q_019 << 1;
    if ($_021 >>> 0 < $_1220 >>> 0) {
      var $_1 = $_021;
      var $q_1 = $8;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_1 = $_021 - $_1220 | 0;
    var $q_1 = $8 | 1;
    __label__ = 9;
    break;
   case 9:
    var $q_1;
    var $_1;
    var $15 = $cnt_118 - 1 | 0;
    if (($15 | 0) == 0) {
      var $_4 = $_1;
      var $q_4 = $q_1;
      __label__ = 15;
      break;
    } else {
      var $cnt_118 = $15;
      var $q_019 = $q_1;
      var $_1220 = $_1220 >>> 1;
      var $_021 = $_1;
      __label__ = 7;
      break;
    }
   case 10:
    if (($19 | 0) == 0) {
      var $_4 = $n0;
      var $q_4 = 0;
      __label__ = 15;
      break;
    } else {
      var $q_25 = 0;
      var $_346 = $18;
      var $_27 = $n0;
      var $cnt1_18 = $19;
      __label__ = 12;
      break;
    }
   case 11:
    var $cnt1_012;
    var $_2311;
    var $18 = $_2311 << 1;
    var $19 = $cnt1_012 + 1 | 0;
    if ($18 >>> 0 > $n0 >>> 0) {
      __label__ = 10;
      break;
    } else {
      var $_2311 = $18;
      var $cnt1_012 = $19;
      __label__ = 11;
      break;
    }
   case 12:
    var $cnt1_18;
    var $_27;
    var $_346;
    var $q_25;
    var $21 = $_346 >>> 1;
    var $22 = $q_25 << 1;
    if ($_27 >>> 0 < $21 >>> 0) {
      var $_3 = $_27;
      var $q_3 = $22;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $_3 = $_27 - $21 | 0;
    var $q_3 = $22 | 1;
    __label__ = 14;
    break;
   case 14:
    var $q_3;
    var $_3;
    var $28 = $cnt1_18 - 1 | 0;
    if (($28 | 0) == 0) {
      var $_4 = $_3;
      var $q_4 = $q_3;
      __label__ = 15;
      break;
    } else {
      var $q_25 = $q_3;
      var $_346 = $21;
      var $_27 = $_3;
      var $cnt1_18 = $28;
      __label__ = 12;
      break;
    }
   case 15:
    var $q_4;
    var $_4;
    HEAP32[$rp >> 2] = $_4;
    return $q_4;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_div1["X"] = 1;

function _mpn_mulmod_bnm1_itch239($rn, $an, $bn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn >> 1;
    if (($1 | 0) < ($an | 0)) {
      __label__ = 3;
      break;
    } else {
      var $7 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ($1 | 0) < ($bn | 0) ? $rn : $1;
    var $7 = $5;
    __label__ = 4;
    break;
   case 4:
    var $7;
    return $rn + 4 + $7 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _div2($rp, $nh, $nl, $dh, $dl) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($nh | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      var $cnt1_0 = 0;
      var $_29 = $dh;
      var $_213 = $dl;
      __label__ = 10;
      break;
    }
   case 3:
    if (($dh | 0) > -1) {
      var $cnt_041 = 1;
      var $_01142 = $dl;
      var $_0743 = $dh;
      __label__ = 5;
      break;
    } else {
      var $cnt_129 = 1;
      var $q_030 = 0;
      var $_11231 = $dl;
      var $_1832 = $dh;
      var $_0234 = $nl;
      var $_035 = $nh;
      __label__ = 6;
      break;
    }
   case 4:
    if (($8 | 0) == 0) {
      var $_4 = $nh;
      var $_46 = $nl;
      var $q_4 = 0;
      __label__ = 18;
      break;
    } else {
      var $cnt_129 = $8;
      var $q_030 = 0;
      var $_11231 = $7;
      var $_1832 = $6;
      var $_0234 = $nl;
      var $_035 = $nh;
      __label__ = 6;
      break;
    }
   case 5:
    var $_0743;
    var $_01142;
    var $cnt_041;
    var $6 = $_0743 << 1 | $_01142 >>> 31;
    var $7 = $_01142 << 1;
    var $8 = $cnt_041 + 1 | 0;
    if (($6 | 0) > -1) {
      var $cnt_041 = $8;
      var $_01142 = $7;
      var $_0743 = $6;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 6:
    var $_035;
    var $_0234;
    var $_1832;
    var $_11231;
    var $q_030;
    var $cnt_129;
    var $10 = $q_030 << 1;
    if ($_035 >>> 0 > $_1832 >>> 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($_035 | 0) != ($_1832 | 0) | $_0234 >>> 0 < $_11231 >>> 0) {
      var $_1 = $_035;
      var $_13 = $_0234;
      var $q_1 = $10;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_1 = $_035 - $_1832 + (($_0234 >>> 0 < $_11231 >>> 0) << 31 >> 31) | 0;
    var $_13 = $_0234 - $_11231 | 0;
    var $q_1 = $10 | 1;
    __label__ = 9;
    break;
   case 9:
    var $q_1;
    var $_13;
    var $_1;
    var $26 = $cnt_129 - 1 | 0;
    if (($26 | 0) == 0) {
      var $_4 = $_1;
      var $_46 = $_13;
      var $q_4 = $q_1;
      __label__ = 18;
      break;
    } else {
      var $cnt_129 = $26;
      var $q_030 = $q_1;
      var $_11231 = $_1832 << 31 | $_11231 >>> 1;
      var $_1832 = $_1832 >>> 1;
      var $_0234 = $_13;
      var $_035 = $_1;
      __label__ = 6;
      break;
    }
   case 10:
    var $_213;
    var $_29;
    var $cnt1_0;
    if ($_29 >>> 0 < $nh >>> 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (($_29 | 0) != ($nh | 0) | $_213 >>> 0 > $nl >>> 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    if (($cnt1_0 | 0) == 0) {
      var $_4 = $nh;
      var $_46 = $nl;
      var $q_4 = 0;
      __label__ = 18;
      break;
    } else {
      var $q_219 = 0;
      var $_31420 = $_213;
      var $_31021 = $_29;
      var $_2422 = $nl;
      var $_223 = $nh;
      var $cnt1_124 = $cnt1_0;
      __label__ = 14;
      break;
    }
   case 13:
    var $cnt1_0 = $cnt1_0 + 1 | 0;
    var $_29 = $_29 << 1 | $_213 >>> 31;
    var $_213 = $_213 << 1;
    __label__ = 10;
    break;
   case 14:
    var $cnt1_124;
    var $_223;
    var $_2422;
    var $_31021;
    var $_31420;
    var $q_219;
    var $40 = $_31021 << 31 | $_31420 >>> 1;
    var $41 = $_31021 >>> 1;
    var $42 = $q_219 << 1;
    if ($_223 >>> 0 > $41 >>> 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if (($_223 | 0) != ($41 | 0) | $_2422 >>> 0 < $40 >>> 0) {
      var $_3 = $_223;
      var $_35 = $_2422;
      var $q_3 = $42;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $_3 = $_223 - $41 + (($_2422 >>> 0 < $40 >>> 0) << 31 >> 31) | 0;
    var $_35 = $_2422 - $40 | 0;
    var $q_3 = $42 | 1;
    __label__ = 17;
    break;
   case 17:
    var $q_3;
    var $_35;
    var $_3;
    var $53 = $cnt1_124 - 1 | 0;
    if (($53 | 0) == 0) {
      var $_4 = $_3;
      var $_46 = $_35;
      var $q_4 = $q_3;
      __label__ = 18;
      break;
    } else {
      var $q_219 = $q_3;
      var $_31420 = $40;
      var $_31021 = $41;
      var $_2422 = $_35;
      var $_223 = $_3;
      var $cnt1_124 = $53;
      __label__ = 14;
      break;
    }
   case 18:
    var $q_4;
    var $_46;
    var $_4;
    HEAP32[$rp >> 2] = $_46;
    HEAP32[$rp + 4 >> 2] = $_4;
    return $q_4;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_div2["X"] = 1;

function ___gmpn_ior_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__n_0 = -$n | 0;
    __label__ = 3;
    break;
   case 3:
    var $__n_0;
    var $_sum = $__n_0 + $n | 0;
    var $7 = HEAP32[$vp + ($_sum << 2) >> 2] | HEAP32[$up + ($_sum << 2) >> 2];
    HEAP32[$rp + ($_sum << 2) >> 2] = $7;
    var $9 = $__n_0 + 1 | 0;
    if (($9 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $__n_0 = $9;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_iorn_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__n_0 = -$n | 0;
    __label__ = 3;
    break;
   case 3:
    var $__n_0;
    var $_sum = $__n_0 + $n | 0;
    var $8 = HEAP32[$up + ($_sum << 2) >> 2] | HEAP32[$vp + ($_sum << 2) >> 2] ^ -1;
    HEAP32[$rp + ($_sum << 2) >> 2] = $8;
    var $10 = $__n_0 + 1 | 0;
    if (($10 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $__n_0 = $10;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_hgcd_mul_matrix1_vector($M, $rp, $ap, $bp, $n) {
  var $2 = HEAP32[$M >> 2];
  var $3 = ___gmpn_mul_1($rp, $ap, $n, $2);
  var $5 = HEAP32[$M + 8 >> 2];
  var $6 = ___gmpn_addmul_1($rp, $bp, $n, $5);
  var $7 = $6 + $3 | 0;
  var $9 = HEAP32[$M + 12 >> 2];
  var $10 = ___gmpn_mul_1($bp, $bp, $n, $9);
  var $12 = HEAP32[$M + 4 >> 2];
  var $13 = ___gmpn_addmul_1($bp, $ap, $n, $12);
  var $14 = $13 + $10 | 0;
  HEAP32[$rp + ($n << 2) >> 2] = $7;
  HEAP32[$bp + ($n << 2) >> 2] = $14;
  return (($14 | $7 | 0) != 0 & 1) + $n | 0;
}

function ___gmpn_hgcd_mul_matrix1_inverse_vector($M, $rp, $ap, $bp, $n) {
  var $2 = HEAP32[$M + 12 >> 2];
  var $3 = ___gmpn_mul_1($rp, $ap, $n, $2);
  var $5 = HEAP32[$M + 4 >> 2];
  var $6 = ___gmpn_submul_1($rp, $bp, $n, $5);
  var $8 = HEAP32[$M >> 2];
  var $9 = ___gmpn_mul_1($bp, $bp, $n, $8);
  var $11 = HEAP32[$M + 8 >> 2];
  var $12 = ___gmpn_submul_1($bp, $ap, $n, $11);
  var $13 = $n - 1 | 0;
  return $n - ((HEAP32[$bp + ($13 << 2) >> 2] | HEAP32[$rp + ($13 << 2) >> 2] | 0) == 0 & 1) | 0;
}

function ___gmpn_ni_invertappr($ip, $dp, $n, $scratch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 100;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__ + 96;
    var $1 = __stackBase__ | 0;
    var $rn_0 = $n;
    var $sizp_0 = $1;
    __label__ = 3;
    break;
   case 3:
    var $sizp_0;
    var $rn_0;
    HEAP32[$sizp_0 >> 2] = $rn_0;
    var $3 = $rn_0 >> 1;
    var $4 = $3 + 1 | 0;
    var $5 = $sizp_0 + 4 | 0;
    if (($4 | 0) > 199) {
      var $rn_0 = $4;
      var $sizp_0 = $5;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_sum = ($3 ^ -1) + $n | 0;
    var $9 = $ip + ($_sum << 2) | 0;
    var $10 = $dp + ($_sum << 2) | 0;
    var $11 = _mpn_bc_invertappr($9, $10, $4, $scratch);
    HEAP32[$__tmp_marker >> 2] = 0;
    var $12 = $n + 1 | 0;
    var $13 = ___gmpn_mulmod_bnm1_next_size($12);
    var $15 = ($n >> 1) + 1 | 0;
    var $16 = _mpn_mulmod_bnm1_itch239($13, $n, $15);
    var $17 = $16 << 2;
    if ($17 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $20 = STACKTOP;
    STACKTOP += $17;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $24 = $20;
    __label__ = 7;
    break;
   case 6:
    var $22 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $17);
    var $24 = $22;
    __label__ = 7;
    break;
   case 7:
    var $24;
    var $25 = $24;
    var $_sum2 = $n + 3 | 0;
    var $26 = $scratch + ($_sum2 << 2) | 0;
    var $rn_1 = $4;
    var $sizp_1 = $5;
    __label__ = 8;
    break;
   case 8:
    var $sizp_1;
    var $rn_1;
    var $28 = $sizp_1 - 4 | 0;
    var $29 = HEAPU32[$28 >> 2];
    var $30 = $29 + 1 | 0;
    var $31 = ___gmpn_mulmod_bnm1_next_size($30);
    var $_sum25 = $n - $29 | 0;
    var $34 = $dp + ($_sum25 << 2) | 0;
    var $35 = $ip + ($n - $rn_1 << 2) | 0;
    if (($31 | 0) > ($29 + $rn_1 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $37 = ___gmpn_mul($26, $34, $29, $35, $rn_1);
    var $38 = $scratch + ($rn_1 + $_sum2 << 2) | 0;
    var $40 = 1 - $rn_1 + $29 | 0;
    var $41 = ___gmpn_add_n($38, $38, $34, $40);
    var $method_0 = 1;
    var $_sum12_pre_phi = $29 + $_sum2 | 0;
    __label__ = 18;
    break;
   case 10:
    ___gmpn_mulmod_bnm1($26, $31, $34, $29, $35, $rn_1, $25);
    var $_sum5 = $rn_1 + $_sum2 | 0;
    var $43 = $scratch + ($_sum5 << 2) | 0;
    var $44 = $31 - $rn_1 | 0;
    var $45 = ___gmpn_add_n($43, $43, $34, $44);
    var $47 = $scratch + ($31 + $_sum2 << 2) | 0;
    HEAP32[$47 >> 2] = $45 + 1 | 0;
    var $48 = $29 - $44 | 0;
    var $49 = $dp + ($n - $48 << 2) | 0;
    var $50 = ___gmpn_add_n($26, $26, $49, $48);
    var $_sum8 = $29 + $_sum2 | 0;
    var $51 = $scratch + ($_sum8 - $44 << 2) | 0;
    var $52 = HEAP32[$51 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($52, $50);
    var $53 = $uadd.f0;
    HEAP32[$51 >> 2] = $53;
    var $54 = $uadd.f1;
    if ($54) {
      var $__p_0 = $51;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $__p_0;
    var $55 = $__p_0 + 4 | 0;
    var $57 = HEAP32[$55 >> 2] + 1 | 0;
    HEAP32[$55 >> 2] = $57;
    if (($57 | 0) == 0) {
      var $__p_0 = $55;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $__p2_0 = $scratch + ($_sum5 + $29 - $31 << 2) | 0;
    __label__ = 13;
    break;
   case 13:
    var $__p2_0;
    var $62 = HEAP32[$__p2_0 >> 2];
    var $63 = $62 - 1 | 0;
    HEAP32[$__p2_0 >> 2] = $63;
    if (($62 | 0) == 0) {
      var $__p2_0 = $__p2_0 + 4 | 0;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $66 = HEAP32[$47 >> 2];
    if (($66 | 0) == 0) {
      var $__p6_0 = $26;
      __label__ = 17;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $71 = $66 - 1 + HEAP32[$26 >> 2] | 0;
    HEAP32[$26 >> 2] = $71;
    if ($71 >>> 0 < (HEAP32[$47 >> 2] - 1 | 0) >>> 0) {
      var $__p4_0 = $26;
      __label__ = 16;
      break;
    } else {
      var $method_0 = 0;
      var $_sum12_pre_phi = $_sum8;
      __label__ = 18;
      break;
    }
   case 16:
    var $__p4_0;
    var $75 = $__p4_0 + 4 | 0;
    var $77 = HEAP32[$75 >> 2] + 1 | 0;
    HEAP32[$75 >> 2] = $77;
    if (($77 | 0) == 0) {
      var $__p4_0 = $75;
      __label__ = 16;
      break;
    } else {
      var $method_0 = 0;
      var $_sum12_pre_phi = $_sum8;
      __label__ = 18;
      break;
    }
   case 17:
    var $__p6_0;
    var $80 = HEAP32[$__p6_0 >> 2];
    var $81 = $80 - 1 | 0;
    HEAP32[$__p6_0 >> 2] = $81;
    if (($80 | 0) == 0) {
      var $__p6_0 = $__p6_0 + 4 | 0;
      __label__ = 17;
      break;
    } else {
      var $method_0 = 0;
      var $_sum12_pre_phi = $_sum8;
      __label__ = 18;
      break;
    }
   case 18:
    var $_sum12_pre_phi;
    var $method_0;
    var $83 = $scratch + ($_sum12_pre_phi << 2) | 0;
    var $84 = HEAPU32[$83 >> 2];
    if ($84 >>> 0 < 2) {
      var $cy_0 = 1;
      var $86 = $84;
      __label__ = 19;
      break;
    } else {
      var $__n_0 = $30;
      var $__d_0 = $26;
      __label__ = 25;
      break;
    }
   case 19:
    var $86;
    var $cy_0;
    if (($86 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $89 = ___gmpn_cmp($26, $34, $29);
    if (($89 | 0) > 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $91 = ___gmpn_sub_n($26, $26, $34, $29);
    var $93 = HEAP32[$83 >> 2] - $91 | 0;
    HEAP32[$83 >> 2] = $93;
    var $cy_0 = $cy_0 + 1 | 0;
    var $86 = $93;
    __label__ = 19;
    break;
   case 22:
    var $96 = HEAPU32[$35 >> 2];
    HEAP32[$35 >> 2] = $96 - $cy_0 | 0;
    if ($96 >>> 0 < $cy_0 >>> 0) {
      var $__p8_0 = $35;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $__p8_0;
    var $99 = $__p8_0 + 4 | 0;
    var $100 = HEAP32[$99 >> 2];
    var $101 = $100 - 1 | 0;
    HEAP32[$99 >> 2] = $101;
    if (($100 | 0) == 0) {
      var $__p8_0 = $99;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $103 = ___gmpn_sub_n($26, $34, $26, $29);
    __label__ = 32;
    break;
   case 25:
    var $__d_0;
    var $__n_0;
    var $105 = HEAP32[$__d_0 >> 2] ^ -1;
    HEAP32[$__d_0 >> 2] = $105;
    var $106 = $__n_0 - 1 | 0;
    if (($106 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $__n_0 = $106;
    var $__d_0 = $__d_0 + 4 | 0;
    __label__ = 25;
    break;
   case 27:
    var $110 = HEAP32[$26 >> 2];
    var $uadd13 = _llvm_uadd_with_overflow_i32($110, $method_0);
    var $111 = $uadd13.f0;
    HEAP32[$26 >> 2] = $111;
    var $112 = $uadd13.f1;
    if ($112) {
      var $__p10_0 = $26;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $__p10_0;
    var $113 = $__p10_0 + 4 | 0;
    var $115 = HEAP32[$113 >> 2] + 1 | 0;
    HEAP32[$113 >> 2] = $115;
    if (($115 | 0) == 0) {
      var $__p10_0 = $113;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    if ((HEAP32[$83 >> 2] | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      var $__p12_0 = $35;
      __label__ = 30;
      break;
    }
   case 30:
    var $__p12_0;
    var $121 = HEAP32[$__p12_0 >> 2] + 1 | 0;
    HEAP32[$__p12_0 >> 2] = $121;
    if (($121 | 0) == 0) {
      var $__p12_0 = $__p12_0 + 4 | 0;
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $124 = ___gmpn_sub_n($26, $26, $34, $29);
    __label__ = 32;
    break;
   case 32:
    var $126 = $scratch + ($_sum12_pre_phi - $rn_1 << 2) | 0;
    ___gmpn_mul_n($scratch, $126, $35, $rn_1);
    var $127 = $scratch + ($rn_1 << 2) | 0;
    var $129 = ($rn_1 << 1) - $29 | 0;
    var $130 = ___gmpn_add_n($127, $127, $126, $129);
    var $131 = $ip + ($_sum25 << 2) | 0;
    var $132 = (i64Math.multiply($rn_1, 0, 3, 0), i64Math.result[0]);
    var $133 = $scratch + ($132 - $29 << 2) | 0;
    var $134 = $scratch + ($rn_1 + $_sum2 << 2) | 0;
    var $135 = $29 - $rn_1 | 0;
    var $136 = _mpn_add_nc($131, $133, $134, $135, $130);
    var $137 = HEAP32[$35 >> 2];
    var $uadd19 = _llvm_uadd_with_overflow_i32($137, $136);
    var $138 = $uadd19.f0;
    HEAP32[$35 >> 2] = $138;
    var $139 = $uadd19.f1;
    if ($139) {
      var $__p14_0 = $35;
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $__p14_0;
    var $140 = $__p14_0 + 4 | 0;
    var $142 = HEAP32[$140 >> 2] + 1 | 0;
    HEAP32[$140 >> 2] = $142;
    if (($142 | 0) == 0) {
      var $__p14_0 = $140;
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    if (($28 | 0) == ($1 | 0)) {
      __label__ = 35;
      break;
    } else {
      var $rn_1 = $29;
      var $sizp_1 = $28;
      __label__ = 8;
      break;
    }
   case 35:
    var $151 = HEAPU32[$scratch + ($132 + ($29 ^ -1) << 2) >> 2] >>> 0 > 4294967288 & 1;
    var $152 = HEAPU32[$__tmp_marker >> 2];
    if (($152 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    ___gmp_tmp_reentrant_free($152);
    __label__ = 37;
    break;
   case 37:
    STACKTOP = __stackBase__;
    return $151;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_ni_invertappr["X"] = 1;

function _mpn_bc_invertappr($ip, $dp, $n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 3:
    var $3 = HEAPU32[$dp >> 2];
    var $4 = $3 >>> 16;
    var $5 = $3 & 65535;
    var $6 = $3 ^ -1;
    var $7 = Math.floor(($6 >>> 0) / ($4 >>> 0));
    var $8 = (i64Math.multiply($7, 0, $4, 0), i64Math.result[0]);
    var $9 = $6 - $8 | 0;
    var $10 = (i64Math.multiply($7, 0, $5, 0), i64Math.result[0]);
    var $12 = $9 << 16 | 65535;
    if ($12 >>> 0 < $10 >>> 0) {
      __label__ = 4;
      break;
    } else {
      var $__q1_0 = $7;
      var $__r1_0 = $12;
      __label__ = 6;
      break;
    }
   case 4:
    var $15 = $7 - 1 | 0;
    var $uadd8 = _llvm_uadd_with_overflow_i32($12, $3);
    var $16 = $uadd8.f0;
    var $17 = $uadd8.f1;
    if ($16 >>> 0 < $10 >>> 0 & ($17 ^ 1)) {
      __label__ = 5;
      break;
    } else {
      var $__q1_0 = $15;
      var $__r1_0 = $16;
      __label__ = 6;
      break;
    }
   case 5:
    var $__q1_0 = $7 - 2 | 0;
    var $__r1_0 = $16 + $3 | 0;
    __label__ = 6;
    break;
   case 6:
    var $__r1_0;
    var $__q1_0;
    var $23 = $__r1_0 - $10 | 0;
    var $24 = Math.floor(($23 >>> 0) / ($4 >>> 0));
    var $25 = (i64Math.multiply($24, 0, $4, 0), i64Math.result[0]);
    var $26 = $23 - $25 | 0;
    var $27 = (i64Math.multiply($24, 0, $5, 0), i64Math.result[0]);
    var $29 = $26 << 16 | 65535;
    if ($29 >>> 0 < $27 >>> 0) {
      __label__ = 7;
      break;
    } else {
      var $__q0_0 = $24;
      __label__ = 8;
      break;
    }
   case 7:
    var $uadd7 = _llvm_uadd_with_overflow_i32($29, $3);
    var $32 = $uadd7.f1;
    var $33 = $uadd7.f0;
    var $__v = $33 >>> 0 < $27 >>> 0 & ($32 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $24 | 0;
    __label__ = 8;
    break;
   case 8:
    var $__q0_0;
    HEAP32[$ip >> 2] = $__q0_0 | $__q1_0 << 16;
    var $_0 = 0;
    __label__ = 27;
    break;
   case 9:
    var $_sum = $n + 2 | 0;
    var $39 = $tp + ($_sum << 2) | 0;
    var $40 = $n - 1 | 0;
    if (($n | 0) > 0) {
      var $i_021 = $40;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $i_021;
    HEAP32[$tp + ($i_021 + $_sum << 2) >> 2] = -1;
    if (($i_021 | 0) > 0) {
      var $i_021 = $i_021 - 1 | 0;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $__d_0 = $tp + ($_sum + $n << 2) | 0;
    var $__s_0 = $dp;
    var $__n_0 = $n;
    __label__ = 12;
    break;
   case 12:
    var $__n_0;
    var $__s_0;
    var $__d_0;
    var $49 = HEAP32[$__s_0 >> 2] ^ -1;
    HEAP32[$__d_0 >> 2] = $49;
    var $51 = $__n_0 - 1 | 0;
    if (($51 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__d_0 = $__d_0 + 4 | 0;
      var $__s_0 = $__s_0 + 4 | 0;
      var $__n_0 = $51;
      __label__ = 12;
      break;
    }
   case 13:
    if (($n | 0) == 2) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $56 = ___gmpn_divrem_2($ip, 0, $39, 4, $dp);
    var $_0 = 0;
    __label__ = 27;
    break;
   case 15:
    var $59 = HEAPU32[$dp + ($40 << 2) >> 2];
    var $60 = $59 >>> 16;
    var $61 = $59 & 65535;
    var $62 = $59 ^ -1;
    var $63 = Math.floor(($62 >>> 0) / ($60 >>> 0));
    var $64 = (i64Math.multiply($63, 0, $60, 0), i64Math.result[0]);
    var $65 = $62 - $64 | 0;
    var $66 = (i64Math.multiply($63, 0, $61, 0), i64Math.result[0]);
    var $68 = $65 << 16 | 65535;
    if ($68 >>> 0 < $66 >>> 0) {
      __label__ = 16;
      break;
    } else {
      var $__r16_0 = $68;
      var $__q14_0 = $63;
      __label__ = 18;
      break;
    }
   case 16:
    var $71 = $63 - 1 | 0;
    var $uadd5 = _llvm_uadd_with_overflow_i32($68, $59);
    var $72 = $uadd5.f0;
    var $73 = $uadd5.f1;
    if ($72 >>> 0 < $66 >>> 0 & ($73 ^ 1)) {
      __label__ = 17;
      break;
    } else {
      var $__r16_0 = $72;
      var $__q14_0 = $71;
      __label__ = 18;
      break;
    }
   case 17:
    var $__r16_0 = $72 + $59 | 0;
    var $__q14_0 = $63 - 2 | 0;
    __label__ = 18;
    break;
   case 18:
    var $__q14_0;
    var $__r16_0;
    var $79 = $__r16_0 - $66 | 0;
    var $80 = Math.floor(($79 >>> 0) / ($60 >>> 0));
    var $81 = (i64Math.multiply($80, 0, $60, 0), i64Math.result[0]);
    var $82 = $79 - $81 | 0;
    var $83 = (i64Math.multiply($80, 0, $61, 0), i64Math.result[0]);
    var $85 = $82 << 16 | 65535;
    if ($85 >>> 0 < $83 >>> 0) {
      __label__ = 19;
      break;
    } else {
      var $__q05_0 = $80;
      __label__ = 20;
      break;
    }
   case 19:
    var $uadd4 = _llvm_uadd_with_overflow_i32($85, $59);
    var $88 = $uadd4.f1;
    var $89 = $uadd4.f0;
    var $_17_v = $89 >>> 0 < $83 >>> 0 & ($88 ^ 1) ? -2 : -1;
    var $__q05_0 = $_17_v + $80 | 0;
    __label__ = 20;
    break;
   case 20:
    var $__q05_0;
    var $93 = $__q05_0 | $__q14_0 << 16;
    var $94 = (i64Math.multiply($59, 0, $93, 0), i64Math.result[0]);
    var $97 = HEAPU32[$dp + ($n - 2 << 2) >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($94, $97);
    var $98 = $uadd.f0;
    var $99 = $uadd.f1;
    if ($99) {
      __label__ = 21;
      break;
    } else {
      var $v_0 = $93;
      var $p_0 = $98;
      __label__ = 22;
      break;
    }
   case 21:
    var $102 = ($98 >>> 0 >= $59 >>> 0) << 31 >> 31;
    var $v_0 = $93 - 1 + $102 | 0;
    var $p_0 = $98 - $59 - ($102 & $59) | 0;
    __label__ = 22;
    break;
   case 22:
    var $p_0;
    var $v_0;
    var $109 = $97 & 65535;
    var $110 = $97 >>> 16;
    var $111 = $v_0 & 65535;
    var $112 = $v_0 >>> 16;
    var $113 = (i64Math.multiply($109, 0, $111, 0), i64Math.result[0]);
    var $114 = (i64Math.multiply($109, 0, $112, 0), i64Math.result[0]);
    var $115 = (i64Math.multiply($110, 0, $111, 0), i64Math.result[0]);
    var $116 = (i64Math.multiply($110, 0, $112, 0), i64Math.result[0]);
    var $118 = ($113 >>> 16) + $114 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($118, $115);
    var $119 = $uadd2.f0;
    var $120 = $uadd2.f1;
    var $__x3_0 = $120 ? $116 + 65536 | 0 : $116;
    var $123 = $__x3_0 + ($119 >>> 16) | 0;
    var $126 = $119 << 16 | $113 & 65535;
    var $uadd3 = _llvm_uadd_with_overflow_i32($p_0, $123);
    var $127 = $uadd3.f0;
    var $128 = $uadd3.f1;
    if ($128) {
      __label__ = 23;
      break;
    } else {
      var $v_1 = $v_0;
      __label__ = 25;
      break;
    }
   case 23:
    var $130 = $v_0 - 1 | 0;
    if ($127 >>> 0 < $59 >>> 0) {
      var $v_1 = $130;
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $_19 = $127 >>> 0 <= $59 >>> 0 & $126 >>> 0 < $97 >>> 0 ? $130 : $v_0 - 2 | 0;
    var $v_1 = $_19;
    __label__ = 25;
    break;
   case 25:
    var $v_1;
    var $137 = $n << 1;
    var $138 = ___gmpn_sbpi1_divappr_q($ip, $39, $137, $dp, $n, $v_1);
    var $__p_0 = $ip;
    __label__ = 26;
    break;
   case 26:
    var $__p_0;
    var $141 = HEAP32[$__p_0 >> 2];
    var $142 = $141 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $142;
    if (($141 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 26;
      break;
    } else {
      var $_0 = 1;
      __label__ = 27;
      break;
    }
   case 27:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_bc_invertappr["X"] = 1;

function _mpn_add_nc($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_add_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_add_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function ___gmpn_invertappr($ip, $dp, $n, $scratch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($scratch | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $scratch;
      __label__ = 7;
      break;
    }
   case 3:
    var $3 = (i64Math.multiply($n, 0, 12, 0), i64Math.result[0]);
    var $4 = $3 + 8 | 0;
    if ($4 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $7 = STACKTOP;
    STACKTOP += $4;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $11 = $7;
    __label__ = 6;
    break;
   case 5:
    var $9 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $4);
    var $11 = $9;
    __label__ = 6;
    break;
   case 6:
    var $11;
    var $_0 = $11;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    if (($n | 0) > 199) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $16 = _mpn_bc_invertappr($ip, $dp, $n, $_0);
    var $res_0 = $16;
    __label__ = 10;
    break;
   case 9:
    var $18 = ___gmpn_ni_invertappr($ip, $dp, $n, $_0);
    var $res_0 = $18;
    __label__ = 10;
    break;
   case 10:
    var $res_0;
    var $20 = HEAP32[$__tmp_marker >> 2];
    if (($20 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($20);
    __label__ = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return $res_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_jacobi_base($a, $b, $result_bit1) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($a | 0) == 0) {
      var $_0 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($a & 1 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_1 = $a;
      var $_14 = $result_bit1;
      __label__ = 6;
      break;
    }
   case 4:
    var $7 = $b >>> 1 ^ $b;
    var $_01 = $a;
    var $_03 = $result_bit1;
    __label__ = 5;
    break;
   case 5:
    var $_03;
    var $_01;
    var $9 = $_01 >>> 1;
    var $10 = $7 ^ $_03;
    if (($9 & 1 | 0) == 0) {
      var $_01 = $9;
      var $_03 = $10;
      __label__ = 5;
      break;
    } else {
      var $_1 = $9;
      var $_14 = $10;
      __label__ = 6;
      break;
    }
   case 6:
    var $_14;
    var $_1;
    if (($_1 | 0) == 1) {
      var $_5 = $_14;
      __label__ = 13;
      break;
    } else {
      var $_2 = $_1;
      var $_02 = $b;
      var $_25 = $_14;
      __label__ = 7;
      break;
    }
   case 7:
    var $_25;
    var $_02;
    var $_2;
    var $17 = $_2 >>> 1 ^ $_2;
    var $_3 = $_02;
    var $_36 = $_2 & $_02 ^ $_25;
    __label__ = 8;
    break;
   case 8:
    var $_36;
    var $_3;
    if (($_3 | 0) == ($_2 | 0)) {
      var $_0 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $_4 = $_3 - $_2 | 0;
    var $_47 = $_36;
    __label__ = 10;
    break;
   case 10:
    var $_47;
    var $_4;
    var $23 = $_4 >>> 1;
    var $24 = $17 ^ $_47;
    if (($23 & 1 | 0) == 0) {
      var $_4 = $23;
      var $_47 = $24;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (($23 | 0) == 1) {
      var $_5 = $24;
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if ($23 >>> 0 < $_2 >>> 0) {
      var $_02 = $_2;
      var $_2 = $23;
      var $_25 = $24;
      __label__ = 7;
      break;
    } else {
      var $_3 = $23;
      var $_36 = $24;
      __label__ = 8;
      break;
    }
   case 13:
    var $_5;
    var $_0 = 1 - ($_5 & 2) | 0;
    __label__ = 14;
    break;
   case 14:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_jacobi_base["X"] = 1;

function ___gmpn_matrix22_mul_itch($rn, $mn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($rn | 0) > 29 & ($mn | 0) > 29) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = (i64Math.multiply($rn, 0, 3, 0), i64Math.result[0]);
    var $_0 = ($mn << 1) + $4 | 0;
    __label__ = 5;
    break;
   case 4:
    var $8 = $mn + $rn | 0;
    var $9 = (i64Math.multiply($8, 0, 3, 0), i64Math.result[0]);
    var $_0 = $9 + 5 | 0;
    __label__ = 5;
    break;
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_lshift($rp, $up, $n, $cnt) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rp + ($n << 2) | 0;
    var $2 = 32 - $cnt | 0;
    var $_sum = $n - 1 | 0;
    var $3 = $up + ($_sum << 2) | 0;
    var $4 = HEAPU32[$3 >> 2];
    var $5 = $4 >>> ($2 >>> 0);
    var $high_limb_03 = $4 << $cnt;
    if (($_sum | 0) == 0) {
      var $_0_lcssa = $1;
      var $high_limb_0_lcssa = $high_limb_03;
      __label__ = 5;
      break;
    } else {
      var $_014 = $3;
      var $_05 = $1;
      var $i_06 = $_sum;
      var $high_limb_07 = $high_limb_03;
      __label__ = 3;
      break;
    }
   case 3:
    var $high_limb_07;
    var $i_06;
    var $_05;
    var $_014;
    var $7 = $_014 - 4 | 0;
    var $8 = HEAPU32[$7 >> 2];
    var $11 = $_05 - 4 | 0;
    HEAP32[$11 >> 2] = $8 >>> ($2 >>> 0) | $high_limb_07;
    var $i_0 = $i_06 - 1 | 0;
    var $high_limb_0 = $8 << $cnt;
    if (($i_0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_014 = $7;
      var $_05 = $11;
      var $i_06 = $i_0;
      var $high_limb_07 = $high_limb_0;
      __label__ = 3;
      break;
    }
   case 4:
    var $_0_lcssa = $rp + 4 | 0;
    var $high_limb_0_lcssa = $high_limb_0;
    __label__ = 5;
    break;
   case 5:
    var $high_limb_0_lcssa;
    var $_0_lcssa;
    HEAP32[$_0_lcssa - 4 >> 2] = $high_limb_0_lcssa;
    return $5;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_lshiftc($rp, $up, $n, $cnt) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rp + ($n << 2) | 0;
    var $2 = 32 - $cnt | 0;
    var $_sum = $n - 1 | 0;
    var $3 = $up + ($_sum << 2) | 0;
    var $4 = HEAPU32[$3 >> 2];
    var $5 = $4 >>> ($2 >>> 0);
    var $high_limb_03 = $4 << $cnt;
    if (($_sum | 0) == 0) {
      var $_0_lcssa = $1;
      var $high_limb_0_lcssa = $high_limb_03;
      __label__ = 5;
      break;
    } else {
      var $_014 = $3;
      var $_05 = $1;
      var $i_06 = $_sum;
      var $high_limb_07 = $high_limb_03;
      __label__ = 3;
      break;
    }
   case 3:
    var $high_limb_07;
    var $i_06;
    var $_05;
    var $_014;
    var $7 = $_014 - 4 | 0;
    var $8 = HEAPU32[$7 >> 2];
    var $12 = $_05 - 4 | 0;
    HEAP32[$12 >> 2] = ($8 >>> ($2 >>> 0) | $high_limb_07) ^ -1;
    var $i_0 = $i_06 - 1 | 0;
    var $high_limb_0 = $8 << $cnt;
    if (($i_0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_014 = $7;
      var $_05 = $12;
      var $i_06 = $i_0;
      var $high_limb_07 = $high_limb_0;
      __label__ = 3;
      break;
    }
   case 4:
    var $_0_lcssa = $rp + 4 | 0;
    var $high_limb_0_lcssa = $high_limb_0;
    __label__ = 5;
    break;
   case 5:
    var $high_limb_0_lcssa;
    var $_0_lcssa;
    HEAP32[$_0_lcssa - 4 >> 2] = $high_limb_0_lcssa ^ -1;
    return $5;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_matrix22_mul_strassen($r0, $r1, $r2, $r3, $rn, $m0, $m1, $m2, $m3, $mn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn + 1 | 0;
    var $2 = $tp + ($1 << 2) | 0;
    var $3 = $mn + 1 | 0;
    var $_sum = $3 + $1 | 0;
    var $4 = $tp + ($_sum << 2) | 0;
    var $5 = $mn + $rn | 0;
    var $6 = $5 + 1 | 0;
    var $_sum1 = $_sum + $6 | 0;
    var $7 = $tp + ($_sum1 << 2) | 0;
    var $8 = ($rn | 0) >= ($mn | 0);
    if ($8) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = ___gmpn_mul($4, $r1, $rn, $m2, $mn);
    __label__ = 5;
    break;
   case 4:
    var $12 = ___gmpn_mul($4, $m2, $mn, $r1, $rn);
    __label__ = 5;
    break;
   case 5:
    var $14 = _abs_sub_n($r3, $r3, $r2, $rn);
    if (($14 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $17 = _abs_sub_n($r1, $r1, $r3, $rn);
    HEAP32[$r1 + ($rn << 2) >> 2] = 0;
    if (($17 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $21 = ___gmpn_add_n($tp, $r1, $r0, $rn);
    HEAP32[$tp + ($rn << 2) >> 2] = $21;
    var $s0s_0 = 0;
    var $r1s_07 = $17;
    var $34 = 1;
    __label__ = 11;
    break;
   case 8:
    var $24 = ___gmpn_add_n($r1, $r1, $r3, $rn);
    HEAP32[$r1 + ($rn << 2) >> 2] = $24;
    if (($24 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $28 = ___gmpn_sub_n($tp, $r1, $r0, $rn);
    HEAP32[$tp + ($rn << 2) >> 2] = $24 - $28 | 0;
    var $s0s_0 = 1;
    var $r1s_07 = 0;
    var $34 = 0;
    __label__ = 11;
    break;
   case 10:
    var $31 = _abs_sub_n($tp, $r0, $r1, $rn);
    HEAP32[$tp + ($rn << 2) >> 2] = 0;
    var $s0s_0 = $31;
    var $r1s_07 = 0;
    var $34 = 0;
    __label__ = 11;
    break;
   case 11:
    var $34;
    var $r1s_07;
    var $s0s_0;
    if ($8) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $36 = ___gmpn_mul($7, $r0, $rn, $m0, $mn);
    __label__ = 14;
    break;
   case 13:
    var $38 = ___gmpn_mul($7, $m0, $mn, $r0, $rn);
    __label__ = 14;
    break;
   case 14:
    var $40 = ___gmpn_add_n($r0, $4, $7, $5);
    HEAP32[$r0 + ($5 << 2) >> 2] = $40;
    var $42 = _abs_sub_n($2, $m3, $m2, $mn);
    var $44 = $14 ^ 1 ^ $42;
    if ($8) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $46 = ___gmpn_mul($7, $r3, $rn, $2, $mn);
    __label__ = 17;
    break;
   case 16:
    var $48 = ___gmpn_mul($7, $2, $mn, $r3, $rn);
    __label__ = 17;
    break;
   case 17:
    HEAP32[$tp + ($_sum1 + $5 << 2) >> 2] = 0;
    if (($42 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $53 = _abs_sub_n($2, $m1, $2, $mn);
    HEAP32[$tp + ($1 + $mn << 2) >> 2] = 0;
    var $t0s_0 = $53;
    __label__ = 20;
    break;
   case 19:
    var $56 = ___gmpn_add_n($2, $2, $m1, $mn);
    HEAP32[$tp + ($1 + $mn << 2) >> 2] = $56;
    var $t0s_0 = 0;
    __label__ = 20;
    break;
   case 20:
    var $t0s_0;
    var $_sum4 = $1 + $mn | 0;
    var $59 = $tp + ($_sum4 << 2) | 0;
    if ((HEAP32[$59 >> 2] | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    if (($3 | 0) > ($rn | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $65 = ___gmpn_mul($r3, $r1, $rn, $2, $3);
    __label__ = 24;
    break;
   case 23:
    var $67 = ___gmpn_mul($r3, $2, $3, $r1, $rn);
    __label__ = 24;
    break;
   case 24:
    if ((HEAP32[$r1 + ($rn << 2) >> 2] | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $73 = $r3 + ($rn << 2) | 0;
    var $74 = ___gmpn_add_n($73, $73, $2, $3);
    __label__ = 29;
    break;
   case 26:
    if (($1 | 0) < ($mn | 0)) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $78 = ___gmpn_mul($r3, $r1, $1, $2, $mn);
    __label__ = 29;
    break;
   case 28:
    var $80 = ___gmpn_mul($r3, $2, $mn, $r1, $1);
    __label__ = 29;
    break;
   case 29:
    HEAP32[$tp + ($_sum + $5 << 2) >> 2] = 0;
    if (($r1s_07 | 0) == ($t0s_0 | 0)) {
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $85 = _abs_sub_n($r3, $4, $r3, $6);
    var $r3s_0 = $85;
    __label__ = 32;
    break;
   case 31:
    var $87 = ___gmpn_add_n($r3, $r3, $4, $6);
    var $r3s_0 = 0;
    __label__ = 32;
    break;
   case 32:
    var $r3s_0;
    if (($t0s_0 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $91 = ___gmpn_add_n($2, $2, $m0, $mn);
    HEAP32[$59 >> 2] = $91;
    var $t0s_1 = $t0s_0;
    __label__ = 37;
    break;
   case 34:
    if ((HEAP32[$59 >> 2] | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $96 = ___gmpn_sub_n($2, $2, $m0, $mn);
    var $98 = HEAP32[$59 >> 2] - $96 | 0;
    HEAP32[$59 >> 2] = $98;
    var $t0s_1 = 0;
    __label__ = 37;
    break;
   case 36:
    var $100 = _abs_sub_n($2, $2, $m0, $mn);
    var $t0s_1 = $100;
    __label__ = 37;
    break;
   case 37:
    var $t0s_1;
    if (($3 | 0) > ($rn | 0)) {
      __label__ = 39;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $104 = ___gmpn_mul($4, $r2, $rn, $2, $3);
    __label__ = 40;
    break;
   case 39:
    var $106 = ___gmpn_mul($4, $2, $3, $r2, $rn);
    __label__ = 40;
    break;
   case 40:
    if ($34) {
      __label__ = 41;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 41:
    var $109 = ___gmpn_sub_n($r1, $r2, $r1, $rn);
    __label__ = 43;
    break;
   case 42:
    var $111 = ___gmpn_add_n($r1, $r1, $r2, $rn);
    var $112 = $r1 + ($rn << 2) | 0;
    var $114 = HEAP32[$112 >> 2] + $111 | 0;
    HEAP32[$112 >> 2] = $114;
    __label__ = 43;
    break;
   case 43:
    var $116 = _add_signed_n($r2, $r3, $r3s_0, $4, $t0s_1, $_sum4);
    var $117 = _add_signed_n($r3, $r3, $r3s_0, $7, $44, $_sum4);
    if (($1 | 0) < ($mn | 0)) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $120 = ___gmpn_mul($4, $tp, $1, $m1, $mn);
    __label__ = 46;
    break;
   case 45:
    var $122 = ___gmpn_mul($4, $m1, $mn, $tp, $1);
    __label__ = 46;
    break;
   case 46:
    var $124 = ___gmpn_add_n($2, $m3, $m1, $mn);
    HEAP32[$59 >> 2] = $124;
    if (($1 | 0) < ($3 | 0)) {
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $127 = ___gmpn_mul($7, $r1, $1, $2, $3);
    __label__ = 49;
    break;
   case 48:
    var $129 = ___gmpn_mul($7, $2, $3, $r1, $1);
    __label__ = 49;
    break;
   case 49:
    var $131 = _add_signed_n($r1, $r3, $117, $4, $s0s_0, $_sum4);
    if (($117 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $134 = ___gmpn_add_n($r3, $7, $r3, $_sum4);
    __label__ = 52;
    break;
   case 51:
    var $136 = ___gmpn_sub_n($r3, $7, $r3, $_sum4);
    __label__ = 52;
    break;
   case 52:
    if (($116 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    var $140 = ___gmpn_add_n($r2, $7, $r2, $_sum4);
    __label__ = 55;
    break;
   case 54:
    var $142 = ___gmpn_sub_n($r2, $7, $r2, $_sum4);
    __label__ = 55;
    break;
   case 55:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_matrix22_mul_strassen["X"] = 1;

function _abs_sub_n($rp, $ap, $bp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__gmp_i_0 = $n;
    __label__ = 3;
    break;
   case 3:
    var $__gmp_i_0;
    var $2 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 4:
    var $6 = HEAPU32[$ap + ($2 << 2) >> 2];
    var $8 = HEAPU32[$bp + ($2 << 2) >> 2];
    if (($6 | 0) == ($8 | 0)) {
      var $__gmp_i_0 = $2;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ($6 >>> 0 > $8 >>> 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $12 = ___gmpn_sub_n($rp, $ap, $bp, $n);
    var $_0 = 0;
    __label__ = 8;
    break;
   case 7:
    var $14 = ___gmpn_sub_n($rp, $bp, $ap, $n);
    var $_0 = 1;
    __label__ = 8;
    break;
   case 8:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _add_signed_n($rp, $ap, $as, $bp, $bs, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($as | 0) == ($bs | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = _abs_sub_n($rp, $ap, $bp, $n);
    var $_0 = $3 ^ $as;
    __label__ = 5;
    break;
   case 4:
    var $6 = ___gmpn_add_n($rp, $ap, $bp, $n);
    var $_0 = $as;
    __label__ = 5;
    break;
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_matrix22_mul($r0, $r1, $r2, $r3, $rn, $m0, $m1, $m2, $m3, $mn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($rn | 0) > 29 & ($mn | 0) > 29) {
      __label__ = 12;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = $tp + ($rn << 2) | 0;
    var $5 = $tp + (($rn << 1) + $mn << 2) | 0;
    var $6 = ($rn | 0) == 0;
    var $7 = ($rn | 0) < ($mn | 0);
    var $8 = $mn + $rn | 0;
    var $9 = $rn - 1 | 0;
    var $10 = ($9 | 0) == 0;
    var $scevgep = $tp + ($9 << 2) | 0;
    var $i_05 = 0;
    var $_016 = $r1;
    var $_07 = $r0;
    __label__ = 4;
    break;
   case 4:
    var $_07;
    var $_016;
    var $i_05;
    if ($6) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $13 = HEAP32[$_07 >> 2];
    if ($10) {
      var $__x_1 = $13;
      var $__dst_1 = $tp;
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $13;
      var $_0_pn = $_07;
      var $__dst_0 = $tp;
      var $__n_0 = $9;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $_0_pn;
    var $__x_0;
    var $__src_0 = $_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $15 = HEAP32[$__src_0 >> 2];
    var $16 = $__n_0 - 1 | 0;
    if (($16 | 0) == 0) {
      var $__x_1 = $15;
      var $__dst_1 = $scevgep;
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $15;
      var $_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $16;
      __label__ = 6;
      break;
    }
   case 7:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 8;
    break;
   case 8:
    if ($7) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $20 = ___gmpn_mul($4, $_07, $rn, $m0, $mn);
    var $21 = ___gmpn_mul($5, $_016, $rn, $m3, $mn);
    var $22 = ___gmpn_mul($_07, $_016, $rn, $m2, $mn);
    var $23 = ___gmpn_mul($_016, $tp, $rn, $m1, $mn);
    __label__ = 11;
    break;
   case 10:
    var $25 = ___gmpn_mul($4, $m0, $mn, $_07, $rn);
    var $26 = ___gmpn_mul($5, $m3, $mn, $_016, $rn);
    var $27 = ___gmpn_mul($_07, $m2, $mn, $_016, $rn);
    var $28 = ___gmpn_mul($_016, $m1, $mn, $tp, $rn);
    __label__ = 11;
    break;
   case 11:
    var $30 = ___gmpn_add_n($_07, $_07, $4, $8);
    HEAP32[$_07 + ($8 << 2) >> 2] = $30;
    var $32 = ___gmpn_add_n($_016, $_016, $5, $8);
    HEAP32[$_016 + ($8 << 2) >> 2] = $32;
    var $34 = $i_05 + 1 | 0;
    if (($34 | 0) == 2) {
      __label__ = 13;
      break;
    } else {
      var $i_05 = $34;
      var $_016 = $r3;
      var $_07 = $r2;
      __label__ = 4;
      break;
    }
   case 12:
    ___gmpn_matrix22_mul_strassen($r0, $r1, $r2, $r3, $rn, $m0, $m1, $m2, $m3, $mn, $tp);
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_matrix22_mul["X"] = 1;

function ___gmpn_mod_1($ap, $n, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) == 0) {
      var $_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($b | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $5 = _mpn_mod_1_norm($ap, $n, $b);
    var $_0 = $5;
    __label__ = 6;
    break;
   case 5:
    var $7 = _mpn_mod_1_unnorm($ap, $n, $b);
    var $_0 = $7;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_mod_1_norm($up, $un, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = HEAPU32[$up + ($un - 1 << 2) >> 2];
    var $5 = $3 >>> 0 < $d >>> 0 ? 0 : $d;
    var $_ = $3 - $5 | 0;
    if (($un | 0) == 1) {
      var $_0 = $_;
      __label__ = 11;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $8 = $d >>> 16;
    var $9 = $d & 65535;
    var $10 = $d ^ -1;
    var $11 = Math.floor(($10 >>> 0) / ($8 >>> 0));
    var $12 = (i64Math.multiply($11, 0, $8, 0), i64Math.result[0]);
    var $13 = $10 - $12 | 0;
    var $14 = (i64Math.multiply($11, 0, $9, 0), i64Math.result[0]);
    var $16 = $13 << 16 | 65535;
    if ($16 >>> 0 < $14 >>> 0) {
      __label__ = 4;
      break;
    } else {
      var $__r1_0 = $16;
      var $__q1_0 = $11;
      __label__ = 6;
      break;
    }
   case 4:
    var $19 = $11 - 1 | 0;
    var $uadd3 = _llvm_uadd_with_overflow_i32($16, $d);
    var $20 = $uadd3.f0;
    var $21 = $uadd3.f1;
    if ($20 >>> 0 < $14 >>> 0 & ($21 ^ 1)) {
      __label__ = 5;
      break;
    } else {
      var $__r1_0 = $20;
      var $__q1_0 = $19;
      __label__ = 6;
      break;
    }
   case 5:
    var $__r1_0 = $20 + $d | 0;
    var $__q1_0 = $11 - 2 | 0;
    __label__ = 6;
    break;
   case 6:
    var $__q1_0;
    var $__r1_0;
    var $27 = $__r1_0 - $14 | 0;
    var $28 = Math.floor(($27 >>> 0) / ($8 >>> 0));
    var $29 = (i64Math.multiply($28, 0, $8, 0), i64Math.result[0]);
    var $30 = $27 - $29 | 0;
    var $31 = (i64Math.multiply($28, 0, $9, 0), i64Math.result[0]);
    var $33 = $30 << 16 | 65535;
    if ($33 >>> 0 < $31 >>> 0) {
      __label__ = 7;
      break;
    } else {
      var $__q0_0 = $28;
      __label__ = 8;
      break;
    }
   case 7:
    var $uadd2 = _llvm_uadd_with_overflow_i32($33, $d);
    var $36 = $uadd2.f1;
    var $37 = $uadd2.f0;
    var $_7_v = $37 >>> 0 < $31 >>> 0 & ($36 ^ 1) ? -2 : -1;
    var $__q0_0 = $_7_v + $28 | 0;
    __label__ = 8;
    break;
   case 8:
    var $__q0_0;
    var $40 = $un - 2 | 0;
    if (($40 | 0) > -1) {
      __label__ = 9;
      break;
    } else {
      var $_0 = $_;
      __label__ = 11;
      break;
    }
   case 9:
    var $44 = $__q0_0 & 65535;
    var $45 = ($__q0_0 | $__q1_0 << 16) >>> 16;
    var $r_18 = $_;
    var $i_09 = $40;
    __label__ = 10;
    break;
   case 10:
    var $i_09;
    var $r_18;
    var $48 = HEAPU32[$up + ($i_09 << 2) >> 2];
    var $49 = $r_18 & 65535;
    var $50 = $r_18 >>> 16;
    var $51 = (i64Math.multiply($49, 0, $44, 0), i64Math.result[0]);
    var $52 = (i64Math.multiply($49, 0, $45, 0), i64Math.result[0]);
    var $53 = (i64Math.multiply($50, 0, $44, 0), i64Math.result[0]);
    var $54 = (i64Math.multiply($50, 0, $45, 0), i64Math.result[0]);
    var $56 = ($51 >>> 16) + $52 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($56, $53);
    var $57 = $uadd.f0;
    var $58 = $uadd.f1;
    var $__x3_0 = $58 ? $54 + 65536 | 0 : $54;
    var $60 = $57 >>> 16;
    var $63 = $57 << 16 | $51 & 65535;
    var $uadd1 = _llvm_uadd_with_overflow_i32($63, $48);
    var $64 = $uadd1.f0;
    var $65 = $uadd1.f1;
    var $70 = $r_18 + 1 + $60 + $__x3_0 + ($65 & 1) | 0;
    var $71 = (i64Math.multiply($70, 0, $d, 0), i64Math.result[0]);
    var $72 = $48 - $71 | 0;
    var $74 = $72 >>> 0 > $64 >>> 0 ? $d : 0;
    var $_r_0 = $74 + $72 | 0;
    var $76 = $_r_0 >>> 0 < $d >>> 0 ? 0 : $d;
    var $_r_0_ = $_r_0 - $76 | 0;
    if (($i_09 | 0) > 0) {
      var $r_18 = $_r_0_;
      var $i_09 = $i_09 - 1 | 0;
      __label__ = 10;
      break;
    } else {
      var $_0 = $_r_0_;
      __label__ = 11;
      break;
    }
   case 11:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_mod_1_norm["X"] = 1;

function _mpn_mod_1_unnorm($up, $un, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $un - 1 | 0;
    var $3 = HEAPU32[$up + ($1 << 2) >> 2];
    if ($3 >>> 0 < $d >>> 0) {
      __label__ = 3;
      break;
    } else {
      var $_01 = $un;
      var $r_0 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    if (($1 | 0) == 0) {
      var $_0 = $3;
      __label__ = 15;
      break;
    } else {
      var $_01 = $1;
      var $r_0 = $3;
      __label__ = 4;
      break;
    }
   case 4:
    var $r_0;
    var $_01;
    if ($d >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $11 = $d >>> 0 < 256 ? 1 : 9;
    var $16 = $11;
    __label__ = 7;
    break;
   case 6:
    var $14 = $d >>> 0 < 16777216 ? 17 : 25;
    var $16 = $14;
    __label__ = 7;
    break;
   case 7:
    var $16;
    var $19 = STRING_TABLE.___gmpn_clz_tab + ($d >>> ($16 >>> 0)) | 0;
    var $22 = 33 - $16 - (HEAPU8[$19] & 255) | 0;
    var $23 = $d << $22;
    var $26 = HEAPU32[$up + ($_01 - 1 << 2) >> 2];
    var $28 = 32 - $22 | 0;
    var $30 = $26 >>> ($28 >>> 0) | $r_0 << $22;
    var $31 = $23 >>> 16;
    var $32 = $23 & 65535;
    var $33 = $23 ^ -1;
    var $34 = Math.floor(($33 >>> 0) / ($31 >>> 0));
    var $35 = (i64Math.multiply($31, 0, $34, 0), i64Math.result[0]);
    var $36 = $33 - $35 | 0;
    var $37 = (i64Math.multiply($32, 0, $34, 0), i64Math.result[0]);
    var $39 = $36 << 16 | 65535;
    if ($39 >>> 0 < $37 >>> 0) {
      __label__ = 8;
      break;
    } else {
      var $__q1_0 = $34;
      var $__r1_0 = $39;
      __label__ = 10;
      break;
    }
   case 8:
    var $42 = $34 - 1 | 0;
    var $uadd6 = _llvm_uadd_with_overflow_i32($39, $23);
    var $43 = $uadd6.f0;
    var $44 = $uadd6.f1;
    if ($43 >>> 0 < $37 >>> 0 & ($44 ^ 1)) {
      __label__ = 9;
      break;
    } else {
      var $__q1_0 = $42;
      var $__r1_0 = $43;
      __label__ = 10;
      break;
    }
   case 9:
    var $__q1_0 = $34 - 2 | 0;
    var $__r1_0 = $43 + $23 | 0;
    __label__ = 10;
    break;
   case 10:
    var $__r1_0;
    var $__q1_0;
    var $50 = $__r1_0 - $37 | 0;
    var $51 = Math.floor(($50 >>> 0) / ($31 >>> 0));
    var $52 = (i64Math.multiply($51, 0, $31, 0), i64Math.result[0]);
    var $53 = $50 - $52 | 0;
    var $54 = (i64Math.multiply($51, 0, $32, 0), i64Math.result[0]);
    var $56 = $53 << 16 | 65535;
    if ($56 >>> 0 < $54 >>> 0) {
      __label__ = 11;
      break;
    } else {
      var $__q0_0 = $51;
      __label__ = 12;
      break;
    }
   case 11:
    var $uadd5 = _llvm_uadd_with_overflow_i32($56, $23);
    var $59 = $uadd5.f1;
    var $60 = $uadd5.f0;
    var $__v = $60 >>> 0 < $54 >>> 0 & ($59 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $51 | 0;
    __label__ = 12;
    break;
   case 12:
    var $__q0_0;
    var $65 = $_01 - 2 | 0;
    var $67 = $__q0_0 & 65535;
    var $68 = ($__q0_0 | $__q1_0 << 16) >>> 16;
    if (($65 | 0) > -1) {
      var $r_110 = $30;
      var $n1_011 = $26;
      var $i_012 = $65;
      __label__ = 13;
      break;
    } else {
      var $r_1_lcssa = $30;
      var $n1_0_lcssa = $26;
      var $_pre_phi = $67;
      var $_pre_phi2 = $68;
      __label__ = 14;
      break;
    }
   case 13:
    var $i_012;
    var $n1_011;
    var $r_110;
    var $70 = HEAPU32[$up + ($i_012 << 2) >> 2];
    var $71 = $r_110 & 65535;
    var $72 = $r_110 >>> 16;
    var $73 = (i64Math.multiply($71, 0, $67, 0), i64Math.result[0]);
    var $74 = (i64Math.multiply($71, 0, $68, 0), i64Math.result[0]);
    var $75 = (i64Math.multiply($72, 0, $67, 0), i64Math.result[0]);
    var $76 = (i64Math.multiply($72, 0, $68, 0), i64Math.result[0]);
    var $78 = ($73 >>> 16) + $74 | 0;
    var $uadd3 = _llvm_uadd_with_overflow_i32($78, $75);
    var $79 = $uadd3.f0;
    var $80 = $uadd3.f1;
    var $__x3_0 = $80 ? $76 + 65536 | 0 : $76;
    var $82 = $79 >>> 16;
    var $85 = $79 << 16 | $73 & 65535;
    var $88 = $70 >>> ($28 >>> 0) | $n1_011 << $22;
    var $uadd4 = _llvm_uadd_with_overflow_i32($85, $88);
    var $89 = $uadd4.f0;
    var $90 = $uadd4.f1;
    var $95 = $r_110 + 1 + $82 + $__x3_0 + ($90 & 1) | 0;
    var $96 = (i64Math.multiply($95, 0, $23, 0), i64Math.result[0]);
    var $97 = $88 - $96 | 0;
    var $99 = $97 >>> 0 > $89 >>> 0 ? $23 : 0;
    var $_r_0 = $99 + $97 | 0;
    var $101 = $_r_0 >>> 0 < $23 >>> 0 ? 0 : $23;
    var $_r_0_ = $_r_0 - $101 | 0;
    if (($i_012 | 0) > 0) {
      var $r_110 = $_r_0_;
      var $n1_011 = $70;
      var $i_012 = $i_012 - 1 | 0;
      __label__ = 13;
      break;
    } else {
      var $r_1_lcssa = $_r_0_;
      var $n1_0_lcssa = $70;
      var $_pre_phi = $67;
      var $_pre_phi2 = $68;
      __label__ = 14;
      break;
    }
   case 14:
    var $_pre_phi2;
    var $_pre_phi;
    var $n1_0_lcssa;
    var $r_1_lcssa;
    var $104 = $r_1_lcssa & 65535;
    var $105 = $r_1_lcssa >>> 16;
    var $106 = (i64Math.multiply($104, 0, $_pre_phi, 0), i64Math.result[0]);
    var $107 = (i64Math.multiply($104, 0, $_pre_phi2, 0), i64Math.result[0]);
    var $108 = (i64Math.multiply($105, 0, $_pre_phi, 0), i64Math.result[0]);
    var $109 = (i64Math.multiply($105, 0, $_pre_phi2, 0), i64Math.result[0]);
    var $111 = ($106 >>> 16) + $107 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($111, $108);
    var $112 = $uadd.f0;
    var $113 = $uadd.f1;
    var $__x38_0 = $113 ? $109 + 65536 | 0 : $109;
    var $115 = $112 >>> 16;
    var $118 = $112 << 16 | $106 & 65535;
    var $119 = $n1_0_lcssa << $22;
    var $uadd2 = _llvm_uadd_with_overflow_i32($118, $119);
    var $120 = $uadd2.f0;
    var $121 = $uadd2.f1;
    var $126 = $r_1_lcssa + 1 + $115 + $__x38_0 + ($121 & 1) | 0;
    var $127 = (i64Math.multiply($126, 0, $23, 0), i64Math.result[0]);
    var $128 = $119 - $127 | 0;
    var $130 = $128 >>> 0 > $120 >>> 0 ? $23 : 0;
    var $_r4_0 = $130 + $128 | 0;
    var $132 = $_r4_0 >>> 0 < $23 >>> 0 ? 0 : $23;
    var $_0 = ($_r4_0 - $132 | 0) >>> ($22 >>> 0);
    __label__ = 15;
    break;
   case 15:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_mod_1_unnorm["X"] = 1;

function ___gmpn_mod_1_1p_cps($cps, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($b >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = $b >>> 0 < 256 ? 1 : 9;
    var $9 = $4;
    __label__ = 5;
    break;
   case 4:
    var $7 = $b >>> 0 < 16777216 ? 17 : 25;
    var $9 = $7;
    __label__ = 5;
    break;
   case 5:
    var $9;
    var $10 = 33 - $9 | 0;
    var $12 = STRING_TABLE.___gmpn_clz_tab + ($b >>> ($9 >>> 0)) | 0;
    var $14 = HEAPU8[$12] & 255;
    var $15 = $10 - $14 | 0;
    var $16 = $b << $15;
    var $17 = $16 >>> 16;
    var $18 = $16 & 65535;
    var $19 = $16 ^ -1;
    var $20 = Math.floor(($19 >>> 0) / ($17 >>> 0));
    var $21 = (i64Math.multiply($17, 0, $20, 0), i64Math.result[0]);
    var $22 = $19 - $21 | 0;
    var $23 = (i64Math.multiply($18, 0, $20, 0), i64Math.result[0]);
    var $25 = $22 << 16 | 65535;
    if ($25 >>> 0 < $23 >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $__r1_0 = $25;
      var $__q1_0 = $20;
      __label__ = 8;
      break;
    }
   case 6:
    var $28 = $20 - 1 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($25, $16);
    var $29 = $uadd2.f0;
    var $30 = $uadd2.f1;
    if ($29 >>> 0 < $23 >>> 0 & ($30 ^ 1)) {
      __label__ = 7;
      break;
    } else {
      var $__r1_0 = $29;
      var $__q1_0 = $28;
      __label__ = 8;
      break;
    }
   case 7:
    var $__r1_0 = $29 + $16 | 0;
    var $__q1_0 = $20 - 2 | 0;
    __label__ = 8;
    break;
   case 8:
    var $__q1_0;
    var $__r1_0;
    var $36 = $__r1_0 - $23 | 0;
    var $37 = Math.floor(($36 >>> 0) / ($17 >>> 0));
    var $38 = (i64Math.multiply($37, 0, $17, 0), i64Math.result[0]);
    var $39 = $36 - $38 | 0;
    var $40 = (i64Math.multiply($37, 0, $18, 0), i64Math.result[0]);
    var $42 = $39 << 16 | 65535;
    if ($42 >>> 0 < $40 >>> 0) {
      __label__ = 9;
      break;
    } else {
      var $__q0_0 = $37;
      __label__ = 10;
      break;
    }
   case 9:
    var $uadd1 = _llvm_uadd_with_overflow_i32($42, $16);
    var $45 = $uadd1.f1;
    var $46 = $uadd1.f0;
    var $__v = $46 >>> 0 < $40 >>> 0 & ($45 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $37 | 0;
    __label__ = 10;
    break;
   case 10:
    var $__q0_0;
    var $50 = $__q0_0 | $__q1_0 << 16;
    var $52 = -$16 | 0;
    if (($10 | 0) == ($14 | 0)) {
      var $B1modb_0 = $52;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $57 = $50 >>> ((32 - $15 | 0) >>> 0) | 1 << $15;
    var $58 = (i64Math.multiply($57, 0, $52, 0), i64Math.result[0]);
    var $B1modb_0 = $58;
    __label__ = 12;
    break;
   case 12:
    var $B1modb_0;
    var $60 = $B1modb_0 & 65535;
    var $61 = $B1modb_0 >>> 16;
    var $62 = $__q0_0 & 65535;
    var $63 = $50 >>> 16;
    var $64 = (i64Math.multiply($60, 0, $62, 0), i64Math.result[0]);
    var $65 = (i64Math.multiply($60, 0, $63, 0), i64Math.result[0]);
    var $66 = (i64Math.multiply($61, 0, $62, 0), i64Math.result[0]);
    var $67 = (i64Math.multiply($61, 0, $63, 0), i64Math.result[0]);
    var $69 = ($64 >>> 16) + $65 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($69, $66);
    var $70 = $uadd.f0;
    var $71 = $uadd.f1;
    var $__x3_0 = $71 ? $67 + 65536 | 0 : $67;
    var $77 = $70 << 16 | $64 & 65535;
    var $79 = $__x3_0 + ($70 >>> 16) + ($B1modb_0 + 1) | 0;
    var $80 = (i64Math.multiply($79, 0, $52, 0), i64Math.result[0]);
    var $82 = $80 >>> 0 > $77 >>> 0 ? $16 : 0;
    var $_r_0 = $82 + $80 | 0;
    HEAP32[$cps >> 2] = $50;
    HEAP32[$cps + 4 >> 2] = $15;
    HEAP32[$cps + 8 >> 2] = $B1modb_0 >>> ($15 >>> 0);
    HEAP32[$cps + 12 >> 2] = $_r_0 >>> ($15 >>> 0);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_1_1p_cps["X"] = 1;

function ___gmpn_mod_1_1p($ap, $n, $b, $bmodb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$bmodb + 8 >> 2];
    var $4 = HEAPU32[$bmodb + 12 >> 2];
    var $7 = HEAPU32[$ap + ($n - 1 << 2) >> 2];
    var $8 = $7 & 65535;
    var $9 = $7 >>> 16;
    var $10 = $2 & 65535;
    var $11 = $2 >>> 16;
    var $12 = (i64Math.multiply($8, 0, $10, 0), i64Math.result[0]);
    var $13 = (i64Math.multiply($8, 0, $11, 0), i64Math.result[0]);
    var $14 = (i64Math.multiply($9, 0, $10, 0), i64Math.result[0]);
    var $15 = (i64Math.multiply($9, 0, $11, 0), i64Math.result[0]);
    var $17 = ($12 >>> 16) + $13 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($17, $14);
    var $18 = $uadd.f0;
    var $19 = $uadd.f1;
    var $__x3_0 = $19 ? $15 + 65536 | 0 : $15;
    var $21 = $18 >>> 16;
    var $24 = $18 << 16 | $12 & 65535;
    var $27 = HEAP32[$ap + ($n - 2 << 2) >> 2];
    var $uadd1 = _llvm_uadd_with_overflow_i32($24, $27);
    var $28 = $uadd1.f0;
    var $29 = $uadd1.f1;
    var $32 = $__x3_0 + $21 + ($29 & 1) | 0;
    var $33 = $n - 3 | 0;
    if (($33 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      var $rl_0_lcssa = $28;
      var $rh_0_lcssa = $32;
      __label__ = 5;
      break;
    }
   case 3:
    var $35 = $4 & 65535;
    var $36 = $4 >>> 16;
    var $i_08 = $33;
    var $rl_09 = $28;
    var $rh_010 = $32;
    __label__ = 4;
    break;
   case 4:
    var $rh_010;
    var $rl_09;
    var $i_08;
    var $38 = $rl_09 & 65535;
    var $39 = $rl_09 >>> 16;
    var $40 = (i64Math.multiply($38, 0, $10, 0), i64Math.result[0]);
    var $41 = (i64Math.multiply($38, 0, $11, 0), i64Math.result[0]);
    var $42 = (i64Math.multiply($39, 0, $10, 0), i64Math.result[0]);
    var $43 = (i64Math.multiply($39, 0, $11, 0), i64Math.result[0]);
    var $45 = ($40 >>> 16) + $41 | 0;
    var $uadd4 = _llvm_uadd_with_overflow_i32($45, $42);
    var $46 = $uadd4.f0;
    var $47 = $uadd4.f1;
    var $__x34_0 = $47 ? $43 + 65536 | 0 : $43;
    var $49 = $46 >>> 16;
    var $52 = $46 << 16 | $40 & 65535;
    var $54 = HEAP32[$ap + ($i_08 << 2) >> 2];
    var $uadd5 = _llvm_uadd_with_overflow_i32($52, $54);
    var $55 = $uadd5.f0;
    var $56 = $uadd5.f1;
    var $57 = $56 & 1;
    var $58 = $rh_010 & 65535;
    var $59 = $rh_010 >>> 16;
    var $60 = (i64Math.multiply($58, 0, $35, 0), i64Math.result[0]);
    var $61 = (i64Math.multiply($58, 0, $36, 0), i64Math.result[0]);
    var $62 = (i64Math.multiply($59, 0, $35, 0), i64Math.result[0]);
    var $63 = (i64Math.multiply($59, 0, $36, 0), i64Math.result[0]);
    var $65 = ($60 >>> 16) + $61 | 0;
    var $uadd6 = _llvm_uadd_with_overflow_i32($65, $62);
    var $66 = $uadd6.f0;
    var $67 = $uadd6.f1;
    var $__x315_0 = $67 ? $63 + 65536 | 0 : $63;
    var $69 = $66 >>> 16;
    var $72 = $66 << 16 | $60 & 65535;
    var $uadd7 = _llvm_uadd_with_overflow_i32($72, $55);
    var $73 = $uadd7.f0;
    var $74 = $uadd7.f1;
    var $80 = $49 + $__x34_0 + $57 + $69 + $__x315_0 + ($74 & 1) | 0;
    if (($i_08 | 0) > 0) {
      var $i_08 = $i_08 - 1 | 0;
      var $rl_09 = $73;
      var $rh_010 = $80;
      __label__ = 4;
      break;
    } else {
      var $rl_0_lcssa = $73;
      var $rh_0_lcssa = $80;
      __label__ = 5;
      break;
    }
   case 5:
    var $rh_0_lcssa;
    var $rl_0_lcssa;
    var $83 = HEAPU32[$bmodb >> 2];
    var $85 = HEAPU32[$bmodb + 4 >> 2];
    if (($85 | 0) == 0) {
      var $rh_1 = $rh_0_lcssa;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $rh_1 = $rl_0_lcssa >>> ((32 - $85 | 0) >>> 0) | $rh_0_lcssa << $85;
    __label__ = 7;
    break;
   case 7:
    var $rh_1;
    var $96 = $rh_1 - (($rh_1 >>> 0 >= $b >>> 0) << 31 >> 31 & $b) | 0;
    var $97 = $96 & 65535;
    var $98 = $96 >>> 16;
    var $99 = $83 & 65535;
    var $100 = $83 >>> 16;
    var $101 = (i64Math.multiply($97, 0, $99, 0), i64Math.result[0]);
    var $102 = (i64Math.multiply($97, 0, $100, 0), i64Math.result[0]);
    var $103 = (i64Math.multiply($98, 0, $99, 0), i64Math.result[0]);
    var $104 = (i64Math.multiply($98, 0, $100, 0), i64Math.result[0]);
    var $106 = ($101 >>> 16) + $102 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($106, $103);
    var $107 = $uadd2.f0;
    var $108 = $uadd2.f1;
    var $__x326_0 = $108 ? $104 + 65536 | 0 : $104;
    var $110 = $107 >>> 16;
    var $113 = $101 & 65535 | $107 << 16;
    var $114 = $rl_0_lcssa << $85;
    var $uadd3 = _llvm_uadd_with_overflow_i32($113, $114);
    var $115 = $uadd3.f0;
    var $116 = $uadd3.f1;
    var $121 = $110 + 1 + ($116 & 1) + $96 + $__x326_0 | 0;
    var $122 = (i64Math.multiply($121, 0, $b, 0), i64Math.result[0]);
    var $123 = $114 - $122 | 0;
    var $125 = $123 >>> 0 > $115 >>> 0 ? $b : 0;
    var $_r_0 = $125 + $123 | 0;
    var $127 = $_r_0 >>> 0 < $b >>> 0 ? 0 : $b;
    return ($_r_0 - $127 | 0) >>> ($85 >>> 0);
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_1_1p["X"] = 1;

function ___gmpn_mod_1s_2p_cps($cps, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($b >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = $b >>> 0 < 256 ? 1 : 9;
    var $9 = $4;
    __label__ = 5;
    break;
   case 4:
    var $7 = $b >>> 0 < 16777216 ? 17 : 25;
    var $9 = $7;
    __label__ = 5;
    break;
   case 5:
    var $9;
    var $12 = STRING_TABLE.___gmpn_clz_tab + ($b >>> ($9 >>> 0)) | 0;
    var $15 = 33 - $9 - (HEAPU8[$12] & 255) | 0;
    var $16 = $b << $15;
    var $17 = $16 >>> 16;
    var $18 = $16 & 65535;
    var $19 = $16 ^ -1;
    var $20 = Math.floor(($19 >>> 0) / ($17 >>> 0));
    var $21 = (i64Math.multiply($17, 0, $20, 0), i64Math.result[0]);
    var $22 = $19 - $21 | 0;
    var $23 = (i64Math.multiply($18, 0, $20, 0), i64Math.result[0]);
    var $25 = $22 << 16 | 65535;
    if ($25 >>> 0 < $23 >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $__r1_0 = $25;
      var $__q1_0 = $20;
      __label__ = 8;
      break;
    }
   case 6:
    var $28 = $20 - 1 | 0;
    var $uadd3 = _llvm_uadd_with_overflow_i32($25, $16);
    var $29 = $uadd3.f0;
    var $30 = $uadd3.f1;
    if ($29 >>> 0 < $23 >>> 0 & ($30 ^ 1)) {
      __label__ = 7;
      break;
    } else {
      var $__r1_0 = $29;
      var $__q1_0 = $28;
      __label__ = 8;
      break;
    }
   case 7:
    var $__r1_0 = $29 + $16 | 0;
    var $__q1_0 = $20 - 2 | 0;
    __label__ = 8;
    break;
   case 8:
    var $__q1_0;
    var $__r1_0;
    var $36 = $__r1_0 - $23 | 0;
    var $37 = Math.floor(($36 >>> 0) / ($17 >>> 0));
    var $38 = (i64Math.multiply($37, 0, $17, 0), i64Math.result[0]);
    var $39 = $36 - $38 | 0;
    var $40 = (i64Math.multiply($37, 0, $18, 0), i64Math.result[0]);
    var $42 = $39 << 16 | 65535;
    if ($42 >>> 0 < $40 >>> 0) {
      __label__ = 9;
      break;
    } else {
      var $__q0_0 = $37;
      __label__ = 10;
      break;
    }
   case 9:
    var $uadd2 = _llvm_uadd_with_overflow_i32($42, $16);
    var $45 = $uadd2.f1;
    var $46 = $uadd2.f0;
    var $__v = $46 >>> 0 < $40 >>> 0 & ($45 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $37 | 0;
    __label__ = 10;
    break;
   case 10:
    var $__q0_0;
    var $50 = $__q0_0 | $__q1_0 << 16;
    var $54 = $50 >>> ((32 - $15 | 0) >>> 0) | 1 << $15;
    var $55 = -$16 | 0;
    var $56 = (i64Math.multiply($54, 0, $55, 0), i64Math.result[0]);
    var $57 = $56 & 65535;
    var $58 = $56 >>> 16;
    var $59 = $__q0_0 & 65535;
    var $60 = $50 >>> 16;
    var $61 = (i64Math.multiply($57, 0, $59, 0), i64Math.result[0]);
    var $62 = (i64Math.multiply($57, 0, $60, 0), i64Math.result[0]);
    var $63 = (i64Math.multiply($58, 0, $59, 0), i64Math.result[0]);
    var $64 = (i64Math.multiply($58, 0, $60, 0), i64Math.result[0]);
    var $66 = ($61 >>> 16) + $62 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($66, $63);
    var $67 = $uadd.f0;
    var $68 = $uadd.f1;
    var $__x3_0 = $68 ? $64 + 65536 | 0 : $64;
    var $74 = $61 & 65535 | $67 << 16;
    var $76 = $__x3_0 + ($67 >>> 16) + ($56 + 1) | 0;
    var $77 = (i64Math.multiply($76, 0, $55, 0), i64Math.result[0]);
    var $79 = $77 >>> 0 > $74 >>> 0 ? $16 : 0;
    var $_r_0 = $79 + $77 | 0;
    var $80 = $_r_0 & 65535;
    var $81 = $_r_0 >>> 16;
    var $82 = (i64Math.multiply($80, 0, $59, 0), i64Math.result[0]);
    var $83 = (i64Math.multiply($80, 0, $60, 0), i64Math.result[0]);
    var $84 = (i64Math.multiply($81, 0, $59, 0), i64Math.result[0]);
    var $85 = (i64Math.multiply($81, 0, $60, 0), i64Math.result[0]);
    var $87 = ($82 >>> 16) + $83 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($87, $84);
    var $88 = $uadd1.f0;
    var $89 = $uadd1.f1;
    var $__x37_0 = $89 ? $85 + 65536 | 0 : $85;
    var $95 = $82 & 65535 | $88 << 16;
    var $97 = $__x37_0 + ($88 >>> 16) + ($_r_0 + 1) | 0;
    var $98 = (i64Math.multiply($97, 0, $55, 0), i64Math.result[0]);
    var $100 = $98 >>> 0 > $95 >>> 0 ? $16 : 0;
    var $_r3_0 = $100 + $98 | 0;
    HEAP32[$cps >> 2] = $50;
    HEAP32[$cps + 4 >> 2] = $15;
    HEAP32[$cps + 8 >> 2] = $56 >>> ($15 >>> 0);
    HEAP32[$cps + 12 >> 2] = $_r_0 >>> ($15 >>> 0);
    HEAP32[$cps + 16 >> 2] = $_r3_0 >>> ($15 >>> 0);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_1s_2p_cps["X"] = 1;

function ___gmpn_mod_1s_2p($ap, $n, $b, $cps) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$cps + 8 >> 2];
    var $4 = HEAPU32[$cps + 12 >> 2];
    var $6 = HEAPU32[$cps + 16 >> 2];
    if (($n & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($n | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $12 = HEAPU32[$ap >> 2];
    var $13 = HEAPU32[$cps >> 2];
    var $15 = HEAPU32[$cps + 4 >> 2];
    var $17 = $12 >>> ((32 - $15 | 0) >>> 0);
    var $18 = $17 & 65535;
    var $19 = $17 >>> 16;
    var $20 = $13 & 65535;
    var $21 = $13 >>> 16;
    var $22 = (i64Math.multiply($18, 0, $20, 0), i64Math.result[0]);
    var $23 = (i64Math.multiply($18, 0, $21, 0), i64Math.result[0]);
    var $24 = (i64Math.multiply($19, 0, $20, 0), i64Math.result[0]);
    var $25 = (i64Math.multiply($19, 0, $21, 0), i64Math.result[0]);
    var $27 = ($22 >>> 16) + $23 | 0;
    var $uadd17 = _llvm_uadd_with_overflow_i32($27, $24);
    var $28 = $uadd17.f0;
    var $29 = $uadd17.f1;
    var $__x3_0 = $29 ? $25 + 65536 | 0 : $25;
    var $31 = $28 >>> 16;
    var $34 = $22 & 65535 | $28 << 16;
    var $35 = $12 << $15;
    var $uadd18 = _llvm_uadd_with_overflow_i32($34, $35);
    var $36 = $uadd18.f0;
    var $37 = $uadd18.f1;
    var $42 = $17 + 1 + $31 + ($37 & 1) + $__x3_0 | 0;
    var $43 = (i64Math.multiply($42, 0, $b, 0), i64Math.result[0]);
    var $44 = $35 - $43 | 0;
    var $46 = $44 >>> 0 > $36 >>> 0 ? $b : 0;
    var $_r_0 = $46 + $44 | 0;
    var $48 = $_r_0 >>> 0 < $b >>> 0 ? 0 : $b;
    var $_0 = ($_r_0 - $48 | 0) >>> ($15 >>> 0);
    __label__ = 11;
    break;
   case 5:
    var $53 = HEAPU32[$ap + ($n - 2 << 2) >> 2];
    var $54 = $53 & 65535;
    var $55 = $53 >>> 16;
    var $56 = $2 & 65535;
    var $57 = $2 >>> 16;
    var $58 = (i64Math.multiply($54, 0, $56, 0), i64Math.result[0]);
    var $59 = (i64Math.multiply($54, 0, $57, 0), i64Math.result[0]);
    var $60 = (i64Math.multiply($55, 0, $56, 0), i64Math.result[0]);
    var $61 = (i64Math.multiply($55, 0, $57, 0), i64Math.result[0]);
    var $63 = ($58 >>> 16) + $59 | 0;
    var $uadd13 = _llvm_uadd_with_overflow_i32($63, $60);
    var $64 = $uadd13.f0;
    var $65 = $uadd13.f1;
    var $__x34_0 = $65 ? $61 + 65536 | 0 : $61;
    var $67 = $64 >>> 16;
    var $70 = $64 << 16 | $58 & 65535;
    var $73 = HEAP32[$ap + ($n - 3 << 2) >> 2];
    var $uadd14 = _llvm_uadd_with_overflow_i32($70, $73);
    var $74 = $uadd14.f0;
    var $75 = $uadd14.f1;
    var $76 = $75 & 1;
    var $77 = $n - 1 | 0;
    var $79 = HEAPU32[$ap + ($77 << 2) >> 2];
    var $80 = $79 & 65535;
    var $81 = $79 >>> 16;
    var $82 = $4 & 65535;
    var $83 = $4 >>> 16;
    var $84 = (i64Math.multiply($80, 0, $82, 0), i64Math.result[0]);
    var $85 = (i64Math.multiply($80, 0, $83, 0), i64Math.result[0]);
    var $86 = (i64Math.multiply($81, 0, $82, 0), i64Math.result[0]);
    var $87 = (i64Math.multiply($81, 0, $83, 0), i64Math.result[0]);
    var $89 = ($84 >>> 16) + $85 | 0;
    var $uadd15 = _llvm_uadd_with_overflow_i32($89, $86);
    var $90 = $uadd15.f0;
    var $91 = $uadd15.f1;
    var $__x315_0 = $91 ? $87 + 65536 | 0 : $87;
    var $93 = $90 >>> 16;
    var $96 = $90 << 16 | $84 & 65535;
    var $uadd16 = _llvm_uadd_with_overflow_i32($96, $74);
    var $97 = $uadd16.f0;
    var $98 = $uadd16.f1;
    var $_01 = $77;
    var $rh_0 = $__x34_0 + $67 + $76 + $93 + ($98 & 1) + $__x315_0 | 0;
    var $rl_0 = $97;
    __label__ = 7;
    break;
   case 6:
    var $108 = HEAPU32[$ap + ($n - 1 << 2) >> 2];
    var $109 = $108 & 65535;
    var $110 = $108 >>> 16;
    var $111 = $2 & 65535;
    var $112 = $2 >>> 16;
    var $113 = (i64Math.multiply($109, 0, $111, 0), i64Math.result[0]);
    var $114 = (i64Math.multiply($109, 0, $112, 0), i64Math.result[0]);
    var $115 = (i64Math.multiply($110, 0, $111, 0), i64Math.result[0]);
    var $116 = (i64Math.multiply($110, 0, $112, 0), i64Math.result[0]);
    var $118 = ($113 >>> 16) + $114 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($118, $115);
    var $119 = $uadd.f0;
    var $120 = $uadd.f1;
    var $__x326_0 = $120 ? $116 + 65536 | 0 : $116;
    var $122 = $119 >>> 16;
    var $125 = $119 << 16 | $113 & 65535;
    var $128 = HEAP32[$ap + ($n - 2 << 2) >> 2];
    var $uadd2 = _llvm_uadd_with_overflow_i32($125, $128);
    var $129 = $uadd2.f0;
    var $130 = $uadd2.f1;
    var $_01 = $n;
    var $rh_0 = $__x326_0 + $122 + ($130 & 1) | 0;
    var $rl_0 = $129;
    __label__ = 7;
    break;
   case 7:
    var $rl_0;
    var $rh_0;
    var $_01;
    var $135 = $_01 - 4 | 0;
    var $137 = $2 & 65535;
    var $138 = $2 >>> 16;
    if (($135 | 0) > -1) {
      __label__ = 8;
      break;
    } else {
      var $rl_1_lcssa = $rl_0;
      var $rh_1_lcssa = $rh_0;
      var $_pre_phi = $137;
      var $_pre_phi2 = $138;
      __label__ = 10;
      break;
    }
   case 8:
    var $139 = $4 & 65535;
    var $140 = $4 >>> 16;
    var $141 = $6 & 65535;
    var $142 = $6 >>> 16;
    var $i_019 = $135;
    var $rl_120 = $rl_0;
    var $rh_121 = $rh_0;
    __label__ = 9;
    break;
   case 9:
    var $rh_121;
    var $rl_120;
    var $i_019;
    var $146 = HEAPU32[$ap + ($i_019 + 1 << 2) >> 2];
    var $147 = $146 & 65535;
    var $148 = $146 >>> 16;
    var $149 = (i64Math.multiply($147, 0, $137, 0), i64Math.result[0]);
    var $150 = (i64Math.multiply($147, 0, $138, 0), i64Math.result[0]);
    var $151 = (i64Math.multiply($148, 0, $137, 0), i64Math.result[0]);
    var $152 = (i64Math.multiply($148, 0, $138, 0), i64Math.result[0]);
    var $154 = ($149 >>> 16) + $150 | 0;
    var $uadd7 = _llvm_uadd_with_overflow_i32($154, $151);
    var $155 = $uadd7.f0;
    var $156 = $uadd7.f1;
    var $__x337_0 = $156 ? $152 + 65536 | 0 : $152;
    var $158 = $155 >>> 16;
    var $161 = $155 << 16 | $149 & 65535;
    var $163 = HEAP32[$ap + ($i_019 << 2) >> 2];
    var $uadd8 = _llvm_uadd_with_overflow_i32($161, $163);
    var $164 = $uadd8.f0;
    var $165 = $uadd8.f1;
    var $166 = $165 & 1;
    var $167 = $rl_120 & 65535;
    var $168 = $rl_120 >>> 16;
    var $169 = (i64Math.multiply($167, 0, $139, 0), i64Math.result[0]);
    var $170 = (i64Math.multiply($167, 0, $140, 0), i64Math.result[0]);
    var $171 = (i64Math.multiply($168, 0, $139, 0), i64Math.result[0]);
    var $172 = (i64Math.multiply($168, 0, $140, 0), i64Math.result[0]);
    var $174 = ($169 >>> 16) + $170 | 0;
    var $uadd9 = _llvm_uadd_with_overflow_i32($174, $171);
    var $175 = $uadd9.f0;
    var $176 = $uadd9.f1;
    var $__x348_0 = $176 ? $172 + 65536 | 0 : $172;
    var $178 = $175 >>> 16;
    var $181 = $175 << 16 | $169 & 65535;
    var $uadd10 = _llvm_uadd_with_overflow_i32($164, $181);
    var $182 = $uadd10.f0;
    var $183 = $uadd10.f1;
    var $184 = $183 & 1;
    var $185 = $rh_121 & 65535;
    var $186 = $rh_121 >>> 16;
    var $187 = (i64Math.multiply($185, 0, $141, 0), i64Math.result[0]);
    var $188 = (i64Math.multiply($185, 0, $142, 0), i64Math.result[0]);
    var $189 = (i64Math.multiply($186, 0, $141, 0), i64Math.result[0]);
    var $190 = (i64Math.multiply($186, 0, $142, 0), i64Math.result[0]);
    var $192 = ($187 >>> 16) + $188 | 0;
    var $uadd11 = _llvm_uadd_with_overflow_i32($192, $189);
    var $193 = $uadd11.f0;
    var $194 = $uadd11.f1;
    var $__x359_0 = $194 ? $190 + 65536 | 0 : $190;
    var $196 = $193 >>> 16;
    var $199 = $193 << 16 | $187 & 65535;
    var $uadd12 = _llvm_uadd_with_overflow_i32($199, $182);
    var $200 = $uadd12.f0;
    var $201 = $uadd12.f1;
    var $210 = $__x337_0 + $158 + $166 + $__x348_0 + $178 + $184 + $196 + $__x359_0 + ($201 & 1) | 0;
    var $211 = $i_019 - 2 | 0;
    if (($211 | 0) > -1) {
      var $i_019 = $211;
      var $rl_120 = $200;
      var $rh_121 = $210;
      __label__ = 9;
      break;
    } else {
      var $rl_1_lcssa = $200;
      var $rh_1_lcssa = $210;
      var $_pre_phi = $137;
      var $_pre_phi2 = $138;
      __label__ = 10;
      break;
    }
   case 10:
    var $_pre_phi2;
    var $_pre_phi;
    var $rh_1_lcssa;
    var $rl_1_lcssa;
    var $213 = HEAPU32[$cps >> 2];
    var $215 = HEAPU32[$cps + 4 >> 2];
    var $216 = $rh_1_lcssa & 65535;
    var $217 = $rh_1_lcssa >>> 16;
    var $218 = (i64Math.multiply($216, 0, $_pre_phi, 0), i64Math.result[0]);
    var $219 = (i64Math.multiply($216, 0, $_pre_phi2, 0), i64Math.result[0]);
    var $220 = (i64Math.multiply($217, 0, $_pre_phi, 0), i64Math.result[0]);
    var $221 = (i64Math.multiply($217, 0, $_pre_phi2, 0), i64Math.result[0]);
    var $223 = ($218 >>> 16) + $219 | 0;
    var $uadd3 = _llvm_uadd_with_overflow_i32($223, $220);
    var $224 = $uadd3.f0;
    var $225 = $uadd3.f1;
    var $__x370_0 = $225 ? $221 + 65536 | 0 : $221;
    var $227 = $224 >>> 16;
    var $230 = $224 << 16 | $218 & 65535;
    var $uadd4 = _llvm_uadd_with_overflow_i32($rl_1_lcssa, $230);
    var $231 = $uadd4.f0;
    var $232 = $uadd4.f1;
    var $239 = $__x370_0 + $227 + ($232 & 1) << $215 | $231 >>> ((32 - $215 | 0) >>> 0);
    var $240 = $239 & 65535;
    var $241 = $239 >>> 16;
    var $242 = $213 & 65535;
    var $243 = $213 >>> 16;
    var $244 = (i64Math.multiply($240, 0, $242, 0), i64Math.result[0]);
    var $245 = (i64Math.multiply($240, 0, $243, 0), i64Math.result[0]);
    var $246 = (i64Math.multiply($241, 0, $242, 0), i64Math.result[0]);
    var $247 = (i64Math.multiply($241, 0, $243, 0), i64Math.result[0]);
    var $249 = ($244 >>> 16) + $245 | 0;
    var $uadd5 = _llvm_uadd_with_overflow_i32($249, $246);
    var $250 = $uadd5.f0;
    var $251 = $uadd5.f1;
    var $__x384_0 = $251 ? $247 + 65536 | 0 : $247;
    var $253 = $250 >>> 16;
    var $256 = $244 & 65535 | $250 << 16;
    var $257 = $231 << $215;
    var $uadd6 = _llvm_uadd_with_overflow_i32($256, $257);
    var $258 = $uadd6.f0;
    var $259 = $uadd6.f1;
    var $264 = $253 + 1 + ($259 & 1) + $239 + $__x384_0 | 0;
    var $265 = (i64Math.multiply($264, 0, $b, 0), i64Math.result[0]);
    var $266 = $257 - $265 | 0;
    var $268 = $266 >>> 0 > $258 >>> 0 ? $b : 0;
    var $_r80_0 = $268 + $266 | 0;
    var $270 = $_r80_0 >>> 0 < $b >>> 0 ? 0 : $b;
    var $_0 = ($_r80_0 - $270 | 0) >>> ($215 >>> 0);
    __label__ = 11;
    break;
   case 11:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_1s_2p["X"] = 1;

function ___gmpn_mod_1s_3p_cps($cps, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($b >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = $b >>> 0 < 256 ? 1 : 9;
    var $9 = $4;
    __label__ = 5;
    break;
   case 4:
    var $7 = $b >>> 0 < 16777216 ? 17 : 25;
    var $9 = $7;
    __label__ = 5;
    break;
   case 5:
    var $9;
    var $12 = STRING_TABLE.___gmpn_clz_tab + ($b >>> ($9 >>> 0)) | 0;
    var $15 = 33 - $9 - (HEAPU8[$12] & 255) | 0;
    var $16 = $b << $15;
    var $17 = $16 >>> 16;
    var $18 = $16 & 65535;
    var $19 = $16 ^ -1;
    var $20 = Math.floor(($19 >>> 0) / ($17 >>> 0));
    var $21 = (i64Math.multiply($17, 0, $20, 0), i64Math.result[0]);
    var $22 = $19 - $21 | 0;
    var $23 = (i64Math.multiply($18, 0, $20, 0), i64Math.result[0]);
    var $25 = $22 << 16 | 65535;
    if ($25 >>> 0 < $23 >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $__r1_0 = $25;
      var $__q1_0 = $20;
      __label__ = 8;
      break;
    }
   case 6:
    var $28 = $20 - 1 | 0;
    var $uadd4 = _llvm_uadd_with_overflow_i32($25, $16);
    var $29 = $uadd4.f0;
    var $30 = $uadd4.f1;
    if ($29 >>> 0 < $23 >>> 0 & ($30 ^ 1)) {
      __label__ = 7;
      break;
    } else {
      var $__r1_0 = $29;
      var $__q1_0 = $28;
      __label__ = 8;
      break;
    }
   case 7:
    var $__r1_0 = $29 + $16 | 0;
    var $__q1_0 = $20 - 2 | 0;
    __label__ = 8;
    break;
   case 8:
    var $__q1_0;
    var $__r1_0;
    var $36 = $__r1_0 - $23 | 0;
    var $37 = Math.floor(($36 >>> 0) / ($17 >>> 0));
    var $38 = (i64Math.multiply($37, 0, $17, 0), i64Math.result[0]);
    var $39 = $36 - $38 | 0;
    var $40 = (i64Math.multiply($37, 0, $18, 0), i64Math.result[0]);
    var $42 = $39 << 16 | 65535;
    if ($42 >>> 0 < $40 >>> 0) {
      __label__ = 9;
      break;
    } else {
      var $__q0_0 = $37;
      __label__ = 10;
      break;
    }
   case 9:
    var $uadd3 = _llvm_uadd_with_overflow_i32($42, $16);
    var $45 = $uadd3.f1;
    var $46 = $uadd3.f0;
    var $__v = $46 >>> 0 < $40 >>> 0 & ($45 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $37 | 0;
    __label__ = 10;
    break;
   case 10:
    var $__q0_0;
    var $50 = $__q0_0 | $__q1_0 << 16;
    var $54 = $50 >>> ((32 - $15 | 0) >>> 0) | 1 << $15;
    var $55 = -$16 | 0;
    var $56 = (i64Math.multiply($54, 0, $55, 0), i64Math.result[0]);
    var $57 = $56 & 65535;
    var $58 = $56 >>> 16;
    var $59 = $__q0_0 & 65535;
    var $60 = $50 >>> 16;
    var $61 = (i64Math.multiply($57, 0, $59, 0), i64Math.result[0]);
    var $62 = (i64Math.multiply($57, 0, $60, 0), i64Math.result[0]);
    var $63 = (i64Math.multiply($58, 0, $59, 0), i64Math.result[0]);
    var $64 = (i64Math.multiply($58, 0, $60, 0), i64Math.result[0]);
    var $66 = ($61 >>> 16) + $62 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($66, $63);
    var $67 = $uadd.f0;
    var $68 = $uadd.f1;
    var $__x3_0 = $68 ? $64 + 65536 | 0 : $64;
    var $74 = $61 & 65535 | $67 << 16;
    var $76 = $__x3_0 + ($67 >>> 16) + ($56 + 1) | 0;
    var $77 = (i64Math.multiply($76, 0, $55, 0), i64Math.result[0]);
    var $79 = $77 >>> 0 > $74 >>> 0 ? $16 : 0;
    var $_r_0 = $79 + $77 | 0;
    var $80 = $_r_0 & 65535;
    var $81 = $_r_0 >>> 16;
    var $82 = (i64Math.multiply($80, 0, $59, 0), i64Math.result[0]);
    var $83 = (i64Math.multiply($80, 0, $60, 0), i64Math.result[0]);
    var $84 = (i64Math.multiply($81, 0, $59, 0), i64Math.result[0]);
    var $85 = (i64Math.multiply($81, 0, $60, 0), i64Math.result[0]);
    var $87 = ($82 >>> 16) + $83 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($87, $84);
    var $88 = $uadd1.f0;
    var $89 = $uadd1.f1;
    var $__x37_0 = $89 ? $85 + 65536 | 0 : $85;
    var $95 = $82 & 65535 | $88 << 16;
    var $97 = $__x37_0 + ($88 >>> 16) + ($_r_0 + 1) | 0;
    var $98 = (i64Math.multiply($97, 0, $55, 0), i64Math.result[0]);
    var $100 = $98 >>> 0 > $95 >>> 0 ? $16 : 0;
    var $_r3_0 = $100 + $98 | 0;
    var $101 = $_r3_0 & 65535;
    var $102 = $_r3_0 >>> 16;
    var $103 = (i64Math.multiply($101, 0, $59, 0), i64Math.result[0]);
    var $104 = (i64Math.multiply($101, 0, $60, 0), i64Math.result[0]);
    var $105 = (i64Math.multiply($102, 0, $59, 0), i64Math.result[0]);
    var $106 = (i64Math.multiply($102, 0, $60, 0), i64Math.result[0]);
    var $108 = ($103 >>> 16) + $104 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($108, $105);
    var $109 = $uadd2.f0;
    var $110 = $uadd2.f1;
    var $__x320_0 = $110 ? $106 + 65536 | 0 : $106;
    var $116 = $103 & 65535 | $109 << 16;
    var $118 = $__x320_0 + ($109 >>> 16) + ($_r3_0 + 1) | 0;
    var $119 = (i64Math.multiply($118, 0, $55, 0), i64Math.result[0]);
    var $121 = $119 >>> 0 > $116 >>> 0 ? $16 : 0;
    var $_r16_0 = $121 + $119 | 0;
    HEAP32[$cps >> 2] = $50;
    HEAP32[$cps + 4 >> 2] = $15;
    HEAP32[$cps + 8 >> 2] = $56 >>> ($15 >>> 0);
    HEAP32[$cps + 12 >> 2] = $_r_0 >>> ($15 >>> 0);
    HEAP32[$cps + 16 >> 2] = $_r3_0 >>> ($15 >>> 0);
    HEAP32[$cps + 20 >> 2] = $_r16_0 >>> ($15 >>> 0);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_1s_3p_cps["X"] = 1;

function ___gmpn_mod_1s_3p($ap, $n, $b, $cps) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$cps + 8 >> 2];
    var $4 = HEAPU32[$cps + 12 >> 2];
    var $6 = HEAPU32[$cps + 16 >> 2];
    var $8 = HEAPU32[$cps + 20 >> 2];
    var $9 = (i64Math.multiply($n, 0, -1431655765, 0), i64Math.result[0]);
    var $10 = $9 >>> 30;
    if (($10 | 0) == 0) {
      __label__ = 3;
      break;
    } else if (($10 | 0) == 2) {
      __label__ = 4;
      break;
    } else if (($10 | 0) == 1) {
      __label__ = 5;
      break;
    } else {
      var $i_0_in_ph = $n;
      __label__ = 6;
      break;
    }
   case 3:
    var $14 = HEAPU32[$ap + ($n - 2 << 2) >> 2];
    var $15 = $14 & 65535;
    var $16 = $14 >>> 16;
    var $17 = $2 & 65535;
    var $18 = $2 >>> 16;
    var $19 = (i64Math.multiply($15, 0, $17, 0), i64Math.result[0]);
    var $20 = (i64Math.multiply($15, 0, $18, 0), i64Math.result[0]);
    var $21 = (i64Math.multiply($16, 0, $17, 0), i64Math.result[0]);
    var $22 = (i64Math.multiply($16, 0, $18, 0), i64Math.result[0]);
    var $24 = ($19 >>> 16) + $20 | 0;
    var $uadd14 = _llvm_uadd_with_overflow_i32($24, $21);
    var $25 = $uadd14.f0;
    var $26 = $uadd14.f1;
    var $__x3_0 = $26 ? $22 + 65536 | 0 : $22;
    var $28 = $25 >>> 16;
    var $31 = $25 << 16 | $19 & 65535;
    var $32 = $n - 3 | 0;
    var $34 = HEAP32[$ap + ($32 << 2) >> 2];
    var $uadd15 = _llvm_uadd_with_overflow_i32($31, $34);
    var $35 = $uadd15.f0;
    var $36 = $uadd15.f1;
    var $37 = $36 & 1;
    var $40 = HEAPU32[$ap + ($n - 1 << 2) >> 2];
    var $41 = $40 & 65535;
    var $42 = $40 >>> 16;
    var $43 = $4 & 65535;
    var $44 = $4 >>> 16;
    var $45 = (i64Math.multiply($41, 0, $43, 0), i64Math.result[0]);
    var $46 = (i64Math.multiply($41, 0, $44, 0), i64Math.result[0]);
    var $47 = (i64Math.multiply($42, 0, $43, 0), i64Math.result[0]);
    var $48 = (i64Math.multiply($42, 0, $44, 0), i64Math.result[0]);
    var $50 = ($45 >>> 16) + $46 | 0;
    var $uadd16 = _llvm_uadd_with_overflow_i32($50, $47);
    var $51 = $uadd16.f0;
    var $52 = $uadd16.f1;
    var $__x34_0 = $52 ? $48 + 65536 | 0 : $48;
    var $54 = $51 >>> 16;
    var $57 = $51 << 16 | $45 & 65535;
    var $uadd17 = _llvm_uadd_with_overflow_i32($57, $35);
    var $58 = $uadd17.f0;
    var $59 = $uadd17.f1;
    var $rh_1_ph = $__x3_0 + $28 + $37 + $54 + ($59 & 1) + $__x34_0 | 0;
    var $rl_1_ph = $58;
    var $i_0_in_ph = $32;
    __label__ = 6;
    break;
   case 4:
    var $67 = $n - 1 | 0;
    var $rh_1_ph = 0;
    var $rl_1_ph = HEAP32[$ap + ($67 << 2) >> 2];
    var $i_0_in_ph = $67;
    __label__ = 6;
    break;
   case 5:
    var $73 = HEAPU32[$ap + ($n - 1 << 2) >> 2];
    var $74 = $73 & 65535;
    var $75 = $73 >>> 16;
    var $76 = $2 & 65535;
    var $77 = $2 >>> 16;
    var $78 = (i64Math.multiply($74, 0, $76, 0), i64Math.result[0]);
    var $79 = (i64Math.multiply($74, 0, $77, 0), i64Math.result[0]);
    var $80 = (i64Math.multiply($75, 0, $76, 0), i64Math.result[0]);
    var $81 = (i64Math.multiply($75, 0, $77, 0), i64Math.result[0]);
    var $83 = ($78 >>> 16) + $79 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($83, $80);
    var $84 = $uadd.f0;
    var $85 = $uadd.f1;
    var $__x315_0 = $85 ? $81 + 65536 | 0 : $81;
    var $87 = $84 >>> 16;
    var $90 = $84 << 16 | $78 & 65535;
    var $91 = $n - 2 | 0;
    var $93 = HEAP32[$ap + ($91 << 2) >> 2];
    var $uadd1 = _llvm_uadd_with_overflow_i32($90, $93);
    var $94 = $uadd1.f0;
    var $95 = $uadd1.f1;
    var $rh_1_ph = $__x315_0 + $87 + ($95 & 1) | 0;
    var $rl_1_ph = $94;
    var $i_0_in_ph = $91;
    __label__ = 6;
    break;
   case 6:
    var $i_0_in_ph;
    var $rl_1_ph;
    var $rh_1_ph;
    var $i_018 = $i_0_in_ph - 3 | 0;
    var $100 = $2 & 65535;
    var $101 = $2 >>> 16;
    if (($i_018 | 0) > -1) {
      __label__ = 7;
      break;
    } else {
      var $rl_1_lcssa = $rl_1_ph;
      var $rh_1_lcssa = $rh_1_ph;
      var $_pre_phi = $100;
      var $_pre_phi2 = $101;
      __label__ = 9;
      break;
    }
   case 7:
    var $102 = $4 & 65535;
    var $103 = $4 >>> 16;
    var $104 = $6 & 65535;
    var $105 = $6 >>> 16;
    var $106 = $8 & 65535;
    var $107 = $8 >>> 16;
    var $i_0_in19 = $i_0_in_ph;
    var $rl_120 = $rl_1_ph;
    var $rh_121 = $rh_1_ph;
    var $i_022 = $i_018;
    __label__ = 8;
    break;
   case 8:
    var $i_022;
    var $rh_121;
    var $rl_120;
    var $i_0_in19;
    var $111 = HEAPU32[$ap + ($i_0_in19 - 2 << 2) >> 2];
    var $112 = $111 & 65535;
    var $113 = $111 >>> 16;
    var $114 = (i64Math.multiply($112, 0, $100, 0), i64Math.result[0]);
    var $115 = (i64Math.multiply($112, 0, $101, 0), i64Math.result[0]);
    var $116 = (i64Math.multiply($113, 0, $100, 0), i64Math.result[0]);
    var $117 = (i64Math.multiply($113, 0, $101, 0), i64Math.result[0]);
    var $119 = ($114 >>> 16) + $115 | 0;
    var $uadd6 = _llvm_uadd_with_overflow_i32($119, $116);
    var $120 = $uadd6.f0;
    var $121 = $uadd6.f1;
    var $__x326_0 = $121 ? $117 + 65536 | 0 : $117;
    var $123 = $120 >>> 16;
    var $126 = $120 << 16 | $114 & 65535;
    var $128 = HEAP32[$ap + ($i_022 << 2) >> 2];
    var $uadd7 = _llvm_uadd_with_overflow_i32($126, $128);
    var $129 = $uadd7.f0;
    var $130 = $uadd7.f1;
    var $131 = $130 & 1;
    var $134 = HEAPU32[$ap + ($i_0_in19 - 1 << 2) >> 2];
    var $135 = $134 & 65535;
    var $136 = $134 >>> 16;
    var $137 = (i64Math.multiply($135, 0, $102, 0), i64Math.result[0]);
    var $138 = (i64Math.multiply($135, 0, $103, 0), i64Math.result[0]);
    var $139 = (i64Math.multiply($136, 0, $102, 0), i64Math.result[0]);
    var $140 = (i64Math.multiply($136, 0, $103, 0), i64Math.result[0]);
    var $142 = ($137 >>> 16) + $138 | 0;
    var $uadd8 = _llvm_uadd_with_overflow_i32($142, $139);
    var $143 = $uadd8.f0;
    var $144 = $uadd8.f1;
    var $__x337_0 = $144 ? $140 + 65536 | 0 : $140;
    var $146 = $143 >>> 16;
    var $149 = $143 << 16 | $137 & 65535;
    var $uadd9 = _llvm_uadd_with_overflow_i32($129, $149);
    var $150 = $uadd9.f0;
    var $151 = $uadd9.f1;
    var $152 = $151 & 1;
    var $153 = $rl_120 & 65535;
    var $154 = $rl_120 >>> 16;
    var $155 = (i64Math.multiply($153, 0, $104, 0), i64Math.result[0]);
    var $156 = (i64Math.multiply($153, 0, $105, 0), i64Math.result[0]);
    var $157 = (i64Math.multiply($154, 0, $104, 0), i64Math.result[0]);
    var $158 = (i64Math.multiply($154, 0, $105, 0), i64Math.result[0]);
    var $160 = ($155 >>> 16) + $156 | 0;
    var $uadd10 = _llvm_uadd_with_overflow_i32($160, $157);
    var $161 = $uadd10.f0;
    var $162 = $uadd10.f1;
    var $__x348_0 = $162 ? $158 + 65536 | 0 : $158;
    var $164 = $161 >>> 16;
    var $167 = $161 << 16 | $155 & 65535;
    var $uadd11 = _llvm_uadd_with_overflow_i32($150, $167);
    var $168 = $uadd11.f0;
    var $169 = $uadd11.f1;
    var $170 = $169 & 1;
    var $171 = $rh_121 & 65535;
    var $172 = $rh_121 >>> 16;
    var $173 = (i64Math.multiply($171, 0, $106, 0), i64Math.result[0]);
    var $174 = (i64Math.multiply($171, 0, $107, 0), i64Math.result[0]);
    var $175 = (i64Math.multiply($172, 0, $106, 0), i64Math.result[0]);
    var $176 = (i64Math.multiply($172, 0, $107, 0), i64Math.result[0]);
    var $178 = ($173 >>> 16) + $174 | 0;
    var $uadd12 = _llvm_uadd_with_overflow_i32($178, $175);
    var $179 = $uadd12.f0;
    var $180 = $uadd12.f1;
    var $__x359_0 = $180 ? $176 + 65536 | 0 : $176;
    var $182 = $179 >>> 16;
    var $185 = $179 << 16 | $173 & 65535;
    var $uadd13 = _llvm_uadd_with_overflow_i32($185, $168);
    var $186 = $uadd13.f0;
    var $187 = $uadd13.f1;
    var $199 = $__x326_0 + $123 + $131 + $146 + $__x337_0 + $152 + $__x348_0 + $164 + $170 + $182 + $__x359_0 + ($187 & 1) | 0;
    var $i_0 = $i_022 - 3 | 0;
    if (($i_0 | 0) > -1) {
      var $i_0_in19 = $i_022;
      var $rl_120 = $186;
      var $rh_121 = $199;
      var $i_022 = $i_0;
      __label__ = 8;
      break;
    } else {
      var $rl_1_lcssa = $186;
      var $rh_1_lcssa = $199;
      var $_pre_phi = $100;
      var $_pre_phi2 = $101;
      __label__ = 9;
      break;
    }
   case 9:
    var $_pre_phi2;
    var $_pre_phi;
    var $rh_1_lcssa;
    var $rl_1_lcssa;
    var $201 = HEAPU32[$cps >> 2];
    var $203 = HEAPU32[$cps + 4 >> 2];
    var $204 = $rh_1_lcssa & 65535;
    var $205 = $rh_1_lcssa >>> 16;
    var $206 = (i64Math.multiply($204, 0, $_pre_phi, 0), i64Math.result[0]);
    var $207 = (i64Math.multiply($204, 0, $_pre_phi2, 0), i64Math.result[0]);
    var $208 = (i64Math.multiply($205, 0, $_pre_phi, 0), i64Math.result[0]);
    var $209 = (i64Math.multiply($205, 0, $_pre_phi2, 0), i64Math.result[0]);
    var $211 = ($206 >>> 16) + $207 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($211, $208);
    var $212 = $uadd2.f0;
    var $213 = $uadd2.f1;
    var $__x370_0 = $213 ? $209 + 65536 | 0 : $209;
    var $215 = $212 >>> 16;
    var $218 = $212 << 16 | $206 & 65535;
    var $uadd3 = _llvm_uadd_with_overflow_i32($rl_1_lcssa, $218);
    var $219 = $uadd3.f0;
    var $220 = $uadd3.f1;
    var $227 = $__x370_0 + $215 + ($220 & 1) << $203 | $219 >>> ((32 - $203 | 0) >>> 0);
    var $228 = $227 & 65535;
    var $229 = $227 >>> 16;
    var $230 = $201 & 65535;
    var $231 = $201 >>> 16;
    var $232 = (i64Math.multiply($228, 0, $230, 0), i64Math.result[0]);
    var $233 = (i64Math.multiply($228, 0, $231, 0), i64Math.result[0]);
    var $234 = (i64Math.multiply($229, 0, $230, 0), i64Math.result[0]);
    var $235 = (i64Math.multiply($229, 0, $231, 0), i64Math.result[0]);
    var $237 = ($232 >>> 16) + $233 | 0;
    var $uadd4 = _llvm_uadd_with_overflow_i32($237, $234);
    var $238 = $uadd4.f0;
    var $239 = $uadd4.f1;
    var $__x381_0 = $239 ? $235 + 65536 | 0 : $235;
    var $241 = $238 >>> 16;
    var $244 = $232 & 65535 | $238 << 16;
    var $245 = $219 << $203;
    var $uadd5 = _llvm_uadd_with_overflow_i32($244, $245);
    var $246 = $uadd5.f0;
    var $247 = $uadd5.f1;
    var $252 = $241 + 1 + ($247 & 1) + $227 + $__x381_0 | 0;
    var $253 = (i64Math.multiply($252, 0, $b, 0), i64Math.result[0]);
    var $254 = $245 - $253 | 0;
    var $256 = $254 >>> 0 > $246 >>> 0 ? $b : 0;
    var $_r_0 = $256 + $254 | 0;
    var $258 = $_r_0 >>> 0 < $b >>> 0 ? 0 : $b;
    return ($_r_0 - $258 | 0) >>> ($203 >>> 0);
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_1s_3p["X"] = 1;

function ___gmpn_mod_1s_4p_cps($cps, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($b >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = $b >>> 0 < 256 ? 1 : 9;
    var $9 = $4;
    __label__ = 5;
    break;
   case 4:
    var $7 = $b >>> 0 < 16777216 ? 17 : 25;
    var $9 = $7;
    __label__ = 5;
    break;
   case 5:
    var $9;
    var $12 = STRING_TABLE.___gmpn_clz_tab + ($b >>> ($9 >>> 0)) | 0;
    var $15 = 33 - $9 - (HEAPU8[$12] & 255) | 0;
    var $16 = $b << $15;
    var $17 = $16 >>> 16;
    var $18 = $16 & 65535;
    var $19 = $16 ^ -1;
    var $20 = Math.floor(($19 >>> 0) / ($17 >>> 0));
    var $21 = (i64Math.multiply($17, 0, $20, 0), i64Math.result[0]);
    var $22 = $19 - $21 | 0;
    var $23 = (i64Math.multiply($18, 0, $20, 0), i64Math.result[0]);
    var $25 = $22 << 16 | 65535;
    if ($25 >>> 0 < $23 >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $__q1_0 = $20;
      var $__r1_0 = $25;
      __label__ = 8;
      break;
    }
   case 6:
    var $28 = $20 - 1 | 0;
    var $uadd5 = _llvm_uadd_with_overflow_i32($25, $16);
    var $29 = $uadd5.f0;
    var $30 = $uadd5.f1;
    if ($29 >>> 0 < $23 >>> 0 & ($30 ^ 1)) {
      __label__ = 7;
      break;
    } else {
      var $__q1_0 = $28;
      var $__r1_0 = $29;
      __label__ = 8;
      break;
    }
   case 7:
    var $__q1_0 = $20 - 2 | 0;
    var $__r1_0 = $29 + $16 | 0;
    __label__ = 8;
    break;
   case 8:
    var $__r1_0;
    var $__q1_0;
    var $36 = $__r1_0 - $23 | 0;
    var $37 = Math.floor(($36 >>> 0) / ($17 >>> 0));
    var $38 = (i64Math.multiply($37, 0, $17, 0), i64Math.result[0]);
    var $39 = $36 - $38 | 0;
    var $40 = (i64Math.multiply($37, 0, $18, 0), i64Math.result[0]);
    var $42 = $39 << 16 | 65535;
    if ($42 >>> 0 < $40 >>> 0) {
      __label__ = 9;
      break;
    } else {
      var $__q0_0 = $37;
      __label__ = 10;
      break;
    }
   case 9:
    var $uadd4 = _llvm_uadd_with_overflow_i32($42, $16);
    var $45 = $uadd4.f1;
    var $46 = $uadd4.f0;
    var $__v = $46 >>> 0 < $40 >>> 0 & ($45 ^ 1) ? -2 : -1;
    var $__q0_0 = $__v + $37 | 0;
    __label__ = 10;
    break;
   case 10:
    var $__q0_0;
    var $50 = $__q0_0 | $__q1_0 << 16;
    var $54 = $50 >>> ((32 - $15 | 0) >>> 0) | 1 << $15;
    var $55 = -$16 | 0;
    var $56 = (i64Math.multiply($54, 0, $55, 0), i64Math.result[0]);
    var $57 = $56 & 65535;
    var $58 = $56 >>> 16;
    var $59 = $__q0_0 & 65535;
    var $60 = $50 >>> 16;
    var $61 = (i64Math.multiply($57, 0, $59, 0), i64Math.result[0]);
    var $62 = (i64Math.multiply($57, 0, $60, 0), i64Math.result[0]);
    var $63 = (i64Math.multiply($58, 0, $59, 0), i64Math.result[0]);
    var $64 = (i64Math.multiply($58, 0, $60, 0), i64Math.result[0]);
    var $66 = ($61 >>> 16) + $62 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($66, $63);
    var $67 = $uadd.f0;
    var $68 = $uadd.f1;
    var $__x3_0 = $68 ? $64 + 65536 | 0 : $64;
    var $74 = $61 & 65535 | $67 << 16;
    var $76 = $__x3_0 + ($67 >>> 16) + ($56 + 1) | 0;
    var $77 = (i64Math.multiply($76, 0, $55, 0), i64Math.result[0]);
    var $79 = $77 >>> 0 > $74 >>> 0 ? $16 : 0;
    var $_r_0 = $79 + $77 | 0;
    var $80 = $_r_0 & 65535;
    var $81 = $_r_0 >>> 16;
    var $82 = (i64Math.multiply($80, 0, $59, 0), i64Math.result[0]);
    var $83 = (i64Math.multiply($80, 0, $60, 0), i64Math.result[0]);
    var $84 = (i64Math.multiply($81, 0, $59, 0), i64Math.result[0]);
    var $85 = (i64Math.multiply($81, 0, $60, 0), i64Math.result[0]);
    var $87 = ($82 >>> 16) + $83 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($87, $84);
    var $88 = $uadd1.f0;
    var $89 = $uadd1.f1;
    var $__x37_0 = $89 ? $85 + 65536 | 0 : $85;
    var $95 = $82 & 65535 | $88 << 16;
    var $97 = $__x37_0 + ($88 >>> 16) + ($_r_0 + 1) | 0;
    var $98 = (i64Math.multiply($97, 0, $55, 0), i64Math.result[0]);
    var $100 = $98 >>> 0 > $95 >>> 0 ? $16 : 0;
    var $_r3_0 = $100 + $98 | 0;
    var $101 = $_r3_0 & 65535;
    var $102 = $_r3_0 >>> 16;
    var $103 = (i64Math.multiply($101, 0, $59, 0), i64Math.result[0]);
    var $104 = (i64Math.multiply($101, 0, $60, 0), i64Math.result[0]);
    var $105 = (i64Math.multiply($102, 0, $59, 0), i64Math.result[0]);
    var $106 = (i64Math.multiply($102, 0, $60, 0), i64Math.result[0]);
    var $108 = ($103 >>> 16) + $104 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($108, $105);
    var $109 = $uadd2.f0;
    var $110 = $uadd2.f1;
    var $__x320_0 = $110 ? $106 + 65536 | 0 : $106;
    var $116 = $103 & 65535 | $109 << 16;
    var $118 = $__x320_0 + ($109 >>> 16) + ($_r3_0 + 1) | 0;
    var $119 = (i64Math.multiply($118, 0, $55, 0), i64Math.result[0]);
    var $121 = $119 >>> 0 > $116 >>> 0 ? $16 : 0;
    var $_r16_0 = $121 + $119 | 0;
    var $122 = $_r16_0 & 65535;
    var $123 = $_r16_0 >>> 16;
    var $124 = (i64Math.multiply($122, 0, $59, 0), i64Math.result[0]);
    var $125 = (i64Math.multiply($122, 0, $60, 0), i64Math.result[0]);
    var $126 = (i64Math.multiply($123, 0, $59, 0), i64Math.result[0]);
    var $127 = (i64Math.multiply($123, 0, $60, 0), i64Math.result[0]);
    var $129 = ($124 >>> 16) + $125 | 0;
    var $uadd3 = _llvm_uadd_with_overflow_i32($129, $126);
    var $130 = $uadd3.f0;
    var $131 = $uadd3.f1;
    var $__x333_0 = $131 ? $127 + 65536 | 0 : $127;
    var $137 = $124 & 65535 | $130 << 16;
    var $139 = $__x333_0 + ($130 >>> 16) + ($_r16_0 + 1) | 0;
    var $140 = (i64Math.multiply($139, 0, $55, 0), i64Math.result[0]);
    var $142 = $140 >>> 0 > $137 >>> 0 ? $16 : 0;
    var $_r29_0 = $142 + $140 | 0;
    HEAP32[$cps >> 2] = $50;
    HEAP32[$cps + 4 >> 2] = $15;
    HEAP32[$cps + 8 >> 2] = $56 >>> ($15 >>> 0);
    HEAP32[$cps + 12 >> 2] = $_r_0 >>> ($15 >>> 0);
    HEAP32[$cps + 16 >> 2] = $_r3_0 >>> ($15 >>> 0);
    HEAP32[$cps + 20 >> 2] = $_r16_0 >>> ($15 >>> 0);
    HEAP32[$cps + 24 >> 2] = $_r29_0 >>> ($15 >>> 0);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_1s_4p_cps["X"] = 1;

function ___gmpn_mod_1s_4p($ap, $n, $b, $cps) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$cps + 8 >> 2];
    var $4 = HEAPU32[$cps + 12 >> 2];
    var $6 = HEAPU32[$cps + 16 >> 2];
    var $8 = HEAPU32[$cps + 20 >> 2];
    var $10 = HEAPU32[$cps + 24 >> 2];
    var $11 = $n & 3;
    if (($11 | 0) == 0) {
      __label__ = 3;
      break;
    } else if (($11 | 0) == 1) {
      __label__ = 4;
      break;
    } else if (($11 | 0) == 2) {
      __label__ = 5;
      break;
    } else if (($11 | 0) == 3) {
      __label__ = 6;
      break;
    } else {
      var $i_0_in_ph = $n;
      __label__ = 7;
      break;
    }
   case 3:
    var $15 = HEAPU32[$ap + ($n - 3 << 2) >> 2];
    var $16 = $15 & 65535;
    var $17 = $15 >>> 16;
    var $18 = $2 & 65535;
    var $19 = $2 >>> 16;
    var $20 = (i64Math.multiply($16, 0, $18, 0), i64Math.result[0]);
    var $21 = (i64Math.multiply($16, 0, $19, 0), i64Math.result[0]);
    var $22 = (i64Math.multiply($17, 0, $18, 0), i64Math.result[0]);
    var $23 = (i64Math.multiply($17, 0, $19, 0), i64Math.result[0]);
    var $25 = ($20 >>> 16) + $21 | 0;
    var $uadd20 = _llvm_uadd_with_overflow_i32($25, $22);
    var $26 = $uadd20.f0;
    var $27 = $uadd20.f1;
    var $__x3_0 = $27 ? $23 + 65536 | 0 : $23;
    var $29 = $26 >>> 16;
    var $32 = $26 << 16 | $20 & 65535;
    var $33 = $n - 4 | 0;
    var $35 = HEAP32[$ap + ($33 << 2) >> 2];
    var $uadd21 = _llvm_uadd_with_overflow_i32($32, $35);
    var $36 = $uadd21.f0;
    var $37 = $uadd21.f1;
    var $38 = $37 & 1;
    var $41 = HEAPU32[$ap + ($n - 2 << 2) >> 2];
    var $42 = $41 & 65535;
    var $43 = $41 >>> 16;
    var $44 = $4 & 65535;
    var $45 = $4 >>> 16;
    var $46 = (i64Math.multiply($42, 0, $44, 0), i64Math.result[0]);
    var $47 = (i64Math.multiply($42, 0, $45, 0), i64Math.result[0]);
    var $48 = (i64Math.multiply($43, 0, $44, 0), i64Math.result[0]);
    var $49 = (i64Math.multiply($43, 0, $45, 0), i64Math.result[0]);
    var $51 = ($46 >>> 16) + $47 | 0;
    var $uadd22 = _llvm_uadd_with_overflow_i32($51, $48);
    var $52 = $uadd22.f0;
    var $53 = $uadd22.f1;
    var $__x34_0 = $53 ? $49 + 65536 | 0 : $49;
    var $55 = $52 >>> 16;
    var $58 = $52 << 16 | $46 & 65535;
    var $uadd23 = _llvm_uadd_with_overflow_i32($36, $58);
    var $59 = $uadd23.f0;
    var $60 = $uadd23.f1;
    var $61 = $60 & 1;
    var $64 = HEAPU32[$ap + ($n - 1 << 2) >> 2];
    var $65 = $64 & 65535;
    var $66 = $64 >>> 16;
    var $67 = $6 & 65535;
    var $68 = $6 >>> 16;
    var $69 = (i64Math.multiply($65, 0, $67, 0), i64Math.result[0]);
    var $70 = (i64Math.multiply($65, 0, $68, 0), i64Math.result[0]);
    var $71 = (i64Math.multiply($66, 0, $67, 0), i64Math.result[0]);
    var $72 = (i64Math.multiply($66, 0, $68, 0), i64Math.result[0]);
    var $74 = ($69 >>> 16) + $70 | 0;
    var $uadd24 = _llvm_uadd_with_overflow_i32($74, $71);
    var $75 = $uadd24.f0;
    var $76 = $uadd24.f1;
    var $__x315_0 = $76 ? $72 + 65536 | 0 : $72;
    var $78 = $75 >>> 16;
    var $81 = $75 << 16 | $69 & 65535;
    var $uadd25 = _llvm_uadd_with_overflow_i32($81, $59);
    var $82 = $uadd25.f0;
    var $83 = $uadd25.f1;
    var $rh_1_ph = $__x3_0 + $29 + $38 + $55 + $__x34_0 + $61 + $78 + ($83 & 1) + $__x315_0 | 0;
    var $rl_1_ph = $82;
    var $i_0_in_ph = $33;
    __label__ = 7;
    break;
   case 4:
    var $94 = $n - 1 | 0;
    var $rh_1_ph = 0;
    var $rl_1_ph = HEAP32[$ap + ($94 << 2) >> 2];
    var $i_0_in_ph = $94;
    __label__ = 7;
    break;
   case 5:
    var $100 = HEAPU32[$ap + ($n - 1 << 2) >> 2];
    var $101 = $100 & 65535;
    var $102 = $100 >>> 16;
    var $103 = $2 & 65535;
    var $104 = $2 >>> 16;
    var $105 = (i64Math.multiply($101, 0, $103, 0), i64Math.result[0]);
    var $106 = (i64Math.multiply($101, 0, $104, 0), i64Math.result[0]);
    var $107 = (i64Math.multiply($102, 0, $103, 0), i64Math.result[0]);
    var $108 = (i64Math.multiply($102, 0, $104, 0), i64Math.result[0]);
    var $110 = ($105 >>> 16) + $106 | 0;
    var $uadd18 = _llvm_uadd_with_overflow_i32($110, $107);
    var $111 = $uadd18.f0;
    var $112 = $uadd18.f1;
    var $__x326_0 = $112 ? $108 + 65536 | 0 : $108;
    var $114 = $111 >>> 16;
    var $117 = $111 << 16 | $105 & 65535;
    var $118 = $n - 2 | 0;
    var $120 = HEAP32[$ap + ($118 << 2) >> 2];
    var $uadd19 = _llvm_uadd_with_overflow_i32($117, $120);
    var $121 = $uadd19.f0;
    var $122 = $uadd19.f1;
    var $rh_1_ph = $__x326_0 + $114 + ($122 & 1) | 0;
    var $rl_1_ph = $121;
    var $i_0_in_ph = $118;
    __label__ = 7;
    break;
   case 6:
    var $129 = HEAPU32[$ap + ($n - 2 << 2) >> 2];
    var $130 = $129 & 65535;
    var $131 = $129 >>> 16;
    var $132 = $2 & 65535;
    var $133 = $2 >>> 16;
    var $134 = (i64Math.multiply($130, 0, $132, 0), i64Math.result[0]);
    var $135 = (i64Math.multiply($130, 0, $133, 0), i64Math.result[0]);
    var $136 = (i64Math.multiply($131, 0, $132, 0), i64Math.result[0]);
    var $137 = (i64Math.multiply($131, 0, $133, 0), i64Math.result[0]);
    var $139 = ($134 >>> 16) + $135 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($139, $136);
    var $140 = $uadd.f0;
    var $141 = $uadd.f1;
    var $__x337_0 = $141 ? $137 + 65536 | 0 : $137;
    var $143 = $140 >>> 16;
    var $146 = $140 << 16 | $134 & 65535;
    var $147 = $n - 3 | 0;
    var $149 = HEAP32[$ap + ($147 << 2) >> 2];
    var $uadd1 = _llvm_uadd_with_overflow_i32($146, $149);
    var $150 = $uadd1.f0;
    var $151 = $uadd1.f1;
    var $152 = $151 & 1;
    var $155 = HEAPU32[$ap + ($n - 1 << 2) >> 2];
    var $156 = $155 & 65535;
    var $157 = $155 >>> 16;
    var $158 = $4 & 65535;
    var $159 = $4 >>> 16;
    var $160 = (i64Math.multiply($156, 0, $158, 0), i64Math.result[0]);
    var $161 = (i64Math.multiply($156, 0, $159, 0), i64Math.result[0]);
    var $162 = (i64Math.multiply($157, 0, $158, 0), i64Math.result[0]);
    var $163 = (i64Math.multiply($157, 0, $159, 0), i64Math.result[0]);
    var $165 = ($160 >>> 16) + $161 | 0;
    var $uadd2 = _llvm_uadd_with_overflow_i32($165, $162);
    var $166 = $uadd2.f0;
    var $167 = $uadd2.f1;
    var $__x348_0 = $167 ? $163 + 65536 | 0 : $163;
    var $169 = $166 >>> 16;
    var $172 = $166 << 16 | $160 & 65535;
    var $uadd3 = _llvm_uadd_with_overflow_i32($172, $150);
    var $173 = $uadd3.f0;
    var $174 = $uadd3.f1;
    var $rh_1_ph = $__x337_0 + $143 + $152 + $169 + ($174 & 1) + $__x348_0 | 0;
    var $rl_1_ph = $173;
    var $i_0_in_ph = $147;
    __label__ = 7;
    break;
   case 7:
    var $i_0_in_ph;
    var $rl_1_ph;
    var $rh_1_ph;
    var $i_026 = $i_0_in_ph - 4 | 0;
    var $182 = $2 & 65535;
    var $183 = $2 >>> 16;
    if (($i_026 | 0) > -1) {
      __label__ = 8;
      break;
    } else {
      var $rl_1_lcssa = $rl_1_ph;
      var $rh_1_lcssa = $rh_1_ph;
      var $_pre_phi = $182;
      var $_pre_phi2 = $183;
      __label__ = 10;
      break;
    }
   case 8:
    var $184 = $4 & 65535;
    var $185 = $4 >>> 16;
    var $186 = $6 & 65535;
    var $187 = $6 >>> 16;
    var $188 = $8 & 65535;
    var $189 = $8 >>> 16;
    var $190 = $10 & 65535;
    var $191 = $10 >>> 16;
    var $i_0_in27 = $i_0_in_ph;
    var $rl_128 = $rl_1_ph;
    var $rh_129 = $rh_1_ph;
    var $i_030 = $i_026;
    __label__ = 9;
    break;
   case 9:
    var $i_030;
    var $rh_129;
    var $rl_128;
    var $i_0_in27;
    var $195 = HEAPU32[$ap + ($i_0_in27 - 3 << 2) >> 2];
    var $196 = $195 & 65535;
    var $197 = $195 >>> 16;
    var $198 = (i64Math.multiply($196, 0, $182, 0), i64Math.result[0]);
    var $199 = (i64Math.multiply($196, 0, $183, 0), i64Math.result[0]);
    var $200 = (i64Math.multiply($197, 0, $182, 0), i64Math.result[0]);
    var $201 = (i64Math.multiply($197, 0, $183, 0), i64Math.result[0]);
    var $203 = ($198 >>> 16) + $199 | 0;
    var $uadd8 = _llvm_uadd_with_overflow_i32($203, $200);
    var $204 = $uadd8.f0;
    var $205 = $uadd8.f1;
    var $__x359_0 = $205 ? $201 + 65536 | 0 : $201;
    var $207 = $204 >>> 16;
    var $210 = $204 << 16 | $198 & 65535;
    var $212 = HEAP32[$ap + ($i_030 << 2) >> 2];
    var $uadd9 = _llvm_uadd_with_overflow_i32($210, $212);
    var $213 = $uadd9.f0;
    var $214 = $uadd9.f1;
    var $215 = $214 & 1;
    var $218 = HEAPU32[$ap + ($i_0_in27 - 2 << 2) >> 2];
    var $219 = $218 & 65535;
    var $220 = $218 >>> 16;
    var $221 = (i64Math.multiply($219, 0, $184, 0), i64Math.result[0]);
    var $222 = (i64Math.multiply($219, 0, $185, 0), i64Math.result[0]);
    var $223 = (i64Math.multiply($220, 0, $184, 0), i64Math.result[0]);
    var $224 = (i64Math.multiply($220, 0, $185, 0), i64Math.result[0]);
    var $226 = ($221 >>> 16) + $222 | 0;
    var $uadd10 = _llvm_uadd_with_overflow_i32($226, $223);
    var $227 = $uadd10.f0;
    var $228 = $uadd10.f1;
    var $__x370_0 = $228 ? $224 + 65536 | 0 : $224;
    var $230 = $227 >>> 16;
    var $233 = $227 << 16 | $221 & 65535;
    var $uadd11 = _llvm_uadd_with_overflow_i32($213, $233);
    var $234 = $uadd11.f0;
    var $235 = $uadd11.f1;
    var $236 = $235 & 1;
    var $239 = HEAPU32[$ap + ($i_0_in27 - 1 << 2) >> 2];
    var $240 = $239 & 65535;
    var $241 = $239 >>> 16;
    var $242 = (i64Math.multiply($240, 0, $186, 0), i64Math.result[0]);
    var $243 = (i64Math.multiply($240, 0, $187, 0), i64Math.result[0]);
    var $244 = (i64Math.multiply($241, 0, $186, 0), i64Math.result[0]);
    var $245 = (i64Math.multiply($241, 0, $187, 0), i64Math.result[0]);
    var $247 = ($242 >>> 16) + $243 | 0;
    var $uadd12 = _llvm_uadd_with_overflow_i32($247, $244);
    var $248 = $uadd12.f0;
    var $249 = $uadd12.f1;
    var $__x381_0 = $249 ? $245 + 65536 | 0 : $245;
    var $251 = $248 >>> 16;
    var $254 = $248 << 16 | $242 & 65535;
    var $uadd13 = _llvm_uadd_with_overflow_i32($234, $254);
    var $255 = $uadd13.f0;
    var $256 = $uadd13.f1;
    var $257 = $256 & 1;
    var $258 = $rl_128 & 65535;
    var $259 = $rl_128 >>> 16;
    var $260 = (i64Math.multiply($258, 0, $188, 0), i64Math.result[0]);
    var $261 = (i64Math.multiply($258, 0, $189, 0), i64Math.result[0]);
    var $262 = (i64Math.multiply($259, 0, $188, 0), i64Math.result[0]);
    var $263 = (i64Math.multiply($259, 0, $189, 0), i64Math.result[0]);
    var $265 = ($260 >>> 16) + $261 | 0;
    var $uadd14 = _llvm_uadd_with_overflow_i32($265, $262);
    var $266 = $uadd14.f0;
    var $267 = $uadd14.f1;
    var $__x392_0 = $267 ? $263 + 65536 | 0 : $263;
    var $269 = $266 >>> 16;
    var $272 = $266 << 16 | $260 & 65535;
    var $uadd15 = _llvm_uadd_with_overflow_i32($255, $272);
    var $273 = $uadd15.f0;
    var $274 = $uadd15.f1;
    var $275 = $274 & 1;
    var $276 = $rh_129 & 65535;
    var $277 = $rh_129 >>> 16;
    var $278 = (i64Math.multiply($276, 0, $190, 0), i64Math.result[0]);
    var $279 = (i64Math.multiply($276, 0, $191, 0), i64Math.result[0]);
    var $280 = (i64Math.multiply($277, 0, $190, 0), i64Math.result[0]);
    var $281 = (i64Math.multiply($277, 0, $191, 0), i64Math.result[0]);
    var $283 = ($278 >>> 16) + $279 | 0;
    var $uadd16 = _llvm_uadd_with_overflow_i32($283, $280);
    var $284 = $uadd16.f0;
    var $285 = $uadd16.f1;
    var $__x3103_0 = $285 ? $281 + 65536 | 0 : $281;
    var $287 = $284 >>> 16;
    var $290 = $284 << 16 | $278 & 65535;
    var $uadd17 = _llvm_uadd_with_overflow_i32($290, $273);
    var $291 = $uadd17.f0;
    var $292 = $uadd17.f1;
    var $307 = $__x359_0 + $207 + $215 + $230 + $__x370_0 + $236 + $251 + $__x381_0 + $257 + $__x392_0 + $269 + $275 + $287 + $__x3103_0 + ($292 & 1) | 0;
    var $i_0 = $i_030 - 4 | 0;
    if (($i_0 | 0) > -1) {
      var $i_0_in27 = $i_030;
      var $rl_128 = $291;
      var $rh_129 = $307;
      var $i_030 = $i_0;
      __label__ = 9;
      break;
    } else {
      var $rl_1_lcssa = $291;
      var $rh_1_lcssa = $307;
      var $_pre_phi = $182;
      var $_pre_phi2 = $183;
      __label__ = 10;
      break;
    }
   case 10:
    var $_pre_phi2;
    var $_pre_phi;
    var $rh_1_lcssa;
    var $rl_1_lcssa;
    var $309 = HEAPU32[$cps >> 2];
    var $311 = HEAPU32[$cps + 4 >> 2];
    var $312 = $rh_1_lcssa & 65535;
    var $313 = $rh_1_lcssa >>> 16;
    var $314 = (i64Math.multiply($312, 0, $_pre_phi, 0), i64Math.result[0]);
    var $315 = (i64Math.multiply($312, 0, $_pre_phi2, 0), i64Math.result[0]);
    var $316 = (i64Math.multiply($313, 0, $_pre_phi, 0), i64Math.result[0]);
    var $317 = (i64Math.multiply($313, 0, $_pre_phi2, 0), i64Math.result[0]);
    var $319 = ($314 >>> 16) + $315 | 0;
    var $uadd4 = _llvm_uadd_with_overflow_i32($319, $316);
    var $320 = $uadd4.f0;
    var $321 = $uadd4.f1;
    var $__x3114_0 = $321 ? $317 + 65536 | 0 : $317;
    var $323 = $320 >>> 16;
    var $326 = $320 << 16 | $314 & 65535;
    var $uadd5 = _llvm_uadd_with_overflow_i32($rl_1_lcssa, $326);
    var $327 = $uadd5.f0;
    var $328 = $uadd5.f1;
    var $335 = $__x3114_0 + $323 + ($328 & 1) << $311 | $327 >>> ((32 - $311 | 0) >>> 0);
    var $336 = $335 & 65535;
    var $337 = $335 >>> 16;
    var $338 = $309 & 65535;
    var $339 = $309 >>> 16;
    var $340 = (i64Math.multiply($336, 0, $338, 0), i64Math.result[0]);
    var $341 = (i64Math.multiply($336, 0, $339, 0), i64Math.result[0]);
    var $342 = (i64Math.multiply($337, 0, $338, 0), i64Math.result[0]);
    var $343 = (i64Math.multiply($337, 0, $339, 0), i64Math.result[0]);
    var $345 = ($340 >>> 16) + $341 | 0;
    var $uadd6 = _llvm_uadd_with_overflow_i32($345, $342);
    var $346 = $uadd6.f0;
    var $347 = $uadd6.f1;
    var $__x3125_0 = $347 ? $343 + 65536 | 0 : $343;
    var $349 = $346 >>> 16;
    var $352 = $340 & 65535 | $346 << 16;
    var $353 = $327 << $311;
    var $uadd7 = _llvm_uadd_with_overflow_i32($352, $353);
    var $354 = $uadd7.f0;
    var $355 = $uadd7.f1;
    var $360 = $349 + 1 + ($355 & 1) + $335 + $__x3125_0 | 0;
    var $361 = (i64Math.multiply($360, 0, $b, 0), i64Math.result[0]);
    var $362 = $353 - $361 | 0;
    var $364 = $362 >>> 0 > $354 >>> 0 ? $b : 0;
    var $_r_0 = $364 + $362 | 0;
    var $366 = $_r_0 >>> 0 < $b >>> 0 ? 0 : $b;
    return ($_r_0 - $366 | 0) >>> ($311 >>> 0);
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_1s_4p["X"] = 1;

function _mpn_mulmod_bnm1_itch256($rn, $an, $bn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn >> 1;
    if (($1 | 0) < ($an | 0)) {
      __label__ = 3;
      break;
    } else {
      var $7 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ($1 | 0) < ($bn | 0) ? $rn : $1;
    var $7 = $5;
    __label__ = 4;
    break;
   case 4:
    var $7;
    return $rn + 4 + $7 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mod_34lsub1($p, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $n - 3 | 0;
    if (($1 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      var $a2_0_lcssa = 0;
      var $a1_0_lcssa = 0;
      var $a0_0_lcssa = 0;
      var $c2_0_lcssa = 0;
      var $c1_0_lcssa = 0;
      var $c0_0_lcssa = 0;
      var $_01_lcssa = $n;
      var $_0_lcssa = $p;
      var $_lcssa = $1;
      __label__ = 6;
      break;
    }
   case 3:
    var $3 = ($1 >>> 0) % 3;
    var $4 = $1 - $3 | 0;
    var $scevgep = $p + ($4 + 3 << 2) | 0;
    var $a2_06 = 0;
    var $a1_07 = 0;
    var $a0_08 = 0;
    var $c2_09 = 0;
    var $c1_010 = 0;
    var $c0_011 = 0;
    var $_012 = $p;
    var $7 = $1;
    __label__ = 4;
    break;
   case 4:
    var $7;
    var $_012;
    var $c0_011;
    var $c1_010;
    var $c2_09;
    var $a0_08;
    var $a1_07;
    var $a2_06;
    var $8 = HEAP32[$_012 >> 2];
    var $uadd3 = _llvm_uadd_with_overflow_i32($a0_08, $8);
    var $9 = $uadd3.f0;
    var $10 = $uadd3.f1;
    var $12 = ($10 & 1) + $c0_011 | 0;
    var $14 = HEAP32[$_012 + 4 >> 2];
    var $uadd4 = _llvm_uadd_with_overflow_i32($a1_07, $14);
    var $15 = $uadd4.f0;
    var $16 = $uadd4.f1;
    var $18 = ($16 & 1) + $c1_010 | 0;
    var $20 = HEAP32[$_012 + 8 >> 2];
    var $uadd5 = _llvm_uadd_with_overflow_i32($a2_06, $20);
    var $21 = $uadd5.f0;
    var $22 = $uadd5.f1;
    var $24 = ($22 & 1) + $c2_09 | 0;
    var $26 = $7 - 3 | 0;
    if (($26 | 0) > -1) {
      var $a2_06 = $21;
      var $a1_07 = $15;
      var $a0_08 = $9;
      var $c2_09 = $24;
      var $c1_010 = $18;
      var $c0_011 = $12;
      var $_012 = $_012 + 12 | 0;
      var $7 = $26;
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $a2_0_lcssa = $21;
    var $a1_0_lcssa = $15;
    var $a0_0_lcssa = $9;
    var $c2_0_lcssa = $24;
    var $c1_0_lcssa = $18;
    var $c0_0_lcssa = $12;
    var $_01_lcssa = $3;
    var $_0_lcssa = $scevgep;
    var $_lcssa = $n - 6 - $4 | 0;
    __label__ = 6;
    break;
   case 6:
    var $_lcssa;
    var $_0_lcssa;
    var $_01_lcssa;
    var $c0_0_lcssa;
    var $c1_0_lcssa;
    var $c2_0_lcssa;
    var $a0_0_lcssa;
    var $a1_0_lcssa;
    var $a2_0_lcssa;
    if (($_01_lcssa | 0) == 0) {
      var $c0_1 = $c0_0_lcssa;
      var $c1_1 = $c1_0_lcssa;
      var $a0_1 = $a0_0_lcssa;
      var $a1_1 = $a1_0_lcssa;
      __label__ = 9;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $33 = HEAP32[$_0_lcssa >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($a0_0_lcssa, $33);
    var $34 = $uadd.f0;
    var $35 = $uadd.f1;
    var $37 = ($35 & 1) + $c0_0_lcssa | 0;
    if (($_lcssa | 0) == -2) {
      var $c0_1 = $37;
      var $c1_1 = $c1_0_lcssa;
      var $a0_1 = $34;
      var $a1_1 = $a1_0_lcssa;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $41 = HEAP32[$_0_lcssa + 4 >> 2];
    var $uadd2 = _llvm_uadd_with_overflow_i32($a1_0_lcssa, $41);
    var $42 = $uadd2.f0;
    var $43 = $uadd2.f1;
    var $c0_1 = $37;
    var $c1_1 = ($43 & 1) + $c1_0_lcssa | 0;
    var $a0_1 = $34;
    var $a1_1 = $42;
    __label__ = 9;
    break;
   case 9:
    var $a1_1;
    var $a0_1;
    var $c1_1;
    var $c0_1;
    return ($a2_0_lcssa << 16 & 16711680) + ($a2_0_lcssa >>> 8) + ($c2_0_lcssa & 16777215) + ($c2_0_lcssa >>> 24) + ($a1_1 >>> 16) + ($a1_1 << 8 & 16776960) + ($a0_1 >>> 24) + ($a0_1 & 16777215) + ($c1_1 >>> 8) + ($c1_1 << 16 & 16711680) + ($c0_1 >>> 16) + ($c0_1 << 8 & 16776960) | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mod_34lsub1["X"] = 1;

function ___gmpn_modexact_1c_odd($src, $size, $d, $orig_c) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($size | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $3 = HEAPU32[$src >> 2];
    if ($3 >>> 0 > $orig_c >>> 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $7 = (($3 - $orig_c | 0) >>> 0) % ($d >>> 0);
    var $_ = ($7 | 0) == 0 ? 0 : $d - $7 | 0;
    return $_;
   case 5:
    var $_0 = (($orig_c - $3 | 0) >>> 0) % ($d >>> 0);
    __label__ = 11;
    break;
   case 6:
    var $16 = STRING_TABLE.___gmp_binvert_limb_table + ($d >>> 1 & 127) | 0;
    var $18 = HEAPU8[$16] & 255;
    var $19 = $18 << 1;
    var $20 = (i64Math.multiply($18, 0, $d, 0), i64Math.result[0]);
    var $21 = (i64Math.multiply($20, 0, $18, 0), i64Math.result[0]);
    var $22 = $19 - $21 | 0;
    var $23 = $22 << 1;
    var $24 = (i64Math.multiply($22, 0, $d, 0), i64Math.result[0]);
    var $25 = (i64Math.multiply($24, 0, $22, 0), i64Math.result[0]);
    var $26 = $23 - $25 | 0;
    var $27 = $d & 65535;
    var $28 = $d >>> 16;
    var $29 = $size - 1 | 0;
    var $30 = ($29 | 0) > 1;
    var $i_0 = 0;
    var $c_0 = $orig_c;
    __label__ = 7;
    break;
   case 7:
    var $c_0;
    var $i_0;
    var $33 = HEAPU32[$src + ($i_0 << 2) >> 2];
    var $34 = $33 - $c_0 | 0;
    var $36 = $34 >>> 0 > $33 >>> 0 & 1;
    var $37 = (i64Math.multiply($34, 0, $26, 0), i64Math.result[0]);
    var $38 = $37 & 65535;
    var $39 = $37 >>> 16;
    var $40 = (i64Math.multiply($38, 0, $27, 0), i64Math.result[0]);
    var $41 = (i64Math.multiply($38, 0, $28, 0), i64Math.result[0]);
    var $42 = (i64Math.multiply($39, 0, $27, 0), i64Math.result[0]);
    var $43 = (i64Math.multiply($39, 0, $28, 0), i64Math.result[0]);
    var $45 = ($40 >>> 16) + $41 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($45, $42);
    var $46 = $uadd.f0;
    var $47 = $uadd.f1;
    var $__x3_0 = $47 ? $43 + 65536 | 0 : $43;
    var $51 = ($46 >>> 16) + $36 + $__x3_0 | 0;
    var $52 = $i_0 + 1 | 0;
    if (($52 | 0) < ($29 | 0)) {
      var $i_0 = $52;
      var $c_0 = $51;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $smax = $30 ? $29 : 1;
    var $56 = HEAPU32[$src + ($smax << 2) >> 2];
    if ($56 >>> 0 > $d >>> 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $60 = $51 >>> 0 < $56 >>> 0 ? $d : 0;
    var $_0 = $51 - $56 + $60 | 0;
    __label__ = 11;
    break;
   case 10:
    var $63 = $56 - $51 | 0;
    var $65 = $63 >>> 0 > $56 >>> 0 & 1;
    var $66 = (i64Math.multiply($63, 0, $26, 0), i64Math.result[0]);
    var $67 = $66 & 65535;
    var $68 = $66 >>> 16;
    var $69 = (i64Math.multiply($67, 0, $27, 0), i64Math.result[0]);
    var $70 = (i64Math.multiply($67, 0, $28, 0), i64Math.result[0]);
    var $71 = (i64Math.multiply($68, 0, $27, 0), i64Math.result[0]);
    var $72 = (i64Math.multiply($68, 0, $28, 0), i64Math.result[0]);
    var $74 = ($69 >>> 16) + $70 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($74, $71);
    var $75 = $uadd1.f0;
    var $76 = $uadd1.f1;
    var $__x310_0 = $76 ? $72 + 65536 | 0 : $72;
    var $_0 = ($75 >>> 16) + $65 + $__x310_0 | 0;
    __label__ = 11;
    break;
   case 11:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_modexact_1c_odd["X"] = 1;

function ___gmpn_mu_bdiv_q($qp, $np, $nn, $dp, $dn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($nn | 0) > ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 3:
    var $3 = $nn - 1 | 0;
    var $6 = ($3 | 0) / ((($3 | 0) / ($dn | 0) & -1) + 1 | 0) & -1;
    var $7 = $6 + 1 | 0;
    var $8 = $scratch + ($7 << 2) | 0;
    ___gmpn_binvert($scratch, $dp, $7, $8);
    if (($dn | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $11 = $dn - 1 | 0;
    var $12 = HEAP32[$np >> 2];
    if (($11 | 0) == 0) {
      var $__dst_1 = $8;
      var $__x_1 = $12;
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $14 = $6 + $dn | 0;
    var $__n_0 = $11;
    var $__dst_0 = $8;
    var $np_pn = $np;
    var $__x_0 = $12;
    __label__ = 6;
    break;
   case 6:
    var $__x_0;
    var $np_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $np_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $17 = HEAP32[$__src_0 >> 2];
    var $18 = $__n_0 - 1 | 0;
    if (($18 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__n_0 = $18;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $np_pn = $__src_0;
      var $__x_0 = $17;
      __label__ = 6;
      break;
    }
   case 7:
    var $__dst_1 = $scratch + ($14 << 2) | 0;
    var $__x_1 = $17;
    __label__ = 8;
    break;
   case 8:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    var $22 = $np + ($dn << 2) | 0;
    ___gmpn_mullo_n($qp, $8, $scratch, $7);
    var $qn_039 = $nn - $7 | 0;
    var $24 = ($7 | 0) > 39;
    if (($qn_039 | 0) > ($7 | 0)) {
      __label__ = 10;
      break;
    } else {
      var $cy_0_lcssa = 0;
      var $_01_lcssa = $22;
      var $_0_lcssa = $qp;
      var $qn_0_lcssa = $qn_039;
      __label__ = 20;
      break;
    }
   case 10:
    var $_sum23 = $7 + $dn | 0;
    var $25 = $scratch + ($_sum23 << 2) | 0;
    var $26 = ($7 | 0) == ($dn | 0);
    var $27 = $scratch + ($dn << 2) | 0;
    var $28 = $scratch + (($dn << 1) + $7 << 2) | 0;
    var $29 = $scratch + ($7 << 1 << 2) | 0;
    var $30 = $scratch + ($_sum23 + $7 << 2) | 0;
    var $31 = $dn - $7 | 0;
    var $32 = $scratch + ($_sum23 + $dn << 2) | 0;
    var $cy_040 = 0;
    var $_0141 = $22;
    var $_042 = $qp;
    var $qn_043 = $qn_039;
    __label__ = 11;
    break;
   case 11:
    var $qn_043;
    var $_042;
    var $_0141;
    var $cy_040;
    if ($24) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $35 = ___gmpn_mul($25, $dp, $dn, $_042, $7);
    __label__ = 16;
    break;
   case 13:
    var $37 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $38 = $scratch + ($37 + $_sum23 << 2) | 0;
    ___gmpn_mulmod_bnm1($25, $37, $dp, $dn, $_042, $7, $38);
    var $39 = $_sum23 - $37 | 0;
    if (($39 | 0) > 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 14:
    var $42 = ___gmpn_sub_n($38, $25, $8, $39);
    var $43 = $scratch + ($39 + $_sum23 << 2) | 0;
    var $44 = HEAPU32[$43 >> 2];
    HEAP32[$43 >> 2] = $44 - $42 | 0;
    if ($44 >>> 0 < $42 >>> 0) {
      var $__p_0 = $43;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $__p_0;
    var $47 = $__p_0 + 4 | 0;
    var $48 = HEAP32[$47 >> 2];
    var $49 = $48 - 1 | 0;
    HEAP32[$47 >> 2] = $49;
    if (($48 | 0) == 0) {
      var $__p_0 = $47;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $51 = $_042 + ($7 << 2) | 0;
    if ($26) {
      var $cy_1 = $cy_040;
      __label__ = 19;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $53 = ___gmpn_sub_n($8, $29, $30, $31);
    var $54 = $53 + $cy_040 | 0;
    if (($54 | 0) == 2) {
      var $__p3_0 = $32;
      __label__ = 18;
      break;
    } else {
      var $cy_1 = $54;
      __label__ = 19;
      break;
    }
   case 18:
    var $__p3_0;
    var $58 = HEAP32[$__p3_0 >> 2] + 1 | 0;
    HEAP32[$__p3_0 >> 2] = $58;
    if (($58 | 0) == 0) {
      var $__p3_0 = $__p3_0 + 4 | 0;
      __label__ = 18;
      break;
    } else {
      var $cy_1 = 1;
      __label__ = 19;
      break;
    }
   case 19:
    var $cy_1;
    var $60 = _mpn_sub_nc($27, $_0141, $28, $7, $cy_1);
    var $61 = $_0141 + ($7 << 2) | 0;
    ___gmpn_mullo_n($51, $8, $scratch, $7);
    var $qn_0 = $qn_043 - $7 | 0;
    if (($qn_0 | 0) > ($7 | 0)) {
      var $cy_040 = $60;
      var $_0141 = $61;
      var $_042 = $51;
      var $qn_043 = $qn_0;
      __label__ = 11;
      break;
    } else {
      var $cy_0_lcssa = $60;
      var $_01_lcssa = $61;
      var $_0_lcssa = $51;
      var $qn_0_lcssa = $qn_0;
      __label__ = 20;
      break;
    }
   case 20:
    var $qn_0_lcssa;
    var $_0_lcssa;
    var $_01_lcssa;
    var $cy_0_lcssa;
    if ($24) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $64 = $scratch + ($7 + $dn << 2) | 0;
    var $65 = ___gmpn_mul($64, $dp, $dn, $_0_lcssa, $7);
    __label__ = 25;
    break;
   case 22:
    var $67 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $_sum12 = $7 + $dn | 0;
    var $68 = $scratch + ($_sum12 << 2) | 0;
    var $69 = $scratch + ($67 + $_sum12 << 2) | 0;
    ___gmpn_mulmod_bnm1($68, $67, $dp, $dn, $_0_lcssa, $7, $69);
    var $70 = $_sum12 - $67 | 0;
    if (($70 | 0) > 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 23:
    var $73 = ___gmpn_sub_n($69, $68, $8, $70);
    var $74 = $scratch + ($70 + $_sum12 << 2) | 0;
    var $75 = HEAPU32[$74 >> 2];
    HEAP32[$74 >> 2] = $75 - $73 | 0;
    if ($75 >>> 0 < $73 >>> 0) {
      var $__p5_0 = $74;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $__p5_0;
    var $78 = $__p5_0 + 4 | 0;
    var $79 = HEAP32[$78 >> 2];
    var $80 = $79 - 1 | 0;
    HEAP32[$78 >> 2] = $80;
    if (($79 | 0) == 0) {
      var $__p5_0 = $78;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $82 = $_0_lcssa + ($7 << 2) | 0;
    if (($7 | 0) == ($dn | 0)) {
      var $cy_2 = $cy_0_lcssa;
      __label__ = 29;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $85 = $scratch + ($7 << 1 << 2) | 0;
    var $_sum9 = $7 + $dn | 0;
    var $86 = $scratch + ($_sum9 + $7 << 2) | 0;
    var $87 = $dn - $7 | 0;
    var $88 = ___gmpn_sub_n($8, $85, $86, $87);
    var $89 = $88 + $cy_0_lcssa | 0;
    if (($89 | 0) == 2) {
      __label__ = 27;
      break;
    } else {
      var $cy_2 = $89;
      __label__ = 29;
      break;
    }
   case 27:
    var $__p7_0 = $scratch + ($_sum9 + $dn << 2) | 0;
    __label__ = 28;
    break;
   case 28:
    var $__p7_0;
    var $96 = HEAP32[$__p7_0 >> 2] + 1 | 0;
    HEAP32[$__p7_0 >> 2] = $96;
    if (($96 | 0) == 0) {
      var $__p7_0 = $__p7_0 + 4 | 0;
      __label__ = 28;
      break;
    } else {
      var $cy_2 = 1;
      __label__ = 29;
      break;
    }
   case 29:
    var $cy_2;
    var $98 = $scratch + ($dn << 2) | 0;
    var $99 = $scratch + (($dn << 1) + $7 << 2) | 0;
    var $101 = $7 - $dn + $qn_0_lcssa | 0;
    var $102 = _mpn_sub_nc($98, $_01_lcssa, $99, $101, $cy_2);
    ___gmpn_mullo_n($82, $8, $scratch, $qn_0_lcssa);
    __label__ = 36;
    break;
   case 30:
    var $104 = $nn >> 1;
    var $105 = $nn - $104 | 0;
    var $106 = $scratch + ($105 << 2) | 0;
    ___gmpn_binvert($scratch, $dp, $105, $106);
    ___gmpn_mullo_n($qp, $np, $scratch, $105);
    if (($105 | 0) > 39) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $109 = ___gmpn_mul($106, $dp, $nn, $qp, $105);
    __label__ = 35;
    break;
   case 32:
    var $111 = ___gmpn_mulmod_bnm1_next_size($nn);
    var $112 = $scratch + ($111 + $105 << 2) | 0;
    ___gmpn_mulmod_bnm1($106, $111, $dp, $nn, $qp, $105, $112);
    var $114 = $105 + $nn - $111 | 0;
    if (($114 | 0) > 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 33:
    var $117 = ___gmpn_cmp($106, $np, $114);
    var $_lobit = $117 >>> 31;
    var $118 = $scratch + ($114 + $105 << 2) | 0;
    var $119 = HEAPU32[$118 >> 2];
    HEAP32[$118 >> 2] = $119 - $_lobit | 0;
    if ($119 >>> 0 < $_lobit >>> 0) {
      var $__p9_0 = $118;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $__p9_0;
    var $122 = $__p9_0 + 4 | 0;
    var $123 = HEAP32[$122 >> 2];
    var $124 = $123 - 1 | 0;
    HEAP32[$122 >> 2] = $124;
    if (($123 | 0) == 0) {
      var $__p9_0 = $122;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $126 = $np + ($105 << 2) | 0;
    var $127 = $scratch + ($105 << 1 << 2) | 0;
    var $128 = ___gmpn_sub_n($106, $126, $127, $104);
    var $129 = $qp + ($105 << 2) | 0;
    ___gmpn_mullo_n($129, $106, $scratch, $104);
    __label__ = 36;
    break;
   case 36:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mu_bdiv_q["X"] = 1;

function _mpn_sub_nc($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_sub_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_sub_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function ___gmpn_mu_bdiv_q_itch($nn, $dn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($nn | 0) > ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    var $3 = $nn - 1 | 0;
    var $7 = (($3 | 0) / ((($3 | 0) / ($dn | 0) & -1) + 1 | 0) & -1) + 1 | 0;
    if (($7 | 0) > 39) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $itch_out_0 = 0;
    var $tn_0 = $7 + $dn | 0;
    __label__ = 6;
    break;
   case 5:
    var $12 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $13 = _mpn_mulmod_bnm1_itch256($12, $dn, $7);
    var $itch_out_0 = $13;
    var $tn_0 = $12;
    __label__ = 6;
    break;
   case 6:
    var $tn_0;
    var $itch_out_0;
    var $15 = ___gmpn_binvert_itch($7);
    var $17 = $tn_0 + $dn + $itch_out_0 | 0;
    var $19 = ($17 | 0) > ($15 | 0) ? $17 : $15;
    var $_0 = $19 + $7 | 0;
    __label__ = 11;
    break;
   case 7:
    var $23 = $nn - ($nn >> 1) | 0;
    if (($23 | 0) > 39) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $itch_out_1 = 0;
    var $tn_1 = $23 + $nn | 0;
    __label__ = 10;
    break;
   case 9:
    var $28 = ___gmpn_mulmod_bnm1_next_size($nn);
    var $29 = _mpn_mulmod_bnm1_itch256($28, $nn, $23);
    var $itch_out_1 = $29;
    var $tn_1 = $28;
    __label__ = 10;
    break;
   case 10:
    var $tn_1;
    var $itch_out_1;
    var $31 = ___gmpn_binvert_itch($23);
    var $32 = $itch_out_1 + $tn_1 | 0;
    var $34 = ($32 | 0) > ($31 | 0) ? $32 : $31;
    var $_0 = $34 + $23 | 0;
    __label__ = 11;
    break;
   case 11:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mu_bdiv_qr($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    if (($1 | 0) > ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 3:
    var $4 = $1 - 1 | 0;
    var $7 = ($4 | 0) / ((($4 | 0) / ($dn | 0) & -1) + 1 | 0) & -1;
    var $8 = $7 + 1 | 0;
    var $9 = $scratch + ($8 << 2) | 0;
    ___gmpn_binvert($scratch, $dp, $8, $9);
    if (($dn | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $12 = $dn - 1 | 0;
    var $13 = HEAP32[$np >> 2];
    if (($12 | 0) == 0) {
      var $__x_1 = $13;
      var $__dst_1 = $rp;
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $13;
      var $__n_0 = $12;
      var $__dst_0 = $rp;
      var $np_pn = $np;
      __label__ = 5;
      break;
    }
   case 5:
    var $np_pn;
    var $__dst_0;
    var $__n_0;
    var $__x_0;
    var $__src_0 = $np_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $16 = HEAP32[$__src_0 >> 2];
    var $17 = $__n_0 - 1 | 0;
    if (($17 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $__x_0 = $16;
      var $__n_0 = $17;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $np_pn = $__src_0;
      __label__ = 5;
      break;
    }
   case 6:
    var $__x_1 = $16;
    var $__dst_1 = $rp + ($12 << 2) | 0;
    __label__ = 7;
    break;
   case 7:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 8;
    break;
   case 8:
    var $21 = $np + ($dn << 2) | 0;
    if (($1 | 0) > ($8 | 0)) {
      __label__ = 9;
      break;
    } else {
      var $cy_0_lcssa = 0;
      var $qn_0_lcssa = $1;
      var $_02_lcssa = $21;
      var $_01_lcssa = $qp;
      __label__ = 19;
      break;
    }
   case 9:
    var $23 = ($8 | 0) > 39;
    var $24 = $8 + $dn | 0;
    var $25 = ($8 | 0) == ($dn | 0);
    var $27 = $rp + (($7 ^ -1) + $dn << 2) | 0;
    var $28 = $scratch + ($24 << 2) | 0;
    var $29 = $rp + ($8 << 2) | 0;
    var $30 = $scratch + ($8 << 1 << 2) | 0;
    var $31 = $dn - $8 | 0;
    var $cy_039 = 0;
    var $qn_040 = $1;
    var $_0241 = $21;
    var $_0142 = $qp;
    __label__ = 10;
    break;
   case 10:
    var $_0142;
    var $_0241;
    var $qn_040;
    var $cy_039;
    ___gmpn_mullo_n($_0142, $rp, $scratch, $8);
    if ($23) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $34 = ___gmpn_mul($9, $dp, $dn, $_0142, $8);
    __label__ = 15;
    break;
   case 12:
    var $36 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $37 = $scratch + ($36 + $8 << 2) | 0;
    ___gmpn_mulmod_bnm1($9, $36, $dp, $dn, $_0142, $8, $37);
    var $38 = $24 - $36 | 0;
    if (($38 | 0) > 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 13:
    var $41 = ___gmpn_sub_n($37, $9, $rp, $38);
    var $42 = $scratch + ($38 + $8 << 2) | 0;
    var $43 = HEAPU32[$42 >> 2];
    HEAP32[$42 >> 2] = $43 - $41 | 0;
    if ($43 >>> 0 < $41 >>> 0) {
      var $__p_0 = $42;
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $__p_0;
    var $46 = $__p_0 + 4 | 0;
    var $47 = HEAP32[$46 >> 2];
    var $48 = $47 - 1 | 0;
    HEAP32[$46 >> 2] = $48;
    if (($47 | 0) == 0) {
      var $__p_0 = $46;
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $50 = $_0142 + ($8 << 2) | 0;
    var $51 = $qn_040 - $8 | 0;
    if ($25) {
      var $cy_1 = $cy_039;
      __label__ = 18;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $53 = ___gmpn_sub_n($rp, $29, $30, $31);
    var $54 = $53 + $cy_039 | 0;
    if (($54 | 0) == 2) {
      var $__p3_0 = $28;
      __label__ = 17;
      break;
    } else {
      var $cy_1 = $54;
      __label__ = 18;
      break;
    }
   case 17:
    var $__p3_0;
    var $58 = HEAP32[$__p3_0 >> 2] + 1 | 0;
    HEAP32[$__p3_0 >> 2] = $58;
    if (($58 | 0) == 0) {
      var $__p3_0 = $__p3_0 + 4 | 0;
      __label__ = 17;
      break;
    } else {
      var $cy_1 = 1;
      __label__ = 18;
      break;
    }
   case 18:
    var $cy_1;
    var $60 = _mpn_sub_nc259($27, $_0241, $28, $8, $cy_1);
    var $61 = $_0241 + ($8 << 2) | 0;
    if (($51 | 0) > ($8 | 0)) {
      var $cy_039 = $60;
      var $qn_040 = $51;
      var $_0241 = $61;
      var $_0142 = $50;
      __label__ = 10;
      break;
    } else {
      var $cy_0_lcssa = $60;
      var $qn_0_lcssa = $51;
      var $_02_lcssa = $61;
      var $_01_lcssa = $50;
      __label__ = 19;
      break;
    }
   case 19:
    var $_01_lcssa;
    var $_02_lcssa;
    var $qn_0_lcssa;
    var $cy_0_lcssa;
    ___gmpn_mullo_n($_01_lcssa, $rp, $scratch, $qn_0_lcssa);
    if (($qn_0_lcssa | 0) > 39) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $65 = ___gmpn_mul($9, $dp, $dn, $_01_lcssa, $qn_0_lcssa);
    __label__ = 24;
    break;
   case 21:
    var $67 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $68 = $scratch + ($67 + $8 << 2) | 0;
    ___gmpn_mulmod_bnm1($9, $67, $dp, $dn, $_01_lcssa, $qn_0_lcssa, $68);
    var $70 = $qn_0_lcssa + $dn - $67 | 0;
    if (($70 | 0) > 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 22:
    var $73 = ___gmpn_sub_n($68, $9, $rp, $70);
    var $74 = $scratch + ($70 + $8 << 2) | 0;
    var $75 = HEAPU32[$74 >> 2];
    HEAP32[$74 >> 2] = $75 - $73 | 0;
    if ($75 >>> 0 < $73 >>> 0) {
      var $__p5_0 = $74;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $__p5_0;
    var $78 = $__p5_0 + 4 | 0;
    var $79 = HEAP32[$78 >> 2];
    var $80 = $79 - 1 | 0;
    HEAP32[$78 >> 2] = $80;
    if (($79 | 0) == 0) {
      var $__p5_0 = $78;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    if (($qn_0_lcssa | 0) == ($dn | 0)) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $cy_2 = $cy_0_lcssa;
    var $_sum12_pre_phi = $dn - $qn_0_lcssa | 0;
    __label__ = 29;
    break;
   case 26:
    var $84 = $rp + ($qn_0_lcssa << 2) | 0;
    var $85 = $scratch + ($qn_0_lcssa + $8 << 2) | 0;
    var $86 = $dn - $qn_0_lcssa | 0;
    var $87 = ___gmpn_sub_n($rp, $84, $85, $86);
    var $88 = $87 + $cy_0_lcssa | 0;
    if (($88 | 0) == 2) {
      __label__ = 27;
      break;
    } else {
      var $cy_2 = $88;
      var $_sum12_pre_phi = $86;
      __label__ = 29;
      break;
    }
   case 27:
    var $__p7_0 = $scratch + ($8 + $dn << 2) | 0;
    __label__ = 28;
    break;
   case 28:
    var $__p7_0;
    var $95 = HEAP32[$__p7_0 >> 2] + 1 | 0;
    HEAP32[$__p7_0 >> 2] = $95;
    if (($95 | 0) == 0) {
      var $__p7_0 = $__p7_0 + 4 | 0;
      __label__ = 28;
      break;
    } else {
      var $cy_2 = 1;
      var $_sum12_pre_phi = $86;
      __label__ = 29;
      break;
    }
   case 29:
    var $_sum12_pre_phi;
    var $cy_2;
    var $97 = $rp + ($_sum12_pre_phi << 2) | 0;
    var $98 = $scratch + ($8 + $dn << 2) | 0;
    var $99 = _mpn_sub_nc259($97, $_02_lcssa, $98, $qn_0_lcssa, $cy_2);
    var $_0 = $99;
    __label__ = 43;
    break;
   case 30:
    var $101 = $1 >> 1;
    var $102 = $1 - $101 | 0;
    var $103 = $scratch + ($102 << 2) | 0;
    ___gmpn_binvert($scratch, $dp, $102, $103);
    ___gmpn_mullo_n($qp, $np, $scratch, $102);
    if (($102 | 0) > 39) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $106 = ___gmpn_mul($103, $dp, $dn, $qp, $102);
    __label__ = 35;
    break;
   case 32:
    var $108 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $109 = $scratch + ($108 + $102 << 2) | 0;
    ___gmpn_mulmod_bnm1($103, $108, $dp, $dn, $qp, $102, $109);
    var $111 = $102 + $dn - $108 | 0;
    if (($111 | 0) > 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 33:
    var $114 = ___gmpn_sub_n($109, $103, $np, $111);
    var $115 = $scratch + ($111 + $102 << 2) | 0;
    var $116 = HEAPU32[$115 >> 2];
    HEAP32[$115 >> 2] = $116 - $114 | 0;
    if ($116 >>> 0 < $114 >>> 0) {
      var $__p9_0 = $115;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $__p9_0;
    var $119 = $__p9_0 + 4 | 0;
    var $120 = HEAP32[$119 >> 2];
    var $121 = $120 - 1 | 0;
    HEAP32[$119 >> 2] = $121;
    if (($120 | 0) == 0) {
      var $__p9_0 = $119;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $123 = $qp + ($102 << 2) | 0;
    var $124 = $np + ($102 << 2) | 0;
    var $125 = $scratch + ($102 << 1 << 2) | 0;
    var $126 = ___gmpn_sub_n($rp, $124, $125, $dn);
    ___gmpn_mullo_n($123, $rp, $scratch, $101);
    if (($101 | 0) > 39) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $129 = ___gmpn_mul($103, $dp, $dn, $123, $101);
    __label__ = 40;
    break;
   case 37:
    var $131 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $132 = $scratch + ($131 + $102 << 2) | 0;
    ___gmpn_mulmod_bnm1($103, $131, $dp, $dn, $123, $101, $132);
    var $134 = $101 + $dn - $131 | 0;
    if (($134 | 0) > 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 38:
    var $137 = ___gmpn_sub_n($132, $103, $rp, $134);
    var $138 = $scratch + ($134 + $102 << 2) | 0;
    var $139 = HEAPU32[$138 >> 2];
    HEAP32[$138 >> 2] = $139 - $137 | 0;
    if ($139 >>> 0 < $137 >>> 0) {
      var $__p11_0 = $138;
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    var $__p11_0;
    var $142 = $__p11_0 + 4 | 0;
    var $143 = HEAP32[$142 >> 2];
    var $144 = $143 - 1 | 0;
    HEAP32[$142 >> 2] = $144;
    if (($143 | 0) == 0) {
      var $__p11_0 = $142;
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $146 = $rp + ($101 << 2) | 0;
    var $147 = $scratch + ($1 << 2) | 0;
    var $148 = $dn - $101 | 0;
    var $149 = ___gmpn_sub_n($rp, $146, $147, $148);
    var $150 = $149 + $126 | 0;
    var $_sum7 = $102 + $dn | 0;
    var $152 = $scratch + ($_sum7 << 2) | 0;
    if (($150 | 0) == 2) {
      var $__p13_0 = $152;
      __label__ = 41;
      break;
    } else {
      var $cy_3 = $150;
      var $_sum5_pre_phi = $_sum7;
      var $_pre_phi = $152;
      __label__ = 42;
      break;
    }
   case 41:
    var $__p13_0;
    var $156 = HEAP32[$__p13_0 >> 2] + 1 | 0;
    HEAP32[$__p13_0 >> 2] = $156;
    if (($156 | 0) == 0) {
      var $__p13_0 = $__p13_0 + 4 | 0;
      __label__ = 41;
      break;
    } else {
      var $cy_3 = 1;
      var $_sum5_pre_phi = $_sum7;
      var $_pre_phi = $152;
      __label__ = 42;
      break;
    }
   case 42:
    var $_pre_phi;
    var $_sum5_pre_phi;
    var $cy_3;
    var $158 = $rp + ($148 << 2) | 0;
    var $159 = $np + ($_sum5_pre_phi << 2) | 0;
    var $160 = _mpn_sub_nc259($158, $159, $_pre_phi, $101, $cy_3);
    var $_0 = $160;
    __label__ = 43;
    break;
   case 43:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mu_bdiv_qr["X"] = 1;

function _mpn_sub_nc259($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_sub_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_sub_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function ___gmpn_mu_bdiv_qr_itch($nn, $dn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    if (($1 | 0) > ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    var $4 = $1 - 1 | 0;
    var $8 = (($4 | 0) / ((($4 | 0) / ($dn | 0) & -1) + 1 | 0) & -1) + 1 | 0;
    if (($8 | 0) > 39) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $itch_out_0 = 0;
    var $tn_0 = $8 + $dn | 0;
    __label__ = 6;
    break;
   case 5:
    var $13 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $14 = _mpn_mulmod_bnm1_itch262($13, $dn, $8);
    var $itch_out_0 = $14;
    var $tn_0 = $13;
    __label__ = 6;
    break;
   case 6:
    var $tn_0;
    var $itch_out_0;
    var $16 = ___gmpn_binvert_itch($8);
    var $17 = $itch_out_0 + $tn_0 | 0;
    var $19 = ($17 | 0) > ($16 | 0) ? $17 : $16;
    var $_0 = $19 + $8 | 0;
    __label__ = 11;
    break;
   case 7:
    var $23 = $1 - ($1 >> 1) | 0;
    if (($23 | 0) > 39) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $itch_out_1 = 0;
    var $tn_1 = $23 + $dn | 0;
    __label__ = 10;
    break;
   case 9:
    var $28 = ___gmpn_mulmod_bnm1_next_size($dn);
    var $29 = _mpn_mulmod_bnm1_itch262($28, $dn, $23);
    var $itch_out_1 = $29;
    var $tn_1 = $28;
    __label__ = 10;
    break;
   case 10:
    var $tn_1;
    var $itch_out_1;
    var $31 = ___gmpn_binvert_itch($23);
    var $32 = $itch_out_1 + $tn_1 | 0;
    var $34 = ($32 | 0) > ($31 | 0) ? $32 : $31;
    var $_0 = $34 + $23 | 0;
    __label__ = 11;
    break;
   case 11:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_mulmod_bnm1_itch262($rn, $an, $bn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn >> 1;
    if (($1 | 0) < ($an | 0)) {
      __label__ = 3;
      break;
    } else {
      var $7 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ($1 | 0) < ($bn | 0) ? $rn : $1;
    var $7 = $5;
    __label__ = 4;
    break;
   case 4:
    var $7;
    return $rn + 4 + $7 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mu_div_q($qp, $np, $nn, $dp, $dn, $scratch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $1 = $nn - $dn | 0;
    var $2 = $1 + 1 | 0;
    var $3 = $2 << 2;
    var $4 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $3);
    var $5 = $4;
    if (($1 | 0) < ($dn | 0)) {
      __label__ = 50;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($1 | 0) == ($dn | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $10 = $1 - $dn | 0;
    var $11 = ___gmpn_mu_div_qr_choose_in($10, $dn, 0);
    var $12 = $dn + 1 | 0;
    var $13 = ___gmpn_mu_divappr_q_choose_in($12, $dn, 0);
    var $15 = ($11 | 0) > ($13 | 0) ? $11 : $13;
    var $in_0 = $15;
    __label__ = 6;
    break;
   case 5:
    var $17 = $dn + 1 | 0;
    var $18 = ___gmpn_mu_divappr_q_choose_in($17, $dn, 0);
    var $in_0 = $18;
    __label__ = 6;
    break;
   case 6:
    var $in_0;
    var $20 = $in_0 + 1 | 0;
    var $22 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $20 << 2);
    var $23 = $22;
    if (($in_0 | 0) == ($dn | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 7:
    if (($dn | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $28 = $dn - 1 | 0;
    var $29 = $scratch + 4 | 0;
    var $30 = HEAP32[$dp >> 2];
    if (($28 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $__n_0 = $28;
      var $__dst_0 = $29;
      var $dp_pn = $dp;
      var $__x_0 = $30;
      __label__ = 10;
      break;
    }
   case 9:
    HEAP32[$29 >> 2] = $30;
    HEAP32[$scratch >> 2] = 1;
    var $32 = ___gmpn_invertappr($23, $scratch, $20, 0);
    var $__dst2_1 = $23;
    var $__x4_1 = HEAP32[$22 + 4 >> 2];
    __label__ = 14;
    break;
   case 10:
    var $__x_0;
    var $dp_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $dp_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $37 = HEAP32[$__src_0 >> 2];
    var $38 = $__n_0 - 1 | 0;
    if (($38 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__n_0 = $38;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $dp_pn = $__src_0;
      var $__x_0 = $37;
      __label__ = 10;
      break;
    }
   case 11:
    HEAP32[$scratch + ($dn << 2) >> 2] = $37;
    HEAP32[$scratch >> 2] = 1;
    var $40 = ___gmpn_invertappr($23, $scratch, $20, 0);
    var $scevgep47 = $22 + (($dn << 2) - 4) | 0;
    var $__n1_0 = $28;
    var $__dst2_0 = $23;
    var $__src3_0 = $22 + 8 | 0;
    var $__x4_0 = HEAP32[$22 + 4 >> 2];
    __label__ = 12;
    break;
   case 12:
    var $__x4_0;
    var $__src3_0;
    var $__dst2_0;
    var $__n1_0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $51 = HEAP32[$__src3_0 >> 2];
    var $52 = $__n1_0 - 1 | 0;
    if (($52 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__n1_0 = $52;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__src3_0 = $__src3_0 + 4 | 0;
      var $__x4_0 = $51;
      __label__ = 12;
      break;
    }
   case 13:
    var $__dst2_1 = $scevgep47;
    var $__x4_1 = $51;
    __label__ = 14;
    break;
   case 14:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 25;
    break;
   case 15:
    var $57 = $dp + (($in_0 ^ -1) + $dn << 2) | 0;
    var $58 = ___gmpn_add_1($scratch, $57, $20, 1);
    if (($58 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if (($in_0 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 17:
    var $63 = ___gmpn_invertappr($23, $scratch, $20, 0);
    if (($in_0 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $66 = $in_0 - 1 | 0;
    var $69 = HEAP32[$22 + 4 >> 2];
    if (($66 | 0) == 0) {
      var $__dst8_1 = $23;
      var $__x10_1 = $69;
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $scevgep = $22 + (($in_0 << 2) - 4) | 0;
    var $__n7_0 = $66;
    var $__dst8_0 = $23;
    var $__src9_0 = $22 + 8 | 0;
    var $__x10_0 = $69;
    __label__ = 20;
    break;
   case 20:
    var $__x10_0;
    var $__src9_0;
    var $__dst8_0;
    var $__n7_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $78 = HEAP32[$__src9_0 >> 2];
    var $79 = $__n7_0 - 1 | 0;
    if (($79 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $__n7_0 = $79;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__x10_0 = $78;
      __label__ = 20;
      break;
    }
   case 21:
    var $__dst8_1 = $scevgep;
    var $__x10_1 = $78;
    __label__ = 22;
    break;
   case 22:
    var $__x10_1;
    var $__dst8_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    __label__ = 25;
    break;
   case 23:
    HEAP32[$scratch >> 2] = 1;
    var $82 = ___gmpn_invertappr($23, $scratch, $20, 0);
    __label__ = 25;
    break;
   case 24:
    _memset($22, 0, $in_0 << 2, 4);
    __label__ = 25;
    break;
   case 25:
    var $86 = $dn << 1 | 1;
    var $87 = $86 << 2;
    var $88 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $87);
    var $89 = $88;
    var $90 = $1 - $dn | 0;
    var $91 = ___gmpn_mu_div_qr_choose_in($90, $dn, 0);
    var $92 = $23 + ($in_0 - $91 << 2) | 0;
    var $_sum4 = $dn + 1 | 0;
    var $93 = $5 + ($_sum4 << 2) | 0;
    var $94 = $89 + ($_sum4 << 2) | 0;
    var $95 = $np + ($dn << 2) | 0;
    var $96 = ___gmpn_preinv_mu_div_qr($93, $94, $95, $1, $dp, $dn, $92, $91, $scratch);
    if (($dn | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $99 = $dn - 1 | 0;
    var $101 = $88 + 4 | 0;
    var $102 = HEAP32[$np >> 2];
    if (($99 | 0) == 0) {
      var $__dst12_1 = $101;
      var $__x14_1 = $102;
      __label__ = 30;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $scevgep52 = $88 + ($dn << 2) | 0;
    var $__n11_0 = $99;
    var $__dst12_0 = $101;
    var $np_pn = $np;
    var $__x14_0 = $102;
    __label__ = 28;
    break;
   case 28:
    var $__x14_0;
    var $np_pn;
    var $__dst12_0;
    var $__n11_0;
    var $__src13_0 = $np_pn + 4 | 0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    var $107 = HEAP32[$__src13_0 >> 2];
    var $108 = $__n11_0 - 1 | 0;
    if (($108 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      var $__n11_0 = $108;
      var $__dst12_0 = $__dst12_0 + 4 | 0;
      var $np_pn = $__src13_0;
      var $__x14_0 = $107;
      __label__ = 28;
      break;
    }
   case 29:
    var $__dst12_1 = $scevgep52;
    var $__x14_1 = $107;
    __label__ = 30;
    break;
   case 30:
    var $__x14_1;
    var $__dst12_1;
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    __label__ = 31;
    break;
   case 31:
    HEAP32[$89 >> 2] = 0;
    var $112 = ___gmpn_mu_divappr_q_choose_in($_sum4, $dn, 0);
    var $113 = $23 + ($in_0 - $112 << 2) | 0;
    var $114 = ___gmpn_preinv_mu_divappr_q($5, $89, $86, $dp, $dn, $113, $112, $scratch);
    if (($114 | 0) != 0 & ($_sum4 | 0) > 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $118 = ($dn << 2) + 4 | 0;
    _memset($4, -1, $118, 4);
    __label__ = 33;
    break;
   case 33:
    if (HEAPU32[$5 >> 2] >>> 0 > 4) {
      __label__ = 34;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 34:
    if (($nn | 0) == ($dn | 0)) {
      var $qh_0 = $96;
      __label__ = 67;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $124 = $1 - 1 | 0;
    var $127 = HEAP32[$4 + 4 >> 2];
    if (($124 | 0) == 0) {
      var $__dst16_1 = $qp;
      var $__x18_1 = $127;
      __label__ = 39;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $132 = $nn - 1 - $dn | 0;
    var $__n15_0 = $124;
    var $__dst16_0 = $qp;
    var $__src17_0 = $4 + 8 | 0;
    var $__x18_0 = $127;
    __label__ = 37;
    break;
   case 37:
    var $__x18_0;
    var $__src17_0;
    var $__dst16_0;
    var $__n15_0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    var $136 = HEAP32[$__src17_0 >> 2];
    var $137 = $__n15_0 - 1 | 0;
    if (($137 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      var $__n15_0 = $137;
      var $__dst16_0 = $__dst16_0 + 4 | 0;
      var $__src17_0 = $__src17_0 + 4 | 0;
      var $__x18_0 = $136;
      __label__ = 37;
      break;
    }
   case 38:
    var $__dst16_1 = $qp + ($132 << 2) | 0;
    var $__x18_1 = $136;
    __label__ = 39;
    break;
   case 39:
    var $__x18_1;
    var $__dst16_1;
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    var $qh_0 = $96;
    __label__ = 67;
    break;
   case 40:
    var $141 = $nn << 2;
    var $142 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $141);
    var $143 = $142;
    var $145 = $4 + 4 | 0;
    var $146 = ___gmpn_mul($143, $145, $1, $dp, $dn);
    if (($96 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $149 = $143 + ($1 << 2) | 0;
    var $150 = ___gmpn_add_n($149, $149, $dp, $dn);
    if (($150 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $151 = ___gmpn_cmp($143, $np, $nn);
    if (($151 | 0) > 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 43:
    var $154 = ___gmpn_sub_1($qp, $145, $1, 1);
    var $qh_0 = $96 - $154 | 0;
    __label__ = 67;
    break;
   case 44:
    if (($nn | 0) == ($dn | 0)) {
      var $qh_0 = $96;
      __label__ = 67;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $159 = $1 - 1 | 0;
    var $160 = HEAP32[$145 >> 2];
    if (($159 | 0) == 0) {
      var $__x23_1 = $160;
      var $__dst21_1 = $qp;
      __label__ = 49;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $165 = $nn - 1 - $dn | 0;
    var $__x23_0 = $160;
    var $__src22_0 = $4 + 8 | 0;
    var $__dst21_0 = $qp;
    var $__n20_0 = $159;
    __label__ = 47;
    break;
   case 47:
    var $__n20_0;
    var $__dst21_0;
    var $__src22_0;
    var $__x23_0;
    HEAP32[$__dst21_0 >> 2] = $__x23_0;
    var $169 = HEAP32[$__src22_0 >> 2];
    var $170 = $__n20_0 - 1 | 0;
    if (($170 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      var $__x23_0 = $169;
      var $__src22_0 = $__src22_0 + 4 | 0;
      var $__dst21_0 = $__dst21_0 + 4 | 0;
      var $__n20_0 = $170;
      __label__ = 47;
      break;
    }
   case 48:
    var $__x23_1 = $169;
    var $__dst21_1 = $qp + ($165 << 2) | 0;
    __label__ = 49;
    break;
   case 49:
    var $__dst21_1;
    var $__x23_1;
    HEAP32[$__dst21_1 >> 2] = $__x23_1;
    var $qh_0 = $96;
    __label__ = 67;
    break;
   case 50:
    var $174 = $1 << 1;
    var $175 = $174 + 2 | 0;
    var $177 = $np + ($nn - 2 - $174 << 2) | 0;
    var $179 = $dp + (($1 ^ -1) + $dn << 2) | 0;
    var $180 = ___gmpn_mu_divappr_q($5, $177, $175, $179, $2, $scratch);
    if (HEAPU32[$5 >> 2] >>> 0 > 6) {
      __label__ = 51;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 51:
    if (($nn | 0) == ($dn | 0)) {
      var $qh_0 = $180;
      __label__ = 67;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    var $186 = $1 - 1 | 0;
    var $189 = HEAP32[$4 + 4 >> 2];
    if (($186 | 0) == 0) {
      var $__x27_1 = $189;
      var $__dst25_1 = $qp;
      __label__ = 56;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    var $194 = $nn - 1 - $dn | 0;
    var $__x27_0 = $189;
    var $__src26_0 = $4 + 8 | 0;
    var $__dst25_0 = $qp;
    var $__n24_0 = $186;
    __label__ = 54;
    break;
   case 54:
    var $__n24_0;
    var $__dst25_0;
    var $__src26_0;
    var $__x27_0;
    HEAP32[$__dst25_0 >> 2] = $__x27_0;
    var $198 = HEAP32[$__src26_0 >> 2];
    var $199 = $__n24_0 - 1 | 0;
    if (($199 | 0) == 0) {
      __label__ = 55;
      break;
    } else {
      var $__x27_0 = $198;
      var $__src26_0 = $__src26_0 + 4 | 0;
      var $__dst25_0 = $__dst25_0 + 4 | 0;
      var $__n24_0 = $199;
      __label__ = 54;
      break;
    }
   case 55:
    var $__x27_1 = $198;
    var $__dst25_1 = $qp + ($194 << 2) | 0;
    __label__ = 56;
    break;
   case 56:
    var $__dst25_1;
    var $__x27_1;
    HEAP32[$__dst25_1 >> 2] = $__x27_1;
    var $qh_0 = $180;
    __label__ = 67;
    break;
   case 57:
    var $203 = $nn << 2;
    var $204 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $203);
    var $205 = $204;
    var $207 = $4 + 4 | 0;
    var $208 = ___gmpn_mul($205, $dp, $dn, $207, $1);
    if (($180 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $211 = $205 + ($1 << 2) | 0;
    var $212 = ___gmpn_add_n($211, $211, $dp, $dn);
    if (($212 | 0) == 0) {
      __label__ = 59;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 59:
    var $213 = ___gmpn_cmp($205, $np, $nn);
    if (($213 | 0) > 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 60:
    var $216 = ___gmpn_sub_1($qp, $207, $1, 1);
    var $qh_0 = $180 - $216 | 0;
    __label__ = 67;
    break;
   case 61:
    if (($nn | 0) == ($dn | 0)) {
      var $qh_0 = $180;
      __label__ = 67;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    var $221 = $1 - 1 | 0;
    var $222 = HEAP32[$207 >> 2];
    if (($221 | 0) == 0) {
      var $__x32_1 = $222;
      var $__dst30_1 = $qp;
      __label__ = 66;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $227 = $nn - 1 - $dn | 0;
    var $__x32_0 = $222;
    var $__src31_0 = $4 + 8 | 0;
    var $__dst30_0 = $qp;
    var $__n29_0 = $221;
    __label__ = 64;
    break;
   case 64:
    var $__n29_0;
    var $__dst30_0;
    var $__src31_0;
    var $__x32_0;
    HEAP32[$__dst30_0 >> 2] = $__x32_0;
    var $231 = HEAP32[$__src31_0 >> 2];
    var $232 = $__n29_0 - 1 | 0;
    if (($232 | 0) == 0) {
      __label__ = 65;
      break;
    } else {
      var $__x32_0 = $231;
      var $__src31_0 = $__src31_0 + 4 | 0;
      var $__dst30_0 = $__dst30_0 + 4 | 0;
      var $__n29_0 = $232;
      __label__ = 64;
      break;
    }
   case 65:
    var $__x32_1 = $231;
    var $__dst30_1 = $qp + ($227 << 2) | 0;
    __label__ = 66;
    break;
   case 66:
    var $__dst30_1;
    var $__x32_1;
    HEAP32[$__dst30_1 >> 2] = $__x32_1;
    var $qh_0 = $180;
    __label__ = 67;
    break;
   case 67:
    var $qh_0;
    var $236 = HEAP32[$__tmp_marker >> 2];
    if (($236 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    ___gmp_tmp_reentrant_free($236);
    __label__ = 69;
    break;
   case 69:
    STACKTOP = __stackBase__;
    return $qh_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mu_div_q["X"] = 1;

function ___gmpn_mu_div_q_itch($nn, $dn, $mua_k) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    if (($1 | 0) < ($dn | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = ___gmpn_mu_div_qr_itch($1, $dn, $mua_k);
    var $6 = $dn << 1 | 1;
    var $7 = ___gmpn_mu_divappr_q_itch($6, $dn, $mua_k);
    var $9 = ($4 | 0) > ($7 | 0) ? $4 : $7;
    var $_0 = $9;
    __label__ = 5;
    break;
   case 4:
    var $12 = ($1 << 1) + 2 | 0;
    var $13 = $1 + 1 | 0;
    var $14 = ___gmpn_mu_divappr_q_itch($12, $13, $mua_k);
    var $_0 = $14;
    __label__ = 5;
    break;
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    if (($1 + 100 | 0) < ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 3:
    var $6 = $1 << 1 | 1;
    var $_sum = $nn - $6 | 0;
    var $7 = $rp + ($_sum << 2) | 0;
    var $8 = $np + ($_sum << 2) | 0;
    var $9 = $1 + 1 | 0;
    var $11 = $dp + (($1 ^ -1) + $dn << 2) | 0;
    var $12 = _mpn_mu_div_qr2($qp, $7, $8, $6, $11, $9, $scratch);
    var $13 = $dn - $9 | 0;
    if (($13 | 0) > ($1 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $16 = ___gmpn_mul($scratch, $dp, $13, $qp, $1);
    __label__ = 6;
    break;
   case 5:
    var $18 = ___gmpn_mul($scratch, $qp, $1, $dp, $13);
    __label__ = 6;
    break;
   case 6:
    if (($12 | 0) == 0) {
      var $cy_0 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $22 = $scratch + ($1 << 2) | 0;
    var $23 = ___gmpn_add_n($22, $22, $dp, $13);
    var $cy_0 = $23;
    __label__ = 8;
    break;
   case 8:
    var $cy_0;
    HEAP32[$scratch + ($dn - 1 << 2) >> 2] = $cy_0;
    var $27 = ___gmpn_sub_n($rp, $np, $scratch, $_sum);
    var $28 = $scratch + ($_sum << 2) | 0;
    var $29 = _mpn_sub_nc272($7, $7, $28, $9, $27);
    if (($29 | 0) == 0) {
      var $qh_0 = $12;
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $32 = ___gmpn_sub_1($qp, $qp, $1, 1);
    var $33 = $12 - $32 | 0;
    var $34 = ___gmpn_add_n($rp, $rp, $dp, $dn);
    var $qh_0 = $33;
    __label__ = 11;
    break;
   case 10:
    var $36 = _mpn_mu_div_qr2($qp, $rp, $np, $nn, $dp, $dn, $scratch);
    var $qh_0 = $36;
    __label__ = 11;
    break;
   case 11:
    var $qh_0;
    return $qh_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_mu_div_qr2($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $scratch14 = $scratch;
    var $1 = $nn - $dn | 0;
    var $2 = ___gmpn_mu_div_qr_choose_in($1, $dn, 0);
    var $3 = $scratch + ($2 << 2) | 0;
    var $_sum = $2 + 1 | 0;
    var $4 = $scratch + ($_sum << 2) | 0;
    if (($2 | 0) == ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 3:
    if (($dn | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $9 = $dn - 1 | 0;
    var $10 = $scratch + ($dn + 2 << 2) | 0;
    var $11 = HEAP32[$dp >> 2];
    var $12 = ($9 | 0) == 0;
    if ($12) {
      var $__x_1 = $11;
      var $__dst_1 = $10;
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $14 = $dn << 1 | 1;
    var $__x_0 = $11;
    var $dp_pn = $dp;
    var $__dst_0 = $10;
    var $__n_0 = $9;
    __label__ = 6;
    break;
   case 6:
    var $__n_0;
    var $__dst_0;
    var $dp_pn;
    var $__x_0;
    var $__src_0 = $dp_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $17 = HEAP32[$__src_0 >> 2];
    var $18 = $__n_0 - 1 | 0;
    if (($18 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $17;
      var $dp_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $18;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $17;
    var $__dst_1 = $scratch + ($14 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    HEAP32[$4 >> 2] = 1;
    var $21 = $dn + 1 | 0;
    var $22 = ___gmpn_invertappr($scratch, $4, $21, 0);
    var $24 = HEAP32[$scratch + 4 >> 2];
    if ($12) {
      var $__x4_1 = $24;
      var $__dst2_1 = $scratch;
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $__x4_0 = $24;
    var $__src3_0 = $scratch + 8 | 0;
    var $__dst2_0 = $scratch;
    var $__n1_0 = $9;
    __label__ = 10;
    break;
   case 10:
    var $__n1_0;
    var $__dst2_0;
    var $__src3_0;
    var $__x4_0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $29 = HEAP32[$__src3_0 >> 2];
    var $30 = $__n1_0 - 1 | 0;
    if (($30 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__x4_0 = $29;
      var $__src3_0 = $__src3_0 + 4 | 0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $30;
      __label__ = 10;
      break;
    }
   case 11:
    var $__x4_1 = $29;
    var $__dst2_1 = $scratch + ($9 << 2) | 0;
    __label__ = 12;
    break;
   case 12:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 23;
    break;
   case 13:
    var $35 = $dp + (($2 ^ -1) + $dn << 2) | 0;
    var $36 = ___gmpn_add_1($4, $35, $_sum, 1);
    if (($36 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if (($2 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 15:
    var $41 = ___gmpn_invertappr($scratch, $4, $_sum, 0);
    if (($2 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $44 = $2 - 1 | 0;
    var $46 = HEAP32[$scratch + 4 >> 2];
    if (($44 | 0) == 0) {
      var $__x10_1 = $46;
      var $__dst8_1 = $scratch;
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $__x10_0 = $46;
    var $__src9_0 = $scratch + 8 | 0;
    var $__dst8_0 = $scratch;
    var $__n7_0 = $44;
    __label__ = 18;
    break;
   case 18:
    var $__n7_0;
    var $__dst8_0;
    var $__src9_0;
    var $__x10_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $52 = HEAP32[$__src9_0 >> 2];
    var $53 = $__n7_0 - 1 | 0;
    if (($53 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__x10_0 = $52;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $53;
      __label__ = 18;
      break;
    }
   case 19:
    var $__x10_1 = $52;
    var $__dst8_1 = $scratch + ($44 << 2) | 0;
    __label__ = 20;
    break;
   case 20:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    __label__ = 23;
    break;
   case 21:
    HEAP32[$4 >> 2] = 1;
    var $56 = ___gmpn_invertappr($scratch, $4, 1, 0);
    __label__ = 23;
    break;
   case 22:
    var $57 = $2 << 2;
    _memset($scratch14, 0, $57, 4);
    __label__ = 23;
    break;
   case 23:
    var $59 = ___gmpn_preinv_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $scratch, $2, $3);
    return $59;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_mu_div_qr2["X"] = 1;

function _mpn_sub_nc272($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_sub_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_sub_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function ___gmpn_preinv_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $ip, $in, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    var $2 = $np + ($1 << 2) | 0;
    var $3 = $qp + ($1 << 2) | 0;
    var $4 = ___gmpn_cmp($2, $dp, $dn);
    var $_lobit_not = $4 >>> 31 ^ 1;
    if (($4 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = ___gmpn_sub_n($rp, $2, $dp, $dn);
    __label__ = 10;
    break;
   case 4:
    if (($dn | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $11 = $dn - 1 | 0;
    var $12 = HEAP32[$2 >> 2];
    if (($11 | 0) == 0) {
      var $__x_1 = $12;
      var $__dst_1 = $rp;
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $__x_0 = $12;
    var $__src_0 = $np + ($1 + 1 << 2) | 0;
    var $__n_0 = $11;
    var $__dst_0 = $rp;
    __label__ = 7;
    break;
   case 7:
    var $__dst_0;
    var $__n_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $18 = HEAP32[$__src_0 >> 2];
    var $19 = $__n_0 - 1 | 0;
    if (($19 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $18;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__n_0 = $19;
      var $__dst_0 = $__dst_0 + 4 | 0;
      __label__ = 7;
      break;
    }
   case 8:
    var $__x_1 = $18;
    var $__dst_1 = $rp + ($11 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 10;
    break;
   case 10:
    if (($nn | 0) == ($dn | 0)) {
      __label__ = 38;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $24 = $dn + 1 | 0;
    var $25 = $scratch + ($dn << 2) | 0;
    var $26 = ($dn | 0) == 0;
    var $27 = $dn - 1 | 0;
    var $28 = ($27 | 0) == 0;
    var $scevgep24 = $rp + ($27 << 2) | 0;
    var $_01 = $3;
    var $_02 = $2;
    var $_03 = $ip;
    var $_04 = $in;
    var $qn_0 = $1;
    __label__ = 12;
    break;
   case 12:
    var $qn_0;
    var $_04;
    var $_03;
    var $_02;
    var $_01;
    if (($qn_0 | 0) > 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 13:
    if (($qn_0 | 0) < ($_04 | 0)) {
      __label__ = 14;
      break;
    } else {
      var $_1 = $_03;
      var $_15 = $_04;
      __label__ = 15;
      break;
    }
   case 14:
    var $_1 = $_03 + ($_04 - $qn_0 << 2) | 0;
    var $_15 = $qn_0;
    __label__ = 15;
    break;
   case 15:
    var $_15;
    var $_1;
    var $36 = -$_15 | 0;
    var $37 = $_02 + ($36 << 2) | 0;
    var $38 = $_01 + ($36 << 2) | 0;
    var $_sum = $dn - $_15 | 0;
    var $39 = $rp + ($_sum << 2) | 0;
    ___gmpn_mul_n($scratch, $39, $_1, $_15);
    var $40 = $scratch + ($_15 << 2) | 0;
    var $41 = ___gmpn_add_n($38, $40, $39, $_15);
    if (($41 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    ___gmp_assert_fail(STRING_TABLE.__str267 | 0, 269, STRING_TABLE.__str2341 | 0);
    throw "Reached an unreachable!";
   case 17:
    var $45 = $qn_0 - $_15 | 0;
    if (($_15 | 0) > 39) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $48 = ___gmpn_mul($scratch, $dp, $dn, $38, $_15);
    __label__ = 24;
    break;
   case 19:
    var $50 = ___gmpn_mulmod_bnm1_next_size($24);
    var $51 = $scratch + ($50 << 2) | 0;
    ___gmpn_mulmod_bnm1($scratch, $50, $dp, $dn, $38, $_15, $51);
    var $53 = $_15 + $dn - $50 | 0;
    if (($53 | 0) > 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 20:
    var $56 = $rp + ($dn - $53 << 2) | 0;
    var $57 = ___gmpn_sub_n($scratch, $scratch, $56, $53);
    var $58 = $scratch + ($53 << 2) | 0;
    var $59 = $50 - $53 | 0;
    var $60 = ___gmpn_sub_1($58, $58, $59, $57);
    var $61 = $50 - $dn | 0;
    var $62 = ___gmpn_cmp($39, $25, $61);
    var $_lobit7 = $62 >>> 31;
    if ($_lobit7 >>> 0 < $60 >>> 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    ___gmp_assert_fail(STRING_TABLE.__str267 | 0, 289, STRING_TABLE.__str2282 | 0);
    throw "Reached an unreachable!";
   case 22:
    var $66 = HEAP32[$scratch >> 2];
    var $67 = $_lobit7 - $60 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($66, $67);
    var $68 = $uadd.f0;
    HEAP32[$scratch >> 2] = $68;
    var $69 = $uadd.f1;
    if ($69) {
      var $__p_0 = $scratch;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $__p_0;
    var $70 = $__p_0 + 4 | 0;
    var $72 = HEAP32[$70 >> 2] + 1 | 0;
    HEAP32[$70 >> 2] = $72;
    if (($72 | 0) == 0) {
      var $__p_0 = $70;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $74 = HEAP32[$39 >> 2];
    var $75 = HEAP32[$25 >> 2];
    if (($_15 | 0) == ($dn | 0)) {
      __label__ = 29;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $78 = ___gmpn_sub_n($scratch, $37, $scratch, $_15);
    var $79 = _mpn_sub_nc272($40, $rp, $40, $_sum, $78);
    if ($26) {
      var $cy_0 = $79;
      __label__ = 30;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $81 = HEAP32[$scratch >> 2];
    if ($28) {
      var $__x5_1 = $81;
      var $__dst3_1 = $rp;
      __label__ = 28;
      break;
    } else {
      var $__x5_0 = $81;
      var $scratch_pn = $scratch;
      var $__dst3_0 = $rp;
      var $__n2_0 = $27;
      __label__ = 27;
      break;
    }
   case 27:
    var $__n2_0;
    var $__dst3_0;
    var $scratch_pn;
    var $__x5_0;
    var $__src4_0 = $scratch_pn + 4 | 0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $83 = HEAP32[$__src4_0 >> 2];
    var $84 = $__n2_0 - 1 | 0;
    if (($84 | 0) == 0) {
      var $__x5_1 = $83;
      var $__dst3_1 = $scevgep24;
      __label__ = 28;
      break;
    } else {
      var $__x5_0 = $83;
      var $scratch_pn = $__src4_0;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__n2_0 = $84;
      __label__ = 27;
      break;
    }
   case 28:
    var $__dst3_1;
    var $__x5_1;
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    var $cy_0 = $79;
    __label__ = 30;
    break;
   case 29:
    var $87 = ___gmpn_sub_n($rp, $37, $scratch, $dn);
    var $cy_0 = $87;
    __label__ = 30;
    break;
   case 30:
    var $cy_0;
    var $89 = $74 - $75 | 0;
    if (($89 | 0) == ($cy_0 | 0)) {
      __label__ = 35;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $r_018 = $89 - $cy_0 | 0;
    __label__ = 32;
    break;
   case 32:
    var $r_018;
    var $__p7_0 = $38;
    __label__ = 33;
    break;
   case 33:
    var $__p7_0;
    var $95 = HEAP32[$__p7_0 >> 2] + 1 | 0;
    HEAP32[$__p7_0 >> 2] = $95;
    if (($95 | 0) == 0) {
      var $__p7_0 = $__p7_0 + 4 | 0;
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $98 = ___gmpn_sub_n($rp, $rp, $dp, $dn);
    var $99 = $r_018 - $98 | 0;
    if (($r_018 | 0) == ($98 | 0)) {
      __label__ = 35;
      break;
    } else {
      var $r_018 = $99;
      __label__ = 32;
      break;
    }
   case 35:
    var $101 = ___gmpn_cmp($rp, $dp, $dn);
    if (($101 | 0) > -1) {
      var $__p9_0 = $38;
      __label__ = 36;
      break;
    } else {
      var $_01 = $38;
      var $_02 = $37;
      var $_03 = $_1;
      var $_04 = $_15;
      var $qn_0 = $45;
      __label__ = 12;
      break;
    }
   case 36:
    var $__p9_0;
    var $105 = HEAP32[$__p9_0 >> 2] + 1 | 0;
    HEAP32[$__p9_0 >> 2] = $105;
    if (($105 | 0) == 0) {
      var $__p9_0 = $__p9_0 + 4 | 0;
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $108 = ___gmpn_sub_n($rp, $rp, $dp, $dn);
    var $_01 = $38;
    var $_02 = $37;
    var $_03 = $_1;
    var $_04 = $_15;
    var $qn_0 = $45;
    __label__ = 12;
    break;
   case 38:
    return $_lobit_not;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_preinv_mu_div_qr["X"] = 1;

function ___gmpn_mu_div_qr_choose_in($qn, $dn, $k) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($k | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    if (($qn | 0) > ($dn | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $5 = $qn - 1 | 0;
    var $in_0 = (($5 | 0) / ((($5 | 0) / ($dn | 0) & -1) + 1 | 0) & -1) + 1 | 0;
    __label__ = 8;
    break;
   case 5:
    var $11 = (i64Math.multiply($qn, 0, 3, 0), i64Math.result[0]);
    if (($11 | 0) > ($dn | 0)) {
      __label__ = 6;
      break;
    } else {
      var $in_0 = $qn;
      __label__ = 8;
      break;
    }
   case 6:
    var $in_0 = (($qn - 1 | 0) / 2 & -1) + 1 | 0;
    __label__ = 8;
    break;
   case 7:
    var $19 = ($dn | 0) < ($qn | 0) ? $dn : $qn;
    var $in_0 = (($19 - 1 | 0) / ($k | 0) & -1) + 1 | 0;
    __label__ = 8;
    break;
   case 8:
    var $in_0;
    return $in_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_mulmod_bnm1_itch279($rn, $an, $bn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn >> 1;
    if (($1 | 0) < ($an | 0)) {
      __label__ = 3;
      break;
    } else {
      var $7 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ($1 | 0) < ($bn | 0) ? $rn : $1;
    var $7 = $5;
    __label__ = 4;
    break;
   case 4:
    var $7;
    return $rn + 4 + $7 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mu_divappr_q_choose_in($qn, $dn, $k) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($k | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    if (($qn | 0) > ($dn | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $5 = $qn - 1 | 0;
    var $in_0 = (($5 | 0) / ((($5 | 0) / ($dn | 0) & -1) + 1 | 0) & -1) + 1 | 0;
    __label__ = 8;
    break;
   case 5:
    var $11 = (i64Math.multiply($qn, 0, 3, 0), i64Math.result[0]);
    if (($11 | 0) > ($dn | 0)) {
      __label__ = 6;
      break;
    } else {
      var $in_0 = $qn;
      __label__ = 8;
      break;
    }
   case 6:
    var $in_0 = (($qn - 1 | 0) / 2 & -1) + 1 | 0;
    __label__ = 8;
    break;
   case 7:
    var $19 = ($dn | 0) < ($qn | 0) ? $dn : $qn;
    var $in_0 = (($19 - 1 | 0) / ($k | 0) & -1) + 1 | 0;
    __label__ = 8;
    break;
   case 8:
    var $in_0;
    return $in_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_mulmod_bnm1_itch292($rn, $an, $bn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn >> 1;
    if (($1 | 0) < ($an | 0)) {
      __label__ = 3;
      break;
    } else {
      var $7 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ($1 | 0) < ($bn | 0) ? $rn : $1;
    var $7 = $5;
    __label__ = 4;
    break;
   case 4:
    var $7;
    return $rn + 4 + $7 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_fft_next_size($pl, $k) {
  return ($pl - 1 >> $k) + 1 << $k;
}

function ___gmpn_fft_best_k($n, $sqr) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $i_0;
    var $3 = HEAP32[_mpn_fft_table + ($sqr << 6) + ($i_0 << 2) >> 2];
    if (($3 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($3 | 0) > ($n | 0)) {
      __label__ = 5;
      break;
    } else {
      var $i_0 = $i_0 + 1 | 0;
      __label__ = 3;
      break;
    }
   case 5:
    var $_0 = $i_0 + 4 | 0;
    __label__ = 10;
    break;
   case 6:
    if (($i_0 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if ((HEAP32[_mpn_fft_table + ($sqr << 6) + ($i_0 - 1 << 2) >> 2] << 2 | 0) > ($n | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $_0 = $i_0 + 4 | 0;
    __label__ = 10;
    break;
   case 9:
    var $_0 = $i_0 + 5 | 0;
    __label__ = 10;
    break;
   case 10:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mu_div_qr_itch($nn, $dn, $mua_k) {
  var $1 = $dn + 1 | 0;
  var $2 = ___gmpn_mulmod_bnm1_next_size($1);
  var $3 = $nn - $dn | 0;
  var $4 = ___gmpn_mu_div_qr_choose_in($3, $dn, $mua_k);
  var $5 = _mpn_mulmod_bnm1_itch279($2, $dn, $4);
  return $4 + $2 + $5 | 0;
}

function ___gmpn_preinv_mu_div_qr_itch($nn, $dn, $in) {
  var $1 = $dn + 1 | 0;
  var $2 = ___gmpn_mulmod_bnm1_next_size($1);
  var $3 = _mpn_mulmod_bnm1_itch279($2, $dn, $in);
  return $3 + $2 | 0;
}

function ___gmpn_mu_divappr_q($qp, $np, $nn, $dp, $dn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $scratch17 = $scratch;
    var $1 = $nn - $dn | 0;
    var $2 = $1 + 1 | 0;
    if (($2 | 0) < ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $np;
      var $_01 = $nn;
      var $_02 = $dp;
      var $_03 = $dn;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = $dn - $2 | 0;
    var $_0 = $np + ($5 << 2) | 0;
    var $_01 = $nn - $5 | 0;
    var $_02 = $dp + ($5 << 2) | 0;
    var $_03 = $2;
    __label__ = 4;
    break;
   case 4:
    var $_03;
    var $_02;
    var $_01;
    var $_0;
    var $10 = ___gmpn_mu_divappr_q_choose_in($1, $_03, 0);
    var $11 = $scratch + ($10 << 2) | 0;
    var $_sum = $10 + 1 | 0;
    var $12 = $scratch + ($_sum << 2) | 0;
    if (($_03 | 0) == ($10 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 5:
    if (($_03 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $17 = $_03 - 1 | 0;
    var $18 = $scratch + ($_03 + 2 << 2) | 0;
    var $19 = HEAP32[$_02 >> 2];
    var $20 = ($17 | 0) == 0;
    if ($20) {
      var $__dst_1 = $18;
      var $__x_1 = $19;
      __label__ = 10;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $22 = $_03 << 1 | 1;
    var $__n_0 = $17;
    var $__dst_0 = $18;
    var $_02_pn = $_02;
    var $__x_0 = $19;
    __label__ = 8;
    break;
   case 8:
    var $__x_0;
    var $_02_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_02_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $25 = HEAP32[$__src_0 >> 2];
    var $26 = $__n_0 - 1 | 0;
    if (($26 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $__n_0 = $26;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_02_pn = $__src_0;
      var $__x_0 = $25;
      __label__ = 8;
      break;
    }
   case 9:
    var $__dst_1 = $scratch + ($22 << 2) | 0;
    var $__x_1 = $25;
    __label__ = 10;
    break;
   case 10:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    HEAP32[$12 >> 2] = 1;
    var $30 = ___gmpn_invertappr($scratch, $12, $_03 + 1 | 0, 0);
    var $32 = HEAP32[$scratch + 4 >> 2];
    if ($20) {
      var $__x4_1 = $32;
      var $__dst2_1 = $scratch;
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $__x4_0 = $32;
    var $__src3_0 = $scratch + 8 | 0;
    var $__n1_0 = $17;
    var $__dst2_0 = $scratch;
    __label__ = 12;
    break;
   case 12:
    var $__dst2_0;
    var $__n1_0;
    var $__src3_0;
    var $__x4_0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $37 = HEAP32[$__src3_0 >> 2];
    var $38 = $__n1_0 - 1 | 0;
    if (($38 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__x4_0 = $37;
      var $__src3_0 = $__src3_0 + 4 | 0;
      var $__n1_0 = $38;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      __label__ = 12;
      break;
    }
   case 13:
    var $__x4_1 = $37;
    var $__dst2_1 = $scratch + ($17 << 2) | 0;
    __label__ = 14;
    break;
   case 14:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 25;
    break;
   case 15:
    var $43 = $_02 + ($_03 + ($10 ^ -1) << 2) | 0;
    var $44 = ___gmpn_add_1($12, $43, $_sum, 1);
    if (($44 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if (($10 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 17:
    var $49 = ___gmpn_invertappr($scratch, $12, $_sum, 0);
    if (($10 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $52 = $10 - 1 | 0;
    var $54 = HEAP32[$scratch + 4 >> 2];
    if (($52 | 0) == 0) {
      var $__x10_1 = $54;
      var $__dst8_1 = $scratch;
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $__x10_0 = $54;
    var $__src9_0 = $scratch + 8 | 0;
    var $__dst8_0 = $scratch;
    var $__n7_0 = $52;
    __label__ = 20;
    break;
   case 20:
    var $__n7_0;
    var $__dst8_0;
    var $__src9_0;
    var $__x10_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $60 = HEAP32[$__src9_0 >> 2];
    var $61 = $__n7_0 - 1 | 0;
    if (($61 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $__x10_0 = $60;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $61;
      __label__ = 20;
      break;
    }
   case 21:
    var $__x10_1 = $60;
    var $__dst8_1 = $scratch + ($52 << 2) | 0;
    __label__ = 22;
    break;
   case 22:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    __label__ = 25;
    break;
   case 23:
    HEAP32[$12 >> 2] = 1;
    var $64 = ___gmpn_invertappr($scratch, $12, 1, 0);
    __label__ = 25;
    break;
   case 24:
    var $65 = $10 << 2;
    _memset($scratch17, 0, $65, 4);
    __label__ = 25;
    break;
   case 25:
    var $67 = ___gmpn_preinv_mu_divappr_q($qp, $_0, $_01, $_02, $_03, $scratch, $10, $11);
    return $67;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mu_divappr_q["X"] = 1;

function _mpn_sub_nc289($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_sub_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_sub_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function ___gmpn_mu_divappr_q_itch($nn, $dn, $mua_k) {
  var $1 = $nn - $dn | 0;
  var $2 = $1 + 1 | 0;
  var $_dn = ($2 | 0) < ($dn | 0) ? $2 : $dn;
  var $4 = ___gmpn_mu_divappr_q_choose_in($1, $_dn, $mua_k);
  var $5 = $_dn + 1 | 0;
  var $6 = ___gmpn_mulmod_bnm1_next_size($5);
  var $7 = _mpn_mulmod_bnm1_itch292($6, $_dn, $4);
  return $4 + $_dn + $6 + $7 | 0;
}

function ___gmpn_mul_1($rp, $up, $n, $vl) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $vl & 65535;
    var $2 = $vl >>> 16;
    var $_0 = $rp;
    var $_01 = $up;
    var $_02 = $n;
    var $cl_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $cl_0;
    var $_02;
    var $_01;
    var $_0;
    var $4 = $_01 + 4 | 0;
    var $5 = HEAPU32[$_01 >> 2];
    var $6 = $5 & 65535;
    var $7 = $5 >>> 16;
    var $8 = (i64Math.multiply($6, 0, $1, 0), i64Math.result[0]);
    var $9 = (i64Math.multiply($6, 0, $2, 0), i64Math.result[0]);
    var $10 = (i64Math.multiply($7, 0, $1, 0), i64Math.result[0]);
    var $11 = (i64Math.multiply($7, 0, $2, 0), i64Math.result[0]);
    var $13 = ($8 >>> 16) + $9 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($13, $10);
    var $14 = $uadd.f0;
    var $15 = $uadd.f1;
    var $__x3_0 = $15 ? $11 + 65536 | 0 : $11;
    var $17 = $14 >>> 16;
    var $20 = $14 << 16 | $8 & 65535;
    var $uadd3 = _llvm_uadd_with_overflow_i32($20, $cl_0);
    var $21 = $uadd3.f0;
    var $22 = $uadd3.f1;
    var $25 = ($22 & 1) + $17 + $__x3_0 | 0;
    HEAP32[$_0 >> 2] = $21;
    var $27 = $_02 - 1 | 0;
    if (($27 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_0 + 4 | 0;
      var $_01 = $4;
      var $_02 = $27;
      var $cl_0 = $25;
      __label__ = 3;
      break;
    }
   case 4:
    return $25;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mul_basecase($rp, $up, $un, $vp, $vn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAP32[$vp >> 2];
    var $2 = ___gmpn_mul_1($rp, $up, $un, $1);
    HEAP32[$rp + ($un << 2) >> 2] = $2;
    var $_013 = $vn - 1 | 0;
    if (($_013 | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $_0_sum = $un + 1 | 0;
    var $_017 = $_013;
    var $rp_pn = $rp;
    var $vp_pn = $vp;
    __label__ = 4;
    break;
   case 4:
    var $vp_pn;
    var $rp_pn;
    var $_017;
    var $_08 = $rp_pn + 4 | 0;
    var $_029 = $vp_pn + 4 | 0;
    var $6 = HEAP32[$_029 >> 2];
    var $7 = ___gmpn_addmul_1($_08, $up, $un, $6);
    HEAP32[$rp_pn + ($_0_sum << 2) >> 2] = $7;
    var $_01 = $_017 - 1 | 0;
    if (($_01 | 0) > 0) {
      var $_017 = $_01;
      var $rp_pn = $_08;
      var $vp_pn = $_029;
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_preinv_mu_divappr_q($qp, $np, $nn, $dp, $dn, $ip, $in, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    var $2 = $np + ($1 << 2) | 0;
    var $3 = $qp + ($1 << 2) | 0;
    var $4 = ___gmpn_cmp($2, $dp, $dn);
    var $5 = ($4 | 0) > -1;
    var $_lobit_not = $4 >>> 31 ^ 1;
    if ($5) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = ___gmpn_sub_n($scratch, $2, $dp, $dn);
    __label__ = 10;
    break;
   case 4:
    if (($dn | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $11 = $dn - 1 | 0;
    var $12 = HEAPU32[$2 >> 2];
    if (($11 | 0) == 0) {
      var $__dst_1 = $scratch;
      var $__x_1 = $12;
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0 = $11;
    var $__dst_0 = $scratch;
    var $__src_0 = $np + ($1 + 1 << 2) | 0;
    var $__x_0 = $12;
    __label__ = 7;
    break;
   case 7:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $18 = HEAP32[$__src_0 >> 2];
    var $19 = $__n_0 - 1 | 0;
    if (($19 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__n_0 = $19;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $18;
      __label__ = 7;
      break;
    }
   case 8:
    var $__dst_1 = $scratch + ($11 << 2) | 0;
    var $__x_1 = $18;
    __label__ = 9;
    break;
   case 9:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 10;
    break;
   case 10:
    if (($nn | 0) == ($dn | 0)) {
      var $_0 = $_lobit_not;
      __label__ = 42;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $24 = $scratch + ($dn << 2) | 0;
    var $25 = $dn + 1 | 0;
    var $26 = $scratch + ($dn << 1 << 2) | 0;
    var $27 = ($dn | 0) == 0;
    var $28 = $dn - 1 | 0;
    var $29 = $scratch + ($25 << 2) | 0;
    var $30 = ($28 | 0) == 0;
    var $scevgep34 = $scratch + ($28 << 2) | 0;
    var $_01 = $3;
    var $_02 = $2;
    var $_03 = $ip;
    var $_05 = $in;
    var $qn_0 = $1;
    __label__ = 12;
    break;
   case 12:
    var $cy_0;
    var $qn_0;
    var $_05;
    var $_03;
    var $_02;
    var $_01;
    if (($qn_0 | 0) > 0) {
      __label__ = 13;
      break;
    } else {
      var $_1 = $_01;
      var $cy_3 = $cy_0;
      __label__ = 39;
      break;
    }
   case 13:
    if (($qn_0 | 0) < ($_05 | 0)) {
      __label__ = 14;
      break;
    } else {
      var $_14 = $_03;
      var $_16 = $_05;
      __label__ = 15;
      break;
    }
   case 14:
    var $_14 = $_03 + ($_05 - $qn_0 << 2) | 0;
    var $_16 = $qn_0;
    __label__ = 15;
    break;
   case 15:
    var $_16;
    var $_14;
    var $38 = -$_16 | 0;
    var $39 = $_02 + ($38 << 2) | 0;
    var $40 = $_01 + ($38 << 2) | 0;
    var $_sum = $dn - $_16 | 0;
    var $41 = $scratch + ($_sum << 2) | 0;
    ___gmpn_mul_n($24, $41, $_14, $_16);
    var $_sum7 = $_16 + $dn | 0;
    var $42 = $scratch + ($_sum7 << 2) | 0;
    var $43 = ___gmpn_add_n($40, $42, $41, $_16);
    if (($43 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    ___gmp_assert_fail(STRING_TABLE.__str280 | 0, 195, STRING_TABLE.__str2341 | 0);
    throw "Reached an unreachable!";
   case 17:
    var $47 = $qn_0 - $_16 | 0;
    if (($qn_0 | 0) == ($_16 | 0)) {
      var $_1 = $40;
      var $cy_3 = 0;
      __label__ = 39;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    if (($_16 | 0) > 39) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $52 = ___gmpn_mul($24, $dp, $dn, $40, $_16);
    __label__ = 25;
    break;
   case 20:
    var $54 = ___gmpn_mulmod_bnm1_next_size($25);
    var $55 = $scratch + ($54 + $dn << 2) | 0;
    ___gmpn_mulmod_bnm1($24, $54, $dp, $dn, $40, $_16, $55);
    var $56 = $_sum7 - $54 | 0;
    if (($56 | 0) > 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 21:
    var $59 = $scratch + ($dn - $56 << 2) | 0;
    var $60 = ___gmpn_sub_n($24, $24, $59, $56);
    var $61 = $scratch + ($56 + $dn << 2) | 0;
    var $62 = $54 - $56 | 0;
    var $63 = ___gmpn_sub_1($61, $61, $62, $60);
    var $64 = $54 - $dn | 0;
    var $65 = ___gmpn_cmp($41, $26, $64);
    var $_lobit14 = $65 >>> 31;
    if ($_lobit14 >>> 0 < $63 >>> 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    ___gmp_assert_fail(STRING_TABLE.__str280 | 0, 217, STRING_TABLE.__str2282 | 0);
    throw "Reached an unreachable!";
   case 23:
    var $69 = HEAP32[$24 >> 2];
    var $70 = $_lobit14 - $63 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($69, $70);
    var $71 = $uadd.f0;
    HEAP32[$24 >> 2] = $71;
    var $72 = $uadd.f1;
    if ($72) {
      var $__p_0 = $24;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $__p_0;
    var $73 = $__p_0 + 4 | 0;
    var $75 = HEAP32[$73 >> 2] + 1 | 0;
    HEAP32[$73 >> 2] = $75;
    if (($75 | 0) == 0) {
      var $__p_0 = $73;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $77 = HEAP32[$41 >> 2];
    var $78 = HEAP32[$26 >> 2];
    if (($_16 | 0) == ($dn | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $81 = ___gmpn_sub_n($24, $39, $24, $_16);
    var $82 = _mpn_sub_nc289($42, $scratch, $42, $_sum, $81);
    if ($27) {
      var $cy_1 = $82;
      __label__ = 31;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $84 = HEAP32[$24 >> 2];
    if ($30) {
      var $__x5_1 = $84;
      var $__dst3_1 = $scratch;
      __label__ = 29;
      break;
    } else {
      var $__x5_0 = $84;
      var $__src4_0 = $29;
      var $__dst3_0 = $scratch;
      var $__n2_0 = $28;
      __label__ = 28;
      break;
    }
   case 28:
    var $__n2_0;
    var $__dst3_0;
    var $__src4_0;
    var $__x5_0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $87 = HEAP32[$__src4_0 >> 2];
    var $88 = $__n2_0 - 1 | 0;
    if (($88 | 0) == 0) {
      var $__x5_1 = $87;
      var $__dst3_1 = $scevgep34;
      __label__ = 29;
      break;
    } else {
      var $__x5_0 = $87;
      var $__src4_0 = $__src4_0 + 4 | 0;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__n2_0 = $88;
      __label__ = 28;
      break;
    }
   case 29:
    var $__dst3_1;
    var $__x5_1;
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    var $cy_1 = $82;
    __label__ = 31;
    break;
   case 30:
    var $91 = ___gmpn_sub_n($scratch, $39, $24, $dn);
    var $cy_1 = $91;
    __label__ = 31;
    break;
   case 31:
    var $cy_1;
    var $93 = $77 - $78 | 0;
    if (($93 | 0) == ($cy_1 | 0)) {
      var $cy_2_lcssa = $cy_1;
      __label__ = 36;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $r_028 = $93 - $cy_1 | 0;
    __label__ = 33;
    break;
   case 33:
    var $r_028;
    var $__p7_0 = $40;
    __label__ = 34;
    break;
   case 34:
    var $__p7_0;
    var $99 = HEAP32[$__p7_0 >> 2] + 1 | 0;
    HEAP32[$__p7_0 >> 2] = $99;
    if (($99 | 0) == 0) {
      var $__p7_0 = $__p7_0 + 4 | 0;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $102 = ___gmpn_sub_n($scratch, $scratch, $dp, $dn);
    var $103 = $r_028 - $102 | 0;
    if (($r_028 | 0) == ($102 | 0)) {
      var $cy_2_lcssa = $r_028;
      __label__ = 36;
      break;
    } else {
      var $r_028 = $103;
      __label__ = 33;
      break;
    }
   case 36:
    var $cy_2_lcssa;
    var $105 = ___gmpn_cmp($scratch, $dp, $dn);
    if (($105 | 0) > -1) {
      var $__p9_0 = $40;
      __label__ = 37;
      break;
    } else {
      var $_01 = $40;
      var $_02 = $39;
      var $_03 = $_14;
      var $_05 = $_16;
      var $qn_0 = $47;
      var $cy_0 = $cy_2_lcssa;
      __label__ = 12;
      break;
    }
   case 37:
    var $__p9_0;
    var $109 = HEAP32[$__p9_0 >> 2] + 1 | 0;
    HEAP32[$__p9_0 >> 2] = $109;
    if (($109 | 0) == 0) {
      var $__p9_0 = $__p9_0 + 4 | 0;
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $112 = ___gmpn_sub_n($scratch, $scratch, $dp, $dn);
    var $_01 = $40;
    var $_02 = $39;
    var $_03 = $_14;
    var $_05 = $_16;
    var $qn_0 = $47;
    var $cy_0 = $112;
    __label__ = 12;
    break;
   case 39:
    var $cy_3;
    var $_1;
    var $_132 = $_1;
    var $114 = ___gmpn_add_1($_1, $_1, $1, 3);
    var $116 = ($cy_3 | 0) == (-$114 | 0);
    var $_lobit_not_mux = $116 ? $_lobit_not : 1;
    if ($116 | $5 ^ 1) {
      var $_0 = $_lobit_not_mux;
      __label__ = 42;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    if (($1 | 0) > 0) {
      __label__ = 41;
      break;
    } else {
      var $_0 = $_lobit_not;
      __label__ = 42;
      break;
    }
   case 41:
    var $118 = $1 << 2;
    _memset($_132, -1, $118, 4);
    var $_0 = $_lobit_not;
    __label__ = 42;
    break;
   case 42:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_preinv_mu_divappr_q["X"] = 1;

function ___gmpn_mul_fft($op, $pl, $n, $nl, $m, $ml, $k) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $_ = ($n | 0) == ($m | 0) & ($nl | 0) == ($ml | 0);
    var $3 = $_ & 1;
    var $4 = ___gmpn_fft_next_size($pl, $k);
    if (($4 | 0) == ($pl | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    ___gmp_assert_fail(STRING_TABLE.__str297 | 0, 824, STRING_TABLE.__str1298 | 0);
    throw "Reached an unreachable!";
   case 4:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $8 = $pl << 5;
    var $10 = ($k << 2) + 4 | 0;
    if ($10 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $13 = STACKTOP;
    STACKTOP += $10;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $17 = $13;
    __label__ = 7;
    break;
   case 6:
    var $15 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $10);
    var $17 = $15;
    __label__ = 7;
    break;
   case 7:
    var $17;
    var $18 = $17;
    if (($k | 0) < 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $20 = $k + 1 | 0;
    var $i_03 = 0;
    __label__ = 9;
    break;
   case 9:
    var $i_03;
    var $22 = 4 << $i_03;
    if ($22 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $25 = STACKTOP;
    STACKTOP += $22;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $29 = $25;
    __label__ = 12;
    break;
   case 11:
    var $27 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $22);
    var $29 = $27;
    __label__ = 12;
    break;
   case 12:
    var $29;
    HEAP32[$18 + ($i_03 << 2) >> 2] = $29;
    var $32 = $i_03 + 1 | 0;
    if (($32 | 0) == ($20 | 0)) {
      __label__ = 13;
      break;
    } else {
      var $i_03 = $32;
      __label__ = 9;
      break;
    }
   case 13:
    _mpn_fft_initl($18, $k);
    var $33 = 1 << $k;
    var $34 = $8 >> $k;
    var $37 = (($34 - 1 | 0) / 32 & -1) + 1 | 0;
    var $38 = _mpn_mul_fft_lcm($k);
    var $43 = (($k + 2 + ($34 << 1) | 0) / ($38 | 0) & -1) + 1 | 0;
    var $44 = (i64Math.multiply($43, 0, $38, 0), i64Math.result[0]);
    var $45 = ($44 | 0) / 32 & -1;
    var $46 = $_ ? 360 : 300;
    if (($45 | 0) < ($46 | 0)) {
      var $nprime_1 = $45;
      var $Nprime_1 = $44;
      __label__ = 17;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $48 = ___gmpn_fft_best_k($45, $3);
    var $49 = 1 << $48;
    if (($49 - 1 & $45 | 0) == 0) {
      var $nprime_1 = $45;
      var $Nprime_1 = $44;
      __label__ = 17;
      break;
    } else {
      var $nprime_01 = $45;
      var $53 = $49;
      __label__ = 15;
      break;
    }
   case 15:
    var $53;
    var $nprime_01;
    var $57 = $nprime_01 - 1 + $53 & -$53;
    var $58 = ___gmpn_fft_best_k($57, $3);
    var $59 = 1 << $58;
    if (($59 - 1 & $57 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $nprime_01 = $57;
      var $53 = $59;
      __label__ = 15;
      break;
    }
   case 16:
    var $nprime_1 = $57;
    var $Nprime_1 = $57 << 5;
    __label__ = 17;
    break;
   case 17:
    var $Nprime_1;
    var $nprime_1;
    if (($nprime_1 | 0) < ($pl | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    ___gmp_assert_fail(STRING_TABLE.__str297 | 0, 857, STRING_TABLE.__str2299 | 0);
    throw "Reached an unreachable!";
   case 19:
    var $67 = $nprime_1 + 1 | 0;
    var $68 = $67 << 3;
    if ($68 >>> 0 < 65536) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $71 = STACKTOP;
    STACKTOP += $68;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $75 = $71;
    __label__ = 22;
    break;
   case 21:
    var $73 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $68);
    var $75 = $73;
    __label__ = 22;
    break;
   case 22:
    var $75;
    var $76 = $75;
    var $77 = $Nprime_1 >> $k;
    var $79 = $67 << $k << 2;
    var $80 = $79 >>> 0 < 65536;
    if ($80) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $82 = STACKTOP;
    STACKTOP += $79;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $86 = $82;
    __label__ = 25;
    break;
   case 24:
    var $84 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $79);
    var $86 = $84;
    __label__ = 25;
    break;
   case 25:
    var $86;
    var $87 = $86;
    var $88 = $33 << 2;
    var $89 = $88 >>> 0 < 65536;
    if ($89) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $91 = STACKTOP;
    STACKTOP += $88;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $95 = $91;
    __label__ = 28;
    break;
   case 27:
    var $93 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88);
    var $95 = $93;
    __label__ = 28;
    break;
   case 28:
    var $95;
    var $96 = $95;
    _mpn_mul_fft_decompose($87, $96, $33, $nprime_1, $n, $nl, $37, $77, $76);
    if ($_) {
      __label__ = 29;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 29:
    var $98 = $33 - 1 | 0;
    var $99 = (i64Math.multiply($37, 0, $98, 0), i64Math.result[0]);
    var $102 = ($nprime_1 + $99 << 2) + 4 | 0;
    if ($102 >>> 0 < 65536) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $105 = STACKTOP;
    STACKTOP += $102;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $109 = $105;
    __label__ = 32;
    break;
   case 31:
    var $107 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $102);
    var $109 = $107;
    __label__ = 32;
    break;
   case 32:
    var $109;
    var $110 = $109;
    if ($89) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $112 = STACKTOP;
    STACKTOP += $88;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $116 = $112;
    __label__ = 35;
    break;
   case 34:
    var $114 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88);
    var $116 = $114;
    __label__ = 35;
    break;
   case 35:
    var $116;
    var $B_0 = $110;
    var $Bp_0 = $116;
    __label__ = 43;
    break;
   case 36:
    if ($80) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    var $120 = STACKTOP;
    STACKTOP += $79;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $124 = $120;
    __label__ = 39;
    break;
   case 38:
    var $122 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $79);
    var $124 = $122;
    __label__ = 39;
    break;
   case 39:
    var $124;
    var $125 = $124;
    if ($89) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $127 = STACKTOP;
    STACKTOP += $88;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $131 = $127;
    __label__ = 42;
    break;
   case 41:
    var $129 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88);
    var $131 = $129;
    __label__ = 42;
    break;
   case 42:
    var $131;
    var $132 = $131;
    _mpn_mul_fft_decompose($125, $132, $33, $nprime_1, $m, $ml, $37, $77, $76);
    var $B_0 = $125;
    var $Bp_0 = $132;
    __label__ = 43;
    break;
   case 43:
    var $Bp_0;
    var $B_0;
    var $134 = _mpn_mul_fft_internal($op, $pl, $k, $96, $Bp_0, $B_0, $nprime_1, $37, $77, $18, $76, $3);
    var $135 = HEAP32[$__tmp_marker >> 2];
    if (($135 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    ___gmp_tmp_reentrant_free($135);
    __label__ = 45;
    break;
   case 45:
    STACKTOP = __stackBase__;
    return $134;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mul_fft["X"] = 1;

function _mpn_mul_fft_lcm($k) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($k | 0) == 0) {
      var $_0_lcssa = 32;
      __label__ = 4;
      break;
    } else {
      var $_011 = $k;
      var $_02 = 32;
      __label__ = 3;
      break;
    }
   case 3:
    var $_02;
    var $_011;
    var $2 = $_02 >>> 1;
    var $3 = $_011 - 1 | 0;
    if (($2 & 1 | 0) == 0 & ($3 | 0) != 0) {
      var $_011 = $3;
      var $_02 = $2;
      __label__ = 3;
      break;
    } else {
      var $_0_lcssa = $2;
      __label__ = 4;
      break;
    }
   case 4:
    var $_0_lcssa;
    return $_0_lcssa << $k;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_fft_initl($l, $k) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAP32[$l >> 2];
    HEAP32[$1 >> 2] = 0;
    if (($k | 0) < 1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = $k + 1 | 0;
    var $i_02 = 1;
    var $K_03 = 1;
    __label__ = 4;
    break;
   case 4:
    var $K_03;
    var $i_02;
    var $6 = HEAP32[$l + ($i_02 << 2) >> 2];
    if (($K_03 | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    var $9 = $l + ($i_02 - 1 << 2) | 0;
    var $j_01 = 0;
    __label__ = 6;
    break;
   case 6:
    var $j_01;
    var $14 = HEAP32[HEAP32[$9 >> 2] + ($j_01 << 2) >> 2] << 1;
    var $15 = $6 + ($j_01 << 2) | 0;
    HEAP32[$15 >> 2] = $14;
    var $16 = $14 | 1;
    var $18 = $6 + ($j_01 + $K_03 << 2) | 0;
    HEAP32[$18 >> 2] = $16;
    var $19 = $j_01 + 1 | 0;
    if (($19 | 0) == ($K_03 | 0)) {
      __label__ = 7;
      break;
    } else {
      var $j_01 = $19;
      __label__ = 6;
      break;
    }
   case 7:
    var $20 = $i_02 + 1 | 0;
    if (($20 | 0) == ($3 | 0)) {
      __label__ = 8;
      break;
    } else {
      var $i_02 = $20;
      var $K_03 = $K_03 << 1;
      __label__ = 4;
      break;
    }
   case 8:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_mul_fft_internal($op, $pl, $k, $Ap, $Bp, $B, $nprime, $l, $Mp, $fft_l, $T, $sqr) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $T22 = $T;
    var $B23 = $B;
    var $1 = 1 << $k;
    var $2 = $fft_l + ($k << 2) | 0;
    var $3 = $Mp << 1;
    _mpn_fft_fft($Ap, $1, $2, $3, $nprime, 1, $T);
    var $4 = ($sqr | 0) != 0;
    if ($4) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    _mpn_fft_fft($Bp, $1, $2, $3, $nprime, 1, $T);
    __label__ = 4;
    break;
   case 4:
    var $7 = $4 ? $Ap : $Bp;
    _mpn_fft_mul_modF_K($Ap, $7, $nprime, $1);
    _mpn_fft_fftinv($Ap, $1, $3, $nprime, $T);
    var $_sum = $nprime + 1 | 0;
    var $8 = $T + ($_sum << 2) | 0;
    HEAP32[$Bp >> 2] = $8;
    var $9 = HEAP32[$Ap >> 2];
    _mpn_fft_div_2exp_modF($8, $9, $k, $nprime);
    if (($1 | 0) > 1) {
      var $i_018 = 1;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $i_018;
    var $13 = HEAP32[$Ap + ($i_018 - 1 << 2) >> 2];
    HEAP32[$Bp + ($i_018 << 2) >> 2] = $13;
    var $16 = HEAP32[$Ap + ($i_018 << 2) >> 2];
    var $17 = $1 - $i_018 | 0;
    var $18 = (i64Math.multiply($17, 0, $Mp, 0), i64Math.result[0]);
    var $19 = $18 + $k | 0;
    _mpn_fft_div_2exp_modF($13, $16, $19, $nprime);
    var $20 = $i_018 + 1 | 0;
    if (($20 | 0) == ($1 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $i_018 = $20;
      __label__ = 5;
      break;
    }
   case 6:
    if (($_sum | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $23 = ($nprime << 2) + 4 | 0;
    _memset($T22, 0, $23, 4);
    __label__ = 8;
    break;
   case 8:
    var $25 = $1 - 1 | 0;
    var $26 = (i64Math.multiply($25, 0, $l, 0), i64Math.result[0]);
    var $27 = $26 + $nprime | 0;
    var $28 = $27 + 1 | 0;
    if (($28 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $31 = ($27 << 2) + 4 | 0;
    _memset($B23, 0, $31, 4);
    __label__ = 10;
    break;
   case 10:
    if (($1 | 0) > 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 11:
    var $34 = $T + ($l << 1 << 2) | 0;
    var $36 = $28 + ($nprime ^ -1) | 0;
    var $i_114 = $25;
    var $lo_015 = $27;
    var $sh_016 = $26;
    var $cc_017 = 0;
    __label__ = 12;
    break;
   case 12:
    var $cc_017;
    var $sh_016;
    var $lo_015;
    var $i_114;
    var $38 = $B + ($sh_016 << 2) | 0;
    var $41 = $Bp + (($1 - $i_114 & $25) << 2) | 0;
    var $42 = HEAP32[$41 >> 2];
    var $43 = ___gmpn_add_n($38, $38, $42, $_sum);
    if (($43 | 0) == 0) {
      var $cc_1 = $cc_017;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $46 = $B + ($_sum + $sh_016 << 2) | 0;
    var $47 = $36 - $sh_016 | 0;
    var $48 = ___gmpn_add_1($46, $46, $47, 1);
    var $cc_1 = $48 + $cc_017 | 0;
    __label__ = 14;
    break;
   case 14:
    var $cc_1;
    HEAP32[$34 >> 2] = $i_114 + 1 | 0;
    var $52 = HEAP32[$41 >> 2];
    var $53 = ___gmpn_cmp($52, $T, $_sum);
    if (($53 | 0) > 0) {
      __label__ = 15;
      break;
    } else {
      var $cc_2 = $cc_1;
      __label__ = 16;
      break;
    }
   case 15:
    var $56 = $28 - $sh_016 | 0;
    var $57 = ___gmpn_sub_1($38, $38, $56, 1);
    var $58 = $B + ($lo_015 << 2) | 0;
    var $59 = $28 - $lo_015 | 0;
    var $60 = ___gmpn_sub_1($58, $58, $59, 1);
    var $cc_2 = $cc_1 - $57 - $60 | 0;
    __label__ = 16;
    break;
   case 16:
    var $cc_2;
    if (($i_114 | 0) > 0) {
      var $i_114 = $i_114 - 1 | 0;
      var $lo_015 = $lo_015 - $l | 0;
      var $sh_016 = $sh_016 - $l | 0;
      var $cc_017 = $cc_2;
      __label__ = 12;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if (($cc_2 | 0) == -1) {
      __label__ = 18;
      break;
    } else if (($cc_2 | 0) == 1) {
      __label__ = 20;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 18:
    var $_sum3 = $28 - $pl | 0;
    var $69 = $B + ($_sum3 << 2) | 0;
    var $70 = ___gmpn_add_1($69, $69, $pl, 1);
    if (($70 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $73 = $B + ($_sum3 - 1 << 2) | 0;
    var $74 = $pl + 1 | 0;
    var $75 = ___gmpn_sub_1($73, $73, $74, 1);
    var $76 = $B + ($27 << 2) | 0;
    var $77 = ___gmpn_sub_1($76, $76, 1, 1);
    __label__ = 24;
    break;
   case 20:
    var $79 = $pl << 1;
    if (($28 | 0) < ($79 | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $81 = $B + ($28 - $79 << 2) | 0;
    var $cc_3 = 1;
    __label__ = 22;
    break;
   case 22:
    var $cc_3;
    var $83 = ___gmpn_add_1($81, $81, $79, $cc_3);
    if (($83 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $cc_3 = $83;
      __label__ = 22;
      break;
    }
   case 23:
    var $86 = $B + ($28 - $pl << 2) | 0;
    var $87 = ___gmpn_sub_1($86, $86, $pl, 1);
    __label__ = 24;
    break;
   case 24:
    var $88 = _mpn_fft_norm_modF($op, $pl, $B, $28);
    return $88;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_mul_fft_internal["X"] = 1;

function _mpn_fft_fft($Ap, $K, $ll, $omega, $n, $inc, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($K | 0) == 2) {
      __label__ = 3;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 3:
    var $3 = $n + 1 | 0;
    if (($3 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $6 = HEAP32[$Ap >> 2];
    var $7 = HEAP32[$6 >> 2];
    if (($n | 0) == 0) {
      var $__x_1 = $7;
      var $__dst_1 = $tp;
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $7;
      var $_pn = $6;
      var $__dst_0 = $tp;
      var $__n_0 = $n;
      __label__ = 5;
      break;
    }
   case 5:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $10 = HEAP32[$__src_0 >> 2];
    var $11 = $__n_0 - 1 | 0;
    if (($11 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $__x_0 = $10;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $11;
      __label__ = 5;
      break;
    }
   case 6:
    var $__x_1 = $10;
    var $__dst_1 = $tp + ($n << 2) | 0;
    __label__ = 7;
    break;
   case 7:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 8;
    break;
   case 8:
    var $15 = HEAP32[$Ap >> 2];
    var $16 = $Ap + ($inc << 2) | 0;
    var $17 = HEAP32[$16 >> 2];
    var $18 = ___gmpn_add_n($15, $15, $17, $3);
    var $19 = HEAP32[$16 >> 2];
    var $20 = ___gmpn_sub_n($19, $tp, $19, $3);
    var $21 = HEAPU32[$Ap >> 2];
    var $23 = HEAPU32[$21 + ($n << 2) >> 2];
    if ($23 >>> 0 > 1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $26 = $23 - 1 | 0;
    var $27 = ___gmpn_sub_1($21, $21, $n, $26);
    var $30 = HEAP32[$Ap >> 2] + ($n << 2) | 0;
    HEAP32[$30 >> 2] = 1 - $27 | 0;
    __label__ = 10;
    break;
   case 10:
    if (($20 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $34 = HEAP32[$16 >> 2];
    var $37 = -HEAP32[$34 + ($n << 2) >> 2] | 0;
    var $38 = ___gmpn_add_1($34, $34, $n, $37);
    var $40 = HEAP32[$16 >> 2] + ($n << 2) | 0;
    HEAP32[$40 >> 2] = $38;
    __label__ = 14;
    break;
   case 12:
    var $42 = HEAP32[$ll >> 2];
    var $43 = $K >> 1;
    var $44 = $ll - 4 | 0;
    var $45 = $omega << 1;
    var $46 = $inc << 1;
    _mpn_fft_fft($Ap, $43, $44, $45, $n, $46, $tp);
    var $47 = $Ap + ($inc << 2) | 0;
    _mpn_fft_fft($47, $43, $44, $45, $n, $46, $tp);
    if (($43 | 0) > 0) {
      var $j_01 = 0;
      var $lk_02 = $42;
      var $_03 = $Ap;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $_03;
    var $lk_02;
    var $j_01;
    var $49 = $_03 + ($inc << 2) | 0;
    var $50 = HEAP32[$49 >> 2];
    var $51 = HEAP32[$lk_02 >> 2];
    var $52 = (i64Math.multiply($51, 0, $omega, 0), i64Math.result[0]);
    _mpn_fft_mul_2exp_modF($tp, $50, $52, $n);
    var $53 = HEAP32[$49 >> 2];
    var $54 = HEAP32[$_03 >> 2];
    _mpn_fft_sub_modF($53, $54, $tp, $n);
    var $55 = HEAP32[$_03 >> 2];
    _mpn_fft_add_modF($55, $55, $tp, $n);
    var $56 = $j_01 + 1 | 0;
    var $58 = $_03 + ($46 << 2) | 0;
    if (($56 | 0) == ($43 | 0)) {
      __label__ = 14;
      break;
    } else {
      var $j_01 = $56;
      var $lk_02 = $lk_02 + 8 | 0;
      var $_03 = $58;
      __label__ = 13;
      break;
    }
   case 14:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_fft_fft["X"] = 1;

function _mpn_mul_fft_decompose($A, $Ap, $K, $nprime, $n, $nl, $l, $Mp, $T) {
  var __stackBase__ = STACKTOP;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $A28 = $A;
    var $__tmp_marker = STACKTOP;
    STACKTOP += 4;
    var $1 = (i64Math.multiply($l, 0, $K, 0), i64Math.result[0]);
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($1 | 0) < ($nl | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_2_ph = $n;
      var $_13_ph = $nl;
      __label__ = 20;
      break;
    }
   case 3:
    var $4 = $nl - $1 | 0;
    var $5 = $1 + 1 | 0;
    var $6 = $5 << 2;
    if ($6 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $9 = STACKTOP;
    STACKTOP += $6;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $13 = $9;
    __label__ = 6;
    break;
   case 5:
    var $11 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $6);
    var $13 = $11;
    __label__ = 6;
    break;
   case 6:
    var $13;
    var $14 = $13;
    var $16 = $n + ($1 << 2) | 0;
    if (($4 | 0) > ($1 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 7:
    var $18 = ___gmpn_sub_n($14, $n, $16, $1);
    var $20 = $n + ($1 << 1 << 2) | 0;
    var $dif_016 = $4 - $1 | 0;
    if (($dif_016 | 0) > ($1 | 0)) {
      var $cy_017 = $18;
      var $subp_018 = 0;
      var $_0119 = $20;
      var $dif_020 = $dif_016;
      var $22 = 0;
      __label__ = 8;
      break;
    } else {
      var $dif_0_lcssa35 = $dif_016;
      var $_01_lcssa36 = $20;
      var $cy_0_lcssa37 = $18;
      __label__ = 14;
      break;
    }
   case 8:
    var $22;
    var $dif_020;
    var $_0119;
    var $subp_018;
    var $cy_017;
    if ($22) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $24 = ___gmpn_sub_n($14, $14, $_0119, $1);
    var $cy_1 = $24 + $cy_017 | 0;
    __label__ = 11;
    break;
   case 10:
    var $27 = ___gmpn_add_n($14, $14, $_0119, $1);
    var $cy_1 = $cy_017 - $27 | 0;
    __label__ = 11;
    break;
   case 11:
    var $cy_1;
    var $31 = $_0119 + ($1 << 2) | 0;
    var $dif_0 = $dif_020 - $1 | 0;
    var $33 = ($subp_018 | 0) != 1;
    if (($dif_0 | 0) > ($1 | 0)) {
      var $cy_017 = $cy_1;
      var $subp_018 = $subp_018 ^ 1;
      var $_0119 = $31;
      var $dif_020 = $dif_0;
      var $22 = $33;
      __label__ = 8;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if ($33) {
      __label__ = 13;
      break;
    } else {
      var $dif_0_lcssa35 = $dif_0;
      var $_01_lcssa36 = $31;
      var $cy_0_lcssa37 = $cy_1;
      __label__ = 14;
      break;
    }
   case 13:
    var $35 = ___gmpn_sub($14, $14, $1, $31, $dif_0);
    var $cy_2 = $35 + $cy_1 | 0;
    __label__ = 15;
    break;
   case 14:
    var $cy_0_lcssa37;
    var $_01_lcssa36;
    var $dif_0_lcssa35;
    var $37 = ___gmpn_add($14, $14, $1, $_01_lcssa36, $dif_0_lcssa35);
    var $cy_2 = $cy_0_lcssa37 - $37 | 0;
    __label__ = 15;
    break;
   case 15:
    var $cy_2;
    if (($cy_2 | 0) > -1) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $42 = ___gmpn_add_1($14, $14, $1, $cy_2);
    var $cy_3 = $42;
    __label__ = 19;
    break;
   case 17:
    var $45 = ___gmpn_sub_1($14, $14, $1, -$cy_2 | 0);
    var $cy_3 = $45;
    __label__ = 19;
    break;
   case 18:
    var $47 = ___gmpn_sub($14, $n, $1, $16, $4);
    var $48 = ___gmpn_add_1($14, $14, $1, $47);
    var $cy_3 = $48;
    __label__ = 19;
    break;
   case 19:
    var $cy_3;
    HEAP32[$14 + ($1 << 2) >> 2] = $cy_3;
    var $_2_ph = $14;
    var $_13_ph = $5;
    __label__ = 20;
    break;
   case 20:
    var $_13_ph;
    var $_2_ph;
    if (($K | 0) > 0) {
      __label__ = 21;
      break;
    } else {
      var $_13_lcssa = $_13_ph;
      __label__ = 34;
      break;
    }
   case 21:
    var $52 = $nprime + 1 | 0;
    var $53 = $K - 1 | 0;
    var $54 = ($nprime | 0) == -1;
    var $56 = ($nprime << 2) + 4 | 0;
    var $i_010 = 0;
    var $_1311 = $_13_ph;
    var $_213 = $_2_ph;
    var $_014 = $A;
    __label__ = 22;
    break;
   case 22:
    var $_014;
    var $_213;
    var $_1311;
    var $i_010;
    var $58 = (i64Math.multiply($56, 0, $i_010, 0), i64Math.result[0]);
    var $uglygep = $A28 + $58 | 0;
    HEAP32[$Ap + ($i_010 << 2) >> 2] = $_014;
    if (($_1311 | 0) > 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 23:
    var $64 = ($_1311 | 0) >= ($l | 0) & ($i_010 | 0) < ($53 | 0) ? $l : $_1311;
    var $65 = $_1311 - $64 | 0;
    if (($64 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $68 = $64 - 1 | 0;
    var $69 = HEAP32[$_213 >> 2];
    if (($68 | 0) == 0) {
      var $__x_1 = $69;
      var $__dst_1 = $T;
      __label__ = 27;
      break;
    } else {
      var $__x_0 = $69;
      var $_2_pn = $_213;
      var $__dst_0 = $T;
      var $__n_0 = $68;
      __label__ = 25;
      break;
    }
   case 25:
    var $__n_0;
    var $__dst_0;
    var $_2_pn;
    var $__x_0;
    var $__src_0 = $_2_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $72 = HEAP32[$__src_0 >> 2];
    var $73 = $__n_0 - 1 | 0;
    if (($73 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $__x_0 = $72;
      var $_2_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $73;
      __label__ = 25;
      break;
    }
   case 26:
    var $__x_1 = $72;
    var $__dst_1 = $T + ($68 << 2) | 0;
    __label__ = 27;
    break;
   case 27:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 28;
    break;
   case 28:
    if (($52 | 0) == ($64 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $scevgep29 = $T + ($64 << 2) | 0;
    var $79 = $52 - $64 << 2;
    _memset($scevgep29, 0, $79, 4);
    __label__ = 30;
    break;
   case 30:
    var $81 = $_213 + ($l << 2) | 0;
    var $82 = (i64Math.multiply($i_010, 0, $Mp, 0), i64Math.result[0]);
    _mpn_fft_mul_2exp_modF($_014, $T, $82, $nprime);
    var $_3 = $81;
    var $_24 = $65;
    __label__ = 33;
    break;
   case 31:
    if ($54) {
      var $_3 = $_213;
      var $_24 = $_1311;
      __label__ = 33;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    _memset($uglygep, 0, $56, 4);
    var $_3 = $_213;
    var $_24 = $_1311;
    __label__ = 33;
    break;
   case 33:
    var $_24;
    var $_3;
    var $85 = $_014 + ($52 << 2) | 0;
    var $86 = $i_010 + 1 | 0;
    if (($86 | 0) == ($K | 0)) {
      var $_13_lcssa = $_24;
      __label__ = 34;
      break;
    } else {
      var $i_010 = $86;
      var $_1311 = $_24;
      var $_213 = $_3;
      var $_014 = $85;
      __label__ = 22;
      break;
    }
   case 34:
    var $_13_lcssa;
    if (($_13_lcssa | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    ___gmp_assert_fail(STRING_TABLE.__str297 | 0, 699, STRING_TABLE.__str5302 | 0);
    throw "Reached an unreachable!";
   case 36:
    var $90 = HEAP32[$__tmp_marker >> 2];
    if (($90 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    ___gmp_tmp_reentrant_free($90);
    __label__ = 38;
    break;
   case 38:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_mul_fft_decompose["X"] = 1;

function _mpn_fft_mul_modF_K($ap, $bp, $n, $K) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $1 = ($ap | 0) == ($bp | 0);
    var $2 = $1 & 1;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $3 = $1 ? 360 : 300;
    if (($3 | 0) > ($n | 0)) {
      __label__ = 35;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = ___gmpn_fft_best_k($n, $2);
    var $7 = 1 << $6;
    if (($7 - 1 & $n | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    ___gmp_assert_fail(STRING_TABLE.__str297 | 0, 437, STRING_TABLE.__str3300 | 0);
    throw "Reached an unreachable!";
   case 5:
    var $14 = ($7 | 0) > 32 ? $7 : 32;
    var $17 = $n >> $6;
    var $21 = $6 + 2 + ($n << 5 >> $6 << 1) + $14 | 0;
    var $23 = $21 - $21 % $14 | 0;
    var $24 = ($23 | 0) / 32 & -1;
    if (($24 | 0) < ($3 | 0)) {
      var $Nprime2_1 = $23;
      var $nprime2_1 = $24;
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $26 = ___gmpn_fft_best_k($24, $2);
    var $27 = 1 << $26;
    if (($27 - 1 & $24 | 0) == 0) {
      var $Nprime2_1 = $23;
      var $nprime2_1 = $24;
      __label__ = 9;
      break;
    } else {
      var $nprime2_03 = $24;
      var $31 = $27;
      __label__ = 7;
      break;
    }
   case 7:
    var $31;
    var $nprime2_03;
    var $35 = $nprime2_03 - 1 + $31 & -$31;
    var $36 = ___gmpn_fft_best_k($35, $2);
    var $37 = 1 << $36;
    if (($37 - 1 & $35 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $nprime2_03 = $35;
      var $31 = $37;
      __label__ = 7;
      break;
    }
   case 8:
    var $Nprime2_1 = $35 << 5;
    var $nprime2_1 = $35;
    __label__ = 9;
    break;
   case 9:
    var $nprime2_1;
    var $Nprime2_1;
    if (($nprime2_1 | 0) < ($n | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    ___gmp_assert_fail(STRING_TABLE.__str297 | 0, 459, STRING_TABLE.__str4301 | 0);
    throw "Reached an unreachable!";
   case 11:
    var $45 = $Nprime2_1 >> $6;
    var $46 = $7 << 2;
    if ($46 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $49 = STACKTOP;
    STACKTOP += $46;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $50 = STACKTOP;
    STACKTOP += $46;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $55 = $50;
    var $_in = $49;
    __label__ = 14;
    break;
   case 13:
    var $52 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $46);
    var $53 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $46);
    var $55 = $53;
    var $_in = $52;
    __label__ = 14;
    break;
   case 14:
    var $_in;
    var $55;
    var $56 = $_in;
    var $57 = $55;
    var $58 = $nprime2_1 + 1 | 0;
    var $61 = $58 << 1 << $6 << 2;
    if ($61 >>> 0 < 65536) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $64 = STACKTOP;
    STACKTOP += $61;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $68 = $64;
    __label__ = 17;
    break;
   case 16:
    var $66 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $61);
    var $68 = $66;
    __label__ = 17;
    break;
   case 17:
    var $68;
    var $69 = $68;
    var $70 = $58 << 3;
    if ($70 >>> 0 < 65536) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $73 = STACKTOP;
    STACKTOP += $70;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $77 = $73;
    __label__ = 20;
    break;
   case 19:
    var $75 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $70);
    var $77 = $75;
    __label__ = 20;
    break;
   case 20:
    var $77;
    var $78 = $77;
    var $80 = $69 + ($58 << $6 << 2) | 0;
    var $82 = ($6 << 2) + 4 | 0;
    if ($82 >>> 0 < 65536) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $85 = STACKTOP;
    STACKTOP += $82;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $89 = $85;
    __label__ = 23;
    break;
   case 22:
    var $87 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $82);
    var $89 = $87;
    __label__ = 23;
    break;
   case 23:
    var $89;
    var $90 = $89;
    if (($6 | 0) < 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $92 = $6 + 1 | 0;
    var $i_010 = 0;
    __label__ = 25;
    break;
   case 25:
    var $i_010;
    var $94 = 4 << $i_010;
    if ($94 >>> 0 < 65536) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $97 = STACKTOP;
    STACKTOP += $94;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $101 = $97;
    __label__ = 28;
    break;
   case 27:
    var $99 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $94);
    var $101 = $99;
    __label__ = 28;
    break;
   case 28:
    var $101;
    HEAP32[$90 + ($i_010 << 2) >> 2] = $101;
    var $104 = $i_010 + 1 | 0;
    if (($104 | 0) == ($92 | 0)) {
      __label__ = 29;
      break;
    } else {
      var $i_010 = $104;
      __label__ = 25;
      break;
    }
   case 29:
    _mpn_fft_initl($90, $6);
    if (($K | 0) > 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 30:
    var $107 = ($17 << $6) + 1 | 0;
    var $i_16 = 0;
    var $_017 = $bp;
    var $_08 = $ap;
    __label__ = 31;
    break;
   case 31:
    var $_08;
    var $_017;
    var $i_16;
    var $109 = HEAP32[$_08 >> 2];
    _mpn_fft_normalize($109, $n);
    if ($1) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $110 = HEAP32[$_08 >> 2];
    _mpn_mul_fft_decompose($69, $56, $7, $nprime2_1, $110, $107, $17, $45, $78);
    __label__ = 34;
    break;
   case 33:
    var $112 = HEAP32[$_017 >> 2];
    _mpn_fft_normalize($112, $n);
    var $113 = HEAP32[$_08 >> 2];
    _mpn_mul_fft_decompose($69, $56, $7, $nprime2_1, $113, $107, $17, $45, $78);
    var $114 = HEAP32[$_017 >> 2];
    _mpn_mul_fft_decompose($80, $57, $7, $nprime2_1, $114, $107, $17, $45, $78);
    __label__ = 34;
    break;
   case 34:
    var $116 = HEAP32[$_08 >> 2];
    var $117 = _mpn_mul_fft_internal($116, $n, $6, $56, $57, $80, $nprime2_1, $17, $45, $90, $78, $2);
    var $119 = HEAP32[$_08 >> 2] + ($n << 2) | 0;
    HEAP32[$119 >> 2] = $117;
    var $120 = $i_16 + 1 | 0;
    if (($120 | 0) == ($K | 0)) {
      __label__ = 51;
      break;
    } else {
      var $i_16 = $120;
      var $_017 = $_017 + 4 | 0;
      var $_08 = $_08 + 4 | 0;
      __label__ = 31;
      break;
    }
   case 35:
    var $124 = $n << 1;
    var $125 = $n << 3;
    if ($125 >>> 0 < 65536) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $128 = STACKTOP;
    STACKTOP += $125;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $132 = $128;
    __label__ = 38;
    break;
   case 37:
    var $130 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $125);
    var $132 = $130;
    __label__ = 38;
    break;
   case 38:
    var $132;
    var $133 = $132;
    var $134 = $133 + ($n << 2) | 0;
    if (($K | 0) > 0) {
      var $i_213 = 0;
      var $_1214 = $bp;
      var $_115 = $ap;
      __label__ = 39;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 39:
    var $_115;
    var $_1214;
    var $i_213;
    var $136 = $_115 + 4 | 0;
    var $137 = HEAPU32[$_115 >> 2];
    var $138 = $_1214 + 4 | 0;
    var $139 = HEAP32[$_1214 >> 2];
    if ($1) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    ___gmpn_sqr($133, $137, $n);
    __label__ = 42;
    break;
   case 41:
    ___gmpn_mul_n($133, $139, $137, $n);
    __label__ = 42;
    break;
   case 42:
    var $143 = $137 + ($n << 2) | 0;
    if ((HEAP32[$143 >> 2] | 0) == 0) {
      var $cc_0 = 0;
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $147 = ___gmpn_add_n($134, $134, $139, $n);
    var $cc_0 = $147;
    __label__ = 44;
    break;
   case 44:
    var $cc_0;
    if ((HEAP32[$139 + ($n << 2) >> 2] | 0) == 0) {
      var $cc_1 = $cc_0;
      __label__ = 46;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $153 = ___gmpn_add_n($134, $134, $137, $n);
    var $cc_1 = $153 + $cc_0 + HEAP32[$143 >> 2] | 0;
    __label__ = 46;
    break;
   case 46:
    var $cc_1;
    if (($cc_1 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $160 = ___gmpn_add_1($133, $133, $124, $cc_1);
    __label__ = 48;
    break;
   case 48:
    var $162 = ___gmpn_sub_n($137, $133, $134, $n);
    if (($162 | 0) == 0) {
      var $168 = 0;
      __label__ = 50;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $165 = ___gmpn_add_1($137, $137, $n, 1);
    var $168 = ($165 | 0) != 0;
    __label__ = 50;
    break;
   case 50:
    var $168;
    HEAP32[$143 >> 2] = $168 & 1;
    var $170 = $i_213 + 1 | 0;
    if (($170 | 0) == ($K | 0)) {
      __label__ = 51;
      break;
    } else {
      var $i_213 = $170;
      var $_1214 = $138;
      var $_115 = $136;
      __label__ = 39;
      break;
    }
   case 51:
    var $171 = HEAP32[$__tmp_marker >> 2];
    if (($171 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    ___gmp_tmp_reentrant_free($171);
    __label__ = 53;
    break;
   case 53:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_fft_mul_modF_K["X"] = 1;

function _mpn_mullo_n_itch($n) {
  return $n << 1;
}

function _mpn_fft_fftinv($Ap, $K, $omega, $n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($K | 0) == 2) {
      __label__ = 3;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 3:
    var $3 = $n + 1 | 0;
    if (($3 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $6 = HEAP32[$Ap >> 2];
    var $7 = HEAP32[$6 >> 2];
    if (($n | 0) == 0) {
      var $__x_1 = $7;
      var $__dst_1 = $tp;
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $7;
      var $_pn = $6;
      var $__dst_0 = $tp;
      var $__n_0 = $n;
      __label__ = 5;
      break;
    }
   case 5:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $10 = HEAP32[$__src_0 >> 2];
    var $11 = $__n_0 - 1 | 0;
    if (($11 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $__x_0 = $10;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $11;
      __label__ = 5;
      break;
    }
   case 6:
    var $__x_1 = $10;
    var $__dst_1 = $tp + ($n << 2) | 0;
    __label__ = 7;
    break;
   case 7:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 8;
    break;
   case 8:
    var $15 = HEAP32[$Ap >> 2];
    var $16 = $Ap + 4 | 0;
    var $17 = HEAP32[$16 >> 2];
    var $18 = ___gmpn_add_n($15, $15, $17, $3);
    var $19 = HEAP32[$16 >> 2];
    var $20 = ___gmpn_sub_n($19, $tp, $19, $3);
    var $21 = HEAPU32[$Ap >> 2];
    var $23 = HEAPU32[$21 + ($n << 2) >> 2];
    if ($23 >>> 0 > 1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $26 = $23 - 1 | 0;
    var $27 = ___gmpn_sub_1($21, $21, $n, $26);
    var $30 = HEAP32[$Ap >> 2] + ($n << 2) | 0;
    HEAP32[$30 >> 2] = 1 - $27 | 0;
    __label__ = 10;
    break;
   case 10:
    if (($20 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $34 = HEAP32[$16 >> 2];
    var $37 = -HEAP32[$34 + ($n << 2) >> 2] | 0;
    var $38 = ___gmpn_add_1($34, $34, $n, $37);
    var $40 = HEAP32[$16 >> 2] + ($n << 2) | 0;
    HEAP32[$40 >> 2] = $38;
    __label__ = 14;
    break;
   case 12:
    var $42 = $K >> 1;
    var $43 = $omega << 1;
    _mpn_fft_fftinv($Ap, $42, $43, $n, $tp);
    var $44 = $Ap + ($42 << 2) | 0;
    _mpn_fft_fftinv($44, $42, $43, $n, $tp);
    if (($42 | 0) > 0) {
      var $j_01 = 0;
      var $_02 = $Ap;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $_02;
    var $j_01;
    var $46 = $_02 + ($42 << 2) | 0;
    var $47 = HEAP32[$46 >> 2];
    var $48 = (i64Math.multiply($j_01, 0, $omega, 0), i64Math.result[0]);
    _mpn_fft_mul_2exp_modF($tp, $47, $48, $n);
    var $49 = HEAP32[$46 >> 2];
    var $50 = HEAP32[$_02 >> 2];
    _mpn_fft_sub_modF($49, $50, $tp, $n);
    var $51 = HEAP32[$_02 >> 2];
    _mpn_fft_add_modF($51, $51, $tp, $n);
    var $52 = $j_01 + 1 | 0;
    if (($52 | 0) == ($42 | 0)) {
      __label__ = 14;
      break;
    } else {
      var $j_01 = $52;
      var $_02 = $_02 + 4 | 0;
      __label__ = 13;
      break;
    }
   case 14:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_fft_fftinv["X"] = 1;

function _mpn_fft_div_2exp_modF($r, $a, $k, $n) {
  var $2 = ($n << 6) - $k | 0;
  _mpn_fft_mul_2exp_modF($r, $a, $2, $n);
  _mpn_fft_normalize($r, $n);
  return;
}

function _mpn_fft_norm_modF($rp, $n, $ap, $an) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $n << 1;
    var $2 = $an - $1 | 0;
    if (($2 | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = $ap + ($1 << 2) | 0;
    var $6 = ___gmpn_add_n($rp, $ap, $5, $2);
    var $7 = $rp + ($2 << 2) | 0;
    var $8 = $ap + ($2 << 2) | 0;
    var $9 = $n - $2 | 0;
    var $10 = ___gmpn_add_1($7, $8, $9, $6);
    var $l_0 = $n;
    var $rpn_0 = $10;
    __label__ = 9;
    break;
   case 4:
    var $12 = $an - $n | 0;
    if (($n | 0) == 0) {
      var $l_0 = $12;
      var $rpn_0 = 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $15 = $n - 1 | 0;
    var $16 = HEAP32[$ap >> 2];
    if (($15 | 0) == 0) {
      var $__x_1 = $16;
      var $__dst_1 = $rp;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $16;
      var $ap_pn = $ap;
      var $__dst_0 = $rp;
      var $__n_0 = $15;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $ap_pn;
    var $__x_0;
    var $__src_0 = $ap_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $19 = HEAP32[$__src_0 >> 2];
    var $20 = $__n_0 - 1 | 0;
    if (($20 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $19;
      var $ap_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $20;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $19;
    var $__dst_1 = $rp + ($15 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $l_0 = $12;
    var $rpn_0 = 0;
    __label__ = 9;
    break;
   case 9:
    var $rpn_0;
    var $l_0;
    var $24 = $ap + ($n << 2) | 0;
    var $25 = ___gmpn_sub_n($rp, $rp, $24, $l_0);
    var $26 = $rp + ($l_0 << 2) | 0;
    var $27 = $n - $l_0 | 0;
    var $28 = ___gmpn_sub_1($26, $26, $27, $25);
    var $29 = $rpn_0 - $28 | 0;
    if (($29 | 0) < 0) {
      __label__ = 10;
      break;
    } else {
      var $rpn_1 = $29;
      __label__ = 11;
      break;
    }
   case 10:
    var $32 = ___gmpn_add_1($rp, $rp, $n, 1);
    var $rpn_1 = $32;
    __label__ = 11;
    break;
   case 11:
    var $rpn_1;
    return $rpn_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_fft_mul_2exp_modF($r, $a, $d, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $d & 31;
    var $2 = $d >>> 5;
    if ($2 >>> 0 < $n >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = $2 - $n | 0;
    if (($1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_sum6 = $n - $5 | 0;
    var $8 = $a + ($_sum6 << 2) | 0;
    var $9 = $5 + 1 | 0;
    var $10 = ___gmpn_lshift($r, $8, $9, $1);
    var $11 = $r + ($5 << 2) | 0;
    var $12 = HEAP32[$11 >> 2];
    var $13 = ___gmpn_lshiftc($11, $a, $_sum6, $1);
    var $cc_0 = $13 + 1 | 0;
    var $rd_0 = $12;
    __label__ = 14;
    break;
   case 5:
    if (($2 | 0) == ($n | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $_pre_phi = $n - $5 | 0;
    __label__ = 12;
    break;
   case 7:
    var $17 = $5 - 1 | 0;
    var $_sum4 = $n - $5 | 0;
    var $19 = HEAPU32[$a + ($_sum4 << 2) >> 2];
    if (($17 | 0) == 0) {
      var $__dst_1 = $r;
      var $__x_1 = $19;
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $23 = $2 - 1 - $n | 0;
    var $__n_0 = $17;
    var $__dst_0 = $r;
    var $__src_0 = $a + ($_sum4 + 1 << 2) | 0;
    var $__x_0 = $19;
    __label__ = 9;
    break;
   case 9:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $27 = HEAP32[$__src_0 >> 2];
    var $28 = $__n_0 - 1 | 0;
    if (($28 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $__n_0 = $28;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $27;
      __label__ = 9;
      break;
    }
   case 10:
    var $__dst_1 = $r + ($23 << 2) | 0;
    var $__x_1 = $27;
    __label__ = 11;
    break;
   case 11:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_pre_phi = $_sum4;
    __label__ = 12;
    break;
   case 12:
    var $_pre_phi;
    var $33 = HEAP32[$a + ($n << 2) >> 2];
    var $__d_0 = $r + ($5 << 2) | 0;
    var $__s_0 = $a;
    var $__n1_0 = $_pre_phi;
    __label__ = 13;
    break;
   case 13:
    var $__n1_0;
    var $__s_0;
    var $__d_0;
    var $38 = HEAP32[$__s_0 >> 2] ^ -1;
    HEAP32[$__d_0 >> 2] = $38;
    var $40 = $__n1_0 - 1 | 0;
    if (($40 | 0) == 0) {
      var $cc_0 = 1;
      var $rd_0 = $33;
      __label__ = 14;
      break;
    } else {
      var $__d_0 = $__d_0 + 4 | 0;
      var $__s_0 = $__s_0 + 4 | 0;
      var $__n1_0 = $40;
      __label__ = 13;
      break;
    }
   case 14:
    var $rd_0;
    var $cc_0;
    HEAP32[$r + ($n << 2) >> 2] = 0;
    var $43 = HEAP32[$r >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($43, $cc_0);
    var $44 = $uadd.f0;
    HEAP32[$r >> 2] = $44;
    var $45 = $uadd.f1;
    if ($45) {
      var $__p_0 = $r;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $__p_0;
    var $46 = $__p_0 + 4 | 0;
    var $48 = HEAP32[$46 >> 2] + 1 | 0;
    HEAP32[$46 >> 2] = $48;
    if (($48 | 0) == 0) {
      var $__p_0 = $46;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $50 = $rd_0 + 1 | 0;
    var $51 = ($50 | 0) == 0;
    var $52 = $51 ? 1 : $50;
    var $54 = $r + (($51 & 1) + $5 << 2) | 0;
    var $55 = HEAP32[$54 >> 2];
    var $uadd3 = _llvm_uadd_with_overflow_i32($55, $52);
    var $56 = $uadd3.f0;
    HEAP32[$54 >> 2] = $56;
    var $57 = $uadd3.f1;
    if ($57) {
      var $__p4_0 = $54;
      __label__ = 17;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 17:
    var $__p4_0;
    var $58 = $__p4_0 + 4 | 0;
    var $60 = HEAP32[$58 >> 2] + 1 | 0;
    HEAP32[$58 >> 2] = $60;
    if (($60 | 0) == 0) {
      var $__p4_0 = $58;
      __label__ = 17;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 18:
    var $_sum = $n - $2 | 0;
    var $64 = $a + ($_sum << 2) | 0;
    var $65 = $2 + 1 | 0;
    if (($1 | 0) == 0) {
      var $__n7_0 = $65;
      var $__d5_0 = $r;
      var $__s6_0 = $64;
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $67 = ___gmpn_lshiftc($r, $64, $65, $1);
    var $68 = $r + ($2 << 2) | 0;
    var $70 = HEAP32[$68 >> 2] ^ -1;
    var $71 = ___gmpn_lshift($68, $a, $_sum, $1);
    var $cc_1 = $71;
    var $rd_1 = $70;
    __label__ = 27;
    break;
   case 20:
    var $__s6_0;
    var $__d5_0;
    var $__n7_0;
    var $74 = HEAP32[$__s6_0 >> 2] ^ -1;
    HEAP32[$__d5_0 >> 2] = $74;
    var $76 = $__n7_0 - 1 | 0;
    if (($76 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $__n7_0 = $76;
      var $__d5_0 = $__d5_0 + 4 | 0;
      var $__s6_0 = $__s6_0 + 4 | 0;
      __label__ = 20;
      break;
    }
   case 21:
    var $80 = HEAP32[$a + ($n << 2) >> 2];
    if (($2 | 0) == ($n | 0)) {
      var $cc_1 = 0;
      var $rd_1 = $80;
      __label__ = 27;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $83 = $_sum - 1 | 0;
    var $84 = $r + ($2 << 2) | 0;
    var $85 = HEAP32[$a >> 2];
    if (($83 | 0) == 0) {
      var $__x11_1 = $85;
      var $__dst9_1 = $84;
      __label__ = 26;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $87 = $n - 1 | 0;
    var $__x11_0 = $85;
    var $a_pn = $a;
    var $__dst9_0 = $84;
    var $__n8_0 = $83;
    __label__ = 24;
    break;
   case 24:
    var $__n8_0;
    var $__dst9_0;
    var $a_pn;
    var $__x11_0;
    var $__src10_0 = $a_pn + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    var $90 = HEAP32[$__src10_0 >> 2];
    var $91 = $__n8_0 - 1 | 0;
    if (($91 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      var $__x11_0 = $90;
      var $a_pn = $__src10_0;
      var $__dst9_0 = $__dst9_0 + 4 | 0;
      var $__n8_0 = $91;
      __label__ = 24;
      break;
    }
   case 25:
    var $__x11_1 = $90;
    var $__dst9_1 = $r + ($87 << 2) | 0;
    __label__ = 26;
    break;
   case 26:
    var $__dst9_1;
    var $__x11_1;
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    var $cc_1 = 0;
    var $rd_1 = $80;
    __label__ = 27;
    break;
   case 27:
    var $rd_1;
    var $cc_1;
    if (($2 | 0) == 0) {
      var $cc_3 = $cc_1;
      __label__ = 31;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    if (($cc_1 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      var $cc_2 = $cc_1 - 1 | 0;
      __label__ = 30;
      break;
    }
   case 29:
    var $100 = ___gmpn_add_1($r, $r, $n, 1);
    var $cc_2 = $100;
    __label__ = 30;
    break;
   case 30:
    var $cc_2;
    var $102 = ___gmpn_sub_1($r, $r, $2, $cc_2);
    var $cc_3 = $102 + 1 | 0;
    __label__ = 31;
    break;
   case 31:
    var $cc_3;
    var $105 = $r + ($2 << 2) | 0;
    var $106 = ___gmpn_sub_1($105, $105, $_sum, $cc_3);
    var $108 = $r + ($n << 2) | 0;
    HEAP32[$108 >> 2] = -$106 | 0;
    var $109 = ___gmpn_sub_1($105, $105, $_sum, $rd_1);
    var $111 = HEAP32[$108 >> 2] - $109 | 0;
    HEAP32[$108 >> 2] = $111;
    if (($111 | 0) < 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $114 = ___gmpn_add_1($r, $r, $n, 1);
    HEAP32[$108 >> 2] = $114;
    __label__ = 33;
    break;
   case 33:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_fft_mul_2exp_modF["X"] = 1;

function _mpn_fft_normalize($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ap2 = $ap;
    var $1 = $ap + ($n << 2) | 0;
    if ((HEAP32[$1 >> 2] | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $__p_0 = $ap;
      __label__ = 3;
      break;
    }
   case 3:
    var $__p_0;
    var $5 = HEAP32[$__p_0 >> 2];
    var $6 = $5 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $6;
    if (($5 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ((HEAP32[$1 >> 2] | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 5:
    if (($n | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $13 = $n << 2;
    _memset($ap2, 0, $13, 4);
    __label__ = 7;
    break;
   case 7:
    HEAP32[$1 >> 2] = 1;
    __label__ = 9;
    break;
   case 8:
    HEAP32[$1 >> 2] = 0;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_fft_sub_modF($r, $a, $b, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $5 = HEAP32[$a + ($n << 2) >> 2] - HEAP32[$b + ($n << 2) >> 2] | 0;
    var $6 = ___gmpn_sub_n($r, $a, $b, $n);
    var $7 = $5 - $6 | 0;
    var $10 = $7 >> 31 & -$7;
    var $11 = $10 + $7 | 0;
    HEAP32[$r + ($n << 2) >> 2] = $11;
    var $13 = HEAP32[$r >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($13, $10);
    var $14 = $uadd.f0;
    HEAP32[$r >> 2] = $14;
    var $15 = $uadd.f1;
    if ($15) {
      var $__p_0 = $r;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $__p_0;
    var $16 = $__p_0 + 4 | 0;
    var $18 = HEAP32[$16 >> 2] + 1 | 0;
    HEAP32[$16 >> 2] = $18;
    if (($18 | 0) == 0) {
      var $__p_0 = $16;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_fft_add_modF($r, $a, $b, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$a + ($n << 2) >> 2];
    var $4 = HEAP32[$b + ($n << 2) >> 2];
    var $5 = ___gmpn_add_n($r, $a, $b, $n);
    var $7 = $4 + $2 + $5 | 0;
    var $11 = (($7 | 0) != 0) << 31 >> 31 & $7 - 1;
    var $12 = $7 - $11 | 0;
    HEAP32[$r + ($n << 2) >> 2] = $12;
    var $14 = HEAPU32[$r >> 2];
    var $15 = $14 - $11 | 0;
    HEAP32[$r >> 2] = $15;
    if ($14 >>> 0 < $11 >>> 0) {
      var $__p_0 = $r;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $__p_0;
    var $17 = $__p_0 + 4 | 0;
    var $18 = HEAP32[$17 >> 2];
    var $19 = $18 - 1 | 0;
    HEAP32[$17 >> 2] = $19;
    if (($18 | 0) == 0) {
      var $__p_0 = $17;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mul_n($p, $a, $b, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 1052;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ws = __stackBase__;
    var $__tmp_marker = __stackBase__ + 1048;
    if (($n | 0) > 29) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    ___gmpn_mul_basecase($p, $a, $n, $b, $n);
    __label__ = 18;
    break;
   case 4:
    if (($n | 0) > 99) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $6 = $ws | 0;
    ___gmpn_toom22_mul($p, $a, $n, $b, $n, $6);
    __label__ = 18;
    break;
   case 6:
    if (($n | 0) > 299) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $10 = (i64Math.multiply($n, 0, 10, 0), i64Math.result[0]);
    var $13 = STACKTOP;
    STACKTOP += $10 + 128 & -4;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $14 = $13;
    ___gmpn_toom33_mul($p, $a, $n, $b, $n, $14);
    __label__ = 18;
    break;
   case 8:
    if (($n | 0) > 349) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $18 = (i64Math.multiply($n, 0, 12, 0), i64Math.result[0]);
    var $20 = STACKTOP;
    STACKTOP += $18 + 128 | 0;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $21 = $20;
    ___gmpn_toom44_mul($p, $a, $n, $b, $n, $21);
    __label__ = 18;
    break;
   case 10:
    if (($n | 0) > 449) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $27 = STACKTOP;
    STACKTOP += ($n << 3) + 1528 | 0;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $28 = $27;
    ___gmpn_toom6h_mul($p, $a, $n, $b, $n, $28);
    __label__ = 18;
    break;
   case 12:
    if (($n | 0) > 2999) {
      __label__ = 17;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $32 = (i64Math.multiply($n, 0, 15, 0), i64Math.result[0]);
    var $35 = ($32 >> 1) + 1756 & -4;
    if ($35 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $37 = STACKTOP;
    STACKTOP += $35;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $38 = $37;
    ___gmpn_toom8h_mul($p, $a, $n, $b, $n, $38);
    __label__ = 18;
    break;
   case 15:
    var $40 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $35);
    var $_pre = HEAP32[$__tmp_marker >> 2];
    var $41 = $40;
    ___gmpn_toom8h_mul($p, $a, $n, $b, $n, $41);
    if (($_pre | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    ___gmp_tmp_reentrant_free($_pre);
    __label__ = 18;
    break;
   case 17:
    ___gmpn_nussbaumer_mul($p, $a, $n, $b, $n);
    __label__ = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mul_n["X"] = 1;

function ___gmpn_mullo_basecase($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAP32[$vp >> 2];
    var $2 = ___gmpn_mul_1($rp, $up, $n, $1);
    if (($n | 0) > 1) {
      var $i_01 = 1;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $i_01;
    var $4 = $rp + ($i_01 << 2) | 0;
    var $5 = $n - $i_01 | 0;
    var $7 = HEAP32[$vp + ($i_01 << 2) >> 2];
    var $8 = ___gmpn_addmul_1($4, $up, $5, $7);
    var $9 = $i_01 + 1 | 0;
    if (($9 | 0) == ($n | 0)) {
      __label__ = 4;
      break;
    } else {
      var $i_01 = $9;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mullo_n($rp, $xp, $yp, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if (($n | 0) > 89) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    ___gmpn_mullo_basecase($rp, $xp, $yp, $n);
    __label__ = 16;
    break;
   case 4:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $4 = _mpn_mullo_n_itch($n);
    var $5 = $4 << 2;
    if ($5 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $8 = STACKTOP;
    STACKTOP += $5;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $12 = $8;
    __label__ = 7;
    break;
   case 6:
    var $10 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $5);
    var $12 = $10;
    __label__ = 7;
    break;
   case 7:
    var $12;
    var $13 = $12;
    if (($n | 0) > 2999) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    _mpn_dc_mullo_n($rp, $xp, $yp, $n, $13);
    __label__ = 14;
    break;
   case 9:
    ___gmpn_mul_n($13, $xp, $yp, $n);
    var $17 = $n - 1 | 0;
    var $18 = HEAPU32[$13 >> 2];
    if (($17 | 0) == 0) {
      var $__x_1 = $18;
      var $__dst_1 = $rp;
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $__x_0 = $18;
    var $__src_0 = $12 + 4 | 0;
    var $__dst_0 = $rp;
    var $__n_0 = $17;
    __label__ = 11;
    break;
   case 11:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $25 = HEAP32[$__src_0 >> 2];
    var $26 = $__n_0 - 1 | 0;
    if (($26 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $__x_0 = $25;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $26;
      __label__ = 11;
      break;
    }
   case 12:
    var $__x_1 = $25;
    var $__dst_1 = $rp + ($17 << 2) | 0;
    __label__ = 13;
    break;
   case 13:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 14;
    break;
   case 14:
    var $30 = HEAP32[$__tmp_marker >> 2];
    if (($30 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    ___gmp_tmp_reentrant_free($30);
    __label__ = 16;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mullo_n["X"] = 1;

function _mpn_dc_mullo_n($rp, $xp, $yp, $n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 143) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = (i64Math.multiply($n, 0, 11, 0), i64Math.result[0]);
    var $4 = Math.floor(($3 >>> 0) / 36);
    var $n1_0 = $4;
    __label__ = 9;
    break;
   case 4:
    if (($n | 0) > 386) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $8 = (i64Math.multiply($n, 0, 9, 0), i64Math.result[0]);
    var $9 = Math.floor(($8 >>> 0) / 40);
    var $n1_0 = $9;
    __label__ = 9;
    break;
   case 6:
    if (($n | 0) > 499) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $13 = (i64Math.multiply($n, 0, 7, 0), i64Math.result[0]);
    var $14 = Math.floor(($13 >>> 0) / 39);
    var $n1_0 = $14;
    __label__ = 9;
    break;
   case 8:
    var $16 = Math.floor(($n >>> 0) / 10);
    var $n1_0 = $16;
    __label__ = 9;
    break;
   case 9:
    var $n1_0;
    var $18 = $n - $n1_0 | 0;
    ___gmpn_mul_n($tp, $xp, $yp, $18);
    if (($n1_0 | 0) == ($n | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $21 = $18 - 1 | 0;
    var $22 = HEAPU32[$tp >> 2];
    if (($21 | 0) == 0) {
      var $__x_1 = $22;
      var $__dst_1 = $rp;
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $25 = $n - 1 - $n1_0 | 0;
    var $__x_0 = $22;
    var $tp_pn = $tp;
    var $__dst_0 = $rp;
    var $__n_0 = $21;
    __label__ = 12;
    break;
   case 12:
    var $__n_0;
    var $__dst_0;
    var $tp_pn;
    var $__x_0;
    var $__src_0 = $tp_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $28 = HEAP32[$__src_0 >> 2];
    var $29 = $__n_0 - 1 | 0;
    if (($29 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__x_0 = $28;
      var $tp_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $29;
      __label__ = 12;
      break;
    }
   case 13:
    var $__x_1 = $28;
    var $__dst_1 = $rp + ($25 << 2) | 0;
    __label__ = 14;
    break;
   case 14:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 15;
    break;
   case 15:
    var $33 = $n1_0 >>> 0 > 89;
    var $34 = $tp + ($n << 2) | 0;
    var $35 = $xp + ($18 << 2) | 0;
    if ($33) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    ___gmpn_mullo_basecase($34, $35, $yp, $n1_0);
    __label__ = 18;
    break;
   case 17:
    _mpn_dc_mullo_n($34, $35, $yp, $n1_0, $34);
    __label__ = 18;
    break;
   case 18:
    var $39 = $rp + ($18 << 2) | 0;
    var $40 = $tp + ($18 << 2) | 0;
    var $41 = ___gmpn_add_n($39, $40, $34, $n1_0);
    var $42 = $yp + ($18 << 2) | 0;
    if ($33) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    ___gmpn_mullo_basecase($34, $xp, $42, $n1_0);
    __label__ = 21;
    break;
   case 20:
    _mpn_dc_mullo_n($34, $xp, $42, $n1_0, $34);
    __label__ = 21;
    break;
   case 21:
    var $46 = ___gmpn_add_n($39, $39, $34, $n1_0);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mpn_dc_mullo_n["X"] = 1;

function ___gmpn_bc_mulmod_bnm1($rp, $ap, $bp, $rn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    ___gmpn_mul_n($tp, $ap, $bp, $rn);
    var $1 = $tp + ($rn << 2) | 0;
    var $2 = ___gmpn_add_n($rp, $tp, $1, $rn);
    var $3 = HEAP32[$rp >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($3, $2);
    var $4 = $uadd.f0;
    HEAP32[$rp >> 2] = $4;
    var $5 = $uadd.f1;
    if ($5) {
      var $__p_0 = $rp;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $__p_0;
    var $6 = $__p_0 + 4 | 0;
    var $8 = HEAP32[$6 >> 2] + 1 | 0;
    HEAP32[$6 >> 2] = $8;
    if (($8 | 0) == 0) {
      var $__p_0 = $6;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_sqrmod_bnm1_itch($rn, $an) {
  var $3 = ($rn >> 1 | 0) < ($an | 0) ? $an : 0;
  return $rn + 3 + $3 | 0;
}

function _mpn_mulmod_bnm1_itch314($rn, $an, $bn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn >> 1;
    if (($1 | 0) < ($an | 0)) {
      __label__ = 3;
      break;
    } else {
      var $7 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ($1 | 0) < ($bn | 0) ? $rn : $1;
    var $7 = $5;
    __label__ = 4;
    break;
   case 4:
    var $7;
    return $rn + 4 + $7 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_nand_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__n_0 = -$n | 0;
    __label__ = 3;
    break;
   case 3:
    var $__n_0;
    var $_sum = $__n_0 + $n | 0;
    var $8 = HEAP32[$vp + ($_sum << 2) >> 2] & HEAP32[$up + ($_sum << 2) >> 2] ^ -1;
    HEAP32[$rp + ($_sum << 2) >> 2] = $8;
    var $10 = $__n_0 + 1 | 0;
    if (($10 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $__n_0 = $10;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_nior_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__n_0 = -$n | 0;
    __label__ = 3;
    break;
   case 3:
    var $__n_0;
    var $_sum = $__n_0 + $n | 0;
    var $8 = (HEAP32[$vp + ($_sum << 2) >> 2] | HEAP32[$up + ($_sum << 2) >> 2]) ^ -1;
    HEAP32[$rp + ($_sum << 2) >> 2] = $8;
    var $10 = $__n_0 + 1 | 0;
    if (($10 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $__n_0 = $10;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_mulmod_bnm1($rp, $rn, $ap, $an, $bp, $bn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($rn & 1 | 0) == 0 & ($rn | 0) > 15) {
      __label__ = 9;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($bn | 0) < ($rn | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 4:
    var $7 = $bn + $an | 0;
    if (($7 | 0) > ($rn | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $10 = ___gmpn_mul($rp, $ap, $an, $bp, $bn);
    __label__ = 39;
    break;
   case 6:
    var $12 = ___gmpn_mul($tp, $ap, $an, $bp, $bn);
    var $13 = $tp + ($rn << 2) | 0;
    var $14 = $7 - $rn | 0;
    var $15 = ___gmpn_add($rp, $tp, $rn, $13, $14);
    var $16 = HEAP32[$rp >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($16, $15);
    var $17 = $uadd.f0;
    HEAP32[$rp >> 2] = $17;
    var $18 = $uadd.f1;
    if ($18) {
      var $__p_0 = $rp;
      __label__ = 7;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 7:
    var $__p_0;
    var $19 = $__p_0 + 4 | 0;
    var $21 = HEAP32[$19 >> 2] + 1 | 0;
    HEAP32[$19 >> 2] = $21;
    if (($21 | 0) == 0) {
      var $__p_0 = $19;
      __label__ = 7;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 8:
    ___gmpn_bc_mulmod_bnm1($rp, $ap, $bp, $rn, $tp);
    __label__ = 39;
    break;
   case 9:
    var $25 = $rn >> 1;
    if (($25 | 0) < ($an | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 10:
    var $28 = $ap + ($25 << 2) | 0;
    var $29 = $an - $25 | 0;
    var $30 = ___gmpn_add($tp, $ap, $25, $28, $29);
    var $31 = HEAP32[$tp >> 2];
    var $uadd16 = _llvm_uadd_with_overflow_i32($31, $30);
    var $32 = $uadd16.f0;
    HEAP32[$tp >> 2] = $32;
    var $33 = $uadd16.f1;
    if ($33) {
      var $__p3_0 = $tp;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $__p3_0;
    var $34 = $__p3_0 + 4 | 0;
    var $36 = HEAP32[$34 >> 2] + 1 | 0;
    HEAP32[$34 >> 2] = $36;
    if (($36 | 0) == 0) {
      var $__p3_0 = $34;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $39 = $tp + ($25 << 2) | 0;
    if (($25 | 0) < ($bn | 0)) {
      __label__ = 13;
      break;
    } else {
      var $bm1_0 = $bp;
      var $bnm_0 = $bn;
      var $so_0 = $39;
      __label__ = 16;
      break;
    }
   case 13:
    var $41 = $bp + ($25 << 2) | 0;
    var $42 = $bn - $25 | 0;
    var $43 = ___gmpn_add($39, $bp, $25, $41, $42);
    var $44 = HEAP32[$39 >> 2];
    var $uadd17 = _llvm_uadd_with_overflow_i32($44, $43);
    var $45 = $uadd17.f0;
    HEAP32[$39 >> 2] = $45;
    var $46 = $uadd17.f1;
    if ($46) {
      var $__p5_0 = $39;
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $__p5_0;
    var $47 = $__p5_0 + 4 | 0;
    var $49 = HEAP32[$47 >> 2] + 1 | 0;
    HEAP32[$47 >> 2] = $49;
    if (($49 | 0) == 0) {
      var $__p5_0 = $47;
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $bm1_0 = $39;
    var $bnm_0 = $25;
    var $so_0 = $tp + (($rn & -2) << 2) | 0;
    __label__ = 16;
    break;
   case 16:
    var $so_0;
    var $bnm_0;
    var $bm1_0;
    ___gmpn_mulmod_bnm1($rp, $25, $tp, $25, $bm1_0, $bnm_0, $so_0);
    var $_sum13 = $rn + 2 & -2;
    var $55 = $tp + ($_sum13 << 2) | 0;
    var $56 = ___gmpn_sub($55, $ap, $25, $28, $29);
    var $57 = $tp + ($_sum13 + $25 << 2) | 0;
    HEAP32[$57 >> 2] = 0;
    var $58 = HEAP32[$55 >> 2];
    var $uadd15 = _llvm_uadd_with_overflow_i32($58, $56);
    var $59 = $uadd15.f0;
    HEAP32[$55 >> 2] = $59;
    var $60 = $uadd15.f1;
    if ($60) {
      var $__p7_0 = $55;
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $__p7_0;
    var $61 = $__p7_0 + 4 | 0;
    var $63 = HEAP32[$61 >> 2] + 1 | 0;
    HEAP32[$61 >> 2] = $63;
    if (($63 | 0) == 0) {
      var $__p7_0 = $61;
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $anp_0 = HEAP32[$57 >> 2] + $25 | 0;
    var $ap1_0 = $55;
    __label__ = 20;
    break;
   case 19:
    ___gmpn_mulmod_bnm1($rp, $25, $ap, $an, $bp, $bn, $tp);
    var $anp_0 = $an;
    var $ap1_0 = $ap;
    __label__ = 20;
    break;
   case 20:
    var $ap1_0;
    var $anp_0;
    if (($25 | 0) < ($bn | 0)) {
      __label__ = 21;
      break;
    } else {
      var $bnp_0 = $bn;
      var $bp1_0 = $bp;
      __label__ = 24;
      break;
    }
   case 21:
    var $_sum7 = $rn + 2 & -2;
    var $_sum9 = $25 + 1 + $_sum7 | 0;
    var $71 = $tp + ($_sum9 << 2) | 0;
    var $72 = $bp + ($25 << 2) | 0;
    var $73 = $bn - $25 | 0;
    var $74 = ___gmpn_sub($71, $bp, $25, $72, $73);
    HEAP32[$tp + ($_sum7 + ($rn | 1) << 2) >> 2] = 0;
    var $77 = HEAP32[$71 >> 2];
    var $uadd11 = _llvm_uadd_with_overflow_i32($77, $74);
    var $78 = $uadd11.f0;
    HEAP32[$71 >> 2] = $78;
    var $79 = $uadd11.f1;
    if ($79) {
      var $__p9_0 = $71;
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $__p9_0;
    var $80 = $__p9_0 + 4 | 0;
    var $82 = HEAP32[$80 >> 2] + 1 | 0;
    HEAP32[$80 >> 2] = $82;
    if (($82 | 0) == 0) {
      var $__p9_0 = $80;
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $bnp_0 = HEAP32[$tp + ($_sum9 + $25 << 2) >> 2] + $25 | 0;
    var $bp1_0 = $71;
    __label__ = 24;
    break;
   case 24:
    var $bp1_0;
    var $bnp_0;
    if (($25 | 0) > 299) {
      __label__ = 25;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 25:
    var $90 = ___gmpn_fft_best_k($25, 0);
    var $92 = (1 << $90) - 1 | 0;
    if (($92 & $25 | 0) == 0) {
      var $k_0_lcssa = $90;
      __label__ = 27;
      break;
    } else {
      var $k_024 = $90;
      var $mask_025 = $92;
      __label__ = 26;
      break;
    }
   case 26:
    var $mask_025;
    var $k_024;
    var $95 = $k_024 - 1 | 0;
    var $96 = $mask_025 >> 1;
    if (($96 & $25 | 0) == 0) {
      var $k_0_lcssa = $95;
      __label__ = 27;
      break;
    } else {
      var $k_024 = $95;
      var $mask_025 = $96;
      __label__ = 26;
      break;
    }
   case 27:
    var $k_0_lcssa;
    if (($k_0_lcssa | 0) > 3) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $101 = ___gmpn_mul_fft($tp, $25, $ap1_0, $anp_0, $bp1_0, $bnp_0, $k_0_lcssa);
    var $102 = $tp + ($25 << 2) | 0;
    HEAP32[$102 >> 2] = $101;
    var $_pre_phi = $102;
    __label__ = 33;
    break;
   case 29:
    if (($bp1_0 | 0) == ($bp | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 30:
    var $105 = ___gmpn_mul($tp, $ap1_0, $anp_0, $bp, $bnp_0);
    var $107 = $anp_0 - $25 + $bnp_0 | 0;
    var $110 = $107 - (($107 | 0) > ($25 | 0) & 1) | 0;
    var $111 = $tp + ($25 << 2) | 0;
    var $112 = ___gmpn_sub($tp, $tp, $25, $111, $110);
    HEAP32[$111 >> 2] = 0;
    var $113 = HEAP32[$tp >> 2];
    var $uadd6 = _llvm_uadd_with_overflow_i32($113, $112);
    var $114 = $uadd6.f0;
    HEAP32[$tp >> 2] = $114;
    var $115 = $uadd6.f1;
    if ($115) {
      var $__p11_0 = $tp;
      __label__ = 31;
      break;
    } else {
      var $_pre_phi = $111;
      __label__ = 33;
      break;
    }
   case 31:
    var $__p11_0;
    var $116 = $__p11_0 + 4 | 0;
    var $118 = HEAP32[$116 >> 2] + 1 | 0;
    HEAP32[$116 >> 2] = $118;
    if (($118 | 0) == 0) {
      var $__p11_0 = $116;
      __label__ = 31;
      break;
    } else {
      var $_pre_phi = $111;
      __label__ = 33;
      break;
    }
   case 32:
    _mpn_bc_mulmod_bnp1($tp, $ap1_0, $bp1_0, $25, $tp);
    var $_pre_phi = $tp + ($25 << 2) | 0;
    __label__ = 33;
    break;
   case 33:
    var $_pre_phi;
    var $121 = HEAP32[$_pre_phi >> 2];
    var $122 = ___gmpn_add_n($rp, $rp, $tp, $25);
    var $126 = $122 + $121 + (HEAP32[$rp >> 2] & 1) | 0;
    var $127 = ___gmpn_rshift($rp, $rp, $25, 1);
    var $129 = $126 >>> 1;
    var $131 = $rp + ($25 - 1 << 2) | 0;
    var $133 = $126 << 31 | HEAP32[$131 >> 2];
    HEAP32[$131 >> 2] = $133;
    var $134 = HEAP32[$rp >> 2];
    var $uadd2 = _llvm_uadd_with_overflow_i32($134, $129);
    var $135 = $uadd2.f0;
    HEAP32[$rp >> 2] = $135;
    var $136 = $uadd2.f1;
    if ($136) {
      var $__p13_0 = $rp;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $__p13_0;
    var $137 = $__p13_0 + 4 | 0;
    var $139 = HEAP32[$137 >> 2] + 1 | 0;
    HEAP32[$137 >> 2] = $139;
    if (($139 | 0) == 0) {
      var $__p13_0 = $137;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $141 = $bn + $an | 0;
    if (($141 | 0) < ($rn | 0)) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $144 = $rp + ($25 << 2) | 0;
    var $145 = $141 - $25 | 0;
    var $146 = ___gmpn_sub_n($144, $rp, $tp, $145);
    var $147 = HEAP32[$_pre_phi >> 2];
    var $_sum3 = $an - $25 + $bn | 0;
    var $148 = $tp + ($_sum3 << 2) | 0;
    var $149 = $rp + ($_sum3 << 2) | 0;
    var $150 = $rn - $141 | 0;
    var $151 = _mpn_sub_nc309($148, $149, $148, $150, $146);
    var $152 = $151 + $147 | 0;
    var $153 = ___gmpn_sub_1($rp, $rp, $141, $152);
    __label__ = 39;
    break;
   case 37:
    var $155 = HEAP32[$_pre_phi >> 2];
    var $156 = $rp + ($25 << 2) | 0;
    var $157 = ___gmpn_sub_n($156, $rp, $tp, $25);
    var $158 = $157 + $155 | 0;
    var $159 = HEAPU32[$rp >> 2];
    var $160 = $159 - $158 | 0;
    HEAP32[$rp >> 2] = $160;
    if ($159 >>> 0 < $158 >>> 0) {
      var $__p15_0 = $rp;
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    var $__p15_0;
    var $162 = $__p15_0 + 4 | 0;
    var $163 = HEAP32[$162 >> 2];
    var $164 = $163 - 1 | 0;
    HEAP32[$162 >> 2] = $164;
    if (($163 | 0) == 0) {
      var $__p15_0 = $162;
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_mulmod_bnm1["X"] = 1;

function _mpn_bc_mulmod_bnp1($rp, $ap, $bp, $rn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn + 1 | 0;
    ___gmpn_mul_n($tp, $ap, $bp, $1);
    var $4 = HEAP32[$tp + ($rn << 1 << 2) >> 2];
    var $5 = $tp + ($rn << 2) | 0;
    var $6 = ___gmpn_sub_n($rp, $tp, $5, $rn);
    var $7 = $6 + $4 | 0;
    HEAP32[$rp + ($rn << 2) >> 2] = 0;
    var $9 = HEAP32[$rp >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($9, $7);
    var $10 = $uadd.f0;
    HEAP32[$rp >> 2] = $10;
    var $11 = $uadd.f1;
    if ($11) {
      var $__p_0 = $rp;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $__p_0;
    var $12 = $__p_0 + 4 | 0;
    var $14 = HEAP32[$12 >> 2] + 1 | 0;
    HEAP32[$12 >> 2] = $14;
    if (($14 | 0) == 0) {
      var $__p_0 = $12;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_sub_nc309($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_sub_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_sub_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function ___gmpn_mulmod_bnm1_next_size($n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 15) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $n;
      __label__ = 10;
      break;
    }
   case 3:
    if (($n | 0) > 60) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_0 = $n + 1 & -2;
    __label__ = 10;
    break;
   case 5:
    if (($n | 0) > 120) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $_0 = $n + 3 & -4;
    __label__ = 10;
    break;
   case 7:
    var $14 = $n + 1 >> 1;
    if (($14 | 0) > 299) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_0 = $n + 7 & -8;
    __label__ = 10;
    break;
   case 9:
    var $20 = ___gmpn_fft_best_k($14, 0);
    var $21 = ___gmpn_fft_next_size($14, $20);
    var $_0 = $21 << 1;
    __label__ = 10;
    break;
   case 10:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_nussbaumer_mul($pp, $ap, $an, $bp, $bn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($ap | 0) == ($bp | 0) & ($an | 0) == ($bn | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    var $4 = $an << 1;
    var $5 = ___gmpn_sqrmod_bnm1_next_size($4);
    var $6 = _mpn_sqrmod_bnm1_itch($5, $an);
    var $7 = $6 << 2;
    if ($7 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $10 = STACKTOP;
    STACKTOP += $7;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $14 = $10;
    __label__ = 6;
    break;
   case 5:
    var $12 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $7);
    var $14 = $12;
    __label__ = 6;
    break;
   case 6:
    var $14;
    ___gmpn_sqrmod_bnm1($pp, $5, $ap, $an, $14);
    __label__ = 11;
    break;
   case 7:
    var $17 = $bn + $an | 0;
    var $18 = ___gmpn_mulmod_bnm1_next_size($17);
    var $19 = _mpn_mulmod_bnm1_itch314($18, $an, $bn);
    var $20 = $19 << 2;
    if ($20 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $23 = STACKTOP;
    STACKTOP += $20;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $27 = $23;
    __label__ = 10;
    break;
   case 9:
    var $25 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $20);
    var $27 = $25;
    __label__ = 10;
    break;
   case 10:
    var $27;
    ___gmpn_mulmod_bnm1($pp, $18, $ap, $an, $bp, $bn, $27);
    __label__ = 11;
    break;
   case 11:
    var $30 = HEAP32[$__tmp_marker >> 2];
    if (($30 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    ___gmp_tmp_reentrant_free($30);
    __label__ = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_pow_1($rp, $bp, $bn, $exp, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($exp >>> 0 < 2) {
      __label__ = 3;
      break;
    } else {
      var $par_012 = 0;
      var $cnt_013 = 32;
      var $x_014 = $exp;
      __label__ = 10;
      break;
    }
   case 3:
    if (($exp | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    HEAP32[$rp >> 2] = 1;
    var $_0 = 1;
    __label__ = 22;
    break;
   case 5:
    if (($bn | 0) == 0) {
      var $_0 = 0;
      __label__ = 22;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $8 = $bn - 1 | 0;
    var $9 = HEAPU32[$bp >> 2];
    if (($8 | 0) == 0) {
      var $__x_1 = $9;
      var $__dst_1 = $rp;
      __label__ = 9;
      break;
    } else {
      var $__x_0 = $9;
      var $bp_pn = $bp;
      var $__n_0 = $8;
      var $__dst_0 = $rp;
      __label__ = 7;
      break;
    }
   case 7:
    var $__dst_0;
    var $__n_0;
    var $bp_pn;
    var $__x_0;
    var $__src_0 = $bp_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $12 = HEAP32[$__src_0 >> 2];
    var $13 = $__n_0 - 1 | 0;
    if (($13 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $12;
      var $bp_pn = $__src_0;
      var $__n_0 = $13;
      var $__dst_0 = $__dst_0 + 4 | 0;
      __label__ = 7;
      break;
    }
   case 8:
    var $__x_1 = $12;
    var $__dst_1 = $rp + ($8 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_0 = $bn;
    __label__ = 22;
    break;
   case 10:
    var $x_014;
    var $cnt_013;
    var $par_012;
    var $17 = $x_014 & 1 ^ $par_012;
    var $18 = $cnt_013 - 1 | 0;
    var $19 = $x_014 >>> 1;
    if (($19 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $par_012 = $17;
      var $cnt_013 = $18;
      var $x_014 = $19;
      __label__ = 10;
      break;
    }
   case 11:
    var $phitmp = 1 - $cnt_013 + 31 | 0;
    var $22 = $exp << $18;
    if (($bn | 0) == 1) {
      __label__ = 12;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 12:
    var $25 = HEAP32[$bp >> 2];
    var $27 = ($18 & 1 | 0) == 0;
    var $tp_rp = $27 ? $tp : $rp;
    var $rp_tp = $27 ? $rp : $tp;
    ___gmpn_sqr($rp_tp, $bp, 1);
    var $31 = (HEAP32[$rp_tp + 4 >> 2] | 0) == 0 ? 1 : 2;
    var $_1 = $rp_tp;
    var $_02 = $22;
    var $_15 = $tp_rp;
    var $i_0 = $phitmp;
    var $rn_0 = $31;
    __label__ = 13;
    break;
   case 13:
    var $rn_0;
    var $i_0;
    var $_15;
    var $_02;
    var $_1;
    var $33 = $_02 << 1;
    if (($33 | 0) < 0) {
      __label__ = 14;
      break;
    } else {
      var $rn_1 = $rn_0;
      __label__ = 15;
      break;
    }
   case 14:
    var $36 = ___gmpn_mul_1($_1, $_1, $rn_0, $25);
    HEAP32[$_1 + ($rn_0 << 2) >> 2] = $36;
    var $rn_1 = (($36 | 0) != 0 & 1) + $rn_0 | 0;
    __label__ = 15;
    break;
   case 15:
    var $rn_1;
    var $42 = $i_0 - 1 | 0;
    if (($42 | 0) == 0) {
      var $_0 = $rn_1;
      __label__ = 22;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    ___gmpn_sqr($_15, $_1, $rn_1);
    var $45 = $rn_1 << 1;
    var $_1 = $_15;
    var $_02 = $33;
    var $i_0 = $42;
    var $rn_0 = $45 - ((HEAP32[$_15 + ($45 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $_15 = $_1;
    __label__ = 13;
    break;
   case 17:
    var $55 = (($18 ^ $17) & 1 | 0) == 0;
    var $rp_tp9 = $55 ? $rp : $tp;
    var $tp_rp10 = $55 ? $tp : $rp;
    ___gmpn_sqr($tp_rp10, $bp, $bn);
    var $56 = $bn << 1;
    var $_3 = $tp_rp10;
    var $_13 = $22;
    var $_37 = $rp_tp9;
    var $i_1 = $phitmp;
    var $rn_2 = $56 - ((HEAP32[$tp_rp10 + ($56 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 18;
    break;
   case 18:
    var $rn_2;
    var $i_1;
    var $_37;
    var $_13;
    var $_3;
    var $64 = $_13 << 1;
    if (($64 | 0) < 0) {
      __label__ = 19;
      break;
    } else {
      var $_4 = $_3;
      var $_48 = $_37;
      var $rn_3 = $rn_2;
      __label__ = 20;
      break;
    }
   case 19:
    var $67 = ___gmpn_mul($_37, $_3, $rn_2, $bp, $bn);
    var $_4 = $_37;
    var $_48 = $_3;
    var $rn_3 = $rn_2 + $bn + ((($67 | 0) == 0) << 31 >> 31) | 0;
    __label__ = 20;
    break;
   case 20:
    var $rn_3;
    var $_48;
    var $_4;
    var $72 = $i_1 - 1 | 0;
    if (($72 | 0) == 0) {
      var $_0 = $rn_3;
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    ___gmpn_sqr($_48, $_4, $rn_3);
    var $75 = $rn_3 << 1;
    var $_3 = $_48;
    var $_13 = $64;
    var $_37 = $_4;
    var $i_1 = $72;
    var $rn_2 = $75 - ((HEAP32[$_48 + ($75 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 18;
    break;
   case 22:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_pow_1["X"] = 1;

function _win_size320($eb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $k_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $k_0;
    if (HEAPU32[_win_size_x317 + ($k_0 << 2) >> 2] >>> 0 < $eb >>> 0) {
      var $k_0 = $k_0 + 1 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return $k_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _getbits321($p, $bi, $nbits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($bi >>> 0 < $nbits >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = HEAP32[$p >> 2] & (1 << $bi) - 1;
    __label__ = 7;
    break;
   case 4:
    var $8 = $bi - $nbits | 0;
    var $9 = $8 >>> 5;
    var $10 = $8 & 31;
    var $13 = HEAPU32[$p + ($9 << 2) >> 2] >>> ($10 >>> 0);
    var $14 = 32 - $10 | 0;
    if (($14 | 0) < ($nbits | 0)) {
      __label__ = 5;
      break;
    } else {
      var $r_0 = $13;
      __label__ = 6;
      break;
    }
   case 5:
    var $r_0 = (HEAP32[$p + ($9 + 1 << 2) >> 2] << $14) + $13 | 0;
    __label__ = 6;
    break;
   case 6:
    var $r_0;
    var $_0 = $r_0 & (1 << $nbits) - 1;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_powlo($rp, $bp, $ep, $en, $n, $tp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $3 = HEAPU32[$ep + ($en - 1 << 2) >> 2];
    if ($3 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = $3 >>> 0 < 256 ? 1 : 9;
    var $12 = $7;
    __label__ = 5;
    break;
   case 4:
    var $10 = $3 >>> 0 < 16777216 ? 17 : 25;
    var $12 = $10;
    __label__ = 5;
    break;
   case 5:
    var $12;
    var $14 = STRING_TABLE.___gmpn_clz_tab + ($3 >>> ($12 >>> 0)) | 0;
    var $20 = ($en << 5) - 33 + $12 + (HEAPU8[$14] & 255) | 0;
    var $21 = _win_size320($20);
    var $22 = $21 - 1 | 0;
    var $25 = ($n << $22) + $n << 2;
    if ($25 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $28 = STACKTOP;
    STACKTOP += $25;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $32 = $28;
    __label__ = 8;
    break;
   case 7:
    var $30 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $25);
    var $32 = $30;
    __label__ = 8;
    break;
   case 8:
    var $32;
    var $33 = $32;
    var $34 = ($n | 0) != 0;
    if ($34) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmpn_sqr($tp, $bp, 0);
    var $59 = $tp;
    __label__ = 19;
    break;
   case 10:
    var $36 = $n - 1 | 0;
    var $37 = HEAPU32[$bp >> 2];
    var $38 = ($36 | 0) == 0;
    if ($38) {
      var $__dst_1 = $33;
      var $__x_1 = $37;
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $scevgep = $32 + (($n << 2) - 4) | 0;
    var $__n_0 = $36;
    var $__dst_0 = $33;
    var $bp_pn = $bp;
    var $__x_0 = $37;
    __label__ = 12;
    break;
   case 12:
    var $__x_0;
    var $bp_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $bp_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $43 = HEAP32[$__src_0 >> 2];
    var $44 = $__n_0 - 1 | 0;
    if (($44 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__n_0 = $44;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $bp_pn = $__src_0;
      var $__x_0 = $43;
      __label__ = 12;
      break;
    }
   case 13:
    var $__dst_1 = $scevgep;
    var $__x_1 = $43;
    __label__ = 14;
    break;
   case 14:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $48 = $tp + ($n << 1 << 2) | 0;
    ___gmpn_sqr($tp, $bp, $n);
    var $49 = HEAP32[$tp >> 2];
    if ($38) {
      var $__dst2_1 = $48;
      var $__x4_1 = $49;
      __label__ = 18;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $50 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $51 = $50 - 1 | 0;
    var $__n1_0 = $36;
    var $__dst2_0 = $48;
    var $tp_pn3 = $tp;
    var $__x4_0 = $49;
    __label__ = 16;
    break;
   case 16:
    var $__x4_0;
    var $tp_pn3;
    var $__dst2_0;
    var $__n1_0;
    var $__src3_0 = $tp_pn3 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $54 = HEAP32[$__src3_0 >> 2];
    var $55 = $__n1_0 - 1 | 0;
    if (($55 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $__n1_0 = $55;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $tp_pn3 = $__src3_0;
      var $__x4_0 = $54;
      __label__ = 16;
      break;
    }
   case 17:
    var $__dst2_1 = $tp + ($51 << 2) | 0;
    var $__x4_1 = $54;
    __label__ = 18;
    break;
   case 18:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $59 = $48;
    __label__ = 19;
    break;
   case 19:
    var $59;
    var $i_030 = (1 << $22) - 1 | 0;
    if (($i_030 | 0) > 0) {
      var $this_pp_031 = $33;
      var $i_032 = $i_030;
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $i_032;
    var $this_pp_031;
    var $62 = $this_pp_031 + ($n << 2) | 0;
    ___gmpn_mullo_n($62, $this_pp_031, $59, $n);
    var $i_0 = $i_032 - 1 | 0;
    if (($i_0 | 0) > 0) {
      var $this_pp_031 = $62;
      var $i_032 = $i_0;
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $64 = _getbits321($ep, $20, $21);
    var $ebi_0 = $20 >>> 0 < $21 >>> 0 ? 0 : $20 - $21 | 0;
    var $68 = $64 & -$64;
    if ($68 >>> 0 < 65536) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $72 = $68 >>> 0 < 256 ? 1 : 9;
    var $77 = $72;
    __label__ = 24;
    break;
   case 23:
    var $75 = $68 >>> 0 < 16777216 ? 17 : 25;
    var $77 = $75;
    __label__ = 24;
    break;
   case 24:
    var $77;
    var $79 = STRING_TABLE.___gmpn_clz_tab + ($68 >>> ($77 >>> 0)) | 0;
    var $83 = $77 - 2 + (HEAPU8[$79] & 255) | 0;
    var $84 = $83 + $ebi_0 | 0;
    if ($34) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $_pre_phi = $n - 1 | 0;
    __label__ = 31;
    break;
   case 26:
    var $87 = $n - 1 | 0;
    var $88 = $64 >>> ($83 >>> 0) >>> 1;
    var $89 = (i64Math.multiply($88, 0, $n, 0), i64Math.result[0]);
    var $91 = HEAPU32[$33 + ($89 << 2) >> 2];
    if (($87 | 0) == 0) {
      var $__x10_1 = $91;
      var $__dst8_1 = $rp;
      __label__ = 30;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $__x10_0 = $91;
    var $__src9_0 = $33 + ($89 + 1 << 2) | 0;
    var $__dst8_0 = $rp;
    var $__n7_0 = $87;
    __label__ = 28;
    break;
   case 28:
    var $__n7_0;
    var $__dst8_0;
    var $__src9_0;
    var $__x10_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $97 = HEAP32[$__src9_0 >> 2];
    var $98 = $__n7_0 - 1 | 0;
    if (($98 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      var $__x10_0 = $97;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $98;
      __label__ = 28;
      break;
    }
   case 29:
    var $__x10_1 = $97;
    var $__dst8_1 = $rp + ($87 << 2) | 0;
    __label__ = 30;
    break;
   case 30:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    var $_pre_phi = $87;
    __label__ = 31;
    break;
   case 31:
    var $_pre_phi;
    var $101 = ($_pre_phi | 0) == 0;
    var $scevgep40 = $rp + ($_pre_phi << 2) | 0;
    var $ebi_1 = $84;
    __label__ = 32;
    break;
   case 32:
    var $ebi_1;
    if (($ebi_1 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      var $ebi_2 = $ebi_1;
      __label__ = 33;
      break;
    }
   case 33:
    var $ebi_2;
    var $103 = $ebi_2 - 1 | 0;
    if ((1 << ($103 & 31) & HEAP32[$ep + ($103 >>> 5 << 2) >> 2] | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 34:
    ___gmpn_sqr($tp, $rp, $n);
    if ($34) {
      __label__ = 35;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 35:
    var $113 = HEAPU32[$tp >> 2];
    if ($101) {
      var $__x14_1 = $113;
      var $__dst12_1 = $rp;
      __label__ = 37;
      break;
    } else {
      var $__x14_0 = $113;
      var $tp_pn2 = $tp;
      var $__dst12_0 = $rp;
      var $__n11_0 = $_pre_phi;
      __label__ = 36;
      break;
    }
   case 36:
    var $__n11_0;
    var $__dst12_0;
    var $tp_pn2;
    var $__x14_0;
    var $__src13_0 = $tp_pn2 + 4 | 0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    var $115 = HEAP32[$__src13_0 >> 2];
    var $116 = $__n11_0 - 1 | 0;
    if (($116 | 0) == 0) {
      var $__x14_1 = $115;
      var $__dst12_1 = $scevgep40;
      __label__ = 37;
      break;
    } else {
      var $__x14_0 = $115;
      var $tp_pn2 = $__src13_0;
      var $__dst12_0 = $__dst12_0 + 4 | 0;
      var $__n11_0 = $116;
      __label__ = 36;
      break;
    }
   case 37:
    var $__dst12_1;
    var $__x14_1;
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    __label__ = 38;
    break;
   case 38:
    if (($103 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      var $ebi_2 = $103;
      __label__ = 33;
      break;
    }
   case 39:
    var $121 = _getbits321($ep, $ebi_2, $21);
    var $122 = $ebi_2 >>> 0 < $21 >>> 0;
    var $this_windowsize_0 = $122 ? $ebi_2 : $21;
    var $ebi_3 = $122 ? 0 : $ebi_2 - $21 | 0;
    var $125 = $121 & -$121;
    if ($125 >>> 0 < 65536) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $129 = $125 >>> 0 < 256 ? 1 : 9;
    var $134 = $129;
    __label__ = 42;
    break;
   case 41:
    var $132 = $125 >>> 0 < 16777216 ? 17 : 25;
    var $134 = $132;
    __label__ = 42;
    break;
   case 42:
    var $134;
    var $136 = STRING_TABLE.___gmpn_clz_tab + ($125 >>> ($134 >>> 0)) | 0;
    var $140 = $134 - 2 + (HEAPU8[$136] & 255) | 0;
    var $142 = $140 + $ebi_3 | 0;
    var $this_windowsize_1 = $this_windowsize_0 - $140 | 0;
    __label__ = 43;
    break;
   case 43:
    var $this_windowsize_1;
    ___gmpn_sqr($tp, $rp, $n);
    if ($34) {
      __label__ = 44;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 44:
    var $145 = HEAPU32[$tp >> 2];
    if ($101) {
      var $__x22_1 = $145;
      var $__dst20_1 = $rp;
      __label__ = 46;
      break;
    } else {
      var $__x22_0 = $145;
      var $tp_pn1 = $tp;
      var $__dst20_0 = $rp;
      var $__n19_0 = $_pre_phi;
      __label__ = 45;
      break;
    }
   case 45:
    var $__n19_0;
    var $__dst20_0;
    var $tp_pn1;
    var $__x22_0;
    var $__src21_0 = $tp_pn1 + 4 | 0;
    HEAP32[$__dst20_0 >> 2] = $__x22_0;
    var $147 = HEAP32[$__src21_0 >> 2];
    var $148 = $__n19_0 - 1 | 0;
    if (($148 | 0) == 0) {
      var $__x22_1 = $147;
      var $__dst20_1 = $scevgep40;
      __label__ = 46;
      break;
    } else {
      var $__x22_0 = $147;
      var $tp_pn1 = $__src21_0;
      var $__dst20_0 = $__dst20_0 + 4 | 0;
      var $__n19_0 = $148;
      __label__ = 45;
      break;
    }
   case 46:
    var $__dst20_1;
    var $__x22_1;
    HEAP32[$__dst20_1 >> 2] = $__x22_1;
    __label__ = 47;
    break;
   case 47:
    var $151 = $this_windowsize_1 - 1 | 0;
    if (($151 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      var $this_windowsize_1 = $151;
      __label__ = 43;
      break;
    }
   case 48:
    var $155 = $121 >>> ($140 >>> 0) >>> 1;
    var $156 = (i64Math.multiply($155, 0, $n, 0), i64Math.result[0]);
    var $157 = $33 + ($156 << 2) | 0;
    ___gmpn_mullo_n($tp, $rp, $157, $n);
    if ($34) {
      __label__ = 49;
      break;
    } else {
      var $ebi_1 = $142;
      __label__ = 32;
      break;
    }
   case 49:
    var $159 = HEAPU32[$tp >> 2];
    if ($101) {
      var $__x26_1 = $159;
      var $__dst24_1 = $rp;
      __label__ = 51;
      break;
    } else {
      var $__x26_0 = $159;
      var $tp_pn = $tp;
      var $__dst24_0 = $rp;
      var $__n23_0 = $_pre_phi;
      __label__ = 50;
      break;
    }
   case 50:
    var $__n23_0;
    var $__dst24_0;
    var $tp_pn;
    var $__x26_0;
    var $__src25_0 = $tp_pn + 4 | 0;
    HEAP32[$__dst24_0 >> 2] = $__x26_0;
    var $161 = HEAP32[$__src25_0 >> 2];
    var $162 = $__n23_0 - 1 | 0;
    if (($162 | 0) == 0) {
      var $__x26_1 = $161;
      var $__dst24_1 = $scevgep40;
      __label__ = 51;
      break;
    } else {
      var $__x26_0 = $161;
      var $tp_pn = $__src25_0;
      var $__dst24_0 = $__dst24_0 + 4 | 0;
      var $__n23_0 = $162;
      __label__ = 50;
      break;
    }
   case 51:
    var $__dst24_1;
    var $__x26_1;
    HEAP32[$__dst24_1 >> 2] = $__x26_1;
    var $ebi_1 = $142;
    __label__ = 32;
    break;
   case 52:
    var $164 = HEAP32[$__tmp_marker >> 2];
    if (($164 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    ___gmp_tmp_reentrant_free($164);
    __label__ = 54;
    break;
   case 54:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_powlo["X"] = 1;

function ___gmpn_preinv_divrem_1($qp, $xsize, $ap, $size, $d_unnorm, $dinv, $shift) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $size - 1 | 0;
    var $3 = HEAPU32[$ap + ($1 << 2) >> 2];
    var $4 = $d_unnorm << $shift;
    var $5 = $size + $xsize | 0;
    var $7 = $qp + ($5 - 1 << 2) | 0;
    if (($shift | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 3:
    var $10 = $3 >>> 0 >= $4 >>> 0;
    var $12 = $10 ? $4 : 0;
    var $_ = $3 - $12 | 0;
    var $13 = $qp + ($5 - 2 << 2) | 0;
    HEAP32[$7 >> 2] = $10 & 1;
    var $14 = $size - 2 | 0;
    if (($14 | 0) > -1) {
      __label__ = 4;
      break;
    } else {
      var $_4_ph = $13;
      var $r_4_ph = $_;
      __label__ = 26;
      break;
    }
   case 4:
    var $16 = $dinv & 65535;
    var $17 = $dinv >>> 16;
    var $19 = 1 - $size | 0;
    var $smax30 = ($19 | 0) > -1 ? $19 : -1;
    var $21 = $xsize - 2 - $smax30 | 0;
    var $i_021 = $14;
    var $r_022 = $_;
    var $_023 = $13;
    __label__ = 5;
    break;
   case 5:
    var $_023;
    var $r_022;
    var $i_021;
    var $24 = HEAPU32[$ap + ($i_021 << 2) >> 2];
    var $25 = $r_022 & 65535;
    var $26 = $r_022 >>> 16;
    var $27 = (i64Math.multiply($25, 0, $16, 0), i64Math.result[0]);
    var $28 = (i64Math.multiply($25, 0, $17, 0), i64Math.result[0]);
    var $29 = (i64Math.multiply($26, 0, $16, 0), i64Math.result[0]);
    var $30 = (i64Math.multiply($26, 0, $17, 0), i64Math.result[0]);
    var $32 = ($27 >>> 16) + $28 | 0;
    var $uadd7 = _llvm_uadd_with_overflow_i32($32, $29);
    var $33 = $uadd7.f0;
    var $34 = $uadd7.f1;
    var $__x3_0 = $34 ? $30 + 65536 | 0 : $30;
    var $36 = $33 >>> 16;
    var $39 = $33 << 16 | $27 & 65535;
    var $uadd8 = _llvm_uadd_with_overflow_i32($39, $24);
    var $40 = $uadd8.f0;
    var $41 = $uadd8.f1;
    var $46 = $r_022 + 1 + $__x3_0 + $36 + ($41 & 1) | 0;
    var $47 = (i64Math.multiply($46, 0, $4, 0), i64Math.result[0]);
    var $48 = $24 - $47 | 0;
    if ($48 >>> 0 > $40 >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $_qh_0 = $46;
      var $_r_0 = $48;
      __label__ = 7;
      break;
    }
   case 6:
    var $_qh_0 = $46 - 1 | 0;
    var $_r_0 = $48 + $4 | 0;
    __label__ = 7;
    break;
   case 7:
    var $_r_0;
    var $_qh_0;
    if ($_r_0 >>> 0 < $4 >>> 0) {
      var $_qh_1 = $_qh_0;
      var $_r_1 = $_r_0;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_qh_1 = $_qh_0 + 1 | 0;
    var $_r_1 = $_r_0 - $4 | 0;
    __label__ = 9;
    break;
   case 9:
    var $_r_1;
    var $_qh_1;
    HEAP32[$_023 >> 2] = $_qh_1;
    if (($i_021 | 0) > 0) {
      var $i_021 = $i_021 - 1 | 0;
      var $r_022 = $_r_1;
      var $_023 = $_023 - 4 | 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 10:
    if ($3 >>> 0 < $d_unnorm >>> 0) {
      __label__ = 11;
      break;
    } else {
      var $_1 = $7;
      var $_01 = $size;
      var $r_1 = 0;
      __label__ = 12;
      break;
    }
   case 11:
    var $65 = $3 << $shift;
    var $66 = $qp + ($5 - 2 << 2) | 0;
    HEAP32[$7 >> 2] = 0;
    if (($1 | 0) == 0) {
      var $_4_ph = $66;
      var $r_4_ph = $65;
      __label__ = 26;
      break;
    } else {
      var $_1 = $66;
      var $_01 = $1;
      var $r_1 = $65;
      __label__ = 12;
      break;
    }
   case 12:
    var $r_1;
    var $_01;
    var $_1;
    var $70 = HEAPU32[$ap + ($_01 - 1 << 2) >> 2];
    var $71 = 32 - $shift | 0;
    var $73 = $70 >>> ($71 >>> 0) | $r_1;
    var $74 = $_01 - 2 | 0;
    var $76 = $dinv & 65535;
    var $77 = $dinv >>> 16;
    if (($74 | 0) > -1) {
      __label__ = 13;
      break;
    } else {
      var $n1_0_lcssa = $70;
      var $r_2_lcssa = $73;
      var $_2_lcssa = $_1;
      var $_pre_phi = $76;
      var $_pre_phi4 = $77;
      __label__ = 20;
      break;
    }
   case 13:
    var $78 = 1 - $_01 | 0;
    var $smax = ($78 | 0) > -1 ? $78 : -1;
    var $81 = -($_01 + $smax | 0) | 0;
    var $n1_09 = $70;
    var $i_110 = $74;
    var $r_211 = $73;
    var $_212 = $_1;
    __label__ = 14;
    break;
   case 14:
    var $_212;
    var $r_211;
    var $i_110;
    var $n1_09;
    var $84 = HEAPU32[$ap + ($i_110 << 2) >> 2];
    var $85 = $r_211 & 65535;
    var $86 = $r_211 >>> 16;
    var $87 = (i64Math.multiply($85, 0, $76, 0), i64Math.result[0]);
    var $88 = (i64Math.multiply($85, 0, $77, 0), i64Math.result[0]);
    var $89 = (i64Math.multiply($86, 0, $76, 0), i64Math.result[0]);
    var $90 = (i64Math.multiply($86, 0, $77, 0), i64Math.result[0]);
    var $92 = ($87 >>> 16) + $88 | 0;
    var $uadd4 = _llvm_uadd_with_overflow_i32($92, $89);
    var $93 = $uadd4.f0;
    var $94 = $uadd4.f1;
    var $__x37_0 = $94 ? $90 + 65536 | 0 : $90;
    var $96 = $93 >>> 16;
    var $99 = $93 << 16 | $87 & 65535;
    var $102 = $84 >>> ($71 >>> 0) | $n1_09 << $shift;
    var $uadd5 = _llvm_uadd_with_overflow_i32($99, $102);
    var $103 = $uadd5.f0;
    var $104 = $uadd5.f1;
    var $109 = $r_211 + 1 + $__x37_0 + $96 + ($104 & 1) | 0;
    var $110 = (i64Math.multiply($109, 0, $4, 0), i64Math.result[0]);
    var $111 = $102 - $110 | 0;
    if ($111 >>> 0 > $103 >>> 0) {
      __label__ = 15;
      break;
    } else {
      var $_r3_0 = $111;
      var $_qh1_0 = $109;
      __label__ = 16;
      break;
    }
   case 15:
    var $_r3_0 = $111 + $4 | 0;
    var $_qh1_0 = $109 - 1 | 0;
    __label__ = 16;
    break;
   case 16:
    var $_qh1_0;
    var $_r3_0;
    if ($_r3_0 >>> 0 < $4 >>> 0) {
      var $_r3_1 = $_r3_0;
      var $_qh1_1 = $_qh1_0;
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $_r3_1 = $_r3_0 - $4 | 0;
    var $_qh1_1 = $_qh1_0 + 1 | 0;
    __label__ = 18;
    break;
   case 18:
    var $_qh1_1;
    var $_r3_1;
    HEAP32[$_212 >> 2] = $_qh1_1;
    if (($i_110 | 0) > 0) {
      var $n1_09 = $84;
      var $i_110 = $i_110 - 1 | 0;
      var $r_211 = $_r3_1;
      var $_212 = $_212 - 4 | 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $n1_0_lcssa = $84;
    var $r_2_lcssa = $_r3_1;
    var $_2_lcssa = $_1 + ($81 << 2) | 0;
    var $_pre_phi = $76;
    var $_pre_phi4 = $77;
    __label__ = 20;
    break;
   case 20:
    var $_pre_phi4;
    var $_pre_phi;
    var $_2_lcssa;
    var $r_2_lcssa;
    var $n1_0_lcssa;
    var $125 = $r_2_lcssa & 65535;
    var $126 = $r_2_lcssa >>> 16;
    var $127 = (i64Math.multiply($125, 0, $_pre_phi, 0), i64Math.result[0]);
    var $128 = (i64Math.multiply($125, 0, $_pre_phi4, 0), i64Math.result[0]);
    var $129 = (i64Math.multiply($126, 0, $_pre_phi, 0), i64Math.result[0]);
    var $130 = (i64Math.multiply($126, 0, $_pre_phi4, 0), i64Math.result[0]);
    var $132 = ($127 >>> 16) + $128 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($132, $129);
    var $133 = $uadd.f0;
    var $134 = $uadd.f1;
    var $__x321_0 = $134 ? $130 + 65536 | 0 : $130;
    var $136 = $133 >>> 16;
    var $139 = $133 << 16 | $127 & 65535;
    var $140 = $n1_0_lcssa << $shift;
    var $uadd2 = _llvm_uadd_with_overflow_i32($139, $140);
    var $141 = $uadd2.f0;
    var $142 = $uadd2.f1;
    var $147 = $r_2_lcssa + 1 + $__x321_0 + $136 + ($142 & 1) | 0;
    var $148 = (i64Math.multiply($147, 0, $4, 0), i64Math.result[0]);
    var $149 = $140 - $148 | 0;
    if ($149 >>> 0 > $141 >>> 0) {
      __label__ = 21;
      break;
    } else {
      var $_r17_0 = $149;
      var $_qh15_0 = $147;
      __label__ = 22;
      break;
    }
   case 21:
    var $_r17_0 = $149 + $4 | 0;
    var $_qh15_0 = $147 - 1 | 0;
    __label__ = 22;
    break;
   case 22:
    var $_qh15_0;
    var $_r17_0;
    if ($_r17_0 >>> 0 < $4 >>> 0) {
      var $_r17_1 = $_r17_0;
      var $_qh15_1 = $_qh15_0;
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $_r17_1 = $_r17_0 - $4 | 0;
    var $_qh15_1 = $_qh15_0 + 1 | 0;
    __label__ = 24;
    break;
   case 24:
    var $_qh15_1;
    var $_r17_1;
    HEAP32[$_2_lcssa >> 2] = $_qh15_1;
    var $_4_ph = $_2_lcssa - 4 | 0;
    var $r_4_ph = $_r17_1;
    __label__ = 26;
    break;
   case 25:
    var $_4_ph = $qp + ($21 << 2) | 0;
    var $r_4_ph = $_r_1;
    __label__ = 26;
    break;
   case 26:
    var $r_4_ph;
    var $_4_ph;
    if (($xsize | 0) > 0) {
      __label__ = 27;
      break;
    } else {
      var $r_4_lcssa = $r_4_ph;
      __label__ = 33;
      break;
    }
   case 27:
    var $162 = $dinv & 65535;
    var $163 = $dinv >>> 16;
    var $i_215 = 0;
    var $r_416 = $r_4_ph;
    var $_417 = $_4_ph;
    __label__ = 28;
    break;
   case 28:
    var $_417;
    var $r_416;
    var $i_215;
    var $165 = $r_416 & 65535;
    var $166 = $r_416 >>> 16;
    var $167 = (i64Math.multiply($165, 0, $162, 0), i64Math.result[0]);
    var $168 = (i64Math.multiply($165, 0, $163, 0), i64Math.result[0]);
    var $169 = (i64Math.multiply($166, 0, $162, 0), i64Math.result[0]);
    var $170 = (i64Math.multiply($166, 0, $163, 0), i64Math.result[0]);
    var $172 = ($167 >>> 16) + $168 | 0;
    var $uadd3 = _llvm_uadd_with_overflow_i32($172, $169);
    var $173 = $uadd3.f0;
    var $174 = $uadd3.f1;
    var $__x335_0 = $174 ? $170 + 65536 | 0 : $170;
    var $177 = $__x335_0 + ($173 >>> 16) | 0;
    var $180 = $173 << 16 | $167 & 65535;
    var $182 = $r_416 + 1 + $177 | 0;
    var $183 = (i64Math.multiply($182, 0, $4, 0), i64Math.result[0]);
    var $184 = -$183 | 0;
    if ($180 >>> 0 < $184 >>> 0) {
      __label__ = 29;
      break;
    } else {
      var $_r31_0 = $184;
      var $_qh29_0 = $182;
      __label__ = 30;
      break;
    }
   case 29:
    var $_r31_0 = $4 - $183 | 0;
    var $_qh29_0 = $177 + $r_416 | 0;
    __label__ = 30;
    break;
   case 30:
    var $_qh29_0;
    var $_r31_0;
    if ($_r31_0 >>> 0 < $4 >>> 0) {
      var $_r31_1 = $_r31_0;
      var $_qh29_1 = $_qh29_0;
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $_r31_1 = $_r31_0 - $4 | 0;
    var $_qh29_1 = $_qh29_0 + 1 | 0;
    __label__ = 32;
    break;
   case 32:
    var $_qh29_1;
    var $_r31_1;
    HEAP32[$_417 >> 2] = $_qh29_1;
    var $196 = $i_215 + 1 | 0;
    if (($196 | 0) == ($xsize | 0)) {
      var $r_4_lcssa = $_r31_1;
      __label__ = 33;
      break;
    } else {
      var $i_215 = $196;
      var $r_416 = $_r31_1;
      var $_417 = $_417 - 4 | 0;
      __label__ = 28;
      break;
    }
   case 33:
    var $r_4_lcssa;
    return $r_4_lcssa >>> ($shift >>> 0);
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_preinv_divrem_1["X"] = 1;

function ___gmpn_preinv_mod_1($up, $un, $d, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = HEAPU32[$up + ($un - 1 << 2) >> 2];
    var $5 = $3 >>> 0 < $d >>> 0 ? 0 : $d;
    var $_ = $3 - $5 | 0;
    var $6 = $un - 2 | 0;
    if (($6 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      var $r_1_lcssa = $_;
      __label__ = 5;
      break;
    }
   case 3:
    var $8 = $dinv & 65535;
    var $9 = $dinv >>> 16;
    var $r_12 = $_;
    var $i_03 = $6;
    __label__ = 4;
    break;
   case 4:
    var $i_03;
    var $r_12;
    var $12 = HEAPU32[$up + ($i_03 << 2) >> 2];
    var $13 = $r_12 & 65535;
    var $14 = $r_12 >>> 16;
    var $15 = (i64Math.multiply($13, 0, $8, 0), i64Math.result[0]);
    var $16 = (i64Math.multiply($13, 0, $9, 0), i64Math.result[0]);
    var $17 = (i64Math.multiply($14, 0, $8, 0), i64Math.result[0]);
    var $18 = (i64Math.multiply($14, 0, $9, 0), i64Math.result[0]);
    var $20 = ($15 >>> 16) + $16 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($20, $17);
    var $21 = $uadd.f0;
    var $22 = $uadd.f1;
    var $__x3_0 = $22 ? $18 + 65536 | 0 : $18;
    var $24 = $21 >>> 16;
    var $27 = $21 << 16 | $15 & 65535;
    var $uadd1 = _llvm_uadd_with_overflow_i32($27, $12);
    var $28 = $uadd1.f0;
    var $29 = $uadd1.f1;
    var $34 = $r_12 + 1 + $24 + $__x3_0 + ($29 & 1) | 0;
    var $35 = (i64Math.multiply($34, 0, $d, 0), i64Math.result[0]);
    var $36 = $12 - $35 | 0;
    var $38 = $36 >>> 0 > $28 >>> 0 ? $d : 0;
    var $_r_0 = $38 + $36 | 0;
    var $40 = $_r_0 >>> 0 < $d >>> 0 ? 0 : $d;
    var $_r_0_ = $_r_0 - $40 | 0;
    if (($i_03 | 0) > 0) {
      var $r_12 = $_r_0_;
      var $i_03 = $i_03 - 1 | 0;
      __label__ = 4;
      break;
    } else {
      var $r_1_lcssa = $_r_0_;
      __label__ = 5;
      break;
    }
   case 5:
    var $r_1_lcssa;
    return $r_1_lcssa;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_preinv_mod_1["X"] = 1;

function ___gmpn_redc_1($rp, $up, $mp, $n, $invm) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 0) {
      var $j_0_in1 = $n;
      var $_02 = $up;
      __label__ = 3;
      break;
    } else {
      var $_0_lcssa = $up;
      __label__ = 5;
      break;
    }
   case 3:
    var $_02;
    var $j_0_in1;
    var $j_0 = $j_0_in1 - 1 | 0;
    var $2 = HEAP32[$_02 >> 2];
    var $3 = (i64Math.multiply($2, 0, $invm, 0), i64Math.result[0]);
    var $4 = ___gmpn_addmul_1($_02, $mp, $n, $3);
    HEAP32[$_02 >> 2] = $4;
    if (($j_0 | 0) > 0) {
      var $j_0_in1 = $j_0;
      var $_02 = $_02 + 4 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_0_lcssa = $up + ($n << 2) | 0;
    __label__ = 5;
    break;
   case 5:
    var $_0_lcssa;
    var $9 = $_0_lcssa + (-$n << 2) | 0;
    var $10 = ___gmpn_add_n($rp, $_0_lcssa, $9, $n);
    if (($10 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $13 = ___gmpn_sub_n($rp, $rp, $mp, $n);
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_redc_1_sec($rp, $up, $mp, $n, $invm) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 0) {
      var $j_0_in1 = $n;
      var $_02 = $up;
      __label__ = 3;
      break;
    } else {
      var $_0_lcssa = $up;
      __label__ = 5;
      break;
    }
   case 3:
    var $_02;
    var $j_0_in1;
    var $j_0 = $j_0_in1 - 1 | 0;
    var $2 = HEAP32[$_02 >> 2];
    var $3 = (i64Math.multiply($2, 0, $invm, 0), i64Math.result[0]);
    var $4 = ___gmpn_addmul_1($_02, $mp, $n, $3);
    HEAP32[$_02 >> 2] = $4;
    if (($j_0 | 0) > 0) {
      var $j_0_in1 = $j_0;
      var $_02 = $_02 + 4 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_0_lcssa = $up + ($n << 2) | 0;
    __label__ = 5;
    break;
   case 5:
    var $_0_lcssa;
    var $9 = $_0_lcssa + (-$n << 2) | 0;
    var $10 = ___gmpn_add_n($rp, $_0_lcssa, $9, $n);
    var $11 = ___gmpn_subcnd_n($rp, $rp, $mp, $n, $10);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_addmul_2($rp, $up, $n, $vp) {
  var $1 = HEAP32[$vp >> 2];
  var $2 = ___gmpn_addmul_1($rp, $up, $n, $1);
  HEAP32[$rp + ($n << 2) >> 2] = $2;
  var $4 = $rp + 4 | 0;
  var $6 = HEAP32[$vp + 4 >> 2];
  var $7 = ___gmpn_addmul_1($4, $up, $n, $6);
  return $7;
}

function ___gmpn_redc_2($rp, $up, $mp, $n, $mip) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $q = __stackBase__;
    if (($n & 1 | 0) == 0) {
      var $_1_ph = $up;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = HEAP32[$up >> 2];
    var $5 = HEAP32[$mip >> 2];
    var $6 = (i64Math.multiply($5, 0, $4, 0), i64Math.result[0]);
    var $7 = ___gmpn_addmul_1($up, $mp, $n, $6);
    HEAP32[$up >> 2] = $7;
    var $_1_ph = $up + 4 | 0;
    __label__ = 4;
    break;
   case 4:
    var $_1_ph;
    var $j_01 = $n - 2 | 0;
    if (($j_01 | 0) > -1) {
      __label__ = 5;
      break;
    } else {
      var $_1_lcssa = $_1_ph;
      __label__ = 8;
      break;
    }
   case 5:
    var $10 = $mip + 4 | 0;
    var $11 = $q + 4 | 0;
    var $12 = $q | 0;
    var $13 = $n & -2;
    var $_12 = $_1_ph;
    var $j_03 = $j_01;
    __label__ = 6;
    break;
   case 6:
    var $j_03;
    var $_12;
    var $15 = HEAPU32[$mip >> 2];
    var $16 = HEAPU32[$_12 >> 2];
    var $17 = $15 & 65535;
    var $18 = $15 >>> 16;
    var $19 = $16 & 65535;
    var $20 = $16 >>> 16;
    var $21 = (i64Math.multiply($19, 0, $17, 0), i64Math.result[0]);
    var $22 = (i64Math.multiply($20, 0, $17, 0), i64Math.result[0]);
    var $23 = (i64Math.multiply($19, 0, $18, 0), i64Math.result[0]);
    var $24 = (i64Math.multiply($20, 0, $18, 0), i64Math.result[0]);
    var $26 = ($21 >>> 16) + $22 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($26, $23);
    var $27 = $uadd.f0;
    var $28 = $uadd.f1;
    var $__x3_0 = $28 ? $24 + 65536 | 0 : $24;
    var $30 = $27 >>> 16;
    var $33 = $27 << 16 | $21 & 65535;
    var $34 = $_12 + 4 | 0;
    var $35 = HEAP32[$34 >> 2];
    var $36 = (i64Math.multiply($35, 0, $15, 0), i64Math.result[0]);
    var $37 = HEAP32[$10 >> 2];
    var $38 = (i64Math.multiply($37, 0, $16, 0), i64Math.result[0]);
    var $41 = $30 + $36 + $38 + $__x3_0 | 0;
    HEAP32[$11 >> 2] = $41;
    HEAP32[$12 >> 2] = $33;
    var $42 = $_12 + ($n << 2) | 0;
    var $43 = HEAP32[$42 >> 2];
    var $44 = ___gmpn_addmul_2($_12, $mp, $n, $12);
    HEAP32[$34 >> 2] = $44;
    var $45 = HEAP32[$42 >> 2];
    HEAP32[$_12 >> 2] = $45;
    HEAP32[$42 >> 2] = $43;
    var $j_0 = $j_03 - 2 | 0;
    if (($j_0 | 0) > -1) {
      var $_12 = $_12 + 8 | 0;
      var $j_03 = $j_0;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $_1_lcssa = $_1_ph + ($13 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $_1_lcssa;
    var $50 = $_1_lcssa + (-$n << 2) | 0;
    var $51 = ___gmpn_add_n($rp, $_1_lcssa, $50, $n);
    if (($51 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $54 = ___gmpn_sub_n($rp, $rp, $mp, $n);
    __label__ = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_redc_2["X"] = 1;

function _mpn_mulmod_bnm1_itch332($rn, $an, $bn) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn >> 1;
    if (($1 | 0) < ($an | 0)) {
      __label__ = 3;
      break;
    } else {
      var $7 = 0;
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ($1 | 0) < ($bn | 0) ? $rn : $1;
    var $7 = $5;
    __label__ = 4;
    break;
   case 4:
    var $7;
    return $rn + 4 + $7 | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_rshift($rp, $up, $n, $cnt) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = 32 - $cnt | 0;
    var $2 = HEAPU32[$up >> 2];
    var $3 = $2 << $1;
    var $i_03 = $n - 1 | 0;
    var $low_limb_04 = $2 >>> ($cnt >>> 0);
    if (($i_03 | 0) == 0) {
      var $_0_lcssa = $rp;
      var $low_limb_0_lcssa = $low_limb_04;
      __label__ = 5;
      break;
    } else {
      var $_05 = $rp;
      var $up_pn = $up;
      var $i_07 = $i_03;
      var $low_limb_08 = $low_limb_04;
      __label__ = 3;
      break;
    }
   case 3:
    var $low_limb_08;
    var $i_07;
    var $up_pn;
    var $_05;
    var $_016 = $up_pn + 4 | 0;
    var $5 = HEAPU32[$_016 >> 2];
    HEAP32[$_05 >> 2] = $5 << $1 | $low_limb_08;
    var $i_0 = $i_07 - 1 | 0;
    var $low_limb_0 = $5 >>> ($cnt >>> 0);
    if (($i_0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_05 = $_05 + 4 | 0;
      var $up_pn = $_016;
      var $i_07 = $i_0;
      var $low_limb_08 = $low_limb_0;
      __label__ = 3;
      break;
    }
   case 4:
    var $_0_lcssa = $rp + ($i_03 << 2) | 0;
    var $low_limb_0_lcssa = $low_limb_0;
    __label__ = 5;
    break;
   case 5:
    var $low_limb_0_lcssa;
    var $_0_lcssa;
    HEAP32[$_0_lcssa >> 2] = $low_limb_0_lcssa;
    return $3;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_sbpi1_bdiv_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    if (($1 | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      var $_01_lcssa = $np;
      var $_0_lcssa = $qp;
      __label__ = 5;
      break;
    }
   case 3:
    var $scevgep14 = $np + ($1 << 2) | 0;
    var $i_06 = $1;
    var $_017 = $np;
    var $_08 = $qp;
    __label__ = 7;
    break;
   case 4:
    var $_01_lcssa = $scevgep14;
    var $_0_lcssa = $qp + ($1 << 2) | 0;
    __label__ = 5;
    break;
   case 5:
    var $_0_lcssa;
    var $_01_lcssa;
    var $3 = ($dn | 0) > 1;
    var $4 = HEAP32[$_01_lcssa >> 2];
    var $5 = (i64Math.multiply($4, 0, $dinv, 0), i64Math.result[0]);
    var $6 = $5 ^ -1;
    HEAP32[$_0_lcssa >> 2] = $6;
    if ($3) {
      __label__ = 6;
      break;
    } else {
      var $_1_lcssa = $_0_lcssa;
      __label__ = 10;
      break;
    }
   case 6:
    var $7 = $dn - 1 | 0;
    var $i_13 = $dn;
    var $_124 = $_01_lcssa;
    var $_15 = $_0_lcssa;
    var $20 = $5;
    __label__ = 8;
    break;
   case 7:
    var $_08;
    var $_017;
    var $i_06;
    var $9 = HEAP32[$_017 >> 2];
    var $10 = (i64Math.multiply($9, 0, $dinv, 0), i64Math.result[0]);
    var $11 = $10 ^ -1;
    HEAP32[$_08 >> 2] = $11;
    var $12 = $_08 + 4 | 0;
    var $13 = ___gmpn_addmul_1($_017, $dp, $dn, $10);
    var $14 = $_017 + ($dn << 2) | 0;
    var $15 = ___gmpn_add_1($14, $14, $i_06, $13);
    var $17 = $i_06 - 1 | 0;
    if (($17 | 0) > 0) {
      var $i_06 = $17;
      var $_017 = $_017 + 4 | 0;
      var $_08 = $12;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 8:
    var $20;
    var $_15;
    var $_124;
    var $i_13;
    var $21 = $_15 + 4 | 0;
    var $22 = ___gmpn_addmul_1($_124, $dp, $i_13, $20);
    var $23 = $_124 + 4 | 0;
    var $24 = $i_13 - 1 | 0;
    var $25 = ($24 | 0) > 1;
    var $26 = HEAP32[$23 >> 2];
    var $27 = (i64Math.multiply($26, 0, $dinv, 0), i64Math.result[0]);
    var $28 = $27 ^ -1;
    HEAP32[$21 >> 2] = $28;
    if ($25) {
      var $i_13 = $24;
      var $_124 = $23;
      var $_15 = $21;
      var $20 = $27;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $_1_lcssa = $_0_lcssa + ($7 << 2) | 0;
    __label__ = 10;
    break;
   case 10:
    var $_1_lcssa;
    var $30 = $_1_lcssa + (1 - $nn << 2) | 0;
    var $31 = ___gmpn_add_1($30, $30, $nn, 1);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sbpi1_bdiv_q["X"] = 1;

function ___gmpn_sbpi1_bdiv_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $qn_011 = $nn - $dn | 0;
    if (($qn_011 | 0) > ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      var $rh_0_lcssa = 0;
      var $ql_0_lcssa = 1;
      var $_02_lcssa = $np;
      var $_01_lcssa = $qp;
      var $qn_0_lcssa = $qn_011;
      __label__ = 5;
      break;
    }
   case 3:
    var $2 = ($dn | 0) > 0;
    var $rh_012 = 0;
    var $ql_013 = 1;
    var $_0214 = $np;
    var $_0115 = $qp;
    var $qn_016 = $qn_011;
    __label__ = 4;
    break;
   case 4:
    var $qn_016;
    var $_0115;
    var $_0214;
    var $ql_013;
    var $rh_012;
    if ($2) {
      var $i_07 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    var $qn_0_lcssa;
    var $_01_lcssa;
    var $_02_lcssa;
    var $ql_0_lcssa;
    var $rh_0_lcssa;
    if (($qn_0_lcssa | 0) > 0) {
      var $i_15 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 6:
    var $i_07;
    var $4 = $_0214 + ($i_07 << 2) | 0;
    var $5 = HEAP32[$4 >> 2];
    var $6 = (i64Math.multiply($5, 0, $dinv, 0), i64Math.result[0]);
    var $7 = $6 ^ -1;
    HEAP32[$_0115 + ($i_07 << 2) >> 2] = $7;
    var $9 = ___gmpn_addmul_1($4, $dp, $dn, $6);
    HEAP32[$4 >> 2] = $9;
    var $10 = $i_07 + 1 | 0;
    if (($10 | 0) == ($dn | 0)) {
      __label__ = 7;
      break;
    } else {
      var $i_07 = $10;
      __label__ = 6;
      break;
    }
   case 7:
    var $11 = $_0214 + ($dn << 2) | 0;
    var $12 = ___gmpn_add($11, $11, $qn_016, $_0214, $dn);
    var $13 = $12 + $rh_012 | 0;
    var $14 = ___gmpn_add_1($_0115, $_0115, $dn, $ql_013);
    var $15 = $_0115 + ($dn << 2) | 0;
    var $qn_0 = $qn_016 - $dn | 0;
    if (($qn_0 | 0) > ($dn | 0)) {
      var $rh_012 = $13;
      var $ql_013 = $14;
      var $_0214 = $11;
      var $_0115 = $15;
      var $qn_016 = $qn_0;
      __label__ = 4;
      break;
    } else {
      var $rh_0_lcssa = $13;
      var $ql_0_lcssa = $14;
      var $_02_lcssa = $11;
      var $_01_lcssa = $15;
      var $qn_0_lcssa = $qn_0;
      __label__ = 5;
      break;
    }
   case 8:
    var $i_15;
    var $17 = $_02_lcssa + ($i_15 << 2) | 0;
    var $18 = HEAP32[$17 >> 2];
    var $19 = (i64Math.multiply($18, 0, $dinv, 0), i64Math.result[0]);
    var $20 = $19 ^ -1;
    HEAP32[$_01_lcssa + ($i_15 << 2) >> 2] = $20;
    var $22 = ___gmpn_addmul_1($17, $dp, $dn, $19);
    HEAP32[$17 >> 2] = $22;
    var $23 = $i_15 + 1 | 0;
    if (($23 | 0) == ($qn_0_lcssa | 0)) {
      __label__ = 9;
      break;
    } else {
      var $i_15 = $23;
      __label__ = 8;
      break;
    }
   case 9:
    var $24 = $_02_lcssa + ($dn << 2) | 0;
    var $25 = ___gmpn_add_n($24, $24, $_02_lcssa, $qn_0_lcssa);
    var $26 = ___gmpn_add_1($_01_lcssa, $_01_lcssa, $qn_0_lcssa, $ql_0_lcssa);
    if (($26 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $_0 = 0;
      __label__ = 11;
      break;
    }
   case 10:
    var $29 = $_02_lcssa + ($qn_0_lcssa << 2) | 0;
    var $30 = ___gmpn_sub_n($29, $29, $dp, $dn);
    var $_0 = $30 - ($25 + $rh_0_lcssa) | 0;
    __label__ = 11;
    break;
   case 11:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sbpi1_bdiv_qr["X"] = 1;

function ___gmpn_redc_n($rp, $up, $mp, $n, $ip) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $1 = ___gmpn_mulmod_bnm1_next_size($n);
    var $2 = _mpn_mulmod_bnm1_itch332($1, $n, $n);
    var $3 = $1 + $n | 0;
    var $5 = $3 + $2 << 2;
    if ($5 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $8 = STACKTOP;
    STACKTOP += $5;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $12 = $8;
    __label__ = 5;
    break;
   case 4:
    var $10 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $5);
    var $12 = $10;
    __label__ = 5;
    break;
   case 5:
    var $12;
    var $13 = $12;
    ___gmpn_mullo_n($13, $up, $ip, $n);
    var $14 = $13 + ($n << 2) | 0;
    var $15 = $13 + ($3 << 2) | 0;
    ___gmpn_mulmod_bnm1($14, $1, $13, $n, $mp, $n, $15);
    var $16 = $n << 1;
    if (($16 | 0) > ($1 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    ___gmp_assert_fail(STRING_TABLE.__str328 | 0, 56, STRING_TABLE.__str1329 | 0);
    throw "Reached an unreachable!";
   case 7:
    var $20 = $16 - $1 | 0;
    var $21 = ___gmpn_sub_n($15, $14, $up, $20);
    var $22 = $13 + ($16 + $n - $1 << 2) | 0;
    var $23 = HEAPU32[$22 >> 2];
    HEAP32[$22 >> 2] = $23 - $21 | 0;
    if ($23 >>> 0 < $21 >>> 0) {
      var $__p_0 = $22;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $__p_0;
    var $26 = $__p_0 + 4 | 0;
    var $27 = HEAP32[$26 >> 2];
    var $28 = $27 - 1 | 0;
    HEAP32[$26 >> 2] = $28;
    if (($27 | 0) == 0) {
      var $__p_0 = $26;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $30 = $up + ($n << 2) | 0;
    var $31 = $13 + ($16 << 2) | 0;
    var $32 = ___gmpn_sub_n($rp, $30, $31, $n);
    if (($32 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $35 = ___gmpn_add_n($rp, $rp, $mp, $n);
    __label__ = 11;
    break;
   case 11:
    var $37 = HEAP32[$__tmp_marker >> 2];
    if (($37 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    ___gmp_tmp_reentrant_free($37);
    __label__ = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_redc_n["X"] = 1;

function ___gmpn_sbpi1_div_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    var $2 = $1 + 1 | 0;
    var $3 = ($2 | 0) < ($dn | 0);
    if ($3) {
      __label__ = 3;
      break;
    } else {
      var $_05 = $dp;
      var $_08 = $dn;
      __label__ = 4;
      break;
    }
   case 3:
    var $_05 = $dp + ($dn - $2 << 2) | 0;
    var $_08 = $2;
    __label__ = 4;
    break;
   case 4:
    var $_08;
    var $_05;
    var $8 = $np + ($nn - $_08 << 2) | 0;
    var $9 = ___gmpn_cmp($8, $_05, $_08);
    var $10 = ($9 | 0) > -1;
    var $_lobit_not = $9 >>> 31 ^ 1;
    if ($10) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $12 = ___gmpn_sub_n($8, $8, $_05, $_08);
    __label__ = 6;
    break;
   case 6:
    var $14 = $qp + ($1 << 2) | 0;
    var $15 = $_08 - 2 | 0;
    var $16 = $_08 - 1 | 0;
    var $18 = HEAPU32[$_05 + ($16 << 2) >> 2];
    var $19 = $_05 + ($15 << 2) | 0;
    var $20 = HEAPU32[$19 >> 2];
    var $21 = $np + ($nn - 2 << 2) | 0;
    var $23 = HEAPU32[$np + ($nn - 1 << 2) >> 2];
    var $24 = $1 - $_08 | 0;
    if (($24 | 0) > -1) {
      __label__ = 7;
      break;
    } else {
      var $n1_0_lcssa = $23;
      var $_02_lcssa = $21;
      var $_01_lcssa = $14;
      __label__ = 17;
      break;
    }
   case 7:
    var $_sum30 = 1 - $_08 | 0;
    var $26 = $dinv & 65535;
    var $27 = $dinv >>> 16;
    var $28 = $20 & 65535;
    var $29 = $20 >>> 16;
    var $30 = $_08 + $dn | 0;
    var $32 = $30 - 1 - $nn | 0;
    var $smax = ($32 | 0) > -1 ? $32 : -1;
    var $34 = $15 - $smax | 0;
    var $36 = $30 - 4 - $smax | 0;
    var $n1_068 = $23;
    var $i_069 = $24;
    var $_0270 = $21;
    var $_0171 = $14;
    __label__ = 8;
    break;
   case 8:
    var $_0171;
    var $_0270;
    var $i_069;
    var $n1_068;
    var $38 = $_0270 - 4 | 0;
    var $40 = HEAPU32[$_0270 >> 2];
    if (($n1_068 | 0) == ($18 | 0) & ($40 | 0) == ($20 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $44 = ___gmpn_submul_1($_0270 + ($_sum30 << 2) | 0, $_05, $_08, -1);
    var $n1_2 = HEAP32[$_0270 >> 2];
    var $q_1 = -1;
    __label__ = 15;
    break;
   case 10:
    var $46 = $n1_068 & 65535;
    var $47 = $n1_068 >>> 16;
    var $48 = (i64Math.multiply($46, 0, $26, 0), i64Math.result[0]);
    var $49 = (i64Math.multiply($46, 0, $27, 0), i64Math.result[0]);
    var $50 = (i64Math.multiply($47, 0, $26, 0), i64Math.result[0]);
    var $51 = (i64Math.multiply($47, 0, $27, 0), i64Math.result[0]);
    var $53 = ($48 >>> 16) + $49 | 0;
    var $uadd25 = _llvm_uadd_with_overflow_i32($53, $50);
    var $54 = $uadd25.f0;
    var $55 = $uadd25.f1;
    var $__x3_0 = $55 ? $51 + 65536 | 0 : $51;
    var $57 = $54 >>> 16;
    var $60 = $54 << 16 | $48 & 65535;
    var $uadd26 = _llvm_uadd_with_overflow_i32($60, $40);
    var $61 = $uadd26.f0;
    var $62 = $uadd26.f1;
    var $66 = $__x3_0 + $n1_068 + $57 + ($62 & 1) | 0;
    var $67 = (i64Math.multiply($66, 0, $18, 0), i64Math.result[0]);
    var $68 = HEAPU32[$38 >> 2];
    var $69 = $68 - $20 | 0;
    var $_neg34 = ($68 >>> 0 < $20 >>> 0) << 31 >> 31;
    var $71 = $66 & 65535;
    var $72 = $66 >>> 16;
    var $73 = (i64Math.multiply($71, 0, $28, 0), i64Math.result[0]);
    var $74 = (i64Math.multiply($72, 0, $28, 0), i64Math.result[0]);
    var $75 = (i64Math.multiply($71, 0, $29, 0), i64Math.result[0]);
    var $76 = (i64Math.multiply($72, 0, $29, 0), i64Math.result[0]);
    var $78 = ($73 >>> 16) + $74 | 0;
    var $uadd27 = _llvm_uadd_with_overflow_i32($78, $75);
    var $79 = $uadd27.f0;
    var $80 = $uadd27.f1;
    var $__x38_0 = $80 ? $76 + 65536 | 0 : $76;
    var $85 = $73 & 65535 | $79 << 16;
    var $86 = $69 - $85 | 0;
    var $92 = $40 - $18 + $_neg34 - ($79 >>> 16) - $67 - $__x38_0 + (($69 >>> 0 < $85 >>> 0) << 31 >> 31) | 0;
    var $94 = ($92 >>> 0 >= $61 >>> 0) << 31 >> 31;
    var $96 = $66 + 1 + $94 | 0;
    var $97 = $94 & $20;
    var $uadd28 = _llvm_uadd_with_overflow_i32($86, $97);
    var $98 = $uadd28.f0;
    var $100 = $uadd28.f1;
    var $103 = $92 + ($100 & 1) + ($94 & $18) | 0;
    if ($103 >>> 0 < $18 >>> 0) {
      var $n1_1 = $103;
      var $n0_0 = $98;
      var $q_0 = $96;
      __label__ = 13;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $107 = $98 >>> 0 < $20 >>> 0;
    if ($103 >>> 0 <= $18 >>> 0 & $107) {
      var $n1_1 = $103;
      var $n0_0 = $98;
      var $q_0 = $96;
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $n1_1 = ($107 << 31 >> 31) - $18 + $103 | 0;
    var $n0_0 = $98 - $20 | 0;
    var $q_0 = $96 + 1 | 0;
    __label__ = 13;
    break;
   case 13:
    var $q_0;
    var $n0_0;
    var $n1_1;
    var $114 = $_0270 + ($_sum30 << 2) | 0;
    var $115 = ___gmpn_submul_1($114, $_05, $15, $q_0);
    var $117 = $n0_0 >>> 0 < $115 >>> 0 & 1;
    var $119 = $n1_1 >>> 0 < $117 >>> 0;
    var $120 = $n1_1 - $117 | 0;
    HEAP32[$38 >> 2] = $n0_0 - $115 | 0;
    if ($119) {
      __label__ = 14;
      break;
    } else {
      var $n1_2 = $120;
      var $q_1 = $q_0;
      __label__ = 15;
      break;
    }
   case 14:
    var $122 = ___gmpn_add_n($114, $114, $_05, $16);
    var $n1_2 = $120 + $18 + $122 | 0;
    var $q_1 = $q_0 - 1 | 0;
    __label__ = 15;
    break;
   case 15:
    var $q_1;
    var $n1_2;
    var $127 = $_0171 - 4 | 0;
    HEAP32[$127 >> 2] = $q_1;
    if (($i_069 | 0) > 0) {
      var $n1_068 = $n1_2;
      var $i_069 = $i_069 - 1 | 0;
      var $_0270 = $38;
      var $_0171 = $127;
      __label__ = 8;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $n1_0_lcssa = $n1_2;
    var $_02_lcssa = $np + ($36 << 2) | 0;
    var $_01_lcssa = $qp + ($34 << 2) | 0;
    __label__ = 17;
    break;
   case 17:
    var $_01_lcssa;
    var $_02_lcssa;
    var $n1_0_lcssa;
    if (($15 | 0) > -1) {
      __label__ = 18;
      break;
    } else {
      var $_2 = $_01_lcssa;
      var $_24 = $_02_lcssa;
      var $n1_8 = $n1_0_lcssa;
      var $flag_5 = -1;
      __label__ = 43;
      break;
    }
   case 18:
    var $133 = $_02_lcssa - 4 | 0;
    var $134 = $n1_0_lcssa >>> 0 >= $18 >>> 0;
    if (($15 | 0) > 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 19:
    var $135 = $dinv & 65535;
    var $136 = $dinv >>> 16;
    var $137 = $20 & 65535;
    var $138 = $20 >>> 16;
    var $139 = 1 - $_08 | 0;
    var $140 = 2 - $_08 | 0;
    var $scevgep86 = $_01_lcssa + ($140 << 2) | 0;
    var $flag_054 = -1;
    var $n1_355 = $n1_0_lcssa;
    var $_1957 = $15;
    var $_1658 = $_05;
    var $_1360 = $_02_lcssa;
    var $_161 = $_01_lcssa;
    var $143 = $133;
    var $142 = $134;
    __label__ = 20;
    break;
   case 20:
    var $142;
    var $143;
    var $_161;
    var $_1360;
    var $_1658;
    var $_1957;
    var $n1_355;
    var $flag_054;
    if ($142) {
      __label__ = 21;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 21:
    var $145 = $_1360 + (($_1957 ^ -1) << 2) | 0;
    var $146 = $_1957 + 2 | 0;
    var $147 = ___gmpn_submul_1($145, $_1658, $146, -1);
    if (($n1_355 | 0) == ($147 | 0)) {
      var $q_2 = -1;
      var $flag_1 = $flag_054;
      __label__ = 24;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if ($n1_355 >>> 0 < ($147 & $flag_054) >>> 0) {
      __label__ = 23;
      break;
    } else {
      var $q_2 = -1;
      var $flag_1 = 0;
      __label__ = 24;
      break;
    }
   case 23:
    var $153 = ___gmpn_add_n($145, $145, $_1658, $146);
    var $q_2 = -2;
    var $flag_1 = $flag_054;
    __label__ = 24;
    break;
   case 24:
    var $flag_1;
    var $q_2;
    var $n1_5 = HEAP32[$_1360 >> 2];
    var $q_4 = $q_2;
    var $flag_2 = $flag_1;
    __label__ = 30;
    break;
   case 25:
    var $157 = $n1_355 & 65535;
    var $158 = $n1_355 >>> 16;
    var $159 = (i64Math.multiply($157, 0, $135, 0), i64Math.result[0]);
    var $160 = (i64Math.multiply($157, 0, $136, 0), i64Math.result[0]);
    var $161 = (i64Math.multiply($158, 0, $135, 0), i64Math.result[0]);
    var $162 = (i64Math.multiply($158, 0, $136, 0), i64Math.result[0]);
    var $164 = ($159 >>> 16) + $160 | 0;
    var $uadd19 = _llvm_uadd_with_overflow_i32($164, $161);
    var $165 = $uadd19.f0;
    var $166 = $uadd19.f1;
    var $__x326_0 = $166 ? $162 + 65536 | 0 : $162;
    var $168 = $165 >>> 16;
    var $171 = $165 << 16 | $159 & 65535;
    var $172 = HEAPU32[$_1360 >> 2];
    var $uadd20 = _llvm_uadd_with_overflow_i32($171, $172);
    var $173 = $uadd20.f0;
    var $174 = $uadd20.f1;
    var $178 = $__x326_0 + $n1_355 + $168 + ($174 & 1) | 0;
    var $179 = (i64Math.multiply($178, 0, $18, 0), i64Math.result[0]);
    var $180 = HEAPU32[$143 >> 2];
    var $181 = $180 - $20 | 0;
    var $_neg40 = ($180 >>> 0 < $20 >>> 0) << 31 >> 31;
    var $183 = $178 & 65535;
    var $184 = $178 >>> 16;
    var $185 = (i64Math.multiply($183, 0, $137, 0), i64Math.result[0]);
    var $186 = (i64Math.multiply($184, 0, $137, 0), i64Math.result[0]);
    var $187 = (i64Math.multiply($183, 0, $138, 0), i64Math.result[0]);
    var $188 = (i64Math.multiply($184, 0, $138, 0), i64Math.result[0]);
    var $190 = ($185 >>> 16) + $186 | 0;
    var $uadd21 = _llvm_uadd_with_overflow_i32($190, $187);
    var $191 = $uadd21.f0;
    var $192 = $uadd21.f1;
    var $__x338_0 = $192 ? $188 + 65536 | 0 : $188;
    var $197 = $185 & 65535 | $191 << 16;
    var $198 = $181 - $197 | 0;
    var $204 = $172 - $18 + $_neg40 - ($191 >>> 16) - $179 - $__x338_0 + (($181 >>> 0 < $197 >>> 0) << 31 >> 31) | 0;
    var $206 = ($204 >>> 0 >= $173 >>> 0) << 31 >> 31;
    var $208 = $178 + 1 + $206 | 0;
    var $209 = $206 & $20;
    var $uadd22 = _llvm_uadd_with_overflow_i32($198, $209);
    var $210 = $uadd22.f0;
    var $212 = $uadd22.f1;
    var $215 = $204 + ($212 & 1) + ($206 & $18) | 0;
    if ($215 >>> 0 < $18 >>> 0) {
      var $n1_4 = $215;
      var $n0_1 = $210;
      var $q_3 = $208;
      __label__ = 28;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $219 = $210 >>> 0 < $20 >>> 0;
    if ($215 >>> 0 <= $18 >>> 0 & $219) {
      var $n1_4 = $215;
      var $n0_1 = $210;
      var $q_3 = $208;
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $n1_4 = ($219 << 31 >> 31) - $18 + $215 | 0;
    var $n0_1 = $210 - $20 | 0;
    var $q_3 = $208 + 1 | 0;
    __label__ = 28;
    break;
   case 28:
    var $q_3;
    var $n0_1;
    var $n1_4;
    var $226 = $_1360 + (($_1957 ^ -1) << 2) | 0;
    var $227 = ___gmpn_submul_1($226, $_1658, $_1957, $q_3);
    var $229 = $n0_1 >>> 0 < $227 >>> 0 & 1;
    var $231 = $n1_4 >>> 0 < $229 >>> 0;
    var $232 = $n1_4 - $229 | 0;
    HEAP32[$143 >> 2] = $n0_1 - $227 | 0;
    if ($231) {
      __label__ = 29;
      break;
    } else {
      var $n1_5 = $232;
      var $q_4 = $q_3;
      var $flag_2 = $flag_054;
      __label__ = 30;
      break;
    }
   case 29:
    var $235 = ___gmpn_add_n($226, $226, $_1658, $_1957 + 1 | 0);
    var $n1_5 = $232 + $18 + $235 | 0;
    var $q_4 = $q_3 - 1 | 0;
    var $flag_2 = $flag_054;
    __label__ = 30;
    break;
   case 30:
    var $flag_2;
    var $q_4;
    var $n1_5;
    var $240 = $_161 - 4 | 0;
    HEAP32[$240 >> 2] = $q_4;
    var $241 = $_1957 - 1 | 0;
    var $246 = $n1_5 >>> 0 >= ($flag_2 & $18) >>> 0;
    if (($241 | 0) > 0) {
      var $flag_054 = $flag_2;
      var $n1_355 = $n1_5;
      var $_1957 = $241;
      var $_1658 = $_1658 + 4 | 0;
      var $_1360 = $143;
      var $_161 = $240;
      var $143 = $143 - 4 | 0;
      var $142 = $246;
      __label__ = 20;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $scevgep = $_02_lcssa + ($139 << 2) | 0;
    var $scevgep87 = $_02_lcssa + ($140 << 2) | 0;
    if ($246) {
      var $_lcssa93 = $scevgep;
      var $_1_lcssa97 = $scevgep86;
      var $_13_lcssa98 = $scevgep87;
      var $_16_lcssa100 = $19;
      var $n1_3_lcssa102 = $n1_5;
      var $flag_0_lcssa103 = $flag_2;
      __label__ = 34;
      break;
    } else {
      var $_lcssa92 = $scevgep;
      var $_1_lcssa96 = $scevgep86;
      var $_13_lcssa99 = $scevgep87;
      var $n1_3_lcssa101 = $n1_5;
      var $flag_0_lcssa104 = $flag_2;
      var $_pre_phi = $135;
      var $_pre_phi5 = $136;
      var $_pre_phi7 = $137;
      var $_pre_phi9 = $138;
      __label__ = 38;
      break;
    }
   case 32:
    if ($134) {
      var $_lcssa93 = $133;
      var $_1_lcssa97 = $_01_lcssa;
      var $_13_lcssa98 = $_02_lcssa;
      var $_16_lcssa100 = $_05;
      var $n1_3_lcssa102 = $n1_0_lcssa;
      var $flag_0_lcssa103 = -1;
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $_lcssa92 = $133;
    var $_1_lcssa96 = $_01_lcssa;
    var $_13_lcssa99 = $_02_lcssa;
    var $n1_3_lcssa101 = $n1_0_lcssa;
    var $flag_0_lcssa104 = -1;
    var $_pre_phi = $dinv & 65535;
    var $_pre_phi5 = $dinv >>> 16;
    var $_pre_phi7 = $20 & 65535;
    var $_pre_phi9 = $20 >>> 16;
    __label__ = 38;
    break;
   case 34:
    var $flag_0_lcssa103;
    var $n1_3_lcssa102;
    var $_16_lcssa100;
    var $_13_lcssa98;
    var $_1_lcssa97;
    var $_lcssa93;
    var $249 = ___gmpn_submul_1($_lcssa93, $_16_lcssa100, 2, -1);
    if (($n1_3_lcssa102 | 0) == ($249 | 0)) {
      var $q_5 = -1;
      var $flag_3 = $flag_0_lcssa103;
      __label__ = 37;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    if ($n1_3_lcssa102 >>> 0 < ($249 & $flag_0_lcssa103) >>> 0) {
      __label__ = 36;
      break;
    } else {
      var $q_5 = -1;
      var $flag_3 = 0;
      __label__ = 37;
      break;
    }
   case 36:
    var $255 = HEAP32[$_lcssa93 >> 2];
    var $256 = HEAP32[$_16_lcssa100 >> 2];
    var $uadd18 = _llvm_uadd_with_overflow_i32($255, $256);
    var $257 = $uadd18.f0;
    var $261 = $uadd18.f1;
    var $264 = ($261 & 1) + HEAP32[$_13_lcssa98 >> 2] + HEAP32[$_16_lcssa100 + 4 >> 2] | 0;
    HEAP32[$_13_lcssa98 >> 2] = $264;
    HEAP32[$_lcssa93 >> 2] = $257;
    var $q_5 = -2;
    var $flag_3 = $flag_0_lcssa103;
    __label__ = 37;
    break;
   case 37:
    var $flag_3;
    var $q_5;
    var $n1_7 = HEAP32[$_13_lcssa98 >> 2];
    var $q_7 = $q_5;
    var $flag_4 = $flag_3;
    var $_lcssa94 = $_lcssa93;
    var $_1_lcssa95 = $_1_lcssa97;
    __label__ = 42;
    break;
   case 38:
    var $_pre_phi9;
    var $_pre_phi7;
    var $_pre_phi5;
    var $_pre_phi;
    var $flag_0_lcssa104;
    var $n1_3_lcssa101;
    var $_13_lcssa99;
    var $_1_lcssa96;
    var $_lcssa92;
    var $268 = $n1_3_lcssa101 & 65535;
    var $269 = $n1_3_lcssa101 >>> 16;
    var $270 = (i64Math.multiply($268, 0, $_pre_phi, 0), i64Math.result[0]);
    var $271 = (i64Math.multiply($268, 0, $_pre_phi5, 0), i64Math.result[0]);
    var $272 = (i64Math.multiply($269, 0, $_pre_phi, 0), i64Math.result[0]);
    var $273 = (i64Math.multiply($269, 0, $_pre_phi5, 0), i64Math.result[0]);
    var $275 = ($270 >>> 16) + $271 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($275, $272);
    var $276 = $uadd.f0;
    var $277 = $uadd.f1;
    var $__x356_0 = $277 ? $273 + 65536 | 0 : $273;
    var $279 = $276 >>> 16;
    var $282 = $276 << 16 | $270 & 65535;
    var $283 = HEAPU32[$_13_lcssa99 >> 2];
    var $uadd15 = _llvm_uadd_with_overflow_i32($282, $283);
    var $284 = $uadd15.f0;
    var $285 = $uadd15.f1;
    var $289 = $__x356_0 + $n1_3_lcssa101 + $279 + ($285 & 1) | 0;
    var $290 = (i64Math.multiply($289, 0, $18, 0), i64Math.result[0]);
    var $291 = HEAPU32[$_lcssa92 >> 2];
    var $292 = $291 - $20 | 0;
    var $_neg46 = ($291 >>> 0 < $20 >>> 0) << 31 >> 31;
    var $294 = $289 & 65535;
    var $295 = $289 >>> 16;
    var $296 = (i64Math.multiply($294, 0, $_pre_phi7, 0), i64Math.result[0]);
    var $297 = (i64Math.multiply($295, 0, $_pre_phi7, 0), i64Math.result[0]);
    var $298 = (i64Math.multiply($294, 0, $_pre_phi9, 0), i64Math.result[0]);
    var $299 = (i64Math.multiply($295, 0, $_pre_phi9, 0), i64Math.result[0]);
    var $301 = ($296 >>> 16) + $297 | 0;
    var $uadd16 = _llvm_uadd_with_overflow_i32($301, $298);
    var $302 = $uadd16.f0;
    var $303 = $uadd16.f1;
    var $__x368_0 = $303 ? $299 + 65536 | 0 : $299;
    var $308 = $296 & 65535 | $302 << 16;
    var $309 = $292 - $308 | 0;
    var $315 = $283 - $18 + $_neg46 - ($302 >>> 16) - $290 - $__x368_0 + (($292 >>> 0 < $308 >>> 0) << 31 >> 31) | 0;
    var $317 = ($315 >>> 0 >= $284 >>> 0) << 31 >> 31;
    var $319 = $289 + 1 + $317 | 0;
    var $320 = $317 & $20;
    var $uadd17 = _llvm_uadd_with_overflow_i32($309, $320);
    var $321 = $uadd17.f0;
    var $323 = $uadd17.f1;
    var $326 = $315 + ($323 & 1) + ($317 & $18) | 0;
    if ($326 >>> 0 < $18 >>> 0) {
      var $n1_6 = $326;
      var $n0_2 = $321;
      var $q_6 = $319;
      __label__ = 41;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $330 = $321 >>> 0 < $20 >>> 0;
    if ($326 >>> 0 <= $18 >>> 0 & $330) {
      var $n1_6 = $326;
      var $n0_2 = $321;
      var $q_6 = $319;
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $n1_6 = ($330 << 31 >> 31) - $18 + $326 | 0;
    var $n0_2 = $321 - $20 | 0;
    var $q_6 = $319 + 1 | 0;
    __label__ = 41;
    break;
   case 41:
    var $q_6;
    var $n0_2;
    var $n1_6;
    HEAP32[$_lcssa92 >> 2] = $n0_2;
    HEAP32[$_13_lcssa99 >> 2] = $n1_6;
    var $n1_7 = $n1_6;
    var $q_7 = $q_6;
    var $flag_4 = $flag_0_lcssa104;
    var $_lcssa94 = $_lcssa92;
    var $_1_lcssa95 = $_1_lcssa96;
    __label__ = 42;
    break;
   case 42:
    var $_1_lcssa95;
    var $_lcssa94;
    var $flag_4;
    var $q_7;
    var $n1_7;
    var $338 = $_1_lcssa95 - 4 | 0;
    HEAP32[$338 >> 2] = $q_7;
    var $_2 = $338;
    var $_24 = $_lcssa94;
    var $n1_8 = $n1_7;
    var $flag_5 = $flag_4;
    __label__ = 43;
    break;
   case 43:
    var $flag_5;
    var $n1_8;
    var $_24;
    var $_2;
    if ((HEAP32[$_24 + 4 >> 2] | 0) == ($n1_8 | 0)) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    ___gmp_assert_fail(STRING_TABLE.__str339 | 0, 187, STRING_TABLE.__str1347 | 0);
    throw "Reached an unreachable!";
   case 45:
    if ($n1_8 >>> 0 < ($flag_5 & $dn) >>> 0) {
      __label__ = 46;
      break;
    } else {
      var $_0 = $_lobit_not;
      __label__ = 74;
      break;
    }
   case 46:
    if (($dn | 0) > 2) {
      __label__ = 47;
      break;
    } else {
      var $x_2 = $n1_8;
      __label__ = 58;
      break;
    }
   case 47:
    if ($3) {
      __label__ = 48;
      break;
    } else {
      var $_27 = $dp;
      var $_210 = $dn;
      __label__ = 49;
      break;
    }
   case 48:
    var $_27 = $dp + ($dn - $2 << 2) | 0;
    var $_210 = $2;
    __label__ = 49;
    break;
   case 49:
    var $_210;
    var $_27;
    var $y_0 = HEAP32[$_24 >> 2];
    var $x_0 = $n1_8;
    var $i_2 = $_210 - 3 | 0;
    __label__ = 50;
    break;
   case 50:
    var $i_2;
    var $x_0;
    var $y_0;
    if (($i_2 | 0) > -1) {
      __label__ = 51;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 51:
    var $360 = HEAP32[$_2 + ($i_2 << 2) >> 2];
    var $361 = $_210 - $i_2 | 0;
    var $364 = ___gmpn_submul_1($_24 + (2 - $361 << 2) | 0, $_27, $361 - 2 | 0, $360);
    if ($y_0 >>> 0 < $364 >>> 0) {
      __label__ = 52;
      break;
    } else {
      var $x_1 = $x_0;
      __label__ = 56;
      break;
    }
   case 52:
    if (($x_0 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 53:
    var $369 = ___gmpn_sub_1($_2, $_2, $1, 1);
    if (($369 | 0) == 0) {
      var $_0 = $_lobit_not;
      __label__ = 74;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    ___gmp_assert_fail(STRING_TABLE.__str339 | 0, 238, STRING_TABLE.__str2341 | 0);
    throw "Reached an unreachable!";
   case 55:
    var $x_1 = $x_0 - 1 | 0;
    __label__ = 56;
    break;
   case 56:
    var $x_1;
    var $y_0 = $y_0 - $364 | 0;
    var $x_0 = $x_1;
    var $i_2 = $i_2 - 1 | 0;
    __label__ = 50;
    break;
   case 57:
    HEAP32[$_24 >> 2] = $y_0;
    var $x_2 = $x_0;
    __label__ = 58;
    break;
   case 58:
    var $x_2;
    if ($3) {
      __label__ = 59;
      break;
    } else {
      var $_0 = $_lobit_not;
      __label__ = 74;
      break;
    }
   case 59:
    if ($10) {
      __label__ = 60;
      break;
    } else {
      var $x_3 = $x_2;
      __label__ = 66;
      break;
    }
   case 60:
    var $381 = $np + ($1 << 2) | 0;
    var $382 = $dn - $2 | 0;
    var $383 = ___gmpn_sub_n($381, $381, $dp, $382);
    if (($383 | 0) == 0) {
      var $x_3 = $x_2;
      __label__ = 66;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 61:
    if (($x_2 | 0) == 0) {
      __label__ = 62;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 62:
    if (($nn | 0) == ($dn | 0)) {
      var $cy_0 = $383;
      __label__ = 64;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $390 = ___gmpn_sub_1($_2, $_2, $1, 1);
    var $cy_0 = $390;
    __label__ = 64;
    break;
   case 64:
    var $cy_0;
    var $_0 = $_lobit_not - $cy_0 | 0;
    __label__ = 74;
    break;
   case 65:
    var $x_3 = $x_2 - 1 | 0;
    __label__ = 66;
    break;
   case 66:
    var $x_3;
    if (($nn | 0) == ($dn | 0)) {
      var $_0 = $_lobit_not;
      __label__ = 74;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $398 = $dn - $1 | 0;
    var $400 = $398 - 1 | 0;
    var $x_4 = $x_3;
    var $i_3 = $398 - 2 | 0;
    __label__ = 68;
    break;
   case 68:
    var $i_3;
    var $x_4;
    if (($i_3 | 0) > -1) {
      __label__ = 69;
      break;
    } else {
      var $_0 = $_lobit_not;
      __label__ = 74;
      break;
    }
   case 69:
    var $404 = $np + ($i_3 << 2) | 0;
    var $406 = HEAP32[$dp + ($i_3 << 2) >> 2];
    var $407 = ___gmpn_submul_1($404, $_2, $1, $406);
    var $408 = $np + ($i_3 + $1 << 2) | 0;
    var $409 = $400 - $i_3 | 0;
    var $410 = ___gmpn_sub_1($408, $408, $409, $407);
    if (($410 | 0) == 0) {
      var $x_5 = $x_4;
      __label__ = 73;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    if (($x_4 | 0) == 0) {
      __label__ = 71;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 71:
    var $415 = ___gmpn_sub_1($_2, $_2, $1, 1);
    var $_0 = $_lobit_not;
    __label__ = 74;
    break;
   case 72:
    var $x_5 = $x_4 - 1 | 0;
    __label__ = 73;
    break;
   case 73:
    var $x_5;
    var $x_4 = $x_5;
    var $i_3 = $i_3 - 1 | 0;
    __label__ = 68;
    break;
   case 74:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sbpi1_div_q["X"] = 1;

function ___gmpn_sbpi1_div_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_sum = $nn - $dn | 0;
    var $1 = $np + ($_sum << 2) | 0;
    var $2 = ___gmpn_cmp($1, $dp, $dn);
    var $_lobit_not = $2 >>> 31 ^ 1;
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ___gmpn_sub_n($1, $1, $dp, $dn);
    __label__ = 4;
    break;
   case 4:
    var $7 = $dn - 2 | 0;
    var $8 = $dn - 1 | 0;
    var $10 = HEAPU32[$dp + ($8 << 2) >> 2];
    var $12 = HEAPU32[$dp + ($7 << 2) >> 2];
    var $13 = $np + ($nn - 2 << 2) | 0;
    var $15 = HEAPU32[$np + ($nn - 1 << 2) >> 2];
    if (($_sum | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      var $n1_0_lcssa = $15;
      var $_01_lcssa = $13;
      __label__ = 15;
      break;
    }
   case 5:
    var $_sum8 = 1 - $dn | 0;
    var $18 = $dinv & 65535;
    var $19 = $dinv >>> 16;
    var $20 = $12 & 65535;
    var $21 = $12 >>> 16;
    var $n1_015 = $15;
    var $i_016 = $_sum;
    var $_0117 = $13;
    var $_018 = $qp + ($_sum << 2) | 0;
    __label__ = 6;
    break;
   case 6:
    var $_018;
    var $_0117;
    var $i_016;
    var $n1_015;
    var $23 = $_0117 - 4 | 0;
    var $25 = HEAPU32[$_0117 >> 2];
    if (($n1_015 | 0) == ($10 | 0) & ($25 | 0) == ($12 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $28 = $_0117 + ($_sum8 << 2) | 0;
    var $29 = ___gmpn_submul_1($28, $dp, $dn, -1);
    var $n1_2 = HEAP32[$_0117 >> 2];
    var $q_1 = -1;
    __label__ = 13;
    break;
   case 8:
    var $31 = $n1_015 & 65535;
    var $32 = $n1_015 >>> 16;
    var $33 = (i64Math.multiply($31, 0, $18, 0), i64Math.result[0]);
    var $34 = (i64Math.multiply($31, 0, $19, 0), i64Math.result[0]);
    var $35 = (i64Math.multiply($32, 0, $18, 0), i64Math.result[0]);
    var $36 = (i64Math.multiply($32, 0, $19, 0), i64Math.result[0]);
    var $38 = ($33 >>> 16) + $34 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($38, $35);
    var $39 = $uadd.f0;
    var $40 = $uadd.f1;
    var $__x3_0 = $40 ? $36 + 65536 | 0 : $36;
    var $42 = $39 >>> 16;
    var $45 = $39 << 16 | $33 & 65535;
    var $uadd4 = _llvm_uadd_with_overflow_i32($45, $25);
    var $46 = $uadd4.f0;
    var $47 = $uadd4.f1;
    var $51 = $__x3_0 + $n1_015 + $42 + ($47 & 1) | 0;
    var $52 = (i64Math.multiply($51, 0, $10, 0), i64Math.result[0]);
    var $53 = HEAPU32[$23 >> 2];
    var $54 = $53 - $12 | 0;
    var $_neg10 = ($53 >>> 0 < $12 >>> 0) << 31 >> 31;
    var $56 = $51 & 65535;
    var $57 = $51 >>> 16;
    var $58 = (i64Math.multiply($56, 0, $20, 0), i64Math.result[0]);
    var $59 = (i64Math.multiply($57, 0, $20, 0), i64Math.result[0]);
    var $60 = (i64Math.multiply($56, 0, $21, 0), i64Math.result[0]);
    var $61 = (i64Math.multiply($57, 0, $21, 0), i64Math.result[0]);
    var $63 = ($58 >>> 16) + $59 | 0;
    var $uadd5 = _llvm_uadd_with_overflow_i32($63, $60);
    var $64 = $uadd5.f0;
    var $65 = $uadd5.f1;
    var $__x38_0 = $65 ? $61 + 65536 | 0 : $61;
    var $70 = $58 & 65535 | $64 << 16;
    var $71 = $54 - $70 | 0;
    var $77 = $25 - $10 + $_neg10 - ($64 >>> 16) - $52 - $__x38_0 + (($54 >>> 0 < $70 >>> 0) << 31 >> 31) | 0;
    var $79 = ($77 >>> 0 >= $46 >>> 0) << 31 >> 31;
    var $81 = $51 + 1 + $79 | 0;
    var $82 = $79 & $12;
    var $uadd6 = _llvm_uadd_with_overflow_i32($71, $82);
    var $83 = $uadd6.f0;
    var $85 = $uadd6.f1;
    var $88 = $77 + ($85 & 1) + ($79 & $10) | 0;
    if ($88 >>> 0 < $10 >>> 0) {
      var $n1_1 = $88;
      var $n0_0 = $83;
      var $q_0 = $81;
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $92 = $83 >>> 0 < $12 >>> 0;
    if ($88 >>> 0 <= $10 >>> 0 & $92) {
      var $n1_1 = $88;
      var $n0_0 = $83;
      var $q_0 = $81;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $n1_1 = ($92 << 31 >> 31) - $10 + $88 | 0;
    var $n0_0 = $83 - $12 | 0;
    var $q_0 = $81 + 1 | 0;
    __label__ = 11;
    break;
   case 11:
    var $q_0;
    var $n0_0;
    var $n1_1;
    var $99 = $_0117 + ($_sum8 << 2) | 0;
    var $100 = ___gmpn_submul_1($99, $dp, $7, $q_0);
    var $102 = $n0_0 >>> 0 < $100 >>> 0 & 1;
    var $104 = $n1_1 >>> 0 < $102 >>> 0;
    var $105 = $n1_1 - $102 | 0;
    HEAP32[$23 >> 2] = $n0_0 - $100 | 0;
    if ($104) {
      __label__ = 12;
      break;
    } else {
      var $n1_2 = $105;
      var $q_1 = $q_0;
      __label__ = 13;
      break;
    }
   case 12:
    var $107 = ___gmpn_add_n($99, $99, $dp, $8);
    var $n1_2 = $105 + $10 + $107 | 0;
    var $q_1 = $q_0 - 1 | 0;
    __label__ = 13;
    break;
   case 13:
    var $q_1;
    var $n1_2;
    var $112 = $_018 - 4 | 0;
    HEAP32[$112 >> 2] = $q_1;
    var $113 = $i_016 - 1 | 0;
    if (($113 | 0) > 0) {
      var $n1_015 = $n1_2;
      var $i_016 = $113;
      var $_0117 = $23;
      var $_018 = $112;
      __label__ = 6;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $n1_0_lcssa = $n1_2;
    var $_01_lcssa = $np + ($7 << 2) | 0;
    __label__ = 15;
    break;
   case 15:
    var $_01_lcssa;
    var $n1_0_lcssa;
    HEAP32[$_01_lcssa + 4 >> 2] = $n1_0_lcssa;
    return $_lobit_not;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sbpi1_div_qr["X"] = 1;

function ___gmpn_sqr($p, $a, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 1212;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ws = __stackBase__;
    var $__tmp_marker = __stackBase__ + 1208;
    if (($n | 0) > 49) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    ___gmpn_sqr_basecase($p, $a, $n);
    __label__ = 16;
    break;
   case 4:
    if (($n | 0) > 119) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $6 = $ws | 0;
    ___gmpn_toom2_sqr($p, $a, $n, $6);
    __label__ = 16;
    break;
   case 6:
    if (($n | 0) > 399) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $10 = (i64Math.multiply($n, 0, 10, 0), i64Math.result[0]);
    var $13 = STACKTOP;
    STACKTOP += $10 + 128 & -4;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $14 = $13;
    ___gmpn_toom3_sqr($p, $a, $n, $14);
    __label__ = 16;
    break;
   case 8:
    if (($n | 0) > 449) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $20 = STACKTOP;
    STACKTOP += ($n << 3) + 1528 | 0;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $21 = $20;
    ___gmpn_toom6_sqr($p, $a, $n, $21);
    __label__ = 16;
    break;
   case 10:
    if (($n | 0) > 3599) {
      __label__ = 15;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $25 = (i64Math.multiply($n, 0, 15, 0), i64Math.result[0]);
    var $28 = ($25 >> 1) + 1756 & -4;
    if ($28 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $30 = STACKTOP;
    STACKTOP += $28;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $31 = $30;
    ___gmpn_toom8_sqr($p, $a, $n, $31);
    __label__ = 16;
    break;
   case 13:
    var $33 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $28);
    var $_pre = HEAP32[$__tmp_marker >> 2];
    var $34 = $33;
    ___gmpn_toom8_sqr($p, $a, $n, $34);
    if (($_pre | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    ___gmp_tmp_reentrant_free($_pre);
    __label__ = 16;
    break;
   case 15:
    ___gmpn_nussbaumer_mul($p, $a, $n, $a, $n);
    __label__ = 16;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sqr["X"] = 1;

function ___gmpn_sqr_basecase($rp, $up, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 400;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $tarr = __stackBase__;
    var $1 = HEAPU32[$up >> 2];
    var $2 = $1 & 65535;
    var $3 = $1 >>> 16;
    var $4 = (i64Math.multiply($2, 0, $2, 0), i64Math.result[0]);
    var $5 = (i64Math.multiply($2, 0, $3, 0), i64Math.result[0]);
    var $6 = (i64Math.multiply($3, 0, $3, 0), i64Math.result[0]);
    var $8 = ($4 >>> 16) + $5 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($8, $5);
    var $9 = $uadd.f0;
    var $10 = $uadd.f1;
    var $__x3_0 = $10 ? $6 + 65536 | 0 : $6;
    var $14 = $rp + 4 | 0;
    HEAP32[$14 >> 2] = $__x3_0 + ($9 >>> 16) | 0;
    HEAP32[$rp >> 2] = $9 << 16 | $4 & 65535;
    if (($n | 0) > 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 3:
    var $20 = $tarr | 0;
    var $21 = $up + 4 | 0;
    var $22 = $n - 1 | 0;
    var $23 = HEAP32[$up >> 2];
    var $24 = ___gmpn_mul_1($20, $21, $22, $23);
    HEAP32[$tarr + ($22 << 2) >> 2] = $24;
    if (($n | 0) > 2) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $27 = $n - 2 | 0;
    var $i_06 = 2;
    __label__ = 6;
    break;
   case 5:
    if (($22 | 0) > 0) {
      var $_i_05 = 0;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    var $i_06;
    var $31 = $tarr + (($i_06 << 1) - 2 << 2) | 0;
    var $32 = $up + ($i_06 << 2) | 0;
    var $33 = $n - $i_06 | 0;
    var $36 = HEAP32[$up + ($i_06 - 1 << 2) >> 2];
    var $37 = ___gmpn_addmul_1($31, $32, $33, $36);
    HEAP32[$tarr + ($27 + $i_06 << 2) >> 2] = $37;
    var $40 = $i_06 + 1 | 0;
    if (($40 | 0) == ($n | 0)) {
      __label__ = 5;
      break;
    } else {
      var $i_06 = $40;
      __label__ = 6;
      break;
    }
   case 7:
    var $_i_05;
    var $_sum = $_i_05 + 1 | 0;
    var $42 = HEAPU32[$up + ($_sum << 2) >> 2];
    var $43 = $42 & 65535;
    var $44 = $42 >>> 16;
    var $45 = (i64Math.multiply($43, 0, $43, 0), i64Math.result[0]);
    var $46 = (i64Math.multiply($43, 0, $44, 0), i64Math.result[0]);
    var $47 = (i64Math.multiply($44, 0, $44, 0), i64Math.result[0]);
    var $49 = ($45 >>> 16) + $46 | 0;
    var $uadd1 = _llvm_uadd_with_overflow_i32($49, $46);
    var $50 = $uadd1.f0;
    var $51 = $uadd1.f1;
    var $__x37_0 = $51 ? $47 + 65536 | 0 : $47;
    var $55 = $_i_05 << 1;
    HEAP32[$rp + (($55 | 1) + 2 << 2) >> 2] = $__x37_0 + ($50 >>> 16) | 0;
    HEAP32[$rp + ($55 + 2 << 2) >> 2] = $50 << 16 | $45 & 65535;
    if (($_sum | 0) == ($22 | 0)) {
      __label__ = 8;
      break;
    } else {
      var $_i_05 = $_sum;
      __label__ = 7;
      break;
    }
   case 8:
    var $62 = $n << 1;
    var $63 = $62 - 2 | 0;
    var $64 = ___gmpn_lshift($20, $20, $63, 1);
    var $65 = ___gmpn_add_n($14, $14, $20, $63);
    var $67 = $rp + ($62 - 1 << 2) | 0;
    var $70 = $65 + $64 + HEAP32[$67 >> 2] | 0;
    HEAP32[$67 >> 2] = $70;
    __label__ = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sqr_basecase["X"] = 1;

function ___gmpn_sbpi1_divappr_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $nn - $dn | 0;
    var $2 = $1 + 1 | 0;
    if (($2 | 0) < ($dn | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_03 = $dp;
      var $_05 = $dn;
      __label__ = 4;
      break;
    }
   case 3:
    var $_03 = $dp + ($dn - $2 << 2) | 0;
    var $_05 = $2;
    __label__ = 4;
    break;
   case 4:
    var $_05;
    var $_03;
    var $8 = $np + ($nn - $_05 << 2) | 0;
    var $9 = ___gmpn_cmp($8, $_03, $_05);
    var $_lobit_not = $9 >>> 31 ^ 1;
    if (($9 | 0) > -1) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $12 = ___gmpn_sub_n($8, $8, $_03, $_05);
    __label__ = 6;
    break;
   case 6:
    var $14 = $qp + ($1 << 2) | 0;
    var $15 = $_05 - 2 | 0;
    var $16 = $_05 - 1 | 0;
    var $18 = HEAPU32[$_03 + ($16 << 2) >> 2];
    var $19 = $_03 + ($15 << 2) | 0;
    var $20 = HEAPU32[$19 >> 2];
    var $21 = $np + ($nn - 2 << 2) | 0;
    var $23 = HEAPU32[$np + ($nn - 1 << 2) >> 2];
    var $24 = $1 - $_05 | 0;
    if (($24 | 0) > -1) {
      __label__ = 7;
      break;
    } else {
      var $n1_0_lcssa = $23;
      var $_01_lcssa = $21;
      var $_0_lcssa = $14;
      __label__ = 17;
      break;
    }
   case 7:
    var $_sum24 = 1 - $_05 | 0;
    var $26 = $dinv & 65535;
    var $27 = $dinv >>> 16;
    var $28 = $20 & 65535;
    var $29 = $20 >>> 16;
    var $30 = $_05 + $dn | 0;
    var $32 = $30 - 1 - $nn | 0;
    var $smax = ($32 | 0) > -1 ? $32 : -1;
    var $34 = $15 - $smax | 0;
    var $36 = $30 - 4 - $smax | 0;
    var $n1_060 = $23;
    var $i_061 = $24;
    var $_0162 = $21;
    var $_063 = $14;
    __label__ = 8;
    break;
   case 8:
    var $_063;
    var $_0162;
    var $i_061;
    var $n1_060;
    var $38 = $_0162 - 4 | 0;
    var $40 = HEAPU32[$_0162 >> 2];
    if (($n1_060 | 0) == ($18 | 0) & ($40 | 0) == ($20 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $44 = ___gmpn_submul_1($_0162 + ($_sum24 << 2) | 0, $_03, $_05, -1);
    var $n1_2 = HEAP32[$_0162 >> 2];
    var $q_1 = -1;
    __label__ = 15;
    break;
   case 10:
    var $46 = $n1_060 & 65535;
    var $47 = $n1_060 >>> 16;
    var $48 = (i64Math.multiply($46, 0, $26, 0), i64Math.result[0]);
    var $49 = (i64Math.multiply($46, 0, $27, 0), i64Math.result[0]);
    var $50 = (i64Math.multiply($47, 0, $26, 0), i64Math.result[0]);
    var $51 = (i64Math.multiply($47, 0, $27, 0), i64Math.result[0]);
    var $53 = ($48 >>> 16) + $49 | 0;
    var $uadd19 = _llvm_uadd_with_overflow_i32($53, $50);
    var $54 = $uadd19.f0;
    var $55 = $uadd19.f1;
    var $__x3_0 = $55 ? $51 + 65536 | 0 : $51;
    var $57 = $54 >>> 16;
    var $60 = $54 << 16 | $48 & 65535;
    var $uadd20 = _llvm_uadd_with_overflow_i32($60, $40);
    var $61 = $uadd20.f0;
    var $62 = $uadd20.f1;
    var $66 = $__x3_0 + $n1_060 + $57 + ($62 & 1) | 0;
    var $67 = (i64Math.multiply($66, 0, $18, 0), i64Math.result[0]);
    var $68 = HEAPU32[$38 >> 2];
    var $69 = $68 - $20 | 0;
    var $_neg28 = ($68 >>> 0 < $20 >>> 0) << 31 >> 31;
    var $71 = $66 & 65535;
    var $72 = $66 >>> 16;
    var $73 = (i64Math.multiply($71, 0, $28, 0), i64Math.result[0]);
    var $74 = (i64Math.multiply($72, 0, $28, 0), i64Math.result[0]);
    var $75 = (i64Math.multiply($71, 0, $29, 0), i64Math.result[0]);
    var $76 = (i64Math.multiply($72, 0, $29, 0), i64Math.result[0]);
    var $78 = ($73 >>> 16) + $74 | 0;
    var $uadd21 = _llvm_uadd_with_overflow_i32($78, $75);
    var $79 = $uadd21.f0;
    var $80 = $uadd21.f1;
    var $__x38_0 = $80 ? $76 + 65536 | 0 : $76;
    var $85 = $73 & 65535 | $79 << 16;
    var $86 = $69 - $85 | 0;
    var $92 = $40 - $18 + $_neg28 - ($79 >>> 16) - $67 - $__x38_0 + (($69 >>> 0 < $85 >>> 0) << 31 >> 31) | 0;
    var $94 = ($92 >>> 0 >= $61 >>> 0) << 31 >> 31;
    var $96 = $66 + 1 + $94 | 0;
    var $97 = $94 & $20;
    var $uadd22 = _llvm_uadd_with_overflow_i32($86, $97);
    var $98 = $uadd22.f0;
    var $100 = $uadd22.f1;
    var $103 = $92 + ($100 & 1) + ($94 & $18) | 0;
    if ($103 >>> 0 < $18 >>> 0) {
      var $n1_1 = $103;
      var $n0_0 = $98;
      var $q_0 = $96;
      __label__ = 13;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $107 = $98 >>> 0 < $20 >>> 0;
    if ($103 >>> 0 <= $18 >>> 0 & $107) {
      var $n1_1 = $103;
      var $n0_0 = $98;
      var $q_0 = $96;
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $n1_1 = ($107 << 31 >> 31) - $18 + $103 | 0;
    var $n0_0 = $98 - $20 | 0;
    var $q_0 = $96 + 1 | 0;
    __label__ = 13;
    break;
   case 13:
    var $q_0;
    var $n0_0;
    var $n1_1;
    var $114 = $_0162 + ($_sum24 << 2) | 0;
    var $115 = ___gmpn_submul_1($114, $_03, $15, $q_0);
    var $117 = $n0_0 >>> 0 < $115 >>> 0 & 1;
    var $119 = $n1_1 >>> 0 < $117 >>> 0;
    var $120 = $n1_1 - $117 | 0;
    HEAP32[$38 >> 2] = $n0_0 - $115 | 0;
    if ($119) {
      __label__ = 14;
      break;
    } else {
      var $n1_2 = $120;
      var $q_1 = $q_0;
      __label__ = 15;
      break;
    }
   case 14:
    var $122 = ___gmpn_add_n($114, $114, $_03, $16);
    var $n1_2 = $120 + $18 + $122 | 0;
    var $q_1 = $q_0 - 1 | 0;
    __label__ = 15;
    break;
   case 15:
    var $q_1;
    var $n1_2;
    var $127 = $_063 - 4 | 0;
    HEAP32[$127 >> 2] = $q_1;
    if (($i_061 | 0) > 0) {
      var $n1_060 = $n1_2;
      var $i_061 = $i_061 - 1 | 0;
      var $_0162 = $38;
      var $_063 = $127;
      __label__ = 8;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $n1_0_lcssa = $n1_2;
    var $_01_lcssa = $np + ($36 << 2) | 0;
    var $_0_lcssa = $qp + ($34 << 2) | 0;
    __label__ = 17;
    break;
   case 17:
    var $_0_lcssa;
    var $_01_lcssa;
    var $n1_0_lcssa;
    if (($15 | 0) > -1) {
      __label__ = 18;
      break;
    } else {
      var $_2 = $_01_lcssa;
      var $n1_8 = $n1_0_lcssa;
      __label__ = 43;
      break;
    }
   case 18:
    var $133 = $_01_lcssa - 4 | 0;
    var $134 = $n1_0_lcssa >>> 0 >= $18 >>> 0;
    if (($15 | 0) > 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 19:
    var $135 = $dinv & 65535;
    var $136 = $dinv >>> 16;
    var $137 = $20 & 65535;
    var $138 = $20 >>> 16;
    var $139 = 1 - $_05 | 0;
    var $140 = 2 - $_05 | 0;
    var $scevgep76 = $_0_lcssa + ($140 << 2) | 0;
    var $flag_046 = -1;
    var $n1_347 = $n1_0_lcssa;
    var $_1649 = $15;
    var $_1450 = $_03;
    var $_1252 = $_01_lcssa;
    var $_153 = $_0_lcssa;
    var $143 = $133;
    var $142 = $134;
    __label__ = 20;
    break;
   case 20:
    var $142;
    var $143;
    var $_153;
    var $_1252;
    var $_1450;
    var $_1649;
    var $n1_347;
    var $flag_046;
    if ($142) {
      __label__ = 21;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 21:
    var $145 = $_1252 + (($_1649 ^ -1) << 2) | 0;
    var $146 = $_1649 + 2 | 0;
    var $147 = ___gmpn_submul_1($145, $_1450, $146, -1);
    if (($n1_347 | 0) == ($147 | 0)) {
      var $q_2 = -1;
      var $flag_1 = $flag_046;
      __label__ = 24;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if ($n1_347 >>> 0 < ($147 & $flag_046) >>> 0) {
      __label__ = 23;
      break;
    } else {
      var $q_2 = -1;
      var $flag_1 = 0;
      __label__ = 24;
      break;
    }
   case 23:
    var $153 = ___gmpn_add_n($145, $145, $_1450, $146);
    var $q_2 = -2;
    var $flag_1 = $flag_046;
    __label__ = 24;
    break;
   case 24:
    var $flag_1;
    var $q_2;
    var $n1_5 = HEAP32[$_1252 >> 2];
    var $q_4 = $q_2;
    var $flag_2 = $flag_1;
    __label__ = 30;
    break;
   case 25:
    var $157 = $n1_347 & 65535;
    var $158 = $n1_347 >>> 16;
    var $159 = (i64Math.multiply($157, 0, $135, 0), i64Math.result[0]);
    var $160 = (i64Math.multiply($157, 0, $136, 0), i64Math.result[0]);
    var $161 = (i64Math.multiply($158, 0, $135, 0), i64Math.result[0]);
    var $162 = (i64Math.multiply($158, 0, $136, 0), i64Math.result[0]);
    var $164 = ($159 >>> 16) + $160 | 0;
    var $uadd13 = _llvm_uadd_with_overflow_i32($164, $161);
    var $165 = $uadd13.f0;
    var $166 = $uadd13.f1;
    var $__x326_0 = $166 ? $162 + 65536 | 0 : $162;
    var $168 = $165 >>> 16;
    var $171 = $165 << 16 | $159 & 65535;
    var $172 = HEAPU32[$_1252 >> 2];
    var $uadd14 = _llvm_uadd_with_overflow_i32($171, $172);
    var $173 = $uadd14.f0;
    var $174 = $uadd14.f1;
    var $178 = $__x326_0 + $n1_347 + $168 + ($174 & 1) | 0;
    var $179 = (i64Math.multiply($178, 0, $18, 0), i64Math.result[0]);
    var $180 = HEAPU32[$143 >> 2];
    var $181 = $180 - $20 | 0;
    var $_neg34 = ($180 >>> 0 < $20 >>> 0) << 31 >> 31;
    var $183 = $178 & 65535;
    var $184 = $178 >>> 16;
    var $185 = (i64Math.multiply($183, 0, $137, 0), i64Math.result[0]);
    var $186 = (i64Math.multiply($184, 0, $137, 0), i64Math.result[0]);
    var $187 = (i64Math.multiply($183, 0, $138, 0), i64Math.result[0]);
    var $188 = (i64Math.multiply($184, 0, $138, 0), i64Math.result[0]);
    var $190 = ($185 >>> 16) + $186 | 0;
    var $uadd15 = _llvm_uadd_with_overflow_i32($190, $187);
    var $191 = $uadd15.f0;
    var $192 = $uadd15.f1;
    var $__x338_0 = $192 ? $188 + 65536 | 0 : $188;
    var $197 = $185 & 65535 | $191 << 16;
    var $198 = $181 - $197 | 0;
    var $204 = $172 - $18 + $_neg34 - ($191 >>> 16) - $179 - $__x338_0 + (($181 >>> 0 < $197 >>> 0) << 31 >> 31) | 0;
    var $206 = ($204 >>> 0 >= $173 >>> 0) << 31 >> 31;
    var $208 = $178 + 1 + $206 | 0;
    var $209 = $206 & $20;
    var $uadd16 = _llvm_uadd_with_overflow_i32($198, $209);
    var $210 = $uadd16.f0;
    var $212 = $uadd16.f1;
    var $215 = $204 + ($212 & 1) + ($206 & $18) | 0;
    if ($215 >>> 0 < $18 >>> 0) {
      var $n1_4 = $215;
      var $n0_1 = $210;
      var $q_3 = $208;
      __label__ = 28;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $219 = $210 >>> 0 < $20 >>> 0;
    if ($215 >>> 0 <= $18 >>> 0 & $219) {
      var $n1_4 = $215;
      var $n0_1 = $210;
      var $q_3 = $208;
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $n1_4 = ($219 << 31 >> 31) - $18 + $215 | 0;
    var $n0_1 = $210 - $20 | 0;
    var $q_3 = $208 + 1 | 0;
    __label__ = 28;
    break;
   case 28:
    var $q_3;
    var $n0_1;
    var $n1_4;
    var $226 = $_1252 + (($_1649 ^ -1) << 2) | 0;
    var $227 = ___gmpn_submul_1($226, $_1450, $_1649, $q_3);
    var $229 = $n0_1 >>> 0 < $227 >>> 0 & 1;
    var $231 = $n1_4 >>> 0 < $229 >>> 0;
    var $232 = $n1_4 - $229 | 0;
    HEAP32[$143 >> 2] = $n0_1 - $227 | 0;
    if ($231) {
      __label__ = 29;
      break;
    } else {
      var $n1_5 = $232;
      var $q_4 = $q_3;
      var $flag_2 = $flag_046;
      __label__ = 30;
      break;
    }
   case 29:
    var $235 = ___gmpn_add_n($226, $226, $_1450, $_1649 + 1 | 0);
    var $n1_5 = $232 + $18 + $235 | 0;
    var $q_4 = $q_3 - 1 | 0;
    var $flag_2 = $flag_046;
    __label__ = 30;
    break;
   case 30:
    var $flag_2;
    var $q_4;
    var $n1_5;
    var $240 = $_153 - 4 | 0;
    HEAP32[$240 >> 2] = $q_4;
    var $241 = $_1649 - 1 | 0;
    var $246 = $n1_5 >>> 0 >= ($flag_2 & $18) >>> 0;
    if (($241 | 0) > 0) {
      var $flag_046 = $flag_2;
      var $n1_347 = $n1_5;
      var $_1649 = $241;
      var $_1450 = $_1450 + 4 | 0;
      var $_1252 = $143;
      var $_153 = $240;
      var $143 = $143 - 4 | 0;
      var $142 = $246;
      __label__ = 20;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $scevgep = $_01_lcssa + ($139 << 2) | 0;
    var $scevgep77 = $_01_lcssa + ($140 << 2) | 0;
    if ($246) {
      var $_lcssa83 = $scevgep;
      var $_1_lcssa87 = $scevgep76;
      var $_12_lcssa88 = $scevgep77;
      var $_14_lcssa90 = $19;
      var $n1_3_lcssa92 = $n1_5;
      var $flag_0_lcssa93 = $flag_2;
      __label__ = 34;
      break;
    } else {
      var $_lcssa82 = $scevgep;
      var $_1_lcssa86 = $scevgep76;
      var $_12_lcssa89 = $scevgep77;
      var $n1_3_lcssa91 = $n1_5;
      var $_pre_phi = $135;
      var $_pre_phi5 = $136;
      var $_pre_phi7 = $137;
      var $_pre_phi9 = $138;
      __label__ = 38;
      break;
    }
   case 32:
    if ($134) {
      var $_lcssa83 = $133;
      var $_1_lcssa87 = $_0_lcssa;
      var $_12_lcssa88 = $_01_lcssa;
      var $_14_lcssa90 = $_03;
      var $n1_3_lcssa92 = $n1_0_lcssa;
      var $flag_0_lcssa93 = -1;
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $_lcssa82 = $133;
    var $_1_lcssa86 = $_0_lcssa;
    var $_12_lcssa89 = $_01_lcssa;
    var $n1_3_lcssa91 = $n1_0_lcssa;
    var $_pre_phi = $dinv & 65535;
    var $_pre_phi5 = $dinv >>> 16;
    var $_pre_phi7 = $20 & 65535;
    var $_pre_phi9 = $20 >>> 16;
    __label__ = 38;
    break;
   case 34:
    var $flag_0_lcssa93;
    var $n1_3_lcssa92;
    var $_14_lcssa90;
    var $_12_lcssa88;
    var $_1_lcssa87;
    var $_lcssa83;
    var $249 = ___gmpn_submul_1($_lcssa83, $_14_lcssa90, 2, -1);
    if (($n1_3_lcssa92 | 0) == ($249 | 0)) {
      var $q_5 = -1;
      __label__ = 37;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    if ($n1_3_lcssa92 >>> 0 < ($249 & $flag_0_lcssa93) >>> 0) {
      __label__ = 36;
      break;
    } else {
      var $q_5 = -1;
      __label__ = 37;
      break;
    }
   case 36:
    var $255 = HEAP32[$_lcssa83 >> 2];
    var $256 = HEAP32[$_14_lcssa90 >> 2];
    var $uadd12 = _llvm_uadd_with_overflow_i32($255, $256);
    var $257 = $uadd12.f0;
    var $261 = $uadd12.f1;
    var $264 = ($261 & 1) + HEAP32[$_12_lcssa88 >> 2] + HEAP32[$_14_lcssa90 + 4 >> 2] | 0;
    HEAP32[$_12_lcssa88 >> 2] = $264;
    HEAP32[$_lcssa83 >> 2] = $257;
    var $q_5 = -2;
    __label__ = 37;
    break;
   case 37:
    var $q_5;
    var $n1_7 = HEAP32[$_12_lcssa88 >> 2];
    var $q_7 = $q_5;
    var $_lcssa84 = $_lcssa83;
    var $_1_lcssa85 = $_1_lcssa87;
    __label__ = 42;
    break;
   case 38:
    var $_pre_phi9;
    var $_pre_phi7;
    var $_pre_phi5;
    var $_pre_phi;
    var $n1_3_lcssa91;
    var $_12_lcssa89;
    var $_1_lcssa86;
    var $_lcssa82;
    var $268 = $n1_3_lcssa91 & 65535;
    var $269 = $n1_3_lcssa91 >>> 16;
    var $270 = (i64Math.multiply($268, 0, $_pre_phi, 0), i64Math.result[0]);
    var $271 = (i64Math.multiply($268, 0, $_pre_phi5, 0), i64Math.result[0]);
    var $272 = (i64Math.multiply($269, 0, $_pre_phi, 0), i64Math.result[0]);
    var $273 = (i64Math.multiply($269, 0, $_pre_phi5, 0), i64Math.result[0]);
    var $275 = ($270 >>> 16) + $271 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($275, $272);
    var $276 = $uadd.f0;
    var $277 = $uadd.f1;
    var $__x356_0 = $277 ? $273 + 65536 | 0 : $273;
    var $279 = $276 >>> 16;
    var $282 = $276 << 16 | $270 & 65535;
    var $283 = HEAPU32[$_12_lcssa89 >> 2];
    var $uadd9 = _llvm_uadd_with_overflow_i32($282, $283);
    var $284 = $uadd9.f0;
    var $285 = $uadd9.f1;
    var $289 = $__x356_0 + $n1_3_lcssa91 + $279 + ($285 & 1) | 0;
    var $290 = (i64Math.multiply($289, 0, $18, 0), i64Math.result[0]);
    var $291 = HEAPU32[$_lcssa82 >> 2];
    var $292 = $291 - $20 | 0;
    var $_neg40 = ($291 >>> 0 < $20 >>> 0) << 31 >> 31;
    var $294 = $289 & 65535;
    var $295 = $289 >>> 16;
    var $296 = (i64Math.multiply($294, 0, $_pre_phi7, 0), i64Math.result[0]);
    var $297 = (i64Math.multiply($295, 0, $_pre_phi7, 0), i64Math.result[0]);
    var $298 = (i64Math.multiply($294, 0, $_pre_phi9, 0), i64Math.result[0]);
    var $299 = (i64Math.multiply($295, 0, $_pre_phi9, 0), i64Math.result[0]);
    var $301 = ($296 >>> 16) + $297 | 0;
    var $uadd10 = _llvm_uadd_with_overflow_i32($301, $298);
    var $302 = $uadd10.f0;
    var $303 = $uadd10.f1;
    var $__x368_0 = $303 ? $299 + 65536 | 0 : $299;
    var $308 = $296 & 65535 | $302 << 16;
    var $309 = $292 - $308 | 0;
    var $315 = $283 - $18 + $_neg40 - ($302 >>> 16) - $290 - $__x368_0 + (($292 >>> 0 < $308 >>> 0) << 31 >> 31) | 0;
    var $317 = ($315 >>> 0 >= $284 >>> 0) << 31 >> 31;
    var $319 = $289 + 1 + $317 | 0;
    var $320 = $317 & $20;
    var $uadd11 = _llvm_uadd_with_overflow_i32($309, $320);
    var $321 = $uadd11.f0;
    var $323 = $uadd11.f1;
    var $326 = $315 + ($323 & 1) + ($317 & $18) | 0;
    if ($326 >>> 0 < $18 >>> 0) {
      var $n1_6 = $326;
      var $n0_2 = $321;
      var $q_6 = $319;
      __label__ = 41;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $330 = $321 >>> 0 < $20 >>> 0;
    if ($326 >>> 0 <= $18 >>> 0 & $330) {
      var $n1_6 = $326;
      var $n0_2 = $321;
      var $q_6 = $319;
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $n1_6 = ($330 << 31 >> 31) - $18 + $326 | 0;
    var $n0_2 = $321 - $20 | 0;
    var $q_6 = $319 + 1 | 0;
    __label__ = 41;
    break;
   case 41:
    var $q_6;
    var $n0_2;
    var $n1_6;
    HEAP32[$_12_lcssa89 >> 2] = $n1_6;
    HEAP32[$_lcssa82 >> 2] = $n0_2;
    var $n1_7 = $n1_6;
    var $q_7 = $q_6;
    var $_lcssa84 = $_lcssa82;
    var $_1_lcssa85 = $_1_lcssa86;
    __label__ = 42;
    break;
   case 42:
    var $_1_lcssa85;
    var $_lcssa84;
    var $q_7;
    var $n1_7;
    HEAP32[$_1_lcssa85 - 4 >> 2] = $q_7;
    var $_2 = $_lcssa84;
    var $n1_8 = $n1_7;
    __label__ = 43;
    break;
   case 43:
    var $n1_8;
    var $_2;
    if ((HEAP32[$_2 + 4 >> 2] | 0) == ($n1_8 | 0)) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    ___gmp_assert_fail(STRING_TABLE.__str346 | 0, 185, STRING_TABLE.__str1347 | 0);
    throw "Reached an unreachable!";
   case 45:
    return $_lobit_not;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sbpi1_divappr_q["X"] = 1;

function ___gmpn_sub_1($__gmp_dst, $__gmp_src, $__gmp_size, $__gmp_n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAPU32[$__gmp_src >> 2];
    HEAP32[$__gmp_dst >> 2] = $1 - $__gmp_n | 0;
    if ($1 >>> 0 < $__gmp_n >>> 0) {
      var $__gmp_i_0 = 1;
      __label__ = 3;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 3:
    var $__gmp_i_0;
    if (($__gmp_i_0 | 0) < ($__gmp_size | 0)) {
      __label__ = 4;
      break;
    } else {
      var $__gmp_c_0 = 1;
      __label__ = 9;
      break;
    }
   case 4:
    var $7 = HEAP32[$__gmp_src + ($__gmp_i_0 << 2) >> 2];
    var $8 = $7 - 1 | 0;
    HEAP32[$__gmp_dst + ($__gmp_i_0 << 2) >> 2] = $8;
    var $10 = $__gmp_i_0 + 1 | 0;
    if (($7 | 0) == 0) {
      var $__gmp_i_0 = $10;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($__gmp_src | 0) != ($__gmp_dst | 0) & ($10 | 0) < ($__gmp_size | 0)) {
      var $__gmp_j_04 = $10;
      __label__ = 6;
      break;
    } else {
      var $__gmp_c_0 = 0;
      __label__ = 9;
      break;
    }
   case 6:
    var $__gmp_j_04;
    var $16 = HEAP32[$__gmp_src + ($__gmp_j_04 << 2) >> 2];
    HEAP32[$__gmp_dst + ($__gmp_j_04 << 2) >> 2] = $16;
    var $18 = $__gmp_j_04 + 1 | 0;
    if (($18 | 0) == ($__gmp_size | 0)) {
      var $__gmp_c_0 = 0;
      __label__ = 9;
      break;
    } else {
      var $__gmp_j_04 = $18;
      __label__ = 6;
      break;
    }
   case 7:
    if (($__gmp_src | 0) != ($__gmp_dst | 0) & ($__gmp_size | 0) > 1) {
      var $__gmp_j1_01 = 1;
      __label__ = 8;
      break;
    } else {
      var $__gmp_c_0 = 0;
      __label__ = 9;
      break;
    }
   case 8:
    var $__gmp_j1_01;
    var $23 = HEAP32[$__gmp_src + ($__gmp_j1_01 << 2) >> 2];
    HEAP32[$__gmp_dst + ($__gmp_j1_01 << 2) >> 2] = $23;
    var $25 = $__gmp_j1_01 + 1 | 0;
    if (($25 | 0) == ($__gmp_size | 0)) {
      var $__gmp_c_0 = 0;
      __label__ = 9;
      break;
    } else {
      var $__gmp_j1_01 = $25;
      __label__ = 8;
      break;
    }
   case 9:
    var $__gmp_c_0;
    return $__gmp_c_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_sub_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_0 = $rp;
    var $_01 = $up;
    var $_02 = $vp;
    var $_03 = $n;
    var $cy_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $cy_0;
    var $_03;
    var $_02;
    var $_01;
    var $_0;
    var $3 = HEAPU32[$_01 >> 2];
    var $6 = $3 - HEAP32[$_02 >> 2] | 0;
    var $9 = $6 - $cy_0 | 0;
    var $12 = $9 >>> 0 > $6 >>> 0 & 1 | $6 >>> 0 > $3 >>> 0 & 1;
    HEAP32[$_0 >> 2] = $9;
    var $14 = $_03 - 1 | 0;
    if (($14 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_0 + 4 | 0;
      var $_01 = $_01 + 4 | 0;
      var $_02 = $_02 + 4 | 0;
      var $_03 = $14;
      var $cy_0 = $12;
      __label__ = 3;
      break;
    }
   case 4:
    return $12;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_subcnd_n($rp, $up, $vp, $n, $cnd) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = (($cnd | 0) != 0) << 31 >> 31;
    var $_0 = $rp;
    var $_01 = $up;
    var $_02 = $vp;
    var $_03 = $n;
    var $cy_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $cy_0;
    var $_03;
    var $_02;
    var $_01;
    var $_0;
    var $5 = HEAPU32[$_01 >> 2];
    var $9 = $5 - (HEAP32[$_02 >> 2] & $2) | 0;
    var $12 = $9 - $cy_0 | 0;
    var $15 = $12 >>> 0 > $9 >>> 0 & 1 | $9 >>> 0 > $5 >>> 0 & 1;
    HEAP32[$_0 >> 2] = $12;
    var $17 = $_03 - 1 | 0;
    if (($17 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_0 + 4 | 0;
      var $_01 = $_01 + 4 | 0;
      var $_02 = $_02 + 4 | 0;
      var $_03 = $17;
      var $cy_0 = $15;
      __label__ = 3;
      break;
    }
   case 4:
    return $15;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_zero_p369($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_zero_p372($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_sqrmod_bnm1($rp, $rn, $ap, $an, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($rn & 1 | 0) == 0 & ($rn | 0) > 15) {
      __label__ = 9;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($an | 0) < ($rn | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 4:
    var $7 = $an << 1;
    if (($7 | 0) > ($rn | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    ___gmpn_sqr($rp, $ap, $an);
    __label__ = 33;
    break;
   case 6:
    ___gmpn_sqr($tp, $ap, $an);
    var $11 = $tp + ($rn << 2) | 0;
    var $12 = $7 - $rn | 0;
    var $13 = ___gmpn_add($rp, $tp, $rn, $11, $12);
    var $14 = HEAP32[$rp >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($14, $13);
    var $15 = $uadd.f0;
    HEAP32[$rp >> 2] = $15;
    var $16 = $uadd.f1;
    if ($16) {
      var $__p_0 = $rp;
      __label__ = 7;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 7:
    var $__p_0;
    var $17 = $__p_0 + 4 | 0;
    var $19 = HEAP32[$17 >> 2] + 1 | 0;
    HEAP32[$17 >> 2] = $19;
    if (($19 | 0) == 0) {
      var $__p_0 = $17;
      __label__ = 7;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 8:
    _mpn_bc_sqrmod_bnm1($rp, $ap, $rn, $tp);
    __label__ = 33;
    break;
   case 9:
    var $23 = $rn >> 1;
    if (($23 | 0) < ($an | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 10:
    var $26 = $tp + ($23 << 2) | 0;
    var $27 = $ap + ($23 << 2) | 0;
    var $28 = $an - $23 | 0;
    var $29 = ___gmpn_add($tp, $ap, $23, $27, $28);
    var $30 = HEAP32[$tp >> 2];
    var $uadd8 = _llvm_uadd_with_overflow_i32($30, $29);
    var $31 = $uadd8.f0;
    HEAP32[$tp >> 2] = $31;
    var $32 = $uadd8.f1;
    if ($32) {
      var $__p3_0 = $tp;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmpn_sqrmod_bnm1($rp, $23, $tp, $23, $26);
    __label__ = 14;
    break;
   case 12:
    var $__p3_0;
    var $33 = $__p3_0 + 4 | 0;
    var $35 = HEAP32[$33 >> 2] + 1 | 0;
    HEAP32[$33 >> 2] = $35;
    if (($35 | 0) == 0) {
      var $__p3_0 = $33;
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmpn_sqrmod_bnm1($rp, $23, $tp, $23, $26);
    __label__ = 14;
    break;
   case 14:
    var $_sum5 = $rn + 2 & -2;
    var $40 = $tp + ($_sum5 << 2) | 0;
    var $41 = ___gmpn_sub($40, $ap, $23, $27, $28);
    var $42 = $tp + ($_sum5 + $23 << 2) | 0;
    HEAP32[$42 >> 2] = 0;
    var $43 = HEAP32[$40 >> 2];
    var $uadd7 = _llvm_uadd_with_overflow_i32($43, $41);
    var $44 = $uadd7.f0;
    HEAP32[$40 >> 2] = $44;
    var $45 = $uadd7.f1;
    if ($45) {
      var $__p5_0 = $40;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $__p5_0;
    var $46 = $__p5_0 + 4 | 0;
    var $48 = HEAP32[$46 >> 2] + 1 | 0;
    HEAP32[$46 >> 2] = $48;
    if (($48 | 0) == 0) {
      var $__p5_0 = $46;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $anp_0 = HEAP32[$42 >> 2] + $23 | 0;
    var $ap1_0 = $40;
    __label__ = 18;
    break;
   case 17:
    ___gmpn_sqrmod_bnm1($rp, $23, $ap, $an, $tp);
    var $anp_0 = $an;
    var $ap1_0 = $ap;
    __label__ = 18;
    break;
   case 18:
    var $ap1_0;
    var $anp_0;
    if (($23 | 0) > 299) {
      __label__ = 19;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 19:
    var $55 = ___gmpn_fft_best_k($23, 1);
    var $57 = (1 << $55) - 1 | 0;
    if (($57 & $23 | 0) == 0) {
      var $k_0_lcssa = $55;
      __label__ = 21;
      break;
    } else {
      var $k_016 = $55;
      var $mask_017 = $57;
      __label__ = 20;
      break;
    }
   case 20:
    var $mask_017;
    var $k_016;
    var $60 = $k_016 - 1 | 0;
    var $61 = $mask_017 >> 1;
    if (($61 & $23 | 0) == 0) {
      var $k_0_lcssa = $60;
      __label__ = 21;
      break;
    } else {
      var $k_016 = $60;
      var $mask_017 = $61;
      __label__ = 20;
      break;
    }
   case 21:
    var $k_0_lcssa;
    if (($k_0_lcssa | 0) > 3) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $66 = ___gmpn_mul_fft($tp, $23, $ap1_0, $anp_0, $ap1_0, $anp_0, $k_0_lcssa);
    var $67 = $tp + ($23 << 2) | 0;
    HEAP32[$67 >> 2] = $66;
    var $_pre_phi = $67;
    __label__ = 27;
    break;
   case 23:
    if (($ap1_0 | 0) == ($ap | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 24:
    ___gmpn_sqr($tp, $ap, $an);
    var $71 = ($an << 1) - $23 | 0;
    var $72 = $tp + ($23 << 2) | 0;
    var $73 = ___gmpn_sub($tp, $tp, $23, $72, $71);
    HEAP32[$72 >> 2] = 0;
    var $74 = HEAP32[$tp >> 2];
    var $uadd4 = _llvm_uadd_with_overflow_i32($74, $73);
    var $75 = $uadd4.f0;
    HEAP32[$tp >> 2] = $75;
    var $76 = $uadd4.f1;
    if ($76) {
      var $__p7_0 = $tp;
      __label__ = 25;
      break;
    } else {
      var $_pre_phi = $72;
      __label__ = 27;
      break;
    }
   case 25:
    var $__p7_0;
    var $77 = $__p7_0 + 4 | 0;
    var $79 = HEAP32[$77 >> 2] + 1 | 0;
    HEAP32[$77 >> 2] = $79;
    if (($79 | 0) == 0) {
      var $__p7_0 = $77;
      __label__ = 25;
      break;
    } else {
      var $_pre_phi = $72;
      __label__ = 27;
      break;
    }
   case 26:
    _mpn_bc_sqrmod_bnp1($tp, $ap1_0, $23, $tp);
    var $_pre_phi = $tp + ($23 << 2) | 0;
    __label__ = 27;
    break;
   case 27:
    var $_pre_phi;
    var $82 = HEAP32[$_pre_phi >> 2];
    var $83 = ___gmpn_add_n($rp, $rp, $tp, $23);
    var $87 = $83 + $82 + (HEAP32[$rp >> 2] & 1) | 0;
    var $88 = ___gmpn_rshift($rp, $rp, $23, 1);
    var $90 = $87 >>> 1;
    var $92 = $rp + ($23 - 1 << 2) | 0;
    var $94 = $87 << 31 | HEAP32[$92 >> 2];
    HEAP32[$92 >> 2] = $94;
    var $95 = HEAP32[$rp >> 2];
    var $uadd2 = _llvm_uadd_with_overflow_i32($95, $90);
    var $96 = $uadd2.f0;
    HEAP32[$rp >> 2] = $96;
    var $97 = $uadd2.f1;
    if ($97) {
      var $__p9_0 = $rp;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $__p9_0;
    var $98 = $__p9_0 + 4 | 0;
    var $100 = HEAP32[$98 >> 2] + 1 | 0;
    HEAP32[$98 >> 2] = $100;
    if (($100 | 0) == 0) {
      var $__p9_0 = $98;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $102 = $an << 1;
    if (($102 | 0) < ($rn | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $105 = $rp + ($23 << 2) | 0;
    var $106 = $102 - $23 | 0;
    var $107 = ___gmpn_sub_n($105, $rp, $tp, $106);
    var $108 = HEAP32[$_pre_phi >> 2];
    var $109 = $tp + ($106 << 2) | 0;
    var $110 = $rp + ($106 << 2) | 0;
    var $111 = $rn - $102 | 0;
    var $112 = _mpn_sub_nc356($109, $110, $109, $111, $107);
    var $113 = $112 + $108 | 0;
    var $114 = ___gmpn_sub_1($rp, $rp, $102, $113);
    __label__ = 33;
    break;
   case 31:
    var $116 = HEAP32[$_pre_phi >> 2];
    var $117 = $rp + ($23 << 2) | 0;
    var $118 = ___gmpn_sub_n($117, $rp, $tp, $23);
    var $119 = $118 + $116 | 0;
    var $120 = HEAPU32[$rp >> 2];
    var $121 = $120 - $119 | 0;
    HEAP32[$rp >> 2] = $121;
    if ($120 >>> 0 < $119 >>> 0) {
      var $__p11_0 = $rp;
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $__p11_0;
    var $123 = $__p11_0 + 4 | 0;
    var $124 = HEAP32[$123 >> 2];
    var $125 = $124 - 1 | 0;
    HEAP32[$123 >> 2] = $125;
    if (($124 | 0) == 0) {
      var $__p11_0 = $123;
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_sqrmod_bnm1["X"] = 1;

function _mpn_bc_sqrmod_bnm1($rp, $ap, $rn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    ___gmpn_sqr($tp, $ap, $rn);
    var $1 = $tp + ($rn << 2) | 0;
    var $2 = ___gmpn_add_n($rp, $tp, $1, $rn);
    var $3 = HEAP32[$rp >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($3, $2);
    var $4 = $uadd.f0;
    HEAP32[$rp >> 2] = $4;
    var $5 = $uadd.f1;
    if ($5) {
      var $__p_0 = $rp;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $__p_0;
    var $6 = $__p_0 + 4 | 0;
    var $8 = HEAP32[$6 >> 2] + 1 | 0;
    HEAP32[$6 >> 2] = $8;
    if (($8 | 0) == 0) {
      var $__p_0 = $6;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_bc_sqrmod_bnp1($rp, $ap, $rn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $rn + 1 | 0;
    ___gmpn_sqr($tp, $ap, $1);
    var $4 = HEAP32[$tp + ($rn << 1 << 2) >> 2];
    var $5 = $tp + ($rn << 2) | 0;
    var $6 = ___gmpn_sub_n($rp, $tp, $5, $rn);
    var $7 = $6 + $4 | 0;
    HEAP32[$rp + ($rn << 2) >> 2] = 0;
    var $9 = HEAP32[$rp >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($9, $7);
    var $10 = $uadd.f0;
    HEAP32[$rp >> 2] = $10;
    var $11 = $uadd.f1;
    if ($11) {
      var $__p_0 = $rp;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $__p_0;
    var $12 = $__p_0 + 4 | 0;
    var $14 = HEAP32[$12 >> 2] + 1 | 0;
    HEAP32[$12 >> 2] = $14;
    if (($14 | 0) == 0) {
      var $__p_0 = $12;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_sub_nc356($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_sub_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_sub_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function ___gmpn_sqrmod_bnm1_next_size($n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) > 15) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $n;
      __label__ = 10;
      break;
    }
   case 3:
    if (($n | 0) > 60) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_0 = $n + 1 & -2;
    __label__ = 10;
    break;
   case 5:
    if (($n | 0) > 120) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $_0 = $n + 3 & -4;
    __label__ = 10;
    break;
   case 7:
    var $14 = $n + 1 >> 1;
    if (($14 | 0) > 359) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_0 = $n + 7 & -8;
    __label__ = 10;
    break;
   case 9:
    var $20 = ___gmpn_fft_best_k($14, 1);
    var $21 = ___gmpn_fft_next_size($14, $20);
    var $_0 = $21 << 1;
    __label__ = 10;
    break;
   case 10:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_submul_1($rp, $up, $n, $vl) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $vl & 65535;
    var $2 = $vl >>> 16;
    var $_0 = $rp;
    var $_01 = $up;
    var $_02 = $n;
    var $cl_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $cl_0;
    var $_02;
    var $_01;
    var $_0;
    var $4 = $_01 + 4 | 0;
    var $5 = HEAPU32[$_01 >> 2];
    var $6 = $5 & 65535;
    var $7 = $5 >>> 16;
    var $8 = (i64Math.multiply($6, 0, $1, 0), i64Math.result[0]);
    var $9 = (i64Math.multiply($6, 0, $2, 0), i64Math.result[0]);
    var $10 = (i64Math.multiply($7, 0, $1, 0), i64Math.result[0]);
    var $11 = (i64Math.multiply($7, 0, $2, 0), i64Math.result[0]);
    var $13 = ($8 >>> 16) + $9 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($13, $10);
    var $14 = $uadd.f0;
    var $15 = $uadd.f1;
    var $__x3_0 = $15 ? $11 + 65536 | 0 : $11;
    var $17 = $14 >>> 16;
    var $20 = $14 << 16 | $8 & 65535;
    var $uadd3 = _llvm_uadd_with_overflow_i32($20, $cl_0);
    var $21 = $uadd3.f0;
    var $22 = $uadd3.f1;
    var $24 = HEAPU32[$_0 >> 2];
    var $25 = $24 - $21 | 0;
    var $30 = $__x3_0 + $17 + ($22 & 1) + ($25 >>> 0 > $24 >>> 0 & 1) | 0;
    HEAP32[$_0 >> 2] = $25;
    var $32 = $_02 - 1 | 0;
    if (($32 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_0 + 4 | 0;
      var $_01 = $4;
      var $_02 = $32;
      var $cl_0 = $30;
      __label__ = 3;
      break;
    }
   case 4:
    return $30;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom22_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $an >> 1;
    var $2 = $an - $1 | 0;
    var $3 = $bn - $2 | 0;
    var $4 = $pp + ($2 << 2) | 0;
    var $6 = $ap + ($1 << 2) | 0;
    if (($1 | 0) == ($2 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $8 = ___gmpn_cmp($ap, $6, $1);
    if (($8 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $11 = ___gmpn_sub_n($pp, $6, $ap, $1);
    var $vm1_neg_0 = 1;
    __label__ = 10;
    break;
   case 5:
    var $13 = ___gmpn_sub_n($pp, $ap, $6, $1);
    var $vm1_neg_0 = 0;
    __label__ = 10;
    break;
   case 6:
    var $15 = $2 - $1 | 0;
    var $16 = _mpn_zero_p369($6, $15);
    var $_pre5 = $ap + ($2 << 2) | 0;
    if (($16 | 0) == 0) {
      var $_pre_phi6 = $_pre5;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $19 = ___gmpn_cmp($ap, $_pre5, $1);
    if (($19 | 0) < 0) {
      __label__ = 9;
      break;
    } else {
      var $_pre_phi6 = $_pre5;
      __label__ = 8;
      break;
    }
   case 8:
    var $_pre_phi6;
    var $21 = ___gmpn_sub($pp, $ap, $2, $_pre_phi6, $1);
    var $vm1_neg_0 = 0;
    __label__ = 10;
    break;
   case 9:
    var $22 = ___gmpn_sub_n($pp, $_pre5, $ap, $1);
    var $scevgep9 = $pp + ($1 << 2) | 0;
    var $24 = $an << 2 & 4;
    _memset($scevgep9, 0, $24, 4);
    var $vm1_neg_0 = 1;
    __label__ = 10;
    break;
   case 10:
    var $vm1_neg_0;
    if (($3 | 0) == ($2 | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 11:
    var $28 = $bp + ($2 << 2) | 0;
    var $29 = ___gmpn_cmp($bp, $28, $2);
    if (($29 | 0) < 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $32 = ___gmpn_sub_n($4, $28, $bp, $2);
    var $vm1_neg_1 = $vm1_neg_0 ^ 1;
    __label__ = 18;
    break;
   case 13:
    var $35 = ___gmpn_sub_n($4, $bp, $28, $2);
    var $vm1_neg_1 = $vm1_neg_0;
    __label__ = 18;
    break;
   case 14:
    var $37 = $bp + ($3 << 2) | 0;
    var $38 = $2 - $3 | 0;
    var $39 = _mpn_zero_p369($37, $38);
    var $_pre3 = $bp + ($2 << 2) | 0;
    if (($39 | 0) == 0) {
      var $_pre_phi4 = $_pre3;
      __label__ = 17;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $42 = ___gmpn_cmp($bp, $_pre3, $3);
    if (($42 | 0) < 0) {
      __label__ = 16;
      break;
    } else {
      var $_pre_phi4 = $_pre3;
      __label__ = 17;
      break;
    }
   case 16:
    var $45 = ___gmpn_sub_n($4, $_pre3, $bp, $3);
    var $scevgep1011 = $pp + ($bn << 2) | 0;
    var $50 = ($an << 1) - $bn - ($an & 1073741822) << 2;
    _memset($scevgep1011, 0, $50, 4);
    var $vm1_neg_1 = $vm1_neg_0 ^ 1;
    __label__ = 18;
    break;
   case 17:
    var $_pre_phi4;
    var $52 = ___gmpn_sub($4, $bp, $2, $_pre_phi4, $3);
    var $vm1_neg_1 = $vm1_neg_0;
    __label__ = 18;
    break;
   case 18:
    var $vm1_neg_1;
    var $54 = ($2 | 0) > 29;
    if ($54) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    ___gmpn_mul_basecase($scratch, $pp, $2, $4, $2);
    __label__ = 21;
    break;
   case 20:
    var $58 = $scratch + ($2 << 1 << 2) | 0;
    ___gmpn_toom22_mul($scratch, $pp, $2, $4, $2, $58);
    __label__ = 21;
    break;
   case 21:
    if (($1 | 0) > ($3 | 0)) {
      __label__ = 22;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 22:
    if (($3 | 0) > 29) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $65 = $pp + ($2 << 1 << 2) | 0;
    var $66 = $ap + ($2 << 2) | 0;
    var $67 = $bp + ($2 << 2) | 0;
    ___gmpn_mul_basecase($65, $66, $1, $67, $3);
    __label__ = 30;
    break;
   case 24:
    var $70 = $an << 1 & -4;
    var $71 = (i64Math.multiply($3, 0, 5, 0), i64Math.result[0]);
    var $73 = $2 << 1;
    var $74 = $pp + ($73 << 2) | 0;
    var $75 = $ap + ($2 << 2) | 0;
    var $76 = $bp + ($2 << 2) | 0;
    var $77 = $scratch + ($73 << 2) | 0;
    if (($70 | 0) < ($71 | 0)) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    ___gmpn_toom22_mul($74, $75, $1, $76, $3, $77);
    __label__ = 30;
    break;
   case 26:
    ___gmpn_toom32_mul($74, $75, $1, $76, $3, $77);
    __label__ = 30;
    break;
   case 27:
    var $82 = $2 << 1;
    var $83 = $pp + ($82 << 2) | 0;
    var $84 = $ap + ($2 << 2) | 0;
    var $85 = $bp + ($2 << 2) | 0;
    if (($1 | 0) > 29) {
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    ___gmpn_mul_basecase($83, $84, $1, $85, $1);
    __label__ = 30;
    break;
   case 29:
    var $88 = $scratch + ($82 << 2) | 0;
    ___gmpn_toom22_mul($83, $84, $1, $85, $1, $88);
    __label__ = 30;
    break;
   case 30:
    if ($54) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    ___gmpn_mul_basecase($pp, $ap, $2, $bp, $2);
    var $_pre_phi = $2 << 1;
    __label__ = 33;
    break;
   case 32:
    var $92 = $2 << 1;
    var $93 = $scratch + ($92 << 2) | 0;
    ___gmpn_toom22_mul($pp, $ap, $2, $bp, $2, $93);
    var $_pre_phi = $92;
    __label__ = 33;
    break;
   case 33:
    var $_pre_phi;
    var $95 = $pp + ($_pre_phi << 2) | 0;
    var $96 = ___gmpn_add_n($95, $4, $95, $2);
    var $97 = ___gmpn_add_n($4, $95, $pp, $2);
    var $98 = $97 + $96 | 0;
    var $99 = $pp + ($_pre_phi + $2 << 2) | 0;
    var $101 = $1 - $2 + $3 | 0;
    var $102 = ___gmpn_add($95, $95, $2, $99, $101);
    var $103 = $102 + $96 | 0;
    if (($vm1_neg_1 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $106 = ___gmpn_add_n($4, $4, $scratch, $_pre_phi);
    var $cy_0 = $106 + $103 | 0;
    __label__ = 36;
    break;
   case 35:
    var $109 = ___gmpn_sub_n($4, $4, $scratch, $_pre_phi);
    var $cy_0 = $103 - $109 | 0;
    __label__ = 36;
    break;
   case 36:
    var $cy_0;
    var $112 = HEAP32[$95 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($112, $98);
    var $113 = $uadd.f0;
    HEAP32[$95 >> 2] = $113;
    var $114 = $uadd.f1;
    if ($114) {
      var $__p_0 = $95;
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    var $__p_0;
    var $115 = $__p_0 + 4 | 0;
    var $117 = HEAP32[$115 >> 2] + 1 | 0;
    HEAP32[$115 >> 2] = $117;
    if (($117 | 0) == 0) {
      var $__p_0 = $115;
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $119 = $cy_0 >>> 0 < 3;
    var $120 = (i64Math.multiply($2, 0, 3, 0), i64Math.result[0]);
    var $121 = $pp + ($120 << 2) | 0;
    if ($119) {
      __label__ = 39;
      break;
    } else {
      var $__p6_0 = $121;
      __label__ = 41;
      break;
    }
   case 39:
    var $123 = HEAP32[$121 >> 2];
    var $uadd1 = _llvm_uadd_with_overflow_i32($123, $cy_0);
    var $124 = $uadd1.f0;
    HEAP32[$121 >> 2] = $124;
    var $125 = $uadd1.f1;
    if ($125) {
      var $__p4_0 = $121;
      __label__ = 40;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 40:
    var $__p4_0;
    var $126 = $__p4_0 + 4 | 0;
    var $128 = HEAP32[$126 >> 2] + 1 | 0;
    HEAP32[$126 >> 2] = $128;
    if (($128 | 0) == 0) {
      var $__p4_0 = $126;
      __label__ = 40;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 41:
    var $__p6_0;
    var $131 = HEAP32[$__p6_0 >> 2];
    var $132 = $131 - 1 | 0;
    HEAP32[$__p6_0 >> 2] = $132;
    if (($131 | 0) == 0) {
      var $__p6_0 = $__p6_0 + 4 | 0;
      __label__ = 41;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom22_mul["X"] = 1;

function ___gmpn_toom2_sqr($pp, $ap, $an, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $an >> 1;
    var $2 = $an - $1 | 0;
    var $4 = $ap + ($1 << 2) | 0;
    if (($1 | 0) == ($2 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $6 = ___gmpn_cmp($ap, $4, $1);
    if (($6 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $9 = ___gmpn_sub_n($pp, $4, $ap, $1);
    __label__ = 10;
    break;
   case 5:
    var $11 = ___gmpn_sub_n($pp, $ap, $4, $1);
    __label__ = 10;
    break;
   case 6:
    var $13 = $2 - $1 | 0;
    var $14 = _mpn_zero_p372($4, $13);
    var $_pre2 = $ap + ($2 << 2) | 0;
    if (($14 | 0) == 0) {
      var $_pre_phi3 = $_pre2;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $17 = ___gmpn_cmp($ap, $_pre2, $1);
    if (($17 | 0) < 0) {
      __label__ = 9;
      break;
    } else {
      var $_pre_phi3 = $_pre2;
      __label__ = 8;
      break;
    }
   case 8:
    var $_pre_phi3;
    var $19 = ___gmpn_sub($pp, $ap, $2, $_pre_phi3, $1);
    __label__ = 10;
    break;
   case 9:
    var $20 = ___gmpn_sub_n($pp, $_pre2, $ap, $1);
    var $scevgep7 = $pp + ($1 << 2) | 0;
    var $22 = $an << 2 & 4;
    _memset($scevgep7, 0, $22, 4);
    __label__ = 10;
    break;
   case 10:
    var $24 = ($2 | 0) > 49;
    if ($24) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmpn_sqr_basecase($scratch, $pp, $2);
    var $_pre_phi = $2 << 1;
    __label__ = 13;
    break;
   case 12:
    var $27 = $2 << 1;
    var $28 = $scratch + ($27 << 2) | 0;
    ___gmpn_toom2_sqr($scratch, $pp, $2, $28);
    var $_pre_phi = $27;
    __label__ = 13;
    break;
   case 13:
    var $_pre_phi;
    var $31 = $pp + ($_pre_phi << 2) | 0;
    var $32 = $ap + ($2 << 2) | 0;
    if (($1 | 0) > 49) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    ___gmpn_sqr_basecase($31, $32, $1);
    __label__ = 16;
    break;
   case 15:
    var $35 = $scratch + ($_pre_phi << 2) | 0;
    ___gmpn_toom2_sqr($31, $32, $1, $35);
    __label__ = 16;
    break;
   case 16:
    if ($24) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    ___gmpn_sqr_basecase($pp, $ap, $2);
    __label__ = 19;
    break;
   case 18:
    var $39 = $scratch + ($_pre_phi << 2) | 0;
    ___gmpn_toom2_sqr($pp, $ap, $2, $39);
    __label__ = 19;
    break;
   case 19:
    var $41 = $pp + ($2 << 2) | 0;
    var $42 = ___gmpn_add_n($31, $41, $31, $2);
    var $43 = ___gmpn_add_n($41, $31, $pp, $2);
    var $44 = $43 + $42 | 0;
    var $45 = $pp + ($_pre_phi + $2 << 2) | 0;
    var $47 = ($an & -2) - $2 | 0;
    var $48 = ___gmpn_add($31, $31, $2, $45, $47);
    var $49 = ___gmpn_sub_n($41, $41, $scratch, $_pre_phi);
    var $51 = $48 + $42 - $49 | 0;
    var $52 = HEAP32[$31 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($52, $44);
    var $53 = $uadd.f0;
    HEAP32[$31 >> 2] = $53;
    var $54 = $uadd.f1;
    if ($54) {
      var $__p_0 = $31;
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $__p_0;
    var $55 = $__p_0 + 4 | 0;
    var $57 = HEAP32[$55 >> 2] + 1 | 0;
    HEAP32[$55 >> 2] = $57;
    if (($57 | 0) == 0) {
      var $__p_0 = $55;
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $59 = $51 >>> 0 < 3;
    var $60 = (i64Math.multiply($2, 0, 3, 0), i64Math.result[0]);
    var $61 = $pp + ($60 << 2) | 0;
    if ($59) {
      __label__ = 22;
      break;
    } else {
      var $__p4_0 = $61;
      __label__ = 24;
      break;
    }
   case 22:
    var $63 = HEAP32[$61 >> 2];
    var $uadd1 = _llvm_uadd_with_overflow_i32($63, $51);
    var $64 = $uadd1.f0;
    HEAP32[$61 >> 2] = $64;
    var $65 = $uadd1.f1;
    if ($65) {
      var $__p2_0 = $61;
      __label__ = 23;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 23:
    var $__p2_0;
    var $66 = $__p2_0 + 4 | 0;
    var $68 = HEAP32[$66 >> 2] + 1 | 0;
    HEAP32[$66 >> 2] = $68;
    if (($68 | 0) == 0) {
      var $__p2_0 = $66;
      __label__ = 23;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $__p4_0;
    var $71 = HEAP32[$__p4_0 >> 2];
    var $72 = $71 - 1 | 0;
    HEAP32[$__p4_0 >> 2] = $72;
    if (($71 | 0) == 0) {
      var $__p4_0 = $__p4_0 + 4 | 0;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom2_sqr["X"] = 1;

function _mpn_zero_p375($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpn_zero_p384($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom32_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $an << 1;
    var $2 = (i64Math.multiply($bn, 0, 3, 0), i64Math.result[0]);
    if (($1 | 0) < ($2 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = $an - 1 | 0;
    var $6 = Math.floor(($5 >>> 0) / 3);
    var $11 = $6;
    __label__ = 5;
    break;
   case 4:
    var $11 = $bn - 1 >> 1;
    __label__ = 5;
    break;
   case 5:
    var $11;
    var $12 = $11 + 1 | 0;
    var $13 = $12 << 1;
    var $14 = $an - $13 | 0;
    var $15 = $bn - $12 | 0;
    var $16 = $ap + ($13 << 2) | 0;
    var $17 = ___gmpn_add($pp, $ap, $12, $16, $14);
    var $19 = $ap + ($12 << 2) | 0;
    if (($17 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $_pre_phi = $19;
      __label__ = 8;
      break;
    }
   case 6:
    var $21 = ___gmpn_cmp($pp, $19, $12);
    if (($21 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      var $_pre_phi = $19;
      __label__ = 8;
      break;
    }
   case 7:
    var $24 = $pp + ($13 << 2) | 0;
    var $25 = ___gmpn_sub_n($24, $19, $pp, $12);
    var $vm1_neg_0 = 1;
    var $hi_0 = 0;
    __label__ = 9;
    break;
   case 8:
    var $_pre_phi;
    var $26 = $pp + ($13 << 2) | 0;
    var $27 = ___gmpn_sub_n($26, $pp, $_pre_phi, $12);
    var $vm1_neg_0 = 0;
    var $hi_0 = $17 - $27 | 0;
    __label__ = 9;
    break;
   case 9:
    var $hi_0;
    var $vm1_neg_0;
    var $30 = $ap + ($12 << 2) | 0;
    var $31 = ___gmpn_add_n($pp, $pp, $30, $12);
    var $32 = $31 + $17 | 0;
    var $34 = $pp + ($12 << 2) | 0;
    var $35 = $bp + ($12 << 2) | 0;
    if (($15 | 0) == ($12 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 10:
    var $37 = ___gmpn_add_n($34, $bp, $35, $12);
    var $38 = ___gmpn_cmp($bp, $35, $12);
    var $39 = ($38 | 0) < 0;
    var $40 = (i64Math.multiply($12, 0, 3, 0), i64Math.result[0]);
    var $41 = $pp + ($40 << 2) | 0;
    if ($39) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $43 = ___gmpn_sub_n($41, $35, $bp, $12);
    var $bp1_hi_0 = $37;
    var $vm1_neg_1 = $vm1_neg_0 ^ 1;
    __label__ = 17;
    break;
   case 12:
    var $46 = ___gmpn_sub_n($41, $bp, $35, $12);
    var $bp1_hi_0 = $37;
    var $vm1_neg_1 = $vm1_neg_0;
    __label__ = 17;
    break;
   case 13:
    var $48 = ___gmpn_add($34, $bp, $12, $35, $15);
    var $49 = $bp + ($15 << 2) | 0;
    var $50 = $12 - $15 | 0;
    var $51 = _mpn_zero_p375($49, $50);
    if (($51 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $54 = ___gmpn_cmp($bp, $35, $15);
    if (($54 | 0) < 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $57 = (i64Math.multiply($12, 0, 3, 0), i64Math.result[0]);
    var $58 = $pp + ($57 << 2) | 0;
    var $59 = ___gmpn_sub_n($58, $35, $bp, $15);
    var $60 = $11 << 1;
    var $scevgep12 = $pp + ($60 + $bn + 2 << 2) | 0;
    var $65 = $60 + 2 - $bn << 2;
    _memset($scevgep12, 0, $65, 4);
    var $bp1_hi_0 = $48;
    var $vm1_neg_1 = $vm1_neg_0 ^ 1;
    __label__ = 17;
    break;
   case 16:
    var $68 = (i64Math.multiply($12, 0, 3, 0), i64Math.result[0]);
    var $69 = $pp + ($68 << 2) | 0;
    var $70 = ___gmpn_sub($69, $bp, $12, $35, $15);
    var $bp1_hi_0 = $48;
    var $vm1_neg_1 = $vm1_neg_0;
    __label__ = 17;
    break;
   case 17:
    var $vm1_neg_1;
    var $bp1_hi_0;
    ___gmpn_mul_n($scratch, $pp, $34, $12);
    if (($32 | 0) == 1) {
      __label__ = 18;
      break;
    } else if (($32 | 0) == 2) {
      __label__ = 19;
      break;
    } else {
      var $cy_0 = 0;
      __label__ = 20;
      break;
    }
   case 18:
    var $73 = $scratch + ($12 << 2) | 0;
    var $74 = ___gmpn_add_n($73, $73, $34, $12);
    var $cy_0 = $74 + $bp1_hi_0 | 0;
    __label__ = 20;
    break;
   case 19:
    var $77 = $bp1_hi_0 << 1;
    var $78 = $scratch + ($12 << 2) | 0;
    var $79 = ___gmpn_addmul_1($78, $34, $12, 2);
    var $cy_0 = $79 + $77 | 0;
    __label__ = 20;
    break;
   case 20:
    var $cy_0;
    if (($bp1_hi_0 | 0) == 0) {
      var $cy_1 = $cy_0;
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $84 = $scratch + ($12 << 2) | 0;
    var $85 = ___gmpn_add_n($84, $84, $pp, $12);
    var $cy_1 = $85 + $cy_0 | 0;
    __label__ = 22;
    break;
   case 22:
    var $cy_1;
    var $88 = $scratch + ($13 << 2) | 0;
    HEAP32[$88 >> 2] = $cy_1;
    var $89 = $pp + ($13 << 2) | 0;
    var $90 = (i64Math.multiply($12, 0, 3, 0), i64Math.result[0]);
    var $91 = $pp + ($90 << 2) | 0;
    ___gmpn_mul_n($pp, $89, $91, $12);
    if (($hi_0 | 0) == 0) {
      var $hi_1 = 0;
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $94 = ___gmpn_add_n($34, $34, $91, $12);
    var $hi_1 = $94;
    __label__ = 24;
    break;
   case 24:
    var $hi_1;
    HEAP32[$89 >> 2] = $hi_1;
    var $96 = ($vm1_neg_1 | 0) != 0;
    var $97 = $13 | 1;
    if ($96) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $99 = ___gmpn_sub_n($scratch, $scratch, $pp, $97);
    var $100 = ___gmpn_rshift($scratch, $scratch, $97, 1);
    __label__ = 27;
    break;
   case 26:
    var $102 = ___gmpn_add_n($scratch, $scratch, $pp, $97);
    var $103 = ___gmpn_rshift($scratch, $scratch, $97, 1);
    __label__ = 27;
    break;
   case 27:
    var $105 = HEAP32[$89 >> 2];
    var $106 = $scratch + ($12 << 2) | 0;
    var $107 = ___gmpn_add_n($89, $scratch, $106, $12);
    var $111 = HEAP32[$106 >> 2] + $107 + HEAP32[$88 >> 2] | 0;
    HEAP32[$106 >> 2] = $111;
    if ($111 >>> 0 < (HEAP32[$88 >> 2] + $107 | 0) >>> 0) {
      var $__p_0 = $106;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $__p_0;
    var $115 = $__p_0 + 4 | 0;
    var $117 = HEAP32[$115 >> 2] + 1 | 0;
    HEAP32[$115 >> 2] = $117;
    if (($117 | 0) == 0) {
      var $__p_0 = $115;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    if ($96) {
      __label__ = 30;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 30:
    var $120 = ___gmpn_add_n($scratch, $scratch, $pp, $12);
    var $121 = _mpn_add_nc376($89, $89, $34, $12, $120);
    var $122 = $121 + $105 | 0;
    var $123 = HEAP32[$106 >> 2];
    var $uadd1 = _llvm_uadd_with_overflow_i32($123, $122);
    var $124 = $uadd1.f0;
    HEAP32[$106 >> 2] = $124;
    var $125 = $uadd1.f1;
    if ($125) {
      var $__p2_0 = $106;
      __label__ = 31;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 31:
    var $__p2_0;
    var $126 = $__p2_0 + 4 | 0;
    var $128 = HEAP32[$126 >> 2] + 1 | 0;
    HEAP32[$126 >> 2] = $128;
    if (($128 | 0) == 0) {
      var $__p2_0 = $126;
      __label__ = 31;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 32:
    var $131 = ___gmpn_sub_n($scratch, $scratch, $pp, $12);
    var $132 = _mpn_sub_nc377($89, $89, $34, $12, $131);
    var $133 = $132 + $105 | 0;
    var $134 = HEAPU32[$106 >> 2];
    var $135 = $134 - $133 | 0;
    HEAP32[$106 >> 2] = $135;
    if ($134 >>> 0 < $133 >>> 0) {
      var $__p4_0 = $106;
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $__p4_0;
    var $137 = $__p4_0 + 4 | 0;
    var $138 = HEAP32[$137 >> 2];
    var $139 = $138 - 1 | 0;
    HEAP32[$137 >> 2] = $139;
    if (($138 | 0) == 0) {
      var $__p4_0 = $137;
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    ___gmpn_mul_n($pp, $ap, $bp, $12);
    if (($14 | 0) > ($15 | 0)) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $143 = ___gmpn_mul($91, $16, $14, $35, $15);
    __label__ = 37;
    break;
   case 36:
    var $145 = ___gmpn_mul($91, $35, $15, $16, $14);
    __label__ = 37;
    break;
   case 37:
    var $147 = ___gmpn_sub_n($34, $34, $91, $12);
    var $148 = HEAP32[$88 >> 2];
    var $149 = _mpn_sub_nc377($89, $89, $pp, $12, $147);
    var $150 = _mpn_sub_nc377($91, $106, $34, $12, $149);
    var $151 = ___gmpn_add($34, $34, $90, $scratch, $12);
    var $152 = $14 + $15 | 0;
    if (($152 | 0) > ($12 | 0)) {
      __label__ = 38;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 38:
    var $156 = $pp + ($12 << 2 << 2) | 0;
    var $157 = $152 - $12 | 0;
    var $158 = ___gmpn_sub($89, $89, $13, $156, $157);
    var $162 = $148 + $147 - $150 + $151 - $158 | 0;
    var $164 = HEAPU32[$156 >> 2];
    if (($162 | 0) < 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 39:
    var $166 = -$162 | 0;
    var $167 = $164 + $162 | 0;
    HEAP32[$156 >> 2] = $167;
    if ($164 >>> 0 < $166 >>> 0) {
      var $__p6_0 = $156;
      __label__ = 40;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 40:
    var $__p6_0;
    var $169 = $__p6_0 + 4 | 0;
    var $170 = HEAP32[$169 >> 2];
    var $171 = $170 - 1 | 0;
    HEAP32[$169 >> 2] = $171;
    if (($170 | 0) == 0) {
      var $__p6_0 = $169;
      __label__ = 40;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 41:
    var $uadd = _llvm_uadd_with_overflow_i32($164, $162);
    var $174 = $uadd.f0;
    HEAP32[$156 >> 2] = $174;
    var $175 = $uadd.f1;
    if ($175) {
      var $__p8_0 = $156;
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $__p8_0;
    var $176 = $__p8_0 + 4 | 0;
    var $178 = HEAP32[$176 >> 2] + 1 | 0;
    HEAP32[$176 >> 2] = $178;
    if (($178 | 0) == 0) {
      var $__p8_0 = $176;
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom32_mul["X"] = 1;

function _mpn_add_nc376($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_add_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_add_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function _mpn_sub_nc377($rp, $up, $vp, $n, $ci) {
  var $1 = ___gmpn_sub_n($rp, $up, $vp, $n);
  var $2 = ___gmpn_sub_1($rp, $rp, $n, $ci);
  return $2 + $1 | 0;
}

function ___gmpn_toom33_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $an + 2 | 0;
    var $2 = Math.floor(($1 >>> 0) / 3);
    var $3 = $2 << 1;
    var $4 = $an - $3 | 0;
    var $5 = $bn - $3 | 0;
    var $6 = $2 << 2;
    var $_sum = $6 + 4 | 0;
    var $7 = $scratch + ($_sum << 2) | 0;
    var $_sum1 = $3 + 2 | 0;
    var $8 = $scratch + ($_sum1 << 2) | 0;
    var $9 = $pp + ($2 << 2) | 0;
    var $_sum2 = $2 + 1 | 0;
    var $10 = $pp + ($_sum2 << 2) | 0;
    var $11 = (i64Math.multiply($2, 0, 3, 0), i64Math.result[0]);
    var $_sum3 = $11 + 3 | 0;
    var $12 = $scratch + ($_sum3 << 2) | 0;
    var $13 = $pp + ($3 << 2) | 0;
    var $14 = $pp + ($_sum1 << 2) | 0;
    var $15 = $ap + ($3 << 2) | 0;
    var $16 = ___gmpn_add($scratch, $ap, $2, $15, $4);
    var $17 = $ap + ($2 << 2) | 0;
    var $18 = ___gmpn_add_n($7, $scratch, $17, $2);
    var $20 = $scratch + ($_sum + $2 << 2) | 0;
    HEAP32[$20 >> 2] = $18 + $16 | 0;
    if (($16 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $23 = ___gmpn_cmp($scratch, $17, $2);
    if (($23 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $26 = ___gmpn_sub_n($8, $17, $scratch, $2);
    HEAP32[$scratch + ($_sum1 + $2 << 2) >> 2] = 0;
    var $vm1_neg_0 = 1;
    __label__ = 6;
    break;
   case 5:
    var $29 = ___gmpn_sub_n($8, $scratch, $17, $2);
    HEAP32[$scratch + ($_sum1 + $2 << 2) >> 2] = $16 - $29 | 0;
    var $vm1_neg_0 = 0;
    __label__ = 6;
    break;
   case 6:
    var $vm1_neg_0;
    var $33 = ___gmpn_add_n($10, $15, $7, $4);
    if (($4 | 0) == ($2 | 0)) {
      var $cy_0 = $33;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $36 = $pp + ($4 + $_sum2 << 2) | 0;
    var $37 = $scratch + ($_sum + $4 << 2) | 0;
    var $38 = $2 - $4 | 0;
    var $39 = ___gmpn_add_1($36, $37, $38, $33);
    var $cy_0 = $39;
    __label__ = 8;
    break;
   case 8:
    var $cy_0;
    var $43 = HEAP32[$20 >> 2] + $cy_0 << 1;
    var $44 = ___gmpn_lshift($10, $10, $2, 1);
    var $45 = ___gmpn_sub_n($10, $10, $ap, $2);
    var $47 = $44 - $45 + $43 | 0;
    HEAP32[$pp + ($_sum2 + $2 << 2) >> 2] = $47;
    var $49 = $bp + ($3 << 2) | 0;
    var $50 = ___gmpn_add($scratch, $bp, $2, $49, $5);
    var $51 = $bp + ($2 << 2) | 0;
    var $52 = ___gmpn_add_n($pp, $scratch, $51, $2);
    HEAP32[$9 >> 2] = $52 + $50 | 0;
    if (($50 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 9:
    var $56 = ___gmpn_cmp($scratch, $51, $2);
    if (($56 | 0) < 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $59 = ___gmpn_sub_n($12, $51, $scratch, $2);
    HEAP32[$scratch + ($_sum3 + $2 << 2) >> 2] = 0;
    var $vm1_neg_1 = $vm1_neg_0 ^ 1;
    __label__ = 12;
    break;
   case 11:
    var $63 = ___gmpn_sub_n($12, $scratch, $51, $2);
    HEAP32[$scratch + ($_sum3 + $2 << 2) >> 2] = $50 - $63 | 0;
    var $vm1_neg_1 = $vm1_neg_0;
    __label__ = 12;
    break;
   case 12:
    var $vm1_neg_1;
    var $67 = ___gmpn_add_n($14, $pp, $49, $5);
    if (($5 | 0) == ($2 | 0)) {
      var $cy_1 = $67;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $70 = $pp + ($bn + 2 << 2) | 0;
    var $71 = $pp + ($5 << 2) | 0;
    var $72 = $2 - $5 | 0;
    var $73 = ___gmpn_add_1($70, $71, $72, $67);
    var $cy_1 = $73;
    __label__ = 14;
    break;
   case 14:
    var $cy_1;
    var $77 = HEAP32[$9 >> 2] + $cy_1 << 1;
    var $78 = ___gmpn_lshift($14, $14, $2, 1);
    var $79 = ___gmpn_sub_n($14, $14, $bp, $2);
    var $81 = $78 - $79 + $77 | 0;
    HEAP32[$pp + ($_sum1 + $2 << 2) >> 2] = $81;
    var $83 = ($_sum2 | 0) > 99;
    var $84 = (i64Math.multiply($2, 0, 5, 0), i64Math.result[0]);
    var $85 = $scratch + ($84 + 5 << 2) | 0;
    if ($83) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    ___gmpn_toom22_mul($scratch, $8, $_sum2, $12, $_sum2, $85);
    var $87 = $scratch + (($3 | 1) << 2) | 0;
    ___gmpn_toom22_mul($87, $10, $_sum2, $14, $_sum2, $85);
    var $91 = $87;
    __label__ = 17;
    break;
   case 16:
    ___gmpn_toom33_mul($scratch, $8, $_sum2, $12, $_sum2, $85);
    var $89 = $scratch + (($3 | 1) << 2) | 0;
    ___gmpn_toom33_mul($89, $10, $_sum2, $14, $_sum2, $85);
    var $91 = $89;
    __label__ = 17;
    break;
   case 17:
    var $91;
    if (($4 | 0) > ($5 | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $94 = $pp + ($6 << 2) | 0;
    var $95 = ___gmpn_mul($94, $15, $4, $49, $5);
    __label__ = 22;
    break;
   case 19:
    var $98 = $pp + ($6 << 2) | 0;
    if (($4 | 0) > 99) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    ___gmpn_toom22_mul($98, $15, $4, $49, $4, $85);
    __label__ = 22;
    break;
   case 21:
    ___gmpn_toom33_mul($98, $15, $4, $49, $4, $85);
    __label__ = 22;
    break;
   case 22:
    var $103 = HEAP32[$pp + ($6 << 2) >> 2];
    var $104 = $pp + (($6 | 1) << 2) | 0;
    var $105 = HEAP32[$104 >> 2];
    if ($83) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    ___gmpn_toom22_mul($13, $7, $_sum2, $pp, $_sum2, $85);
    __label__ = 25;
    break;
   case 24:
    ___gmpn_toom33_mul($13, $7, $_sum2, $pp, $_sum2, $85);
    __label__ = 25;
    break;
   case 25:
    HEAP32[$104 >> 2] = $105;
    if ($1 >>> 0 > 299) {
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    ___gmpn_toom22_mul($pp, $ap, $2, $bp, $2, $85);
    __label__ = 28;
    break;
   case 27:
    ___gmpn_toom33_mul($pp, $ap, $2, $bp, $2, $85);
    __label__ = 28;
    break;
   case 28:
    var $113 = $4 + $5 | 0;
    ___gmpn_toom_interpolate_5pts($pp, $91, $scratch, $2, $113, $vm1_neg_1, $103);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom33_mul["X"] = 1;

function ___gmpn_toom3_sqr($pp, $ap, $an, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $an + 2 | 0;
    var $2 = Math.floor(($1 >>> 0) / 3);
    var $3 = $2 << 1;
    var $4 = $an - $3 | 0;
    var $5 = $2 << 2;
    var $_sum = $5 + 4 | 0;
    var $6 = $scratch + ($_sum << 2) | 0;
    var $_sum1 = $3 + 2 | 0;
    var $7 = $scratch + ($_sum1 << 2) | 0;
    var $_sum2 = $2 + 1 | 0;
    var $8 = $pp + ($_sum2 << 2) | 0;
    var $9 = $ap + ($3 << 2) | 0;
    var $10 = ___gmpn_add($scratch, $ap, $2, $9, $4);
    var $11 = $ap + ($2 << 2) | 0;
    var $12 = ___gmpn_add_n($6, $scratch, $11, $2);
    var $14 = $scratch + ($_sum + $2 << 2) | 0;
    HEAP32[$14 >> 2] = $12 + $10 | 0;
    if (($10 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $17 = ___gmpn_cmp($scratch, $11, $2);
    if (($17 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $20 = ___gmpn_sub_n($7, $11, $scratch, $2);
    HEAP32[$scratch + ($_sum1 + $2 << 2) >> 2] = 0;
    __label__ = 6;
    break;
   case 5:
    var $23 = ___gmpn_sub_n($7, $scratch, $11, $2);
    HEAP32[$scratch + ($_sum1 + $2 << 2) >> 2] = $10 - $23 | 0;
    __label__ = 6;
    break;
   case 6:
    var $27 = ___gmpn_add_n($8, $9, $6, $4);
    if (($4 | 0) == ($2 | 0)) {
      var $cy_0 = $27;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $30 = $pp + ($4 + $_sum2 << 2) | 0;
    var $31 = $scratch + ($_sum + $4 << 2) | 0;
    var $32 = $2 - $4 | 0;
    var $33 = ___gmpn_add_1($30, $31, $32, $27);
    var $cy_0 = $33;
    __label__ = 8;
    break;
   case 8:
    var $cy_0;
    var $37 = HEAP32[$14 >> 2] + $cy_0 << 1;
    var $38 = ___gmpn_lshift($8, $8, $2, 1);
    var $39 = ___gmpn_sub_n($8, $8, $ap, $2);
    var $41 = $38 - $39 + $37 | 0;
    HEAP32[$pp + ($_sum2 + $2 << 2) >> 2] = $41;
    var $43 = ($_sum2 | 0) > 49;
    if ($43) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $45 = ($_sum2 | 0) > 119;
    var $46 = (i64Math.multiply($2, 0, 5, 0), i64Math.result[0]);
    var $47 = $scratch + ($46 + 5 << 2) | 0;
    if ($45) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    ___gmpn_sqr_basecase($scratch, $7, $_sum2);
    var $49 = $scratch + (($3 | 1) << 2) | 0;
    ___gmpn_sqr_basecase($49, $8, $_sum2);
    __label__ = 13;
    break;
   case 11:
    ___gmpn_toom2_sqr($scratch, $7, $_sum2, $47);
    var $51 = $scratch + (($3 | 1) << 2) | 0;
    ___gmpn_toom2_sqr($51, $8, $_sum2, $47);
    __label__ = 13;
    break;
   case 12:
    ___gmpn_toom3_sqr($scratch, $7, $_sum2, $47);
    var $53 = $scratch + (($3 | 1) << 2) | 0;
    ___gmpn_toom3_sqr($53, $8, $_sum2, $47);
    __label__ = 13;
    break;
   case 13:
    if (($4 | 0) > 49) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $57 = $pp + ($5 << 2) | 0;
    ___gmpn_sqr_basecase($57, $9, $4);
    __label__ = 18;
    break;
   case 15:
    var $59 = ($4 | 0) > 119;
    var $60 = $pp + ($5 << 2) | 0;
    var $61 = (i64Math.multiply($2, 0, 5, 0), i64Math.result[0]);
    var $62 = $scratch + ($61 + 5 << 2) | 0;
    if ($59) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    ___gmpn_toom2_sqr($60, $9, $4, $62);
    __label__ = 18;
    break;
   case 17:
    ___gmpn_toom3_sqr($60, $9, $4, $62);
    __label__ = 18;
    break;
   case 18:
    var $67 = HEAP32[$pp + ($5 << 2) >> 2];
    var $68 = $pp + (($5 | 1) << 2) | 0;
    var $69 = HEAP32[$68 >> 2];
    if ($43) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $71 = $pp + ($3 << 2) | 0;
    ___gmpn_sqr_basecase($71, $6, $_sum2);
    __label__ = 23;
    break;
   case 20:
    var $73 = ($_sum2 | 0) > 119;
    var $74 = $pp + ($3 << 2) | 0;
    var $75 = (i64Math.multiply($2, 0, 5, 0), i64Math.result[0]);
    var $76 = $scratch + ($75 + 5 << 2) | 0;
    if ($73) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    ___gmpn_toom2_sqr($74, $6, $_sum2, $76);
    __label__ = 23;
    break;
   case 22:
    ___gmpn_toom3_sqr($74, $6, $_sum2, $76);
    __label__ = 23;
    break;
   case 23:
    HEAP32[$68 >> 2] = $69;
    if ($1 >>> 0 > 149) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    ___gmpn_sqr_basecase($pp, $ap, $2);
    __label__ = 28;
    break;
   case 25:
    var $83 = $1 >>> 0 > 359;
    var $84 = (i64Math.multiply($2, 0, 5, 0), i64Math.result[0]);
    var $85 = $scratch + ($84 + 5 << 2) | 0;
    if ($83) {
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    ___gmpn_toom2_sqr($pp, $ap, $2, $85);
    __label__ = 28;
    break;
   case 27:
    ___gmpn_toom3_sqr($pp, $ap, $2, $85);
    __label__ = 28;
    break;
   case 28:
    var $89 = $scratch + (($3 | 1) << 2) | 0;
    var $90 = $4 << 1;
    ___gmpn_toom_interpolate_5pts($pp, $89, $scratch, $2, $90, 0, $67);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom3_sqr["X"] = 1;

function ___gmpn_toom42_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($bn << 1 | 0) > ($an | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $10 = $an + 3 >> 2;
    __label__ = 5;
    break;
   case 4:
    var $10 = $bn + 1 >> 1;
    __label__ = 5;
    break;
   case 5:
    var $10;
    var $11 = (i64Math.multiply($10, 0, 3, 0), i64Math.result[0]);
    var $12 = $an - $11 | 0;
    var $13 = $bn - $10 | 0;
    var $14 = $10 + 1 | 0;
    var $15 = $14 << 2;
    var $16 = STACKTOP;
    STACKTOP += $15;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $17 = $16;
    var $18 = STACKTOP;
    STACKTOP += $15;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $19 = $18;
    var $20 = STACKTOP;
    STACKTOP += $15;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $21 = $20;
    var $22 = STACKTOP;
    STACKTOP += $15;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $23 = $22;
    var $24 = $10 << 2;
    var $25 = STACKTOP;
    STACKTOP += $24;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $26 = $25;
    var $27 = STACKTOP;
    STACKTOP += $15;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $28 = $27;
    var $29 = ___gmpn_toom_eval_dgr3_pm1($17, $19, $ap, $10, $12, $pp);
    var $30 = $29 & 1;
    var $31 = $ap + ($11 << 2) | 0;
    var $32 = ___gmpn_lshift($21, $31, $12, 1);
    var $33 = $10 << 1;
    var $34 = $ap + ($33 << 2) | 0;
    var $35 = ___gmpn_add_n($21, $34, $21, $12);
    var $36 = $35 + $32 | 0;
    if (($12 | 0) == ($10 | 0)) {
      var $cy_0 = $36;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $39 = $21 + ($12 << 2) | 0;
    var $40 = $ap + ($12 + $33 << 2) | 0;
    var $41 = $10 - $12 | 0;
    var $42 = ___gmpn_add_1($39, $40, $41, $36);
    var $cy_0 = $42;
    __label__ = 7;
    break;
   case 7:
    var $cy_0;
    var $44 = $cy_0 << 1;
    var $45 = ___gmpn_lshift($21, $21, $10, 1);
    var $46 = $ap + ($10 << 2) | 0;
    var $47 = ___gmpn_add_n($21, $46, $21, $10);
    var $50 = $44 + $45 + $47 << 1;
    var $51 = ___gmpn_lshift($21, $21, $10, 1);
    var $52 = ___gmpn_add_n($21, $ap, $21, $10);
    HEAP32[$21 + ($10 << 2) >> 2] = $52 + $51 + $50 | 0;
    var $57 = $bp + ($10 << 2) | 0;
    if (($13 | 0) == ($10 | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 8:
    var $59 = ___gmpn_add_n($23, $bp, $57, $10);
    HEAP32[$23 + ($10 << 2) >> 2] = $59;
    var $61 = ___gmpn_cmp($bp, $57, $10);
    if (($61 | 0) < 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $64 = ___gmpn_sub_n($26, $57, $bp, $10);
    var $vm1_neg_0 = $30 ^ 1;
    __label__ = 15;
    break;
   case 10:
    var $67 = ___gmpn_sub_n($26, $bp, $57, $10);
    var $vm1_neg_0 = $30;
    __label__ = 15;
    break;
   case 11:
    var $69 = ___gmpn_add($23, $bp, $10, $57, $13);
    HEAP32[$23 + ($10 << 2) >> 2] = $69;
    var $71 = $bp + ($13 << 2) | 0;
    var $72 = $10 - $13 | 0;
    var $73 = _mpn_zero_p384($71, $72);
    if (($73 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $76 = ___gmpn_cmp($bp, $57, $13);
    if (($76 | 0) < 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $79 = ___gmpn_sub_n($26, $57, $bp, $13);
    var $scevgep = $25 + ($13 << 2) | 0;
    var $82 = $33 - $bn << 2;
    _memset($scevgep, 0, $82, 4);
    var $vm1_neg_0 = $30 ^ 1;
    __label__ = 15;
    break;
   case 14:
    var $85 = ___gmpn_sub($26, $bp, $10, $57, $13);
    var $vm1_neg_0 = $30;
    __label__ = 15;
    break;
   case 15:
    var $vm1_neg_0;
    var $87 = ___gmpn_add($28, $23, $14, $57, $13);
    ___gmpn_mul_n($scratch, $19, $26, $10);
    if ((HEAP32[$19 + ($10 << 2) >> 2] | 0) == 0) {
      var $cy_1 = 0;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $92 = $scratch + ($10 << 2) | 0;
    var $93 = ___gmpn_add_n($92, $92, $26, $10);
    var $cy_1 = $93;
    __label__ = 17;
    break;
   case 17:
    var $cy_1;
    HEAP32[$scratch + ($33 << 2) >> 2] = $cy_1;
    var $96 = $scratch + (($33 | 1) << 2) | 0;
    ___gmpn_mul_n($96, $21, $28, $14);
    var $98 = $pp + ($24 << 2) | 0;
    if (($12 | 0) > ($13 | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $100 = ___gmpn_mul($98, $31, $12, $57, $13);
    __label__ = 20;
    break;
   case 19:
    var $102 = ___gmpn_mul($98, $57, $13, $31, $12);
    __label__ = 20;
    break;
   case 20:
    var $104 = HEAP32[$98 >> 2];
    var $105 = $pp + ($33 << 2) | 0;
    ___gmpn_mul_n($105, $17, $23, $10);
    var $107 = HEAP32[$17 + ($10 << 2) >> 2];
    if (($107 | 0) == 1) {
      __label__ = 22;
      break;
    } else if (($107 | 0) == 2) {
      __label__ = 23;
      break;
    } else if (($107 | 0) == 3) {
      __label__ = 24;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $cy_2 = 0;
    var $_pre_phi = $23 + ($10 << 2) | 0;
    __label__ = 25;
    break;
   case 22:
    var $109 = $23 + ($10 << 2) | 0;
    var $110 = HEAP32[$109 >> 2];
    var $111 = $pp + ($33 + $10 << 2) | 0;
    var $112 = ___gmpn_add_n($111, $111, $23, $10);
    var $cy_2 = $112 + $110 | 0;
    var $_pre_phi = $109;
    __label__ = 25;
    break;
   case 23:
    var $115 = $23 + ($10 << 2) | 0;
    var $117 = HEAP32[$115 >> 2] << 1;
    var $118 = $pp + ($33 + $10 << 2) | 0;
    var $119 = ___gmpn_addmul_1($118, $23, $10, 2);
    var $cy_2 = $117 + $119 | 0;
    var $_pre_phi = $115;
    __label__ = 25;
    break;
   case 24:
    var $122 = $23 + ($10 << 2) | 0;
    var $123 = HEAP32[$122 >> 2];
    var $124 = (i64Math.multiply($123, 0, 3, 0), i64Math.result[0]);
    var $125 = $pp + ($33 + $10 << 2) | 0;
    var $126 = ___gmpn_addmul_1($125, $23, $10, 3);
    var $cy_2 = $124 + $126 | 0;
    var $_pre_phi = $122;
    __label__ = 25;
    break;
   case 25:
    var $_pre_phi;
    var $cy_2;
    if ((HEAP32[$_pre_phi >> 2] | 0) == 0) {
      var $cy_3 = $cy_2;
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $132 = $pp + ($33 + $10 << 2) | 0;
    var $133 = ___gmpn_add_n($132, $132, $17, $10);
    var $cy_3 = $133 + $cy_2 | 0;
    __label__ = 27;
    break;
   case 27:
    var $cy_3;
    HEAP32[$98 >> 2] = $cy_3;
    ___gmpn_mul_n($pp, $ap, $bp, $10);
    var $136 = $12 + $13 | 0;
    ___gmpn_toom_interpolate_5pts($pp, $96, $scratch, $10, $136, $vm1_neg_0, $104);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom42_mul["X"] = 1;

function _mpn_zero_p391($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom43_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($an, 0, 3, 0), i64Math.result[0]);
    if (($1 | 0) < ($bn << 2 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $11 = $an - 1 >> 2;
    __label__ = 5;
    break;
   case 4:
    var $8 = $bn - 1 | 0;
    var $9 = Math.floor(($8 >>> 0) / 3);
    var $11 = $9;
    __label__ = 5;
    break;
   case 5:
    var $11;
    var $12 = $11 + 1 | 0;
    var $13 = (i64Math.multiply($12, 0, 3, 0), i64Math.result[0]);
    var $14 = $an - $13 | 0;
    var $15 = $12 << 1;
    var $16 = $bn - $15 | 0;
    var $_sum = $13 + 3 | 0;
    var $17 = $pp + ($_sum << 2) | 0;
    var $18 = $12 << 2;
    var $_sum1 = $18 + 4 | 0;
    var $19 = $scratch + ($_sum1 << 2) | 0;
    var $20 = $scratch + ($_sum << 2) | 0;
    var $21 = ___gmpn_toom_eval_dgr3_pm2($17, $19, $ap, $12, $14, $20);
    var $22 = $21 & 2;
    var $_sum3 = $15 + 2 | 0;
    var $23 = $scratch + ($_sum3 << 2) | 0;
    var $24 = $bp + ($12 << 2) | 0;
    var $25 = ___gmpn_lshift($23, $24, $12, 1);
    var $26 = $scratch + ($_sum3 + $12 << 2) | 0;
    HEAP32[$26 >> 2] = $25;
    var $27 = $bp + ($15 << 2) | 0;
    var $28 = ___gmpn_lshift($scratch, $27, $16, 2);
    var $29 = ___gmpn_add_n($scratch, $scratch, $bp, $16);
    var $30 = $29 + $28 | 0;
    if (($16 | 0) == ($12 | 0)) {
      var $cy_0 = $30;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $33 = $scratch + ($16 << 2) | 0;
    var $34 = $bp + ($16 << 2) | 0;
    var $35 = $12 - $16 | 0;
    var $36 = ___gmpn_add_1($33, $34, $35, $30);
    var $cy_0 = $36;
    __label__ = 7;
    break;
   case 7:
    var $cy_0;
    HEAP32[$scratch + ($12 << 2) >> 2] = $cy_0;
    var $39 = $pp + ($15 << 2) | 0;
    var $40 = $pp + ($_sum3 << 2) | 0;
    var $41 = $11 + 2 | 0;
    var $42 = ___gmpn_add_n($40, $scratch, $23, $41);
    var $43 = ___gmpn_cmp($scratch, $23, $41);
    var $45 = $pp + ($12 << 2) | 0;
    var $46 = $pp + ($41 << 2) | 0;
    if (($43 | 0) < 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $48 = ___gmpn_sub_n($46, $23, $scratch, $41);
    var $flags_0 = $22 ^ 2;
    __label__ = 10;
    break;
   case 9:
    var $51 = ___gmpn_sub_n($46, $scratch, $23, $41);
    var $flags_0 = $22;
    __label__ = 10;
    break;
   case 10:
    var $flags_0;
    var $53 = $pp + ($_sum1 << 2) | 0;
    var $54 = ___gmpn_toom_eval_dgr3_pm1($53, $20, $ap, $12, $14, $scratch);
    var $56 = $54 & 1 ^ $flags_0;
    var $57 = ___gmpn_add($23, $bp, $12, $27, $16);
    HEAP32[$26 >> 2] = $57;
    var $58 = ___gmpn_add_n($pp, $23, $24, $12);
    HEAP32[$45 >> 2] = $58 + $57 | 0;
    if ((HEAP32[$26 >> 2] | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 11:
    var $63 = ___gmpn_cmp($23, $24, $12);
    if (($63 | 0) < 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $66 = ___gmpn_sub_n($23, $24, $23, $12);
    var $flags_1 = $56 ^ 1;
    __label__ = 14;
    break;
   case 13:
    var $69 = ___gmpn_sub_n($23, $23, $24, $12);
    var $71 = HEAP32[$26 >> 2] - $69 | 0;
    HEAP32[$26 >> 2] = $71;
    var $flags_1 = $56;
    __label__ = 14;
    break;
   case 14:
    var $flags_1;
    ___gmpn_mul_n($scratch, $20, $23, $41);
    var $73 = $scratch + (($15 | 1) << 2) | 0;
    ___gmpn_mul_n($73, $19, $46, $41);
    var $74 = $scratch + (($18 | 2) << 2) | 0;
    ___gmpn_mul_n($74, $17, $40, $41);
    ___gmpn_mul_n($39, $53, $pp, $41);
    var $75 = ($14 | 0) > ($16 | 0);
    var $76 = (i64Math.multiply($12, 0, 5, 0), i64Math.result[0]);
    var $77 = $pp + ($76 << 2) | 0;
    var $78 = $ap + ($13 << 2) | 0;
    if ($75) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $80 = ___gmpn_mul($77, $78, $14, $27, $16);
    __label__ = 17;
    break;
   case 16:
    var $82 = ___gmpn_mul($77, $27, $16, $78, $14);
    __label__ = 17;
    break;
   case 17:
    ___gmpn_mul_n($pp, $ap, $bp, $12);
    var $84 = $16 + $14 | 0;
    ___gmpn_toom_interpolate_6pts($pp, $12, $flags_1, $scratch, $73, $74, $84);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom43_mul["X"] = 1;

function ___gmpn_toom44_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $an + 3 | 0;
    var $2 = $1 >> 2;
    var $3 = (i64Math.multiply($2, 0, 3, 0), i64Math.result[0]);
    var $4 = $an - $3 | 0;
    var $5 = $bn - $3 | 0;
    var $6 = $pp + ($2 << 2) | 0;
    var $_sum = $2 + 1 | 0;
    var $7 = $pp + ($_sum << 2) | 0;
    var $10 = $scratch + (($1 << 1 & -8 | 5) << 2) | 0;
    var $11 = ___gmpn_toom_eval_dgr3_pm2($pp, $7, $ap, $2, $4, $10);
    var $_sum34 = $1 & -4 | 2;
    var $13 = $pp + ($_sum34 << 2) | 0;
    var $14 = $1 >> 1;
    var $15 = $14 & -2;
    var $16 = $pp + ($15 << 2) | 0;
    var $17 = $pp + ($15 + 2 << 2) | 0;
    var $18 = ___gmpn_toom_eval_dgr3_pm2($13, $17, $bp, $2, $5, $10);
    var $20 = ($18 ^ $11) & 1;
    var $21 = ($_sum | 0) > 99;
    if ($21) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if (($_sum | 0) > 299) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmpn_toom22_mul($scratch, $pp, $_sum, $13, $_sum, $10);
    var $25 = $scratch + (($14 | 1) << 2) | 0;
    ___gmpn_toom22_mul($25, $7, $_sum, $17, $_sum, $10);
    __label__ = 7;
    break;
   case 5:
    ___gmpn_toom33_mul($scratch, $pp, $_sum, $13, $_sum, $10);
    var $27 = $scratch + (($14 | 1) << 2) | 0;
    ___gmpn_toom33_mul($27, $7, $_sum, $17, $_sum, $10);
    __label__ = 7;
    break;
   case 6:
    ___gmpn_toom44_mul($scratch, $pp, $_sum, $13, $_sum, $10);
    var $29 = $scratch + (($14 | 1) << 2) | 0;
    ___gmpn_toom44_mul($29, $7, $_sum, $17, $_sum, $10);
    __label__ = 7;
    break;
   case 7:
    var $31 = ___gmpn_lshift($pp, $ap, $2, 1);
    var $32 = $ap + ($2 << 2) | 0;
    var $33 = ___gmpn_add_n($pp, $pp, $32, $2);
    var $35 = $33 + $31 << 1;
    var $36 = ___gmpn_lshift($pp, $pp, $2, 1);
    var $37 = $ap + ($15 << 2) | 0;
    var $38 = ___gmpn_add_n($pp, $pp, $37, $2);
    var $41 = $38 + $36 + $35 << 1;
    var $42 = ___gmpn_lshift($pp, $pp, $2, 1);
    var $43 = $ap + ($3 << 2) | 0;
    var $44 = ___gmpn_add($pp, $pp, $2, $43, $4);
    HEAP32[$6 >> 2] = $44 + $42 + $41 | 0;
    var $47 = ___gmpn_lshift($13, $bp, $2, 1);
    var $48 = $bp + ($2 << 2) | 0;
    var $49 = ___gmpn_add_n($13, $13, $48, $2);
    var $51 = $49 + $47 << 1;
    var $52 = ___gmpn_lshift($13, $13, $2, 1);
    var $53 = $bp + ($15 << 2) | 0;
    var $54 = ___gmpn_add_n($13, $13, $53, $2);
    var $57 = $54 + $52 + $51 << 1;
    var $58 = ___gmpn_lshift($13, $13, $2, 1);
    var $59 = $bp + ($3 << 2) | 0;
    var $60 = ___gmpn_add($13, $13, $2, $59, $5);
    HEAP32[$pp + ($_sum34 + $2 << 2) >> 2] = $60 + $58 + $57 | 0;
    if ($21) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $65 = $scratch + ($_sum34 << 2) | 0;
    ___gmpn_toom22_mul($65, $pp, $_sum, $13, $_sum, $10);
    __label__ = 12;
    break;
   case 9:
    var $68 = $scratch + ($_sum34 << 2) | 0;
    if (($_sum | 0) > 299) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    ___gmpn_toom33_mul($68, $pp, $_sum, $13, $_sum, $10);
    __label__ = 12;
    break;
   case 11:
    ___gmpn_toom44_mul($68, $pp, $_sum, $13, $_sum, $10);
    __label__ = 12;
    break;
   case 12:
    var $72 = ___gmpn_toom_eval_dgr3_pm1($pp, $7, $ap, $2, $4, $10);
    var $74 = $72 & 2 | $20;
    var $75 = ___gmpn_toom_eval_dgr3_pm1($13, $17, $bp, $2, $5, $10);
    var $77 = $74 ^ $75 & 2;
    if ($21) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $79 = ($_sum | 0) > 299;
    var $80 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $81 = $scratch + ($80 + 3 << 2) | 0;
    if ($79) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $83 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $84 = $scratch + ($83 + 3 << 2) | 0;
    ___gmpn_toom22_mul($84, $7, $_sum, $17, $_sum, $10);
    ___gmpn_toom22_mul($16, $pp, $_sum, $13, $_sum, $10);
    __label__ = 17;
    break;
   case 15:
    ___gmpn_toom33_mul($81, $7, $_sum, $17, $_sum, $10);
    ___gmpn_toom33_mul($16, $pp, $_sum, $13, $_sum, $10);
    __label__ = 17;
    break;
   case 16:
    ___gmpn_toom44_mul($81, $7, $_sum, $17, $_sum, $10);
    ___gmpn_toom44_mul($16, $pp, $_sum, $13, $_sum, $10);
    __label__ = 17;
    break;
   case 17:
    if (($2 | 0) > 99) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    ___gmpn_toom22_mul($pp, $ap, $2, $bp, $2, $10);
    __label__ = 22;
    break;
   case 19:
    if (($2 | 0) > 299) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    ___gmpn_toom33_mul($pp, $ap, $2, $bp, $2, $10);
    __label__ = 22;
    break;
   case 21:
    ___gmpn_toom44_mul($pp, $ap, $2, $bp, $2, $10);
    __label__ = 22;
    break;
   case 22:
    if (($4 | 0) > ($5 | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $97 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $98 = $pp + ($97 << 2) | 0;
    var $99 = ___gmpn_mul($98, $43, $4, $59, $5);
    __label__ = 29;
    break;
   case 24:
    if (($4 | 0) > 99) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $103 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $104 = $pp + ($103 << 2) | 0;
    ___gmpn_toom22_mul($104, $43, $4, $59, $4, $10);
    __label__ = 29;
    break;
   case 26:
    var $106 = ($4 | 0) > 299;
    var $107 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $108 = $pp + ($107 << 2) | 0;
    if ($106) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    ___gmpn_toom33_mul($108, $43, $4, $59, $4, $10);
    __label__ = 29;
    break;
   case 28:
    ___gmpn_toom44_mul($108, $43, $4, $59, $4, $10);
    __label__ = 29;
    break;
   case 29:
    var $112 = $scratch + (($14 | 1) << 2) | 0;
    var $113 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $114 = $scratch + ($113 + 3 << 2) | 0;
    var $115 = $scratch + ($_sum34 << 2) | 0;
    var $116 = $4 + $5 | 0;
    ___gmpn_toom_interpolate_7pts($pp, $2, $77, $112, $114, $scratch, $115, $116, $10);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom44_mul["X"] = 1;

function ___gmpn_toom4_sqr($pp, $ap, $an, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $an + 3 | 0;
    var $2 = $1 >> 2;
    var $3 = (i64Math.multiply($2, 0, 3, 0), i64Math.result[0]);
    var $4 = $an - $3 | 0;
    var $_sum1 = $1 & -4 | 2;
    var $6 = $pp + ($_sum1 << 2) | 0;
    var $9 = $scratch + (($1 << 1 & -8 | 5) << 2) | 0;
    var $10 = ___gmpn_toom_eval_dgr3_pm2($pp, $6, $ap, $2, $4, $9);
    var $11 = $2 + 1 | 0;
    var $12 = ($11 | 0) > 119;
    if ($12) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    if (($11 | 0) > 399) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmpn_toom2_sqr($scratch, $pp, $11, $9);
    var $16 = $1 >> 1;
    var $17 = $scratch + (($16 | 1) << 2) | 0;
    ___gmpn_toom2_sqr($17, $6, $11, $9);
    var $_pre_phi = $16;
    __label__ = 7;
    break;
   case 5:
    ___gmpn_toom3_sqr($scratch, $pp, $11, $9);
    var $19 = $1 >> 1;
    var $20 = $scratch + (($19 | 1) << 2) | 0;
    ___gmpn_toom3_sqr($20, $6, $11, $9);
    var $_pre_phi = $19;
    __label__ = 7;
    break;
   case 6:
    ___gmpn_toom4_sqr($scratch, $pp, $11, $9);
    var $23 = $scratch + (($1 >> 1 | 1) << 2) | 0;
    ___gmpn_toom4_sqr($23, $6, $11, $9);
    var $_pre_phi = $1 >> 1;
    __label__ = 7;
    break;
   case 7:
    var $_pre_phi;
    var $25 = ___gmpn_lshift($pp, $ap, $2, 1);
    var $26 = $ap + ($2 << 2) | 0;
    var $27 = ___gmpn_add_n($pp, $pp, $26, $2);
    var $29 = $27 + $25 << 1;
    var $30 = ___gmpn_lshift($pp, $pp, $2, 1);
    var $31 = $_pre_phi & -2;
    var $32 = $ap + ($31 << 2) | 0;
    var $33 = ___gmpn_add_n($pp, $pp, $32, $2);
    var $36 = $33 + $30 + $29 << 1;
    var $37 = ___gmpn_lshift($pp, $pp, $2, 1);
    var $38 = $ap + ($3 << 2) | 0;
    var $39 = ___gmpn_add($pp, $pp, $2, $38, $4);
    HEAP32[$pp + ($2 << 2) >> 2] = $39 + $37 + $36 | 0;
    if ($12) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $45 = $scratch + ($_sum1 << 2) | 0;
    if (($11 | 0) > 399) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $47 = $scratch + ($_sum1 << 2) | 0;
    ___gmpn_toom2_sqr($47, $pp, $11, $9);
    var $48 = ___gmpn_toom_eval_dgr3_pm1($pp, $6, $ap, $2, $4, $9);
    var $49 = $pp + ($31 << 2) | 0;
    ___gmpn_toom2_sqr($49, $pp, $11, $9);
    var $50 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $51 = $scratch + ($50 + 3 << 2) | 0;
    ___gmpn_toom2_sqr($51, $6, $11, $9);
    __label__ = 12;
    break;
   case 10:
    ___gmpn_toom3_sqr($45, $pp, $11, $9);
    var $53 = ___gmpn_toom_eval_dgr3_pm1($pp, $6, $ap, $2, $4, $9);
    var $54 = $pp + ($31 << 2) | 0;
    ___gmpn_toom3_sqr($54, $pp, $11, $9);
    var $55 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $56 = $scratch + ($55 + 3 << 2) | 0;
    ___gmpn_toom3_sqr($56, $6, $11, $9);
    __label__ = 12;
    break;
   case 11:
    ___gmpn_toom4_sqr($45, $pp, $11, $9);
    var $58 = ___gmpn_toom_eval_dgr3_pm1($pp, $6, $ap, $2, $4, $9);
    var $59 = $pp + ($31 << 2) | 0;
    ___gmpn_toom4_sqr($59, $pp, $11, $9);
    var $60 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $61 = $scratch + ($60 + 3 << 2) | 0;
    ___gmpn_toom4_sqr($61, $6, $11, $9);
    __label__ = 12;
    break;
   case 12:
    if (($2 | 0) > 119) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmpn_toom2_sqr($pp, $ap, $2, $9);
    __label__ = 17;
    break;
   case 14:
    if (($2 | 0) > 399) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    ___gmpn_toom3_sqr($pp, $ap, $2, $9);
    __label__ = 17;
    break;
   case 16:
    ___gmpn_toom4_sqr($pp, $ap, $2, $9);
    __label__ = 17;
    break;
   case 17:
    if (($4 | 0) > 119) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $72 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $73 = $pp + ($72 << 2) | 0;
    ___gmpn_toom2_sqr($73, $38, $4, $9);
    __label__ = 22;
    break;
   case 19:
    var $75 = ($4 | 0) > 399;
    var $76 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $77 = $pp + ($76 << 2) | 0;
    if ($75) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    ___gmpn_toom3_sqr($77, $38, $4, $9);
    __label__ = 22;
    break;
   case 21:
    ___gmpn_toom4_sqr($77, $38, $4, $9);
    __label__ = 22;
    break;
   case 22:
    var $81 = $scratch + (($_pre_phi | 1) << 2) | 0;
    var $82 = (i64Math.multiply($2, 0, 6, 0), i64Math.result[0]);
    var $83 = $scratch + ($82 + 3 << 2) | 0;
    var $84 = $scratch + ($_sum1 << 2) | 0;
    var $85 = $4 << 1;
    ___gmpn_toom_interpolate_7pts($pp, $2, 0, $81, $83, $scratch, $84, $85, $9);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom4_sqr["X"] = 1;

function ___gmpn_toom52_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $an << 1;
    var $2 = (i64Math.multiply($bn, 0, 5, 0), i64Math.result[0]);
    if (($1 | 0) < ($2 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = $an - 1 | 0;
    var $6 = Math.floor(($5 >>> 0) / 5);
    var $11 = $6;
    __label__ = 5;
    break;
   case 4:
    var $11 = $bn - 1 >> 1;
    __label__ = 5;
    break;
   case 5:
    var $11;
    var $12 = $11 + 1 | 0;
    var $13 = $12 << 2;
    var $14 = $an - $13 | 0;
    var $15 = $bn - $12 | 0;
    var $16 = (i64Math.multiply($12, 0, 3, 0), i64Math.result[0]);
    var $_sum = $16 + 3 | 0;
    var $17 = $pp + ($_sum << 2) | 0;
    var $_sum1 = $13 + 4 | 0;
    var $18 = $scratch + ($_sum1 << 2) | 0;
    var $19 = $scratch + ($_sum << 2) | 0;
    var $20 = ___gmpn_toom_eval_pm2($17, $18, 4, $ap, $12, $14, $19);
    var $21 = $20 & 2;
    var $22 = ($15 | 0) == ($12 | 0);
    var $23 = $bp + ($12 << 2) | 0;
    if ($22) {
      __label__ = 6;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 6:
    var $25 = ___gmpn_add_n($pp, $bp, $23, $12);
    HEAP32[$pp + ($12 << 2) >> 2] = $25;
    var $27 = ___gmpn_cmp($bp, $23, $12);
    var $30 = $scratch + (($12 << 1) + 2 << 2) | 0;
    if (($27 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $32 = ___gmpn_sub_n($30, $23, $bp, $12);
    var $flags_0 = $21 | 1;
    __label__ = 13;
    break;
   case 8:
    var $35 = ___gmpn_sub_n($30, $bp, $23, $12);
    var $flags_0 = $21;
    __label__ = 13;
    break;
   case 9:
    var $37 = ___gmpn_add($pp, $bp, $12, $23, $15);
    HEAP32[$pp + ($12 << 2) >> 2] = $37;
    var $39 = $bp + ($15 << 2) | 0;
    var $40 = $12 - $15 | 0;
    var $41 = _mpn_zero_p391($39, $40);
    if (($41 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $44 = ___gmpn_cmp($bp, $23, $15);
    if (($44 | 0) < 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $48 = $scratch + (($12 << 1) + 2 << 2) | 0;
    var $49 = ___gmpn_sub_n($48, $23, $bp, $15);
    var $scevgep24 = $scratch + ($11 + $bn + 3 << 2) | 0;
    var $55 = ($11 << 1) + 2 - $bn << 2;
    _memset($scevgep24, 0, $55, 4);
    var $flags_0 = $21 | 1;
    __label__ = 13;
    break;
   case 12:
    var $59 = $scratch + (($12 << 1) + 2 << 2) | 0;
    var $60 = ___gmpn_sub($59, $bp, $12, $23, $15);
    var $flags_0 = $21;
    __label__ = 13;
    break;
   case 13:
    var $flags_0;
    var $62 = $12 << 1;
    var $63 = $pp + ($62 << 2) | 0;
    var $_sum4 = $62 + 2 | 0;
    var $64 = $pp + ($_sum4 << 2) | 0;
    var $65 = $11 + 2 | 0;
    var $66 = ___gmpn_add($64, $pp, $65, $23, $15);
    var $69 = $pp + ($65 << 2) | 0;
    if (($flags_0 & 1 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $71 = $scratch + ($_sum4 << 2) | 0;
    var $72 = ___gmpn_add($69, $71, $12, $23, $15);
    HEAP32[$pp + ($65 + $12 << 2) >> 2] = $72;
    var $flags_1 = $flags_0 ^ 2;
    __label__ = 23;
    break;
   case 15:
    HEAP32[$pp + ($65 + $12 << 2) >> 2] = 0;
    var $77 = $scratch + ($_sum4 << 2) | 0;
    if ($22) {
      __label__ = 16;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 16:
    var $79 = ___gmpn_cmp($77, $23, $12);
    if (($79 | 0) < 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $82 = ___gmpn_sub_n($69, $23, $77, $12);
    var $flags_1 = $flags_0 ^ 2;
    __label__ = 23;
    break;
   case 18:
    var $85 = ___gmpn_sub_n($69, $77, $23, $12);
    var $flags_1 = $flags_0;
    __label__ = 23;
    break;
   case 19:
    var $87 = $scratch + ($_sum4 + $15 << 2) | 0;
    var $88 = $12 - $15 | 0;
    var $89 = _mpn_zero_p391($87, $88);
    if (($89 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $92 = ___gmpn_cmp($77, $23, $15);
    if (($92 | 0) < 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $95 = ___gmpn_sub_n($69, $23, $77, $15);
    var $scevgep2526 = $pp + ($bn + 1 << 2) | 0;
    var $100 = ($11 << 1) + 2 - $bn << 2;
    _memset($scevgep2526, 0, $100, 4);
    var $flags_1 = $flags_0 ^ 2;
    __label__ = 23;
    break;
   case 22:
    var $103 = ___gmpn_sub($69, $77, $12, $23, $15);
    var $flags_1 = $flags_0;
    __label__ = 23;
    break;
   case 23:
    var $flags_1;
    var $105 = $pp + ($_sum1 << 2) | 0;
    var $106 = ___gmpn_toom_eval_pm1($105, $19, 4, $ap, $12, $14, $scratch);
    var $108 = $106 & 1 ^ $flags_1;
    var $109 = $scratch + ($_sum4 << 2) | 0;
    var $110 = ___gmpn_mul($scratch, $19, $65, $109, $12);
    var $111 = $scratch + (($62 | 1) << 2) | 0;
    ___gmpn_mul_n($111, $18, $69, $65);
    var $112 = $scratch + (($13 | 2) << 2) | 0;
    ___gmpn_mul_n($112, $17, $64, $65);
    ___gmpn_mul_n($63, $105, $pp, $65);
    var $113 = ($14 | 0) > ($15 | 0);
    var $114 = (i64Math.multiply($12, 0, 5, 0), i64Math.result[0]);
    var $115 = $pp + ($114 << 2) | 0;
    var $116 = $ap + ($13 << 2) | 0;
    if ($113) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $118 = ___gmpn_mul($115, $116, $14, $23, $15);
    __label__ = 26;
    break;
   case 25:
    var $120 = ___gmpn_mul($115, $23, $15, $116, $14);
    __label__ = 26;
    break;
   case 26:
    ___gmpn_mul_n($pp, $ap, $bp, $12);
    var $122 = $14 + $15 | 0;
    ___gmpn_toom_interpolate_6pts($pp, $12, $108, $scratch, $111, $112, $122);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom52_mul["X"] = 1;

function ___gmpn_toom53_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($an, 0, 3, 0), i64Math.result[0]);
    var $2 = (i64Math.multiply($bn, 0, 5, 0), i64Math.result[0]);
    if (($1 | 0) < ($2 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = $an - 1 | 0;
    var $6 = Math.floor(($5 >>> 0) / 5);
    var $11 = $6;
    __label__ = 5;
    break;
   case 4:
    var $8 = $bn - 1 | 0;
    var $9 = Math.floor(($8 >>> 0) / 3);
    var $11 = $9;
    __label__ = 5;
    break;
   case 5:
    var $11;
    var $12 = $11 + 1 | 0;
    var $13 = $12 << 2;
    var $14 = $an - $13 | 0;
    var $15 = $12 << 1;
    var $16 = $bn - $15 | 0;
    var $17 = $11 + 2 | 0;
    var $18 = $17 << 2;
    var $19 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $20 = $19;
    var $21 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $22 = $21;
    var $23 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $24 = $23;
    var $25 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $26 = $25;
    var $27 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $28 = $27;
    var $29 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $30 = $29;
    var $31 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $32 = $31;
    var $33 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $34 = $33;
    var $35 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $36 = $35;
    var $37 = STACKTOP;
    STACKTOP += $18;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $38 = $37;
    var $39 = ___gmpn_toom_eval_pm1($20, $22, 4, $ap, $12, $14, $pp);
    var $40 = $39 & 2;
    var $41 = ___gmpn_toom_eval_pm2($24, $26, 4, $ap, $12, $14, $pp);
    var $43 = $41 & 1 | $40;
    var $44 = ___gmpn_lshift($28, $ap, $12, 1);
    var $45 = $ap + ($12 << 2) | 0;
    var $46 = ___gmpn_add_n($28, $28, $45, $12);
    var $48 = $46 + $44 << 1;
    var $49 = ___gmpn_lshift($28, $28, $12, 1);
    var $50 = $ap + ($15 << 2) | 0;
    var $51 = ___gmpn_add_n($28, $28, $50, $12);
    var $54 = $51 + $49 + $48 << 1;
    var $55 = ___gmpn_lshift($28, $28, $12, 1);
    var $56 = (i64Math.multiply($12, 0, 3, 0), i64Math.result[0]);
    var $57 = $ap + ($56 << 2) | 0;
    var $58 = ___gmpn_add_n($28, $28, $57, $12);
    var $61 = $58 + $55 + $54 << 1;
    var $62 = ___gmpn_lshift($28, $28, $12, 1);
    var $63 = $ap + ($13 << 2) | 0;
    var $64 = ___gmpn_add($28, $28, $12, $63, $14);
    HEAP32[$28 + ($12 << 2) >> 2] = $64 + $62 + $61 | 0;
    var $68 = $bp + ($15 << 2) | 0;
    var $69 = ___gmpn_add($30, $bp, $12, $68, $16);
    var $70 = $30 + ($12 << 2) | 0;
    HEAP32[$70 >> 2] = $69;
    var $72 = $bp + ($12 << 2) | 0;
    if (($69 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $_pre_phi = $72;
      __label__ = 8;
      break;
    }
   case 6:
    var $74 = ___gmpn_cmp($30, $72, $12);
    if (($74 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      var $_pre_phi = $72;
      __label__ = 8;
      break;
    }
   case 7:
    var $77 = ___gmpn_sub_n($32, $72, $30, $12);
    HEAP32[$32 + ($12 << 2) >> 2] = 0;
    var $flags_0 = $43 ^ 2;
    __label__ = 9;
    break;
   case 8:
    var $_pre_phi;
    var $80 = ___gmpn_sub_n($32, $30, $_pre_phi, $12);
    HEAP32[$32 + ($12 << 2) >> 2] = $69 - $80 | 0;
    var $flags_0 = $43;
    __label__ = 9;
    break;
   case 9:
    var $flags_0;
    var $84 = $bp + ($12 << 2) | 0;
    var $85 = ___gmpn_add_n($30, $30, $84, $12);
    var $87 = HEAP32[$70 >> 2] + $85 | 0;
    HEAP32[$70 >> 2] = $87;
    var $88 = ___gmpn_lshift($pp, $68, $16, 2);
    var $89 = ___gmpn_add($34, $bp, $12, $pp, $16);
    HEAP32[$34 + ($12 << 2) >> 2] = $89;
    var $91 = $34 + ($16 << 2) | 0;
    var $92 = HEAP32[$91 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($92, $88);
    var $93 = $uadd.f0;
    HEAP32[$91 >> 2] = $93;
    var $94 = $uadd.f1;
    if ($94) {
      var $__p_0 = $91;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $__p_0;
    var $95 = $__p_0 + 4 | 0;
    var $97 = HEAP32[$95 >> 2] + 1 | 0;
    HEAP32[$95 >> 2] = $97;
    if (($97 | 0) == 0) {
      var $__p_0 = $95;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $99 = ___gmpn_lshift($pp, $84, $12, 1);
    HEAP32[$pp + ($12 << 2) >> 2] = $99;
    var $101 = ___gmpn_cmp($34, $pp, $17);
    if (($101 | 0) < 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $104 = ___gmpn_sub_n($36, $pp, $34, $17);
    var $flags_1 = $flags_0 ^ 1;
    __label__ = 14;
    break;
   case 13:
    var $107 = ___gmpn_sub_n($36, $34, $pp, $17);
    var $flags_1 = $flags_0;
    __label__ = 14;
    break;
   case 14:
    var $flags_1;
    var $109 = ___gmpn_add_n($34, $34, $pp, $17);
    var $110 = ___gmpn_lshift($38, $bp, $12, 1);
    var $111 = ___gmpn_add_n($38, $38, $84, $12);
    var $113 = $111 + $110 << 1;
    var $114 = ___gmpn_lshift($38, $38, $12, 1);
    var $115 = ___gmpn_add($38, $38, $12, $68, $16);
    HEAP32[$38 + ($12 << 2) >> 2] = $115 + $114 + $113 | 0;
    ___gmpn_mul_n($scratch, $24, $34, $17);
    var $119 = $scratch + (($15 | 1) << 2) | 0;
    ___gmpn_mul_n($119, $26, $36, $17);
    var $120 = $scratch + (($13 | 2) << 2) | 0;
    ___gmpn_mul_n($120, $28, $38, $17);
    var $121 = (i64Math.multiply($12, 0, 6, 0), i64Math.result[0]);
    var $_sum = $121 + 3 | 0;
    var $122 = $scratch + ($_sum << 2) | 0;
    HEAP32[$scratch + ($_sum + $15 << 2) >> 2] = 0;
    var $131 = ((HEAP32[$32 + ($12 << 2) >> 2] | HEAP32[$22 + ($12 << 2) >> 2] | 0) != 0 & 1) + $12 | 0;
    ___gmpn_mul_n($122, $22, $32, $131);
    var $132 = $pp + ($15 << 2) | 0;
    HEAP32[$pp + ($13 << 2) >> 2] = 0;
    var $140 = ((HEAP32[$70 >> 2] | HEAP32[$20 + ($12 << 2) >> 2] | 0) != 0 & 1) + $12 | 0;
    ___gmpn_mul_n($132, $20, $30, $140);
    ___gmpn_mul_n($pp, $ap, $bp, $12);
    var $142 = $pp + ($121 << 2) | 0;
    if (($14 | 0) > ($16 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $144 = ___gmpn_mul($142, $63, $14, $68, $16);
    __label__ = 17;
    break;
   case 16:
    var $146 = ___gmpn_mul($142, $68, $16, $63, $14);
    __label__ = 17;
    break;
   case 17:
    var $148 = $14 + $16 | 0;
    var $150 = $scratch + (($12 << 3 | 4) << 2) | 0;
    ___gmpn_toom_interpolate_7pts($pp, $12, $flags_1, $119, $122, $scratch, $120, $148, $150);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom53_mul["X"] = 1;

function _mpn_zero_p394($ap, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0_in = $n;
    __label__ = 3;
    break;
   case 3:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 1;
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[$ap + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 5;
      break;
    }
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom62_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($bn, 0, 3, 0), i64Math.result[0]);
    if (($1 | 0) > ($an | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = $an - 1 | 0;
    var $5 = Math.floor(($4 >>> 0) / 6);
    var $10 = $5;
    __label__ = 5;
    break;
   case 4:
    var $10 = $bn - 1 >> 1;
    __label__ = 5;
    break;
   case 5:
    var $10;
    var $11 = $10 + 1 | 0;
    var $12 = (i64Math.multiply($11, 0, 5, 0), i64Math.result[0]);
    var $13 = $an - $12 | 0;
    var $14 = $bn - $11 | 0;
    var $15 = $10 + 2 | 0;
    var $16 = $15 << 2;
    var $17 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $18 = $17;
    var $19 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $20 = $19;
    var $21 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $22 = $21;
    var $23 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $24 = $23;
    var $25 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $26 = $25;
    var $27 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $28 = $27;
    var $29 = $11 << 2;
    var $30 = STACKTOP;
    STACKTOP += $29;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $31 = $30;
    var $32 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $33 = $32;
    var $34 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $35 = $34;
    var $36 = STACKTOP;
    STACKTOP += $16;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $37 = $36;
    var $38 = ___gmpn_toom_eval_pm1($18, $20, 5, $ap, $11, $13, $pp);
    var $39 = $38 & 2;
    var $40 = ___gmpn_toom_eval_pm2($22, $24, 5, $ap, $11, $13, $pp);
    var $42 = $40 & 1 | $39;
    var $43 = ___gmpn_lshift($26, $ap, $11, 1);
    var $44 = $ap + ($11 << 2) | 0;
    var $45 = ___gmpn_add_n($26, $26, $44, $11);
    var $47 = $45 + $43 << 1;
    var $48 = ___gmpn_lshift($26, $26, $11, 1);
    var $49 = $11 << 1;
    var $50 = $ap + ($49 << 2) | 0;
    var $51 = ___gmpn_add_n($26, $26, $50, $11);
    var $54 = $51 + $48 + $47 << 1;
    var $55 = ___gmpn_lshift($26, $26, $11, 1);
    var $56 = (i64Math.multiply($11, 0, 3, 0), i64Math.result[0]);
    var $57 = $ap + ($56 << 2) | 0;
    var $58 = ___gmpn_add_n($26, $26, $57, $11);
    var $61 = $58 + $55 + $54 << 1;
    var $62 = ___gmpn_lshift($26, $26, $11, 1);
    var $63 = $ap + ($29 << 2) | 0;
    var $64 = ___gmpn_add_n($26, $26, $63, $11);
    var $67 = $64 + $62 + $61 << 1;
    var $68 = ___gmpn_lshift($26, $26, $11, 1);
    var $69 = $ap + ($12 << 2) | 0;
    var $70 = ___gmpn_add($26, $26, $11, $69, $13);
    HEAP32[$26 + ($11 << 2) >> 2] = $70 + $68 + $67 | 0;
    var $75 = $bp + ($11 << 2) | 0;
    if (($14 | 0) == ($11 | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 6:
    var $77 = ___gmpn_add_n($28, $bp, $75, $11);
    HEAP32[$28 + ($11 << 2) >> 2] = $77;
    var $79 = ___gmpn_cmp($bp, $75, $11);
    if (($79 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $82 = ___gmpn_sub_n($31, $75, $bp, $11);
    __label__ = 13;
    break;
   case 8:
    var $84 = ___gmpn_sub_n($31, $bp, $75, $11);
    __label__ = 14;
    break;
   case 9:
    var $86 = ___gmpn_add($28, $bp, $11, $75, $14);
    HEAP32[$28 + ($11 << 2) >> 2] = $86;
    var $88 = $bp + ($14 << 2) | 0;
    var $89 = $11 - $14 | 0;
    var $90 = _mpn_zero_p394($88, $89);
    if (($90 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $93 = ___gmpn_cmp($bp, $75, $14);
    if (($93 | 0) < 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $96 = ___gmpn_sub($31, $bp, $11, $75, $14);
    __label__ = 14;
    break;
   case 12:
    var $97 = ___gmpn_sub_n($31, $75, $bp, $14);
    var $scevgep = $30 + (($bn << 2) - 4 - ($10 << 2)) | 0;
    var $105 = ($10 << 1) + 2 - $bn << 2;
    _memset($scevgep, 0, $105, 4);
    __label__ = 13;
    break;
   case 13:
    var $107 = ___gmpn_add($33, $28, $15, $75, $14);
    var $108 = ___gmpn_add($35, $31, $11, $75, $14);
    HEAP32[$35 + ($11 << 2) >> 2] = $108;
    var $bflags_2 = 3;
    __label__ = 24;
    break;
   case 14:
    var $111 = ___gmpn_add($33, $28, $15, $75, $14);
    if (($14 | 0) < ($11 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 15:
    var $114 = $31 + ($14 << 2) | 0;
    var $115 = $11 - $14 | 0;
    var $116 = _mpn_zero_p394($114, $115);
    if (($116 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $119 = ___gmpn_cmp($31, $75, $14);
    if (($119 | 0) < 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $122 = ___gmpn_sub_n($35, $75, $31, $14);
    if (($15 | 0) == ($14 | 0)) {
      var $bflags_2 = 1;
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 18:
    var $125 = ___gmpn_sub($35, $31, $11, $75, $14);
    HEAP32[$35 + ($11 << 2) >> 2] = 0;
    var $bflags_2 = 0;
    __label__ = 24;
    break;
   case 19:
    var $128 = ___gmpn_cmp($31, $75, $11);
    if (($128 | 0) < 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $131 = ___gmpn_sub_n($35, $75, $31, $11);
    var $bflags_1 = 1;
    __label__ = 22;
    break;
   case 21:
    var $133 = ___gmpn_sub($35, $31, $11, $75, $11);
    var $bflags_1 = 0;
    __label__ = 22;
    break;
   case 22:
    var $bflags_1;
    HEAP32[$35 + ($11 << 2) >> 2] = 0;
    var $bflags_2 = $bflags_1;
    __label__ = 24;
    break;
   case 23:
    var $scevgep18 = $34 + (($bn << 2) - 4 - ($10 << 2)) | 0;
    var $143 = ($10 << 1) + 3 - $bn << 2;
    _memset($scevgep18, 0, $143, 4);
    var $bflags_2 = 1;
    __label__ = 24;
    break;
   case 24:
    var $bflags_2;
    var $145 = ___gmpn_add($37, $28, $15, $bp, $11);
    ___gmpn_mul_n($scratch, $22, $33, $15);
    var $146 = $scratch + (($49 | 1) << 2) | 0;
    ___gmpn_mul_n($146, $24, $35, $15);
    var $147 = $scratch + (($29 | 2) << 2) | 0;
    ___gmpn_mul_n($147, $26, $37, $15);
    var $148 = (i64Math.multiply($11, 0, 6, 0), i64Math.result[0]);
    var $_sum = $148 + 3 | 0;
    var $149 = $scratch + ($_sum << 2) | 0;
    ___gmpn_mul_n($149, $20, $31, $11);
    var $151 = HEAP32[$20 + ($11 << 2) >> 2];
    if (($151 | 0) == 1) {
      __label__ = 25;
      break;
    } else if (($151 | 0) == 2) {
      __label__ = 26;
      break;
    } else {
      var $cy_0 = 0;
      __label__ = 27;
      break;
    }
   case 25:
    var $153 = $scratch + ($_sum + $11 << 2) | 0;
    var $154 = ___gmpn_add_n($153, $153, $31, $11);
    var $cy_0 = $154;
    __label__ = 27;
    break;
   case 26:
    var $156 = $scratch + ($_sum + $11 << 2) | 0;
    var $157 = ___gmpn_addmul_1($156, $31, $11, 2);
    var $cy_0 = $157;
    __label__ = 27;
    break;
   case 27:
    var $cy_0;
    HEAP32[$scratch + ($_sum + $49 << 2) >> 2] = $cy_0;
    var $160 = $pp + ($49 << 2) | 0;
    ___gmpn_mul_n($160, $18, $28, $11);
    var $162 = HEAP32[$18 + ($11 << 2) >> 2];
    if (($162 | 0) == 0) {
      __label__ = 28;
      break;
    } else if (($162 | 0) == 1) {
      __label__ = 29;
      break;
    } else if (($162 | 0) == 2) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 28:
    var $cy_1 = 0;
    var $_pre_phi = $28 + ($11 << 2) | 0;
    __label__ = 32;
    break;
   case 29:
    var $164 = $28 + ($11 << 2) | 0;
    var $165 = HEAP32[$164 >> 2];
    var $166 = $pp + ($49 + $11 << 2) | 0;
    var $167 = ___gmpn_add_n($166, $166, $28, $11);
    var $cy_1 = $167 + $165 | 0;
    var $_pre_phi = $164;
    __label__ = 32;
    break;
   case 30:
    var $170 = $28 + ($11 << 2) | 0;
    var $172 = HEAP32[$170 >> 2] << 1;
    var $173 = $pp + ($49 + $11 << 2) | 0;
    var $174 = ___gmpn_addmul_1($173, $28, $11, 2);
    var $cy_1 = $172 + $174 | 0;
    var $_pre_phi = $170;
    __label__ = 32;
    break;
   case 31:
    var $177 = $28 + ($11 << 2) | 0;
    var $178 = HEAP32[$177 >> 2];
    var $179 = (i64Math.multiply($178, 0, $162, 0), i64Math.result[0]);
    var $180 = $pp + ($49 + $11 << 2) | 0;
    var $181 = ___gmpn_addmul_1($180, $28, $11, $162);
    var $cy_1 = $179 + $181 | 0;
    var $_pre_phi = $177;
    __label__ = 32;
    break;
   case 32:
    var $_pre_phi;
    var $cy_1;
    if ((HEAP32[$_pre_phi >> 2] | 0) == 0) {
      var $cy_2 = $cy_1;
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $187 = $pp + ($49 + $11 << 2) | 0;
    var $188 = ___gmpn_add_n($187, $187, $18, $11);
    var $cy_2 = $188 + $cy_1 | 0;
    __label__ = 34;
    break;
   case 34:
    var $cy_2;
    HEAP32[$pp + ($29 << 2) >> 2] = $cy_2;
    ___gmpn_mul_n($pp, $ap, $bp, $11);
    var $193 = $pp + ($148 << 2) | 0;
    if (($13 | 0) > ($14 | 0)) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $195 = ___gmpn_mul($193, $69, $13, $75, $14);
    __label__ = 37;
    break;
   case 36:
    var $197 = ___gmpn_mul($193, $75, $14, $69, $13);
    __label__ = 37;
    break;
   case 37:
    var $199 = $bflags_2 ^ $42;
    var $200 = $13 + $14 | 0;
    var $202 = $scratch + (($11 << 3 | 4) << 2) | 0;
    ___gmpn_toom_interpolate_7pts($pp, $11, $199, $146, $149, $scratch, $147, $200, $202);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom62_mul["X"] = 1;

function ___gmpn_toom63_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($bn << 1 | 0) > ($an | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = $an - 1 | 0;
    var $5 = Math.floor(($4 >>> 0) / 6);
    var $10 = $5;
    __label__ = 5;
    break;
   case 4:
    var $7 = $bn - 1 | 0;
    var $8 = Math.floor(($7 >>> 0) / 3);
    var $10 = $8;
    __label__ = 5;
    break;
   case 5:
    var $10;
    var $11 = $10 + 1 | 0;
    var $12 = (i64Math.multiply($11, 0, 5, 0), i64Math.result[0]);
    var $13 = $an - $12 | 0;
    var $14 = $11 << 1;
    var $15 = $bn - $14 | 0;
    var $16 = $pp + ($12 + 2 << 2) | 0;
    var $17 = (i64Math.multiply($11, 0, 3, 0), i64Math.result[0]);
    var $18 = $pp + ($17 << 2) | 0;
    var $19 = ___gmpn_toom_eval_pm2exp($16, $18, 5, $ap, $11, $13, 2, $pp);
    var $20 = $bp + ($11 << 2) | 0;
    var $21 = ___gmpn_lshift($pp, $20, $11, 2);
    var $22 = $pp + ($11 << 2) | 0;
    HEAP32[$22 >> 2] = $21;
    var $23 = (i64Math.multiply($11, 0, 6, 0), i64Math.result[0]);
    var $_sum1 = $23 + 3 | 0;
    var $24 = $pp + ($_sum1 << 2) | 0;
    var $25 = $bp + ($14 << 2) | 0;
    var $26 = ___gmpn_lshift($24, $25, $15, 4);
    var $27 = $pp + ($_sum1 + $15 << 2) | 0;
    HEAP32[$27 >> 2] = $26;
    var $28 = ($11 | 0) == ($15 | 0);
    if ($28) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $30 = ___gmpn_add_n($24, $24, $bp, $11);
    var $31 = $pp + ($_sum1 + $11 << 2) | 0;
    var $33 = HEAP32[$31 >> 2] + $30 | 0;
    HEAP32[$31 >> 2] = $33;
    __label__ = 8;
    break;
   case 7:
    var $35 = $15 + 1 | 0;
    var $36 = ___gmpn_add($24, $bp, $11, $24, $35);
    HEAP32[$pp + ($_sum1 + $11 << 2) >> 2] = $36;
    __label__ = 8;
    break;
   case 8:
    var $_sum45 = $11 << 2 | 1;
    var $40 = $pp + ($_sum45 << 2) | 0;
    var $41 = $10 + 2 | 0;
    var $42 = _abs_sub_add_n($40, $24, $pp, $41);
    var $43 = $42 ^ $19;
    ___gmpn_mul_n($pp, $18, $40, $41);
    var $44 = $scratch + ($17 + 1 << 2) | 0;
    ___gmpn_mul_n($44, $16, $24, $41);
    var $45 = $14 | 1;
    ___gmpn_toom_couple_handling($44, $45, $pp, $43, $11, 2, 4);
    var $46 = ___gmpn_toom_eval_pm1($16, $18, 5, $ap, $11, $13, $pp);
    var $47 = $scratch + ($23 + 2 << 2) | 0;
    var $48 = ___gmpn_add($47, $bp, $11, $25, $15);
    var $49 = ___gmpn_add_n($24, $47, $20, $11);
    var $51 = $pp + ($_sum1 + $11 << 2) | 0;
    HEAP32[$51 >> 2] = $49 + $48 | 0;
    if (($48 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 9:
    var $54 = ___gmpn_cmp($47, $20, $11);
    if (($54 | 0) < 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $57 = ___gmpn_sub_n($40, $20, $47, $11);
    HEAP32[$pp + ($_sum45 + $11 << 2) >> 2] = 0;
    var $sign_0 = $46 ^ -1;
    __label__ = 12;
    break;
   case 11:
    var $61 = ___gmpn_sub_n($40, $47, $20, $11);
    HEAP32[$pp + ($_sum45 + $11 << 2) >> 2] = $48 - $61 | 0;
    var $sign_0 = $46;
    __label__ = 12;
    break;
   case 12:
    var $sign_0;
    ___gmpn_mul_n($pp, $18, $40, $41);
    ___gmpn_mul_n($scratch, $16, $24, $41);
    ___gmpn_toom_couple_handling($scratch, $45, $pp, $sign_0, $11, 0, 0);
    var $65 = ___gmpn_toom_eval_pm2($16, $18, 5, $ap, $11, $13, $pp);
    var $66 = ___gmpn_lshift($pp, $20, $11, 1);
    HEAP32[$22 >> 2] = $66;
    var $67 = ___gmpn_lshift($24, $25, $15, 2);
    HEAP32[$27 >> 2] = $67;
    if ($28) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $69 = ___gmpn_add_n($24, $24, $bp, $11);
    var $storemerge = HEAP32[$51 >> 2] + $69 | 0;
    __label__ = 15;
    break;
   case 14:
    var $73 = $15 + 1 | 0;
    var $74 = ___gmpn_add($24, $bp, $11, $24, $73);
    var $storemerge = $74;
    __label__ = 15;
    break;
   case 15:
    var $storemerge;
    HEAP32[$51 >> 2] = $storemerge;
    var $76 = _abs_sub_add_n($40, $24, $pp, $41);
    var $77 = $76 ^ $65;
    ___gmpn_mul_n($pp, $18, $40, $41);
    ___gmpn_mul_n($18, $16, $24, $41);
    ___gmpn_toom_couple_handling($18, $45, $pp, $77, $11, 1, 2);
    ___gmpn_mul_n($pp, $ap, $bp, $11);
    var $78 = ($13 | 0) > ($15 | 0);
    var $79 = (i64Math.multiply($11, 0, 7, 0), i64Math.result[0]);
    var $80 = $pp + ($79 << 2) | 0;
    var $81 = $ap + ($12 << 2) | 0;
    if ($78) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $83 = ___gmpn_mul($80, $81, $13, $25, $15);
    __label__ = 18;
    break;
   case 17:
    var $85 = ___gmpn_mul($80, $25, $15, $81, $13);
    __label__ = 18;
    break;
   case 18:
    var $87 = $13 + $15 | 0;
    ___gmpn_toom_interpolate_8pts($pp, $11, $44, $scratch, $87, $47);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom63_mul["X"] = 1;

function _abs_sub_add_n($rm, $rp, $rs, $n) {
  var $1 = _abs_sub_n397($rm, $rp, $rs, $n);
  var $2 = ___gmpn_add_n($rp, $rp, $rs, $n);
  return $1;
}

function _abs_sub_n397($rp, $ap, $bp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_01 = $n;
    __label__ = 3;
    break;
   case 3:
    var $_01;
    var $2 = $_01 - 1 | 0;
    if (($_01 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 0;
      __label__ = 9;
      break;
    }
   case 4:
    var $6 = HEAPU32[$ap + ($2 << 2) >> 2];
    var $8 = HEAPU32[$bp + ($2 << 2) >> 2];
    if (($6 | 0) == ($8 | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ($6 >>> 0 > $8 >>> 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $13 = ___gmpn_sub_n($rp, $ap, $bp, $_01);
    var $_0 = 0;
    __label__ = 9;
    break;
   case 7:
    var $15 = ___gmpn_sub_n($rp, $bp, $ap, $_01);
    var $_0 = -1;
    __label__ = 9;
    break;
   case 8:
    HEAP32[$rp + ($2 << 2) >> 2] = 0;
    var $_01 = $2;
    __label__ = 3;
    break;
   case 9:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom6_sqr($pp, $ap, $an, $scratch) {
  var $1 = $an - 1 | 0;
  var $2 = Math.floor(($1 >>> 0) / 6);
  var $3 = $2 + 1 | 0;
  var $4 = (i64Math.multiply($3, 0, -5, 0), i64Math.result[0]);
  var $5 = $4 + $an | 0;
  var $6 = (i64Math.multiply($3, 0, 9, 0), i64Math.result[0]);
  var $7 = $pp + ($6 + 2 << 2) | 0;
  var $8 = (i64Math.multiply($3, 0, 7, 0), i64Math.result[0]);
  var $9 = $pp + ($8 << 2) | 0;
  var $10 = ___gmpn_toom_eval_pm2rexp($7, $9, 5, $ap, $3, $5, 1, $pp);
  var $11 = $2 + 2 | 0;
  var $12 = $scratch + ($6 + 3 << 2) | 0;
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  ___gmpn_toom2_sqr($scratch, $7, $11, $12);
  var $14 = $3 << 1 | 1;
  ___gmpn_toom_couple_handling($scratch, $14, $pp, 0, $3, 1, 0);
  var $15 = ___gmpn_toom_eval_pm1($7, $9, 5, $ap, $3, $5, $pp);
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  var $16 = (i64Math.multiply($3, 0, 3, 0), i64Math.result[0]);
  var $17 = $scratch + ($16 + 1 << 2) | 0;
  ___gmpn_toom2_sqr($17, $7, $11, $12);
  ___gmpn_toom_couple_handling($17, $14, $pp, 0, $3, 0, 0);
  var $18 = ___gmpn_toom_eval_pm2exp($7, $9, 5, $ap, $3, $5, 2, $pp);
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  var $19 = (i64Math.multiply($3, 0, 6, 0), i64Math.result[0]);
  var $20 = $scratch + ($19 + 2 << 2) | 0;
  ___gmpn_toom2_sqr($20, $7, $11, $12);
  ___gmpn_toom_couple_handling($20, $14, $pp, 0, $3, 2, 4);
  var $21 = ___gmpn_toom_eval_pm2rexp($7, $9, 5, $ap, $3, $5, 2, $pp);
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  var $22 = $pp + ($16 << 2) | 0;
  ___gmpn_toom2_sqr($22, $7, $11, $12);
  ___gmpn_toom_couple_handling($22, $14, $pp, 0, $3, 2, 0);
  var $23 = ___gmpn_toom_eval_pm2($7, $9, 5, $ap, $3, $5, $pp);
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  ___gmpn_toom2_sqr($9, $7, $11, $12);
  ___gmpn_toom_couple_handling($9, $14, $pp, 0, $3, 1, 2);
  ___gmpn_toom2_sqr($pp, $ap, $3, $12);
  var $24 = $5 << 1;
  ___gmpn_toom_interpolate_12pts($pp, $20, $17, $scratch, $3, $24, 0, $12);
  return;
}

function ___gmpn_toom6h_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($an, 0, 17, 0), i64Math.result[0]);
    var $2 = (i64Math.multiply($bn, 0, 18, 0), i64Math.result[0]);
    if (($1 | 0) < ($2 | 0)) {
      var $q_0 = 6;
      var $p_0 = 6;
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = (i64Math.multiply($an, 0, 90, 0), i64Math.result[0]);
    var $6 = (i64Math.multiply($bn, 0, 119, 0), i64Math.result[0]);
    if (($5 | 0) < ($6 | 0)) {
      var $q_0 = 6;
      var $p_0 = 7;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $9 = (i64Math.multiply($an, 0, 85, 0), i64Math.result[0]);
    var $10 = (i64Math.multiply($bn, 0, 126, 0), i64Math.result[0]);
    if (($9 | 0) < ($10 | 0)) {
      var $q_0 = 5;
      var $p_0 = 7;
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $13 = (i64Math.multiply($an, 0, 18, 0), i64Math.result[0]);
    var $14 = (i64Math.multiply($bn, 0, 34, 0), i64Math.result[0]);
    if (($13 | 0) < ($14 | 0)) {
      var $q_0 = 5;
      var $p_0 = 8;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $17 = (i64Math.multiply($bn, 0, 36, 0), i64Math.result[0]);
    var $_ = ($1 | 0) < ($17 | 0) ? 8 : 9;
    var $q_0 = 4;
    var $p_0 = $_;
    __label__ = 7;
    break;
   case 7:
    var $p_0;
    var $q_0;
    var $21 = ($q_0 ^ $p_0) & 1;
    var $22 = (i64Math.multiply($q_0, 0, $an, 0), i64Math.result[0]);
    var $23 = (i64Math.multiply($p_0, 0, $bn, 0), i64Math.result[0]);
    if (($22 | 0) < ($23 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $26 = $an - 1 | 0;
    var $27 = Math.floor(($26 >>> 0) / ($p_0 >>> 0));
    var $32 = $27;
    __label__ = 10;
    break;
   case 9:
    var $29 = $bn - 1 | 0;
    var $30 = Math.floor(($29 >>> 0) / ($q_0 >>> 0));
    var $32 = $30;
    __label__ = 10;
    break;
   case 10:
    var $32;
    var $33 = $32 + 1 | 0;
    var $34 = $p_0 - 1 | 0;
    var $35 = $q_0 - 1 | 0;
    var $36 = (i64Math.multiply($33, 0, $34, 0), i64Math.result[0]);
    var $37 = $an - $36 | 0;
    var $38 = (i64Math.multiply($33, 0, $35, 0), i64Math.result[0]);
    var $39 = $bn - $38 | 0;
    if (($21 | 0) == 0) {
      var $half_0 = 0;
      var $q_1 = $35;
      var $p_1 = $34;
      var $t_0 = $39;
      var $s_0 = $37;
      __label__ = 15;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (($37 | 0) < 1) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $half_0 = 0;
    var $q_1 = $35;
    var $p_1 = $p_0 - 2 | 0;
    var $t_0 = $39;
    var $s_0 = $37 + $33 | 0;
    __label__ = 15;
    break;
   case 13:
    if (($39 | 0) < 1) {
      __label__ = 14;
      break;
    } else {
      var $half_0 = $21;
      var $q_1 = $35;
      var $p_1 = $34;
      var $t_0 = $39;
      var $s_0 = $37;
      __label__ = 15;
      break;
    }
   case 14:
    var $half_0 = 0;
    var $q_1 = $q_0 - 2 | 0;
    var $p_1 = $34;
    var $t_0 = $39 + $33 | 0;
    var $s_0 = $37;
    __label__ = 15;
    break;
   case 15:
    var $s_0;
    var $t_0;
    var $p_1;
    var $q_1;
    var $half_0;
    var $52 = (i64Math.multiply($33, 0, 9, 0), i64Math.result[0]);
    var $53 = $pp + ($52 + 2 << 2) | 0;
    var $54 = (i64Math.multiply($33, 0, 7, 0), i64Math.result[0]);
    var $55 = $pp + ($54 << 2) | 0;
    var $56 = ___gmpn_toom_eval_pm2rexp($53, $55, $p_1, $ap, $33, $s_0, 1, $pp);
    var $57 = $scratch + ($52 + 3 << 2) | 0;
    var $59 = $pp + (($33 << 3 | 1) << 2) | 0;
    var $60 = ___gmpn_toom_eval_pm2rexp($57, $59, $q_1, $bp, $33, $t_0, 1, $pp);
    var $61 = $60 ^ $56;
    var $62 = $32 + 2 | 0;
    var $63 = ($62 | 0) > 99;
    if ($63) {
      __label__ = 16;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 16:
    if (($62 | 0) > 299) {
      __label__ = 17;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 17:
    var $67 = ($62 | 0) > 349;
    var $68 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $69 = $scratch + ($68 + 4 << 2) | 0;
    if ($67) {
      __label__ = 18;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 18:
    ___gmpn_toom6h_mul($pp, $55, $62, $59, $62, $69);
    var $82 = $69;
    __label__ = 23;
    break;
   case 19:
    var $71 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $72 = $scratch + ($71 + 4 << 2) | 0;
    ___gmpn_toom22_mul($pp, $55, $62, $59, $62, $72);
    ___gmpn_toom22_mul($scratch, $53, $62, $57, $62, $72);
    __label__ = 24;
    break;
   case 20:
    var $74 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $75 = $scratch + ($74 + 4 << 2) | 0;
    ___gmpn_toom33_mul($pp, $55, $62, $59, $62, $75);
    ___gmpn_toom33_mul($scratch, $53, $62, $57, $62, $75);
    __label__ = 24;
    break;
   case 21:
    ___gmpn_toom44_mul($pp, $55, $62, $59, $62, $69);
    var $77 = ($62 | 0) > 349;
    var $78 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $79 = $scratch + ($78 + 4 << 2) | 0;
    if ($77) {
      var $82 = $79;
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    ___gmpn_toom44_mul($scratch, $53, $62, $57, $62, $79);
    __label__ = 24;
    break;
   case 23:
    var $82;
    ___gmpn_toom6h_mul($scratch, $53, $62, $57, $62, $82);
    __label__ = 24;
    break;
   case 24:
    var $85 = $33 << 1 | 1;
    var $86 = $half_0 + 1 | 0;
    ___gmpn_toom_couple_handling($scratch, $85, $pp, $61, $33, $86, $half_0);
    var $87 = ___gmpn_toom_eval_pm1($53, $55, $p_1, $ap, $33, $s_0, $pp);
    if (($q_1 | 0) == 3) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $90 = ___gmpn_toom_eval_dgr3_pm1($57, $59, $bp, $33, $t_0, $pp);
    var $_pn = $90;
    __label__ = 27;
    break;
   case 26:
    var $92 = ___gmpn_toom_eval_pm1($57, $59, $q_1, $bp, $33, $t_0, $pp);
    var $_pn = $92;
    __label__ = 27;
    break;
   case 27:
    var $_pn;
    var $sign_0 = $_pn ^ $87;
    if ($63) {
      __label__ = 28;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 28:
    if (($62 | 0) > 299) {
      __label__ = 29;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 29:
    var $97 = ($62 | 0) > 349;
    var $98 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $99 = $scratch + ($98 + 4 << 2) | 0;
    if ($97) {
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    ___gmpn_toom44_mul($pp, $55, $62, $59, $62, $99);
    __label__ = 34;
    break;
   case 31:
    ___gmpn_toom6h_mul($pp, $55, $62, $59, $62, $99);
    __label__ = 34;
    break;
   case 32:
    var $101 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $102 = $scratch + ($101 + 4 << 2) | 0;
    ___gmpn_toom22_mul($pp, $55, $62, $59, $62, $102);
    var $103 = (i64Math.multiply($33, 0, 3, 0), i64Math.result[0]);
    var $104 = $scratch + ($103 + 1 << 2) | 0;
    ___gmpn_toom22_mul($104, $53, $62, $57, $62, $102);
    __label__ = 37;
    break;
   case 33:
    var $106 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $107 = $scratch + ($106 + 4 << 2) | 0;
    ___gmpn_toom33_mul($pp, $55, $62, $59, $62, $107);
    var $108 = (i64Math.multiply($33, 0, 3, 0), i64Math.result[0]);
    var $109 = $scratch + ($108 + 1 << 2) | 0;
    ___gmpn_toom33_mul($109, $53, $62, $57, $62, $107);
    __label__ = 37;
    break;
   case 34:
    var $111 = ($62 | 0) > 349;
    var $112 = (i64Math.multiply($33, 0, 3, 0), i64Math.result[0]);
    var $113 = $scratch + ($112 + 1 << 2) | 0;
    var $114 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $115 = $scratch + ($114 + 4 << 2) | 0;
    if ($111) {
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    ___gmpn_toom44_mul($113, $53, $62, $57, $62, $115);
    __label__ = 37;
    break;
   case 36:
    ___gmpn_toom6h_mul($113, $53, $62, $57, $62, $115);
    __label__ = 37;
    break;
   case 37:
    var $119 = (i64Math.multiply($33, 0, 3, 0), i64Math.result[0]);
    var $120 = $scratch + ($119 + 1 << 2) | 0;
    ___gmpn_toom_couple_handling($120, $85, $pp, $sign_0, $33, 0, 0);
    var $121 = ___gmpn_toom_eval_pm2exp($53, $55, $p_1, $ap, $33, $s_0, 2, $pp);
    var $122 = ___gmpn_toom_eval_pm2exp($57, $59, $q_1, $bp, $33, $t_0, 2, $pp);
    var $123 = $122 ^ $121;
    if ($63) {
      __label__ = 38;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 38:
    if (($62 | 0) > 299) {
      __label__ = 39;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 39:
    var $127 = ($62 | 0) > 349;
    var $128 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $129 = $scratch + ($128 + 4 << 2) | 0;
    if ($127) {
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    ___gmpn_toom44_mul($pp, $55, $62, $59, $62, $129);
    __label__ = 44;
    break;
   case 41:
    ___gmpn_toom6h_mul($pp, $55, $62, $59, $62, $129);
    __label__ = 44;
    break;
   case 42:
    var $131 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $132 = $scratch + ($131 + 4 << 2) | 0;
    ___gmpn_toom22_mul($pp, $55, $62, $59, $62, $132);
    var $133 = (i64Math.multiply($33, 0, 6, 0), i64Math.result[0]);
    var $134 = $scratch + ($133 + 2 << 2) | 0;
    ___gmpn_toom22_mul($134, $53, $62, $57, $62, $132);
    __label__ = 47;
    break;
   case 43:
    var $136 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $137 = $scratch + ($136 + 4 << 2) | 0;
    ___gmpn_toom33_mul($pp, $55, $62, $59, $62, $137);
    var $138 = (i64Math.multiply($33, 0, 6, 0), i64Math.result[0]);
    var $139 = $scratch + ($138 + 2 << 2) | 0;
    ___gmpn_toom33_mul($139, $53, $62, $57, $62, $137);
    __label__ = 47;
    break;
   case 44:
    var $141 = ($62 | 0) > 349;
    var $142 = (i64Math.multiply($33, 0, 6, 0), i64Math.result[0]);
    var $143 = $scratch + ($142 + 2 << 2) | 0;
    var $144 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $145 = $scratch + ($144 + 4 << 2) | 0;
    if ($141) {
      __label__ = 46;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    ___gmpn_toom44_mul($143, $53, $62, $57, $62, $145);
    __label__ = 47;
    break;
   case 46:
    ___gmpn_toom6h_mul($143, $53, $62, $57, $62, $145);
    __label__ = 47;
    break;
   case 47:
    var $149 = (i64Math.multiply($33, 0, 6, 0), i64Math.result[0]);
    var $150 = $scratch + ($149 + 2 << 2) | 0;
    ___gmpn_toom_couple_handling($150, $85, $pp, $123, $33, 2, 4);
    var $151 = ___gmpn_toom_eval_pm2rexp($53, $55, $p_1, $ap, $33, $s_0, 2, $pp);
    var $152 = ___gmpn_toom_eval_pm2rexp($57, $59, $q_1, $bp, $33, $t_0, 2, $pp);
    var $153 = $152 ^ $151;
    if ($63) {
      __label__ = 48;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 48:
    if (($62 | 0) > 299) {
      __label__ = 49;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 49:
    var $157 = ($62 | 0) > 349;
    var $158 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $159 = $scratch + ($158 + 4 << 2) | 0;
    if ($157) {
      __label__ = 50;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 50:
    ___gmpn_toom6h_mul($pp, $55, $62, $59, $62, $159);
    var $177 = $pp + ($119 << 2) | 0;
    var $176 = $159;
    __label__ = 55;
    break;
   case 51:
    var $162 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $163 = $scratch + ($162 + 4 << 2) | 0;
    ___gmpn_toom22_mul($pp, $55, $62, $59, $62, $163);
    var $164 = $pp + ($119 << 2) | 0;
    ___gmpn_toom22_mul($164, $53, $62, $57, $62, $163);
    var $_pre_phi = $164;
    __label__ = 56;
    break;
   case 52:
    var $166 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $167 = $scratch + ($166 + 4 << 2) | 0;
    ___gmpn_toom33_mul($pp, $55, $62, $59, $62, $167);
    var $168 = $pp + ($119 << 2) | 0;
    ___gmpn_toom33_mul($168, $53, $62, $57, $62, $167);
    var $_pre_phi = $168;
    __label__ = 56;
    break;
   case 53:
    ___gmpn_toom44_mul($pp, $55, $62, $59, $62, $159);
    var $170 = ($62 | 0) > 349;
    var $171 = $pp + ($119 << 2) | 0;
    var $172 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $173 = $scratch + ($172 + 4 << 2) | 0;
    if ($170) {
      var $177 = $171;
      var $176 = $173;
      __label__ = 55;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    ___gmpn_toom44_mul($171, $53, $62, $57, $62, $173);
    var $_pre_phi = $171;
    __label__ = 56;
    break;
   case 55:
    var $176;
    var $177;
    ___gmpn_toom6h_mul($177, $53, $62, $57, $62, $176);
    var $_pre_phi = $pp + ($119 << 2) | 0;
    __label__ = 56;
    break;
   case 56:
    var $_pre_phi;
    ___gmpn_toom_couple_handling($_pre_phi, $85, $pp, $153, $33, $86 << 1, $half_0 << 1);
    var $181 = ___gmpn_toom_eval_pm2($53, $55, $p_1, $ap, $33, $s_0, $pp);
    var $182 = ___gmpn_toom_eval_pm2($57, $59, $q_1, $bp, $33, $t_0, $pp);
    var $183 = $182 ^ $181;
    if ($63) {
      __label__ = 57;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 57:
    if (($62 | 0) > 299) {
      __label__ = 58;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 58:
    var $187 = ($62 | 0) > 349;
    var $188 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $189 = $scratch + ($188 + 4 << 2) | 0;
    if ($187) {
      __label__ = 59;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 59:
    ___gmpn_toom6h_mul($pp, $55, $62, $59, $62, $189);
    var $202 = $189;
    __label__ = 64;
    break;
   case 60:
    var $191 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $192 = $scratch + ($191 + 4 << 2) | 0;
    ___gmpn_toom22_mul($pp, $55, $62, $59, $62, $192);
    ___gmpn_toom22_mul($55, $53, $62, $57, $62, $192);
    __label__ = 65;
    break;
   case 61:
    var $194 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $195 = $scratch + ($194 + 4 << 2) | 0;
    ___gmpn_toom33_mul($pp, $55, $62, $59, $62, $195);
    ___gmpn_toom33_mul($55, $53, $62, $57, $62, $195);
    __label__ = 65;
    break;
   case 62:
    ___gmpn_toom44_mul($pp, $55, $62, $59, $62, $189);
    var $197 = ($62 | 0) > 349;
    var $198 = (i64Math.multiply($33, 0, 10, 0), i64Math.result[0]);
    var $199 = $scratch + ($198 + 4 << 2) | 0;
    if ($197) {
      var $202 = $199;
      __label__ = 64;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    ___gmpn_toom44_mul($55, $53, $62, $57, $62, $199);
    __label__ = 65;
    break;
   case 64:
    var $202;
    ___gmpn_toom6h_mul($55, $53, $62, $57, $62, $202);
    __label__ = 65;
    break;
   case 65:
    ___gmpn_toom_couple_handling($55, $85, $pp, $183, $33, 1, 2);
    if (($33 | 0) > 99) {
      __label__ = 67;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    ___gmpn_toom22_mul($pp, $ap, $33, $bp, $33, $57);
    __label__ = 72;
    break;
   case 67:
    if (($33 | 0) > 299) {
      __label__ = 69;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    ___gmpn_toom33_mul($pp, $ap, $33, $bp, $33, $57);
    __label__ = 72;
    break;
   case 69:
    if (($33 | 0) > 349) {
      __label__ = 71;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    ___gmpn_toom44_mul($pp, $ap, $33, $bp, $33, $57);
    __label__ = 72;
    break;
   case 71:
    ___gmpn_toom6h_mul($pp, $ap, $33, $bp, $33, $57);
    __label__ = 72;
    break;
   case 72:
    if (($half_0 | 0) == 0) {
      __label__ = 76;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $216 = ($s_0 | 0) > ($t_0 | 0);
    var $217 = (i64Math.multiply($33, 0, 11, 0), i64Math.result[0]);
    var $218 = $pp + ($217 << 2) | 0;
    if ($216) {
      __label__ = 74;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 74:
    var $220 = (i64Math.multiply($p_1, 0, $33, 0), i64Math.result[0]);
    var $221 = $ap + ($220 << 2) | 0;
    var $222 = (i64Math.multiply($q_1, 0, $33, 0), i64Math.result[0]);
    var $223 = $bp + ($222 << 2) | 0;
    var $224 = ___gmpn_mul($218, $221, $s_0, $223, $t_0);
    __label__ = 76;
    break;
   case 75:
    var $226 = (i64Math.multiply($q_1, 0, $33, 0), i64Math.result[0]);
    var $227 = $bp + ($226 << 2) | 0;
    var $228 = (i64Math.multiply($p_1, 0, $33, 0), i64Math.result[0]);
    var $229 = $ap + ($228 << 2) | 0;
    var $230 = ___gmpn_mul($218, $227, $t_0, $229, $s_0);
    __label__ = 76;
    break;
   case 76:
    ___gmpn_toom_interpolate_12pts($pp, $150, $120, $scratch, $33, $t_0 + $s_0 | 0, $half_0, $57);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom6h_mul["X"] = 1;

function ___gmpn_toom8_sqr($pp, $ap, $an, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = $an - 1 >> 3;
    var $3 = $2 + 1 | 0;
    var $4 = (i64Math.multiply($3, 0, 7, 0), i64Math.result[0]);
    var $5 = $an - $4 | 0;
    var $6 = (i64Math.multiply($3, 0, 13, 0), i64Math.result[0]);
    var $7 = $pp + ($6 + 2 << 2) | 0;
    var $8 = (i64Math.multiply($3, 0, 11, 0), i64Math.result[0]);
    var $9 = $pp + ($8 << 2) | 0;
    var $10 = ___gmpn_toom_eval_pm2rexp($7, $9, 7, $ap, $3, $5, 3, $pp);
    var $11 = $2 + 2 | 0;
    var $12 = ($11 | 0) > 119;
    if ($12) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($11 | 0) > 399) {
      __label__ = 4;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 4:
    var $16 = ($11 | 0) > 449;
    var $17 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $18 = $scratch + ($17 + 4 << 2) | 0;
    if ($16) {
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 5:
    ___gmpn_toom8_sqr($pp, $9, $11, $18);
    var $31 = $18;
    __label__ = 10;
    break;
   case 6:
    var $20 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $21 = $scratch + ($20 + 4 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $21);
    ___gmpn_toom2_sqr($scratch, $7, $11, $21);
    __label__ = 11;
    break;
   case 7:
    var $23 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $24 = $scratch + ($23 + 4 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $24);
    ___gmpn_toom3_sqr($scratch, $7, $11, $24);
    __label__ = 11;
    break;
   case 8:
    ___gmpn_toom6_sqr($pp, $9, $11, $18);
    var $26 = ($11 | 0) > 449;
    var $27 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $28 = $scratch + ($27 + 4 << 2) | 0;
    if ($26) {
      var $31 = $28;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmpn_toom6_sqr($scratch, $7, $11, $28);
    __label__ = 11;
    break;
   case 10:
    var $31;
    ___gmpn_toom8_sqr($scratch, $7, $11, $31);
    __label__ = 11;
    break;
   case 11:
    var $34 = $3 << 1 | 1;
    var $35 = $34 + 1 | 0;
    ___gmpn_toom_couple_handling($scratch, $35, $pp, 0, $3, 3, 0);
    var $36 = ___gmpn_toom_eval_pm2rexp($7, $9, 7, $ap, $3, $5, 2, $pp);
    if ($12) {
      __label__ = 12;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 12:
    if (($11 | 0) > 399) {
      __label__ = 13;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 13:
    var $40 = ($11 | 0) > 449;
    var $41 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $42 = $scratch + ($41 + 4 << 2) | 0;
    if ($40) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    ___gmpn_toom8_sqr($pp, $9, $11, $42);
    __label__ = 18;
    break;
   case 15:
    ___gmpn_toom6_sqr($pp, $9, $11, $42);
    __label__ = 18;
    break;
   case 16:
    var $44 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $45 = $scratch + ($44 + 4 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $45);
    var $46 = (i64Math.multiply($3, 0, 3, 0), i64Math.result[0]);
    var $47 = $scratch + ($46 + 1 << 2) | 0;
    ___gmpn_toom2_sqr($47, $7, $11, $45);
    __label__ = 21;
    break;
   case 17:
    var $49 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $50 = $scratch + ($49 + 4 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $50);
    var $51 = (i64Math.multiply($3, 0, 3, 0), i64Math.result[0]);
    var $52 = $scratch + ($51 + 1 << 2) | 0;
    ___gmpn_toom3_sqr($52, $7, $11, $50);
    __label__ = 21;
    break;
   case 18:
    var $54 = ($11 | 0) > 449;
    var $55 = (i64Math.multiply($3, 0, 3, 0), i64Math.result[0]);
    var $56 = $scratch + ($55 + 1 << 2) | 0;
    var $57 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $58 = $scratch + ($57 + 4 << 2) | 0;
    if ($54) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    ___gmpn_toom6_sqr($56, $7, $11, $58);
    __label__ = 21;
    break;
   case 20:
    ___gmpn_toom8_sqr($56, $7, $11, $58);
    __label__ = 21;
    break;
   case 21:
    var $62 = (i64Math.multiply($3, 0, 3, 0), i64Math.result[0]);
    var $63 = $scratch + ($62 + 1 << 2) | 0;
    ___gmpn_toom_couple_handling($63, $34, $pp, 0, $3, 2, 0);
    var $64 = ___gmpn_toom_eval_pm2($7, $9, 7, $ap, $3, $5, $pp);
    if ($12) {
      __label__ = 22;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 22:
    if (($11 | 0) > 399) {
      __label__ = 23;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 23:
    var $68 = ($11 | 0) > 449;
    var $69 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $70 = $scratch + ($69 + 4 << 2) | 0;
    if ($68) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    ___gmpn_toom8_sqr($pp, $9, $11, $70);
    __label__ = 28;
    break;
   case 25:
    ___gmpn_toom6_sqr($pp, $9, $11, $70);
    __label__ = 28;
    break;
   case 26:
    var $72 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $73 = $scratch + ($72 + 4 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $73);
    var $74 = (i64Math.multiply($3, 0, 6, 0), i64Math.result[0]);
    var $75 = $scratch + ($74 + 2 << 2) | 0;
    ___gmpn_toom2_sqr($75, $7, $11, $73);
    __label__ = 31;
    break;
   case 27:
    var $77 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $78 = $scratch + ($77 + 4 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $78);
    var $79 = (i64Math.multiply($3, 0, 6, 0), i64Math.result[0]);
    var $80 = $scratch + ($79 + 2 << 2) | 0;
    ___gmpn_toom3_sqr($80, $7, $11, $78);
    __label__ = 31;
    break;
   case 28:
    var $82 = ($11 | 0) > 449;
    var $83 = (i64Math.multiply($3, 0, 6, 0), i64Math.result[0]);
    var $84 = $scratch + ($83 + 2 << 2) | 0;
    var $85 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $86 = $scratch + ($85 + 4 << 2) | 0;
    if ($82) {
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    ___gmpn_toom6_sqr($84, $7, $11, $86);
    __label__ = 31;
    break;
   case 30:
    ___gmpn_toom8_sqr($84, $7, $11, $86);
    __label__ = 31;
    break;
   case 31:
    var $90 = (i64Math.multiply($3, 0, 6, 0), i64Math.result[0]);
    var $91 = $scratch + ($90 + 2 << 2) | 0;
    ___gmpn_toom_couple_handling($91, $34, $pp, 0, $3, 1, 2);
    var $92 = ___gmpn_toom_eval_pm2exp($7, $9, 7, $ap, $3, $5, 3, $pp);
    if ($12) {
      __label__ = 32;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 32:
    if (($11 | 0) > 399) {
      __label__ = 33;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 33:
    var $96 = ($11 | 0) > 449;
    var $97 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $98 = $scratch + ($97 + 4 << 2) | 0;
    if ($96) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    ___gmpn_toom8_sqr($pp, $9, $11, $98);
    __label__ = 38;
    break;
   case 35:
    ___gmpn_toom6_sqr($pp, $9, $11, $98);
    __label__ = 38;
    break;
   case 36:
    var $100 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $101 = $scratch + ($100 + 4 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $101);
    var $102 = (i64Math.multiply($3, 0, 9, 0), i64Math.result[0]);
    var $103 = $scratch + ($102 + 3 << 2) | 0;
    ___gmpn_toom2_sqr($103, $7, $11, $101);
    __label__ = 41;
    break;
   case 37:
    var $105 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $106 = $scratch + ($105 + 4 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $106);
    var $107 = (i64Math.multiply($3, 0, 9, 0), i64Math.result[0]);
    var $108 = $scratch + ($107 + 3 << 2) | 0;
    ___gmpn_toom3_sqr($108, $7, $11, $106);
    __label__ = 41;
    break;
   case 38:
    var $110 = ($11 | 0) > 449;
    var $111 = (i64Math.multiply($3, 0, 9, 0), i64Math.result[0]);
    var $112 = $scratch + ($111 + 3 << 2) | 0;
    var $113 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $114 = $scratch + ($113 + 4 << 2) | 0;
    if ($110) {
      __label__ = 40;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    ___gmpn_toom6_sqr($112, $7, $11, $114);
    __label__ = 41;
    break;
   case 40:
    ___gmpn_toom8_sqr($112, $7, $11, $114);
    __label__ = 41;
    break;
   case 41:
    var $118 = (i64Math.multiply($3, 0, 9, 0), i64Math.result[0]);
    var $119 = $scratch + ($118 + 3 << 2) | 0;
    ___gmpn_toom_couple_handling($119, $35, $pp, 0, $3, 3, 6);
    var $120 = ___gmpn_toom_eval_pm2rexp($7, $9, 7, $ap, $3, $5, 1, $pp);
    if ($12) {
      __label__ = 42;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 42:
    if (($11 | 0) > 399) {
      __label__ = 43;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 43:
    var $124 = ($11 | 0) > 449;
    var $125 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $126 = $scratch + ($125 + 4 << 2) | 0;
    if ($124) {
      __label__ = 44;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 44:
    ___gmpn_toom8_sqr($pp, $9, $11, $126);
    var $144 = $pp + ($62 << 2) | 0;
    var $143 = $126;
    __label__ = 49;
    break;
   case 45:
    var $129 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $130 = $scratch + ($129 + 4 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $130);
    var $131 = $pp + ($62 << 2) | 0;
    ___gmpn_toom2_sqr($131, $7, $11, $130);
    var $_pre_phi = $131;
    __label__ = 50;
    break;
   case 46:
    var $133 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $134 = $scratch + ($133 + 4 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $134);
    var $135 = $pp + ($62 << 2) | 0;
    ___gmpn_toom3_sqr($135, $7, $11, $134);
    var $_pre_phi = $135;
    __label__ = 50;
    break;
   case 47:
    ___gmpn_toom6_sqr($pp, $9, $11, $126);
    var $137 = ($11 | 0) > 449;
    var $138 = $pp + ($62 << 2) | 0;
    var $139 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $140 = $scratch + ($139 + 4 << 2) | 0;
    if ($137) {
      var $144 = $138;
      var $143 = $140;
      __label__ = 49;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    ___gmpn_toom6_sqr($138, $7, $11, $140);
    var $_pre_phi = $138;
    __label__ = 50;
    break;
   case 49:
    var $143;
    var $144;
    ___gmpn_toom8_sqr($144, $7, $11, $143);
    var $_pre_phi = $pp + ($62 << 2) | 0;
    __label__ = 50;
    break;
   case 50:
    var $_pre_phi;
    ___gmpn_toom_couple_handling($_pre_phi, $34, $pp, 0, $3, 1, 0);
    var $146 = ___gmpn_toom_eval_pm1($7, $9, 7, $ap, $3, $5, $pp);
    if ($12) {
      __label__ = 51;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 51:
    if (($11 | 0) > 399) {
      __label__ = 52;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 52:
    var $150 = ($11 | 0) > 449;
    var $151 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $152 = $scratch + ($151 + 4 << 2) | 0;
    if ($150) {
      __label__ = 53;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 53:
    ___gmpn_toom8_sqr($pp, $9, $11, $152);
    var $170 = $pp + ($4 << 2) | 0;
    var $169 = $152;
    __label__ = 58;
    break;
   case 54:
    var $155 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $156 = $scratch + ($155 + 4 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $156);
    var $157 = $pp + ($4 << 2) | 0;
    ___gmpn_toom2_sqr($157, $7, $11, $156);
    var $_pre_phi9 = $157;
    __label__ = 59;
    break;
   case 55:
    var $159 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $160 = $scratch + ($159 + 4 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $160);
    var $161 = $pp + ($4 << 2) | 0;
    ___gmpn_toom3_sqr($161, $7, $11, $160);
    var $_pre_phi9 = $161;
    __label__ = 59;
    break;
   case 56:
    ___gmpn_toom6_sqr($pp, $9, $11, $152);
    var $163 = ($11 | 0) > 449;
    var $164 = $pp + ($4 << 2) | 0;
    var $165 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $166 = $scratch + ($165 + 4 << 2) | 0;
    if ($163) {
      var $170 = $164;
      var $169 = $166;
      __label__ = 58;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    ___gmpn_toom6_sqr($164, $7, $11, $166);
    var $_pre_phi9 = $164;
    __label__ = 59;
    break;
   case 58:
    var $169;
    var $170;
    ___gmpn_toom8_sqr($170, $7, $11, $169);
    var $_pre_phi9 = $pp + ($4 << 2) | 0;
    __label__ = 59;
    break;
   case 59:
    var $_pre_phi9;
    ___gmpn_toom_couple_handling($_pre_phi9, $34, $pp, 0, $3, 0, 0);
    var $172 = ___gmpn_toom_eval_pm2exp($7, $9, 7, $ap, $3, $5, 2, $pp);
    if ($12) {
      __label__ = 60;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 60:
    if (($11 | 0) > 399) {
      __label__ = 61;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 61:
    var $176 = ($11 | 0) > 449;
    var $177 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $178 = $scratch + ($177 + 4 << 2) | 0;
    if ($176) {
      __label__ = 62;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 62:
    ___gmpn_toom8_sqr($pp, $9, $11, $178);
    var $191 = $178;
    __label__ = 67;
    break;
   case 63:
    var $180 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $181 = $scratch + ($180 + 4 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $181);
    ___gmpn_toom2_sqr($9, $7, $11, $181);
    __label__ = 68;
    break;
   case 64:
    var $183 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $184 = $scratch + ($183 + 4 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $184);
    ___gmpn_toom3_sqr($9, $7, $11, $184);
    __label__ = 68;
    break;
   case 65:
    ___gmpn_toom6_sqr($pp, $9, $11, $178);
    var $186 = ($11 | 0) > 449;
    var $187 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $188 = $scratch + ($187 + 4 << 2) | 0;
    if ($186) {
      var $191 = $188;
      __label__ = 67;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    ___gmpn_toom6_sqr($9, $7, $11, $188);
    __label__ = 68;
    break;
   case 67:
    var $191;
    ___gmpn_toom8_sqr($9, $7, $11, $191);
    __label__ = 68;
    break;
   case 68:
    ___gmpn_toom_couple_handling($9, $34, $pp, 0, $3, 2, 4);
    if (($3 | 0) > 119) {
      __label__ = 70;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 69:
    var $195 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $196 = $scratch + ($195 + 4 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $ap, $3, $196);
    __label__ = 75;
    break;
   case 70:
    if (($3 | 0) > 399) {
      __label__ = 72;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $200 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $201 = $scratch + ($200 + 4 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $ap, $3, $201);
    __label__ = 75;
    break;
   case 72:
    var $203 = ($3 | 0) > 449;
    var $204 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $205 = $scratch + ($204 + 4 << 2) | 0;
    if ($203) {
      __label__ = 74;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    ___gmpn_toom6_sqr($pp, $ap, $3, $205);
    __label__ = 75;
    break;
   case 74:
    ___gmpn_toom8_sqr($pp, $ap, $3, $205);
    __label__ = 75;
    break;
   case 75:
    var $209 = $5 << 1;
    var $210 = (i64Math.multiply($3, 0, 12, 0), i64Math.result[0]);
    var $211 = $scratch + ($210 + 4 << 2) | 0;
    ___gmpn_toom_interpolate_16pts($pp, $119, $91, $63, $scratch, $3, $209, 0, $211);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom8_sqr["X"] = 1;

function ___gmpn_toom8h_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($an | 0) == ($bn | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = (i64Math.multiply($an, 0, 10, 0), i64Math.result[0]);
    var $4 = $bn >> 1;
    var $5 = (i64Math.multiply($4, 0, 21, 0), i64Math.result[0]);
    if (($3 | 0) < ($5 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $10 = ($an - 1 >> 3) + 1 | 0;
    var $11 = (i64Math.multiply($10, 0, 7, 0), i64Math.result[0]);
    var $half_0 = 0;
    var $q_1 = 7;
    var $p_1 = 7;
    var $t_0 = $bn - $11 | 0;
    var $s_0 = $an - $11 | 0;
    var $n_0 = $10;
    __label__ = 18;
    break;
   case 5:
    var $15 = (i64Math.multiply($an, 0, 13, 0), i64Math.result[0]);
    if (($15 | 0) < ($bn << 4 | 0)) {
      var $q_0 = 8;
      var $p_0 = 9;
      __label__ = 10;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $19 = (i64Math.multiply($4, 0, 27, 0), i64Math.result[0]);
    if (($3 | 0) < ($19 | 0)) {
      var $q_0 = 7;
      var $p_0 = 9;
      __label__ = 10;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $22 = (i64Math.multiply($4, 0, 33, 0), i64Math.result[0]);
    if (($3 | 0) < ($22 | 0)) {
      var $q_0 = 7;
      var $p_0 = 10;
      __label__ = 10;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $25 = $an << 2;
    var $26 = (i64Math.multiply($bn, 0, 7, 0), i64Math.result[0]);
    if (($25 | 0) < ($26 | 0)) {
      var $q_0 = 6;
      var $p_0 = 10;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $29 = (i64Math.multiply($an, 0, 6, 0), i64Math.result[0]);
    var $30 = (i64Math.multiply($bn, 0, 13, 0), i64Math.result[0]);
    var $_ = ($29 | 0) < ($30 | 0) ? 6 : 5;
    var $q_0 = $_;
    var $p_0 = 11;
    __label__ = 10;
    break;
   case 10:
    var $p_0;
    var $q_0;
    var $34 = $q_0 + $p_0 & 1;
    var $35 = (i64Math.multiply($q_0, 0, $an, 0), i64Math.result[0]);
    var $36 = (i64Math.multiply($p_0, 0, $bn, 0), i64Math.result[0]);
    if (($35 | 0) < ($36 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $39 = $an - 1 | 0;
    var $40 = Math.floor(($39 >>> 0) / ($p_0 >>> 0));
    var $45 = $40;
    __label__ = 13;
    break;
   case 12:
    var $42 = $bn - 1 | 0;
    var $43 = Math.floor(($42 >>> 0) / ($q_0 >>> 0));
    var $45 = $43;
    __label__ = 13;
    break;
   case 13:
    var $45;
    var $46 = $45 + 1 | 0;
    var $47 = $p_0 - 1 | 0;
    var $48 = $q_0 - 1 | 0;
    var $49 = (i64Math.multiply($46, 0, $47, 0), i64Math.result[0]);
    var $50 = $an - $49 | 0;
    var $51 = (i64Math.multiply($46, 0, $48, 0), i64Math.result[0]);
    var $52 = $bn - $51 | 0;
    if (($34 | 0) == 0) {
      var $half_0 = 0;
      var $q_1 = $48;
      var $p_1 = $47;
      var $t_0 = $52;
      var $s_0 = $50;
      var $n_0 = $46;
      __label__ = 18;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if (($50 | 0) < 1) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $half_0 = 0;
    var $q_1 = $48;
    var $p_1 = $p_0 - 2 | 0;
    var $t_0 = $52;
    var $s_0 = $50 + $46 | 0;
    var $n_0 = $46;
    __label__ = 18;
    break;
   case 16:
    if (($52 | 0) < 1) {
      __label__ = 17;
      break;
    } else {
      var $half_0 = $34;
      var $q_1 = $48;
      var $p_1 = $47;
      var $t_0 = $52;
      var $s_0 = $50;
      var $n_0 = $46;
      __label__ = 18;
      break;
    }
   case 17:
    var $half_0 = 0;
    var $q_1 = $q_0 - 2 | 0;
    var $p_1 = $47;
    var $t_0 = $52 + $46 | 0;
    var $s_0 = $50;
    var $n_0 = $46;
    __label__ = 18;
    break;
   case 18:
    var $n_0;
    var $s_0;
    var $t_0;
    var $p_1;
    var $q_1;
    var $half_0;
    var $65 = (i64Math.multiply($n_0, 0, 13, 0), i64Math.result[0]);
    var $66 = $pp + ($65 + 2 << 2) | 0;
    var $67 = (i64Math.multiply($n_0, 0, 11, 0), i64Math.result[0]);
    var $68 = $pp + ($67 << 2) | 0;
    var $69 = ___gmpn_toom_eval_pm2rexp($66, $68, $p_1, $ap, $n_0, $s_0, 3, $pp);
    var $70 = (i64Math.multiply($n_0, 0, 12, 0), i64Math.result[0]);
    var $71 = $scratch + ($70 + 4 << 2) | 0;
    var $72 = $pp + (($70 | 1) << 2) | 0;
    var $73 = ___gmpn_toom_eval_pm2rexp($71, $72, $q_1, $bp, $n_0, $t_0, 3, $pp);
    var $74 = $73 ^ $69;
    var $75 = $n_0 + 1 | 0;
    var $76 = ($75 | 0) > 99;
    if ($76) {
      __label__ = 19;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 19:
    if (($75 | 0) > 299) {
      __label__ = 20;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 20:
    var $81 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      __label__ = 21;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 21:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $81);
    var $91 = $81;
    __label__ = 26;
    break;
   case 22:
    var $83 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $83);
    ___gmpn_toom22_mul($scratch, $66, $75, $71, $75, $83);
    __label__ = 27;
    break;
   case 23:
    var $85 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $85);
    ___gmpn_toom33_mul($scratch, $66, $75, $71, $75, $85);
    __label__ = 27;
    break;
   case 24:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $81);
    var $88 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      var $91 = $88;
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    ___gmpn_toom44_mul($scratch, $66, $75, $71, $75, $88);
    __label__ = 27;
    break;
   case 26:
    var $91;
    ___gmpn_toom6h_mul($scratch, $66, $75, $71, $75, $91);
    __label__ = 27;
    break;
   case 27:
    var $94 = $n_0 << 1 | 1;
    var $95 = $94 + 1 | 0;
    var $96 = $half_0 + 1 | 0;
    var $97 = (i64Math.multiply($96, 0, 3, 0), i64Math.result[0]);
    ___gmpn_toom_couple_handling($scratch, $95, $pp, $74, $n_0, $97, -$half_0 & 3);
    var $100 = ___gmpn_toom_eval_pm2rexp($66, $68, $p_1, $ap, $n_0, $s_0, 2, $pp);
    var $101 = ___gmpn_toom_eval_pm2rexp($71, $72, $q_1, $bp, $n_0, $t_0, 2, $pp);
    var $102 = $101 ^ $100;
    if ($76) {
      __label__ = 28;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 28:
    if (($75 | 0) > 299) {
      __label__ = 29;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 29:
    var $107 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      __label__ = 30;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 30:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $107);
    var $108 = (i64Math.multiply($n_0, 0, 3, 0), i64Math.result[0]);
    var $126 = $scratch + ($108 + 1 << 2) | 0;
    var $125 = $107;
    __label__ = 35;
    break;
   case 31:
    var $111 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $111);
    var $112 = (i64Math.multiply($n_0, 0, 3, 0), i64Math.result[0]);
    var $113 = $scratch + ($112 + 1 << 2) | 0;
    ___gmpn_toom22_mul($113, $66, $75, $71, $75, $111);
    var $_pre_phi = $112;
    var $_pre_phi31 = $113;
    __label__ = 36;
    break;
   case 32:
    var $115 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $115);
    var $116 = (i64Math.multiply($n_0, 0, 3, 0), i64Math.result[0]);
    var $117 = $scratch + ($116 + 1 << 2) | 0;
    ___gmpn_toom33_mul($117, $66, $75, $71, $75, $115);
    var $_pre_phi = $116;
    var $_pre_phi31 = $117;
    __label__ = 36;
    break;
   case 33:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $107);
    var $119 = ($75 | 0) > 349;
    var $120 = (i64Math.multiply($n_0, 0, 3, 0), i64Math.result[0]);
    var $121 = $scratch + ($120 + 1 << 2) | 0;
    var $122 = $scratch + ($65 + 5 << 2) | 0;
    if ($119) {
      var $126 = $121;
      var $125 = $122;
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    ___gmpn_toom44_mul($121, $66, $75, $71, $75, $122);
    var $_pre_phi = $120;
    var $_pre_phi31 = $121;
    __label__ = 36;
    break;
   case 35:
    var $125;
    var $126;
    ___gmpn_toom6h_mul($126, $66, $75, $71, $75, $125);
    var $_pre = (i64Math.multiply($n_0, 0, 3, 0), i64Math.result[0]);
    var $_pre_phi = $_pre;
    var $_pre_phi31 = $scratch + ($_pre + 1 << 2) | 0;
    __label__ = 36;
    break;
   case 36:
    var $_pre_phi31;
    var $_pre_phi;
    ___gmpn_toom_couple_handling($_pre_phi31, $94, $pp, $102, $n_0, $96 << 1, $half_0 << 1);
    var $130 = ___gmpn_toom_eval_pm2($66, $68, $p_1, $ap, $n_0, $s_0, $pp);
    var $131 = ___gmpn_toom_eval_pm2($71, $72, $q_1, $bp, $n_0, $t_0, $pp);
    var $132 = $131 ^ $130;
    if ($76) {
      __label__ = 37;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 37:
    if (($75 | 0) > 299) {
      __label__ = 38;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 38:
    var $137 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      __label__ = 39;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 39:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $137);
    var $138 = (i64Math.multiply($n_0, 0, 6, 0), i64Math.result[0]);
    var $156 = $scratch + ($138 + 2 << 2) | 0;
    var $155 = $137;
    __label__ = 44;
    break;
   case 40:
    var $141 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $141);
    var $142 = (i64Math.multiply($n_0, 0, 6, 0), i64Math.result[0]);
    var $143 = $scratch + ($142 + 2 << 2) | 0;
    ___gmpn_toom22_mul($143, $66, $75, $71, $75, $141);
    var $_pre_phi35 = $143;
    __label__ = 45;
    break;
   case 41:
    var $145 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $145);
    var $146 = (i64Math.multiply($n_0, 0, 6, 0), i64Math.result[0]);
    var $147 = $scratch + ($146 + 2 << 2) | 0;
    ___gmpn_toom33_mul($147, $66, $75, $71, $75, $145);
    var $_pre_phi35 = $147;
    __label__ = 45;
    break;
   case 42:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $137);
    var $149 = ($75 | 0) > 349;
    var $150 = (i64Math.multiply($n_0, 0, 6, 0), i64Math.result[0]);
    var $151 = $scratch + ($150 + 2 << 2) | 0;
    var $152 = $scratch + ($65 + 5 << 2) | 0;
    if ($149) {
      var $156 = $151;
      var $155 = $152;
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    ___gmpn_toom44_mul($151, $66, $75, $71, $75, $152);
    var $_pre_phi35 = $151;
    __label__ = 45;
    break;
   case 44:
    var $155;
    var $156;
    ___gmpn_toom6h_mul($156, $66, $75, $71, $75, $155);
    var $_pre32 = (i64Math.multiply($n_0, 0, 6, 0), i64Math.result[0]);
    var $_pre_phi35 = $scratch + ($_pre32 + 2 << 2) | 0;
    __label__ = 45;
    break;
   case 45:
    var $_pre_phi35;
    ___gmpn_toom_couple_handling($_pre_phi35, $94, $pp, $132, $n_0, 1, 2);
    var $158 = ___gmpn_toom_eval_pm2exp($66, $68, $p_1, $ap, $n_0, $s_0, 3, $pp);
    var $159 = ___gmpn_toom_eval_pm2exp($71, $72, $q_1, $bp, $n_0, $t_0, 3, $pp);
    var $160 = $159 ^ $158;
    if ($76) {
      __label__ = 46;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 46:
    if (($75 | 0) > 299) {
      __label__ = 47;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 47:
    var $165 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      __label__ = 48;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 48:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $165);
    var $166 = (i64Math.multiply($n_0, 0, 9, 0), i64Math.result[0]);
    var $184 = $scratch + ($166 + 3 << 2) | 0;
    var $183 = $165;
    __label__ = 53;
    break;
   case 49:
    var $169 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $169);
    var $170 = (i64Math.multiply($n_0, 0, 9, 0), i64Math.result[0]);
    var $171 = $scratch + ($170 + 3 << 2) | 0;
    ___gmpn_toom22_mul($171, $66, $75, $71, $75, $169);
    var $_pre_phi39 = $171;
    __label__ = 54;
    break;
   case 50:
    var $173 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $173);
    var $174 = (i64Math.multiply($n_0, 0, 9, 0), i64Math.result[0]);
    var $175 = $scratch + ($174 + 3 << 2) | 0;
    ___gmpn_toom33_mul($175, $66, $75, $71, $75, $173);
    var $_pre_phi39 = $175;
    __label__ = 54;
    break;
   case 51:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $165);
    var $177 = ($75 | 0) > 349;
    var $178 = (i64Math.multiply($n_0, 0, 9, 0), i64Math.result[0]);
    var $179 = $scratch + ($178 + 3 << 2) | 0;
    var $180 = $scratch + ($65 + 5 << 2) | 0;
    if ($177) {
      var $184 = $179;
      var $183 = $180;
      __label__ = 53;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    ___gmpn_toom44_mul($179, $66, $75, $71, $75, $180);
    var $_pre_phi39 = $179;
    __label__ = 54;
    break;
   case 53:
    var $183;
    var $184;
    ___gmpn_toom6h_mul($184, $66, $75, $71, $75, $183);
    var $_pre36 = (i64Math.multiply($n_0, 0, 9, 0), i64Math.result[0]);
    var $_pre_phi39 = $scratch + ($_pre36 + 3 << 2) | 0;
    __label__ = 54;
    break;
   case 54:
    var $_pre_phi39;
    ___gmpn_toom_couple_handling($_pre_phi39, $95, $pp, $160, $n_0, 3, 6);
    var $186 = ___gmpn_toom_eval_pm2rexp($66, $68, $p_1, $ap, $n_0, $s_0, 1, $pp);
    var $187 = ___gmpn_toom_eval_pm2rexp($71, $72, $q_1, $bp, $n_0, $t_0, 1, $pp);
    var $188 = $187 ^ $186;
    if ($76) {
      __label__ = 55;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 55:
    if (($75 | 0) > 299) {
      __label__ = 56;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 56:
    var $193 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      __label__ = 57;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 57:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $193);
    var $208 = $pp + ($_pre_phi << 2) | 0;
    var $207 = $193;
    __label__ = 62;
    break;
   case 58:
    var $196 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $196);
    var $197 = $pp + ($_pre_phi << 2) | 0;
    ___gmpn_toom22_mul($197, $66, $75, $71, $75, $196);
    var $_pre_phi41 = $197;
    __label__ = 63;
    break;
   case 59:
    var $199 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $199);
    var $200 = $pp + ($_pre_phi << 2) | 0;
    ___gmpn_toom33_mul($200, $66, $75, $71, $75, $199);
    var $_pre_phi41 = $200;
    __label__ = 63;
    break;
   case 60:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $193);
    var $203 = $pp + ($_pre_phi << 2) | 0;
    var $204 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      var $208 = $203;
      var $207 = $204;
      __label__ = 62;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 61:
    ___gmpn_toom44_mul($203, $66, $75, $71, $75, $204);
    var $_pre_phi41 = $203;
    __label__ = 63;
    break;
   case 62:
    var $207;
    var $208;
    ___gmpn_toom6h_mul($208, $66, $75, $71, $75, $207);
    var $_pre_phi41 = $pp + ($_pre_phi << 2) | 0;
    __label__ = 63;
    break;
   case 63:
    var $_pre_phi41;
    ___gmpn_toom_couple_handling($_pre_phi41, $94, $pp, $188, $n_0, $96, $half_0);
    var $210 = ___gmpn_toom_eval_pm1($66, $68, $p_1, $ap, $n_0, $s_0, $pp);
    if (($q_1 | 0) == 3) {
      __label__ = 64;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 64:
    var $213 = ___gmpn_toom_eval_dgr3_pm1($71, $72, $bp, $n_0, $t_0, $pp);
    var $_pn = $213;
    __label__ = 66;
    break;
   case 65:
    var $215 = ___gmpn_toom_eval_pm1($71, $72, $q_1, $bp, $n_0, $t_0, $pp);
    var $_pn = $215;
    __label__ = 66;
    break;
   case 66:
    var $_pn;
    var $sign_0 = $_pn ^ $210;
    if ($76) {
      __label__ = 67;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 67:
    if (($75 | 0) > 299) {
      __label__ = 68;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 68:
    var $221 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      __label__ = 69;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 69:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $221);
    var $222 = (i64Math.multiply($n_0, 0, 7, 0), i64Math.result[0]);
    var $240 = $pp + ($222 << 2) | 0;
    var $239 = $221;
    __label__ = 74;
    break;
   case 70:
    var $225 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $225);
    var $226 = (i64Math.multiply($n_0, 0, 7, 0), i64Math.result[0]);
    var $227 = $pp + ($226 << 2) | 0;
    ___gmpn_toom22_mul($227, $66, $75, $71, $75, $225);
    var $_pre_phi45 = $227;
    __label__ = 75;
    break;
   case 71:
    var $229 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $229);
    var $230 = (i64Math.multiply($n_0, 0, 7, 0), i64Math.result[0]);
    var $231 = $pp + ($230 << 2) | 0;
    ___gmpn_toom33_mul($231, $66, $75, $71, $75, $229);
    var $_pre_phi45 = $231;
    __label__ = 75;
    break;
   case 72:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $221);
    var $233 = ($75 | 0) > 349;
    var $234 = (i64Math.multiply($n_0, 0, 7, 0), i64Math.result[0]);
    var $235 = $pp + ($234 << 2) | 0;
    var $236 = $scratch + ($65 + 5 << 2) | 0;
    if ($233) {
      var $240 = $235;
      var $239 = $236;
      __label__ = 74;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    ___gmpn_toom44_mul($235, $66, $75, $71, $75, $236);
    var $_pre_phi45 = $235;
    __label__ = 75;
    break;
   case 74:
    var $239;
    var $240;
    ___gmpn_toom6h_mul($240, $66, $75, $71, $75, $239);
    var $_pre42 = (i64Math.multiply($n_0, 0, 7, 0), i64Math.result[0]);
    var $_pre_phi45 = $pp + ($_pre42 << 2) | 0;
    __label__ = 75;
    break;
   case 75:
    var $_pre_phi45;
    ___gmpn_toom_couple_handling($_pre_phi45, $94, $pp, $sign_0, $n_0, 0, 0);
    var $242 = ___gmpn_toom_eval_pm2exp($66, $68, $p_1, $ap, $n_0, $s_0, 2, $pp);
    var $243 = ___gmpn_toom_eval_pm2exp($71, $72, $q_1, $bp, $n_0, $t_0, 2, $pp);
    var $244 = $243 ^ $242;
    if ($76) {
      __label__ = 76;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 76:
    if (($75 | 0) > 299) {
      __label__ = 77;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 77:
    var $249 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      __label__ = 78;
      break;
    } else {
      __label__ = 81;
      break;
    }
   case 78:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $249);
    var $259 = $249;
    __label__ = 83;
    break;
   case 79:
    var $251 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $251);
    ___gmpn_toom22_mul($68, $66, $75, $71, $75, $251);
    __label__ = 84;
    break;
   case 80:
    var $253 = $scratch + ($65 + 5 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $253);
    ___gmpn_toom33_mul($68, $66, $75, $71, $75, $253);
    __label__ = 84;
    break;
   case 81:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $249);
    var $256 = $scratch + ($65 + 5 << 2) | 0;
    if (($75 | 0) > 349) {
      var $259 = $256;
      __label__ = 83;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 82:
    ___gmpn_toom44_mul($68, $66, $75, $71, $75, $256);
    __label__ = 84;
    break;
   case 83:
    var $259;
    ___gmpn_toom6h_mul($68, $66, $75, $71, $75, $259);
    __label__ = 84;
    break;
   case 84:
    ___gmpn_toom_couple_handling($68, $94, $pp, $244, $n_0, 2, 4);
    if (($n_0 | 0) > 99) {
      __label__ = 86;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 85:
    ___gmpn_toom22_mul($pp, $ap, $n_0, $bp, $n_0, $71);
    __label__ = 91;
    break;
   case 86:
    if (($n_0 | 0) > 299) {
      __label__ = 88;
      break;
    } else {
      __label__ = 87;
      break;
    }
   case 87:
    ___gmpn_toom33_mul($pp, $ap, $n_0, $bp, $n_0, $71);
    __label__ = 91;
    break;
   case 88:
    if (($n_0 | 0) > 349) {
      __label__ = 90;
      break;
    } else {
      __label__ = 89;
      break;
    }
   case 89:
    ___gmpn_toom44_mul($pp, $ap, $n_0, $bp, $n_0, $71);
    __label__ = 91;
    break;
   case 90:
    ___gmpn_toom6h_mul($pp, $ap, $n_0, $bp, $n_0, $71);
    __label__ = 91;
    break;
   case 91:
    if (($half_0 | 0) == 0) {
      __label__ = 95;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 92:
    var $273 = ($s_0 | 0) > ($t_0 | 0);
    var $274 = (i64Math.multiply($n_0, 0, 15, 0), i64Math.result[0]);
    var $275 = $pp + ($274 << 2) | 0;
    if ($273) {
      __label__ = 93;
      break;
    } else {
      __label__ = 94;
      break;
    }
   case 93:
    var $277 = (i64Math.multiply($p_1, 0, $n_0, 0), i64Math.result[0]);
    var $278 = $ap + ($277 << 2) | 0;
    var $279 = (i64Math.multiply($q_1, 0, $n_0, 0), i64Math.result[0]);
    var $280 = $bp + ($279 << 2) | 0;
    var $281 = ___gmpn_mul($275, $278, $s_0, $280, $t_0);
    __label__ = 95;
    break;
   case 94:
    var $283 = (i64Math.multiply($q_1, 0, $n_0, 0), i64Math.result[0]);
    var $284 = $bp + ($283 << 2) | 0;
    var $285 = (i64Math.multiply($p_1, 0, $n_0, 0), i64Math.result[0]);
    var $286 = $ap + ($285 << 2) | 0;
    var $287 = ___gmpn_mul($275, $284, $t_0, $286, $s_0);
    __label__ = 95;
    break;
   case 95:
    ___gmpn_toom_interpolate_16pts($pp, $_pre_phi39, $_pre_phi35, $_pre_phi31, $scratch, $n_0, $t_0 + $s_0 | 0, $half_0, $71);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom8h_mul["X"] = 1;

function ___gmpn_toom_couple_handling($pp, $n, $np, $nsign, $off, $ps, $ns) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($nsign | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = ___gmpn_sub_n($np, $pp, $np, $n);
    var $4 = ___gmpn_rshift($np, $np, $n, 1);
    __label__ = 5;
    break;
   case 4:
    var $6 = ___gmpn_add_n($np, $pp, $np, $n);
    var $7 = ___gmpn_rshift($np, $np, $n, 1);
    __label__ = 5;
    break;
   case 5:
    var $9 = ___gmpn_sub_n($pp, $pp, $np, $n);
    if (($ps | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $12 = ___gmpn_rshift($pp, $pp, $n, $ps);
    __label__ = 7;
    break;
   case 7:
    if (($ns | 0) > 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $16 = ___gmpn_rshift($np, $np, $n, $ns);
    __label__ = 9;
    break;
   case 9:
    var $18 = $pp + ($off << 2) | 0;
    var $19 = $n - $off | 0;
    var $20 = ___gmpn_add_n($18, $18, $np, $19);
    var $21 = $pp + ($n << 2) | 0;
    HEAP32[$21 >> 2] = $20;
    var $22 = $np + ($19 << 2) | 0;
    var $23 = ___gmpn_add_1($21, $22, $off, $20);
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom_eval_dgr3_pm1($xp1, $xm1, $xp, $n, $x3n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = $xp + ($n << 1 << 2) | 0;
    var $3 = ___gmpn_add_n($xp1, $xp, $2, $n);
    HEAP32[$xp1 + ($n << 2) >> 2] = $3;
    var $5 = $xp + ($n << 2) | 0;
    var $6 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $7 = $xp + ($6 << 2) | 0;
    var $8 = ___gmpn_add($tp, $5, $n, $7, $x3n);
    HEAP32[$tp + ($n << 2) >> 2] = $8;
    var $10 = $n + 1 | 0;
    var $11 = ___gmpn_cmp($xp1, $tp, $10);
    var $_lobit = $11 >> 31;
    if (($11 | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $14 = ___gmpn_sub_n($xm1, $tp, $xp1, $10);
    __label__ = 5;
    break;
   case 4:
    var $16 = ___gmpn_sub_n($xm1, $xp1, $tp, $10);
    __label__ = 5;
    break;
   case 5:
    var $18 = ___gmpn_add_n($xp1, $xp1, $tp, $10);
    return $_lobit;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom_eval_dgr3_pm2($xp2, $xm2, $xp, $n, $x3n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = $xp + ($n << 1 << 2) | 0;
    var $3 = ___gmpn_lshift($tp, $2, $n, 2);
    var $4 = ___gmpn_add_n($xp2, $tp, $xp, $n);
    HEAP32[$xp2 + ($n << 2) >> 2] = $4 + $3 | 0;
    var $7 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $8 = $xp + ($7 << 2) | 0;
    var $9 = ___gmpn_lshift($tp, $8, $x3n, 2);
    HEAP32[$tp + ($x3n << 2) >> 2] = $9;
    var $12 = $xp + ($n << 2) | 0;
    if (($x3n | 0) < ($n | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $14 = $x3n + 1 | 0;
    var $15 = ___gmpn_add($tp, $12, $n, $tp, $14);
    HEAP32[$tp + ($n << 2) >> 2] = $15;
    __label__ = 5;
    break;
   case 4:
    var $18 = ___gmpn_add_n($tp, $12, $tp, $n);
    var $19 = $tp + ($n << 2) | 0;
    var $21 = HEAP32[$19 >> 2] + $18 | 0;
    HEAP32[$19 >> 2] = $21;
    __label__ = 5;
    break;
   case 5:
    var $23 = $n + 1 | 0;
    var $24 = ___gmpn_lshift($tp, $tp, $23, 1);
    var $25 = ___gmpn_cmp($xp2, $tp, $23);
    var $_lobit = $25 >> 31;
    if (($25 | 0) < 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $28 = ___gmpn_sub_n($xm2, $tp, $xp2, $23);
    __label__ = 8;
    break;
   case 7:
    var $30 = ___gmpn_sub_n($xm2, $xp2, $tp, $23);
    __label__ = 8;
    break;
   case 8:
    var $32 = ___gmpn_add_n($xp2, $xp2, $tp, $23);
    return $_lobit;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom_eval_pm1($xp1, $xm1, $k, $xp, $n, $hn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = $xp + ($n << 1 << 2) | 0;
    var $3 = ___gmpn_add_n($xp1, $xp, $2, $n);
    HEAP32[$xp1 + ($n << 2) >> 2] = $3;
    if ($k >>> 0 > 4) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $6 = $n + 1 | 0;
    var $i_02 = 4;
    __label__ = 4;
    break;
   case 4:
    var $i_02;
    var $8 = (i64Math.multiply($i_02, 0, $n, 0), i64Math.result[0]);
    var $9 = $xp + ($8 << 2) | 0;
    var $10 = ___gmpn_add($xp1, $xp1, $6, $9, $n);
    var $11 = $i_02 + 2 | 0;
    if ($11 >>> 0 < $k >>> 0) {
      var $i_02 = $11;
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $13 = $xp + ($n << 2) | 0;
    var $14 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $15 = $xp + ($14 << 2) | 0;
    var $16 = ___gmpn_add_n($tp, $13, $15, $n);
    HEAP32[$tp + ($n << 2) >> 2] = $16;
    var $19 = $n + 1 | 0;
    if ($k >>> 0 > 5) {
      var $i_11 = 5;
      __label__ = 6;
      break;
    } else {
      var $_pre_phi = $19;
      __label__ = 7;
      break;
    }
   case 6:
    var $i_11;
    var $20 = (i64Math.multiply($i_11, 0, $n, 0), i64Math.result[0]);
    var $21 = $xp + ($20 << 2) | 0;
    var $22 = ___gmpn_add($tp, $tp, $19, $21, $n);
    var $23 = $i_11 + 2 | 0;
    if ($23 >>> 0 < $k >>> 0) {
      var $i_11 = $23;
      __label__ = 6;
      break;
    } else {
      var $_pre_phi = $19;
      __label__ = 7;
      break;
    }
   case 7:
    var $_pre_phi;
    var $26 = ($k & 1 | 0) == 0;
    var $27 = (i64Math.multiply($n, 0, $k, 0), i64Math.result[0]);
    var $28 = $xp + ($27 << 2) | 0;
    if ($26) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $30 = ___gmpn_add($tp, $tp, $_pre_phi, $28, $hn);
    __label__ = 10;
    break;
   case 9:
    var $32 = ___gmpn_add($xp1, $xp1, $_pre_phi, $28, $hn);
    __label__ = 10;
    break;
   case 10:
    var $34 = ___gmpn_cmp($xp1, $tp, $_pre_phi);
    var $_lobit = $34 >> 31;
    if (($34 | 0) < 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $37 = ___gmpn_sub_n($xm1, $tp, $xp1, $_pre_phi);
    __label__ = 13;
    break;
   case 12:
    var $39 = ___gmpn_sub_n($xm1, $xp1, $tp, $_pre_phi);
    __label__ = 13;
    break;
   case 13:
    var $41 = ___gmpn_add_n($xp1, $xp1, $tp, $_pre_phi);
    return $_lobit;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_eval_pm1["X"] = 1;

function ___gmpn_toom_eval_pm2($xp2, $xm2, $k, $xp, $n, $hn, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($n, 0, $k, 0), i64Math.result[0]);
    var $2 = $xp + ($1 << 2) | 0;
    var $3 = ___gmpn_lshift($xp2, $2, $hn, 2);
    var $4 = $k - 2 | 0;
    var $5 = (i64Math.multiply($4, 0, $n, 0), i64Math.result[0]);
    var $6 = $xp + ($5 << 2) | 0;
    var $7 = ___gmpn_add_n($xp2, $xp2, $6, $hn);
    var $8 = $7 + $3 | 0;
    if (($hn | 0) == ($n | 0)) {
      var $cy_0 = $8;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $11 = $xp2 + ($hn << 2) | 0;
    var $12 = $xp + ($5 + $hn << 2) | 0;
    var $13 = $n - $hn | 0;
    var $14 = ___gmpn_add_1($11, $12, $13, $8);
    var $cy_0 = $14;
    __label__ = 4;
    break;
   case 4:
    var $cy_0;
    var $16 = $k - 4 | 0;
    if (($16 | 0) > -1) {
      var $i_03 = $16;
      var $cy_14 = $cy_0;
      __label__ = 5;
      break;
    } else {
      var $cy_1_lcssa = $cy_0;
      __label__ = 6;
      break;
    }
   case 5:
    var $cy_14;
    var $i_03;
    var $18 = $cy_14 << 2;
    var $19 = ___gmpn_lshift($xp2, $xp2, $n, 2);
    var $20 = (i64Math.multiply($i_03, 0, $n, 0), i64Math.result[0]);
    var $21 = $xp + ($20 << 2) | 0;
    var $22 = ___gmpn_add_n($xp2, $xp2, $21, $n);
    var $24 = $19 + $18 + $22 | 0;
    var $25 = $i_03 - 2 | 0;
    if (($25 | 0) > -1) {
      var $i_03 = $25;
      var $cy_14 = $24;
      __label__ = 5;
      break;
    } else {
      var $cy_1_lcssa = $24;
      __label__ = 6;
      break;
    }
   case 6:
    var $cy_1_lcssa;
    HEAP32[$xp2 + ($n << 2) >> 2] = $cy_1_lcssa;
    var $28 = $k - 1 | 0;
    var $29 = (i64Math.multiply($28, 0, $n, 0), i64Math.result[0]);
    var $30 = $xp + ($29 << 2) | 0;
    var $31 = ___gmpn_lshift($tp, $30, $n, 2);
    var $32 = $k - 3 | 0;
    var $33 = (i64Math.multiply($32, 0, $n, 0), i64Math.result[0]);
    var $34 = $xp + ($33 << 2) | 0;
    var $35 = ___gmpn_add_n($tp, $tp, $34, $n);
    var $36 = $35 + $31 | 0;
    var $37 = $k - 5 | 0;
    if (($37 | 0) > -1) {
      var $i_11 = $37;
      var $cy_22 = $36;
      __label__ = 7;
      break;
    } else {
      var $cy_2_lcssa = $36;
      __label__ = 8;
      break;
    }
   case 7:
    var $cy_22;
    var $i_11;
    var $39 = $cy_22 << 2;
    var $40 = ___gmpn_lshift($tp, $tp, $n, 2);
    var $41 = (i64Math.multiply($i_11, 0, $n, 0), i64Math.result[0]);
    var $42 = $xp + ($41 << 2) | 0;
    var $43 = ___gmpn_add_n($tp, $tp, $42, $n);
    var $45 = $40 + $39 + $43 | 0;
    var $46 = $i_11 - 2 | 0;
    if (($46 | 0) > -1) {
      var $i_11 = $46;
      var $cy_22 = $45;
      __label__ = 7;
      break;
    } else {
      var $cy_2_lcssa = $45;
      __label__ = 8;
      break;
    }
   case 8:
    var $cy_2_lcssa;
    HEAP32[$tp + ($n << 2) >> 2] = $cy_2_lcssa;
    var $49 = $28 & 1;
    var $51 = $n + 1 | 0;
    if (($49 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $53 = ___gmpn_lshift($tp, $tp, $51, 1);
    __label__ = 11;
    break;
   case 10:
    var $55 = ___gmpn_lshift($xp2, $xp2, $51, 1);
    __label__ = 11;
    break;
   case 11:
    var $57 = ___gmpn_cmp($xp2, $tp, $51);
    var $_lobit = $57 >> 31;
    if (($57 | 0) < 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $60 = ___gmpn_sub_n($xm2, $tp, $xp2, $51);
    __label__ = 14;
    break;
   case 13:
    var $62 = ___gmpn_sub_n($xm2, $xp2, $tp, $51);
    __label__ = 14;
    break;
   case 14:
    var $64 = ___gmpn_add_n($xp2, $xp2, $tp, $51);
    return $_lobit ^ $49 - 1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_eval_pm2["X"] = 1;

function ___gmpn_toom_eval_pm2exp($xp2, $xm2, $k, $xp, $n, $hn, $shift, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = $xp + ($n << 1 << 2) | 0;
    var $3 = $shift << 1;
    var $4 = ___gmpn_lshift($tp, $2, $n, $3);
    var $5 = $xp2 + ($n << 2) | 0;
    HEAP32[$5 >> 2] = $4;
    var $6 = ___gmpn_add_n($xp2, $xp, $tp, $n);
    var $8 = HEAP32[$5 >> 2] + $6 | 0;
    HEAP32[$5 >> 2] = $8;
    if ($k >>> 0 > 4) {
      var $i_02 = 4;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $i_02;
    var $10 = (i64Math.multiply($i_02, 0, $n, 0), i64Math.result[0]);
    var $11 = $xp + ($10 << 2) | 0;
    var $12 = (i64Math.multiply($i_02, 0, $shift, 0), i64Math.result[0]);
    var $13 = ___gmpn_lshift($tp, $11, $n, $12);
    var $15 = HEAP32[$5 >> 2] + $13 | 0;
    HEAP32[$5 >> 2] = $15;
    var $16 = ___gmpn_add_n($xp2, $xp2, $tp, $n);
    var $18 = HEAP32[$5 >> 2] + $16 | 0;
    HEAP32[$5 >> 2] = $18;
    var $19 = $i_02 + 2 | 0;
    if ($19 >>> 0 < $k >>> 0) {
      var $i_02 = $19;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $21 = $xp + ($n << 2) | 0;
    var $22 = ___gmpn_lshift($tp, $21, $n, $shift);
    var $23 = $tp + ($n << 2) | 0;
    HEAP32[$23 >> 2] = $22;
    if ($k >>> 0 > 3) {
      var $i_11 = 3;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $i_11;
    var $25 = (i64Math.multiply($i_11, 0, $n, 0), i64Math.result[0]);
    var $26 = $xp + ($25 << 2) | 0;
    var $27 = (i64Math.multiply($i_11, 0, $shift, 0), i64Math.result[0]);
    var $28 = ___gmpn_lshift($xm2, $26, $n, $27);
    var $30 = HEAP32[$23 >> 2] + $28 | 0;
    HEAP32[$23 >> 2] = $30;
    var $31 = ___gmpn_add_n($tp, $tp, $xm2, $n);
    var $33 = HEAP32[$23 >> 2] + $31 | 0;
    HEAP32[$23 >> 2] = $33;
    var $34 = $i_11 + 2 | 0;
    if ($34 >>> 0 < $k >>> 0) {
      var $i_11 = $34;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $36 = (i64Math.multiply($n, 0, $k, 0), i64Math.result[0]);
    var $37 = $xp + ($36 << 2) | 0;
    var $38 = (i64Math.multiply($shift, 0, $k, 0), i64Math.result[0]);
    var $39 = ___gmpn_lshift($xm2, $37, $hn, $38);
    HEAP32[$xm2 + ($hn << 2) >> 2] = $39;
    var $43 = $n + 1 | 0;
    var $44 = $hn + 1 | 0;
    if (($k & 1 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $46 = ___gmpn_add($tp, $tp, $43, $xm2, $44);
    __label__ = 9;
    break;
   case 8:
    var $48 = ___gmpn_add($xp2, $xp2, $43, $xm2, $44);
    __label__ = 9;
    break;
   case 9:
    var $50 = ___gmpn_cmp($xp2, $tp, $43);
    var $_lobit = $50 >> 31;
    if (($50 | 0) < 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $53 = ___gmpn_sub_n($xm2, $tp, $xp2, $43);
    __label__ = 12;
    break;
   case 11:
    var $55 = ___gmpn_sub_n($xm2, $xp2, $tp, $43);
    __label__ = 12;
    break;
   case 12:
    var $57 = ___gmpn_add_n($xp2, $xp2, $tp, $43);
    return $_lobit;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_eval_pm2exp["X"] = 1;

function ___gmpn_toom_eval_pm2rexp($rp, $rm, $q, $ap, $n, $t, $s, $ws) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($s, 0, $q, 0), i64Math.result[0]);
    var $2 = ___gmpn_lshift($rp, $ap, $n, $1);
    var $3 = $rp + ($n << 2) | 0;
    HEAP32[$3 >> 2] = $2;
    var $4 = $ap + ($n << 2) | 0;
    var $5 = $q - 1 | 0;
    var $6 = (i64Math.multiply($5, 0, $s, 0), i64Math.result[0]);
    var $7 = ___gmpn_lshift($ws, $4, $n, $6);
    var $8 = $ws + ($n << 2) | 0;
    HEAP32[$8 >> 2] = $7;
    var $10 = ($q & 1 | 0) == 0;
    var $11 = $n + 1 | 0;
    var $12 = (i64Math.multiply($n, 0, $q, 0), i64Math.result[0]);
    var $13 = $ap + ($12 << 2) | 0;
    if ($10) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $15 = ___gmpn_add($ws, $ws, $11, $13, $t);
    var $16 = (i64Math.multiply($5, 0, $n, 0), i64Math.result[0]);
    var $17 = $ap + ($16 << 2) | 0;
    var $18 = _DO_mpn_addlsh_n($rp, $17, $n, $s, $rm);
    var $20 = HEAP32[$3 >> 2] + $18 | 0;
    HEAP32[$3 >> 2] = $20;
    __label__ = 5;
    break;
   case 4:
    var $22 = ___gmpn_add($rp, $rp, $11, $13, $t);
    __label__ = 5;
    break;
   case 5:
    if ($5 >>> 0 > 2) {
      var $i_01 = 2;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $i_01;
    var $24 = (i64Math.multiply($i_01, 0, $n, 0), i64Math.result[0]);
    var $25 = $ap + ($24 << 2) | 0;
    var $26 = $q - $i_01 | 0;
    var $27 = (i64Math.multiply($26, 0, $s, 0), i64Math.result[0]);
    var $28 = _DO_mpn_addlsh_n($rp, $25, $n, $27, $rm);
    var $30 = HEAP32[$3 >> 2] + $28 | 0;
    HEAP32[$3 >> 2] = $30;
    var $31 = $i_01 | 1;
    var $32 = (i64Math.multiply($31, 0, $n, 0), i64Math.result[0]);
    var $33 = $ap + ($32 << 2) | 0;
    var $34 = $q - $31 | 0;
    var $35 = (i64Math.multiply($34, 0, $s, 0), i64Math.result[0]);
    var $36 = _DO_mpn_addlsh_n($ws, $33, $n, $35, $rm);
    var $38 = HEAP32[$8 >> 2] + $36 | 0;
    HEAP32[$8 >> 2] = $38;
    var $39 = $i_01 + 2 | 0;
    if ($39 >>> 0 < $5 >>> 0) {
      var $i_01 = $39;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $41 = ___gmpn_cmp($rp, $ws, $11);
    var $_lobit = $41 >> 31;
    if (($41 | 0) < 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $44 = ___gmpn_sub_n($rm, $ws, $rp, $11);
    __label__ = 10;
    break;
   case 9:
    var $46 = ___gmpn_sub_n($rm, $rp, $ws, $11);
    __label__ = 10;
    break;
   case 10:
    var $48 = ___gmpn_add_n($rp, $rp, $ws, $11);
    return $_lobit;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_eval_pm2rexp["X"] = 1;

function _DO_mpn_addlsh_n($dst, $src, $n, $s, $ws) {
  var $1 = ___gmpn_lshift($ws, $src, $n, $s);
  var $2 = ___gmpn_add_n($dst, $dst, $ws, $n);
  return $2 + $1 | 0;
}

function ___gmpn_toom_interpolate_12pts($pp, $r1, $r3, $r5, $n, $spt, $half, $wsi) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $2 = $1 + 1 | 0;
    var $3 = ($half | 0) != 0;
    if ($3) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_pre_phi = $pp + ($1 << 2) | 0;
    __label__ = 18;
    break;
   case 4:
    var $5 = (i64Math.multiply($n, 0, 11, 0), i64Math.result[0]);
    var $6 = $pp + ($5 << 2) | 0;
    var $7 = ___gmpn_sub_n($r3, $r3, $6, $spt);
    var $8 = $r3 + ($spt << 2) | 0;
    var $9 = HEAPU32[$8 >> 2];
    HEAP32[$8 >> 2] = $9 - $7 | 0;
    if ($9 >>> 0 < $7 >>> 0) {
      var $__p_0 = $8;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $__p_0;
    var $12 = $__p_0 + 4 | 0;
    var $13 = HEAP32[$12 >> 2];
    var $14 = $13 - 1 | 0;
    HEAP32[$12 >> 2] = $14;
    if (($13 | 0) == 0) {
      var $__p_0 = $12;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $16 = (i64Math.multiply($n, 0, 7, 0), i64Math.result[0]);
    var $17 = $pp + ($16 << 2) | 0;
    var $18 = _DO_mpn_sublsh_n($17, $6, $spt, 10, $wsi);
    var $19 = $pp + ($16 + $spt << 2) | 0;
    var $20 = HEAPU32[$19 >> 2];
    HEAP32[$19 >> 2] = $20 - $18 | 0;
    if ($20 >>> 0 < $18 >>> 0) {
      var $__p2_0 = $19;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $__p2_0;
    var $23 = $__p2_0 + 4 | 0;
    var $24 = HEAP32[$23 >> 2];
    var $25 = $24 - 1 | 0;
    HEAP32[$23 >> 2] = $25;
    if (($24 | 0) == 0) {
      var $__p2_0 = $23;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $27 = HEAPU32[$r5 >> 2];
    HEAP32[$r5 >> 2] = $27 - (HEAPU32[$6 >> 2] >>> 2) | 0;
    if ($27 >>> 0 < HEAPU32[$6 >> 2] >>> 2 >>> 0) {
      var $__p4_0 = $r5;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $__p4_0;
    var $34 = $__p4_0 + 4 | 0;
    var $35 = HEAP32[$34 >> 2];
    var $36 = $35 - 1 | 0;
    HEAP32[$34 >> 2] = $36;
    if (($35 | 0) == 0) {
      var $__p4_0 = $34;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $38 = $pp + ($5 + 1 << 2) | 0;
    var $39 = $spt - 1 | 0;
    var $40 = _DO_mpn_sublsh_n($r5, $38, $39, 30, $wsi);
    var $41 = $r5 + ($39 << 2) | 0;
    var $42 = HEAPU32[$41 >> 2];
    HEAP32[$41 >> 2] = $42 - $40 | 0;
    if ($42 >>> 0 < $40 >>> 0) {
      var $__p6_0 = $41;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $__p6_0;
    var $45 = $__p6_0 + 4 | 0;
    var $46 = HEAP32[$45 >> 2];
    var $47 = $46 - 1 | 0;
    HEAP32[$45 >> 2] = $47;
    if (($46 | 0) == 0) {
      var $__p6_0 = $45;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $49 = _DO_mpn_sublsh_n($r1, $6, $spt, 20, $wsi);
    var $50 = $r1 + ($spt << 2) | 0;
    var $51 = HEAPU32[$50 >> 2];
    HEAP32[$50 >> 2] = $51 - $49 | 0;
    if ($51 >>> 0 < $49 >>> 0) {
      var $__p8_0 = $50;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $__p8_0;
    var $54 = $__p8_0 + 4 | 0;
    var $55 = HEAP32[$54 >> 2];
    var $56 = $55 - 1 | 0;
    HEAP32[$54 >> 2] = $56;
    if (($55 | 0) == 0) {
      var $__p8_0 = $54;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $58 = $pp + ($1 << 2) | 0;
    var $59 = HEAPU32[$58 >> 2];
    HEAP32[$58 >> 2] = $59 - (HEAPU32[$6 >> 2] >>> 4) | 0;
    if ($59 >>> 0 < HEAPU32[$6 >> 2] >>> 4 >>> 0) {
      var $__p11_0 = $58;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $__p11_0;
    var $66 = $__p11_0 + 4 | 0;
    var $67 = HEAP32[$66 >> 2];
    var $68 = $67 - 1 | 0;
    HEAP32[$66 >> 2] = $68;
    if (($67 | 0) == 0) {
      var $__p11_0 = $66;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $70 = _DO_mpn_sublsh_n($58, $38, $39, 28, $wsi);
    var $71 = $pp + ($39 + $1 << 2) | 0;
    var $72 = HEAPU32[$71 >> 2];
    HEAP32[$71 >> 2] = $72 - $70 | 0;
    if ($72 >>> 0 < $70 >>> 0) {
      var $__p13_0 = $71;
      __label__ = 17;
      break;
    } else {
      var $_pre_phi = $58;
      __label__ = 18;
      break;
    }
   case 17:
    var $__p13_0;
    var $75 = $__p13_0 + 4 | 0;
    var $76 = HEAP32[$75 >> 2];
    var $77 = $76 - 1 | 0;
    HEAP32[$75 >> 2] = $77;
    if (($76 | 0) == 0) {
      var $__p13_0 = $75;
      __label__ = 17;
      break;
    } else {
      var $_pre_phi = $58;
      __label__ = 18;
      break;
    }
   case 18:
    var $_pre_phi;
    var $79 = $pp + ($1 + $n << 2) | 0;
    var $80 = $n << 1;
    var $81 = _DO_mpn_sublsh_n($79, $pp, $80, 20, $wsi);
    var $_sum1 = (i64Math.multiply($n, 0, 6, 0), i64Math.result[0]);
    var $82 = $pp + ($_sum1 << 2) | 0;
    var $84 = HEAP32[$82 >> 2] - $81 | 0;
    HEAP32[$82 >> 2] = $84;
    var $85 = $r1 + ($n << 2) | 0;
    var $86 = HEAPU32[$85 >> 2];
    HEAP32[$85 >> 2] = $86 - (HEAPU32[$pp >> 2] >>> 4) | 0;
    if ($86 >>> 0 < HEAPU32[$pp >> 2] >>> 4 >>> 0) {
      var $__p16_0 = $85;
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $__p16_0;
    var $93 = $__p16_0 + 4 | 0;
    var $94 = HEAP32[$93 >> 2];
    var $95 = $94 - 1 | 0;
    HEAP32[$93 >> 2] = $95;
    if (($94 | 0) == 0) {
      var $__p16_0 = $93;
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $97 = $pp + 4 | 0;
    var $98 = $80 - 1 | 0;
    var $99 = _DO_mpn_sublsh_n($85, $97, $98, 28, $wsi);
    var $100 = $r1 + ($n - 1 + $80 << 2) | 0;
    var $101 = HEAPU32[$100 >> 2];
    HEAP32[$100 >> 2] = $101 - $99 | 0;
    if ($101 >>> 0 < $99 >>> 0) {
      var $__p18_0 = $100;
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $__p18_0;
    var $104 = $__p18_0 + 4 | 0;
    var $105 = HEAP32[$104 >> 2];
    var $106 = $105 - 1 | 0;
    HEAP32[$104 >> 2] = $106;
    if (($105 | 0) == 0) {
      var $__p18_0 = $104;
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $108 = ___gmpn_add_n($wsi, $r1, $_pre_phi, $2);
    var $109 = ___gmpn_sub_n($_pre_phi, $_pre_phi, $r1, $2);
    var $110 = $r5 + ($n << 2) | 0;
    var $111 = _DO_mpn_sublsh_n($110, $pp, $80, 10, $r1);
    var $112 = $r5 + ($1 << 2) | 0;
    var $114 = HEAP32[$112 >> 2] - $111 | 0;
    HEAP32[$112 >> 2] = $114;
    var $115 = (i64Math.multiply($n, 0, 7, 0), i64Math.result[0]);
    var $116 = $pp + ($115 << 2) | 0;
    var $_sum4 = $115 + $n | 0;
    var $117 = $pp + ($_sum4 << 2) | 0;
    var $118 = HEAPU32[$117 >> 2];
    HEAP32[$117 >> 2] = $118 - (HEAPU32[$pp >> 2] >>> 2) | 0;
    if ($118 >>> 0 < HEAPU32[$pp >> 2] >>> 2 >>> 0) {
      var $__p21_0 = $117;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $__p21_0;
    var $125 = $__p21_0 + 4 | 0;
    var $126 = HEAP32[$125 >> 2];
    var $127 = $126 - 1 | 0;
    HEAP32[$125 >> 2] = $127;
    if (($126 | 0) == 0) {
      var $__p21_0 = $125;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $129 = _DO_mpn_sublsh_n($117, $97, $98, 30, $r1);
    var $130 = $pp + ($98 + $_sum4 << 2) | 0;
    var $131 = HEAPU32[$130 >> 2];
    HEAP32[$130 >> 2] = $131 - $129 | 0;
    if ($131 >>> 0 < $129 >>> 0) {
      var $__p23_0 = $130;
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $__p23_0;
    var $134 = $__p23_0 + 4 | 0;
    var $135 = HEAP32[$134 >> 2];
    var $136 = $135 - 1 | 0;
    HEAP32[$134 >> 2] = $136;
    if (($135 | 0) == 0) {
      var $__p23_0 = $134;
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $138 = ___gmpn_sub_n($r1, $r5, $116, $2);
    var $139 = ___gmpn_add_n($116, $116, $r5, $2);
    var $140 = $r3 + ($n << 2) | 0;
    var $141 = ___gmpn_sub_n($140, $140, $pp, $80);
    var $142 = $r3 + ($1 << 2) | 0;
    var $144 = HEAP32[$142 >> 2] - $141 | 0;
    HEAP32[$142 >> 2] = $144;
    var $145 = ___gmpn_submul_1($_pre_phi, $r1, $2, 257);
    ___gmpn_divexact_1($_pre_phi, $_pre_phi, $2, 11340);
    var $146 = HEAPU32[$82 >> 2];
    if ($146 >>> 0 > 536870911) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    HEAP32[$82 >> 2] = $146 | -1073741824;
    __label__ = 28;
    break;
   case 28:
    var $151 = ___gmpn_addmul_1($r1, $_pre_phi, $2, 60);
    var $152 = ___gmpn_bdiv_dbm1c($r1, $r1, $2, 16843009, 0);
    var $153 = _DO_mpn_sublsh_n($116, $r3, $2, 5, $r5);
    var $154 = ___gmpn_submul_1($wsi, $116, $2, 100);
    var $155 = _DO_mpn_sublsh_n($wsi, $r3, $2, 9, $r5);
    ___gmpn_divexact_1($wsi, $wsi, $2, 42525);
    var $156 = ___gmpn_submul_1($116, $wsi, $2, 225);
    ___gmpn_divexact_1($116, $116, $2, 36);
    var $157 = ___gmpn_sub_n($r3, $r3, $116, $2);
    var $158 = ___gmpn_sub_n($_pre_phi, $116, $_pre_phi, $2);
    var $159 = ___gmpn_rshift($_pre_phi, $_pre_phi, $2, 1);
    var $160 = ___gmpn_sub_n($116, $116, $_pre_phi, $2);
    var $161 = ___gmpn_add_n($r1, $r1, $wsi, $2);
    var $162 = ___gmpn_rshift($r1, $r1, $2, 1);
    var $163 = ___gmpn_sub_n($r3, $r3, $wsi, $2);
    var $164 = ___gmpn_sub_n($wsi, $wsi, $r1, $2);
    var $165 = $pp + ($n << 2) | 0;
    var $166 = ___gmpn_add_n($165, $165, $r1, $n);
    var $167 = $pp + ($80 << 2) | 0;
    var $168 = ___gmpn_add_1($167, $85, $n, $166);
    var $169 = $r1 + ($80 << 2) | 0;
    var $170 = HEAP32[$169 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($170, $168);
    var $171 = $uadd.f0;
    HEAP32[$169 >> 2] = $171;
    var $172 = $uadd.f1;
    if ($172) {
      var $__p26_0 = $169;
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $__p26_0;
    var $173 = $__p26_0 + 4 | 0;
    var $175 = HEAP32[$173 >> 2] + 1 | 0;
    HEAP32[$173 >> 2] = $175;
    if (($175 | 0) == 0) {
      var $__p26_0 = $173;
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $178 = HEAP32[$r1 + ($1 << 2) >> 2];
    var $179 = ___gmpn_add_n($_pre_phi, $_pre_phi, $169, $n);
    var $180 = $179 + $178 | 0;
    var $181 = HEAP32[$79 >> 2];
    var $uadd7 = _llvm_uadd_with_overflow_i32($181, $180);
    var $182 = $uadd7.f0;
    HEAP32[$79 >> 2] = $182;
    var $183 = $uadd7.f1;
    if ($183) {
      var $__p28_0 = $79;
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 31:
    var $__p28_0;
    var $184 = $__p28_0 + 4 | 0;
    var $186 = HEAP32[$184 >> 2] + 1 | 0;
    HEAP32[$184 >> 2] = $186;
    if (($186 | 0) == 0) {
      var $__p28_0 = $184;
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $188 = (i64Math.multiply($n, 0, 5, 0), i64Math.result[0]);
    var $189 = $pp + ($188 << 2) | 0;
    var $190 = ___gmpn_add_n($189, $189, $r3, $n);
    var $192 = HEAP32[$82 >> 2] + $190 | 0;
    HEAP32[$82 >> 2] = $192;
    var $193 = ___gmpn_add_1($82, $140, $n, $192);
    var $194 = $r3 + ($80 << 2) | 0;
    var $195 = HEAP32[$194 >> 2];
    var $uadd8 = _llvm_uadd_with_overflow_i32($195, $193);
    var $196 = $uadd8.f0;
    HEAP32[$194 >> 2] = $196;
    var $197 = $uadd8.f1;
    if ($197) {
      var $__p30_0 = $194;
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $__p30_0;
    var $198 = $__p30_0 + 4 | 0;
    var $200 = HEAP32[$198 >> 2] + 1 | 0;
    HEAP32[$198 >> 2] = $200;
    if (($200 | 0) == 0) {
      var $__p30_0 = $198;
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $202 = HEAP32[$142 >> 2];
    var $203 = ___gmpn_add_n($116, $116, $194, $n);
    var $204 = $203 + $202 | 0;
    var $206 = $pp + ($n << 3 << 2) | 0;
    var $207 = HEAP32[$206 >> 2];
    var $uadd9 = _llvm_uadd_with_overflow_i32($207, $204);
    var $208 = $uadd9.f0;
    HEAP32[$206 >> 2] = $208;
    var $209 = $uadd9.f1;
    if ($209) {
      var $__p32_0 = $206;
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $__p32_0;
    var $210 = $__p32_0 + 4 | 0;
    var $212 = HEAP32[$210 >> 2] + 1 | 0;
    HEAP32[$210 >> 2] = $212;
    if (($212 | 0) == 0) {
      var $__p32_0 = $210;
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $214 = (i64Math.multiply($n, 0, 9, 0), i64Math.result[0]);
    var $215 = $pp + ($214 << 2) | 0;
    var $216 = ___gmpn_add_n($215, $215, $wsi, $n);
    var $217 = (i64Math.multiply($n, 0, 10, 0), i64Math.result[0]);
    var $218 = $pp + ($217 << 2) | 0;
    var $220 = HEAP32[$218 >> 2] + $216 | 0;
    HEAP32[$218 >> 2] = $220;
    var $221 = $wsi + ($n << 2) | 0;
    if ($3) {
      __label__ = 37;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 37:
    var $223 = ___gmpn_add_1($218, $221, $n, $220);
    var $224 = $wsi + ($80 << 2) | 0;
    var $225 = HEAP32[$224 >> 2];
    var $uadd10 = _llvm_uadd_with_overflow_i32($225, $223);
    var $226 = $uadd10.f0;
    HEAP32[$224 >> 2] = $226;
    var $227 = $uadd10.f1;
    if ($227) {
      var $__p34_0 = $224;
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    var $__p34_0;
    var $228 = $__p34_0 + 4 | 0;
    var $230 = HEAP32[$228 >> 2] + 1 | 0;
    HEAP32[$228 >> 2] = $230;
    if (($230 | 0) == 0) {
      var $__p34_0 = $228;
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    if (($spt | 0) > ($n | 0)) {
      __label__ = 40;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 40:
    var $235 = HEAP32[$wsi + ($1 << 2) >> 2];
    var $236 = (i64Math.multiply($n, 0, 11, 0), i64Math.result[0]);
    var $237 = $pp + ($236 << 2) | 0;
    var $238 = ___gmpn_add_n($237, $237, $224, $n);
    var $239 = $238 + $235 | 0;
    var $240 = (i64Math.multiply($n, 0, 12, 0), i64Math.result[0]);
    var $241 = $pp + ($240 << 2) | 0;
    var $242 = HEAP32[$241 >> 2];
    var $uadd11 = _llvm_uadd_with_overflow_i32($242, $239);
    var $243 = $uadd11.f0;
    HEAP32[$241 >> 2] = $243;
    var $244 = $uadd11.f1;
    if ($244) {
      var $__p36_0 = $241;
      __label__ = 41;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 41:
    var $__p36_0;
    var $245 = $__p36_0 + 4 | 0;
    var $247 = HEAP32[$245 >> 2] + 1 | 0;
    HEAP32[$245 >> 2] = $247;
    if (($247 | 0) == 0) {
      var $__p36_0 = $245;
      __label__ = 41;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 42:
    var $250 = (i64Math.multiply($n, 0, 11, 0), i64Math.result[0]);
    var $251 = $pp + ($250 << 2) | 0;
    var $252 = ___gmpn_add_n($251, $251, $224, $spt);
    __label__ = 44;
    break;
   case 43:
    var $254 = ___gmpn_add_1($218, $221, $spt, $220);
    __label__ = 44;
    break;
   case 44:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_interpolate_12pts["X"] = 1;

function _DO_mpn_sublsh_n($dst, $src, $n, $s, $ws) {
  var $1 = ___gmpn_lshift($ws, $src, $n, $s);
  var $2 = ___gmpn_sub_n($dst, $dst, $ws, $n);
  return $2 + $1 | 0;
}

function ___gmpn_toom_interpolate_16pts($pp, $r1, $r3, $r5, $r7, $n, $spt, $half, $wsi) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $2 = $1 + 1 | 0;
    var $3 = ($half | 0) != 0;
    if ($3) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_pre = (i64Math.multiply($n, 0, 11, 0), i64Math.result[0]);
    var $_pre_phi = $_pre;
    var $_pre_phi2 = $pp + ($_pre << 2) | 0;
    __label__ = 25;
    break;
   case 4:
    var $5 = (i64Math.multiply($n, 0, 7, 0), i64Math.result[0]);
    var $6 = $pp + ($5 << 2) | 0;
    var $7 = (i64Math.multiply($n, 0, 15, 0), i64Math.result[0]);
    var $8 = $pp + ($7 << 2) | 0;
    var $9 = ___gmpn_sub_n($6, $6, $8, $spt);
    var $10 = $pp + ($5 + $spt << 2) | 0;
    var $11 = HEAPU32[$10 >> 2];
    HEAP32[$10 >> 2] = $11 - $9 | 0;
    if ($11 >>> 0 < $9 >>> 0) {
      var $__p_0 = $10;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $__p_0;
    var $14 = $__p_0 + 4 | 0;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $15 - 1 | 0;
    HEAP32[$14 >> 2] = $16;
    if (($15 | 0) == 0) {
      var $__p_0 = $14;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $18 = _DO_mpn_sublsh_n424($r3, $8, $spt, 14, $wsi);
    var $19 = $r3 + ($spt << 2) | 0;
    var $20 = HEAPU32[$19 >> 2];
    HEAP32[$19 >> 2] = $20 - $18 | 0;
    if ($20 >>> 0 < $18 >>> 0) {
      var $__p2_0 = $19;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $__p2_0;
    var $23 = $__p2_0 + 4 | 0;
    var $24 = HEAP32[$23 >> 2];
    var $25 = $24 - 1 | 0;
    HEAP32[$23 >> 2] = $25;
    if (($24 | 0) == 0) {
      var $__p2_0 = $23;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $27 = $pp + ($1 << 2) | 0;
    var $28 = HEAPU32[$27 >> 2];
    HEAP32[$27 >> 2] = $28 - (HEAPU32[$8 >> 2] >>> 2) | 0;
    if ($28 >>> 0 < HEAPU32[$8 >> 2] >>> 2 >>> 0) {
      var $__p4_0 = $27;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $__p4_0;
    var $35 = $__p4_0 + 4 | 0;
    var $36 = HEAP32[$35 >> 2];
    var $37 = $36 - 1 | 0;
    HEAP32[$35 >> 2] = $37;
    if (($36 | 0) == 0) {
      var $__p4_0 = $35;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $39 = $pp + ($7 + 1 << 2) | 0;
    var $40 = $spt - 1 | 0;
    var $41 = _DO_mpn_sublsh_n424($27, $39, $40, 30, $wsi);
    var $42 = $pp + ($40 + $1 << 2) | 0;
    var $43 = HEAPU32[$42 >> 2];
    HEAP32[$42 >> 2] = $43 - $41 | 0;
    if ($43 >>> 0 < $41 >>> 0) {
      var $__p6_0 = $42;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $__p6_0;
    var $46 = $__p6_0 + 4 | 0;
    var $47 = HEAP32[$46 >> 2];
    var $48 = $47 - 1 | 0;
    HEAP32[$46 >> 2] = $48;
    if (($47 | 0) == 0) {
      var $__p6_0 = $46;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $50 = (i64Math.multiply($n, 0, 11, 0), i64Math.result[0]);
    var $51 = $pp + ($50 << 2) | 0;
    var $52 = _DO_mpn_sublsh_n424($51, $8, $spt, 28, $wsi);
    var $53 = $pp + ($50 + $spt << 2) | 0;
    var $54 = HEAPU32[$53 >> 2];
    HEAP32[$53 >> 2] = $54 - $52 | 0;
    if ($54 >>> 0 < $52 >>> 0) {
      var $__p8_0 = $53;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $__p8_0;
    var $57 = $__p8_0 + 4 | 0;
    var $58 = HEAP32[$57 >> 2];
    var $59 = $58 - 1 | 0;
    HEAP32[$57 >> 2] = $59;
    if (($58 | 0) == 0) {
      var $__p8_0 = $57;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $61 = HEAPU32[$r5 >> 2];
    HEAP32[$r5 >> 2] = $61 - (HEAPU32[$8 >> 2] >>> 4) | 0;
    if ($61 >>> 0 < HEAPU32[$8 >> 2] >>> 4 >>> 0) {
      var $__p11_0 = $r5;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $__p11_0;
    var $68 = $__p11_0 + 4 | 0;
    var $69 = HEAP32[$68 >> 2];
    var $70 = $69 - 1 | 0;
    HEAP32[$68 >> 2] = $70;
    if (($69 | 0) == 0) {
      var $__p11_0 = $68;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $72 = _DO_mpn_sublsh_n424($r5, $39, $40, 28, $wsi);
    var $73 = $r5 + ($40 << 2) | 0;
    var $74 = HEAPU32[$73 >> 2];
    HEAP32[$73 >> 2] = $74 - $72 | 0;
    if ($74 >>> 0 < $72 >>> 0) {
      var $__p13_0 = $73;
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $__p13_0;
    var $77 = $__p13_0 + 4 | 0;
    var $78 = HEAP32[$77 >> 2];
    var $79 = $78 - 1 | 0;
    HEAP32[$77 >> 2] = $79;
    if (($78 | 0) == 0) {
      var $__p13_0 = $77;
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $81 = $r1 + 4 | 0;
    var $82 = _DO_mpn_sublsh_n424($81, $8, $spt, 10, $wsi);
    var $83 = $r1 + ($spt + 1 << 2) | 0;
    var $84 = HEAPU32[$83 >> 2];
    HEAP32[$83 >> 2] = $84 - $82 | 0;
    if ($84 >>> 0 < $82 >>> 0) {
      var $__p15_0 = $83;
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $__p15_0;
    var $87 = $__p15_0 + 4 | 0;
    var $88 = HEAP32[$87 >> 2];
    var $89 = $88 - 1 | 0;
    HEAP32[$87 >> 2] = $89;
    if (($88 | 0) == 0) {
      var $__p15_0 = $87;
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $91 = $r7 + ($2 << 2) | 0;
    var $92 = HEAP32[$91 >> 2];
    HEAP32[$91 >> 2] = 128;
    var $93 = HEAPU32[$r7 >> 2];
    HEAP32[$r7 >> 2] = $93 - (HEAPU32[$8 >> 2] >>> 6) | 0;
    if ($93 >>> 0 < HEAPU32[$8 >> 2] >>> 6 >>> 0) {
      var $__p18_0 = $r7;
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $__p18_0;
    var $100 = $__p18_0 + 4 | 0;
    var $101 = HEAP32[$100 >> 2];
    var $102 = $101 - 1 | 0;
    HEAP32[$100 >> 2] = $102;
    if (($101 | 0) == 0) {
      var $__p18_0 = $100;
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $104 = _DO_mpn_sublsh_n424($r7, $39, $40, 26, $wsi);
    var $105 = $r7 + ($40 << 2) | 0;
    var $106 = HEAPU32[$105 >> 2];
    HEAP32[$105 >> 2] = $106 - $104 | 0;
    if ($106 >>> 0 < $104 >>> 0) {
      var $__p20_0 = $105;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $__p20_0;
    var $109 = $__p20_0 + 4 | 0;
    var $110 = HEAP32[$109 >> 2];
    var $111 = $110 - 1 | 0;
    HEAP32[$109 >> 2] = $111;
    if (($110 | 0) == 0) {
      var $__p20_0 = $109;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP32[$91 >> 2] = $92;
    var $_pre_phi = $50;
    var $_pre_phi2 = $51;
    __label__ = 25;
    break;
   case 25:
    var $_pre_phi2;
    var $_pre_phi;
    var $114 = $r5 + ($n << 2) | 0;
    var $115 = $n << 1;
    var $116 = _DO_mpn_sublsh_n424($114, $pp, $115, 28, $wsi);
    var $117 = $r5 + ($1 << 2) | 0;
    var $119 = HEAP32[$117 >> 2] - $116 | 0;
    HEAP32[$117 >> 2] = $119;
    var $_sum = $_pre_phi + $n | 0;
    var $120 = $pp + ($_sum << 2) | 0;
    var $121 = HEAPU32[$120 >> 2];
    HEAP32[$120 >> 2] = $121 - (HEAPU32[$pp >> 2] >>> 4) | 0;
    if ($121 >>> 0 < HEAPU32[$pp >> 2] >>> 4 >>> 0) {
      var $__p23_0 = $120;
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $__p23_0;
    var $128 = $__p23_0 + 4 | 0;
    var $129 = HEAP32[$128 >> 2];
    var $130 = $129 - 1 | 0;
    HEAP32[$128 >> 2] = $130;
    if (($129 | 0) == 0) {
      var $__p23_0 = $128;
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $132 = $pp + 4 | 0;
    var $133 = $115 - 1 | 0;
    var $134 = _DO_mpn_sublsh_n424($120, $132, $133, 28, $wsi);
    var $135 = $pp + ($133 + $_sum << 2) | 0;
    var $136 = HEAPU32[$135 >> 2];
    HEAP32[$135 >> 2] = $136 - $134 | 0;
    if ($136 >>> 0 < $134 >>> 0) {
      var $__p25_0 = $135;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $__p25_0;
    var $139 = $__p25_0 + 4 | 0;
    var $140 = HEAP32[$139 >> 2];
    var $141 = $140 - 1 | 0;
    HEAP32[$139 >> 2] = $141;
    if (($140 | 0) == 0) {
      var $__p25_0 = $139;
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $143 = ___gmpn_sub_n($wsi, $r5, $_pre_phi2, $2);
    var $144 = ___gmpn_add_n($_pre_phi2, $_pre_phi2, $r5, $2);
    var $145 = $pp + ($1 << 2) | 0;
    var $146 = $pp + ($1 + $n << 2) | 0;
    var $147 = _DO_mpn_sublsh_n424($146, $pp, $115, 14, $r5);
    var $_sum4 = (i64Math.multiply($n, 0, 6, 0), i64Math.result[0]);
    var $148 = $pp + ($_sum4 << 2) | 0;
    var $150 = HEAP32[$148 >> 2] - $147 | 0;
    HEAP32[$148 >> 2] = $150;
    var $151 = $r3 + ($n << 2) | 0;
    var $152 = HEAPU32[$151 >> 2];
    HEAP32[$151 >> 2] = $152 - (HEAPU32[$pp >> 2] >>> 2) | 0;
    if ($152 >>> 0 < HEAPU32[$pp >> 2] >>> 2 >>> 0) {
      var $__p28_0 = $151;
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $__p28_0;
    var $159 = $__p28_0 + 4 | 0;
    var $160 = HEAP32[$159 >> 2];
    var $161 = $160 - 1 | 0;
    HEAP32[$159 >> 2] = $161;
    if (($160 | 0) == 0) {
      var $__p28_0 = $159;
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $163 = _DO_mpn_sublsh_n424($151, $132, $133, 30, $r5);
    var $164 = $r3 + ($n - 1 + $115 << 2) | 0;
    var $165 = HEAPU32[$164 >> 2];
    HEAP32[$164 >> 2] = $165 - $163 | 0;
    if ($165 >>> 0 < $163 >>> 0) {
      var $__p30_0 = $164;
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $__p30_0;
    var $168 = $__p30_0 + 4 | 0;
    var $169 = HEAP32[$168 >> 2];
    var $170 = $169 - 1 | 0;
    HEAP32[$168 >> 2] = $170;
    if (($169 | 0) == 0) {
      var $__p30_0 = $168;
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $172 = ___gmpn_add_n($r5, $r3, $145, $2);
    var $173 = ___gmpn_sub_n($145, $145, $r3, $2);
    var $174 = $r7 + ($n + 1 << 2) | 0;
    var $175 = _DO_mpn_sublsh_n424($174, $pp, $115, 10, $r3);
    var $176 = $r1 + ($n << 2) | 0;
    var $177 = HEAPU32[$176 >> 2];
    HEAP32[$176 >> 2] = $177 - (HEAPU32[$pp >> 2] >>> 6) | 0;
    if ($177 >>> 0 < HEAPU32[$pp >> 2] >>> 6 >>> 0) {
      var $__p33_0 = $176;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $__p33_0;
    var $184 = $__p33_0 + 4 | 0;
    var $185 = HEAP32[$184 >> 2];
    var $186 = $185 - 1 | 0;
    HEAP32[$184 >> 2] = $186;
    if (($185 | 0) == 0) {
      var $__p33_0 = $184;
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $188 = _DO_mpn_sublsh_n424($176, $132, $133, 26, $r3);
    var $189 = $r1 + ($1 << 2) | 0;
    var $190 = $r1 + ($1 - 1 << 2) | 0;
    var $191 = ___gmpn_sub_1($190, $190, 2, $188);
    var $192 = ___gmpn_sub_n($r3, $r7, $r1, $2);
    var $193 = ___gmpn_add_n($r1, $r1, $r7, $2);
    var $194 = (i64Math.multiply($n, 0, 7, 0), i64Math.result[0]);
    var $195 = $pp + ($194 << 2) | 0;
    var $196 = $pp + ($194 + $n << 2) | 0;
    var $197 = ___gmpn_sub_n($196, $196, $pp, $115);
    var $_sum10 = (i64Math.multiply($n, 0, 10, 0), i64Math.result[0]);
    var $198 = $pp + ($_sum10 << 2) | 0;
    var $200 = HEAP32[$198 >> 2] - $197 | 0;
    HEAP32[$198 >> 2] = $200;
    var $201 = ___gmpn_submul_1($wsi, $145, $2, 1028);
    var $202 = ___gmpn_submul_1($r3, $wsi, $2, 1300);
    var $203 = ___gmpn_submul_1($r3, $145, $2, 1052688);
    ___gmpn_divexact_1($r3, $r3, $2, 188513325);
    var $204 = ___gmpn_bdiv_dbm1c($r3, $r3, $2, 16843009, 0);
    var $205 = ___gmpn_submul_1($wsi, $r3, $2, 12567555);
    ___gmpn_divexact_1($wsi, $wsi, $2, 181440);
    var $206 = $wsi + ($1 << 2) | 0;
    var $207 = HEAPU32[$206 >> 2];
    if ($207 >>> 0 > 33554431) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    HEAP32[$206 >> 2] = $207 | -67108864;
    __label__ = 37;
    break;
   case 37:
    var $212 = ___gmpn_submul_1($145, $r3, $2, 4095);
    var $213 = ___gmpn_addmul_1($145, $wsi, $2, 240);
    ___gmpn_divexact_1($145, $145, $2, 1020);
    var $214 = HEAPU32[$148 >> 2];
    if ($214 >>> 0 > 536870911) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    HEAP32[$148 >> 2] = $214 | -1073741824;
    __label__ = 39;
    break;
   case 39:
    var $219 = _DO_mpn_sublsh_n424($r5, $195, $2, 7, $r7);
    var $220 = _DO_mpn_sublsh_n424($_pre_phi2, $195, $2, 13, $r7);
    var $221 = ___gmpn_submul_1($_pre_phi2, $r5, $2, 400);
    var $222 = _DO_mpn_sublsh_n424($r1, $195, $2, 19, $r7);
    var $223 = ___gmpn_submul_1($r1, $_pre_phi2, $2, 1428);
    var $224 = ___gmpn_submul_1($r1, $r5, $2, 112896);
    ___gmpn_divexact_1($r1, $r1, $2, 182712915);
    var $225 = ___gmpn_bdiv_dbm1c($r1, $r1, $2, 16843009, 0);
    var $226 = ___gmpn_submul_1($_pre_phi2, $r1, $2, 15181425);
    ___gmpn_divexact_1($_pre_phi2, $_pre_phi2, $2, 680400);
    var $227 = ___gmpn_submul_1($r5, $r1, $2, 3969);
    var $228 = ___gmpn_submul_1($r5, $_pre_phi2, $2, 900);
    ___gmpn_divexact_1($r5, $r5, $2, 144);
    var $229 = ___gmpn_sub_n($195, $195, $r1, $2);
    var $230 = ___gmpn_sub_n($195, $195, $r5, $2);
    var $231 = ___gmpn_sub_n($195, $195, $_pre_phi2, $2);
    var $232 = ___gmpn_add_n($145, $_pre_phi2, $145, $2);
    var $233 = ___gmpn_rshift($145, $145, $2, 1);
    var $234 = ___gmpn_sub_n($_pre_phi2, $_pre_phi2, $145, $2);
    var $235 = ___gmpn_sub_n($wsi, $r5, $wsi, $2);
    var $236 = ___gmpn_rshift($wsi, $wsi, $2, 1);
    var $237 = ___gmpn_sub_n($r5, $r5, $wsi, $2);
    var $238 = ___gmpn_add_n($r3, $r1, $r3, $2);
    var $239 = ___gmpn_rshift($r3, $r3, $2, 1);
    var $240 = ___gmpn_sub_n($r1, $r1, $r3, $2);
    var $241 = $pp + ($n << 2) | 0;
    var $242 = ___gmpn_add_n($241, $241, $r3, $n);
    var $243 = $pp + ($115 << 2) | 0;
    var $244 = ___gmpn_add_1($243, $151, $n, $242);
    var $245 = $r3 + ($115 << 2) | 0;
    var $246 = HEAP32[$245 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($246, $244);
    var $247 = $uadd.f0;
    HEAP32[$245 >> 2] = $247;
    var $248 = $uadd.f1;
    if ($248) {
      var $__p36_0 = $245;
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $__p36_0;
    var $249 = $__p36_0 + 4 | 0;
    var $251 = HEAP32[$249 >> 2] + 1 | 0;
    HEAP32[$249 >> 2] = $251;
    if (($251 | 0) == 0) {
      var $__p36_0 = $249;
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $254 = HEAP32[$r3 + ($1 << 2) >> 2];
    var $255 = ___gmpn_add_n($145, $145, $245, $n);
    var $256 = $255 + $254 | 0;
    var $258 = $pp + ($n << 2 << 2) | 0;
    var $259 = HEAP32[$258 >> 2];
    var $uadd11 = _llvm_uadd_with_overflow_i32($259, $256);
    var $260 = $uadd11.f0;
    HEAP32[$258 >> 2] = $260;
    var $261 = $uadd11.f1;
    if ($261) {
      var $__p38_0 = $258;
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $__p38_0;
    var $262 = $__p38_0 + 4 | 0;
    var $264 = HEAP32[$262 >> 2] + 1 | 0;
    HEAP32[$262 >> 2] = $264;
    if (($264 | 0) == 0) {
      var $__p38_0 = $262;
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $266 = (i64Math.multiply($n, 0, 5, 0), i64Math.result[0]);
    var $267 = $pp + ($266 << 2) | 0;
    var $268 = ___gmpn_add_n($267, $267, $wsi, $n);
    var $270 = HEAP32[$148 >> 2] + $268 | 0;
    HEAP32[$148 >> 2] = $270;
    var $271 = $wsi + ($n << 2) | 0;
    var $272 = ___gmpn_add_1($148, $271, $n, $270);
    var $273 = $wsi + ($115 << 2) | 0;
    var $274 = HEAP32[$273 >> 2];
    var $uadd12 = _llvm_uadd_with_overflow_i32($274, $272);
    var $275 = $uadd12.f0;
    HEAP32[$273 >> 2] = $275;
    var $276 = $uadd12.f1;
    if ($276) {
      var $__p40_0 = $273;
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    var $__p40_0;
    var $277 = $__p40_0 + 4 | 0;
    var $279 = HEAP32[$277 >> 2] + 1 | 0;
    HEAP32[$277 >> 2] = $279;
    if (($279 | 0) == 0) {
      var $__p40_0 = $277;
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $281 = HEAP32[$206 >> 2];
    var $282 = ___gmpn_add_n($195, $195, $273, $n);
    var $283 = $282 + $281 | 0;
    var $285 = $pp + ($n << 3 << 2) | 0;
    var $286 = HEAP32[$285 >> 2];
    var $uadd13 = _llvm_uadd_with_overflow_i32($286, $283);
    var $287 = $uadd13.f0;
    HEAP32[$285 >> 2] = $287;
    var $288 = $uadd13.f1;
    if ($288) {
      var $__p42_0 = $285;
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    var $__p42_0;
    var $289 = $__p42_0 + 4 | 0;
    var $291 = HEAP32[$289 >> 2] + 1 | 0;
    HEAP32[$289 >> 2] = $291;
    if (($291 | 0) == 0) {
      var $__p42_0 = $289;
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $293 = (i64Math.multiply($n, 0, 9, 0), i64Math.result[0]);
    var $294 = $pp + ($293 << 2) | 0;
    var $295 = ___gmpn_add_n($294, $294, $r5, $n);
    var $297 = HEAP32[$198 >> 2] + $295 | 0;
    HEAP32[$198 >> 2] = $297;
    var $298 = ___gmpn_add_1($198, $114, $n, $297);
    var $299 = $r5 + ($115 << 2) | 0;
    var $300 = HEAP32[$299 >> 2];
    var $uadd14 = _llvm_uadd_with_overflow_i32($300, $298);
    var $301 = $uadd14.f0;
    HEAP32[$299 >> 2] = $301;
    var $302 = $uadd14.f1;
    if ($302) {
      var $__p44_0 = $299;
      __label__ = 48;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 48:
    var $__p44_0;
    var $303 = $__p44_0 + 4 | 0;
    var $305 = HEAP32[$303 >> 2] + 1 | 0;
    HEAP32[$303 >> 2] = $305;
    if (($305 | 0) == 0) {
      var $__p44_0 = $303;
      __label__ = 48;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $307 = HEAP32[$117 >> 2];
    var $308 = ___gmpn_add_n($_pre_phi2, $_pre_phi2, $299, $n);
    var $309 = $308 + $307 | 0;
    var $310 = (i64Math.multiply($n, 0, 12, 0), i64Math.result[0]);
    var $311 = $pp + ($310 << 2) | 0;
    var $312 = HEAP32[$311 >> 2];
    var $uadd15 = _llvm_uadd_with_overflow_i32($312, $309);
    var $313 = $uadd15.f0;
    HEAP32[$311 >> 2] = $313;
    var $314 = $uadd15.f1;
    if ($314) {
      var $__p46_0 = $311;
      __label__ = 50;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 50:
    var $__p46_0;
    var $315 = $__p46_0 + 4 | 0;
    var $317 = HEAP32[$315 >> 2] + 1 | 0;
    HEAP32[$315 >> 2] = $317;
    if (($317 | 0) == 0) {
      var $__p46_0 = $315;
      __label__ = 50;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    var $319 = (i64Math.multiply($n, 0, 13, 0), i64Math.result[0]);
    var $320 = $pp + ($319 << 2) | 0;
    var $321 = ___gmpn_add_n($320, $320, $r1, $n);
    var $322 = (i64Math.multiply($n, 0, 14, 0), i64Math.result[0]);
    var $323 = $pp + ($322 << 2) | 0;
    var $325 = HEAP32[$323 >> 2] + $321 | 0;
    HEAP32[$323 >> 2] = $325;
    if ($3) {
      __label__ = 52;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 52:
    var $327 = ___gmpn_add_1($323, $176, $n, $325);
    var $328 = $r1 + ($115 << 2) | 0;
    var $329 = HEAP32[$328 >> 2];
    var $uadd16 = _llvm_uadd_with_overflow_i32($329, $327);
    var $330 = $uadd16.f0;
    HEAP32[$328 >> 2] = $330;
    var $331 = $uadd16.f1;
    if ($331) {
      var $__p48_0 = $328;
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 53:
    var $__p48_0;
    var $332 = $__p48_0 + 4 | 0;
    var $334 = HEAP32[$332 >> 2] + 1 | 0;
    HEAP32[$332 >> 2] = $334;
    if (($334 | 0) == 0) {
      var $__p48_0 = $332;
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    if (($spt | 0) > ($n | 0)) {
      __label__ = 55;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 55:
    var $338 = HEAP32[$189 >> 2];
    var $339 = (i64Math.multiply($n, 0, 15, 0), i64Math.result[0]);
    var $340 = $pp + ($339 << 2) | 0;
    var $341 = ___gmpn_add_n($340, $340, $328, $n);
    var $342 = $341 + $338 | 0;
    var $344 = $pp + ($n << 4 << 2) | 0;
    var $345 = HEAP32[$344 >> 2];
    var $uadd17 = _llvm_uadd_with_overflow_i32($345, $342);
    var $346 = $uadd17.f0;
    HEAP32[$344 >> 2] = $346;
    var $347 = $uadd17.f1;
    if ($347) {
      var $__p50_0 = $344;
      __label__ = 56;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 56:
    var $__p50_0;
    var $348 = $__p50_0 + 4 | 0;
    var $350 = HEAP32[$348 >> 2] + 1 | 0;
    HEAP32[$348 >> 2] = $350;
    if (($350 | 0) == 0) {
      var $__p50_0 = $348;
      __label__ = 56;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 57:
    var $353 = (i64Math.multiply($n, 0, 15, 0), i64Math.result[0]);
    var $354 = $pp + ($353 << 2) | 0;
    var $355 = ___gmpn_add_n($354, $354, $328, $spt);
    __label__ = 59;
    break;
   case 58:
    var $357 = ___gmpn_add_1($323, $176, $spt, $325);
    __label__ = 59;
    break;
   case 59:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_interpolate_16pts["X"] = 1;

function _DO_mpn_sublsh_n424($dst, $src, $n, $s, $ws) {
  var $1 = ___gmpn_lshift($ws, $src, $n, $s);
  var $2 = ___gmpn_sub_n($dst, $dst, $ws, $n);
  return $2 + $1 | 0;
}

function ___gmpn_toom_interpolate_5pts($c, $v2, $vm1, $k, $twor, $sa, $vinf0) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $k << 1;
    var $2 = $1 | 1;
    var $3 = $c + ($k << 2) | 0;
    var $4 = $c + ($1 << 2) | 0;
    var $_sum1 = $1 + $k | 0;
    var $5 = $c + ($_sum1 << 2) | 0;
    var $6 = $c + ($_sum1 + $k << 2) | 0;
    if (($sa | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $9 = ___gmpn_add_n($v2, $v2, $vm1, $2);
    var $10 = ___gmpn_bdiv_dbm1c($v2, $v2, $2, 1431655765, 0);
    var $11 = ___gmpn_add_n($vm1, $4, $vm1, $2);
    var $12 = ___gmpn_rshift($vm1, $vm1, $2, 1);
    __label__ = 5;
    break;
   case 4:
    var $14 = ___gmpn_sub_n($v2, $v2, $vm1, $2);
    var $15 = ___gmpn_bdiv_dbm1c($v2, $v2, $2, 1431655765, 0);
    var $16 = ___gmpn_sub_n($vm1, $4, $vm1, $2);
    var $17 = ___gmpn_rshift($vm1, $vm1, $2, 1);
    __label__ = 5;
    break;
   case 5:
    var $19 = ___gmpn_sub_n($4, $4, $c, $1);
    var $21 = HEAP32[$6 >> 2] - $19 | 0;
    HEAP32[$6 >> 2] = $21;
    var $22 = ___gmpn_sub_n($v2, $v2, $4, $2);
    var $23 = ___gmpn_rshift($v2, $v2, $2, 1);
    var $24 = ___gmpn_sub_n($4, $4, $vm1, $2);
    var $25 = ___gmpn_add_n($3, $3, $vm1, $2);
    var $26 = $c + ($_sum1 + 1 << 2) | 0;
    var $27 = HEAP32[$26 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($27, $25);
    var $28 = $uadd.f0;
    HEAP32[$26 >> 2] = $28;
    var $29 = $uadd.f1;
    if ($29) {
      var $__p_0 = $26;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $__p_0;
    var $30 = $__p_0 + 4 | 0;
    var $32 = HEAP32[$30 >> 2] + 1 | 0;
    HEAP32[$30 >> 2] = $32;
    if (($32 | 0) == 0) {
      var $__p_0 = $30;
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $34 = HEAP32[$6 >> 2];
    HEAP32[$6 >> 2] = $vinf0;
    var $35 = ___gmpn_lshift($vm1, $6, $twor, 1);
    var $36 = ___gmpn_sub_n($v2, $v2, $vm1, $twor);
    var $37 = $36 + $35 | 0;
    var $38 = $v2 + ($twor << 2) | 0;
    var $39 = HEAPU32[$38 >> 2];
    HEAP32[$38 >> 2] = $39 - $37 | 0;
    if ($39 >>> 0 < $37 >>> 0) {
      var $__p2_0 = $38;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $__p2_0;
    var $42 = $__p2_0 + 4 | 0;
    var $43 = HEAP32[$42 >> 2];
    var $44 = $43 - 1 | 0;
    HEAP32[$42 >> 2] = $44;
    if (($43 | 0) == 0) {
      var $__p2_0 = $42;
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $46 = $k + 1 | 0;
    var $48 = $v2 + ($k << 2) | 0;
    if (($46 | 0) < ($twor | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    var $50 = ___gmpn_add_n($6, $6, $48, $46);
    var $51 = $c + ($_sum1 + $2 << 2) | 0;
    var $52 = HEAP32[$51 >> 2];
    var $uadd7 = _llvm_uadd_with_overflow_i32($52, $50);
    var $53 = $uadd7.f0;
    HEAP32[$51 >> 2] = $53;
    var $54 = $uadd7.f1;
    if ($54) {
      var $__p4_0 = $51;
      __label__ = 11;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 11:
    var $__p4_0;
    var $55 = $__p4_0 + 4 | 0;
    var $57 = HEAP32[$55 >> 2] + 1 | 0;
    HEAP32[$55 >> 2] = $57;
    if (($57 | 0) == 0) {
      var $__p4_0 = $55;
      __label__ = 11;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $60 = ___gmpn_add_n($6, $6, $48, $twor);
    __label__ = 13;
    break;
   case 13:
    var $61 = ___gmpn_sub_n($4, $4, $6, $twor);
    var $62 = HEAP32[$6 >> 2];
    HEAP32[$6 >> 2] = $34;
    var $63 = $c + ($1 + $twor << 2) | 0;
    var $64 = HEAPU32[$63 >> 2];
    HEAP32[$63 >> 2] = $64 - $61 | 0;
    if ($64 >>> 0 < $61 >>> 0) {
      var $__p6_0 = $63;
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $__p6_0;
    var $67 = $__p6_0 + 4 | 0;
    var $68 = HEAP32[$67 >> 2];
    var $69 = $68 - 1 | 0;
    HEAP32[$67 >> 2] = $69;
    if (($68 | 0) == 0) {
      var $__p6_0 = $67;
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $71 = ___gmpn_sub_n($3, $3, $v2, $k);
    var $72 = HEAPU32[$4 >> 2];
    HEAP32[$4 >> 2] = $72 - $71 | 0;
    if ($72 >>> 0 < $71 >>> 0) {
      var $__p8_0 = $4;
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $__p8_0;
    var $75 = $__p8_0 + 4 | 0;
    var $76 = HEAP32[$75 >> 2];
    var $77 = $76 - 1 | 0;
    HEAP32[$75 >> 2] = $77;
    if (($76 | 0) == 0) {
      var $__p8_0 = $75;
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $79 = ___gmpn_add_n($5, $5, $v2, $k);
    var $81 = HEAP32[$6 >> 2] + $79 | 0;
    var $uadd5 = _llvm_uadd_with_overflow_i32($81, $62);
    var $82 = $uadd5.f0;
    HEAP32[$6 >> 2] = $82;
    var $83 = $uadd5.f1;
    if ($83) {
      var $__p10_0 = $6;
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $__p10_0;
    var $84 = $__p10_0 + 4 | 0;
    var $86 = HEAP32[$84 >> 2] + 1 | 0;
    HEAP32[$84 >> 2] = $86;
    if (($86 | 0) == 0) {
      var $__p10_0 = $84;
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_interpolate_5pts["X"] = 1;

function ___gmpn_xnor_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__n_0 = -$n | 0;
    __label__ = 3;
    break;
   case 3:
    var $__n_0;
    var $_sum = $__n_0 + $n | 0;
    var $8 = HEAP32[$vp + ($_sum << 2) >> 2] ^ (HEAP32[$up + ($_sum << 2) >> 2] ^ -1);
    HEAP32[$rp + ($_sum << 2) >> 2] = $8;
    var $10 = $__n_0 + 1 | 0;
    if (($10 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $__n_0 = $10;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_xor_n($rp, $up, $vp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__n_0 = -$n | 0;
    __label__ = 3;
    break;
   case 3:
    var $__n_0;
    var $_sum = $__n_0 + $n | 0;
    var $7 = HEAP32[$vp + ($_sum << 2) >> 2] ^ HEAP32[$up + ($_sum << 2) >> 2];
    HEAP32[$rp + ($_sum << 2) >> 2] = $7;
    var $9 = $__n_0 + 1 | 0;
    if (($9 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $__n_0 = $9;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_toom_interpolate_6pts($pp, $n, $flags, $w4, $w2, $w1, $w0n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = $n << 1;
    var $4 = $3 | 1;
    if (($flags & 2 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = ___gmpn_add_n($w2, $w1, $w2, $4);
    __label__ = 5;
    break;
   case 4:
    var $8 = ___gmpn_sub_n($w2, $w1, $w2, $4);
    __label__ = 5;
    break;
   case 5:
    var $10 = ___gmpn_rshift($w2, $w2, $4, 2);
    var $11 = ___gmpn_sub_n($w1, $w1, $pp, $3);
    var $12 = $w1 + ($3 << 2) | 0;
    var $14 = HEAP32[$12 >> 2] - $11 | 0;
    HEAP32[$12 >> 2] = $14;
    var $15 = ___gmpn_rshift($w1, $w1, $4, 1);
    var $16 = ___gmpn_sub_n($w1, $w1, $w2, $4);
    var $17 = ___gmpn_rshift($w1, $w1, $4, 1);
    var $20 = $pp + ($3 << 2) | 0;
    if (($flags & 1 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $22 = ___gmpn_add_n($w4, $20, $w4, $4);
    var $23 = ___gmpn_rshift($w4, $w4, $4, 1);
    __label__ = 8;
    break;
   case 7:
    var $25 = ___gmpn_sub_n($w4, $20, $w4, $4);
    var $26 = ___gmpn_rshift($w4, $w4, $4, 1);
    __label__ = 8;
    break;
   case 8:
    var $28 = ___gmpn_sub_n($w2, $w2, $w4, $4);
    var $29 = ___gmpn_bdiv_dbm1c($w2, $w2, $4, 1431655765, 0);
    var $30 = ___gmpn_sub_n($20, $20, $w4, $4);
    var $31 = ___gmpn_sub_n($20, $20, $pp, $3);
    var $32 = $pp + ($n << 2 << 2) | 0;
    var $34 = HEAP32[$32 >> 2] - $31 | 0;
    HEAP32[$32 >> 2] = $34;
    var $35 = ___gmpn_sub_n($w1, $w1, $20, $4);
    var $36 = ___gmpn_bdiv_dbm1c($w1, $w1, $4, 1431655765, 0);
    var $37 = $pp + ($n << 2) | 0;
    var $38 = ___gmpn_add_n($37, $37, $w4, $4);
    var $39 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $40 = $pp + ($39 << 2) | 0;
    var $41 = $pp + ($39 + 1 << 2) | 0;
    var $42 = HEAP32[$41 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($42, $38);
    var $43 = $uadd.f0;
    HEAP32[$41 >> 2] = $43;
    var $44 = $uadd.f1;
    if ($44) {
      var $__p_0 = $41;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $__p_0;
    var $45 = $__p_0 + 4 | 0;
    var $47 = HEAP32[$45 >> 2] + 1 | 0;
    HEAP32[$45 >> 2] = $47;
    if (($47 | 0) == 0) {
      var $__p_0 = $45;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $49 = (i64Math.multiply($n, 0, 5, 0), i64Math.result[0]);
    var $50 = $pp + ($49 << 2) | 0;
    var $51 = ___gmpn_lshift($w4, $50, $w0n, 2);
    var $52 = ___gmpn_sub_n($w2, $w2, $w4, $w0n);
    var $53 = $52 + $51 | 0;
    var $54 = $w2 + ($w0n << 2) | 0;
    var $55 = HEAPU32[$54 >> 2];
    HEAP32[$54 >> 2] = $55 - $53 | 0;
    if ($55 >>> 0 < $53 >>> 0) {
      var $__p2_0 = $54;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $__p2_0;
    var $58 = $__p2_0 + 4 | 0;
    var $59 = HEAP32[$58 >> 2];
    var $60 = $59 - 1 | 0;
    HEAP32[$58 >> 2] = $60;
    if (($59 | 0) == 0) {
      var $__p2_0 = $58;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $62 = ___gmpn_sub_n($37, $37, $w2, $n);
    var $63 = HEAPU32[$20 >> 2];
    HEAP32[$20 >> 2] = $63 - $62 | 0;
    if ($63 >>> 0 < $62 >>> 0) {
      var $__p4_0 = $20;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $__p4_0;
    var $66 = $__p4_0 + 4 | 0;
    var $67 = HEAP32[$66 >> 2];
    var $68 = $67 - 1 | 0;
    HEAP32[$66 >> 2] = $68;
    if (($67 | 0) == 0) {
      var $__p4_0 = $66;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $70 = HEAP32[$32 >> 2];
    var $71 = ___gmpn_add_n($40, $40, $w2, $n);
    var $72 = $71 + $70 | 0;
    var $74 = HEAP32[$w2 + ($3 << 2) >> 2];
    var $75 = $w2 + ($n << 2) | 0;
    var $76 = ___gmpn_add_n($32, $w1, $75, $n);
    var $77 = $76 + $74 | 0;
    var $78 = $w1 + ($n << 2) | 0;
    var $79 = HEAP32[$78 >> 2];
    var $uadd2 = _llvm_uadd_with_overflow_i32($79, $77);
    var $80 = $uadd2.f0;
    HEAP32[$78 >> 2] = $80;
    var $81 = $uadd2.f1;
    if ($81) {
      var $__p6_0 = $78;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $__p6_0;
    var $82 = $__p6_0 + 4 | 0;
    var $84 = HEAP32[$82 >> 2] + 1 | 0;
    HEAP32[$82 >> 2] = $84;
    if (($84 | 0) == 0) {
      var $__p6_0 = $82;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $86 = ($w0n | 0) > ($n | 0);
    if ($86) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $88 = HEAP32[$12 >> 2];
    var $89 = ___gmpn_add_n($50, $50, $78, $n);
    var $cy6_0 = $89 + $88 | 0;
    __label__ = 19;
    break;
   case 18:
    var $92 = ___gmpn_add_n($50, $50, $78, $w0n);
    var $cy6_0 = $92;
    __label__ = 19;
    break;
   case 19:
    var $cy6_0;
    var $94 = $w0n + $n | 0;
    var $95 = ___gmpn_sub_n($20, $20, $32, $94);
    var $97 = $pp + ($49 - 1 + $w0n << 2) | 0;
    var $98 = HEAP32[$97 >> 2];
    HEAP32[$97 >> 2] = 1;
    if ($86) {
      __label__ = 20;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 20:
    var $101 = HEAPU32[$32 >> 2];
    if ($72 >>> 0 > $cy6_0 >>> 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 21:
    var $103 = $72 - $cy6_0 | 0;
    var $uadd9 = _llvm_uadd_with_overflow_i32($101, $103);
    var $104 = $uadd9.f0;
    HEAP32[$32 >> 2] = $104;
    var $105 = $uadd9.f1;
    if ($105) {
      var $__p8_0 = $32;
      __label__ = 22;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 22:
    var $__p8_0;
    var $106 = $__p8_0 + 4 | 0;
    var $108 = HEAP32[$106 >> 2] + 1 | 0;
    HEAP32[$106 >> 2] = $108;
    if (($108 | 0) == 0) {
      var $__p8_0 = $106;
      __label__ = 22;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 23:
    var $111 = $cy6_0 - $72 | 0;
    var $112 = $101 - $111 | 0;
    HEAP32[$32 >> 2] = $112;
    if ($101 >>> 0 < $111 >>> 0) {
      var $__p10_0 = $32;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $__p10_0;
    var $114 = $__p10_0 + 4 | 0;
    var $115 = HEAP32[$114 >> 2];
    var $116 = $115 - 1 | 0;
    HEAP32[$114 >> 2] = $116;
    if (($115 | 0) == 0) {
      var $__p10_0 = $114;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $118 = $pp + ($39 + $w0n << 2) | 0;
    var $119 = HEAPU32[$118 >> 2];
    HEAP32[$118 >> 2] = $119 - $95 | 0;
    if ($119 >>> 0 < $95 >>> 0) {
      var $__p12_0 = $118;
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $__p12_0;
    var $122 = $__p12_0 + 4 | 0;
    var $123 = HEAP32[$122 >> 2];
    var $124 = $123 - 1 | 0;
    HEAP32[$122 >> 2] = $124;
    if (($123 | 0) == 0) {
      var $__p12_0 = $122;
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $126 = $pp + ($49 + $n << 2) | 0;
    var $127 = HEAP32[$126 >> 2];
    var $uadd8 = _llvm_uadd_with_overflow_i32($127, $cy6_0);
    var $128 = $uadd8.f0;
    HEAP32[$126 >> 2] = $128;
    var $129 = $uadd8.f1;
    if ($129) {
      var $__p14_0 = $126;
      __label__ = 28;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 28:
    var $__p14_0;
    var $130 = $__p14_0 + 4 | 0;
    var $132 = HEAP32[$130 >> 2] + 1 | 0;
    HEAP32[$130 >> 2] = $132;
    if (($132 | 0) == 0) {
      var $__p14_0 = $130;
      __label__ = 28;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 29:
    var $135 = HEAP32[$32 >> 2];
    var $uadd4 = _llvm_uadd_with_overflow_i32($135, $72);
    var $136 = $uadd4.f0;
    HEAP32[$32 >> 2] = $136;
    var $137 = $uadd4.f1;
    if ($137) {
      var $__p16_0 = $32;
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $__p16_0;
    var $138 = $__p16_0 + 4 | 0;
    var $140 = HEAP32[$138 >> 2] + 1 | 0;
    HEAP32[$138 >> 2] = $140;
    if (($140 | 0) == 0) {
      var $__p16_0 = $138;
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $142 = $pp + ($39 + $w0n << 2) | 0;
    var $143 = HEAPU32[$142 >> 2];
    var $144 = $95 + $cy6_0 | 0;
    HEAP32[$142 >> 2] = $143 - $144 | 0;
    if ($143 >>> 0 < $144 >>> 0) {
      var $__p18_0 = $142;
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    var $__p18_0;
    var $147 = $__p18_0 + 4 | 0;
    var $148 = HEAP32[$147 >> 2];
    var $149 = $148 - 1 | 0;
    HEAP32[$147 >> 2] = $149;
    if (($148 | 0) == 0) {
      var $__p18_0 = $147;
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $153 = $98 - 1 + HEAP32[$97 >> 2] | 0;
    HEAP32[$97 >> 2] = $153;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_interpolate_6pts["X"] = 1;

function ___gmpn_toom_interpolate_7pts($rp, $n, $flags, $w1, $w3, $w4, $w5, $w6n, $tp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $n << 1;
    var $2 = $1 | 1;
    var $3 = ___gmpn_add_n($w5, $w5, $w4, $2);
    if (($flags & 1 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $7 = ___gmpn_add_n($w1, $w1, $w4, $2);
    var $8 = ___gmpn_rshift($w1, $w1, $2, 1);
    __label__ = 5;
    break;
   case 4:
    var $10 = ___gmpn_sub_n($w1, $w4, $w1, $2);
    var $11 = ___gmpn_rshift($w1, $w1, $2, 1);
    __label__ = 5;
    break;
   case 5:
    var $13 = ___gmpn_sub($w4, $w4, $2, $rp, $1);
    var $14 = ___gmpn_sub_n($w4, $w4, $w1, $2);
    var $15 = ___gmpn_rshift($w4, $w4, $2, 2);
    var $16 = (i64Math.multiply($n, 0, 6, 0), i64Math.result[0]);
    var $17 = $rp + ($16 << 2) | 0;
    var $18 = ___gmpn_lshift($tp, $17, $w6n, 4);
    HEAP32[$tp + ($w6n << 2) >> 2] = $18;
    var $20 = $w6n + 1 | 0;
    var $21 = ___gmpn_sub($w4, $w4, $2, $tp, $20);
    var $24 = $rp + ($1 << 2) | 0;
    if (($flags & 2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $26 = ___gmpn_add_n($w3, $w3, $24, $2);
    var $27 = ___gmpn_rshift($w3, $w3, $2, 1);
    __label__ = 8;
    break;
   case 7:
    var $29 = ___gmpn_sub_n($w3, $24, $w3, $2);
    var $30 = ___gmpn_rshift($w3, $w3, $2, 1);
    __label__ = 8;
    break;
   case 8:
    var $32 = ___gmpn_sub_n($24, $24, $w3, $2);
    var $33 = ___gmpn_submul_1($w5, $24, $2, 65);
    var $34 = ___gmpn_sub($24, $24, $2, $17, $w6n);
    var $35 = ___gmpn_sub($24, $24, $2, $rp, $1);
    var $36 = ___gmpn_addmul_1($w5, $24, $2, 45);
    var $37 = ___gmpn_rshift($w5, $w5, $2, 1);
    var $38 = ___gmpn_sub_n($w4, $w4, $24, $2);
    var $39 = ___gmpn_bdiv_dbm1c($w4, $w4, $2, 1431655765, 0);
    var $40 = ___gmpn_sub_n($24, $24, $w4, $2);
    var $41 = ___gmpn_sub_n($w1, $w5, $w1, $2);
    var $42 = ___gmpn_lshift($tp, $w3, $2, 3);
    var $43 = ___gmpn_sub_n($w5, $w5, $tp, $2);
    ___gmpn_divexact_1($w5, $w5, $2, 9);
    var $44 = ___gmpn_sub_n($w3, $w3, $w5, $2);
    var $45 = ___gmpn_bdiv_dbm1c($w1, $w1, $2, 286331153, 0);
    var $46 = ___gmpn_add_n($w1, $w1, $w5, $2);
    var $47 = ___gmpn_rshift($w1, $w1, $2, 1);
    var $48 = ___gmpn_sub_n($w5, $w5, $w1, $2);
    var $49 = $rp + ($n << 2) | 0;
    var $50 = ___gmpn_add_n($49, $49, $w1, $2);
    var $_sum = $n + 1 | 0;
    var $51 = $rp + ($_sum + $1 << 2) | 0;
    var $52 = HEAP32[$51 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($52, $50);
    var $53 = $uadd.f0;
    HEAP32[$51 >> 2] = $53;
    var $54 = $uadd.f1;
    if ($54) {
      var $__p_0 = $51;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $__p_0;
    var $55 = $__p_0 + 4 | 0;
    var $57 = HEAP32[$55 >> 2] + 1 | 0;
    HEAP32[$55 >> 2] = $57;
    if (($57 | 0) == 0) {
      var $__p_0 = $55;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $59 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $60 = $rp + ($59 << 2) | 0;
    var $61 = ___gmpn_add_n($60, $60, $w3, $n);
    var $62 = $w3 + ($n << 2) | 0;
    var $64 = $rp + ($n << 2 << 2) | 0;
    var $67 = HEAP32[$62 >> 2] + $61 + HEAP32[$64 >> 2] | 0;
    HEAP32[$62 >> 2] = $67;
    if ($67 >>> 0 < (HEAP32[$64 >> 2] + $61 | 0) >>> 0) {
      var $__p2_0 = $62;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $__p2_0;
    var $71 = $__p2_0 + 4 | 0;
    var $73 = HEAP32[$71 >> 2] + 1 | 0;
    HEAP32[$71 >> 2] = $73;
    if (($73 | 0) == 0) {
      var $__p2_0 = $71;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $75 = ___gmpn_add_n($64, $62, $w4, $n);
    var $76 = $w4 + ($n << 2) | 0;
    var $78 = $w3 + ($1 << 2) | 0;
    var $81 = HEAP32[$76 >> 2] + $75 + HEAP32[$78 >> 2] | 0;
    HEAP32[$76 >> 2] = $81;
    if ($81 >>> 0 < (HEAP32[$78 >> 2] + $75 | 0) >>> 0) {
      var $__p4_0 = $76;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $__p4_0;
    var $85 = $__p4_0 + 4 | 0;
    var $87 = HEAP32[$85 >> 2] + 1 | 0;
    HEAP32[$85 >> 2] = $87;
    if (($87 | 0) == 0) {
      var $__p4_0 = $85;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $89 = (i64Math.multiply($n, 0, 5, 0), i64Math.result[0]);
    var $90 = $rp + ($89 << 2) | 0;
    var $91 = ___gmpn_add_n($90, $76, $w5, $n);
    var $92 = $w5 + ($n << 2) | 0;
    var $94 = $w4 + ($1 << 2) | 0;
    var $97 = HEAP32[$92 >> 2] + $91 + HEAP32[$94 >> 2] | 0;
    HEAP32[$92 >> 2] = $97;
    if ($97 >>> 0 < (HEAP32[$94 >> 2] + $91 | 0) >>> 0) {
      var $__p6_0 = $92;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $__p6_0;
    var $101 = $__p6_0 + 4 | 0;
    var $103 = HEAP32[$101 >> 2] + 1 | 0;
    HEAP32[$101 >> 2] = $103;
    if (($103 | 0) == 0) {
      var $__p6_0 = $101;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if (($_sum | 0) < ($w6n | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $107 = ___gmpn_add($17, $17, $w6n, $92, $_sum);
    __label__ = 19;
    break;
   case 18:
    var $109 = ___gmpn_add_n($17, $17, $92, $w6n);
    __label__ = 19;
    break;
   case 19:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_interpolate_7pts["X"] = 1;

function ___gmpn_toom_interpolate_8pts($pp, $n, $r3, $r7, $spt, $ws) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = (i64Math.multiply($n, 0, 3, 0), i64Math.result[0]);
    var $2 = $pp + ($1 << 2) | 0;
    var $3 = (i64Math.multiply($n, 0, 7, 0), i64Math.result[0]);
    var $4 = $pp + ($3 << 2) | 0;
    var $5 = $r3 + ($n << 2) | 0;
    var $6 = HEAPU32[$5 >> 2];
    HEAP32[$5 >> 2] = $6 - (HEAPU32[$pp >> 2] >>> 4) | 0;
    if ($6 >>> 0 < HEAPU32[$pp >> 2] >>> 4 >>> 0) {
      var $__p_0 = $5;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $__p_0;
    var $13 = $__p_0 + 4 | 0;
    var $14 = HEAP32[$13 >> 2];
    var $15 = $14 - 1 | 0;
    HEAP32[$13 >> 2] = $15;
    if (($14 | 0) == 0) {
      var $__p_0 = $13;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $17 = $pp + 4 | 0;
    var $18 = $n << 1;
    var $19 = $18 - 1 | 0;
    var $20 = _DO_mpn_sublsh_n433($5, $17, $19, 28, $ws);
    var $21 = $r3 + ($n - 1 + $18 << 2) | 0;
    var $22 = HEAPU32[$21 >> 2];
    HEAP32[$21 >> 2] = $22 - $20 | 0;
    if ($22 >>> 0 < $20 >>> 0) {
      var $__p2_0 = $21;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $__p2_0;
    var $25 = $__p2_0 + 4 | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = $26 - 1 | 0;
    HEAP32[$25 >> 2] = $27;
    if (($26 | 0) == 0) {
      var $__p2_0 = $25;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $29 = _DO_mpn_sublsh_n433($r3, $4, $spt, 12, $ws);
    var $30 = $r3 + ($spt << 2) | 0;
    var $31 = HEAPU32[$30 >> 2];
    HEAP32[$30 >> 2] = $31 - $29 | 0;
    if ($31 >>> 0 < $29 >>> 0) {
      var $__p4_0 = $30;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $__p4_0;
    var $34 = $__p4_0 + 4 | 0;
    var $35 = HEAP32[$34 >> 2];
    var $36 = $35 - 1 | 0;
    HEAP32[$34 >> 2] = $36;
    if (($35 | 0) == 0) {
      var $__p4_0 = $34;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_sum2 = $1 + $n | 0;
    var $38 = $pp + ($_sum2 << 2) | 0;
    var $39 = HEAPU32[$38 >> 2];
    HEAP32[$38 >> 2] = $39 - (HEAPU32[$pp >> 2] >>> 2) | 0;
    if ($39 >>> 0 < HEAPU32[$pp >> 2] >>> 2 >>> 0) {
      var $__p7_0 = $38;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $__p7_0;
    var $46 = $__p7_0 + 4 | 0;
    var $47 = HEAP32[$46 >> 2];
    var $48 = $47 - 1 | 0;
    HEAP32[$46 >> 2] = $48;
    if (($47 | 0) == 0) {
      var $__p7_0 = $46;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $50 = _DO_mpn_sublsh_n433($38, $17, $19, 30, $ws);
    var $51 = $pp + ($19 + $_sum2 << 2) | 0;
    var $52 = HEAPU32[$51 >> 2];
    HEAP32[$51 >> 2] = $52 - $50 | 0;
    if ($52 >>> 0 < $50 >>> 0) {
      var $__p9_0 = $51;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $__p9_0;
    var $55 = $__p9_0 + 4 | 0;
    var $56 = HEAP32[$55 >> 2];
    var $57 = $56 - 1 | 0;
    HEAP32[$55 >> 2] = $57;
    if (($56 | 0) == 0) {
      var $__p9_0 = $55;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $59 = _DO_mpn_sublsh_n433($2, $4, $spt, 6, $ws);
    var $60 = $pp + ($1 + $spt << 2) | 0;
    var $61 = HEAPU32[$60 >> 2];
    HEAP32[$60 >> 2] = $61 - $59 | 0;
    if ($61 >>> 0 < $59 >>> 0) {
      var $__p11_0 = $60;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $__p11_0;
    var $64 = $__p11_0 + 4 | 0;
    var $65 = HEAP32[$64 >> 2];
    var $66 = $65 - 1 | 0;
    HEAP32[$64 >> 2] = $66;
    if (($65 | 0) == 0) {
      var $__p11_0 = $64;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $68 = $r7 + ($n << 2) | 0;
    var $69 = ___gmpn_sub_n($68, $68, $pp, $18);
    var $70 = $r7 + ($1 << 2) | 0;
    var $72 = HEAP32[$70 >> 2] - $69 | 0;
    HEAP32[$70 >> 2] = $72;
    var $73 = ___gmpn_sub_n($r7, $r7, $4, $spt);
    var $74 = $r7 + ($spt << 2) | 0;
    var $75 = HEAPU32[$74 >> 2];
    HEAP32[$74 >> 2] = $75 - $73 | 0;
    if ($75 >>> 0 < $73 >>> 0) {
      var $__p13_0 = $74;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $__p13_0;
    var $78 = $__p13_0 + 4 | 0;
    var $79 = HEAP32[$78 >> 2];
    var $80 = $79 - 1 | 0;
    HEAP32[$78 >> 2] = $80;
    if (($79 | 0) == 0) {
      var $__p13_0 = $78;
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $82 = $1 + 1 | 0;
    var $83 = ___gmpn_sub_n($r3, $r3, $2, $82);
    var $84 = ___gmpn_rshift($r3, $r3, $82, 2);
    var $85 = ___gmpn_sub_n($2, $2, $r7, $82);
    var $86 = ___gmpn_sub_n($r3, $r3, $2, $82);
    ___gmpn_divexact_1($r3, $r3, $82, 45);
    var $87 = ___gmpn_bdiv_dbm1c($2, $2, $82, 1431655765, 0);
    var $88 = _DO_mpn_sublsh_n433($2, $r3, $82, 2, $ws);
    var $89 = $pp + ($n << 2) | 0;
    var $90 = ___gmpn_add_n($89, $89, $r7, $n);
    var $91 = ___gmpn_sub_n($89, $89, $2, $n);
    var $92 = $90 - $91 | 0;
    if (($92 | 0) < 0) {
      var $__p15_0 = $68;
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $__p15_0;
    var $95 = HEAP32[$__p15_0 >> 2];
    var $96 = $95 - 1 | 0;
    HEAP32[$__p15_0 >> 2] = $96;
    if (($95 | 0) == 0) {
      var $__p15_0 = $__p15_0 + 4 | 0;
      __label__ = 17;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 18:
    var $99 = HEAP32[$68 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($99, $92);
    var $100 = $uadd.f0;
    HEAP32[$68 >> 2] = $100;
    var $101 = $uadd.f1;
    if ($101) {
      var $__p17_0 = $68;
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $__p17_0;
    var $102 = $__p17_0 + 4 | 0;
    var $104 = HEAP32[$102 >> 2] + 1 | 0;
    HEAP32[$102 >> 2] = $104;
    if (($104 | 0) == 0) {
      var $__p17_0 = $102;
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $106 = $pp + ($18 << 2) | 0;
    var $107 = ___gmpn_sub_n($106, $68, $38, $n);
    var $108 = $r7 + ($18 << 2) | 0;
    var $109 = HEAPU32[$108 >> 2];
    HEAP32[$108 >> 2] = $109 - $107 | 0;
    if ($109 >>> 0 < $107 >>> 0) {
      var $__p19_0 = $108;
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $__p19_0;
    var $112 = $__p19_0 + 4 | 0;
    var $113 = HEAP32[$112 >> 2];
    var $114 = $113 - 1 | 0;
    HEAP32[$112 >> 2] = $114;
    if (($113 | 0) == 0) {
      var $__p19_0 = $112;
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $116 = $n + 1 | 0;
    var $117 = ___gmpn_add_n($2, $2, $108, $116);
    var $118 = $pp + ($1 + $18 << 2) | 0;
    var $119 = ___gmpn_add_n($118, $118, $r3, $n);
    var $_sum7 = (i64Math.multiply($n, 0, 6, 0), i64Math.result[0]);
    var $120 = $pp + ($_sum7 << 2) | 0;
    var $122 = HEAP32[$120 >> 2] + $119 | 0;
    HEAP32[$120 >> 2] = $122;
    var $123 = ___gmpn_sub_n($2, $2, $118, $116);
    var $124 = $117 - $123 | 0;
    var $126 = $pp + ($_sum2 + 1 << 2) | 0;
    if (($124 | 0) < 0) {
      var $__p21_0 = $126;
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $__p21_0;
    var $128 = HEAP32[$__p21_0 >> 2];
    var $129 = $128 - 1 | 0;
    HEAP32[$__p21_0 >> 2] = $129;
    if (($128 | 0) == 0) {
      var $__p21_0 = $__p21_0 + 4 | 0;
      __label__ = 23;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 24:
    var $132 = HEAP32[$126 >> 2];
    var $uadd9 = _llvm_uadd_with_overflow_i32($132, $124);
    var $133 = $uadd9.f0;
    HEAP32[$126 >> 2] = $133;
    var $134 = $uadd9.f1;
    if ($134) {
      var $__p23_0 = $126;
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $__p23_0;
    var $135 = $__p23_0 + 4 | 0;
    var $137 = HEAP32[$135 >> 2] + 1 | 0;
    HEAP32[$135 >> 2] = $137;
    if (($137 | 0) == 0) {
      var $__p23_0 = $135;
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $140 = $pp + ($n << 2 << 2) | 0;
    var $141 = $18 | 1;
    var $142 = ___gmpn_sub_n($140, $38, $5, $141);
    var $143 = HEAP32[$120 >> 2];
    var $144 = ___gmpn_add_1($120, $5, $n, $143);
    var $145 = $r3 + ($18 << 2) | 0;
    var $146 = HEAP32[$145 >> 2];
    var $uadd10 = _llvm_uadd_with_overflow_i32($146, $144);
    var $147 = $uadd10.f0;
    HEAP32[$145 >> 2] = $147;
    var $148 = $uadd10.f1;
    if ($148) {
      var $__p25_0 = $145;
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $__p25_0;
    var $149 = $__p25_0 + 4 | 0;
    var $151 = HEAP32[$149 >> 2] + 1 | 0;
    HEAP32[$149 >> 2] = $151;
    if (($151 | 0) == 0) {
      var $__p25_0 = $149;
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $154 = HEAP32[$r3 + ($1 << 2) >> 2];
    var $155 = ___gmpn_add_n($4, $4, $145, $n);
    var $156 = $155 + $154 | 0;
    var $158 = $pp + ($n << 3 << 2) | 0;
    var $159 = HEAP32[$158 >> 2];
    var $uadd11 = _llvm_uadd_with_overflow_i32($159, $156);
    var $160 = $uadd11.f0;
    HEAP32[$158 >> 2] = $160;
    var $161 = $uadd11.f1;
    if ($161) {
      var $__p27_0 = $158;
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $__p27_0;
    var $162 = $__p27_0 + 4 | 0;
    var $164 = HEAP32[$162 >> 2] + 1 | 0;
    HEAP32[$162 >> 2] = $164;
    if (($164 | 0) == 0) {
      var $__p27_0 = $162;
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpn_toom_interpolate_8pts["X"] = 1;

function _DO_mpn_sublsh_n433($dst, $src, $n, $s, $ws) {
  var $1 = ___gmpn_lshift($ws, $src, $n, $s);
  var $2 = ___gmpn_sub_n($dst, $dst, $ws, $n);
  return $2 + $1 | 0;
}

function ___gmpn_trialdiv($tp, $tn, $nprimes, $where) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_0 = HEAP32[$where >> 2];
    var $_01 = $nprimes;
    __label__ = 3;
    break;
   case 3:
    var $_01;
    var $i_0;
    if ($i_0 >>> 0 < 463) {
      __label__ = 4;
      break;
    } else {
      var $_0 = 0;
      __label__ = 9;
      break;
    }
   case 4:
    var $7 = _gmp_primes_ptab + $i_0 * 36 + 4 | 0;
    var $10 = HEAP32[_gmp_primes_ptab + $i_0 * 36 >> 2] << HEAP32[_gmp_primes_ptab + $i_0 * 36 + 8 >> 2];
    var $11 = ___gmpn_mod_1s_4p($tp, $tn, $10, $7);
    var $14 = HEAPU32[_gmp_primes_ptab + $i_0 * 36 + 32 >> 2];
    var $16 = $14 >>> 24;
    var $_sum = ($14 & 16777215) + $16 | 0;
    var $j_0 = -$16 | 0;
    __label__ = 5;
    break;
   case 5:
    var $j_0;
    if (($j_0 | 0) < 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    var $_sum2 = $_sum + $j_0 | 0;
    var $22 = HEAPU32[_gmp_primes_dtab + ($_sum2 << 3) >> 2];
    var $23 = (i64Math.multiply($22, 0, $11, 0), i64Math.result[0]);
    if ($23 >>> 0 > HEAPU32[_gmp_primes_dtab + ($_sum2 << 3) + 4 >> 2] >>> 0) {
      var $j_0 = $j_0 + 1 | 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    HEAP32[$where >> 2] = $i_0;
    var $_0 = $22;
    __label__ = 9;
    break;
   case 8:
    var $30 = $_01 - $16 | 0;
    if (($30 | 0) < 1) {
      var $_0 = 0;
      __label__ = 9;
      break;
    } else {
      var $i_0 = $i_0 + 1 | 0;
      var $_01 = $30;
      __label__ = 3;
      break;
    }
   case 9:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpn_zero($rp, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $rp2 = $rp;
    var $2 = $n << 2;
    _memset($rp2, 0, $2, 4);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_add($rop, $op1, $op2) {
  ___gmpq_aors($rop, $op1, $op2, 8);
  return;
}

function ___gmpq_equal($op1, $op2) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$op1 + 4 >> 2];
    if (($2 | 0) == (HEAP32[$op2 + 4 >> 2] | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 10;
      break;
    }
   case 3:
    var $8 = HEAP32[$op1 + 8 >> 2];
    var $10 = HEAP32[$op2 + 8 >> 2];
    var $13 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $i_0 = 0;
    __label__ = 4;
    break;
   case 4:
    var $i_0;
    if (($i_0 | 0) < ($13 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    if ((HEAP32[$8 + ($i_0 << 2) >> 2] | 0) == (HEAP32[$10 + ($i_0 << 2) >> 2] | 0)) {
      var $i_0 = $i_0 + 1 | 0;
      __label__ = 4;
      break;
    } else {
      var $_0 = 0;
      __label__ = 10;
      break;
    }
   case 6:
    var $25 = HEAP32[$op1 + 16 >> 2];
    if (($25 | 0) == (HEAP32[$op2 + 16 >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      var $_0 = 0;
      __label__ = 10;
      break;
    }
   case 7:
    var $31 = HEAP32[$op1 + 20 >> 2];
    var $33 = HEAP32[$op2 + 20 >> 2];
    var $i_1 = 0;
    __label__ = 8;
    break;
   case 8:
    var $i_1;
    if (($i_1 | 0) < ($25 | 0)) {
      __label__ = 9;
      break;
    } else {
      var $_0 = 1;
      __label__ = 10;
      break;
    }
   case 9:
    if ((HEAP32[$31 + ($i_1 << 2) >> 2] | 0) == (HEAP32[$33 + ($i_1 << 2) >> 2] | 0)) {
      var $i_1 = $i_1 + 1 | 0;
      __label__ = 8;
      break;
    } else {
      var $_0 = 0;
      __label__ = 10;
      break;
    }
   case 10:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_aors($rop, $op1, $op2, $fun) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 52;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $gcd = __stackBase__;
    var $tmp1 = __stackBase__ + 12;
    var $tmp2 = __stackBase__ + 24;
    var $__tmp_marker = __stackBase__ + 36;
    var $t = __stackBase__ + 40;
    var $1 = $op1 | 0;
    var $3 = HEAP32[$op1 + 4 >> 2];
    var $6 = ($3 | 0) > -1 ? $3 : -$3 | 0;
    var $7 = $op1 + 12 | 0;
    var $9 = HEAPU32[$op1 + 16 >> 2];
    var $10 = $op2 | 0;
    var $12 = HEAP32[$op2 + 4 >> 2];
    var $15 = ($12 | 0) > -1 ? $12 : -$12 | 0;
    var $16 = $op2 + 12 | 0;
    var $18 = HEAPU32[$op2 + 16 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $19 = $gcd | 0;
    var $21 = ($9 | 0) < ($18 | 0) ? $9 : $18;
    HEAP32[$gcd >> 2] = $21;
    var $23 = $21 << 2;
    if ($23 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $26 = STACKTOP;
    STACKTOP += $23;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $30 = $26;
    __label__ = 5;
    break;
   case 4:
    var $28 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $23);
    var $30 = $28;
    __label__ = 5;
    break;
   case 5:
    var $30;
    var $32 = $gcd + 8 | 0;
    HEAP32[$32 >> 2] = $30;
    var $33 = $tmp1 | 0;
    var $34 = $18 + $6 | 0;
    HEAP32[$tmp1 >> 2] = $34;
    var $36 = $34 << 2;
    if ($36 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $39 = STACKTOP;
    STACKTOP += $36;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $43 = $39;
    __label__ = 8;
    break;
   case 7:
    var $41 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $36);
    var $43 = $41;
    __label__ = 8;
    break;
   case 8:
    var $43;
    HEAP32[$tmp1 + 8 >> 2] = $43;
    var $46 = $tmp2 | 0;
    var $47 = $15 + $9 | 0;
    HEAP32[$tmp2 >> 2] = $47;
    var $49 = $47 << 2;
    if ($49 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $52 = STACKTOP;
    STACKTOP += $49;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $56 = $52;
    __label__ = 11;
    break;
   case 10:
    var $54 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $49);
    var $56 = $54;
    __label__ = 11;
    break;
   case 11:
    var $56;
    HEAP32[$tmp2 + 8 >> 2] = $56;
    ___gmpz_gcd($19, $7, $16);
    var $59 = $gcd + 4 | 0;
    if ((HEAP32[$59 >> 2] | 0) == 1) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    if ((HEAP32[HEAP32[$32 >> 2] >> 2] | 0) == 1) {
      __label__ = 20;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmpz_divexact_gcd($33, $16, $19);
    ___gmpz_mul($33, $1, $33);
    ___gmpz_divexact_gcd($46, $7, $19);
    ___gmpz_mul($46, $10, $46);
    var $67 = $t | 0;
    var $69 = HEAP32[$tmp1 + 4 >> 2];
    var $72 = ($69 | 0) > -1 ? $69 : -$69 | 0;
    var $74 = HEAP32[$tmp2 + 4 >> 2];
    var $77 = ($74 | 0) > -1 ? $74 : -$74 | 0;
    var $_ = ($72 | 0) > ($77 | 0) ? $72 : $77;
    var $79 = $_ + 1 | 0;
    HEAP32[$t >> 2] = $79;
    var $82 = ($_ << 2) + 4 | 0;
    if ($82 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $85 = STACKTOP;
    STACKTOP += $82;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $89 = $85;
    __label__ = 16;
    break;
   case 15:
    var $87 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $82);
    var $89 = $87;
    __label__ = 16;
    break;
   case 16:
    var $89;
    HEAP32[$t + 8 >> 2] = $89;
    FUNCTION_TABLE[$fun]($67, $33, $46);
    ___gmpz_divexact_gcd($46, $7, $19);
    ___gmpz_gcd($19, $67, $19);
    if ((HEAP32[$59 >> 2] | 0) == 1) {
      __label__ = 17;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 17:
    if ((HEAP32[HEAP32[$32 >> 2] >> 2] | 0) == 1) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $99 = $rop | 0;
    ___gmpz_set($99, $67);
    var $100 = $rop + 12 | 0;
    ___gmpz_mul($100, $16, $46);
    __label__ = 21;
    break;
   case 19:
    var $102 = $rop | 0;
    ___gmpz_divexact_gcd($102, $67, $19);
    ___gmpz_divexact_gcd($33, $16, $19);
    var $103 = $rop + 12 | 0;
    ___gmpz_mul($103, $33, $46);
    __label__ = 21;
    break;
   case 20:
    ___gmpz_mul($33, $1, $16);
    ___gmpz_mul($46, $10, $7);
    var $105 = $rop | 0;
    FUNCTION_TABLE[$fun]($105, $33, $46);
    var $106 = $rop + 12 | 0;
    ___gmpz_mul($106, $7, $16);
    __label__ = 21;
    break;
   case 21:
    var $108 = HEAP32[$__tmp_marker >> 2];
    if (($108 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    ___gmp_tmp_reentrant_free($108);
    __label__ = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_aors["X"] = 1;

function ___gmpq_sub($rop, $op1, $op2) {
  ___gmpq_aors($rop, $op1, $op2, 10);
  return;
}

function ___gmpq_get_den($den, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 16 >> 2];
    if ((HEAP32[$den >> 2] | 0) < ($2 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $7 = ___gmpz_realloc($den, $2);
    __label__ = 4;
    break;
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $11 = $2 - 1 | 0;
    var $13 = HEAP32[$den + 8 >> 2];
    var $15 = HEAP32[$src + 20 >> 2];
    var $16 = HEAP32[$15 >> 2];
    if (($11 | 0) == 0) {
      var $__x_1 = $16;
      var $__dst_1 = $13;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $16;
      var $_pn = $15;
      var $__dst_0 = $13;
      var $__n_0 = $11;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $19 = HEAP32[$__src_0 >> 2];
    var $20 = $__n_0 - 1 | 0;
    if (($20 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $19;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $20;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $19;
    var $__dst_1 = $13 + ($11 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    HEAP32[$den + 4 >> 2] = $2;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_get_num($num, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if ((HEAP32[$num >> 2] | 0) < ($5 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = ___gmpz_realloc($num, $5);
    __label__ = 4;
    break;
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $14 = $5 - 1 | 0;
    var $16 = HEAP32[$num + 8 >> 2];
    var $18 = HEAP32[$src + 8 >> 2];
    var $19 = HEAP32[$18 >> 2];
    if (($14 | 0) == 0) {
      var $__x_1 = $19;
      var $__dst_1 = $16;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $19;
      var $_pn = $18;
      var $__dst_0 = $16;
      var $__n_0 = $14;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $22 = HEAP32[$__src_0 >> 2];
    var $23 = $__n_0 - 1 | 0;
    if (($23 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $22;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $23;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $22;
    var $__dst_1 = $16 + ($14 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    HEAP32[$num + 4 >> 2] = $2;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_mul_2exp($dst, $src, $n) {
  var $1 = $dst | 0;
  var $2 = $dst + 12 | 0;
  var $3 = $src | 0;
  var $_idx_val = HEAP32[$src + 16 >> 2];
  var $_idx1_val = HEAP32[$src + 20 >> 2];
  _mord_2exp($1, $2, $3, $_idx_val, $_idx1_val, $n);
  return;
}

function _mord_2exp($ldst, $rdst, $lsrc, $rsrc_0_1_val, $rsrc_0_2_val, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = ($rsrc_0_1_val | 0) > -1;
    var $3 = $1 ? $rsrc_0_1_val : -$rsrc_0_1_val | 0;
    var $plow_06 = HEAPU32[$rsrc_0_2_val >> 2];
    var $5 = ($plow_06 | 0) == 0;
    if ($n >>> 0 > 31 & $5) {
      var $p_08 = $rsrc_0_2_val;
      var $_09 = $n;
      __label__ = 3;
      break;
    } else {
      var $p_0_lcssa = $rsrc_0_2_val;
      var $_0_lcssa = $n;
      var $plow_0_lcssa = $plow_06;
      var $_lcssa5 = $5;
      __label__ = 4;
      break;
    }
   case 3:
    var $_09;
    var $p_08;
    var $6 = $_09 - 32 | 0;
    var $7 = $p_08 + 4 | 0;
    var $plow_0 = HEAP32[$7 >> 2];
    var $9 = ($plow_0 | 0) == 0;
    if ($6 >>> 0 > 31 & $9) {
      var $p_08 = $7;
      var $_09 = $6;
      __label__ = 3;
      break;
    } else {
      var $p_0_lcssa = $7;
      var $_0_lcssa = $6;
      var $plow_0_lcssa = $plow_0;
      var $_lcssa5 = $9;
      __label__ = 4;
      break;
    }
   case 4:
    var $_lcssa5;
    var $plow_0_lcssa;
    var $_0_lcssa;
    var $p_0_lcssa;
    var $13 = $p_0_lcssa - $rsrc_0_2_val >> 2;
    var $14 = $3 - $13 | 0;
    if (($14 | 0) > (HEAP32[$rdst >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $19 = ___gmpz_realloc($rdst, $14);
    __label__ = 6;
    break;
   case 6:
    var $22 = HEAPU32[$rdst + 8 >> 2];
    if (($plow_0_lcssa & 1 | 0) != 0 | ($_0_lcssa | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 7:
    if (($p_0_lcssa | 0) == ($22 | 0) | ($3 | 0) == ($13 | 0)) {
      var $_1 = $_0_lcssa;
      var $len_0 = $14;
      __label__ = 18;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $30 = $14 - 1 | 0;
    var $31 = $22 + ($30 << 2) | 0;
    var $33 = HEAP32[$p_0_lcssa + ($30 << 2) >> 2];
    if (($30 | 0) == 0) {
      var $__x_1 = $33;
      var $__dst_1 = $31;
      __label__ = 11;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $__x_0 = $33;
    var $__src_0 = $p_0_lcssa + ($14 - 2 << 2) | 0;
    var $__dst_0 = $31;
    var $__n_0 = $30;
    __label__ = 10;
    break;
   case 10:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $39 = HEAP32[$__src_0 >> 2];
    var $40 = $__n_0 - 1 | 0;
    if (($40 | 0) == 0) {
      var $__x_1 = $39;
      var $__dst_1 = $22;
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $39;
      var $__src_0 = $__src_0 - 4 | 0;
      var $__dst_0 = $__dst_0 - 4 | 0;
      var $__n_0 = $40;
      __label__ = 10;
      break;
    }
   case 11:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_1 = $_0_lcssa;
    var $len_0 = $14;
    __label__ = 18;
    break;
   case 12:
    if ($_lcssa5) {
      var $shift_0 = $_0_lcssa;
      __label__ = 17;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $45 = $plow_0_lcssa & -$plow_0_lcssa;
    if ($45 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $49 = $45 >>> 0 < 256 ? 1 : 9;
    var $54 = $49;
    __label__ = 16;
    break;
   case 15:
    var $52 = $45 >>> 0 < 16777216 ? 17 : 25;
    var $54 = $52;
    __label__ = 16;
    break;
   case 16:
    var $54;
    var $56 = STRING_TABLE.___gmpn_clz_tab + ($45 >>> ($54 >>> 0)) | 0;
    var $60 = $54 - 2 + (HEAPU8[$56] & 255) | 0;
    var $62 = $60 >>> 0 < $_0_lcssa >>> 0 ? $60 : $_0_lcssa;
    var $shift_0 = $62;
    __label__ = 17;
    break;
   case 17:
    var $shift_0;
    var $64 = ___gmpn_rshift($22, $p_0_lcssa, $14, $shift_0);
    var $_1 = $_0_lcssa - $shift_0 | 0;
    var $len_0 = $14 - ((HEAP32[$22 + ($14 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 18;
    break;
   case 18:
    var $len_0;
    var $_1;
    var $74 = $1 ? $len_0 : -$len_0 | 0;
    HEAP32[$rdst + 4 >> 2] = $74;
    if (($_1 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    ___gmpz_mul_2exp($ldst, $lsrc, $_1);
    __label__ = 22;
    break;
   case 20:
    if (($ldst | 0) == ($lsrc | 0)) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    ___gmpz_set($ldst, $lsrc);
    __label__ = 22;
    break;
   case 22:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_mord_2exp["X"] = 1;

function ___gmpq_div_2exp($dst, $src, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$dst + 4 >> 2] = 0;
    HEAP32[$dst + 16 >> 2] = 1;
    var $8 = HEAP32[$dst + 20 >> 2];
    HEAP32[$8 >> 2] = 1;
    __label__ = 5;
    break;
   case 4:
    var $10 = $dst + 12 | 0;
    var $11 = $dst | 0;
    var $12 = $src + 12 | 0;
    var $_idx1_val = HEAP32[$src + 8 >> 2];
    _mord_2exp($10, $11, $12, $2, $_idx1_val, $n);
    __label__ = 5;
    break;
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_set_den($dest, $den) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$den + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $6 = $dest + 12 | 0;
    if ((HEAP32[$6 >> 2] | 0) < ($5 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $11 = ___gmpz_realloc($6, $5);
    __label__ = 4;
    break;
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $15 = $5 - 1 | 0;
    var $17 = HEAP32[$dest + 20 >> 2];
    var $19 = HEAP32[$den + 8 >> 2];
    var $20 = HEAP32[$19 >> 2];
    if (($15 | 0) == 0) {
      var $__x_1 = $20;
      var $__dst_1 = $17;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $20;
      var $_pn = $19;
      var $__dst_0 = $17;
      var $__n_0 = $15;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $23 = HEAP32[$__src_0 >> 2];
    var $24 = $__n_0 - 1 | 0;
    if (($24 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $23;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $24;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $23;
    var $__dst_1 = $17 + ($15 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    HEAP32[$dest + 16 >> 2] = $2;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_set_num($dest, $num) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$num + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if ((HEAP32[$dest >> 2] | 0) < ($5 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = $dest | 0;
    var $11 = ___gmpz_realloc($10, $5);
    __label__ = 4;
    break;
   case 4:
    if (($2 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $15 = $5 - 1 | 0;
    var $17 = HEAP32[$dest + 8 >> 2];
    var $19 = HEAP32[$num + 8 >> 2];
    var $20 = HEAP32[$19 >> 2];
    if (($15 | 0) == 0) {
      var $__x_1 = $20;
      var $__dst_1 = $17;
      __label__ = 8;
      break;
    } else {
      var $__x_0 = $20;
      var $_pn = $19;
      var $__dst_0 = $17;
      var $__n_0 = $15;
      __label__ = 6;
      break;
    }
   case 6:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $23 = HEAP32[$__src_0 >> 2];
    var $24 = $__n_0 - 1 | 0;
    if (($24 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $__x_0 = $23;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $24;
      __label__ = 6;
      break;
    }
   case 7:
    var $__x_1 = $23;
    var $__dst_1 = $17 + ($15 << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 9;
    break;
   case 9:
    HEAP32[$dest + 4 >> 2] = $2;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpq_canonicalize($op) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $gcd = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $1 = $op + 12 | 0;
    var $2 = $op + 16 | 0;
    var $3 = HEAP32[$2 >> 2];
    if (($3 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $7 = $gcd | 0;
    var $8 = $op | 0;
    var $9 = $op + 4 | 0;
    var $10 = HEAP32[$9 >> 2];
    var $13 = ($10 | 0) > -1 ? $10 : -$10 | 0;
    var $16 = ($3 | 0) > -1 ? $3 : -$3 | 0;
    var $_ = ($13 | 0) > ($16 | 0) ? $13 : $16;
    var $18 = $_ + 1 | 0;
    HEAP32[$gcd >> 2] = $18;
    var $21 = ($_ << 2) + 4 | 0;
    if ($21 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $24 = STACKTOP;
    STACKTOP += $21;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $28 = $24;
    __label__ = 7;
    break;
   case 6:
    var $26 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $21);
    var $28 = $26;
    __label__ = 7;
    break;
   case 7:
    var $28;
    var $30 = $gcd + 8 | 0;
    HEAP32[$30 >> 2] = $28;
    ___gmpz_gcd($7, $8, $1);
    if ((HEAP32[$gcd + 4 >> 2] | 0) == 1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    if ((HEAP32[HEAP32[$30 >> 2] >> 2] | 0) == 1) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmpz_divexact_gcd($8, $8, $7);
    ___gmpz_divexact_gcd($1, $1, $7);
    __label__ = 10;
    break;
   case 10:
    var $40 = HEAP32[$2 >> 2];
    if (($40 | 0) < 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $44 = -HEAP32[$9 >> 2] | 0;
    HEAP32[$9 >> 2] = $44;
    var $45 = -$40 | 0;
    HEAP32[$2 >> 2] = $45;
    __label__ = 12;
    break;
   case 12:
    var $46 = HEAP32[$__tmp_marker >> 2];
    if (($46 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmp_tmp_reentrant_free($46);
    __label__ = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_canonicalize["X"] = 1;

function ___gmpq_inv($dest, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    var $4 = HEAP32[$src + 16 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($2 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      var $num_size_0 = $2;
      var $den_size_0 = $4;
      __label__ = 6;
      break;
    }
   case 5:
    var $num_size_0 = -$2 | 0;
    var $den_size_0 = -$4 | 0;
    __label__ = 6;
    break;
   case 6:
    var $den_size_0;
    var $num_size_0;
    var $13 = $dest + 12 | 0;
    HEAP32[$dest + 16 >> 2] = $num_size_0;
    var $15 = $dest | 0;
    HEAP32[$dest + 4 >> 2] = $den_size_0;
    if (($dest | 0) == ($src | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $19 = $src | 0;
    var $20 = HEAP32[$19 >> 2];
    var $21 = $src + 8 | 0;
    var $22 = HEAP32[$21 >> 2];
    var $23 = $13 | 0;
    var $24 = HEAP32[$23 >> 2];
    HEAP32[$19 >> 2] = $24;
    var $25 = $src + 20 | 0;
    var $26 = HEAP32[$25 >> 2];
    HEAP32[$21 >> 2] = $26;
    HEAP32[$23 >> 2] = $20;
    HEAP32[$25 >> 2] = $22;
    __label__ = 22;
    break;
   case 8:
    var $30 = ($den_size_0 | 0) > -1 ? $den_size_0 : -$den_size_0 | 0;
    if ((HEAP32[$dest >> 2] | 0) < ($30 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $35 = ___gmpz_realloc($15, $30);
    __label__ = 10;
    break;
   case 10:
    if ((HEAP32[$13 >> 2] | 0) < ($num_size_0 | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $41 = ___gmpz_realloc($13, $num_size_0);
    __label__ = 12;
    break;
   case 12:
    if (($den_size_0 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $45 = $30 - 1 | 0;
    var $47 = HEAP32[$dest + 8 >> 2];
    var $49 = HEAP32[$src + 20 >> 2];
    var $50 = HEAP32[$49 >> 2];
    if (($45 | 0) == 0) {
      var $__dst_1 = $47;
      var $__x_1 = $50;
      __label__ = 16;
      break;
    } else {
      var $__n_0 = $45;
      var $__dst_0 = $47;
      var $_pn1 = $49;
      var $__x_0 = $50;
      __label__ = 14;
      break;
    }
   case 14:
    var $__x_0;
    var $_pn1;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $53 = HEAP32[$__src_0 >> 2];
    var $54 = $__n_0 - 1 | 0;
    if (($54 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $__n_0 = $54;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn1 = $__src_0;
      var $__x_0 = $53;
      __label__ = 14;
      break;
    }
   case 15:
    var $__dst_1 = $47 + ($45 << 2) | 0;
    var $__x_1 = $53;
    __label__ = 16;
    break;
   case 16:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 17;
    break;
   case 17:
    if (($num_size_0 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $60 = $num_size_0 - 1 | 0;
    var $62 = HEAP32[$dest + 20 >> 2];
    var $64 = HEAP32[$src + 8 >> 2];
    var $65 = HEAP32[$64 >> 2];
    if (($60 | 0) == 0) {
      var $__x4_1 = $65;
      var $__dst2_1 = $62;
      __label__ = 21;
      break;
    } else {
      var $__x4_0 = $65;
      var $_pn = $64;
      var $__dst2_0 = $62;
      var $__n1_0 = $60;
      __label__ = 19;
      break;
    }
   case 19:
    var $__n1_0;
    var $__dst2_0;
    var $_pn;
    var $__x4_0;
    var $__src3_0 = $_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $68 = HEAP32[$__src3_0 >> 2];
    var $69 = $__n1_0 - 1 | 0;
    if (($69 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $__x4_0 = $68;
      var $_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $69;
      __label__ = 19;
      break;
    }
   case 20:
    var $__x4_1 = $68;
    var $__dst2_1 = $62 + ($60 << 2) | 0;
    __label__ = 21;
    break;
   case 21:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 22;
    break;
   case 22:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpq_inv["X"] = 1;

function ___gmpz_and($res, $op1, $op2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $2 = HEAPU32[$op1 + 4 >> 2];
    var $4 = HEAPU32[$op2 + 4 >> 2];
    var $6 = HEAPU32[$op1 + 8 >> 2];
    var $8 = HEAPU32[$op2 + 8 >> 2];
    var $9 = $res + 8 | 0;
    var $10 = HEAPU32[$9 >> 2];
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 3:
    if (($4 | 0) > -1) {
      __label__ = 4;
      break;
    } else {
      var $op1_ptr_0 = $6;
      var $op2_ptr_0 = $8;
      var $op1_size_0 = $2;
      var $op2_size_0 = $4;
      __label__ = 43;
      break;
    }
   case 4:
    var $16 = ($2 | 0) < ($4 | 0) ? $2 : $4;
    var $i_0_in = $16;
    __label__ = 5;
    break;
   case 5:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    if ((HEAP32[$8 + ($i_0 << 2) >> 2] & HEAP32[$6 + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if ((HEAP32[$res >> 2] | 0) < ($i_0_in | 0)) {
      __label__ = 8;
      break;
    } else {
      var $res_ptr_0 = $10;
      __label__ = 9;
      break;
    }
   case 8:
    var $31 = ___gmpz_realloc($res, $i_0_in);
    var $res_ptr_0 = HEAP32[$9 >> 2];
    __label__ = 9;
    break;
   case 9:
    var $res_ptr_0;
    HEAP32[$res + 4 >> 2] = $i_0_in;
    if (($i_0_in | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $__n_0 = -$i_0_in | 0;
    __label__ = 11;
    break;
   case 11:
    var $__n_0;
    var $_sum3 = $__n_0 + $i_0_in | 0;
    var $43 = HEAP32[$8 + ($_sum3 << 2) >> 2] & HEAP32[$6 + ($_sum3 << 2) >> 2];
    HEAP32[$res_ptr_0 + ($_sum3 << 2) >> 2] = $43;
    var $45 = $__n_0 + 1 | 0;
    if (($45 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      var $__n_0 = $45;
      __label__ = 11;
      break;
    }
   case 12:
    if (($4 | 0) < 0) {
      __label__ = 13;
      break;
    } else {
      var $op1_ptr_0 = $8;
      var $op2_ptr_0 = $6;
      var $op1_size_0 = $4;
      var $op2_size_0 = $2;
      __label__ = 43;
      break;
    }
   case 13:
    var $50 = -$2 | 0;
    var $51 = -$4 | 0;
    var $53 = ($50 | 0) > ($51 | 0) ? $50 : $51;
    var $54 = $53 + 1 | 0;
    var $55 = $50 << 2;
    if ($55 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $58 = STACKTOP;
    STACKTOP += $55;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $62 = $58;
    __label__ = 16;
    break;
   case 15:
    var $60 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $55);
    var $62 = $60;
    __label__ = 16;
    break;
   case 16:
    var $62;
    var $63 = $62;
    var $64 = ___gmpn_sub_1($63, $6, $50, 1);
    var $65 = $51 << 2;
    if ($65 >>> 0 < 65536) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $68 = STACKTOP;
    STACKTOP += $65;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $72 = $68;
    __label__ = 19;
    break;
   case 18:
    var $70 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $65);
    var $72 = $70;
    __label__ = 19;
    break;
   case 19:
    var $72;
    var $73 = $72;
    var $74 = ___gmpn_sub_1($73, $8, $51, 1);
    if ((HEAP32[$res >> 2] | 0) < ($54 | 0)) {
      __label__ = 20;
      break;
    } else {
      var $res_ptr_1 = $10;
      __label__ = 21;
      break;
    }
   case 20:
    var $79 = ___gmpz_realloc($res, $54);
    var $res_ptr_1 = HEAP32[$9 >> 2];
    __label__ = 21;
    break;
   case 21:
    var $res_ptr_1;
    if (($50 | 0) < ($51 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    if (($4 | 0) == ($2 | 0)) {
      __label__ = 28;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $87 = $4 - $2 - 1 | 0;
    var $88 = $res_ptr_1 + ($51 << 2) | 0;
    var $90 = HEAP32[$63 + ($51 << 2) >> 2];
    if (($87 | 0) == 0) {
      var $__dst_1 = $88;
      var $__x_1 = $90;
      __label__ = 27;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $93 = $2 ^ -1;
    var $__n1_0 = $87;
    var $__dst_0 = $88;
    var $__src_0 = $63 + (1 - $4 << 2) | 0;
    var $__x_0 = $90;
    __label__ = 25;
    break;
   case 25:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n1_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $97 = HEAP32[$__src_0 >> 2];
    var $98 = $__n1_0 - 1 | 0;
    if (($98 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $__n1_0 = $98;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $97;
      __label__ = 25;
      break;
    }
   case 26:
    var $__dst_1 = $res_ptr_1 + ($93 << 2) | 0;
    var $__x_1 = $97;
    __label__ = 27;
    break;
   case 27:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 28;
    break;
   case 28:
    var $i_18 = $4 ^ -1;
    __label__ = 29;
    break;
   case 29:
    var $i_18;
    var $107 = HEAP32[$73 + ($i_18 << 2) >> 2] | HEAP32[$63 + ($i_18 << 2) >> 2];
    HEAP32[$res_ptr_1 + ($i_18 << 2) >> 2] = $107;
    if (($i_18 | 0) > 0) {
      var $i_18 = $i_18 - 1 | 0;
      __label__ = 29;
      break;
    } else {
      var $res_size_0 = $50;
      __label__ = 39;
      break;
    }
   case 30:
    if (($2 | 0) == ($4 | 0)) {
      __label__ = 36;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $115 = $2 - $4 - 1 | 0;
    var $116 = $res_ptr_1 + ($50 << 2) | 0;
    var $118 = HEAP32[$73 + ($50 << 2) >> 2];
    if (($115 | 0) == 0) {
      var $__x5_1 = $118;
      var $__dst3_1 = $116;
      __label__ = 35;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $121 = $4 ^ -1;
    var $__x5_0 = $118;
    var $__n2_0 = $115;
    var $__dst3_0 = $116;
    var $__src4_0 = $73 + (1 - $2 << 2) | 0;
    __label__ = 33;
    break;
   case 33:
    var $__src4_0;
    var $__dst3_0;
    var $__n2_0;
    var $__x5_0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $125 = HEAP32[$__src4_0 >> 2];
    var $126 = $__n2_0 - 1 | 0;
    if (($126 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      var $__x5_0 = $125;
      var $__n2_0 = $126;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__src4_0 = $__src4_0 + 4 | 0;
      __label__ = 33;
      break;
    }
   case 34:
    var $__x5_1 = $125;
    var $__dst3_1 = $res_ptr_1 + ($121 << 2) | 0;
    __label__ = 35;
    break;
   case 35:
    var $__dst3_1;
    var $__x5_1;
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    __label__ = 36;
    break;
   case 36:
    if (($2 | 0) < 0) {
      __label__ = 37;
      break;
    } else {
      var $res_size_0 = $51;
      __label__ = 39;
      break;
    }
   case 37:
    var $i_214 = $2 ^ -1;
    __label__ = 38;
    break;
   case 38:
    var $i_214;
    var $137 = HEAP32[$73 + ($i_214 << 2) >> 2] | HEAP32[$63 + ($i_214 << 2) >> 2];
    HEAP32[$res_ptr_1 + ($i_214 << 2) >> 2] = $137;
    if (($i_214 | 0) > 0) {
      var $i_214 = $i_214 - 1 | 0;
      __label__ = 38;
      break;
    } else {
      var $res_size_0 = $51;
      __label__ = 39;
      break;
    }
   case 39:
    var $res_size_0;
    var $141 = ___gmpn_add_1($res_ptr_1, $res_ptr_1, $res_size_0, 1);
    if (($141 | 0) == 0) {
      var $res_size_1 = $res_size_0;
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    HEAP32[$res_ptr_1 + ($res_size_0 << 2) >> 2] = $141;
    var $res_size_1 = $res_size_0 + 1 | 0;
    __label__ = 41;
    break;
   case 41:
    var $res_size_1;
    HEAP32[$res + 4 >> 2] = -$res_size_1 | 0;
    var $148 = HEAP32[$__tmp_marker >> 2];
    if (($148 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    ___gmp_tmp_reentrant_free($148);
    __label__ = 69;
    break;
   case 43:
    var $op2_size_0;
    var $op1_size_0;
    var $op2_ptr_0;
    var $op1_ptr_0;
    var $152 = -$op2_size_0 | 0;
    var $153 = $152 << 2;
    if ($153 >>> 0 < 65536) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    var $156 = STACKTOP;
    STACKTOP += $153;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $160 = $156;
    __label__ = 46;
    break;
   case 45:
    var $158 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $153);
    var $160 = $158;
    __label__ = 46;
    break;
   case 46:
    var $160;
    var $161 = $160;
    var $162 = ___gmpn_sub_1($161, $op2_ptr_0, $152, 1);
    if (($op1_size_0 | 0) > ($152 | 0)) {
      __label__ = 47;
      break;
    } else {
      var $i_4_in = $op1_size_0;
      __label__ = 59;
      break;
    }
   case 47:
    if ((HEAP32[$res >> 2] | 0) < ($op1_size_0 | 0)) {
      __label__ = 48;
      break;
    } else {
      var $res_ptr_2 = $10;
      __label__ = 49;
      break;
    }
   case 48:
    var $169 = ___gmpz_realloc($res, $op1_size_0);
    var $res_ptr_2 = HEAP32[$9 >> 2];
    __label__ = 49;
    break;
   case 49:
    var $res_ptr_2;
    var $172 = $op1_size_0 + $op2_size_0 | 0;
    if (($172 | 0) == 0) {
      __label__ = 55;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $175 = $172 - 1 | 0;
    var $176 = $res_ptr_2 + ($152 << 2) | 0;
    var $178 = HEAP32[$op1_ptr_0 + ($152 << 2) >> 2];
    if (($175 | 0) == 0) {
      var $__x10_1 = $178;
      var $__dst8_1 = $176;
      __label__ = 54;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    var $181 = $op1_size_0 - 1 | 0;
    var $__x10_0 = $178;
    var $__src9_0 = $op1_ptr_0 + (1 - $op2_size_0 << 2) | 0;
    var $__dst8_0 = $176;
    var $__n7_0 = $175;
    __label__ = 52;
    break;
   case 52:
    var $__n7_0;
    var $__dst8_0;
    var $__src9_0;
    var $__x10_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $185 = HEAP32[$__src9_0 >> 2];
    var $186 = $__n7_0 - 1 | 0;
    if (($186 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      var $__x10_0 = $185;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $186;
      __label__ = 52;
      break;
    }
   case 53:
    var $__x10_1 = $185;
    var $__dst8_1 = $res_ptr_2 + ($181 << 2) | 0;
    __label__ = 54;
    break;
   case 54:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    __label__ = 55;
    break;
   case 55:
    if (($op2_size_0 | 0) < 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 56:
    var $i_323 = $op2_size_0 ^ -1;
    __label__ = 57;
    break;
   case 57:
    var $i_323;
    var $198 = HEAP32[$op1_ptr_0 + ($i_323 << 2) >> 2] & (HEAP32[$161 + ($i_323 << 2) >> 2] ^ -1);
    HEAP32[$res_ptr_2 + ($i_323 << 2) >> 2] = $198;
    if (($i_323 | 0) > 0) {
      var $i_323 = $i_323 - 1 | 0;
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    HEAP32[$res + 4 >> 2] = $op1_size_0;
    __label__ = 67;
    break;
   case 59:
    var $i_4_in;
    var $i_4 = $i_4_in - 1 | 0;
    var $203 = ($i_4_in | 0) > 0;
    if ($203) {
      __label__ = 60;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 60:
    if ((HEAP32[$op1_ptr_0 + ($i_4 << 2) >> 2] & (HEAP32[$161 + ($i_4 << 2) >> 2] ^ -1) | 0) == 0) {
      var $i_4_in = $i_4;
      __label__ = 59;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 61:
    if ((HEAP32[$res >> 2] | 0) < ($i_4_in | 0)) {
      __label__ = 62;
      break;
    } else {
      var $res_ptr_3 = $10;
      __label__ = 63;
      break;
    }
   case 62:
    var $217 = ___gmpz_realloc($res, $i_4_in);
    var $res_ptr_3 = HEAP32[$9 >> 2];
    __label__ = 63;
    break;
   case 63:
    var $res_ptr_3;
    if ($203) {
      var $i_516 = $i_4;
      __label__ = 64;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 64:
    var $i_516;
    var $225 = HEAP32[$op1_ptr_0 + ($i_516 << 2) >> 2] & (HEAP32[$161 + ($i_516 << 2) >> 2] ^ -1);
    HEAP32[$res_ptr_3 + ($i_516 << 2) >> 2] = $225;
    if (($i_516 | 0) > 0) {
      __label__ = 65;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 65:
    var $i_516 = $i_516 - 1 | 0;
    __label__ = 64;
    break;
   case 66:
    HEAP32[$res + 4 >> 2] = $i_4_in;
    __label__ = 67;
    break;
   case 67:
    var $231 = HEAP32[$__tmp_marker >> 2];
    if (($231 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    ___gmp_tmp_reentrant_free($231);
    __label__ = 69;
    break;
   case 69:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_and["X"] = 1;

function ___gmpz_addmul($w, $u, $v) {
  ___gmpz_aorsmul($w, $u, $v, 0);
  return;
}

function ___gmpz_aorsmul($w, $x, $y, $sub) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$x + 4 >> 2];
    var $4 = HEAP32[$y + 4 >> 2];
    if (($2 | 0) == 0 | ($4 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $10 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $13 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $14 = ($10 | 0) > ($13 | 0);
    var $_ = $14 ? $2 : $4;
    var $_2 = $14 ? $4 : $2;
    var $x_y = $14 ? $x : $y;
    var $y_x = $14 ? $y : $x;
    var $15 = $_ ^ $sub;
    var $18 = ($_ | 0) > -1 ? $_ : -$_ | 0;
    if (($18 | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $23 = HEAP32[HEAP32[$x_y + 8 >> 2] >> 2];
    ___gmpz_aorsmul_1($w, $y_x, $23, $15);
    __label__ = 23;
    break;
   case 5:
    var $27 = ($_2 | 0) > -1 ? $_2 : -$_2 | 0;
    var $28 = $w + 4 | 0;
    var $29 = HEAPU32[$28 >> 2];
    var $31 = $15 ^ $_2 ^ $29;
    var $33 = -$29 | 0;
    var $34 = ($29 | 0) > -1 ? $29 : $33;
    var $35 = $27 + $18 | 0;
    var $37 = ($34 | 0) > ($35 | 0) ? $34 : $35;
    var $38 = $37 + 1 | 0;
    if (($38 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $43 = ___gmpz_realloc($w, $38);
    __label__ = 7;
    break;
   case 7:
    var $46 = HEAPU32[$w + 8 >> 2];
    if (($29 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $50 = HEAP32[$y_x + 8 >> 2];
    var $52 = HEAP32[$x_y + 8 >> 2];
    var $53 = ___gmpn_mul($46, $50, $27, $52, $18);
    var $56 = $35 - (($53 | 0) == 0 & 1) | 0;
    var $59 = ($31 | 0) > -1 ? $56 : -$56 | 0;
    HEAP32[$28 >> 2] = $59;
    __label__ = 23;
    break;
   case 9:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $61 = $35 << 2;
    if ($61 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $64 = STACKTOP;
    STACKTOP += $61;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $68 = $64;
    __label__ = 12;
    break;
   case 11:
    var $66 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $61);
    var $68 = $66;
    __label__ = 12;
    break;
   case 12:
    var $68;
    var $69 = $68;
    var $71 = HEAP32[$y_x + 8 >> 2];
    var $73 = HEAP32[$x_y + 8 >> 2];
    var $74 = ___gmpn_mul($69, $71, $27, $73, $18);
    var $77 = $35 - (($74 | 0) == 0 & 1) | 0;
    var $79 = ($34 | 0) < ($77 | 0);
    if (($31 | 0) > -1) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $_3 = $79 ? $69 : $46;
    var $_4 = $79 ? $77 : $34;
    var $_5 = $79 ? $46 : $69;
    var $_6 = $79 ? $34 : $77;
    var $81 = ___gmpn_add($46, $_3, $_4, $_5, $_6);
    var $82 = $46 + ($_4 << 2) | 0;
    HEAP32[$82 >> 2] = $81;
    var $wsize_2 = (($81 | 0) != 0 & 1) + $_4 | 0;
    var $wsize_signed_1 = $29;
    __label__ = 21;
    break;
   case 14:
    if ($79) {
      __label__ = 17;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if (($34 | 0) == ($77 | 0)) {
      __label__ = 16;
      break;
    } else {
      var $usize2_0 = $34;
      var $tsize_1 = $77;
      var $wsize_signed_0 = $29;
      var $up1_0 = $46;
      var $tp_1 = $69;
      __label__ = 18;
      break;
    }
   case 16:
    var $90 = ___gmpn_cmp($46, $69, $34);
    if (($90 | 0) < 0) {
      __label__ = 17;
      break;
    } else {
      var $usize2_0 = $34;
      var $tsize_1 = $34;
      var $wsize_signed_0 = $29;
      var $up1_0 = $46;
      var $tp_1 = $69;
      __label__ = 18;
      break;
    }
   case 17:
    var $usize2_0 = $77;
    var $tsize_1 = $34;
    var $wsize_signed_0 = $33;
    var $up1_0 = $69;
    var $tp_1 = $46;
    __label__ = 18;
    break;
   case 18:
    var $tp_1;
    var $up1_0;
    var $wsize_signed_0;
    var $tsize_1;
    var $usize2_0;
    var $94 = ___gmpn_sub($46, $up1_0, $usize2_0, $tp_1, $tsize_1);
    var $wsize_1 = $usize2_0;
    __label__ = 19;
    break;
   case 19:
    var $wsize_1;
    if (($wsize_1 | 0) > 0) {
      __label__ = 20;
      break;
    } else {
      var $wsize_2 = $wsize_1;
      var $wsize_signed_1 = $wsize_signed_0;
      __label__ = 21;
      break;
    }
   case 20:
    var $98 = $wsize_1 - 1 | 0;
    if ((HEAP32[$46 + ($98 << 2) >> 2] | 0) == 0) {
      var $wsize_1 = $98;
      __label__ = 19;
      break;
    } else {
      var $wsize_2 = $wsize_1;
      var $wsize_signed_1 = $wsize_signed_0;
      __label__ = 21;
      break;
    }
   case 21:
    var $wsize_signed_1;
    var $wsize_2;
    var $104 = ($wsize_signed_1 | 0) > -1 ? $wsize_2 : -$wsize_2 | 0;
    HEAP32[$28 >> 2] = $104;
    var $105 = HEAP32[$__tmp_marker >> 2];
    if (($105 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    ___gmp_tmp_reentrant_free($105);
    __label__ = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_aorsmul["X"] = 1;

function ___gmpz_submul($w, $u, $v) {
  ___gmpz_aorsmul($w, $u, $v, -1);
  return;
}

function ___gmpz_aorsmul_1($w, $x, $y, $sub) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$x + 4 >> 2];
    if (($2 | 0) == 0 | ($y | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $6 = $2 ^ $sub;
    var $9 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $10 = $w + 4 | 0;
    var $11 = HEAPU32[$10 >> 2];
    if (($11 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 4:
    var $14 = $9 + 1 | 0;
    if (($14 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $19 = ___gmpz_realloc($w, $14);
    __label__ = 6;
    break;
   case 6:
    var $22 = HEAP32[$w + 8 >> 2];
    var $24 = HEAP32[$x + 8 >> 2];
    var $25 = ___gmpn_mul_1($22, $24, $9, $y);
    var $26 = $22 + ($9 << 2) | 0;
    HEAP32[$26 >> 2] = $25;
    var $29 = (($25 | 0) != 0 & 1) + $9 | 0;
    var $32 = ($6 | 0) > -1 ? $29 : -$29 | 0;
    HEAP32[$10 >> 2] = $32;
    __label__ = 30;
    break;
   case 7:
    var $34 = $11 ^ $6;
    var $36 = -$11 | 0;
    var $37 = ($11 | 0) > -1 ? $11 : $36;
    var $39 = ($37 | 0) > ($9 | 0) ? $37 : $9;
    var $40 = $39 + 1 | 0;
    if (($40 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $45 = ___gmpz_realloc($w, $40);
    __label__ = 9;
    break;
   case 9:
    var $48 = HEAPU32[$w + 8 >> 2];
    var $50 = HEAPU32[$x + 8 >> 2];
    var $51 = ($37 | 0) < ($9 | 0);
    var $52 = $51 ? $37 : $9;
    if (($34 | 0) > -1) {
      __label__ = 10;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 10:
    var $55 = ___gmpn_addmul_1($48, $50, $52, $y);
    var $56 = $48 + ($52 << 2) | 0;
    var $57 = $50 + ($52 << 2) | 0;
    var $58 = $9 - $37 | 0;
    if (($9 | 0) == ($37 | 0)) {
      var $dsize_1 = $58;
      var $cy_0 = $55;
      __label__ = 15;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (($58 | 0) > 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $63 = ___gmpn_mul_1($56, $57, $58, $y);
    var $dsize_0 = $58;
    var $cy2_0 = $63;
    __label__ = 14;
    break;
   case 13:
    var $dsize_0 = -$58 | 0;
    var $cy2_0 = 0;
    __label__ = 14;
    break;
   case 14:
    var $cy2_0;
    var $dsize_0;
    var $67 = ___gmpn_add_1($56, $56, $dsize_0, $55);
    var $dsize_1 = $dsize_0;
    var $cy_0 = $67 + $cy2_0 | 0;
    __label__ = 15;
    break;
   case 15:
    var $cy_0;
    var $dsize_1;
    var $70 = $48 + ($dsize_1 + $52 << 2) | 0;
    HEAP32[$70 >> 2] = $cy_0;
    var $wsize_signed_1 = $11;
    var $new_wsize_1 = (($cy_0 | 0) != 0 & 1) + $39 | 0;
    __label__ = 29;
    break;
   case 16:
    var $75 = ___gmpn_submul_1($48, $50, $52, $y);
    if ($51) {
      var $__n4_0 = $37;
      var $__d2_0 = $48;
      __label__ = 23;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if (($37 | 0) == ($9 | 0)) {
      var $cy_1 = $75;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $79 = $48 + ($9 << 2) | 0;
    var $80 = $37 - $9 | 0;
    var $81 = ___gmpn_sub_1($79, $79, $80, $75);
    var $cy_1 = $81;
    __label__ = 19;
    break;
   case 19:
    var $cy_1;
    if (($cy_1 | 0) == 0) {
      var $wsize_signed_0_ph = $11;
      var $new_wsize_0_ph = $39;
      __label__ = 26;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $86 = $48 + ($39 << 2) | 0;
    HEAP32[$86 >> 2] = $cy_1 - 1 | 0;
    var $__s_0 = $48;
    var $__n_0 = $39;
    __label__ = 21;
    break;
   case 21:
    var $__n_0;
    var $__s_0;
    var $90 = HEAP32[$__s_0 >> 2] ^ -1;
    HEAP32[$__s_0 >> 2] = $90;
    var $91 = $__n_0 - 1 | 0;
    if (($91 | 0) == 0) {
      var $__p_0 = $48;
      __label__ = 22;
      break;
    } else {
      var $__s_0 = $__s_0 + 4 | 0;
      var $__n_0 = $91;
      __label__ = 21;
      break;
    }
   case 22:
    var $__p_0;
    var $95 = HEAP32[$__p_0 >> 2] + 1 | 0;
    HEAP32[$__p_0 >> 2] = $95;
    if (($95 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 22;
      break;
    } else {
      var $wsize_signed_0_ph = $36;
      var $new_wsize_0_ph = $40;
      __label__ = 26;
      break;
    }
   case 23:
    var $__d2_0;
    var $__n4_0;
    var $99 = HEAP32[$__d2_0 >> 2] ^ -1;
    HEAP32[$__d2_0 >> 2] = $99;
    var $100 = $__n4_0 - 1 | 0;
    if (($100 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $__n4_0 = $100;
      var $__d2_0 = $__d2_0 + 4 | 0;
      __label__ = 23;
      break;
    }
   case 24:
    var $103 = ___gmpn_add_1($48, $48, $37, 1);
    var $104 = $103 + $75 | 0;
    var $105 = ($104 | 0) == 0;
    var $108 = $104 - 1 + ($105 & 1) | 0;
    var $109 = $48 + ($37 << 2) | 0;
    var $110 = $50 + ($37 << 2) | 0;
    var $111 = $9 - $37 | 0;
    var $112 = ___gmpn_mul_1($109, $110, $111, $y);
    var $113 = ___gmpn_add_1($109, $109, $111, $108);
    var $114 = $113 + $112 | 0;
    var $115 = $48 + ($39 << 2) | 0;
    HEAP32[$115 >> 2] = $114;
    var $118 = (($114 | 0) != 0 & 1) + $39 | 0;
    if ($105) {
      var $__p6_0 = $109;
      __label__ = 25;
      break;
    } else {
      var $wsize_signed_0_ph = $36;
      var $new_wsize_0_ph = $118;
      __label__ = 26;
      break;
    }
   case 25:
    var $__p6_0;
    var $120 = HEAP32[$__p6_0 >> 2];
    var $121 = $120 - 1 | 0;
    HEAP32[$__p6_0 >> 2] = $121;
    if (($120 | 0) == 0) {
      var $__p6_0 = $__p6_0 + 4 | 0;
      __label__ = 25;
      break;
    } else {
      var $wsize_signed_0_ph = $36;
      var $new_wsize_0_ph = $118;
      __label__ = 26;
      break;
    }
   case 26:
    var $new_wsize_0_ph;
    var $wsize_signed_0_ph;
    var $new_wsize_0 = $new_wsize_0_ph;
    __label__ = 27;
    break;
   case 27:
    var $new_wsize_0;
    if (($new_wsize_0 | 0) > 0) {
      __label__ = 28;
      break;
    } else {
      var $wsize_signed_1 = $wsize_signed_0_ph;
      var $new_wsize_1 = $new_wsize_0;
      __label__ = 29;
      break;
    }
   case 28:
    var $126 = $new_wsize_0 - 1 | 0;
    if ((HEAP32[$48 + ($126 << 2) >> 2] | 0) == 0) {
      var $new_wsize_0 = $126;
      __label__ = 27;
      break;
    } else {
      var $wsize_signed_1 = $wsize_signed_0_ph;
      var $new_wsize_1 = $new_wsize_0;
      __label__ = 29;
      break;
    }
   case 29:
    var $new_wsize_1;
    var $wsize_signed_1;
    var $132 = ($wsize_signed_1 | 0) > -1 ? $new_wsize_1 : -$new_wsize_1 | 0;
    HEAP32[$10 >> 2] = $132;
    __label__ = 30;
    break;
   case 30:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_aorsmul_1["X"] = 1;

function ___gmpz_addmul_ui($w, $x, $y) {
  ___gmpz_aorsmul_1($w, $x, $y, 0);
  return;
}

function ___gmpz_submul_ui($w, $x, $y) {
  ___gmpz_aorsmul_1($w, $x, $y, -1);
  return;
}

function ___gmpz_array_init($arr, $arr_size, $nbits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = ($nbits + 31 | 0) / 32 & -1;
    var $3 = HEAP32[___gmp_allocate_func >> 2];
    var $4 = $arr_size << 2;
    var $5 = (i64Math.multiply($4, 0, $2, 0), i64Math.result[0]);
    var $6 = FUNCTION_TABLE[$3]($5);
    var $7 = $6;
    if (($arr_size | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $9 = $2 + 1 | 0;
    var $i_01 = 0;
    __label__ = 4;
    break;
   case 4:
    var $i_01;
    HEAP32[$arr + $i_01 * 12 >> 2] = $9;
    HEAP32[$arr + $i_01 * 12 + 4 >> 2] = 0;
    var $13 = (i64Math.multiply($i_01, 0, $2, 0), i64Math.result[0]);
    var $14 = $7 + ($13 << 2) | 0;
    HEAP32[$arr + $i_01 * 12 + 8 >> 2] = $14;
    var $16 = $i_01 + 1 | 0;
    if (($16 | 0) == ($arr_size | 0)) {
      __label__ = 5;
      break;
    } else {
      var $i_01 = $16;
      __label__ = 4;
      break;
    }
   case 5:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_bin_ui($r, $n, $k) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ni = __stackBase__;
    var $nacc = __stackBase__ + 12;
    if ((HEAP32[$n + 4 >> 2] | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = $ni | 0;
    ___gmpz_init($5);
    ___gmpz_neg($5, $n);
    ___gmpz_sub_ui($5, $5, 1);
    var $negate_0 = $k & 1;
    __label__ = 7;
    break;
   case 4:
    var $8 = ___gmpz_cmp_ui($n, $k);
    if (($8 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    ___gmpz_set_ui($r, 0);
    __label__ = 15;
    break;
   case 6:
    var $12 = $ni | 0;
    ___gmpz_init($12);
    ___gmpz_sub_ui($12, $n, $k);
    var $negate_0 = 0;
    __label__ = 7;
    break;
   case 7:
    var $negate_0;
    ___gmpz_set_ui($r, 1);
    var $14 = $ni | 0;
    var $15 = ___gmpz_cmp_ui($14, $k);
    if (($15 | 0) < 0) {
      __label__ = 8;
      break;
    } else {
      var $_0 = $k;
      __label__ = 9;
      break;
    }
   case 8:
    var $18 = ___gmpz_get_ui($14);
    ___gmpz_set_ui($14, $k);
    var $_0 = $18;
    __label__ = 9;
    break;
   case 9:
    var $_0;
    var $20 = $nacc | 0;
    ___gmpz_init_set_ui($20, 1);
    var $_pre = $r + 8 | 0;
    var $_pre1 = $r + 4 | 0;
    if (($_0 | 0) == 0) {
      var $kacc_0_lcssa = 1;
      var $_pre_phi = $_pre;
      var $_pre_phi2 = $_pre1;
      __label__ = 14;
      break;
    } else {
      var $kacc_01 = 1;
      var $i_02 = 1;
      __label__ = 10;
      break;
    }
   case 10:
    var $i_02;
    var $kacc_01;
    ___gmpz_add_ui($14, $14, 1);
    ___gmpz_mul($20, $20, $14);
    var $22 = $kacc_01 & 65535;
    var $23 = $kacc_01 >>> 16;
    var $24 = $i_02 & 65535;
    var $25 = $i_02 >>> 16;
    var $26 = (i64Math.multiply($24, 0, $22, 0), i64Math.result[0]);
    var $27 = (i64Math.multiply($25, 0, $22, 0), i64Math.result[0]);
    var $28 = (i64Math.multiply($24, 0, $23, 0), i64Math.result[0]);
    var $29 = (i64Math.multiply($25, 0, $23, 0), i64Math.result[0]);
    var $31 = ($26 >>> 16) + $27 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($31, $28);
    var $32 = $uadd.f0;
    var $33 = $uadd.f1;
    var $__x3_0 = $33 ? $29 + 65536 | 0 : $29;
    if (($__x3_0 | 0) == (-($32 >>> 16) | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmpz_mul($r, $r, $20);
    ___gmpz_set_ui($20, 1);
    var $39 = HEAP32[$_pre >> 2];
    var $40 = HEAP32[$_pre1 >> 2];
    ___gmpn_divexact_1($39, $39, $40, $kacc_01);
    var $41 = HEAPU32[$_pre1 >> 2];
    var $48 = $41 - ((HEAP32[HEAP32[$_pre >> 2] + ($41 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    HEAP32[$_pre1 >> 2] = $48;
    var $kacc_1 = $i_02;
    __label__ = 13;
    break;
   case 12:
    var $kacc_1 = $32 << 16 | $26 & 65535;
    __label__ = 13;
    break;
   case 13:
    var $kacc_1;
    var $54 = $i_02 + 1 | 0;
    if ($54 >>> 0 > $_0 >>> 0) {
      var $kacc_0_lcssa = $kacc_1;
      var $_pre_phi = $_pre;
      var $_pre_phi2 = $_pre1;
      __label__ = 14;
      break;
    } else {
      var $kacc_01 = $kacc_1;
      var $i_02 = $54;
      __label__ = 10;
      break;
    }
   case 14:
    var $_pre_phi2;
    var $_pre_phi;
    var $kacc_0_lcssa;
    ___gmpz_mul($r, $r, $20);
    var $56 = HEAP32[$_pre_phi >> 2];
    var $57 = HEAP32[$_pre_phi2 >> 2];
    ___gmpn_divexact_1($56, $56, $57, $kacc_0_lcssa);
    var $58 = HEAPU32[$_pre_phi2 >> 2];
    var $68 = ($58 - ((HEAP32[HEAP32[$_pre_phi >> 2] + ($58 - 1 << 2) >> 2] | 0) == 0 & 1) ^ -$negate_0) + $negate_0 | 0;
    HEAP32[$_pre_phi2 >> 2] = $68;
    ___gmpz_clear($20);
    ___gmpz_clear($14);
    __label__ = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_bin_ui["X"] = 1;

function ___gmpz_bin_uiui($r, $n, $k) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($n >>> 0 < $k >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    __label__ = 16;
    break;
   case 4:
    var $5 = $r + 8 | 0;
    var $6 = HEAPU32[$5 >> 2];
    var $7 = $n - $k | 0;
    var $k_ = $7 >>> 0 > $k >>> 0 ? $k : $7;
    if (($k_ | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$r + 4 >> 2] = 1;
    HEAP32[$6 >> 2] = 1;
    __label__ = 16;
    break;
   case 6:
    var $14 = $n - $k_ + 1 | 0;
    HEAP32[$6 >> 2] = $14;
    var $15 = $r | 0;
    var $16 = HEAPU32[$15 >> 2];
    if ($k_ >>> 0 < 2) {
      var $rp_0_lcssa = $6;
      var $ralloc_0_lcssa = $16;
      var $rsize_0_lcssa = 1;
      var $kacc_0_lcssa = 1;
      var $nacc_0_lcssa = 1;
      __label__ = 13;
      break;
    } else {
      var $rp_01 = $6;
      var $ralloc_02 = $16;
      var $rsize_03 = 1;
      var $kacc_04 = 1;
      var $nacc_05 = 1;
      var $j_06 = $14;
      var $i_07 = 2;
      __label__ = 7;
      break;
    }
   case 7:
    var $i_07;
    var $j_06;
    var $nacc_05;
    var $kacc_04;
    var $rsize_03;
    var $ralloc_02;
    var $rp_01;
    var $20 = ($nacc_05 | $kacc_04) & 1 ^ 1;
    var $21 = $nacc_05 >>> ($20 >>> 0);
    var $22 = $kacc_04 >>> ($20 >>> 0);
    var $23 = $j_06 + 1 | 0;
    var $24 = $21 & 65535;
    var $25 = $21 >>> 16;
    var $26 = $23 & 65535;
    var $27 = $23 >>> 16;
    var $28 = (i64Math.multiply($24, 0, $26, 0), i64Math.result[0]);
    var $29 = (i64Math.multiply($24, 0, $27, 0), i64Math.result[0]);
    var $30 = (i64Math.multiply($25, 0, $26, 0), i64Math.result[0]);
    var $31 = (i64Math.multiply($25, 0, $27, 0), i64Math.result[0]);
    var $33 = ($28 >>> 16) + $29 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($33, $30);
    var $34 = $uadd.f0;
    var $35 = $uadd.f1;
    var $__x3_0 = $35 ? $31 + 65536 | 0 : $31;
    if (($__x3_0 | 0) == (-($34 >>> 16) | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $43 = $34 << 16 | $28 & 65535;
    var $44 = (i64Math.multiply($22, 0, $i_07, 0), i64Math.result[0]);
    var $nacc_1 = $43;
    var $kacc_1 = $44;
    var $rsize_1 = $rsize_03;
    var $ralloc_2 = $ralloc_02;
    var $rp_2 = $rp_01;
    __label__ = 12;
    break;
   case 9:
    if (($rsize_03 | 0) == ($ralloc_02 | 0)) {
      __label__ = 10;
      break;
    } else {
      var $ralloc_1 = $ralloc_02;
      var $rp_1 = $rp_01;
      __label__ = 11;
      break;
    }
   case 10:
    var $48 = $rsize_03 + 32 | 0;
    var $49 = HEAP32[___gmp_reallocate_func >> 2];
    var $53 = FUNCTION_TABLE[$49]($rp_01, $rsize_03 << 2, $48 << 2);
    var $ralloc_1 = $48;
    var $rp_1 = $53;
    __label__ = 11;
    break;
   case 11:
    var $rp_1;
    var $ralloc_1;
    var $56 = ___gmpn_mul_1($rp_1, $rp_1, $rsize_03, $21);
    var $57 = $rp_1 + ($rsize_03 << 2) | 0;
    HEAP32[$57 >> 2] = $56;
    ___gmpn_divexact_1($rp_1, $rp_1, $rsize_03 + 1 | 0, $22);
    var $nacc_1 = $23;
    var $kacc_1 = $i_07;
    var $rsize_1 = ((HEAP32[$57 >> 2] | 0) != 0 & 1) + $rsize_03 | 0;
    var $ralloc_2 = $ralloc_1;
    var $rp_2 = $rp_1;
    __label__ = 12;
    break;
   case 12:
    var $rp_2;
    var $ralloc_2;
    var $rsize_1;
    var $kacc_1;
    var $nacc_1;
    var $64 = $i_07 + 1 | 0;
    if ($64 >>> 0 > $k_ >>> 0) {
      var $rp_0_lcssa = $rp_2;
      var $ralloc_0_lcssa = $ralloc_2;
      var $rsize_0_lcssa = $rsize_1;
      var $kacc_0_lcssa = $kacc_1;
      var $nacc_0_lcssa = $nacc_1;
      __label__ = 13;
      break;
    } else {
      var $rp_01 = $rp_2;
      var $ralloc_02 = $ralloc_2;
      var $rsize_03 = $rsize_1;
      var $kacc_04 = $kacc_1;
      var $nacc_05 = $nacc_1;
      var $j_06 = $23;
      var $i_07 = $64;
      __label__ = 7;
      break;
    }
   case 13:
    var $nacc_0_lcssa;
    var $kacc_0_lcssa;
    var $rsize_0_lcssa;
    var $ralloc_0_lcssa;
    var $rp_0_lcssa;
    var $67 = $rsize_0_lcssa + 1 | 0;
    if (($rsize_0_lcssa | 0) == ($ralloc_0_lcssa | 0)) {
      __label__ = 14;
      break;
    } else {
      var $ralloc_3 = $ralloc_0_lcssa;
      var $rp_3 = $rp_0_lcssa;
      __label__ = 15;
      break;
    }
   case 14:
    var $69 = HEAP32[___gmp_reallocate_func >> 2];
    var $73 = FUNCTION_TABLE[$69]($rp_0_lcssa, $rsize_0_lcssa << 2, $67 << 2);
    var $ralloc_3 = $67;
    var $rp_3 = $73;
    __label__ = 15;
    break;
   case 15:
    var $rp_3;
    var $ralloc_3;
    var $75 = ___gmpn_mul_1($rp_3, $rp_3, $rsize_0_lcssa, $nacc_0_lcssa);
    var $76 = $rp_3 + ($rsize_0_lcssa << 2) | 0;
    HEAP32[$76 >> 2] = $75;
    ___gmpn_divexact_1($rp_3, $rp_3, $67, $kacc_0_lcssa);
    var $80 = ((HEAP32[$76 >> 2] | 0) != 0 & 1) + $rsize_0_lcssa | 0;
    HEAP32[$15 >> 2] = $ralloc_3;
    HEAP32[$r + 4 >> 2] = $80;
    HEAP32[$5 >> 2] = $rp_3;
    __label__ = 16;
    break;
   case 16:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_bin_uiui["X"] = 1;

function ___gmpz_cdiv_q($quot, $dividend, $divisor) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $rem = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $2 = HEAP32[$dividend + 4 >> 2];
    var $4 = HEAPU32[$divisor + 4 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $5 = $rem | 0;
    var $8 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    HEAP32[$rem >> 2] = $8;
    var $10 = $8 << 2;
    if ($10 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $13 = STACKTOP;
    STACKTOP += $10;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $17 = $13;
    __label__ = 5;
    break;
   case 4:
    var $15 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $10);
    var $17 = $15;
    __label__ = 5;
    break;
   case 5:
    var $17;
    HEAP32[$rem + 8 >> 2] = $17;
    ___gmpz_tdiv_qr($quot, $5, $dividend, $divisor);
    if (($4 ^ $2 | 0) > -1) {
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    ___gmpz_add_ui($quot, $quot, 1);
    __label__ = 8;
    break;
   case 8:
    var $27 = HEAP32[$__tmp_marker >> 2];
    if (($27 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmp_tmp_reentrant_free($27);
    __label__ = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cdiv_qr($quot, $rem, $dividend, $divisor) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $temp_divisor = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $2 = HEAPU32[$divisor + 4 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($quot | 0) == ($divisor | 0) | ($rem | 0) == ($divisor | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $divisor;
      __label__ = 7;
      break;
    }
   case 3:
    var $6 = $temp_divisor | 0;
    var $9 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    HEAP32[$temp_divisor >> 2] = $9;
    var $11 = $9 << 2;
    if ($11 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $14 = STACKTOP;
    STACKTOP += $11;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $18 = $14;
    __label__ = 6;
    break;
   case 5:
    var $16 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $11);
    var $18 = $16;
    __label__ = 6;
    break;
   case 6:
    var $18;
    HEAP32[$temp_divisor + 8 >> 2] = $18;
    ___gmpz_set($6, $divisor);
    var $_0 = $6;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    var $24 = HEAP32[$dividend + 4 >> 2] ^ $2;
    ___gmpz_tdiv_qr($quot, $rem, $dividend, $_0);
    if (($24 | 0) > -1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmpz_add_ui($quot, $quot, 1);
    ___gmpz_sub($rem, $rem, $_0);
    __label__ = 10;
    break;
   case 10:
    var $31 = HEAP32[$__tmp_marker >> 2];
    if (($31 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($31);
    __label__ = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cdiv_r($rem, $dividend, $divisor) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $temp_divisor = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $2 = HEAPU32[$divisor + 4 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($rem | 0) == ($divisor | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $divisor;
      __label__ = 7;
      break;
    }
   case 3:
    var $5 = $temp_divisor | 0;
    var $8 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    HEAP32[$temp_divisor >> 2] = $8;
    var $10 = $8 << 2;
    if ($10 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $13 = STACKTOP;
    STACKTOP += $10;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $17 = $13;
    __label__ = 6;
    break;
   case 5:
    var $15 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $10);
    var $17 = $15;
    __label__ = 6;
    break;
   case 6:
    var $17;
    HEAP32[$temp_divisor + 8 >> 2] = $17;
    ___gmpz_set($5, $divisor);
    var $_0 = $5;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    ___gmpz_tdiv_r($rem, $dividend, $_0);
    if ((HEAP32[$dividend + 4 >> 2] ^ $2 | 0) > -1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmpz_sub($rem, $rem, $_0);
    __label__ = 10;
    break;
   case 10:
    var $30 = HEAP32[$__tmp_marker >> 2];
    if (($30 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($30);
    __label__ = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cdiv_q_2exp($w, $u, $cnt) {
  ___gmpz_cfdiv_q_2exp($w, $u, $cnt, 1);
  return;
}

function ___gmpz_cfdiv_q_2exp($w, $u, $cnt, $dir) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$u + 4 >> 2];
    var $3 = ($2 | 0) > -1;
    var $5 = $3 ? $2 : -$2 | 0;
    var $6 = $cnt >>> 5;
    var $7 = $5 - $6 | 0;
    if (($7 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $11 = HEAP32[$w + 8 >> 2];
    HEAP32[$11 >> 2] = 1;
    if (($2 | 0) == 0) {
      var $17 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $_ = ($2 ^ $dir | 0) < 0 ? 0 : $dir;
    var $17 = $_;
    __label__ = 5;
    break;
   case 5:
    var $17;
    HEAP32[$w + 4 >> 2] = $17;
    __label__ = 23;
    break;
   case 6:
    var $20 = $7 + 1 | 0;
    if (($20 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $25 = ___gmpz_realloc($w, $20);
    __label__ = 8;
    break;
   case 8:
    var $28 = HEAPU32[$u + 8 >> 2];
    var $29 = $2 ^ $dir;
    var $_lobit_not = $29 >> 31 ^ -1;
    if (($29 | 0) < 0 | ($6 | 0) == 0) {
      var $round_1 = 0;
      __label__ = 10;
      break;
    } else {
      var $i_03 = 0;
      __label__ = 9;
      break;
    }
   case 9:
    var $i_03;
    var $33 = HEAP32[$28 + ($i_03 << 2) >> 2];
    var $34 = $i_03 + 1 | 0;
    if (($34 | 0) < ($6 | 0) & ($33 | 0) == 0) {
      var $i_03 = $34;
      __label__ = 9;
      break;
    } else {
      var $round_1 = $33;
      __label__ = 10;
      break;
    }
   case 10:
    var $round_1;
    var $38 = HEAPU32[$w + 8 >> 2];
    var $39 = $cnt & 31;
    if (($39 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $42 = $28 + ($6 << 2) | 0;
    var $43 = ___gmpn_rshift($38, $42, $7, $39);
    var $wsize_0 = $7 - ((HEAP32[$38 + ($7 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $round_2 = $43 & $_lobit_not | $round_1;
    __label__ = 18;
    break;
   case 12:
    if (($5 | 0) == ($6 | 0)) {
      var $wsize_0 = $7;
      var $round_2 = $round_1;
      __label__ = 18;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $55 = $7 - 1 | 0;
    var $57 = HEAP32[$28 + ($6 << 2) >> 2];
    if (($55 | 0) == 0) {
      var $__x_1 = $57;
      var $__dst_1 = $38;
      __label__ = 17;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $61 = $5 - 1 - $6 | 0;
    var $__x_0 = $57;
    var $__src_0 = $28 + ($6 + 1 << 2) | 0;
    var $__dst_0 = $38;
    var $__n_0 = $55;
    __label__ = 15;
    break;
   case 15:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $65 = HEAP32[$__src_0 >> 2];
    var $66 = $__n_0 - 1 | 0;
    if (($66 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $__x_0 = $65;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $66;
      __label__ = 15;
      break;
    }
   case 16:
    var $__x_1 = $65;
    var $__dst_1 = $38 + ($61 << 2) | 0;
    __label__ = 17;
    break;
   case 17:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $wsize_0 = $7;
    var $round_2 = $round_1;
    __label__ = 18;
    break;
   case 18:
    var $round_2;
    var $wsize_0;
    if (($round_2 | 0) == 0) {
      var $wsize_1 = $wsize_0;
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    if (($wsize_0 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $74 = ___gmpn_add_1($38, $38, $wsize_0, 1);
    HEAP32[$38 + ($wsize_0 << 2) >> 2] = $74;
    var $wsize_1 = $74 + $wsize_0 | 0;
    __label__ = 22;
    break;
   case 21:
    HEAP32[$38 >> 2] = 1;
    var $wsize_1 = 1;
    __label__ = 22;
    break;
   case 22:
    var $wsize_1;
    var $80 = $3 ? $wsize_1 : -$wsize_1 | 0;
    HEAP32[$w + 4 >> 2] = $80;
    __label__ = 23;
    break;
   case 23:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_cfdiv_q_2exp["X"] = 1;

function ___gmpz_fdiv_q_2exp($w, $u, $cnt) {
  ___gmpz_cfdiv_q_2exp($w, $u, $cnt, -1);
  return;
}

function ___gmpz_cdiv_r_2exp($w, $u, $cnt) {
  ___gmpz_cfdiv_r_2exp($w, $u, $cnt, 1);
  return;
}

function ___gmpz_cdiv_q_ui($quot, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 12;
    break;
   case 6:
    var $10 = ($5 | 0) > -1;
    var $12 = $10 ? $5 : -$5 | 0;
    if (($12 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $17 = ___gmpz_realloc($quot, $12);
    __label__ = 8;
    break;
   case 8:
    var $20 = HEAP32[$quot + 8 >> 2];
    var $22 = HEAP32[$dividend + 8 >> 2];
    var $23 = ___gmpn_divrem_1($20, 0, $22, $12, $divisor);
    if (($23 | 0) == 0 | $10 ^ 1) {
      var $rl_0 = $23;
      __label__ = 11;
      break;
    } else {
      var $__p_0 = $20;
      __label__ = 9;
      break;
    }
   case 9:
    var $__p_0;
    var $27 = HEAP32[$__p_0 >> 2] + 1 | 0;
    HEAP32[$__p_0 >> 2] = $27;
    if (($27 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $rl_0 = $divisor - $23 | 0;
    __label__ = 11;
    break;
   case 11:
    var $rl_0;
    var $37 = $12 - ((HEAP32[$20 + ($12 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $39 = $10 ? $37 : -$37 | 0;
    HEAP32[$quot + 4 >> 2] = $39;
    var $_0 = $rl_0;
    __label__ = 12;
    break;
   case 12:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_cdiv_q_ui["X"] = 1;

function ___gmpz_cdiv_qr_ui($quot, $rem, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 15;
    break;
   case 6:
    var $11 = ($5 | 0) > -1;
    var $13 = $11 ? $5 : -$5 | 0;
    if (($13 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $18 = ___gmpz_realloc($quot, $13);
    __label__ = 8;
    break;
   case 8:
    var $21 = HEAP32[$quot + 8 >> 2];
    var $23 = HEAP32[$dividend + 8 >> 2];
    var $24 = ___gmpn_divrem_1($21, 0, $23, $13, $divisor);
    if (($24 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    HEAP32[$rem + 4 >> 2] = 0;
    var $rl_1 = 0;
    __label__ = 14;
    break;
   case 10:
    if ($11) {
      var $__p_0 = $21;
      __label__ = 11;
      break;
    } else {
      var $rl_0 = $24;
      __label__ = 13;
      break;
    }
   case 11:
    var $__p_0;
    var $31 = HEAP32[$__p_0 >> 2] + 1 | 0;
    HEAP32[$__p_0 >> 2] = $31;
    if (($31 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $rl_0 = $divisor - $24 | 0;
    __label__ = 13;
    break;
   case 13:
    var $rl_0;
    var $37 = HEAP32[$rem + 8 >> 2];
    HEAP32[$37 >> 2] = $rl_0;
    HEAP32[$rem + 4 >> 2] = (($rl_0 | 0) != 0) << 31 >> 31;
    var $rl_1 = $rl_0;
    __label__ = 14;
    break;
   case 14:
    var $rl_1;
    var $47 = $13 - ((HEAP32[$21 + ($13 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $49 = $11 ? $47 : -$47 | 0;
    HEAP32[$quot + 4 >> 2] = $49;
    var $_0 = $rl_1;
    __label__ = 15;
    break;
   case 15:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_cdiv_qr_ui["X"] = 1;

function ___gmpz_cdiv_r_ui($rem, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 9;
    break;
   case 6:
    var $10 = ($5 | 0) > -1;
    var $12 = $10 ? $5 : -$5 | 0;
    var $14 = HEAP32[$dividend + 8 >> 2];
    var $15 = ___gmpn_mod_1($14, $12, $divisor);
    if (($15 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 9;
    break;
   case 8:
    var $_ = $10 ? $divisor - $15 | 0 : $15;
    var $22 = HEAP32[$rem + 8 >> 2];
    HEAP32[$22 >> 2] = $_;
    HEAP32[$rem + 4 >> 2] = -1;
    var $_0 = $_;
    __label__ = 9;
    break;
   case 9:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cdiv_ui($dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $8 = ($5 | 0) > -1;
    var $10 = $8 ? $5 : -$5 | 0;
    var $12 = HEAP32[$dividend + 8 >> 2];
    var $13 = ___gmpn_mod_1($12, $10, $divisor);
    if (($13 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $_ = $8 ? $divisor - $13 | 0 : $13;
    return $_;
   case 7:
    return 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cmpabs($u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $7 = HEAP32[$v + 4 >> 2];
    var $10 = ($7 | 0) > -1 ? $7 : -$7 | 0;
    if (($5 | 0) == ($10 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_0 = $5 - $10 | 0;
    __label__ = 8;
    break;
   case 4:
    var $16 = HEAP32[$u + 8 >> 2];
    var $18 = HEAP32[$v + 8 >> 2];
    var $__gmp_i_0 = $5;
    __label__ = 5;
    break;
   case 5:
    var $__gmp_i_0;
    var $20 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 6;
      break;
    } else {
      var $_0 = 0;
      __label__ = 8;
      break;
    }
   case 6:
    var $24 = HEAPU32[$16 + ($20 << 2) >> 2];
    var $26 = HEAPU32[$18 + ($20 << 2) >> 2];
    if (($24 | 0) == ($26 | 0)) {
      var $__gmp_i_0 = $20;
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $30 = $24 >>> 0 > $26 >>> 0 ? 1 : -1;
    var $_0 = $30;
    __label__ = 8;
    break;
   case 8:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cmpabs_ui($u, $v_digit) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 8 >> 2];
    var $4 = HEAP32[$u + 4 >> 2];
    if (($4 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = (($v_digit | 0) != 0) << 31 >> 31;
    __label__ = 7;
    break;
   case 4:
    var $12 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    if (($12 | 0) == 1) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 1;
      __label__ = 7;
      break;
    }
   case 5:
    var $15 = HEAPU32[$2 >> 2];
    if ($15 >>> 0 > $v_digit >>> 0) {
      var $_0 = 1;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $_0 = ($15 >>> 0 < $v_digit >>> 0) << 31 >> 31;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_cfdiv_r_2exp($w, $u, $cnt, $dir) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$u + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$w + 4 >> 2] = 0;
    __label__ = 35;
    break;
   case 4:
    var $7 = $cnt >>> 5;
    var $8 = $cnt & 31;
    var $10 = -$2 | 0;
    var $11 = ($2 | 0) > -1 ? $2 : $10;
    var $12 = $u + 8 | 0;
    var $13 = HEAP32[$12 >> 2];
    if (($2 ^ $dir | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 5:
    if (($w | 0) == ($u | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    if (($11 | 0) > ($7 | 0)) {
      var $usize_0 = $2;
      var $wp_0 = $13;
      __label__ = 29;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 7:
    var $21 = $7 + 1 | 0;
    var $_ = ($11 | 0) < ($21 | 0) ? $11 : $21;
    if (($_ | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $27 = ___gmpz_realloc($w, $_);
    __label__ = 9;
    break;
   case 9:
    var $30 = HEAPU32[$w + 8 >> 2];
    if (($_ | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $33 = $_ - 1 | 0;
    var $34 = HEAP32[$13 >> 2];
    if (($33 | 0) == 0) {
      var $__dst_1 = $30;
      var $__x_1 = $34;
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $36 = $11 ^ -1;
    var $37 = -2 - $7 | 0;
    var $smax12 = ($37 | 0) < ($36 | 0) ? $36 : $37;
    var $39 = -2 - $smax12 | 0;
    var $__n_0 = $33;
    var $__dst_0 = $30;
    var $_pn = $13;
    var $__x_0 = $34;
    __label__ = 12;
    break;
   case 12:
    var $__x_0;
    var $_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $42 = HEAP32[$__src_0 >> 2];
    var $43 = $__n_0 - 1 | 0;
    if (($43 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $__n_0 = $43;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn = $__src_0;
      var $__x_0 = $42;
      __label__ = 12;
      break;
    }
   case 13:
    var $__dst_1 = $30 + ($39 << 2) | 0;
    var $__x_1 = $42;
    __label__ = 14;
    break;
   case 14:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 15;
    break;
   case 15:
    if (($11 | 0) > ($7 | 0)) {
      var $usize_0 = $2;
      var $wp_0 = $30;
      __label__ = 29;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    HEAP32[$w + 4 >> 2] = $2;
    __label__ = 35;
    break;
   case 17:
    if (($11 | 0) > ($7 | 0)) {
      var $i_0 = 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 18:
    var $i_0;
    if (($i_0 | 0) < ($7 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    if ((HEAP32[$13 + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0 = $i_0 + 1 | 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 20:
    if ((HEAP32[$13 + ($7 << 2) >> 2] & (1 << $8) - 1 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    HEAP32[$w + 4 >> 2] = 0;
    __label__ = 35;
    break;
   case 22:
    var $67 = $7 + 1 | 0;
    if (($67 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 23;
      break;
    } else {
      var $74 = $13;
      __label__ = 24;
      break;
    }
   case 23:
    var $72 = ___gmpz_realloc($w, $67);
    var $74 = HEAP32[$12 >> 2];
    __label__ = 24;
    break;
   case 24:
    var $74;
    var $76 = HEAP32[$w + 8 >> 2];
    var $_1 = ($11 | 0) < ($67 | 0) ? $11 : $67;
    var $__n1_0 = $_1;
    var $__s_0 = $74;
    var $__d_0 = $76;
    __label__ = 25;
    break;
   case 25:
    var $__d_0;
    var $__s_0;
    var $__n1_0;
    var $81 = HEAP32[$__s_0 >> 2] ^ -1;
    HEAP32[$__d_0 >> 2] = $81;
    var $83 = $__n1_0 - 1 | 0;
    if (($83 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $__n1_0 = $83;
      var $__s_0 = $__s_0 + 4 | 0;
      var $__d_0 = $__d_0 + 4 | 0;
      __label__ = 25;
      break;
    }
   case 26:
    if (($_1 | 0) > ($7 | 0)) {
      var $__p_0 = $76;
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $86 = $11 ^ -1;
    var $87 = -2 - $7 | 0;
    var $smax = ($87 | 0) < ($86 | 0) ? $86 : $87;
    var $scevgep10 = $76 + (($smax ^ -1) << 2) | 0;
    var $92 = ($smax + $7 << 2) + 8 | 0;
    _memset($scevgep10, -1, $92, 4);
    var $__p_0 = $76;
    __label__ = 28;
    break;
   case 28:
    var $__p_0;
    var $95 = HEAP32[$__p_0 >> 2] + 1 | 0;
    HEAP32[$__p_0 >> 2] = $95;
    if (($95 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 28;
      break;
    } else {
      var $usize_0 = $10;
      var $wp_0 = $76;
      __label__ = 29;
      break;
    }
   case 29:
    var $wp_0;
    var $usize_0;
    var $97 = $wp_0 + ($7 << 2) | 0;
    var $101 = HEAP32[$97 >> 2] & (1 << $8) - 1;
    HEAP32[$97 >> 2] = $101;
    var $limb_cnt_0 = $7;
    var $high_0 = $101;
    __label__ = 30;
    break;
   case 30:
    var $high_0;
    var $limb_cnt_0;
    if (($high_0 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 31:
    var $105 = $limb_cnt_0 - 1 | 0;
    if (($105 | 0) < 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 32:
    HEAP32[$w + 4 >> 2] = 0;
    __label__ = 35;
    break;
   case 33:
    var $111 = HEAP32[$wp_0 + ($105 << 2) >> 2];
    var $limb_cnt_0 = $105;
    var $high_0 = $111;
    __label__ = 30;
    break;
   case 34:
    var $116 = ($usize_0 | 0) > -1 ? $limb_cnt_0 + 1 | 0 : $limb_cnt_0 ^ -1;
    HEAP32[$w + 4 >> 2] = $116;
    __label__ = 35;
    break;
   case 35:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_cfdiv_r_2exp["X"] = 1;

function ___gmpz_fdiv_r_2exp($w, $u, $cnt) {
  ___gmpz_cfdiv_r_2exp($w, $u, $cnt, -1);
  return;
}

function ___gmpz_clrbit($d, $bit_index) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $d + 4 | 0;
    var $2 = HEAP32[$1 >> 2];
    var $4 = HEAP32[$d + 8 >> 2];
    var $5 = $bit_index >>> 5;
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      var $zero_bound_0 = 0;
      __label__ = 9;
      break;
    }
   case 3:
    if (($5 | 0) < ($2 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 4:
    var $10 = $4 + ($5 << 2) | 0;
    var $15 = HEAP32[$10 >> 2] & (1 << ($bit_index & 31) ^ -1);
    HEAP32[$10 >> 2] = $15;
    if (($15 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 5:
    if (($5 | 0) == ($2 - 1 | 0)) {
      var $dsize_0 = $2;
      __label__ = 6;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 6:
    var $dsize_0;
    var $20 = $dsize_0 - 1 | 0;
    if (($20 | 0) > 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    if ((HEAP32[$4 + ($dsize_0 - 2 << 2) >> 2] | 0) == 0) {
      var $dsize_0 = $20;
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    HEAP32[$1 >> 2] = $20;
    __label__ = 25;
    break;
   case 9:
    var $zero_bound_0;
    if ((HEAP32[$4 + ($zero_bound_0 << 2) >> 2] | 0) == 0) {
      var $zero_bound_0 = $zero_bound_0 + 1 | 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $32 = -$2 | 0;
    if (($5 | 0) > ($zero_bound_0 | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 11:
    if (($5 | 0) < ($32 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $39 = $4 + ($5 << 2) | 0;
    var $41 = HEAP32[$39 >> 2] | 1 << ($bit_index & 31);
    HEAP32[$39 >> 2] = $41;
    __label__ = 25;
    break;
   case 13:
    var $45 = $5 + 1 | 0;
    if ((HEAP32[$d >> 2] | 0) < ($45 | 0)) {
      __label__ = 14;
      break;
    } else {
      var $dp_0 = $4;
      __label__ = 15;
      break;
    }
   case 14:
    var $48 = ___gmpz_realloc($d, $45);
    var $dp_0 = $48;
    __label__ = 15;
    break;
   case 15:
    var $dp_0;
    if (($2 | 0) == (-$5 | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $scevgep5 = $dp_0 + ($32 << 2) | 0;
    var $54 = $2 + $5 << 2;
    _memset($scevgep5, 0, $54, 4);
    __label__ = 17;
    break;
   case 17:
    HEAP32[$dp_0 + ($5 << 2) >> 2] = 1 << ($bit_index & 31);
    HEAP32[$1 >> 2] = $5 ^ -1;
    __label__ = 25;
    break;
   case 18:
    if (($5 | 0) == ($zero_bound_0 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 19:
    var $63 = $4 + ($5 << 2) | 0;
    var $69 = (HEAP32[$63 >> 2] - 1 | 1 << ($bit_index & 31)) + 1 | 0;
    HEAP32[$63 >> 2] = $69;
    if (($69 | 0) == 0) {
      var $i_0_in = $5;
      __label__ = 20;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 20:
    var $i_0_in;
    var $i_0 = $i_0_in + 1 | 0;
    if (($i_0 | 0) < ($32 | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $73 = $4 + ($i_0 << 2) | 0;
    var $75 = HEAP32[$73 >> 2] + 1 | 0;
    HEAP32[$73 >> 2] = $75;
    if (($75 | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 20;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 22:
    var $78 = 1 - $2 | 0;
    if ((HEAP32[$d >> 2] | 0) < ($78 | 0)) {
      __label__ = 23;
      break;
    } else {
      var $dp_1 = $4;
      __label__ = 24;
      break;
    }
   case 23:
    var $83 = ___gmpz_realloc($d, $78);
    var $dp_1 = $83;
    __label__ = 24;
    break;
   case 24:
    var $dp_1;
    HEAP32[$dp_1 + ($i_0 << 2) >> 2] = 1;
    var $87 = -$78 | 0;
    HEAP32[$1 >> 2] = $87;
    __label__ = 25;
    break;
   case 25:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_clrbit["X"] = 1;

function ___gmpz_com($dst, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$src + 4 >> 2];
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 3:
    var $7 = $2 + 1 | 0;
    if ((HEAP32[$dst >> 2] | 0) < ($7 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $10 = ___gmpz_realloc($dst, $7);
    __label__ = 5;
    break;
   case 5:
    var $13 = HEAP32[$dst + 8 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    HEAP32[$13 >> 2] = 1;
    HEAP32[$dst + 4 >> 2] = -1;
    __label__ = 13;
    break;
   case 7:
    var $19 = HEAP32[$src + 8 >> 2];
    var $20 = ___gmpn_add_1($13, $19, $2, 1);
    if (($20 | 0) == 0) {
      var $size_0 = $2;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $23 = $13 + ($2 << 2) | 0;
    HEAP32[$23 >> 2] = $20;
    var $size_0 = $7;
    __label__ = 9;
    break;
   case 9:
    var $size_0;
    HEAP32[$dst + 4 >> 2] = -$size_0 | 0;
    __label__ = 13;
    break;
   case 10:
    var $28 = -$2 | 0;
    if ((HEAP32[$dst >> 2] | 0) < ($28 | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $33 = ___gmpz_realloc($dst, $28);
    __label__ = 12;
    break;
   case 12:
    var $36 = HEAP32[$src + 8 >> 2];
    var $38 = HEAP32[$dst + 8 >> 2];
    var $39 = ___gmpn_sub_1($38, $36, $28, 1);
    var $45 = $28 - ((HEAP32[$38 + (($2 ^ -1) << 2) >> 2] | 0) == 0 & 1) | 0;
    HEAP32[$dst + 4 >> 2] = $45;
    __label__ = 13;
    break;
   case 13:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_com["X"] = 1;

function ___gmpz_combit($d, $bit_index) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $d + 4 | 0;
    var $2 = HEAP32[$1 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $6 = $d + 8 | 0;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $bit_index >>> 5;
    var $10 = 1 << ($bit_index & 31);
    if (($8 | 0) < ($5 | 0)) {
      var $dsize_0 = $5;
      var $dp_0 = $7;
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $13 = $8 + 1 | 0;
    if (($13 | 0) > (HEAP32[$d >> 2] | 0)) {
      __label__ = 4;
      break;
    } else {
      var $20 = $7;
      __label__ = 5;
      break;
    }
   case 4:
    var $18 = ___gmpz_realloc($d, $13);
    var $20 = HEAP32[$6 >> 2];
    __label__ = 5;
    break;
   case 5:
    var $20;
    if (($13 | 0) == ($5 | 0)) {
      var $dsize_0 = $5;
      var $dp_0 = $20;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $scevgep6 = $20 + ($5 << 2) | 0;
    var $23 = $13 - $5 << 2;
    _memset($scevgep6, 0, $23, 4);
    var $dsize_0 = $13;
    var $dp_0 = $20;
    __label__ = 7;
    break;
   case 7:
    var $dp_0;
    var $dsize_0;
    var $26 = $dp_0 + ($8 << 2) | 0;
    var $27 = HEAP32[$26 >> 2];
    if ((HEAP32[$1 >> 2] | 0) > -1) {
      __label__ = 8;
      break;
    } else {
      var $i_0_in = $8;
      __label__ = 11;
      break;
    }
   case 8:
    var $29 = $27 ^ $10;
    HEAP32[$26 >> 2] = $29;
    var $dsize_1 = $dsize_0;
    __label__ = 9;
    break;
   case 9:
    var $dsize_1;
    if (($dsize_1 | 0) > 0) {
      __label__ = 10;
      break;
    } else {
      var $storemerge = $dsize_1;
      __label__ = 27;
      break;
    }
   case 10:
    var $33 = $dsize_1 - 1 | 0;
    if ((HEAP32[$dp_0 + ($33 << 2) >> 2] | 0) == 0) {
      var $dsize_1 = $33;
      __label__ = 9;
      break;
    } else {
      var $storemerge = $dsize_1;
      __label__ = 27;
      break;
    }
   case 11:
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) > 0) {
      __label__ = 12;
      break;
    } else {
      var $sum_pn = $27;
      __label__ = 14;
      break;
    }
   case 12:
    if ((HEAP32[$dp_0 + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 11;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $sum_pn = $27 + 1 | 0;
    __label__ = 14;
    break;
   case 14:
    var $sum_pn;
    if (($10 & -$sum_pn | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $46 = $dsize_0 + 1 | 0;
    if (($46 | 0) > (HEAP32[$d >> 2] | 0)) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $51 = ___gmpz_realloc($d, $46);
    __label__ = 17;
    break;
   case 17:
    var $52 = HEAP32[$6 >> 2];
    var $53 = $52 + ($8 << 2) | 0;
    var $54 = HEAP32[$53 >> 2];
    var $uadd = _llvm_uadd_with_overflow_i32($54, $10);
    var $55 = $uadd.f0;
    HEAP32[$53 >> 2] = $55;
    var $56 = $uadd.f1;
    if ($56) {
      __label__ = 18;
      break;
    } else {
      var $c_0 = 0;
      __label__ = 21;
      break;
    }
   case 18:
    var $57 = $dsize_0 - $8 | 0;
    var $__gmp_i_0 = 1;
    __label__ = 19;
    break;
   case 19:
    var $__gmp_i_0;
    if (($__gmp_i_0 | 0) < ($57 | 0)) {
      __label__ = 20;
      break;
    } else {
      var $c_0 = 1;
      __label__ = 21;
      break;
    }
   case 20:
    var $61 = $52 + ($__gmp_i_0 + $8 << 2) | 0;
    var $63 = HEAP32[$61 >> 2] + 1 | 0;
    HEAP32[$61 >> 2] = $63;
    if (($63 | 0) == 0) {
      var $__gmp_i_0 = $__gmp_i_0 + 1 | 0;
      __label__ = 19;
      break;
    } else {
      var $c_0 = 0;
      __label__ = 21;
      break;
    }
   case 21:
    var $c_0;
    var $66 = $52 + ($dsize_0 << 2) | 0;
    HEAP32[$66 >> 2] = $c_0;
    var $dsize_2_ph = $c_0 + $dsize_0 | 0;
    var $dp_1_ph = $52;
    __label__ = 23;
    break;
   case 22:
    var $69 = $dsize_0 + $8 | 0;
    var $70 = ___gmpn_sub_1($26, $26, $69, $10);
    var $dsize_2_ph = $dsize_0;
    var $dp_1_ph = $dp_0;
    __label__ = 23;
    break;
   case 23:
    var $dp_1_ph;
    var $dsize_2_ph;
    var $dsize_2 = $dsize_2_ph;
    __label__ = 24;
    break;
   case 24:
    var $dsize_2;
    if (($dsize_2 | 0) > 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $74 = $dsize_2 - 1 | 0;
    if ((HEAP32[$dp_1_ph + ($74 << 2) >> 2] | 0) == 0) {
      var $dsize_2 = $74;
      __label__ = 24;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $storemerge = -$dsize_2 | 0;
    __label__ = 27;
    break;
   case 27:
    var $storemerge;
    HEAP32[$1 >> 2] = $storemerge;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_combit["X"] = 1;

function ___gmpz_cmpabs_d($z, $d) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $darray = __stackBase__;
    tempDoubleF64[0] = $d;
    var $1$0 = tempDoubleI32[0];
    var $1$1 = tempDoubleI32[1];
    if (($1$0 & 0) == 0 && ($1$1 & 2146435072) == 2146435072) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if (($1$0 & -1) == 0 && ($1$1 & 1048575) == 0) {
      var $_0 = -1;
      __label__ = 27;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    ___gmp_invalid_operation();
    throw "Reached an unreachable!";
   case 5:
    var $10 = HEAPU32[$z + 4 >> 2];
    if ($d == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $_0 = ($10 | 0) != 0 & 1;
    __label__ = 27;
    break;
   case 7:
    if (($10 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $_0 = ($d != 0) << 31 >> 31;
    __label__ = 27;
    break;
   case 9:
    var $23 = ($10 | 0) > -1 ? $10 : -$10 | 0;
    if ($d < 0) {
      __label__ = 10;
      break;
    } else {
      var $28 = $d;
      __label__ = 11;
      break;
    }
   case 10:
    var $28 = -$d;
    __label__ = 11;
    break;
   case 11:
    var $28;
    if ($28 < 1) {
      var $_0 = 1;
      __label__ = 27;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $31 = $darray | 0;
    var $32 = ___gmp_extract_double($31, $28);
    if (($23 | 0) == ($32 | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $36 = ($23 | 0) >= ($32 | 0) ? 1 : -1;
    var $_0 = $36;
    __label__ = 27;
    break;
   case 14:
    var $39 = HEAPU32[$z + 8 >> 2];
    var $42 = HEAPU32[$39 + ($23 - 1 << 2) >> 2];
    var $44 = HEAPU32[$darray + 8 >> 2];
    if (($42 | 0) == ($44 | 0)) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $48 = $42 >>> 0 >= $44 >>> 0 ? 1 : -1;
    var $_0 = $48;
    __label__ = 27;
    break;
   case 16:
    if (($23 | 0) == 1) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $_0 = ((HEAP32[$darray + 4 >> 2] | HEAP32[$31 >> 2] | 0) != 0) << 31 >> 31;
    __label__ = 27;
    break;
   case 18:
    var $61 = HEAPU32[$39 + ($23 - 2 << 2) >> 2];
    var $63 = HEAPU32[$darray + 4 >> 2];
    if (($61 | 0) == ($63 | 0)) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $67 = $61 >>> 0 >= $63 >>> 0 ? 1 : -1;
    var $_0 = $67;
    __label__ = 27;
    break;
   case 20:
    if (($23 | 0) == 2) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $_0 = ((HEAP32[$31 >> 2] | 0) != 0) << 31 >> 31;
    __label__ = 27;
    break;
   case 22:
    var $77 = HEAPU32[$39 + ($23 - 3 << 2) >> 2];
    var $78 = HEAPU32[$31 >> 2];
    if (($77 | 0) == ($78 | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $82 = $77 >>> 0 >= $78 >>> 0 ? 1 : -1;
    var $_0 = $82;
    __label__ = 27;
    break;
   case 24:
    var $__i_0 = $23 - 4 | 0;
    __label__ = 25;
    break;
   case 25:
    var $__i_0;
    if (($__i_0 | 0) > -1) {
      __label__ = 26;
      break;
    } else {
      var $_0 = 0;
      __label__ = 27;
      break;
    }
   case 26:
    if ((HEAP32[$39 + ($__i_0 << 2) >> 2] | 0) == 0) {
      var $__i_0 = $__i_0 - 1 | 0;
      __label__ = 25;
      break;
    } else {
      var $_0 = 1;
      __label__ = 27;
      break;
    }
   case 27:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_cmpabs_d["X"] = 1;

function ___gmpz_congruent_p($a, $c, $d) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$d + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = ___gmpz_cmp($a, $c);
    var $_0 = ($5 | 0) == 0 & 1;
    __label__ = 45;
    break;
   case 4:
    var $11 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $13 = HEAPU32[$d + 8 >> 2];
    var $15 = HEAP32[$a + 4 >> 2];
    var $18 = ($15 | 0) > -1 ? $15 : -$15 | 0;
    var $20 = HEAP32[$c + 4 >> 2];
    var $23 = ($20 | 0) > -1 ? $20 : -$20 | 0;
    var $24 = ($18 | 0) < ($23 | 0);
    var $a_c = $24 ? $a : $c;
    var $c_a = $24 ? $c : $a;
    var $26 = HEAP32[$c_a + 4 >> 2];
    var $28 = HEAP32[$a_c + 4 >> 2];
    var $29 = $28 ^ $26;
    var $32 = ($26 | 0) > -1 ? $26 : -$26 | 0;
    var $34 = HEAPU32[$c_a + 8 >> 2];
    if (($28 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $37 = ___gmpn_divisible_p($34, $32, $13, $11);
    var $_0 = $37;
    __label__ = 45;
    break;
   case 6:
    var $41 = ($28 | 0) > -1 ? $28 : -$28 | 0;
    var $43 = HEAPU32[$a_c + 8 >> 2];
    var $44 = HEAP32[$34 >> 2];
    var $45 = HEAPU32[$43 >> 2];
    var $46 = HEAPU32[$13 >> 2];
    var $48 = $46 & -$46;
    var $49 = $48 - 1 | 0;
    var $50 = ($29 | 0) > -1;
    var $52 = $50 ? $44 : -$44 | 0;
    if (($49 & $52 - $45 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      var $_0 = 0;
      __label__ = 45;
      break;
    }
   case 7:
    if (($41 | 0) == 1) {
      __label__ = 8;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 8:
    if (($11 | 0) == 1) {
      var $dlow_0 = $46;
      __label__ = 9;
      break;
    } else if (($11 | 0) == 2) {
      __label__ = 26;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 9:
    var $dlow_0;
    if (($29 | 0) < 0) {
      __label__ = 10;
      break;
    } else {
      var $clow_0 = $45;
      __label__ = 16;
      break;
    }
   case 10:
    if ($45 >>> 0 > $dlow_0 >>> 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $clow_0 = $dlow_0 - $45 | 0;
    __label__ = 16;
    break;
   case 12:
    if ($dlow_0 >>> 0 < 65536) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $69 = $dlow_0 >>> 0 < 256 ? 1 : 9;
    var $74 = $69;
    __label__ = 15;
    break;
   case 14:
    var $72 = $dlow_0 >>> 0 < 16777216 ? 17 : 25;
    var $74 = $72;
    __label__ = 15;
    break;
   case 15:
    var $74;
    var $76 = STRING_TABLE.___gmpn_clz_tab + ($dlow_0 >>> ($74 >>> 0)) | 0;
    var $81 = $dlow_0 << 33 - $74 - (HEAPU8[$76] & 255);
    var $clow_0 = ($81 << ($45 >>> 0 > $81 >>> 0 & 1)) - $45 | 0;
    __label__ = 16;
    break;
   case 16:
    var $clow_0;
    if (($32 | 0) > 9) {
      __label__ = 17;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 17:
    var $89 = ___gmpn_mod_1($34, $32, $dlow_0);
    if ($clow_0 >>> 0 < $dlow_0 >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $_0 = ($89 | 0) == ($clow_0 | 0) & 1;
    __label__ = 45;
    break;
   case 19:
    var $_0 = ($89 | 0) == (($clow_0 >>> 0) % ($dlow_0 >>> 0) | 0) & 1;
    __label__ = 45;
    break;
   case 20:
    if (($dlow_0 & 1 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $dlow_1 = $dlow_0;
      __label__ = 25;
      break;
    }
   case 21:
    var $103 = $dlow_0 & -$dlow_0;
    if ($103 >>> 0 < 65536) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $107 = $103 >>> 0 < 256 ? 1 : 9;
    var $112 = $107;
    __label__ = 24;
    break;
   case 23:
    var $110 = $103 >>> 0 < 16777216 ? 17 : 25;
    var $112 = $110;
    __label__ = 24;
    break;
   case 24:
    var $112;
    var $114 = STRING_TABLE.___gmpn_clz_tab + ($103 >>> ($112 >>> 0)) | 0;
    var $dlow_1 = $dlow_0 >>> (($112 - 2 + (HEAPU8[$114] & 255) | 0) >>> 0);
    __label__ = 25;
    break;
   case 25:
    var $dlow_1;
    var $121 = ___gmpn_modexact_1c_odd($34, $32, $dlow_1, $clow_0);
    var $_0 = (($121 | 0) == 0 | ($121 | 0) == ($dlow_1 | 0)) & 1;
    __label__ = 45;
    break;
   case 26:
    if (($46 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $129 = HEAPU32[$13 + 4 >> 2];
    if ($129 >>> 0 > $49 >>> 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    if ($48 >>> 0 < 65536) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $135 = $48 >>> 0 < 256 ? 1 : 9;
    var $140 = $135;
    __label__ = 31;
    break;
   case 30:
    var $138 = $48 >>> 0 < 16777216 ? 17 : 25;
    var $140 = $138;
    __label__ = 31;
    break;
   case 31:
    var $140;
    var $142 = STRING_TABLE.___gmpn_clz_tab + ($48 >>> ($140 >>> 0)) | 0;
    var $146 = $140 - 33 + (HEAPU8[$142] & 255) | 0;
    var $dlow_0 = $46 >>> (($146 + 31 | 0) >>> 0) | $129 << 1 - $146;
    __label__ = 9;
    break;
   case 32:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $154 = ($32 << 2) + 4 | 0;
    if ($154 >>> 0 < 65536) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $157 = STACKTOP;
    STACKTOP += $154;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $161 = $157;
    __label__ = 35;
    break;
   case 34:
    var $159 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $154);
    var $161 = $159;
    __label__ = 35;
    break;
   case 35:
    var $161;
    var $162 = $161;
    if ($50) {
      __label__ = 36;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 36:
    if (($32 | 0) > ($41 | 0)) {
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $166 = ___gmpn_cmp($34, $43, $32);
    if (($166 | 0) > -1) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    var $169 = ___gmpn_sub($162, $34, $32, $43, $41);
    var $asize_0 = $32;
    __label__ = 40;
    break;
   case 39:
    var $171 = ___gmpn_sub_n($162, $43, $34, $32);
    var $asize_0 = $32;
    __label__ = 40;
    break;
   case 40:
    var $asize_0;
    if (($asize_0 | 0) > 0) {
      __label__ = 41;
      break;
    } else {
      var $asize_1 = $asize_0;
      __label__ = 43;
      break;
    }
   case 41:
    var $174 = $asize_0 - 1 | 0;
    if ((HEAP32[$162 + ($174 << 2) >> 2] | 0) == 0) {
      var $asize_0 = $174;
      __label__ = 40;
      break;
    } else {
      var $asize_1 = $asize_0;
      __label__ = 43;
      break;
    }
   case 42:
    var $179 = ___gmpn_add($162, $34, $32, $43, $41);
    var $180 = $162 + ($32 << 2) | 0;
    HEAP32[$180 >> 2] = $179;
    var $asize_1 = (($179 | 0) != 0 & 1) + $32 | 0;
    __label__ = 43;
    break;
   case 43:
    var $asize_1;
    var $184 = ___gmpn_divisible_p($162, $asize_1, $13, $11);
    var $185 = HEAP32[$__tmp_marker >> 2];
    if (($185 | 0) == 0) {
      var $_0 = $184;
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    ___gmp_tmp_reentrant_free($185);
    var $_0 = $184;
    __label__ = 45;
    break;
   case 45:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_congruent_p["X"] = 1;

function ___gmpz_congruent_2exp_p($a, $c, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$a + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $7 = HEAP32[$c + 4 >> 2];
    var $10 = ($7 | 0) > -1 ? $7 : -$7 | 0;
    var $11 = ($5 | 0) < ($10 | 0);
    var $a_c = $11 ? $a : $c;
    var $c_a = $11 ? $c : $a;
    var $12 = $d >>> 5;
    var $13 = $d & 31;
    var $15 = (1 << $13) - 1 | 0;
    var $17 = HEAPU32[$c_a + 8 >> 2];
    var $19 = HEAPU32[$a_c + 8 >> 2];
    var $21 = HEAPU32[$c_a + 4 >> 2];
    var $24 = ($21 | 0) > -1 ? $21 : -$21 | 0;
    var $26 = HEAP32[$a_c + 4 >> 2];
    var $29 = ($26 | 0) > -1 ? $26 : -$26 | 0;
    if (($26 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($26 ^ $21 | 0) > -1) {
      __label__ = 4;
      break;
    } else {
      var $i_1 = 0;
      __label__ = 12;
      break;
    }
   case 4:
    var $36 = ($29 | 0) < ($12 | 0) ? $29 : $12;
    var $37 = ___gmpn_cmp($17, $19, $36);
    if (($37 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 5:
    if (($29 | 0) > ($12 | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $_0 = (HEAP32[$17 + ($12 << 2) >> 2] - HEAP32[$19 + ($12 << 2) >> 2] & $15 | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 7:
    if (($24 | 0) > ($12 | 0)) {
      var $i_0 = $29;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $_0 = ($24 | 0) == ($29 | 0) & 1;
    __label__ = 26;
    break;
   case 9:
    var $i_0;
    if (($i_0 | 0) < ($12 | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    if ((HEAP32[$17 + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0 = $i_0 + 1 | 0;
      __label__ = 9;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 11:
    var $_0 = (HEAP32[$17 + ($12 << 2) >> 2] & $15 | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 12:
    var $i_1;
    var $68 = HEAPU32[$17 + ($i_1 << 2) >> 2];
    var $71 = HEAP32[$19 + ($i_1 << 2) >> 2] + $68 | 0;
    if (($i_1 | 0) < ($12 | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $_0 = ($71 & $15 | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 14:
    var $78 = $i_1 + 1 | 0;
    if (($71 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 15:
    if (($68 | 0) == 0) {
      var $i_1 = $78;
      __label__ = 12;
      break;
    } else {
      var $i_2 = $78;
      __label__ = 16;
      break;
    }
   case 16:
    var $i_2;
    if (($i_2 | 0) < ($29 | 0)) {
      __label__ = 17;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 17:
    var $89 = HEAP32[$17 + ($i_2 << 2) >> 2] + 1 + HEAP32[$19 + ($i_2 << 2) >> 2] | 0;
    if (($i_2 | 0) < ($12 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $_0 = ($89 & $15 | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 19:
    if (($89 | 0) == 0) {
      var $i_2 = $i_2 + 1 | 0;
      __label__ = 16;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 20:
    if (($24 | 0) < ($12 | 0)) {
      var $_0 = 0;
      __label__ = 26;
      break;
    } else {
      var $i_3 = $i_2;
      __label__ = 21;
      break;
    }
   case 21:
    var $i_3;
    if (($i_3 | 0) < ($12 | 0)) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    if ((HEAP32[$17 + ($i_3 << 2) >> 2] | 0) == -1) {
      var $i_3 = $i_3 + 1 | 0;
      __label__ = 21;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 23:
    if (($13 | 0) == 0) {
      var $_0 = 1;
      __label__ = 26;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    if (($24 | 0) == ($12 | 0)) {
      var $_0 = 0;
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $_0 = (HEAP32[$17 + ($12 << 2) >> 2] + 1 & $15 | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 26:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_congruent_2exp_p["X"] = 1;

function ___gmpz_congruent_ui_p($a, $cu, $du) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($du | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = ___gmpz_cmp_ui($a, $cu);
    var $_0 = ($3 | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 4:
    var $8 = HEAPU32[$a + 4 >> 2];
    if (($8 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 5:
    if ($cu >>> 0 < $du >>> 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $_0 = ($cu | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 7:
    var $_0 = (($cu >>> 0) % ($du >>> 0) | 0) == 0 & 1;
    __label__ = 26;
    break;
   case 8:
    if (($8 | 0) < 0) {
      __label__ = 9;
      break;
    } else {
      var $c_0 = $cu;
      var $asize_0 = $8;
      __label__ = 15;
      break;
    }
   case 9:
    var $22 = -$8 | 0;
    if ($cu >>> 0 > $du >>> 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $c_0 = $du - $cu | 0;
    var $asize_0 = $22;
    __label__ = 15;
    break;
   case 11:
    if ($du >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $30 = $du >>> 0 < 256 ? 1 : 9;
    var $35 = $30;
    __label__ = 14;
    break;
   case 13:
    var $33 = $du >>> 0 < 16777216 ? 17 : 25;
    var $35 = $33;
    __label__ = 14;
    break;
   case 14:
    var $35;
    var $37 = STRING_TABLE.___gmpn_clz_tab + ($du >>> ($35 >>> 0)) | 0;
    var $42 = $du << 33 - $35 - (HEAPU8[$37] & 255);
    var $c_0 = ($42 << ($42 >>> 0 < $cu >>> 0 & 1)) - $cu | 0;
    var $asize_0 = $22;
    __label__ = 15;
    break;
   case 15:
    var $asize_0;
    var $c_0;
    var $49 = HEAPU32[$a + 8 >> 2];
    if (($asize_0 | 0) > 9) {
      __label__ = 16;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 16:
    var $52 = ___gmpn_mod_1($49, $asize_0, $du);
    if ($c_0 >>> 0 < $du >>> 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $_0 = ($52 | 0) == ($c_0 | 0) & 1;
    __label__ = 26;
    break;
   case 18:
    var $_0 = ($52 | 0) == (($c_0 >>> 0) % ($du >>> 0) | 0) & 1;
    __label__ = 26;
    break;
   case 19:
    if (($du & 1 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $d_0 = $du;
      __label__ = 25;
      break;
    }
   case 20:
    var $68 = $du & -$du;
    if ((HEAP32[$49 >> 2] - $c_0 & $68 - 1 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $_0 = 0;
      __label__ = 26;
      break;
    }
   case 21:
    if ($68 >>> 0 < 65536) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $76 = $68 >>> 0 < 256 ? 1 : 9;
    var $81 = $76;
    __label__ = 24;
    break;
   case 23:
    var $79 = $68 >>> 0 < 16777216 ? 17 : 25;
    var $81 = $79;
    __label__ = 24;
    break;
   case 24:
    var $81;
    var $83 = STRING_TABLE.___gmpn_clz_tab + ($68 >>> ($81 >>> 0)) | 0;
    var $d_0 = $du >>> (($81 - 2 + (HEAPU8[$83] & 255) | 0) >>> 0);
    __label__ = 25;
    break;
   case 25:
    var $d_0;
    var $90 = ___gmpn_modexact_1c_odd($49, $asize_0, $d_0, $c_0);
    var $_0 = (($90 | 0) == 0 | ($90 | 0) == ($d_0 | 0)) & 1;
    __label__ = 26;
    break;
   case 26:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_congruent_ui_p["X"] = 1;

function ___gmpz_divexact_gcd($q, $a, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[$d + 4 >> 2] | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 3:
    var $7 = HEAPU32[HEAP32[$d + 8 >> 2] >> 2];
    if (($7 | 0) == 1) {
      __label__ = 4;
      break;
    } else if (($7 | 0) == 3) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 4:
    if (($q | 0) == ($a | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    ___gmpz_set($q, $a);
    __label__ = 14;
    break;
   case 6:
    _mpz_divexact_by3($q, $a);
    __label__ = 14;
    break;
   case 7:
    var $14 = $7 & -$7;
    if ($14 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $18 = $14 >>> 0 < 256 ? 1 : 9;
    var $23 = $18;
    __label__ = 10;
    break;
   case 9:
    var $21 = $14 >>> 0 < 16777216 ? 17 : 25;
    var $23 = $21;
    __label__ = 10;
    break;
   case 10:
    var $23;
    var $25 = STRING_TABLE.___gmpn_clz_tab + ($14 >>> ($23 >>> 0)) | 0;
    var $29 = $23 - 2 + (HEAPU8[$25] & 255) | 0;
    var $30 = $7 >>> ($29 >>> 0);
    if (($30 | 0) == 1) {
      __label__ = 11;
      break;
    } else if (($30 | 0) == 3) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 11:
    ___gmpz_tdiv_q_2exp($q, $a, $29);
    __label__ = 14;
    break;
   case 12:
    ___gmpz_tdiv_q_2exp($q, $a, $29);
    _mpz_divexact_by3($q, $q);
    __label__ = 14;
    break;
   case 13:
    ___gmpz_divexact($q, $a, $d);
    __label__ = 14;
    break;
   case 14:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mpz_divexact_by3($q, $a) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$a + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$q + 4 >> 2] = 0;
    __label__ = 7;
    break;
   case 4:
    var $9 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($9 | 0) > (HEAP32[$q >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $14 = ___gmpz_realloc($q, $9);
    __label__ = 6;
    break;
   case 6:
    var $17 = HEAP32[$q + 8 >> 2];
    var $19 = HEAP32[$a + 8 >> 2];
    var $20 = ___gmpn_bdiv_dbm1c($17, $19, $9, 1431655765, 0);
    var $26 = $9 - ((HEAP32[$17 + ($9 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $29 = ($2 | 0) > 0 ? $26 : -$26 | 0;
    HEAP32[$q + 4 >> 2] = $29;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_divexact($quot, $num, $den) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $1 = $num + 4 | 0;
    var $2 = HEAP32[$1 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $6 = $den + 4 | 0;
    var $7 = HEAP32[$6 >> 2];
    var $10 = ($7 | 0) > -1 ? $7 : -$7 | 0;
    var $12 = $5 - $10 + 1 | 0;
    if (($12 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $17 = ___gmpz_realloc($quot, $12);
    __label__ = 4;
    break;
   case 4:
    if (($5 | 0) < ($10 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    __label__ = 21;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $23 = $quot + 8 | 0;
    if (($quot | 0) == ($num | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $26 = HEAP32[$23 >> 2];
    if (($quot | 0) == ($den | 0)) {
      __label__ = 8;
      break;
    } else {
      var $qp_0 = $26;
      __label__ = 12;
      break;
    }
   case 8:
    var $29 = $12 << 2;
    if ($29 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $32 = STACKTOP;
    STACKTOP += $29;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $36 = $32;
    __label__ = 11;
    break;
   case 10:
    var $34 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $29);
    var $36 = $34;
    __label__ = 11;
    break;
   case 11:
    var $36;
    var $qp_0 = $36;
    __label__ = 12;
    break;
   case 12:
    var $qp_0;
    var $40 = HEAP32[$num + 8 >> 2];
    var $42 = HEAP32[$den + 8 >> 2];
    ___gmpn_divexact($qp_0, $40, $5, $42, $10);
    var $qn_0 = $12;
    __label__ = 13;
    break;
   case 13:
    var $qn_0;
    if (($qn_0 | 0) > 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $46 = $qn_0 - 1 | 0;
    if ((HEAP32[$qp_0 + ($46 << 2) >> 2] | 0) == 0) {
      var $qn_0 = $46;
      __label__ = 13;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $56 = (HEAP32[$6 >> 2] ^ HEAP32[$1 >> 2] | 0) > -1 ? $qn_0 : -$qn_0 | 0;
    HEAP32[$quot + 4 >> 2] = $56;
    var $58 = HEAP32[$23 >> 2];
    if (($qp_0 | 0) == ($58 | 0) | ($qn_0 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $62 = $qn_0 - 1 | 0;
    var $63 = HEAP32[$qp_0 >> 2];
    if (($62 | 0) == 0) {
      var $__x_1 = $63;
      var $__dst_1 = $58;
      __label__ = 18;
      break;
    } else {
      var $__x_0 = $63;
      var $qp_0_pn = $qp_0;
      var $__dst_0 = $58;
      var $__n_0 = $62;
      __label__ = 17;
      break;
    }
   case 17:
    var $__n_0;
    var $__dst_0;
    var $qp_0_pn;
    var $__x_0;
    var $__src_0 = $qp_0_pn + 4 | 0;
    var $65 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $66 = HEAP32[$__src_0 >> 2];
    var $67 = $__n_0 - 1 | 0;
    if (($67 | 0) == 0) {
      var $__x_1 = $66;
      var $__dst_1 = $65;
      __label__ = 18;
      break;
    } else {
      var $__x_0 = $66;
      var $qp_0_pn = $__src_0;
      var $__dst_0 = $65;
      var $__n_0 = $67;
      __label__ = 17;
      break;
    }
   case 18:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 19;
    break;
   case 19:
    var $69 = HEAP32[$__tmp_marker >> 2];
    if (($69 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    ___gmp_tmp_reentrant_free($69);
    __label__ = 21;
    break;
   case 21:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_divexact["X"] = 1;

function ___gmpz_divisible_p($a, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$d + 4 >> 2];
    var $4 = HEAPU32[$a + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($4 | 0) == 0 & 1;
    __label__ = 5;
    break;
   case 4:
    var $11 = HEAP32[$a + 8 >> 2];
    var $14 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $16 = HEAP32[$d + 8 >> 2];
    var $19 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $20 = ___gmpn_divisible_p($11, $14, $16, $19);
    var $_0 = $20;
    __label__ = 5;
    break;
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_divexact_ui($dst, $src, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$src + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$dst + 4 >> 2] = 0;
    __label__ = 9;
    break;
   case 6:
    var $10 = ($5 | 0) > -1;
    var $12 = $10 ? $5 : -$5 | 0;
    if (($12 | 0) > (HEAP32[$dst >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $17 = ___gmpz_realloc($dst, $12);
    __label__ = 8;
    break;
   case 8:
    var $20 = HEAP32[$dst + 8 >> 2];
    var $22 = HEAP32[$src + 8 >> 2];
    ___gmpn_divexact_1($20, $22, $12, $divisor);
    var $28 = $12 - ((HEAP32[$20 + ($12 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $30 = $10 ? $28 : -$28 | 0;
    HEAP32[$dst + 4 >> 2] = $30;
    __label__ = 9;
    break;
   case 9:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_divisible_2exp_p($a, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$a + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $6 = $d >>> 5;
    if (($5 | 0) > ($6 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_0 = ($5 | 0) == 0 & 1;
    __label__ = 8;
    break;
   case 4:
    var $13 = HEAPU32[$a + 8 >> 2];
    var $i_0 = 0;
    __label__ = 5;
    break;
   case 5:
    var $i_0;
    if (($i_0 | 0) < ($6 | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    if ((HEAP32[$13 + ($i_0 << 2) >> 2] | 0) == 0) {
      var $i_0 = $i_0 + 1 | 0;
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $_0 = (HEAP32[$13 + ($6 << 2) >> 2] & (1 << ($d & 31)) - 1 | 0) == 0 & 1;
    __label__ = 8;
    break;
   case 8:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_divisible_ui_p($a, $d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$a + 4 >> 2];
    var $4 = ($2 | 0) == 0;
    if (($d | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = $4 & 1;
    __label__ = 14;
    break;
   case 4:
    if ($4) {
      var $_0 = 1;
      __label__ = 14;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $10 = HEAPU32[$a + 8 >> 2];
    var $13 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($13 | 0) > 9) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $16 = ___gmpn_mod_1($10, $13, $d);
    var $_0 = ($16 | 0) == 0 & 1;
    __label__ = 14;
    break;
   case 7:
    if (($d & 1 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_01 = $d;
      __label__ = 13;
      break;
    }
   case 8:
    var $25 = $d & -$d;
    if ((HEAP32[$10 >> 2] & $25 - 1 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $_0 = 0;
      __label__ = 14;
      break;
    }
   case 9:
    if ($25 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $33 = $25 >>> 0 < 256 ? 1 : 9;
    var $38 = $33;
    __label__ = 12;
    break;
   case 11:
    var $36 = $25 >>> 0 < 16777216 ? 17 : 25;
    var $38 = $36;
    __label__ = 12;
    break;
   case 12:
    var $38;
    var $40 = STRING_TABLE.___gmpn_clz_tab + ($25 >>> ($38 >>> 0)) | 0;
    var $_01 = $d >>> (($38 - 2 + (HEAPU8[$40] & 255) | 0) >>> 0);
    __label__ = 13;
    break;
   case 13:
    var $_01;
    var $47 = ___gmpn_modexact_1c_odd($10, $13, $_01, 0);
    var $_0 = ($47 | 0) == 0 & 1;
    __label__ = 14;
    break;
   case 14:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_divisible_ui_p["X"] = 1;

function ___gmpz_export($data, $countp, $order, $size, $endian, $nail, $z) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $dummy_countp = ($countp | 0) == 0 ? __stackBase__ : $countp;
    var $3 = HEAP32[$z + 4 >> 2];
    if (($3 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$dummy_countp >> 2] = 0;
    var $_0 = $data;
    __label__ = 53;
    break;
   case 4:
    var $9 = ($3 | 0) > -1 ? $3 : -$3 | 0;
    var $11 = HEAPU32[$z + 8 >> 2];
    var $13 = ($size << 3) - $nail | 0;
    var $16 = HEAPU32[$11 + ($9 - 1 << 2) >> 2];
    if ($16 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $20 = $16 >>> 0 < 256 ? 1 : 9;
    var $25 = $20;
    __label__ = 7;
    break;
   case 6:
    var $23 = $16 >>> 0 < 16777216 ? 17 : 25;
    var $25 = $23;
    __label__ = 7;
    break;
   case 7:
    var $25;
    var $27 = STRING_TABLE.___gmpn_clz_tab + ($16 >>> ($25 >>> 0)) | 0;
    var $29 = HEAPU8[$27] & 255;
    var $30 = $9 << 5;
    var $34 = $13 - 34 + $30 + $25 + $29 | 0;
    var $35 = Math.floor(($34 >>> 0) / ($13 >>> 0));
    HEAP32[$dummy_countp >> 2] = $35;
    if (($data | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_01 = $data;
      __label__ = 9;
      break;
    }
   case 8:
    var $38 = HEAP32[___gmp_allocate_func >> 2];
    var $39 = (i64Math.multiply($35, 0, $size, 0), i64Math.result[0]);
    var $40 = FUNCTION_TABLE[$38]($39);
    var $_01 = $40;
    __label__ = 9;
    break;
   case 9:
    var $_01;
    var $_endian = ($endian | 0) == 0 ? -1 : $endian;
    if (($nail | 0) == 0 & ($size | 0) == 4 & ($_01 & 3 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 10:
    var $49 = ($order | 0) == -1;
    var $50 = ($_endian | 0) == -1;
    if ($49 & $50) {
      __label__ = 11;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 11:
    if (($35 | 0) == 0) {
      var $_0 = $_01;
      __label__ = 53;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $54 = $35 - 1 | 0;
    var $55 = $_01;
    var $56 = HEAP32[$11 >> 2];
    if (($54 | 0) == 0) {
      var $__dst_1 = $55;
      var $__x_1 = $56;
      __label__ = 16;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $scevgep57 = $_01 + (((($25 | $30) + 32 + $29 - 34 | 0) >>> 3 & 536870908) - 4) | 0;
    var $__n_0 = $54;
    var $__dst_0 = $55;
    var $_pn = $11;
    var $__x_0 = $56;
    __label__ = 14;
    break;
   case 14:
    var $__x_0;
    var $_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $67 = HEAP32[$__src_0 >> 2];
    var $68 = $__n_0 - 1 | 0;
    if (($68 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $__n_0 = $68;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn = $__src_0;
      var $__x_0 = $67;
      __label__ = 14;
      break;
    }
   case 15:
    var $__dst_1 = $scevgep57;
    var $__x_1 = $67;
    __label__ = 16;
    break;
   case 16:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_0 = $_01;
    __label__ = 53;
    break;
   case 17:
    var $72 = ($order | 0) == 1;
    if ($72 & $50) {
      __label__ = 18;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 18:
    if (($35 | 0) > 0) {
      __label__ = 19;
      break;
    } else {
      var $_0 = $_01;
      __label__ = 53;
      break;
    }
   case 19:
    var $__src2_046 = $11 + ($35 - 1 << 2) | 0;
    var $__i_047 = 0;
    var $__dst1_048 = $_01;
    __label__ = 20;
    break;
   case 20:
    var $__dst1_048;
    var $__i_047;
    var $__src2_046;
    var $78 = HEAP32[$__src2_046 >> 2];
    HEAP32[$__dst1_048 >> 2] = $78;
    var $81 = $__i_047 + 1 | 0;
    if (($81 | 0) < ($35 | 0)) {
      var $__src2_046 = $__src2_046 - 4 | 0;
      var $__i_047 = $81;
      var $__dst1_048 = $__dst1_048 + 4 | 0;
      __label__ = 20;
      break;
    } else {
      var $_0 = $_01;
      __label__ = 53;
      break;
    }
   case 21:
    var $84 = ($_endian | 0) == 1;
    if ($49 & $84) {
      __label__ = 22;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 22:
    if (($35 | 0) > 0) {
      __label__ = 23;
      break;
    } else {
      var $_0 = $_01;
      __label__ = 53;
      break;
    }
   case 23:
    var $__dst3_040 = $_01;
    var $__src4_041 = $11;
    var $__i6_042 = 0;
    __label__ = 24;
    break;
   case 24:
    var $__i6_042;
    var $__src4_041;
    var $__dst3_040;
    var $89 = HEAP32[$__src4_041 >> 2];
    var $90 = _llvm_bswap_i32($89);
    HEAP32[$__dst3_040 >> 2] = $90;
    var $93 = $__i6_042 + 1 | 0;
    if (($93 | 0) < ($35 | 0)) {
      var $__dst3_040 = $__dst3_040 + 4 | 0;
      var $__src4_041 = $__src4_041 + 4 | 0;
      var $__i6_042 = $93;
      __label__ = 24;
      break;
    } else {
      var $_0 = $_01;
      __label__ = 53;
      break;
    }
   case 25:
    if ($72 & $84) {
      __label__ = 26;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 26:
    if (($35 | 0) > 0) {
      __label__ = 27;
      break;
    } else {
      var $_0 = $_01;
      __label__ = 53;
      break;
    }
   case 27:
    var $__dst7_034 = $_01;
    var $__src9_035 = $11 + ($35 - 1 << 2) | 0;
    var $__i10_036 = 0;
    __label__ = 28;
    break;
   case 28:
    var $__i10_036;
    var $__src9_035;
    var $__dst7_034;
    var $101 = HEAP32[$__src9_035 >> 2];
    var $102 = _llvm_bswap_i32($101);
    HEAP32[$__dst7_034 >> 2] = $102;
    var $105 = $__i10_036 + 1 | 0;
    if (($105 | 0) < ($35 | 0)) {
      var $__dst7_034 = $__dst7_034 + 4 | 0;
      var $__src9_035 = $__src9_035 - 4 | 0;
      var $__i10_036 = $105;
      __label__ = 28;
      break;
    } else {
      var $_0 = $_01;
      __label__ = 53;
      break;
    }
   case 29:
    var $108 = $13 >>> 3;
    var $109 = $13 & 7;
    var $111 = (1 << $109) - 1 | 0;
    var $112 = ($_endian | 0) > -1;
    var $113 = -$size | 0;
    var $114 = $112 ? $size : $113;
    var $116 = ($order | 0) < 0 ? $size : $113;
    var $117 = $114 + $116 | 0;
    if (($order | 0) > -1) {
      __label__ = 30;
      break;
    } else {
      var $123 = 0;
      __label__ = 31;
      break;
    }
   case 30:
    var $120 = $35 - 1 | 0;
    var $121 = (i64Math.multiply($120, 0, $size, 0), i64Math.result[0]);
    var $123 = $121;
    __label__ = 31;
    break;
   case 31:
    var $123;
    var $124 = $11 + ($9 << 2) | 0;
    if (($35 | 0) == 0) {
      var $_0 = $_01;
      __label__ = 53;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $_ = $112 ? $size - 1 | 0 : 0;
    var $127 = $_01 + ($123 + $_) | 0;
    var $128 = ($108 | 0) == 0;
    var $129 = ($109 | 0) == 0;
    var $130 = 32 - $109 | 0;
    var $131 = -$_endian | 0;
    var $smax = $108 >>> 0 > 1 ? $108 : 1;
    var $133 = (i64Math.multiply($_endian, 0, $smax, 0), i64Math.result[0]);
    var $134 = -$133 | 0;
    var $limb_028 = 0;
    var $zp_029 = $11;
    var $i_030 = 0;
    var $dp_031 = $127;
    var $lbits_032 = 0;
    __label__ = 33;
    break;
   case 33:
    var $lbits_032;
    var $dp_031;
    var $i_030;
    var $zp_029;
    var $limb_028;
    if ($128) {
      var $limb_1_lcssa = $limb_028;
      var $zp_1_lcssa = $zp_029;
      var $j_0_lcssa = 0;
      var $dp_1_lcssa = $dp_031;
      var $lbits_1_lcssa = $lbits_032;
      __label__ = 41;
      break;
    } else {
      var $limb_112 = $limb_028;
      var $zp_113 = $zp_029;
      var $j_014 = 0;
      var $dp_115 = $dp_031;
      var $lbits_117 = $lbits_032;
      __label__ = 34;
      break;
    }
   case 34:
    var $lbits_117;
    var $dp_115;
    var $j_014;
    var $zp_113;
    var $limb_112;
    if (($lbits_117 | 0) > 7) {
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    HEAP8[$dp_115] = $limb_112 & 255;
    var $lbits_2 = $lbits_117 - 8 | 0;
    var $zp_3 = $zp_113;
    var $limb_2 = $limb_112 >>> 8;
    __label__ = 39;
    break;
   case 36:
    if (($zp_113 | 0) == ($124 | 0)) {
      var $146 = 0;
      var $zp_2 = $zp_113;
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $146 = HEAP32[$zp_113 >> 2];
    var $zp_2 = $zp_113 + 4 | 0;
    __label__ = 38;
    break;
   case 38:
    var $zp_2;
    var $146;
    HEAP8[$dp_115] = ($146 << $lbits_117 | $limb_112) & 255;
    var $lbits_2 = $lbits_117 + 24 | 0;
    var $zp_3 = $zp_2;
    var $limb_2 = $146 >>> ((8 - $lbits_117 | 0) >>> 0);
    __label__ = 39;
    break;
   case 39:
    var $limb_2;
    var $zp_3;
    var $lbits_2;
    var $155 = $j_014 + 1 | 0;
    if (($155 | 0) < ($108 | 0)) {
      var $limb_112 = $limb_2;
      var $zp_113 = $zp_3;
      var $j_014 = $155;
      var $dp_115 = $dp_115 + $131 | 0;
      var $lbits_117 = $lbits_2;
      __label__ = 34;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $limb_1_lcssa = $limb_2;
    var $zp_1_lcssa = $zp_3;
    var $j_0_lcssa = $smax;
    var $dp_1_lcssa = $dp_031 + $134 | 0;
    var $lbits_1_lcssa = $lbits_2;
    __label__ = 41;
    break;
   case 41:
    var $lbits_1_lcssa;
    var $dp_1_lcssa;
    var $j_0_lcssa;
    var $zp_1_lcssa;
    var $limb_1_lcssa;
    if ($129) {
      var $lbits_4_ph = $lbits_1_lcssa;
      var $dp_2_ph = $dp_1_lcssa;
      var $j_1_ph = $j_0_lcssa;
      var $zp_6_ph = $zp_1_lcssa;
      var $limb_4_ph = $limb_1_lcssa;
      __label__ = 48;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    if (($lbits_1_lcssa | 0) < ($109 | 0)) {
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    HEAP8[$dp_1_lcssa] = $limb_1_lcssa & $111 & 255;
    var $lbits_3 = $lbits_1_lcssa - $109 | 0;
    var $zp_5 = $zp_1_lcssa;
    var $limb_3 = $limb_1_lcssa >>> ($109 >>> 0);
    __label__ = 47;
    break;
   case 44:
    if (($zp_1_lcssa | 0) == ($124 | 0)) {
      var $171 = 0;
      var $zp_4 = $zp_1_lcssa;
      __label__ = 46;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    var $171 = HEAP32[$zp_1_lcssa >> 2];
    var $zp_4 = $zp_1_lcssa + 4 | 0;
    __label__ = 46;
    break;
   case 46:
    var $zp_4;
    var $171;
    HEAP8[$dp_1_lcssa] = ($171 << $lbits_1_lcssa | $limb_1_lcssa) & $111 & 255;
    var $lbits_3 = $130 + $lbits_1_lcssa | 0;
    var $zp_5 = $zp_4;
    var $limb_3 = $171 >>> (($109 - $lbits_1_lcssa | 0) >>> 0);
    __label__ = 47;
    break;
   case 47:
    var $limb_3;
    var $zp_5;
    var $lbits_3;
    var $lbits_4_ph = $lbits_3;
    var $dp_2_ph = $dp_1_lcssa + $131 | 0;
    var $j_1_ph = $j_0_lcssa + 1 | 0;
    var $zp_6_ph = $zp_5;
    var $limb_4_ph = $limb_3;
    __label__ = 48;
    break;
   case 48:
    var $limb_4_ph;
    var $zp_6_ph;
    var $j_1_ph;
    var $dp_2_ph;
    var $lbits_4_ph;
    if ($j_1_ph >>> 0 < $size >>> 0) {
      __label__ = 49;
      break;
    } else {
      var $dp_2_lcssa = $dp_2_ph;
      __label__ = 52;
      break;
    }
   case 49:
    var $183 = $j_1_ph - $size | 0;
    var $184 = (i64Math.multiply($_endian, 0, $183, 0), i64Math.result[0]);
    var $j_123 = $j_1_ph;
    var $dp_224 = $dp_2_ph;
    __label__ = 50;
    break;
   case 50:
    var $dp_224;
    var $j_123;
    HEAP8[$dp_224] = 0;
    var $186 = $dp_224 + $131 | 0;
    var $187 = $j_123 + 1 | 0;
    if (($187 | 0) == ($size | 0)) {
      __label__ = 51;
      break;
    } else {
      var $j_123 = $187;
      var $dp_224 = $186;
      __label__ = 50;
      break;
    }
   case 51:
    var $dp_2_lcssa = $dp_2_ph + $184 | 0;
    __label__ = 52;
    break;
   case 52:
    var $dp_2_lcssa;
    var $190 = $i_030 + 1 | 0;
    if ($190 >>> 0 < $35 >>> 0) {
      var $limb_028 = $limb_4_ph;
      var $zp_029 = $zp_6_ph;
      var $i_030 = $190;
      var $dp_031 = $dp_2_lcssa + $117 | 0;
      var $lbits_032 = $lbits_4_ph;
      __label__ = 33;
      break;
    } else {
      var $_0 = $_01;
      __label__ = 53;
      break;
    }
   case 53:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_export["X"] = 1;

function ___gmpz_fac_ui($x, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 348;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $t1 = __stackBase__;
    var $st = __stackBase__ + 12;
    if ($n >>> 0 < 13) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = HEAP32[___gmpz_fac_ui_table + ($n << 2) >> 2];
    var $6 = HEAP32[$x + 8 >> 2];
    HEAP32[$6 >> 2] = $4;
    HEAP32[$x + 4 >> 2] = 1;
    __label__ = 37;
    break;
   case 4:
    var $9 = $n & 65535;
    var $10 = $n >>> 16;
    var $11 = (i64Math.multiply($9, 0, 9547, 0), i64Math.result[0]);
    var $12 = (i64Math.multiply($9, 0, 48220, 0), i64Math.result[0]);
    var $13 = (i64Math.multiply($10, 0, 9547, 0), i64Math.result[0]);
    var $14 = (i64Math.multiply($10, 0, 48220, 0), i64Math.result[0]);
    var $16 = ($11 >>> 16) + $12 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($16, $13);
    var $17 = $uadd.f0;
    var $18 = $uadd.f1;
    var $__x3_0 = $18 ? $14 + 65536 | 0 : $14;
    var $21 = $__x3_0 + ($17 >>> 16) | 0;
    if ($21 >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $25 = $21 >>> 0 < 256 ? 1 : 9;
    var $30 = $25;
    __label__ = 7;
    break;
   case 6:
    var $28 = $21 >>> 0 < 16777216 ? 17 : 25;
    var $30 = $28;
    __label__ = 7;
    break;
   case 7:
    var $30;
    var $32 = STRING_TABLE.___gmpn_clz_tab + ($21 >>> ($30 >>> 0)) | 0;
    var $36 = $30 - 2 + (HEAPU8[$32] & 255) | 0;
    var $37 = $36 & 65535;
    var $38 = $36 >>> 16;
    var $39 = (i64Math.multiply($37, 0, $9, 0), i64Math.result[0]);
    var $40 = (i64Math.multiply($38, 0, $9, 0), i64Math.result[0]);
    var $41 = (i64Math.multiply($37, 0, $10, 0), i64Math.result[0]);
    var $42 = (i64Math.multiply($38, 0, $10, 0), i64Math.result[0]);
    var $45 = $40 + $41 + ($39 >>> 16) | 0;
    var $54 = (($45 << 16 | $39 & 65532) >>> 2 | ($45 >>> 16) + $42 << 30) + 1 | 0;
    if ($n >>> 0 < 33) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $57 = $54 << 2;
    ___gmpz_realloc2($x, $57);
    var $58 = $n - 1 | 0;
    _ap_product_small($x, 2, 1, $58, 4);
    __label__ = 37;
    break;
   case 9:
    if ($n >>> 0 < 65) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $62 = $t1 | 0;
    var $63 = $54 << 1;
    ___gmpz_init2($62, $63);
    var $64 = $54 << 2;
    ___gmpz_realloc2($x, $64);
    var $65 = $n >>> 1;
    var $66 = $65 - 1 | 0;
    _ap_product_small($x, 2, 1, $66, 4);
    var $68 = ($n - 1 | 0) >>> 1;
    _ap_product_small($62, 3, 2, $68, 4);
    ___gmpz_mul($x, $x, $62);
    ___gmpz_clear($62);
    ___gmpz_mul_2exp($x, $x, $65);
    __label__ = 37;
    break;
   case 11:
    if ($n >>> 0 < 129) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $72 = $t1 | 0;
    var $73 = $54 << 1;
    ___gmpz_init2($72, $73);
    var $74 = $54 << 2;
    ___gmpz_realloc2($x, $74);
    var $75 = $st | 0;
    ___gmpz_init2($75, $54);
    var $76 = $54 >>> 1;
    var $77 = $st + 12 | 0;
    ___gmpz_init2($77, $76);
    var $78 = $54 >>> 2;
    var $79 = $st + 24 | 0;
    ___gmpz_init2($79, $78);
    var $80 = $54 >>> 3;
    var $81 = $st + 36 | 0;
    ___gmpz_init2($81, $80);
    var $82 = $n >>> 1;
    var $83 = $st | 0;
    _odd_product(1, $82, $83);
    ___gmpz_set($x, $75);
    _odd_product($82, $n, $83);
    ___gmpz_mul($x, $x, $x);
    var $84 = $n >>> 2;
    var $85 = $84 - 1 | 0;
    _ap_product_small($72, 2, 1, $85, 4);
    ___gmpz_mul($72, $72, $75);
    ___gmpz_clear($75);
    ___gmpz_clear($77);
    ___gmpz_clear($79);
    ___gmpz_clear($81);
    ___gmpz_mul($x, $x, $72);
    ___gmpz_clear($72);
    var $86 = $82 + $84 | 0;
    ___gmpz_mul_2exp($x, $x, $86);
    __label__ = 37;
    break;
   case 13:
    if ($n >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $91 = $n >>> 0 < 256 ? 1 : 9;
    var $96 = $91;
    __label__ = 16;
    break;
   case 15:
    var $94 = $n >>> 0 < 16777216 ? 17 : 25;
    var $96 = $94;
    __label__ = 16;
    break;
   case 16:
    var $96;
    var $98 = STRING_TABLE.___gmpn_clz_tab + ($n >>> ($96 >>> 0)) | 0;
    var $100 = HEAPU8[$98] & 255;
    var $103 = ($96 - 5 + $100 | 0) > 0;
    if ($103) {
      __label__ = 17;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 17:
    var $105 = $96 + $100 - 5 | 0;
    var $i_29 = 0;
    var $z_110 = $54;
    __label__ = 18;
    break;
   case 18:
    var $z_110;
    var $i_29;
    var $107 = $st + $i_29 * 12 | 0;
    ___gmpz_init2($107, $z_110);
    var $109 = $i_29 + 1 | 0;
    if (($109 | 0) == ($105 | 0)) {
      __label__ = 19;
      break;
    } else {
      var $i_29 = $109;
      var $z_110 = $z_110 >>> 1;
      __label__ = 18;
      break;
    }
   case 19:
    var $110 = Math.floor(($n >>> 0) / 3);
    if ($n >>> 0 < 196608) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $114 = $n >>> 0 < 768 ? 1 : 9;
    var $119 = $114;
    __label__ = 22;
    break;
   case 21:
    var $117 = $n >>> 0 < 50331648 ? 17 : 25;
    var $119 = $117;
    __label__ = 22;
    break;
   case 22:
    var $119;
    var $121 = STRING_TABLE.___gmpn_clz_tab + ($110 >>> ($119 >>> 0)) | 0;
    var $125 = $119 - 1 + (HEAPU8[$121] & 255) | 0;
    var $126 = $t1 | 0;
    ___gmpz_init_set_ui($126, 1);
    var $127 = $x + 8 | 0;
    var $128 = $x + 4 | 0;
    var $129 = $st | 0;
    var $130 = $st | 0;
    var $j_08 = 16;
    __label__ = 25;
    break;
   case 23:
    if ($103) {
      __label__ = 24;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 24:
    var $132 = $96 + $100 - 5 | 0;
    var $i_43 = 0;
    __label__ = 35;
    break;
   case 25:
    var $j_08;
    var $134 = HEAP32[$127 >> 2];
    HEAP32[$134 >> 2] = 1;
    HEAP32[$128 >> 2] = 1;
    var $135 = 32 - $j_08 | 0;
    if (($135 | 0) < ($j_08 | 0)) {
      __label__ = 32;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $137 = $j_08 << 1;
    var $i_34 = $135;
    __label__ = 27;
    break;
   case 27:
    var $i_34;
    if (($125 | 0) < ($i_34 | 0)) {
      __label__ = 31;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $141 = $n >>> ($i_34 >>> 0);
    var $143 = $n >>> (($i_34 - 1 | 0) >>> 0);
    _odd_product($141, $143, $129);
    if (($i_34 | 0) == ($j_08 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    ___gmpz_pow_ui($130, $130, ($i_34 | 0) / ($j_08 | 0) & -1);
    __label__ = 30;
    break;
   case 30:
    ___gmpz_mul($x, $x, $130);
    __label__ = 31;
    break;
   case 31:
    var $149 = $i_34 - $137 | 0;
    if (($149 | 0) < ($j_08 | 0)) {
      __label__ = 32;
      break;
    } else {
      var $i_34 = $149;
      __label__ = 27;
      break;
    }
   case 32:
    if (($125 | 0) >= ($j_08 | 0) & ($j_08 | 0) != 1) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    ___gmpz_mul($126, $126, $x);
    ___gmpz_mul($126, $126, $126);
    __label__ = 34;
    break;
   case 34:
    var $155 = $j_08 >> 1;
    if (($155 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      var $j_08 = $155;
      __label__ = 25;
      break;
    }
   case 35:
    var $i_43;
    var $158 = $st + $i_43 * 12 | 0;
    ___gmpz_clear($158);
    var $159 = $i_43 + 1 | 0;
    if (($159 | 0) == ($132 | 0)) {
      __label__ = 36;
      break;
    } else {
      var $i_43 = $159;
      __label__ = 35;
      break;
    }
   case 36:
    ___gmpz_mul($x, $x, $126);
    ___gmpz_clear($126);
    var $162 = $n - ($n >>> 1 & 1431655765) | 0;
    var $166 = ($162 >>> 2 & 858993459) + ($162 & 858993459) | 0;
    var $169 = ($166 >>> 4) + $166 & 252645135;
    var $171 = ($169 >>> 8) + $169 | 0;
    var $175 = $n - (($171 >>> 16) + $171 & 255) | 0;
    ___gmpz_mul_2exp($x, $x, $175);
    __label__ = 37;
    break;
   case 37:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_fac_ui["X"] = 1;

function _ap_product_small($ret, $start, $step, $count, $nm) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($count | 0) == 0) {
      __label__ = 3;
      break;
    } else if (($count | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $3 = HEAP32[$ret + 8 >> 2];
    HEAP32[$3 >> 2] = 1;
    HEAP32[$ret + 4 >> 2] = 1;
    __label__ = 52;
    break;
   case 4:
    var $7 = HEAP32[$ret + 8 >> 2];
    HEAP32[$7 >> 2] = $start;
    HEAP32[$ret + 4 >> 2] = 1;
    __label__ = 52;
    break;
   case 5:
    if (($nm | 0) == 1) {
      __label__ = 6;
      break;
    } else if (($nm | 0) == 2) {
      __label__ = 11;
      break;
    } else if (($nm | 0) == 3) {
      __label__ = 22;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 6:
    var $11 = $ret + 8 | 0;
    var $12 = HEAP32[$11 >> 2];
    HEAP32[$12 >> 2] = $start;
    var $13 = $ret + 4 | 0;
    HEAP32[$13 >> 2] = 1;
    if (($count | 0) == 1) {
      __label__ = 52;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $15 = $ret | 0;
    var $16 = $count - 1 | 0;
    var $a_016 = 0;
    var $start_pn = $start;
    var $18 = 1;
    __label__ = 8;
    break;
   case 8:
    var $18;
    var $start_pn;
    var $a_016;
    var $b_017 = $start_pn + $step | 0;
    var $19 = $18 + 1 | 0;
    if (($19 | 0) > (HEAP32[$15 >> 2] | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $23 = ___gmpz_realloc($ret, $19);
    __label__ = 10;
    break;
   case 10:
    var $25 = HEAP32[$11 >> 2];
    var $26 = ___gmpn_mul_1($25, $25, $18, $b_017);
    var $27 = $25 + ($18 << 2) | 0;
    HEAP32[$27 >> 2] = $26;
    var $30 = (($26 | 0) != 0 & 1) + $18 | 0;
    HEAP32[$13 >> 2] = $30;
    var $31 = $a_016 + 1 | 0;
    if (($31 | 0) == ($16 | 0)) {
      __label__ = 52;
      break;
    } else {
      var $a_016 = $31;
      var $start_pn = $b_017;
      var $18 = $30;
      __label__ = 8;
      break;
    }
   case 11:
    var $33 = $step + $start | 0;
    var $34 = (i64Math.multiply($33, 0, $start, 0), i64Math.result[0]);
    var $35 = $ret + 8 | 0;
    var $36 = HEAP32[$35 >> 2];
    HEAP32[$36 >> 2] = $34;
    var $37 = $ret + 4 | 0;
    HEAP32[$37 >> 2] = 1;
    if (($count | 0) == 2) {
      __label__ = 52;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $40 = $step << 1;
    var $41 = $40 + $start | 0;
    var $42 = $count >>> 1;
    var $a_18 = $42 - 1 | 0;
    if (($a_18 | 0) == 0) {
      var $b_1_lcssa = $41;
      var $67 = 1;
      __label__ = 18;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $44 = $ret | 0;
    var $45 = (i64Math.multiply($42, 0, $step, 0), i64Math.result[0]);
    var $46 = $45 << 1;
    var $b_19 = $41;
    var $a_110 = $a_18;
    var $48 = 1;
    __label__ = 14;
    break;
   case 14:
    var $48;
    var $a_110;
    var $b_19;
    var $49 = $48 + 1 | 0;
    if (($49 | 0) > (HEAP32[$44 >> 2] | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $53 = ___gmpz_realloc($ret, $49);
    __label__ = 16;
    break;
   case 16:
    var $55 = HEAP32[$35 >> 2];
    var $56 = $b_19 + $step | 0;
    var $57 = (i64Math.multiply($56, 0, $b_19, 0), i64Math.result[0]);
    var $58 = ___gmpn_mul_1($55, $55, $48, $57);
    var $59 = $55 + ($48 << 2) | 0;
    HEAP32[$59 >> 2] = $58;
    var $62 = (($58 | 0) != 0 & 1) + $48 | 0;
    HEAP32[$37 >> 2] = $62;
    var $63 = $b_19 + $40 | 0;
    var $a_1 = $a_110 - 1 | 0;
    if (($a_1 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $b_19 = $63;
      var $a_110 = $a_1;
      var $48 = $62;
      __label__ = 14;
      break;
    }
   case 17:
    var $b_1_lcssa = $46 + $start | 0;
    var $67 = $62;
    __label__ = 18;
    break;
   case 18:
    var $67;
    var $b_1_lcssa;
    if (($count & 1 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $71 = $67 + 1 | 0;
    if (($71 | 0) > (HEAP32[$ret >> 2] | 0)) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $76 = ___gmpz_realloc($ret, $71);
    __label__ = 21;
    break;
   case 21:
    var $78 = HEAP32[$35 >> 2];
    var $79 = ___gmpn_mul_1($78, $78, $67, $b_1_lcssa);
    var $80 = $78 + ($67 << 2) | 0;
    HEAP32[$80 >> 2] = $79;
    var $83 = (($79 | 0) != 0 & 1) + $67 | 0;
    HEAP32[$37 >> 2] = $83;
    __label__ = 52;
    break;
   case 22:
    var $85 = ($count | 0) == 2;
    var $86 = $step + $start | 0;
    var $87 = (i64Math.multiply($86, 0, $start, 0), i64Math.result[0]);
    if ($85) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $90 = HEAP32[$ret + 8 >> 2];
    HEAP32[$90 >> 2] = $87;
    HEAP32[$ret + 4 >> 2] = 1;
    __label__ = 52;
    break;
   case 24:
    var $93 = $step << 1;
    var $94 = $93 + $start | 0;
    var $95 = (i64Math.multiply($87, 0, $94, 0), i64Math.result[0]);
    var $96 = $ret + 8 | 0;
    var $97 = HEAP32[$96 >> 2];
    HEAP32[$97 >> 2] = $95;
    var $98 = $ret + 4 | 0;
    HEAP32[$98 >> 2] = 1;
    if (($count | 0) == 3) {
      __label__ = 52;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $101 = (i64Math.multiply($step, 0, 3, 0), i64Math.result[0]);
    var $102 = $101 + $start | 0;
    var $103 = Math.floor(($count >>> 0) / 3);
    var $a_25 = $103 - 1 | 0;
    if (($a_25 | 0) == 0) {
      var $b_2_lcssa = $102;
      var $130 = 1;
      __label__ = 31;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $105 = $ret | 0;
    var $106 = (i64Math.multiply($103, 0, $step, 0), i64Math.result[0]);
    var $107 = (i64Math.multiply($106, 0, 3, 0), i64Math.result[0]);
    var $b_26 = $102;
    var $a_27 = $a_25;
    var $109 = 1;
    __label__ = 27;
    break;
   case 27:
    var $109;
    var $a_27;
    var $b_26;
    var $110 = $109 + 1 | 0;
    if (($110 | 0) > (HEAP32[$105 >> 2] | 0)) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $114 = ___gmpz_realloc($ret, $110);
    __label__ = 29;
    break;
   case 29:
    var $116 = HEAP32[$96 >> 2];
    var $117 = $b_26 + $step | 0;
    var $118 = $b_26 + $93 | 0;
    var $119 = (i64Math.multiply($118, 0, $b_26, 0), i64Math.result[0]);
    var $120 = (i64Math.multiply($119, 0, $117, 0), i64Math.result[0]);
    var $121 = ___gmpn_mul_1($116, $116, $109, $120);
    var $122 = $116 + ($109 << 2) | 0;
    HEAP32[$122 >> 2] = $121;
    var $125 = (($121 | 0) != 0 & 1) + $109 | 0;
    HEAP32[$98 >> 2] = $125;
    var $126 = $b_26 + $101 | 0;
    var $a_2 = $a_27 - 1 | 0;
    if (($a_2 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      var $b_26 = $126;
      var $a_27 = $a_2;
      var $109 = $125;
      __label__ = 27;
      break;
    }
   case 30:
    var $b_2_lcssa = $107 + $start | 0;
    var $130 = $125;
    __label__ = 31;
    break;
   case 31:
    var $130;
    var $b_2_lcssa;
    var $131 = ($count >>> 0) % 3;
    if (($131 | 0) == 2) {
      __label__ = 32;
      break;
    } else if (($131 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      var $b_31 = $b_2_lcssa;
      __label__ = 33;
      break;
    }
   case 32:
    var $132 = $b_2_lcssa + $step | 0;
    var $133 = (i64Math.multiply($132, 0, $b_2_lcssa, 0), i64Math.result[0]);
    var $b_31 = $133;
    __label__ = 33;
    break;
   case 33:
    var $b_31;
    var $135 = $130 + 1 | 0;
    if (($135 | 0) > (HEAP32[$ret >> 2] | 0)) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $140 = ___gmpz_realloc($ret, $135);
    __label__ = 35;
    break;
   case 35:
    var $142 = HEAP32[$96 >> 2];
    var $143 = ___gmpn_mul_1($142, $142, $130, $b_31);
    var $144 = $142 + ($130 << 2) | 0;
    HEAP32[$144 >> 2] = $143;
    var $147 = (($143 | 0) != 0 & 1) + $130 | 0;
    HEAP32[$98 >> 2] = $147;
    __label__ = 52;
    break;
   case 36:
    if (($count | 0) == 2) {
      __label__ = 37;
      break;
    } else if (($count | 0) == 3) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 37:
    var $150 = $step + $start | 0;
    var $151 = (i64Math.multiply($150, 0, $start, 0), i64Math.result[0]);
    var $153 = HEAP32[$ret + 8 >> 2];
    HEAP32[$153 >> 2] = $151;
    HEAP32[$ret + 4 >> 2] = 1;
    __label__ = 52;
    break;
   case 38:
    var $156 = $step + $start | 0;
    var $158 = ($step << 1) + $start | 0;
    var $159 = (i64Math.multiply($156, 0, $start, 0), i64Math.result[0]);
    var $160 = (i64Math.multiply($159, 0, $158, 0), i64Math.result[0]);
    var $162 = HEAP32[$ret + 8 >> 2];
    HEAP32[$162 >> 2] = $160;
    HEAP32[$ret + 4 >> 2] = 1;
    __label__ = 52;
    break;
   case 39:
    var $165 = $step + $start | 0;
    var $166 = $step << 1;
    var $167 = $166 + $start | 0;
    var $168 = (i64Math.multiply($step, 0, 3, 0), i64Math.result[0]);
    var $169 = $168 + $start | 0;
    var $170 = (i64Math.multiply($165, 0, $start, 0), i64Math.result[0]);
    var $171 = (i64Math.multiply($170, 0, $169, 0), i64Math.result[0]);
    var $172 = (i64Math.multiply($171, 0, $167, 0), i64Math.result[0]);
    var $173 = $ret + 8 | 0;
    var $174 = HEAP32[$173 >> 2];
    HEAP32[$174 >> 2] = $172;
    var $175 = $ret + 4 | 0;
    HEAP32[$175 >> 2] = 1;
    if (($count | 0) == 4) {
      __label__ = 52;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $178 = $step << 2;
    var $179 = $178 + $start | 0;
    var $180 = $count >>> 2;
    var $a_320 = $180 - 1 | 0;
    if (($a_320 | 0) == 0) {
      var $b_4_lcssa = $179;
      var $209 = 1;
      __label__ = 46;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $182 = $ret | 0;
    var $183 = (i64Math.multiply($180, 0, $step, 0), i64Math.result[0]);
    var $184 = $183 << 2;
    var $b_421 = $179;
    var $a_322 = $a_320;
    var $186 = 1;
    __label__ = 42;
    break;
   case 42:
    var $186;
    var $a_322;
    var $b_421;
    var $187 = $186 + 1 | 0;
    if (($187 | 0) > (HEAP32[$182 >> 2] | 0)) {
      __label__ = 43;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 43:
    var $191 = ___gmpz_realloc($ret, $187);
    __label__ = 44;
    break;
   case 44:
    var $193 = HEAP32[$173 >> 2];
    var $194 = $b_421 + $step | 0;
    var $195 = $b_421 + $166 | 0;
    var $196 = $b_421 + $168 | 0;
    var $197 = (i64Math.multiply($196, 0, $b_421, 0), i64Math.result[0]);
    var $198 = (i64Math.multiply($197, 0, $195, 0), i64Math.result[0]);
    var $199 = (i64Math.multiply($198, 0, $194, 0), i64Math.result[0]);
    var $200 = ___gmpn_mul_1($193, $193, $186, $199);
    var $201 = $193 + ($186 << 2) | 0;
    HEAP32[$201 >> 2] = $200;
    var $204 = (($200 | 0) != 0 & 1) + $186 | 0;
    HEAP32[$175 >> 2] = $204;
    var $205 = $b_421 + $178 | 0;
    var $a_3 = $a_322 - 1 | 0;
    if (($a_3 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      var $b_421 = $205;
      var $a_322 = $a_3;
      var $186 = $204;
      __label__ = 42;
      break;
    }
   case 45:
    var $b_4_lcssa = $184 + $start | 0;
    var $209 = $204;
    __label__ = 46;
    break;
   case 46:
    var $209;
    var $b_4_lcssa;
    var $210 = $count & 3;
    if (($210 | 0) == 2) {
      __label__ = 47;
      break;
    } else if (($210 | 0) == 3) {
      __label__ = 48;
      break;
    } else if (($210 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      var $b_64 = $b_4_lcssa;
      __label__ = 49;
      break;
    }
   case 47:
    var $211 = $b_4_lcssa + $step | 0;
    var $212 = (i64Math.multiply($211, 0, $b_4_lcssa, 0), i64Math.result[0]);
    var $b_64 = $212;
    __label__ = 49;
    break;
   case 48:
    var $214 = $b_4_lcssa + $step | 0;
    var $215 = $b_4_lcssa + $166 | 0;
    var $216 = (i64Math.multiply($215, 0, $b_4_lcssa, 0), i64Math.result[0]);
    var $217 = (i64Math.multiply($216, 0, $214, 0), i64Math.result[0]);
    var $b_64 = $217;
    __label__ = 49;
    break;
   case 49:
    var $b_64;
    var $218 = $209 + 1 | 0;
    if (($218 | 0) > (HEAP32[$ret >> 2] | 0)) {
      __label__ = 50;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 50:
    var $223 = ___gmpz_realloc($ret, $218);
    __label__ = 51;
    break;
   case 51:
    var $225 = HEAP32[$173 >> 2];
    var $226 = ___gmpn_mul_1($225, $225, $209, $b_64);
    var $227 = $225 + ($209 << 2) | 0;
    HEAP32[$227 >> 2] = $226;
    var $230 = (($226 | 0) != 0 & 1) + $209 | 0;
    HEAP32[$175 >> 2] = $230;
    __label__ = 52;
    break;
   case 52:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_ap_product_small["X"] = 1;

function _odd_product($low, $high, $st) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $low + 1 | 0;
    var $_ = ($1 & 1 | 0) == 0 ? $low + 2 | 0 : $1;
    var $_01 = ($high | 0) == 0 ? 1 : $high;
    var $__01 = $_01 - 1 + ($_01 & 1) | 0;
    if ($__01 >>> 0 < $_ >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = HEAP32[$st + 8 >> 2];
    HEAP32[$10 >> 2] = 1;
    HEAP32[$st + 4 >> 2] = 1;
    __label__ = 19;
    break;
   case 4:
    if (($__01 | 0) == ($_ | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $16 = HEAP32[$st + 8 >> 2];
    HEAP32[$16 >> 2] = $_;
    HEAP32[$st + 4 >> 2] = 1;
    __label__ = 19;
    break;
   case 6:
    if ($__01 >>> 0 < 65538) {
      __label__ = 7;
      break;
    } else {
      var $nm_0 = 1;
      __label__ = 9;
      break;
    }
   case 7:
    if ($__01 >>> 0 < 1628) {
      __label__ = 8;
      break;
    } else {
      var $nm_0 = 2;
      __label__ = 9;
      break;
    }
   case 8:
    var $_2 = $__01 >>> 0 < 260 ? 4 : 3;
    var $nm_0 = $_2;
    __label__ = 9;
    break;
   case 9:
    var $nm_0;
    var $27 = (($__01 - $_ | 0) >>> 1) + 1 | 0;
    if ($27 >>> 0 < 33) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $30 = $st | 0;
    _ap_product_small($30, $_, 2, $27, $nm_0);
    __label__ = 19;
    break;
   case 11:
    if ($27 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $35 = $27 >>> 0 < 256 ? 1 : 9;
    var $40 = $35;
    __label__ = 14;
    break;
   case 13:
    var $38 = $27 >>> 0 < 16777216 ? 17 : 25;
    var $40 = $38;
    __label__ = 14;
    break;
   case 14:
    var $40;
    var $42 = STRING_TABLE.___gmpn_clz_tab + ($27 >>> ($40 >>> 0)) | 0;
    var $46 = $40 - 33 + (HEAPU8[$42] & 255) | 0;
    var $47 = $46 + 27 | 0;
    var $48 = 1 << $47;
    var $49 = $48 << 1;
    var $50 = $48 - 1 | 0;
    if (($50 | 0) > -1) {
      __label__ = 15;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 15:
    var $52 = 5 - $46 | 0;
    var $stn_05 = 0;
    var $stc_06 = 1;
    var $z_07 = $50;
    __label__ = 16;
    break;
   case 16:
    var $z_07;
    var $stc_06;
    var $stn_05;
    var $62 = ($z_07 >>> 8 & 65280 | $z_07 << 24 | $z_07 << 8 & 16711680) + ($z_07 >> 24) | 0;
    var $67 = $62 >>> 4 & 252645135 | $62 << 4 & -252645136;
    var $72 = $67 >>> 2 & 858993459 | $67 << 2 & -858993460;
    var $78 = ($72 >>> 1 & 1431655765 | $72 << 1 & -1431655766) >>> ($52 >>> 0);
    var $79 = $st + $stn_05 * 12 | 0;
    var $83 = ((($78 ^ 2147483647) & $50) << 1) + $_ | 0;
    var $85 = ($78 + $27 | 0) >>> ($47 >>> 0);
    _ap_product_small($79, $83, $49, $85, $nm_0);
    var $86 = $stn_05 + 1 | 0;
    var $87 = $stc_06 + 1 | 0;
    if (($stc_06 & 1 | 0) == 0) {
      var $y_03 = $stc_06;
      var $stn_14 = $86;
      __label__ = 17;
      break;
    } else {
      var $stn_1_lcssa = $86;
      __label__ = 18;
      break;
    }
   case 17:
    var $stn_14;
    var $y_03;
    var $91 = $st + ($stn_14 - 2) * 12 | 0;
    var $92 = $stn_14 - 1 | 0;
    var $93 = $st + $92 * 12 | 0;
    ___gmpz_mul($91, $91, $93);
    var $94 = $y_03 >>> 1;
    if (($94 & 1 | 0) == 0) {
      var $y_03 = $94;
      var $stn_14 = $92;
      __label__ = 17;
      break;
    } else {
      var $stn_1_lcssa = $92;
      __label__ = 18;
      break;
    }
   case 18:
    var $stn_1_lcssa;
    if (($z_07 | 0) > 0) {
      var $stn_05 = $stn_1_lcssa;
      var $stc_06 = $87;
      var $z_07 = $z_07 - 1 | 0;
      __label__ = 16;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_odd_product["X"] = 1;

function ___gmpz_fdiv_q($quot, $dividend, $divisor) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $rem = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $2 = HEAP32[$dividend + 4 >> 2];
    var $4 = HEAPU32[$divisor + 4 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $5 = $rem | 0;
    var $8 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    HEAP32[$rem >> 2] = $8;
    var $10 = $8 << 2;
    if ($10 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $13 = STACKTOP;
    STACKTOP += $10;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $17 = $13;
    __label__ = 5;
    break;
   case 4:
    var $15 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $10);
    var $17 = $15;
    __label__ = 5;
    break;
   case 5:
    var $17;
    HEAP32[$rem + 8 >> 2] = $17;
    ___gmpz_tdiv_qr($quot, $5, $dividend, $divisor);
    if (($4 ^ $2 | 0) < 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    ___gmpz_sub_ui($quot, $quot, 1);
    __label__ = 8;
    break;
   case 8:
    var $27 = HEAP32[$__tmp_marker >> 2];
    if (($27 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmp_tmp_reentrant_free($27);
    __label__ = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fdiv_qr($quot, $rem, $dividend, $divisor) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $temp_divisor = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $2 = HEAPU32[$divisor + 4 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($quot | 0) == ($divisor | 0) | ($rem | 0) == ($divisor | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $divisor;
      __label__ = 7;
      break;
    }
   case 3:
    var $6 = $temp_divisor | 0;
    var $9 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    HEAP32[$temp_divisor >> 2] = $9;
    var $11 = $9 << 2;
    if ($11 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $14 = STACKTOP;
    STACKTOP += $11;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $18 = $14;
    __label__ = 6;
    break;
   case 5:
    var $16 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $11);
    var $18 = $16;
    __label__ = 6;
    break;
   case 6:
    var $18;
    HEAP32[$temp_divisor + 8 >> 2] = $18;
    ___gmpz_set($6, $divisor);
    var $_0 = $6;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    var $24 = HEAP32[$dividend + 4 >> 2] ^ $2;
    ___gmpz_tdiv_qr($quot, $rem, $dividend, $_0);
    if (($24 | 0) < 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmpz_sub_ui($quot, $quot, 1);
    ___gmpz_add($rem, $rem, $_0);
    __label__ = 10;
    break;
   case 10:
    var $31 = HEAP32[$__tmp_marker >> 2];
    if (($31 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($31);
    __label__ = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fdiv_r($rem, $dividend, $divisor) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $temp_divisor = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $2 = HEAPU32[$divisor + 4 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($rem | 0) == ($divisor | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $divisor;
      __label__ = 7;
      break;
    }
   case 3:
    var $5 = $temp_divisor | 0;
    var $8 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    HEAP32[$temp_divisor >> 2] = $8;
    var $10 = $8 << 2;
    if ($10 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $13 = STACKTOP;
    STACKTOP += $10;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $17 = $13;
    __label__ = 6;
    break;
   case 5:
    var $15 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $10);
    var $17 = $15;
    __label__ = 6;
    break;
   case 6:
    var $17;
    HEAP32[$temp_divisor + 8 >> 2] = $17;
    ___gmpz_set($5, $divisor);
    var $_0 = $5;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    ___gmpz_tdiv_r($rem, $dividend, $_0);
    if ((HEAP32[$dividend + 4 >> 2] ^ $2 | 0) < 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    ___gmpz_add($rem, $rem, $_0);
    __label__ = 10;
    break;
   case 10:
    var $30 = HEAP32[$__tmp_marker >> 2];
    if (($30 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($30);
    __label__ = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fdiv_q_ui($quot, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 12;
    break;
   case 6:
    var $10 = ($5 | 0) > -1;
    var $12 = $10 ? $5 : -$5 | 0;
    if (($12 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $17 = ___gmpz_realloc($quot, $12);
    __label__ = 8;
    break;
   case 8:
    var $20 = HEAP32[$quot + 8 >> 2];
    var $22 = HEAP32[$dividend + 8 >> 2];
    var $23 = ___gmpn_divrem_1($20, 0, $22, $12, $divisor);
    if (($23 | 0) != 0 & ($5 | 0) < 0) {
      var $__p_0 = $20;
      __label__ = 9;
      break;
    } else {
      var $rl_0 = $23;
      __label__ = 11;
      break;
    }
   case 9:
    var $__p_0;
    var $28 = HEAP32[$__p_0 >> 2] + 1 | 0;
    HEAP32[$__p_0 >> 2] = $28;
    if (($28 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $rl_0 = $divisor - $23 | 0;
    __label__ = 11;
    break;
   case 11:
    var $rl_0;
    var $38 = $12 - ((HEAP32[$20 + ($12 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $40 = $10 ? $38 : -$38 | 0;
    HEAP32[$quot + 4 >> 2] = $40;
    var $_0 = $rl_0;
    __label__ = 12;
    break;
   case 12:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_fdiv_q_ui["X"] = 1;

function ___gmpz_fdiv_qr_ui($quot, $rem, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 15;
    break;
   case 6:
    var $11 = ($5 | 0) > -1;
    var $13 = $11 ? $5 : -$5 | 0;
    if (($13 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $18 = ___gmpz_realloc($quot, $13);
    __label__ = 8;
    break;
   case 8:
    var $21 = HEAPU32[$quot + 8 >> 2];
    var $23 = HEAP32[$dividend + 8 >> 2];
    var $24 = ___gmpn_divrem_1($21, 0, $23, $13, $divisor);
    if (($24 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    HEAP32[$rem + 4 >> 2] = 0;
    var $rl_1 = 0;
    __label__ = 14;
    break;
   case 10:
    if (($5 | 0) < 0) {
      var $__p_0 = $21;
      __label__ = 11;
      break;
    } else {
      var $rl_0 = $24;
      __label__ = 13;
      break;
    }
   case 11:
    var $__p_0;
    var $32 = HEAP32[$__p_0 >> 2] + 1 | 0;
    HEAP32[$__p_0 >> 2] = $32;
    if (($32 | 0) == 0) {
      var $__p_0 = $__p_0 + 4 | 0;
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $rl_0 = $divisor - $24 | 0;
    __label__ = 13;
    break;
   case 13:
    var $rl_0;
    var $38 = HEAP32[$rem + 8 >> 2];
    HEAP32[$38 >> 2] = $rl_0;
    HEAP32[$rem + 4 >> 2] = ($rl_0 | 0) != 0 & 1;
    var $rl_1 = $rl_0;
    __label__ = 14;
    break;
   case 14:
    var $rl_1;
    var $48 = $13 - ((HEAP32[$21 + ($13 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $50 = $11 ? $48 : -$48 | 0;
    HEAP32[$quot + 4 >> 2] = $50;
    var $_0 = $rl_1;
    __label__ = 15;
    break;
   case 15:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_fdiv_qr_ui["X"] = 1;

function ___gmpz_fdiv_r_ui($rem, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 9;
    break;
   case 6:
    var $12 = ($5 | 0) > -1 ? $5 : -$5 | 0;
    var $14 = HEAP32[$dividend + 8 >> 2];
    var $15 = ___gmpn_mod_1($14, $12, $divisor);
    if (($15 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 9;
    break;
   case 8:
    var $_ = ($5 | 0) < 0 ? $divisor - $15 | 0 : $15;
    var $23 = HEAP32[$rem + 8 >> 2];
    HEAP32[$23 >> 2] = $_;
    HEAP32[$rem + 4 >> 2] = 1;
    var $_0 = $_;
    __label__ = 9;
    break;
   case 9:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fib2_ui($fn, $fnsub1, $n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $n >>> 5;
    var $2 = (i64Math.multiply($1, 0, 23, 0), i64Math.result[0]);
    var $4 = ($2 >>> 5) + 4 | 0;
    if (($4 | 0) > (HEAP32[$fn >> 2] | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $9 = ___gmpz_realloc($fn, $4);
    __label__ = 4;
    break;
   case 4:
    if (($4 | 0) > (HEAP32[$fnsub1 >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $15 = ___gmpz_realloc($fnsub1, $4);
    __label__ = 6;
    break;
   case 6:
    var $18 = HEAP32[$fn + 8 >> 2];
    var $20 = HEAPU32[$fnsub1 + 8 >> 2];
    var $21 = ___gmpn_fib2_ui($18, $20, $n);
    var $24 = $21 - (($n | 0) == 0 & 1) | 0;
    HEAP32[$fn + 4 >> 2] = $24;
    var $31 = $21 - ((HEAP32[$20 + ($21 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    HEAP32[$fnsub1 + 4 >> 2] = $31;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_fib_ui($fn, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if ($n >>> 0 < 48) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = HEAP32[___gmp_fib_table + ($n + 1 << 2) >> 2];
    var $7 = HEAP32[$fn + 8 >> 2];
    HEAP32[$7 >> 2] = $5;
    HEAP32[$fn + 4 >> 2] = ($n | 0) != 0 & 1;
    __label__ = 14;
    break;
   case 4:
    var $12 = $n >>> 1;
    var $13 = $n >>> 6;
    var $14 = (i64Math.multiply($13, 0, 23, 0), i64Math.result[0]);
    var $16 = ($14 >>> 5) + 5 | 0;
    var $18 = $16 << 1 | 1;
    if (($18 | 0) > (HEAP32[$fn >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $23 = ___gmpz_realloc($fn, $18);
    __label__ = 6;
    break;
   case 6:
    var $26 = HEAPU32[$fn + 8 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $27 = $16 << 3;
    if ($27 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $30 = STACKTOP;
    STACKTOP += $27;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $34 = $30;
    __label__ = 9;
    break;
   case 8:
    var $32 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $27);
    var $34 = $32;
    __label__ = 9;
    break;
   case 9:
    var $34;
    var $35 = $34;
    var $36 = $35 + ($16 << 2) | 0;
    var $37 = ___gmpn_fib2_ui($35, $36, $12);
    if (($n & 1 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $41 = ___gmpn_lshift($26, $35, $37, 1);
    var $42 = ___gmpn_add_n($35, $26, $36, $37);
    var $43 = $42 + $41 | 0;
    HEAP32[$35 + ($37 << 2) >> 2] = $43;
    var $47 = (($43 | 0) != 0 & 1) + $37 | 0;
    var $48 = ___gmpn_sub_n($36, $26, $36, $37);
    var $49 = $41 - $48 | 0;
    HEAP32[$35 + ($37 + $16 << 2) >> 2] = $49;
    var $51 = $49 + $37 | 0;
    var $52 = $47 + $51 | 0;
    var $53 = ___gmpn_mul($26, $35, $47, $36, $51);
    var $59 = ($n << 1 & 4 ^ 4) - 2 + HEAP32[$26 >> 2] | 0;
    HEAP32[$26 >> 2] = $59;
    var $c_0 = $53;
    var $size_0 = $52;
    __label__ = 12;
    break;
   case 11:
    var $61 = ___gmpn_lshift($36, $36, $37, 1);
    var $62 = ___gmpn_add_n($36, $36, $35, $37);
    var $63 = $62 + $61 | 0;
    HEAP32[$35 + ($37 + $16 << 2) >> 2] = $63;
    var $67 = (($63 | 0) != 0 & 1) + $37 | 0;
    var $68 = $67 + $37 | 0;
    var $69 = ___gmpn_mul($26, $36, $67, $35, $37);
    var $c_0 = $69;
    var $size_0 = $68;
    __label__ = 12;
    break;
   case 12:
    var $size_0;
    var $c_0;
    var $73 = $size_0 - (($c_0 | 0) == 0 & 1) | 0;
    var $79 = $73 - ((HEAP32[$26 + ($73 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    HEAP32[$fn + 4 >> 2] = $79;
    var $81 = HEAP32[$__tmp_marker >> 2];
    if (($81 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmp_tmp_reentrant_free($81);
    __label__ = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_fib_ui["X"] = 1;

function ___gmpz_gcd($g, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$u + 8 >> 2];
    var $4 = HEAP32[$u + 4 >> 2];
    var $7 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $8 = $v + 8 | 0;
    var $9 = HEAPU32[$8 >> 2];
    var $11 = HEAP32[$v + 4 >> 2];
    var $14 = ($11 | 0) > -1 ? $11 : -$11 | 0;
    if (($7 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 3:
    HEAP32[$g + 4 >> 2] = $14;
    if (($g | 0) == ($v | 0)) {
      __label__ = 83;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ((HEAP32[$g >> 2] | 0) < ($14 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $24 = ___gmpz_realloc($g, $14);
    __label__ = 6;
    break;
   case 6:
    if (($11 | 0) == 0) {
      __label__ = 83;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $28 = $14 - 1 | 0;
    var $30 = HEAP32[$g + 8 >> 2];
    var $31 = HEAP32[$9 >> 2];
    if (($28 | 0) == 0) {
      var $__dst_1 = $30;
      var $__x_1 = $31;
      __label__ = 10;
      break;
    } else {
      var $__n_0 = $28;
      var $__dst_0 = $30;
      var $_pn1 = $9;
      var $__x_0 = $31;
      __label__ = 8;
      break;
    }
   case 8:
    var $__x_0;
    var $_pn1;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $34 = HEAP32[$__src_0 >> 2];
    var $35 = $__n_0 - 1 | 0;
    if (($35 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $__n_0 = $35;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn1 = $__src_0;
      var $__x_0 = $34;
      __label__ = 8;
      break;
    }
   case 9:
    var $__dst_1 = $30 + ($28 << 2) | 0;
    var $__x_1 = $34;
    __label__ = 10;
    break;
   case 10:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 83;
    break;
   case 11:
    if (($14 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 12:
    HEAP32[$g + 4 >> 2] = $7;
    if (($g | 0) == ($u | 0)) {
      __label__ = 83;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    if ((HEAP32[$g >> 2] | 0) < ($7 | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $48 = ___gmpz_realloc($g, $7);
    __label__ = 15;
    break;
   case 15:
    if (($4 | 0) == 0) {
      __label__ = 83;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $52 = $7 - 1 | 0;
    var $54 = HEAP32[$g + 8 >> 2];
    var $55 = HEAP32[$2 >> 2];
    if (($52 | 0) == 0) {
      var $__dst2_1 = $54;
      var $__x4_1 = $55;
      __label__ = 19;
      break;
    } else {
      var $__n1_0 = $52;
      var $__dst2_0 = $54;
      var $_pn = $2;
      var $__x4_0 = $55;
      __label__ = 17;
      break;
    }
   case 17:
    var $__x4_0;
    var $_pn;
    var $__dst2_0;
    var $__n1_0;
    var $__src3_0 = $_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $58 = HEAP32[$__src3_0 >> 2];
    var $59 = $__n1_0 - 1 | 0;
    if (($59 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      var $__n1_0 = $59;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $_pn = $__src3_0;
      var $__x4_0 = $58;
      __label__ = 17;
      break;
    }
   case 18:
    var $__dst2_1 = $54 + ($52 << 2) | 0;
    var $__x4_1 = $58;
    __label__ = 19;
    break;
   case 19:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 83;
    break;
   case 20:
    if (($7 | 0) == 1) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    HEAP32[$g + 4 >> 2] = 1;
    var $66 = HEAP32[$2 >> 2];
    var $67 = ___gmpn_gcd_1($9, $14, $66);
    var $69 = HEAP32[$g + 8 >> 2];
    HEAP32[$69 >> 2] = $67;
    __label__ = 83;
    break;
   case 22:
    if (($14 | 0) == 1) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    HEAP32[$g + 4 >> 2] = 1;
    var $74 = HEAP32[$9 >> 2];
    var $75 = ___gmpn_gcd_1($2, $7, $74);
    var $77 = HEAP32[$g + 8 >> 2];
    HEAP32[$77 >> 2] = $75;
    __label__ = 83;
    break;
   case 24:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $up_0 = $2;
    __label__ = 25;
    break;
   case 25:
    var $up_0;
    var $80 = HEAP32[$up_0 >> 2];
    if (($80 | 0) == 0) {
      var $up_0 = $up_0 + 4 | 0;
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $86 = $up_0 - $2 | 0;
    var $87 = $86 >> 2;
    var $88 = $7 - $87 | 0;
    var $90 = $80 & -$80;
    if ($90 >>> 0 < 65536) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $94 = $90 >>> 0 < 256 ? 1 : 9;
    var $99 = $94;
    __label__ = 29;
    break;
   case 28:
    var $97 = $90 >>> 0 < 16777216 ? 17 : 25;
    var $99 = $97;
    __label__ = 29;
    break;
   case 29:
    var $99;
    var $101 = STRING_TABLE.___gmpn_clz_tab + ($90 >>> ($99 >>> 0)) | 0;
    var $105 = $99 - 2 + (HEAPU8[$101] & 255) | 0;
    var $106 = $88 << 2;
    if ($106 >>> 0 < 65536) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $109 = STACKTOP;
    STACKTOP += $106;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $113 = $109;
    __label__ = 32;
    break;
   case 31:
    var $111 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $106);
    var $113 = $111;
    __label__ = 32;
    break;
   case 32:
    var $113;
    var $114 = $113;
    if (($105 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $117 = ___gmpn_rshift($114, $up_0, $88, $105);
    var $usize_0_ph = $88 - ((HEAP32[$114 + ($88 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 40;
    break;
   case 34:
    if (($7 | 0) == ($87 | 0)) {
      var $usize_0_ph = $88;
      __label__ = 40;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $127 = $88 - 1 | 0;
    var $128 = HEAPU32[$up_0 >> 2];
    if (($127 | 0) == 0) {
      var $__dst6_1 = $114;
      var $__x8_1 = $128;
      __label__ = 39;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $scevgep = $113 + (($7 << 2) - 4 - $86) | 0;
    var $__n5_0 = $127;
    var $__dst6_0 = $114;
    var $up_0_pn = $up_0;
    var $__x8_0 = $128;
    __label__ = 37;
    break;
   case 37:
    var $__x8_0;
    var $up_0_pn;
    var $__dst6_0;
    var $__n5_0;
    var $__src7_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $135 = HEAP32[$__src7_0 >> 2];
    var $136 = $__n5_0 - 1 | 0;
    if (($136 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      var $__n5_0 = $136;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $up_0_pn = $__src7_0;
      var $__x8_0 = $135;
      __label__ = 37;
      break;
    }
   case 38:
    var $__dst6_1 = $scevgep;
    var $__x8_1 = $135;
    __label__ = 39;
    break;
   case 39:
    var $__x8_1;
    var $__dst6_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    var $usize_0_ph = $88;
    __label__ = 40;
    break;
   case 40:
    var $usize_0_ph;
    var $vp_0 = $9;
    __label__ = 41;
    break;
   case 41:
    var $vp_0;
    var $140 = HEAP32[$vp_0 >> 2];
    if (($140 | 0) == 0) {
      var $vp_0 = $vp_0 + 4 | 0;
      __label__ = 41;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $147 = $vp_0 - HEAP32[$8 >> 2] | 0;
    var $148 = $147 >> 2;
    var $149 = $14 - $148 | 0;
    var $151 = $140 & -$140;
    if ($151 >>> 0 < 65536) {
      __label__ = 43;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 43:
    var $155 = $151 >>> 0 < 256 ? 1 : 9;
    var $160 = $155;
    __label__ = 45;
    break;
   case 44:
    var $158 = $151 >>> 0 < 16777216 ? 17 : 25;
    var $160 = $158;
    __label__ = 45;
    break;
   case 45:
    var $160;
    var $162 = STRING_TABLE.___gmpn_clz_tab + ($151 >>> ($160 >>> 0)) | 0;
    var $166 = $160 - 2 + (HEAPU8[$162] & 255) | 0;
    var $167 = $149 << 2;
    if ($167 >>> 0 < 65536) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    var $170 = STACKTOP;
    STACKTOP += $167;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $174 = $170;
    __label__ = 48;
    break;
   case 47:
    var $172 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $167);
    var $174 = $172;
    __label__ = 48;
    break;
   case 48:
    var $174;
    var $175 = $174;
    if (($166 | 0) == 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $178 = ___gmpn_rshift($175, $vp_0, $149, $166);
    var $vsize_0 = $149 - ((HEAP32[$175 + ($149 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 56;
    break;
   case 50:
    if (($14 | 0) == ($148 | 0)) {
      var $vsize_0 = $149;
      __label__ = 56;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    var $188 = $149 - 1 | 0;
    var $189 = HEAPU32[$vp_0 >> 2];
    if (($188 | 0) == 0) {
      var $__x16_1 = $189;
      var $__dst14_1 = $175;
      __label__ = 55;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 52:
    var $scevgep27 = $174 + (($14 << 2) - 4 - $147) | 0;
    var $__x16_0 = $189;
    var $vp_0_pn = $vp_0;
    var $__dst14_0 = $175;
    var $__n13_0 = $188;
    __label__ = 53;
    break;
   case 53:
    var $__n13_0;
    var $__dst14_0;
    var $vp_0_pn;
    var $__x16_0;
    var $__src15_0 = $vp_0_pn + 4 | 0;
    HEAP32[$__dst14_0 >> 2] = $__x16_0;
    var $196 = HEAP32[$__src15_0 >> 2];
    var $197 = $__n13_0 - 1 | 0;
    if (($197 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      var $__x16_0 = $196;
      var $vp_0_pn = $__src15_0;
      var $__dst14_0 = $__dst14_0 + 4 | 0;
      var $__n13_0 = $197;
      __label__ = 53;
      break;
    }
   case 54:
    var $__x16_1 = $196;
    var $__dst14_1 = $scevgep27;
    __label__ = 55;
    break;
   case 55:
    var $__dst14_1;
    var $__x16_1;
    HEAP32[$__dst14_1 >> 2] = $__x16_1;
    var $vsize_0 = $149;
    __label__ = 56;
    break;
   case 56:
    var $vsize_0;
    if (($87 | 0) > ($148 | 0)) {
      var $g_zero_bits_0 = $166;
      var $g_zero_limbs_0 = $148;
      __label__ = 59;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    if (($87 | 0) < ($148 | 0)) {
      var $g_zero_bits_0 = $105;
      var $g_zero_limbs_0 = $87;
      __label__ = 59;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $206 = $105 >>> 0 < $166 >>> 0 ? $105 : $166;
    var $g_zero_bits_0 = $206;
    var $g_zero_limbs_0 = $87;
    __label__ = 59;
    break;
   case 59:
    var $g_zero_limbs_0;
    var $g_zero_bits_0;
    if (($usize_0_ph | 0) < ($vsize_0 | 0)) {
      __label__ = 62;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    if (($usize_0_ph | 0) == ($vsize_0 | 0)) {
      __label__ = 61;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 61:
    var $212 = $usize_0_ph - 1 | 0;
    if (HEAPU32[$114 + ($212 << 2) >> 2] >>> 0 < HEAPU32[$175 + ($212 << 2) >> 2] >>> 0) {
      __label__ = 62;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 62:
    var $219 = ___gmpn_gcd($175, $175, $vsize_0, $114, $usize_0_ph);
    var $223 = $219;
    __label__ = 64;
    break;
   case 63:
    var $221 = ___gmpn_gcd($175, $114, $usize_0_ph, $175, $vsize_0);
    var $223 = $221;
    __label__ = 64;
    break;
   case 64:
    var $223;
    var $224 = $223 + $g_zero_limbs_0 | 0;
    if (($g_zero_bits_0 | 0) == 0) {
      __label__ = 71;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    var $234 = ((HEAPU32[$175 + ($223 - 1 << 2) >> 2] >>> ((32 - $g_zero_bits_0 | 0) >>> 0) | 0) != 0 & 1) + $224 | 0;
    if ((HEAP32[$g >> 2] | 0) < ($234 | 0)) {
      __label__ = 66;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 66:
    var $239 = ___gmpz_realloc($g, $234);
    __label__ = 67;
    break;
   case 67:
    var $_pre = $g + 8 | 0;
    if (($g_zero_limbs_0 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    var $243 = HEAP32[$_pre >> 2];
    _memset($243, 0, $g_zero_limbs_0 << 2, 4);
    __label__ = 69;
    break;
   case 69:
    var $245 = HEAP32[$_pre >> 2];
    var $246 = $245 + ($g_zero_limbs_0 << 2) | 0;
    var $247 = ___gmpn_lshift($246, $175, $223, $g_zero_bits_0);
    if (($247 | 0) == 0) {
      var $gsize_0 = $234;
      __label__ = 81;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $250 = $245 + ($224 << 2) | 0;
    HEAP32[$250 >> 2] = $247;
    var $gsize_0 = $234;
    __label__ = 81;
    break;
   case 71:
    if ((HEAP32[$g >> 2] | 0) < ($224 | 0)) {
      __label__ = 72;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 72:
    var $256 = ___gmpz_realloc($g, $224);
    __label__ = 73;
    break;
   case 73:
    if (($g_zero_limbs_0 | 0) == 0) {
      __label__ = 75;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 74:
    var $261 = HEAP32[$g + 8 >> 2];
    _memset($261, 0, $g_zero_limbs_0 << 2, 4);
    __label__ = 75;
    break;
   case 75:
    if (($223 | 0) == 0) {
      var $gsize_0 = $224;
      __label__ = 81;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    var $266 = $223 - 1 | 0;
    var $268 = HEAP32[$g + 8 >> 2];
    var $269 = $268 + ($g_zero_limbs_0 << 2) | 0;
    var $270 = HEAP32[$175 >> 2];
    if (($266 | 0) == 0) {
      var $__x24_1 = $270;
      var $__dst22_1 = $269;
      __label__ = 80;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    var $274 = $224 - 1 | 0;
    var $__x24_0 = $270;
    var $__src23_0 = $174 + 4 | 0;
    var $__dst22_0 = $269;
    var $__n21_0 = $266;
    __label__ = 78;
    break;
   case 78:
    var $__n21_0;
    var $__dst22_0;
    var $__src23_0;
    var $__x24_0;
    HEAP32[$__dst22_0 >> 2] = $__x24_0;
    var $278 = HEAP32[$__src23_0 >> 2];
    var $279 = $__n21_0 - 1 | 0;
    if (($279 | 0) == 0) {
      __label__ = 79;
      break;
    } else {
      var $__x24_0 = $278;
      var $__src23_0 = $__src23_0 + 4 | 0;
      var $__dst22_0 = $__dst22_0 + 4 | 0;
      var $__n21_0 = $279;
      __label__ = 78;
      break;
    }
   case 79:
    var $__x24_1 = $278;
    var $__dst22_1 = $268 + ($274 << 2) | 0;
    __label__ = 80;
    break;
   case 80:
    var $__dst22_1;
    var $__x24_1;
    HEAP32[$__dst22_1 >> 2] = $__x24_1;
    var $gsize_0 = $224;
    __label__ = 81;
    break;
   case 81:
    var $gsize_0;
    HEAP32[$g + 4 >> 2] = $gsize_0;
    var $283 = HEAP32[$__tmp_marker >> 2];
    if (($283 | 0) == 0) {
      __label__ = 83;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 82:
    ___gmp_tmp_reentrant_free($283);
    __label__ = 83;
    break;
   case 83:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_gcd["X"] = 1;

function ___gmpz_gcd_ui($w, $u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($5 | 0) == 0) {
      var $res_0 = $v;
      __label__ = 17;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($v | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 4:
    if (($w | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($u | 0) == ($w | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($5 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $18 = ___gmpz_realloc($w, $5);
    __label__ = 8;
    break;
   case 8:
    if (($2 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $22 = $5 - 1 | 0;
    var $24 = HEAP32[$w + 8 >> 2];
    var $26 = HEAP32[$u + 8 >> 2];
    var $27 = HEAP32[$26 >> 2];
    if (($22 | 0) == 0) {
      var $__x_1 = $27;
      var $__dst_1 = $24;
      __label__ = 12;
      break;
    } else {
      var $__x_0 = $27;
      var $_pn = $26;
      var $__dst_0 = $24;
      var $__n_0 = $22;
      __label__ = 10;
      break;
    }
   case 10:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $30 = HEAP32[$__src_0 >> 2];
    var $31 = $__n_0 - 1 | 0;
    if (($31 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $30;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $31;
      __label__ = 10;
      break;
    }
   case 11:
    var $__x_1 = $30;
    var $__dst_1 = $24 + ($22 << 2) | 0;
    __label__ = 12;
    break;
   case 12:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    HEAP32[$w + 4 >> 2] = $5;
    __label__ = 14;
    break;
   case 14:
    if (($5 | 0) == 1) {
      __label__ = 15;
      break;
    } else {
      var $_0 = 0;
      __label__ = 19;
      break;
    }
   case 15:
    var $_0 = HEAP32[HEAP32[$u + 8 >> 2] >> 2];
    __label__ = 19;
    break;
   case 16:
    var $44 = HEAP32[$u + 8 >> 2];
    var $45 = ___gmpn_gcd_1($44, $5, $v);
    var $res_0 = $45;
    __label__ = 17;
    break;
   case 17:
    var $res_0;
    if (($w | 0) == 0) {
      var $_0 = $res_0;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $50 = HEAP32[$w + 8 >> 2];
    HEAP32[$50 >> 2] = $res_0;
    HEAP32[$w + 4 >> 2] = ($res_0 | 0) != 0 & 1;
    var $_0 = $res_0;
    __label__ = 19;
    break;
   case 19:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_gcd_ui["X"] = 1;

function ___gmpz_fdiv_ui($dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      var $_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $10 = ($5 | 0) > -1 ? $5 : -$5 | 0;
    var $12 = HEAP32[$dividend + 8 >> 2];
    var $13 = ___gmpn_mod_1($12, $10, $divisor);
    var $rl_0 = ($13 | 0) != 0 & ($5 | 0) < 0 ? $divisor - $13 | 0 : $13;
    var $_0 = $rl_0;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_getlimbn($__gmp_z, $__gmp_n) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($__gmp_n | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      var $__gmp_result_0 = 0;
      __label__ = 5;
      break;
    }
   case 3:
    var $4 = HEAP32[$__gmp_z + 4 >> 2];
    var $7 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    if (($7 | 0) > ($__gmp_n | 0)) {
      __label__ = 4;
      break;
    } else {
      var $__gmp_result_0 = 0;
      __label__ = 5;
      break;
    }
   case 4:
    var $__gmp_result_0 = HEAP32[HEAP32[$__gmp_z + 8 >> 2] + ($__gmp_n << 2) >> 2];
    __label__ = 5;
    break;
   case 5:
    var $__gmp_result_0;
    return $__gmp_result_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_gcdext($g, $s, $t, $a, $b) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 44;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $tmp_ssize = __stackBase__;
    var $stmp = __stackBase__ + 4;
    var $gtmp = __stackBase__ + 16;
    var $__tmp_marker = __stackBase__ + 28;
    var $x = __stackBase__ + 32;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $2 = HEAPU32[$a + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $7 = HEAPU32[$b + 4 >> 2];
    var $10 = ($7 | 0) > -1 ? $7 : -$7 | 0;
    var $12 = HEAPU32[$a + 8 >> 2];
    var $14 = HEAPU32[$b + 8 >> 2];
    if (($5 | 0) > ($10 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($5 | 0) == ($10 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 4:
    var $19 = ___gmpn_cmp($12, $14, $5);
    if (($19 | 0) > 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 5:
    var $22 = $5 << 2;
    var $23 = $22 + 4 | 0;
    if ($23 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $26 = STACKTOP;
    STACKTOP += $23;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $30 = $26;
    __label__ = 8;
    break;
   case 7:
    var $28 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $23);
    var $30 = $28;
    __label__ = 8;
    break;
   case 8:
    var $30;
    var $31 = $30;
    var $32 = $10 << 2;
    var $33 = $32 + 4 | 0;
    if ($33 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $36 = STACKTOP;
    STACKTOP += $33;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $40 = $36;
    __label__ = 11;
    break;
   case 10:
    var $38 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $33);
    var $40 = $38;
    __label__ = 11;
    break;
   case 11:
    var $40;
    var $41 = $40;
    if (($2 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $44 = $5 - 1 | 0;
    var $45 = HEAPU32[$12 >> 2];
    if (($44 | 0) == 0) {
      var $__dst_1 = $31;
      var $__x_1 = $45;
      __label__ = 16;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $scevgep35 = $30 + ($22 - 4) | 0;
    var $__n_0 = $44;
    var $__dst_0 = $31;
    var $_pn3 = $12;
    var $__x_0 = $45;
    __label__ = 14;
    break;
   case 14:
    var $__x_0;
    var $_pn3;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_pn3 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $50 = HEAP32[$__src_0 >> 2];
    var $51 = $__n_0 - 1 | 0;
    if (($51 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $__n_0 = $51;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn3 = $__src_0;
      var $__x_0 = $50;
      __label__ = 14;
      break;
    }
   case 15:
    var $__dst_1 = $scevgep35;
    var $__x_1 = $50;
    __label__ = 16;
    break;
   case 16:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 17;
    break;
   case 17:
    if (($7 | 0) == 0) {
      var $usize_0 = $5;
      var $vsize_0 = $10;
      var $up_0 = $31;
      var $vp_0 = $41;
      var $u_0 = $a;
      var $v_0 = $b;
      var $ss_0 = $s;
      var $tt_0 = $t;
      __label__ = 41;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $57 = $10 - 1 | 0;
    var $58 = HEAP32[$14 >> 2];
    if (($57 | 0) == 0) {
      var $__dst2_1 = $41;
      var $__x4_1 = $58;
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $scevgep38 = $40 + ($32 - 4) | 0;
    var $__n1_0 = $57;
    var $__dst2_0 = $41;
    var $_pn2 = $14;
    var $__x4_0 = $58;
    __label__ = 20;
    break;
   case 20:
    var $__x4_0;
    var $_pn2;
    var $__dst2_0;
    var $__n1_0;
    var $__src3_0 = $_pn2 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $63 = HEAP32[$__src3_0 >> 2];
    var $64 = $__n1_0 - 1 | 0;
    if (($64 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $__n1_0 = $64;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $_pn2 = $__src3_0;
      var $__x4_0 = $63;
      __label__ = 20;
      break;
    }
   case 21:
    var $__dst2_1 = $scevgep38;
    var $__x4_1 = $63;
    __label__ = 22;
    break;
   case 22:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    var $usize_0 = $5;
    var $vsize_0 = $10;
    var $up_0 = $31;
    var $vp_0 = $41;
    var $u_0 = $a;
    var $v_0 = $b;
    var $ss_0 = $s;
    var $tt_0 = $t;
    __label__ = 41;
    break;
   case 23:
    var $68 = $10 << 2;
    var $69 = $68 + 4 | 0;
    if ($69 >>> 0 < 65536) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $72 = STACKTOP;
    STACKTOP += $69;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $76 = $72;
    __label__ = 26;
    break;
   case 25:
    var $74 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $69);
    var $76 = $74;
    __label__ = 26;
    break;
   case 26:
    var $76;
    var $77 = $76;
    var $78 = $5 << 2;
    var $79 = $78 + 4 | 0;
    if ($79 >>> 0 < 65536) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $82 = STACKTOP;
    STACKTOP += $79;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $86 = $82;
    __label__ = 29;
    break;
   case 28:
    var $84 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $79);
    var $86 = $84;
    __label__ = 29;
    break;
   case 29:
    var $86;
    var $87 = $86;
    if (($7 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $90 = $10 - 1 | 0;
    var $91 = HEAPU32[$14 >> 2];
    if (($90 | 0) == 0) {
      var $__dst6_1 = $77;
      var $__x8_1 = $91;
      __label__ = 34;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $scevgep = $76 + ($68 - 4) | 0;
    var $__n5_0 = $90;
    var $__dst6_0 = $77;
    var $_pn1 = $14;
    var $__x8_0 = $91;
    __label__ = 32;
    break;
   case 32:
    var $__x8_0;
    var $_pn1;
    var $__dst6_0;
    var $__n5_0;
    var $__src7_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $96 = HEAP32[$__src7_0 >> 2];
    var $97 = $__n5_0 - 1 | 0;
    if (($97 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      var $__n5_0 = $97;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $_pn1 = $__src7_0;
      var $__x8_0 = $96;
      __label__ = 32;
      break;
    }
   case 33:
    var $__dst6_1 = $scevgep;
    var $__x8_1 = $96;
    __label__ = 34;
    break;
   case 34:
    var $__x8_1;
    var $__dst6_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    __label__ = 35;
    break;
   case 35:
    if (($2 | 0) == 0) {
      var $usize_0 = $10;
      var $vsize_0 = $5;
      var $up_0 = $77;
      var $vp_0 = $87;
      var $u_0 = $b;
      var $v_0 = $a;
      var $ss_0 = $t;
      var $tt_0 = $s;
      __label__ = 41;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $103 = $5 - 1 | 0;
    var $104 = HEAP32[$12 >> 2];
    if (($103 | 0) == 0) {
      var $__x12_1 = $104;
      var $__dst10_1 = $87;
      __label__ = 40;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $scevgep32 = $86 + ($78 - 4) | 0;
    var $__x12_0 = $104;
    var $_pn = $12;
    var $__n9_0 = $103;
    var $__dst10_0 = $87;
    __label__ = 38;
    break;
   case 38:
    var $__dst10_0;
    var $__n9_0;
    var $_pn;
    var $__x12_0;
    var $__src11_0 = $_pn + 4 | 0;
    HEAP32[$__dst10_0 >> 2] = $__x12_0;
    var $109 = HEAP32[$__src11_0 >> 2];
    var $110 = $__n9_0 - 1 | 0;
    if (($110 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      var $__x12_0 = $109;
      var $_pn = $__src11_0;
      var $__n9_0 = $110;
      var $__dst10_0 = $__dst10_0 + 4 | 0;
      __label__ = 38;
      break;
    }
   case 39:
    var $__x12_1 = $109;
    var $__dst10_1 = $scevgep32;
    __label__ = 40;
    break;
   case 40:
    var $__dst10_1;
    var $__x12_1;
    HEAP32[$__dst10_1 >> 2] = $__x12_1;
    var $usize_0 = $10;
    var $vsize_0 = $5;
    var $up_0 = $77;
    var $vp_0 = $87;
    var $u_0 = $b;
    var $v_0 = $a;
    var $ss_0 = $t;
    var $tt_0 = $s;
    __label__ = 41;
    break;
   case 41:
    var $tt_0;
    var $ss_0;
    var $v_0;
    var $u_0;
    var $vp_0;
    var $up_0;
    var $vsize_0;
    var $usize_0;
    var $114 = $usize_0 << 2;
    var $115 = $114 + 4 | 0;
    if ($115 >>> 0 < 65536) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $118 = STACKTOP;
    STACKTOP += $115;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $119 = STACKTOP;
    STACKTOP += $115;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $124 = $119;
    var $_in = $118;
    __label__ = 44;
    break;
   case 43:
    var $121 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $115);
    var $122 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $115);
    var $124 = $122;
    var $_in = $121;
    __label__ = 44;
    break;
   case 44:
    var $_in;
    var $124;
    var $125 = $_in;
    var $126 = $124;
    if (($vsize_0 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 45:
    HEAP32[$126 >> 2] = 1;
    HEAP32[$tmp_ssize >> 2] = 1;
    if (($usize_0 | 0) == 0) {
      var $gsize_0 = 0;
      var $143 = 1;
      __label__ = 53;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $131 = $usize_0 - 1 | 0;
    var $132 = HEAPU32[$up_0 >> 2];
    if (($131 | 0) == 0) {
      var $__x16_1 = $132;
      var $__dst14_1 = $125;
      __label__ = 50;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $scevgep41 = $_in + ($114 - 4) | 0;
    var $__x16_0 = $132;
    var $up_0_pn = $up_0;
    var $__dst14_0 = $125;
    var $__n13_0 = $131;
    __label__ = 48;
    break;
   case 48:
    var $__n13_0;
    var $__dst14_0;
    var $up_0_pn;
    var $__x16_0;
    var $__src15_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst14_0 >> 2] = $__x16_0;
    var $137 = HEAP32[$__src15_0 >> 2];
    var $138 = $__n13_0 - 1 | 0;
    if (($138 | 0) == 0) {
      __label__ = 49;
      break;
    } else {
      var $__x16_0 = $137;
      var $up_0_pn = $__src15_0;
      var $__dst14_0 = $__dst14_0 + 4 | 0;
      var $__n13_0 = $138;
      __label__ = 48;
      break;
    }
   case 49:
    var $__x16_1 = $137;
    var $__dst14_1 = $scevgep41;
    __label__ = 50;
    break;
   case 50:
    var $__dst14_1;
    var $__x16_1;
    HEAP32[$__dst14_1 >> 2] = $__x16_1;
    var $gsize_0_ph = $usize_0;
    __label__ = 52;
    break;
   case 51:
    var $142 = ___gmpn_gcdext($125, $126, $tmp_ssize, $up_0, $usize_0, $vp_0, $vsize_0);
    var $gsize_0_ph = $142;
    __label__ = 52;
    break;
   case 52:
    var $gsize_0_ph;
    var $gsize_0 = $gsize_0_ph;
    var $143 = HEAP32[$tmp_ssize >> 2];
    __label__ = 53;
    break;
   case 53:
    var $143;
    var $gsize_0;
    var $146 = ($143 | 0) > -1 ? $143 : -$143 | 0;
    HEAP32[$gtmp + 8 >> 2] = $125;
    HEAP32[$gtmp + 4 >> 2] = $gsize_0;
    HEAP32[$stmp + 8 >> 2] = $126;
    var $155 = (HEAP32[$u_0 + 4 >> 2] ^ $143 | 0) > -1 ? $146 : -$146 | 0;
    var $156 = $stmp + 4 | 0;
    HEAP32[$156 >> 2] = $155;
    if (($tt_0 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    if ((HEAP32[$v_0 + 4 >> 2] | 0) == 0) {
      __label__ = 55;
      break;
    } else {
      __label__ = 56;
      break;
    }
   case 55:
    HEAP32[$tt_0 + 4 >> 2] = 0;
    __label__ = 60;
    break;
   case 56:
    var $165 = $x | 0;
    var $167 = $usize_0 + 1 + $146 | 0;
    HEAP32[$x >> 2] = $167;
    var $169 = $167 << 2;
    if ($169 >>> 0 < 65536) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 57:
    var $172 = STACKTOP;
    STACKTOP += $169;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $176 = $172;
    __label__ = 59;
    break;
   case 58:
    var $174 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $169);
    var $176 = $174;
    __label__ = 59;
    break;
   case 59:
    var $176;
    HEAP32[$x + 8 >> 2] = $176;
    ___gmpz_mul($165, $stmp, $u_0);
    ___gmpz_sub($165, $gtmp, $165);
    ___gmpz_tdiv_q($tt_0, $165, $v_0);
    __label__ = 60;
    break;
   case 60:
    if (($ss_0 | 0) == 0) {
      __label__ = 70;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 61:
    if ((HEAP32[$ss_0 >> 2] | 0) < ($146 | 0)) {
      __label__ = 62;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 62:
    var $186 = ___gmpz_realloc($ss_0, $146);
    __label__ = 63;
    break;
   case 63:
    var $189 = HEAPU32[$ss_0 + 8 >> 2];
    if (($143 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $192 = $146 - 1 | 0;
    var $193 = HEAP32[$126 >> 2];
    if (($192 | 0) == 0) {
      var $__x21_1 = $193;
      var $__dst19_1 = $189;
      __label__ = 68;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    var $__x21_0 = $193;
    var $__src20_0 = $124 + 4 | 0;
    var $__dst19_0 = $189;
    var $__n18_0 = $192;
    __label__ = 66;
    break;
   case 66:
    var $__n18_0;
    var $__dst19_0;
    var $__src20_0;
    var $__x21_0;
    HEAP32[$__dst19_0 >> 2] = $__x21_0;
    var $200 = HEAP32[$__src20_0 >> 2];
    var $201 = $__n18_0 - 1 | 0;
    if (($201 | 0) == 0) {
      __label__ = 67;
      break;
    } else {
      var $__x21_0 = $200;
      var $__src20_0 = $__src20_0 + 4 | 0;
      var $__dst19_0 = $__dst19_0 + 4 | 0;
      var $__n18_0 = $201;
      __label__ = 66;
      break;
    }
   case 67:
    var $__x21_1 = $200;
    var $__dst19_1 = $189 + ($192 << 2) | 0;
    __label__ = 68;
    break;
   case 68:
    var $__dst19_1;
    var $__x21_1;
    HEAP32[$__dst19_1 >> 2] = $__x21_1;
    __label__ = 69;
    break;
   case 69:
    var $204 = HEAP32[$156 >> 2];
    HEAP32[$ss_0 + 4 >> 2] = $204;
    __label__ = 70;
    break;
   case 70:
    if ((HEAP32[$g >> 2] | 0) < ($gsize_0 | 0)) {
      __label__ = 71;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 71:
    var $211 = ___gmpz_realloc($g, $gsize_0);
    __label__ = 72;
    break;
   case 72:
    var $214 = HEAP32[$g + 8 >> 2];
    if (($gsize_0 | 0) == 0) {
      __label__ = 78;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $217 = $gsize_0 - 1 | 0;
    var $218 = HEAP32[$125 >> 2];
    if (($217 | 0) == 0) {
      var $__x25_1 = $218;
      var $__dst23_1 = $214;
      __label__ = 77;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 74:
    var $__x25_0 = $218;
    var $__src24_0 = $_in + 4 | 0;
    var $__dst23_0 = $214;
    var $__n22_0 = $217;
    __label__ = 75;
    break;
   case 75:
    var $__n22_0;
    var $__dst23_0;
    var $__src24_0;
    var $__x25_0;
    HEAP32[$__dst23_0 >> 2] = $__x25_0;
    var $225 = HEAP32[$__src24_0 >> 2];
    var $226 = $__n22_0 - 1 | 0;
    if (($226 | 0) == 0) {
      __label__ = 76;
      break;
    } else {
      var $__x25_0 = $225;
      var $__src24_0 = $__src24_0 + 4 | 0;
      var $__dst23_0 = $__dst23_0 + 4 | 0;
      var $__n22_0 = $226;
      __label__ = 75;
      break;
    }
   case 76:
    var $__x25_1 = $225;
    var $__dst23_1 = $214 + ($217 << 2) | 0;
    __label__ = 77;
    break;
   case 77:
    var $__dst23_1;
    var $__x25_1;
    HEAP32[$__dst23_1 >> 2] = $__x25_1;
    __label__ = 78;
    break;
   case 78:
    HEAP32[$g + 4 >> 2] = $gsize_0;
    var $230 = HEAP32[$__tmp_marker >> 2];
    if (($230 | 0) == 0) {
      __label__ = 80;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 79:
    ___gmp_tmp_reentrant_free($230);
    __label__ = 80;
    break;
   case 80:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_gcdext["X"] = 1;

function ___gmpz_hamdist($u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $4 = HEAP32[$v + 4 >> 2];
    var $6 = HEAP32[$u + 8 >> 2];
    var $8 = HEAP32[$v + 8 >> 2];
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 3:
    if (($4 | 0) < 0) {
      var $_0 = -1;
      __label__ = 24;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $13 = ($2 | 0) < ($4 | 0);
    var $_ = $13 ? $2 : $4;
    var $_1 = $13 ? $4 : $2;
    var $_3 = $13 ? $8 : $6;
    if (($_ | 0) == 0) {
      var $count_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $_2 = $13 ? $6 : $8;
    var $16 = ___gmpn_hamdist($_3, $_2, $_);
    var $count_0 = $16;
    __label__ = 6;
    break;
   case 6:
    var $count_0;
    if (($_1 | 0) == ($_ | 0)) {
      var $_0 = $count_0;
      __label__ = 24;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $20 = $_1 - $_ | 0;
    var $21 = $_3 + ($_ << 2) | 0;
    var $22 = ___gmpn_popcount($21, $20);
    var $_0 = $22 + $count_0 | 0;
    __label__ = 24;
    break;
   case 8:
    if (($4 | 0) > -1) {
      var $_0 = -1;
      __label__ = 24;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $up_1 = $6;
    var $vp_1 = $8;
    var $usize_1 = -$2 | 0;
    var $vsize_1 = -$4 | 0;
    __label__ = 10;
    break;
   case 10:
    var $vsize_1;
    var $usize_1;
    var $vp_1;
    var $up_1;
    var $30 = $usize_1 - 1 | 0;
    var $31 = $vsize_1 - 1 | 0;
    var $32 = $up_1 + 4 | 0;
    var $33 = HEAP32[$up_1 >> 2];
    var $34 = $vp_1 + 4 | 0;
    var $35 = HEAP32[$vp_1 >> 2];
    if (($33 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $vlimb_0 = $35;
      var $up_2 = $32;
      var $vp_2 = $34;
      var $usize_2 = $30;
      var $vsize_2 = $31;
      var $ulimb_0 = $33;
      __label__ = 12;
      break;
    }
   case 11:
    if (($35 | 0) == 0) {
      var $up_1 = $32;
      var $vp_1 = $34;
      var $usize_1 = $30;
      var $vsize_1 = $31;
      __label__ = 10;
      break;
    } else {
      var $vlimb_0 = 0;
      var $up_2 = $34;
      var $vp_2 = $32;
      var $usize_2 = $31;
      var $vsize_2 = $30;
      var $ulimb_0 = $35;
      __label__ = 12;
      break;
    }
   case 12:
    var $ulimb_0;
    var $vsize_2;
    var $usize_2;
    var $vp_2;
    var $up_2;
    var $vlimb_0;
    var $42 = -$vlimb_0 ^ -$ulimb_0;
    var $45 = $42 - ($42 >>> 1 & 1431655765) | 0;
    var $49 = ($45 >>> 2 & 858993459) + ($45 & 858993459) | 0;
    var $52 = ($49 >>> 4) + $49 & 252645135;
    var $54 = ($52 >>> 8) + $52 | 0;
    var $57 = ($54 >>> 16) + $54 & 255;
    if (($vlimb_0 | 0) == 0) {
      var $vp_3 = $vp_2;
      var $vsize_3 = $vsize_2;
      __label__ = 13;
      break;
    } else {
      var $up_5 = $up_2;
      var $vp_4 = $vp_2;
      var $usize_5 = $usize_2;
      var $vsize_4 = $vsize_2;
      var $count_3 = $57;
      __label__ = 19;
      break;
    }
   case 13:
    var $vsize_3;
    var $vp_3;
    var $59 = $vsize_3 - 1 | 0;
    var $60 = $vp_3 + 4 | 0;
    var $61 = HEAPU32[$vp_3 >> 2];
    if (($61 | 0) == 0) {
      var $vp_3 = $60;
      var $vsize_3 = $59;
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $65 = $vsize_2 - $59 - 1 | 0;
    var $67 = ($65 << 5) + $57 | 0;
    var $69 = ($65 | 0) < ($usize_2 | 0) ? $65 : $usize_2;
    if (($69 | 0) == 0) {
      var $up_3 = $up_2;
      var $usize_3 = $usize_2;
      var $count_2 = $67;
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $72 = ___gmpn_popcount($up_2, $69);
    var $up_3 = $up_2 + ($69 << 2) | 0;
    var $usize_3 = $usize_2 - $69 | 0;
    var $count_2 = $67 - $72 | 0;
    __label__ = 16;
    break;
   case 16:
    var $count_2;
    var $usize_3;
    var $up_3;
    var $77 = $61 - 1 | 0;
    if (($usize_3 | 0) == 0) {
      var $vlimb_1 = $77;
      var $up_4 = $up_3;
      var $usize_4 = 0;
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $vlimb_1 = HEAP32[$up_3 >> 2] ^ $77;
    var $up_4 = $up_3 + 4 | 0;
    var $usize_4 = $usize_3 - 1 | 0;
    __label__ = 18;
    break;
   case 18:
    var $usize_4;
    var $up_4;
    var $vlimb_1;
    var $87 = $vlimb_1 - ($vlimb_1 >>> 1 & 1431655765) | 0;
    var $91 = ($87 >>> 2 & 858993459) + ($87 & 858993459) | 0;
    var $94 = ($91 >>> 4) + $91 & 252645135;
    var $96 = ($94 >>> 8) + $94 | 0;
    var $up_5 = $up_4;
    var $vp_4 = $60;
    var $usize_5 = $usize_4;
    var $vsize_4 = $59;
    var $count_3 = (($96 >>> 16) + $96 & 255) + $count_2 | 0;
    __label__ = 19;
    break;
   case 19:
    var $count_3;
    var $vsize_4;
    var $usize_5;
    var $vp_4;
    var $up_5;
    var $103 = ($usize_5 | 0) < ($vsize_4 | 0) ? $usize_5 : $vsize_4;
    if (($103 | 0) == 0) {
      var $up_6 = $up_5;
      var $vp_5 = $vp_4;
      var $usize_6 = $usize_5;
      var $vsize_5 = $vsize_4;
      var $count_4 = $count_3;
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $106 = ___gmpn_hamdist($up_5, $vp_4, $103);
    var $up_6 = $up_5 + ($103 << 2) | 0;
    var $vp_5 = $vp_4 + ($103 << 2) | 0;
    var $usize_6 = $usize_5 - $103 | 0;
    var $vsize_5 = $vsize_4 - $103 | 0;
    var $count_4 = $106 + $count_3 | 0;
    __label__ = 21;
    break;
   case 21:
    var $count_4;
    var $vsize_5;
    var $usize_6;
    var $vp_5;
    var $up_6;
    if (($usize_6 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      var $up_7 = $up_6;
      var $usize_7 = $usize_6;
      __label__ = 22;
      break;
    }
   case 22:
    var $usize_7;
    var $up_7;
    var $115 = ___gmpn_popcount($up_7, $usize_7);
    var $_0 = $115 + $count_4 | 0;
    __label__ = 24;
    break;
   case 23:
    if (($vsize_5 | 0) == 0) {
      var $_0 = $count_4;
      __label__ = 24;
      break;
    } else {
      var $up_7 = $vp_5;
      var $usize_7 = $vsize_5;
      __label__ = 22;
      break;
    }
   case 24:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_hamdist["X"] = 1;

function ___gmpz_import($z, $count, $order, $size, $endian, $nail, $data) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = ($size << 3) - $nail | 0;
    var $3 = (i64Math.multiply($2, 0, $count, 0), i64Math.result[0]);
    var $5 = ($3 + 31 | 0) >>> 5;
    if (($5 | 0) > (HEAP32[$z >> 2] | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = ___gmpz_realloc($z, $5);
    __label__ = 4;
    break;
   case 4:
    var $12 = $z + 8 | 0;
    var $13 = HEAPU32[$12 >> 2];
    var $_endian = ($endian | 0) == 0 ? -1 : $endian;
    if (($nail | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 5:
    var $20 = ($size | 0) == 4;
    var $or_cond = ($order | 0) == -1 & $20;
    var $21 = ($_endian | 0) == -1;
    var $22 = ($data & 3 | 0) == 0;
    if ($or_cond & $21 & $22) {
      __label__ = 6;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 6:
    if (($count | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $26 = $count - 1 | 0;
    var $28 = HEAP32[$data >> 2];
    if (($26 | 0) == 0) {
      var $__dst_1 = $13;
      var $__x_1 = $28;
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $__n_0 = $26;
    var $__dst_0 = $13;
    var $__src_0 = $data + 4 | 0;
    var $__x_0 = $28;
    __label__ = 9;
    break;
   case 9:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $35 = HEAP32[$__src_0 >> 2];
    var $36 = $__n_0 - 1 | 0;
    if (($36 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $__n_0 = $36;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $35;
      __label__ = 9;
      break;
    }
   case 10:
    var $__dst_1 = $13 + ($26 << 2) | 0;
    var $__x_1 = $35;
    __label__ = 11;
    break;
   case 11:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 35;
    break;
   case 12:
    if ($or_cond & ($_endian | 0) == 1 & $22) {
      __label__ = 13;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 13:
    if (($count | 0) > 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 14:
    var $__i_033 = 0;
    var $__src2_034 = $data;
    var $__dst1_035 = $13;
    __label__ = 15;
    break;
   case 15:
    var $__dst1_035;
    var $__src2_034;
    var $__i_033;
    var $45 = HEAP32[$__src2_034 >> 2];
    var $46 = _llvm_bswap_i32($45);
    HEAP32[$__dst1_035 >> 2] = $46;
    var $49 = $__i_033 + 1 | 0;
    if (($49 | 0) == ($count | 0)) {
      __label__ = 35;
      break;
    } else {
      var $__i_033 = $49;
      var $__src2_034 = $__src2_034 + 4 | 0;
      var $__dst1_035 = $__dst1_035 + 4 | 0;
      __label__ = 15;
      break;
    }
   case 16:
    if (($order | 0) == 1 & $20 & $21 & $22) {
      __label__ = 17;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 17:
    if (($count | 0) > 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 18:
    var $__src5_027 = $data + ($count - 1 << 2) | 0;
    var $__dst3_028 = $13;
    var $__i6_029 = 0;
    __label__ = 19;
    break;
   case 19:
    var $__i6_029;
    var $__dst3_028;
    var $__src5_027;
    var $57 = HEAP32[$__src5_027 >> 2];
    HEAP32[$__dst3_028 >> 2] = $57;
    var $60 = $__i6_029 + 1 | 0;
    if (($60 | 0) == ($count | 0)) {
      __label__ = 35;
      break;
    } else {
      var $__src5_027 = $__src5_027 - 4 | 0;
      var $__dst3_028 = $__dst3_028 + 4 | 0;
      var $__i6_029 = $60;
      __label__ = 19;
      break;
    }
   case 20:
    var $62 = $2 >>> 3;
    var $63 = $2 & 7;
    var $65 = (1 << $63) - 1 | 0;
    var $67 = ($2 + 7 | 0) >>> 3;
    var $68 = ($_endian | 0) > -1;
    var $70 = $68 ? $67 : -$67 | 0;
    var $73 = ($order | 0) < 0 ? $size : -$size | 0;
    var $74 = $70 + $73 | 0;
    if (($order | 0) > -1) {
      __label__ = 21;
      break;
    } else {
      var $80 = 0;
      __label__ = 22;
      break;
    }
   case 21:
    var $77 = $count - 1 | 0;
    var $78 = (i64Math.multiply($77, 0, $size, 0), i64Math.result[0]);
    var $80 = $78;
    __label__ = 22;
    break;
   case 22:
    var $80;
    if (($count | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $_ = $68 ? $size - 1 | 0 : 0;
    var $83 = $data + ($80 + $_) | 0;
    var $84 = ($62 | 0) == 0;
    var $85 = ($63 | 0) == 0;
    var $86 = -$_endian | 0;
    var $87 = (i64Math.multiply($_endian, 0, $62, 0), i64Math.result[0]);
    var $88 = -$87 | 0;
    var $limb_018 = 0;
    var $zp_019 = $13;
    var $i_020 = 0;
    var $dp_021 = $83;
    var $lbits_022 = 0;
    __label__ = 24;
    break;
   case 24:
    var $lbits_022;
    var $dp_021;
    var $i_020;
    var $zp_019;
    var $limb_018;
    if ($84) {
      var $limb_1_lcssa = $limb_018;
      var $zp_1_lcssa = $zp_019;
      var $dp_1_lcssa = $dp_021;
      var $lbits_1_lcssa = $lbits_022;
      __label__ = 29;
      break;
    } else {
      var $limb_110 = $limb_018;
      var $zp_111 = $zp_019;
      var $j_012 = 0;
      var $dp_113 = $dp_021;
      var $lbits_114 = $lbits_022;
      __label__ = 25;
      break;
    }
   case 25:
    var $lbits_114;
    var $dp_113;
    var $j_012;
    var $zp_111;
    var $limb_110;
    var $90 = HEAPU8[$dp_113] & 255;
    var $91 = $dp_113 + $86 | 0;
    var $93 = $90 << $lbits_114 | $limb_110;
    var $94 = $lbits_114 + 8 | 0;
    if (($94 | 0) > 31) {
      __label__ = 26;
      break;
    } else {
      var $lbits_2 = $94;
      var $zp_2 = $zp_111;
      var $limb_2 = $93;
      __label__ = 27;
      break;
    }
   case 26:
    HEAP32[$zp_111 >> 2] = $93;
    var $lbits_2 = $lbits_114 - 24 | 0;
    var $zp_2 = $zp_111 + 4 | 0;
    var $limb_2 = $90 >>> ((32 - $lbits_114 | 0) >>> 0);
    __label__ = 27;
    break;
   case 27:
    var $limb_2;
    var $zp_2;
    var $lbits_2;
    var $102 = $j_012 + 1 | 0;
    if ($102 >>> 0 < $62 >>> 0) {
      var $limb_110 = $limb_2;
      var $zp_111 = $zp_2;
      var $j_012 = $102;
      var $dp_113 = $91;
      var $lbits_114 = $lbits_2;
      __label__ = 25;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $limb_1_lcssa = $limb_2;
    var $zp_1_lcssa = $zp_2;
    var $dp_1_lcssa = $dp_021 + $88 | 0;
    var $lbits_1_lcssa = $lbits_2;
    __label__ = 29;
    break;
   case 29:
    var $lbits_1_lcssa;
    var $dp_1_lcssa;
    var $zp_1_lcssa;
    var $limb_1_lcssa;
    if ($85) {
      var $lbits_3 = $lbits_1_lcssa;
      var $dp_2 = $dp_1_lcssa;
      var $zp_3 = $zp_1_lcssa;
      var $limb_3 = $limb_1_lcssa;
      __label__ = 32;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $108 = HEAPU8[$dp_1_lcssa] & 255 & $65;
    var $109 = $dp_1_lcssa + $86 | 0;
    var $111 = $108 << $lbits_1_lcssa | $limb_1_lcssa;
    var $112 = $lbits_1_lcssa + $63 | 0;
    if (($112 | 0) > 31) {
      __label__ = 31;
      break;
    } else {
      var $lbits_3 = $112;
      var $dp_2 = $109;
      var $zp_3 = $zp_1_lcssa;
      var $limb_3 = $111;
      __label__ = 32;
      break;
    }
   case 31:
    HEAP32[$zp_1_lcssa >> 2] = $111;
    var $116 = $112 - 32 | 0;
    var $lbits_3 = $116;
    var $dp_2 = $109;
    var $zp_3 = $zp_1_lcssa + 4 | 0;
    var $limb_3 = $108 >>> (($63 - $116 | 0) >>> 0);
    __label__ = 32;
    break;
   case 32:
    var $limb_3;
    var $zp_3;
    var $dp_2;
    var $lbits_3;
    var $120 = $dp_2 + $74 | 0;
    var $121 = $i_020 + 1 | 0;
    if (($121 | 0) == ($count | 0)) {
      __label__ = 33;
      break;
    } else {
      var $limb_018 = $limb_3;
      var $zp_019 = $zp_3;
      var $i_020 = $121;
      var $dp_021 = $120;
      var $lbits_022 = $lbits_3;
      __label__ = 24;
      break;
    }
   case 33:
    if (($lbits_3 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    HEAP32[$zp_3 >> 2] = $limb_3;
    __label__ = 35;
    break;
   case 35:
    var $124 = HEAP32[$12 >> 2];
    var $zsize_0 = $5;
    __label__ = 36;
    break;
   case 36:
    var $zsize_0;
    if (($zsize_0 | 0) > 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    var $128 = $zsize_0 - 1 | 0;
    if ((HEAP32[$124 + ($128 << 2) >> 2] | 0) == 0) {
      var $zsize_0 = $128;
      __label__ = 36;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    HEAP32[$z + 4 >> 2] = $zsize_0;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_import["X"] = 1;

function ___gmpz_inp_raw($x, $fp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $csize_bytes = __stackBase__;
    var $_fp = ($fp | 0) == 0 ? HEAP32[_stdin >> 2] : $fp;
    var $3 = $csize_bytes | 0;
    var $4 = _fread($3, 4, 1, $_fp);
    if (($4 | 0) == 1) {
      __label__ = 3;
      break;
    } else {
      var $_0 = 0;
      __label__ = 13;
      break;
    }
   case 3:
    var $23 = (HEAPU8[$csize_bytes + 1 | 0] & 255) << 16 | (HEAPU8[$3] & 255) << 24 | HEAPU8[$csize_bytes + 3 | 0] & 255 | (HEAPU8[$csize_bytes + 2 | 0] & 255) << 8;
    var $24 = ($23 | 0) > -1;
    var $26 = $24 ? $23 : -$23 | 0;
    var $29 = (($26 << 3) + 31 | 0) >>> 5;
    if (($29 | 0) == 0) {
      var $abs_xsize_1 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($29 | 0) > (HEAP32[$x >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $36 = ___gmpz_realloc($x, $29);
    __label__ = 6;
    break;
   case 6:
    var $39 = HEAPU32[$x + 8 >> 2];
    HEAP32[$39 >> 2] = 0;
    var $43 = $39 + ($29 << 2) + -$26 | 0;
    var $44 = _fread($43, $26, 1, $_fp);
    if (($44 | 0) == 1) {
      __label__ = 7;
      break;
    } else {
      var $_0 = 0;
      __label__ = 13;
      break;
    }
   case 7:
    var $48 = ($29 + 1 | 0) >>> 1;
    if (($48 | 0) == 0) {
      var $abs_xsize_0 = $29;
      __label__ = 10;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $i_02 = 0;
    var $sp_03 = $39;
    var $ep_04 = $39 + ($29 - 1 << 2) | 0;
    __label__ = 9;
    break;
   case 9:
    var $ep_04;
    var $sp_03;
    var $i_02;
    var $52 = HEAP32[$ep_04 >> 2];
    var $53 = _llvm_bswap_i32($52);
    var $54 = HEAP32[$sp_03 >> 2];
    var $55 = _llvm_bswap_i32($54);
    HEAP32[$sp_03 >> 2] = $53;
    HEAP32[$ep_04 >> 2] = $55;
    var $58 = $i_02 + 1 | 0;
    if (($58 | 0) < ($48 | 0)) {
      var $i_02 = $58;
      var $sp_03 = $sp_03 + 4 | 0;
      var $ep_04 = $ep_04 - 4 | 0;
      __label__ = 9;
      break;
    } else {
      var $abs_xsize_0 = $29;
      __label__ = 10;
      break;
    }
   case 10:
    var $abs_xsize_0;
    if (($abs_xsize_0 | 0) > 0) {
      __label__ = 11;
      break;
    } else {
      var $abs_xsize_1 = $abs_xsize_0;
      __label__ = 12;
      break;
    }
   case 11:
    var $62 = $abs_xsize_0 - 1 | 0;
    if ((HEAP32[$39 + ($62 << 2) >> 2] | 0) == 0) {
      var $abs_xsize_0 = $62;
      __label__ = 10;
      break;
    } else {
      var $abs_xsize_1 = $abs_xsize_0;
      __label__ = 12;
      break;
    }
   case 12:
    var $abs_xsize_1;
    var $67 = $24 ? $abs_xsize_1 : -$abs_xsize_1 | 0;
    HEAP32[$x + 4 >> 2] = $67;
    var $_0 = $26 + 4 | 0;
    __label__ = 13;
    break;
   case 13:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_inp_raw["X"] = 1;

function ___gmpz_invert($inverse, $x, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $gcd = __stackBase__;
    var $tmp = __stackBase__ + 12;
    var $__tmp_marker = __stackBase__ + 24;
    var $2 = HEAP32[$x + 4 >> 2];
    var $3 = $n + 4 | 0;
    var $4 = HEAP32[$3 >> 2];
    var $7 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $10 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $12 = ($7 | 0) > ($10 | 0) ? $7 : $10;
    var $13 = $12 + 1 | 0;
    if (($7 | 0) == 0) {
      var $_0 = 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($10 | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    if ((HEAP32[HEAP32[$n + 8 >> 2] >> 2] | 0) == 1) {
      var $_0 = 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $23 = $gcd | 0;
    HEAP32[$gcd >> 2] = $13;
    var $25 = $13 << 2;
    if ($25 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $28 = STACKTOP;
    STACKTOP += $25;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $30 = $gcd + 8 | 0;
    HEAP32[$30 >> 2] = $28;
    var $31 = $tmp | 0;
    HEAP32[$tmp >> 2] = $13;
    var $33 = STACKTOP;
    STACKTOP += $25;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $44 = $33;
    var $43 = $30;
    var $42 = $31;
    __label__ = 8;
    break;
   case 7:
    var $35 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $25);
    var $36 = $35;
    var $37 = $gcd + 8 | 0;
    HEAP32[$37 >> 2] = $36;
    var $38 = $tmp | 0;
    HEAP32[$tmp >> 2] = $13;
    var $40 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $25);
    var $44 = $40;
    var $43 = $37;
    var $42 = $38;
    __label__ = 8;
    break;
   case 8:
    var $42;
    var $43;
    var $44;
    HEAP32[$tmp + 8 >> 2] = $44;
    ___gmpz_gcdext($23, $42, 0, $x, $n);
    if ((HEAP32[$gcd + 4 >> 2] | 0) == 1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    if ((HEAP32[HEAP32[$43 >> 2] >> 2] | 0) == 1) {
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $54 = HEAP32[$__tmp_marker >> 2];
    if (($54 | 0) == 0) {
      var $_0 = 0;
      __label__ = 19;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($54);
    var $_0 = 0;
    __label__ = 19;
    break;
   case 12:
    if ((HEAP32[$tmp + 4 >> 2] | 0) < 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 13:
    if ((HEAP32[$3 >> 2] | 0) < 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    ___gmpz_sub($inverse, $42, $n);
    __label__ = 17;
    break;
   case 15:
    ___gmpz_add($inverse, $42, $n);
    __label__ = 17;
    break;
   case 16:
    ___gmpz_set($inverse, $42);
    __label__ = 17;
    break;
   case 17:
    var $68 = HEAP32[$__tmp_marker >> 2];
    if (($68 | 0) == 0) {
      var $_0 = 1;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    ___gmp_tmp_reentrant_free($68);
    var $_0 = 1;
    __label__ = 19;
    break;
   case 19:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_invert["X"] = 1;

function ___gmpz_ior($res, $op1, $op2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $2 = HEAPU32[$op1 + 4 >> 2];
    var $4 = HEAPU32[$op2 + 4 >> 2];
    var $5 = $op1 + 8 | 0;
    var $6 = HEAPU32[$5 >> 2];
    var $7 = $op2 + 8 | 0;
    var $8 = HEAPU32[$7 >> 2];
    var $9 = $res + 8 | 0;
    var $10 = HEAPU32[$9 >> 2];
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 3:
    if (($4 | 0) > -1) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $op1;
      var $op1_ptr_1 = $6;
      var $op2_ptr_1 = $8;
      var $op1_size_0 = $2;
      var $op2_size_0 = $4;
      __label__ = 44;
      break;
    }
   case 4:
    var $17 = HEAP32[$res >> 2];
    if (($2 | 0) < ($4 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($17 | 0) < ($2 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $op2_ptr_0 = $8;
      var $res_ptr_0 = $10;
      __label__ = 7;
      break;
    }
   case 6:
    var $21 = ___gmpz_realloc($res, $2);
    var $op2_ptr_0 = HEAP32[$7 >> 2];
    var $res_ptr_0 = HEAP32[$9 >> 2];
    __label__ = 7;
    break;
   case 7:
    var $res_ptr_0;
    var $op2_ptr_0;
    if (($res_ptr_0 | 0) == ($6 | 0) | ($2 | 0) == ($4 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $29 = $2 - $4 - 1 | 0;
    var $30 = $res_ptr_0 + ($4 << 2) | 0;
    var $32 = HEAP32[$6 + ($4 << 2) >> 2];
    if (($29 | 0) == 0) {
      var $__dst_1 = $30;
      var $__x_1 = $32;
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $35 = $2 - 1 | 0;
    var $__n_0 = $29;
    var $__dst_0 = $30;
    var $__src_0 = $6 + ($4 + 1 << 2) | 0;
    var $__x_0 = $32;
    __label__ = 10;
    break;
   case 10:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $39 = HEAP32[$__src_0 >> 2];
    var $40 = $__n_0 - 1 | 0;
    if (($40 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__n_0 = $40;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $39;
      __label__ = 10;
      break;
    }
   case 11:
    var $__dst_1 = $res_ptr_0 + ($35 << 2) | 0;
    var $__x_1 = $39;
    __label__ = 12;
    break;
   case 12:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    if (($4 | 0) > 0) {
      var $i_021_in = $4;
      __label__ = 14;
      break;
    } else {
      var $res_size_0 = $2;
      __label__ = 25;
      break;
    }
   case 14:
    var $i_021_in;
    var $i_021 = $i_021_in - 1 | 0;
    var $48 = HEAP32[$op2_ptr_0 + ($i_021 << 2) >> 2] | HEAP32[$6 + ($i_021 << 2) >> 2];
    HEAP32[$res_ptr_0 + ($i_021 << 2) >> 2] = $48;
    if (($i_021 | 0) > 0) {
      var $i_021_in = $i_021;
      __label__ = 14;
      break;
    } else {
      var $res_size_0 = $2;
      __label__ = 25;
      break;
    }
   case 15:
    if (($17 | 0) < ($4 | 0)) {
      __label__ = 16;
      break;
    } else {
      var $op1_ptr_0 = $6;
      var $res_ptr_1 = $10;
      __label__ = 17;
      break;
    }
   case 16:
    var $54 = ___gmpz_realloc($res, $4);
    var $op1_ptr_0 = HEAP32[$5 >> 2];
    var $res_ptr_1 = HEAP32[$9 >> 2];
    __label__ = 17;
    break;
   case 17:
    var $res_ptr_1;
    var $op1_ptr_0;
    if (($res_ptr_1 | 0) == ($8 | 0) | ($4 | 0) == ($2 | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $62 = $4 - $2 - 1 | 0;
    var $63 = $res_ptr_1 + ($2 << 2) | 0;
    var $65 = HEAP32[$8 + ($2 << 2) >> 2];
    if (($62 | 0) == 0) {
      var $__dst2_1 = $63;
      var $__x4_1 = $65;
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $68 = $4 - 1 | 0;
    var $__n1_0 = $62;
    var $__dst2_0 = $63;
    var $__src3_0 = $8 + ($2 + 1 << 2) | 0;
    var $__x4_0 = $65;
    __label__ = 20;
    break;
   case 20:
    var $__x4_0;
    var $__src3_0;
    var $__dst2_0;
    var $__n1_0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $72 = HEAP32[$__src3_0 >> 2];
    var $73 = $__n1_0 - 1 | 0;
    if (($73 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $__n1_0 = $73;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__src3_0 = $__src3_0 + 4 | 0;
      var $__x4_0 = $72;
      __label__ = 20;
      break;
    }
   case 21:
    var $__dst2_1 = $res_ptr_1 + ($68 << 2) | 0;
    var $__x4_1 = $72;
    __label__ = 22;
    break;
   case 22:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 23;
    break;
   case 23:
    if (($2 | 0) > 0) {
      var $i_130_in = $2;
      __label__ = 24;
      break;
    } else {
      var $res_size_0 = $4;
      __label__ = 25;
      break;
    }
   case 24:
    var $i_130_in;
    var $i_130 = $i_130_in - 1 | 0;
    var $81 = HEAP32[$8 + ($i_130 << 2) >> 2] | HEAP32[$op1_ptr_0 + ($i_130 << 2) >> 2];
    HEAP32[$res_ptr_1 + ($i_130 << 2) >> 2] = $81;
    if (($i_130 | 0) > 0) {
      var $i_130_in = $i_130;
      __label__ = 24;
      break;
    } else {
      var $res_size_0 = $4;
      __label__ = 25;
      break;
    }
   case 25:
    var $res_size_0;
    HEAP32[$res + 4 >> 2] = $res_size_0;
    __label__ = 67;
    break;
   case 26:
    if (($4 | 0) < 0) {
      __label__ = 27;
      break;
    } else {
      var $_0 = $op2;
      var $op1_ptr_1 = $8;
      var $op2_ptr_1 = $6;
      var $op1_size_0 = $4;
      var $op2_size_0 = $2;
      __label__ = 44;
      break;
    }
   case 27:
    var $88 = -$2 | 0;
    var $89 = -$4 | 0;
    var $91 = ($88 | 0) < ($89 | 0) ? $88 : $89;
    var $92 = $91 << 2;
    if ($92 >>> 0 < 65536) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $95 = STACKTOP;
    STACKTOP += $92;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $96 = $95;
    var $97 = ___gmpn_sub_1($96, $6, $91, 1);
    var $98 = STACKTOP;
    STACKTOP += $92;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $106 = $98;
    var $105 = $96;
    __label__ = 30;
    break;
   case 29:
    var $100 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $92);
    var $101 = $100;
    var $102 = ___gmpn_sub_1($101, $6, $91, 1);
    var $103 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $92);
    var $106 = $103;
    var $105 = $101;
    __label__ = 30;
    break;
   case 30:
    var $105;
    var $106;
    var $107 = $106;
    var $108 = ___gmpn_sub_1($107, $8, $91, 1);
    if ((HEAP32[$res >> 2] | 0) < ($91 | 0)) {
      __label__ = 31;
      break;
    } else {
      var $res_ptr_2 = $10;
      __label__ = 32;
      break;
    }
   case 31:
    var $113 = ___gmpz_realloc($res, $91);
    var $res_ptr_2 = HEAP32[$9 >> 2];
    __label__ = 32;
    break;
   case 32:
    var $res_ptr_2;
    var $i_2_in = $91;
    __label__ = 33;
    break;
   case 33:
    var $i_2_in;
    var $i_2 = $i_2_in - 1 | 0;
    var $117 = ($i_2_in | 0) > 0;
    if ($117) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    if ((HEAP32[$107 + ($i_2 << 2) >> 2] & HEAP32[$105 + ($i_2 << 2) >> 2] | 0) == 0) {
      var $i_2_in = $i_2;
      __label__ = 33;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    if (($i_2_in | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    if ($117) {
      var $i_34 = $i_2;
      __label__ = 37;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 37:
    var $i_34;
    var $131 = HEAP32[$107 + ($i_34 << 2) >> 2] & HEAP32[$105 + ($i_34 << 2) >> 2];
    HEAP32[$res_ptr_2 + ($i_34 << 2) >> 2] = $131;
    if (($i_34 | 0) > 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    var $i_34 = $i_34 - 1 | 0;
    __label__ = 37;
    break;
   case 39:
    var $135 = ___gmpn_add_1($res_ptr_2, $res_ptr_2, $i_2_in, 1);
    if (($135 | 0) == 0) {
      var $res_size_1 = $i_2_in;
      __label__ = 42;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    HEAP32[$res_ptr_2 + ($i_2_in << 2) >> 2] = $135;
    var $res_size_1 = $i_2_in + 1 | 0;
    __label__ = 42;
    break;
   case 41:
    HEAP32[$res_ptr_2 >> 2] = 1;
    var $res_size_1 = 1;
    __label__ = 42;
    break;
   case 42:
    var $res_size_1;
    HEAP32[$res + 4 >> 2] = -$res_size_1 | 0;
    var $143 = HEAP32[$__tmp_marker >> 2];
    if (($143 | 0) == 0) {
      __label__ = 67;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    ___gmp_tmp_reentrant_free($143);
    __label__ = 67;
    break;
   case 44:
    var $op2_size_0;
    var $op1_size_0;
    var $op2_ptr_1;
    var $op1_ptr_1;
    var $_0;
    var $147 = -$op2_size_0 | 0;
    var $148 = $147 << 2;
    if ($148 >>> 0 < 65536) {
      __label__ = 45;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 45:
    var $151 = STACKTOP;
    STACKTOP += $148;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $155 = $151;
    __label__ = 47;
    break;
   case 46:
    var $153 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $148);
    var $155 = $153;
    __label__ = 47;
    break;
   case 47:
    var $155;
    var $156 = $155;
    var $157 = ___gmpn_sub_1($156, $op2_ptr_1, $147, 1);
    var $162 = (HEAP32[$156 + (($op2_size_0 ^ -1) << 2) >> 2] | 0) == 0 & 1;
    var $163 = $147 - $162 | 0;
    if ((HEAP32[$res >> 2] | 0) < ($147 | 0)) {
      __label__ = 48;
      break;
    } else {
      var $op1_ptr_2 = $op1_ptr_1;
      var $res_ptr_3 = $10;
      __label__ = 49;
      break;
    }
   case 48:
    var $168 = ___gmpz_realloc($res, $147);
    var $op1_ptr_2 = HEAP32[$_0 + 8 >> 2];
    var $res_ptr_3 = HEAP32[$9 >> 2];
    __label__ = 49;
    break;
   case 49:
    var $res_ptr_3;
    var $op1_ptr_2;
    if (($op1_size_0 | 0) < ($163 | 0)) {
      __label__ = 52;
      break;
    } else {
      var $i_4_in = $163;
      __label__ = 50;
      break;
    }
   case 50:
    var $i_4_in;
    var $i_4 = $i_4_in - 1 | 0;
    if (($i_4_in | 0) > 0) {
      __label__ = 51;
      break;
    } else {
      var $res_size_2 = $i_4_in;
      var $count_0 = $i_4_in;
      __label__ = 58;
      break;
    }
   case 51:
    if ((HEAP32[$156 + ($i_4 << 2) >> 2] & (HEAP32[$op1_ptr_2 + ($i_4 << 2) >> 2] ^ -1) | 0) == 0) {
      var $i_4_in = $i_4;
      __label__ = 50;
      break;
    } else {
      var $res_size_235 = $i_4_in;
      var $count_026 = $i_4_in;
      __label__ = 60;
      break;
    }
   case 52:
    if (($163 | 0) == ($op1_size_0 | 0)) {
      var $res_size_2 = $163;
      var $count_0 = $op1_size_0;
      __label__ = 58;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    var $187 = $163 - $op1_size_0 - 1 | 0;
    var $188 = $res_ptr_3 + ($op1_size_0 << 2) | 0;
    var $190 = HEAP32[$156 + ($op1_size_0 << 2) >> 2];
    if (($187 | 0) == 0) {
      var $__x10_1 = $190;
      var $__dst8_1 = $188;
      __label__ = 57;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 54:
    var $194 = $op2_size_0 + $162 ^ -1;
    var $__x10_0 = $190;
    var $__src9_0 = $156 + ($op1_size_0 + 1 << 2) | 0;
    var $__dst8_0 = $188;
    var $__n7_0 = $187;
    __label__ = 55;
    break;
   case 55:
    var $__n7_0;
    var $__dst8_0;
    var $__src9_0;
    var $__x10_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $198 = HEAP32[$__src9_0 >> 2];
    var $199 = $__n7_0 - 1 | 0;
    if (($199 | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      var $__x10_0 = $198;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $199;
      __label__ = 55;
      break;
    }
   case 56:
    var $__x10_1 = $198;
    var $__dst8_1 = $res_ptr_3 + ($194 << 2) | 0;
    __label__ = 57;
    break;
   case 57:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    var $res_size_2 = $163;
    var $count_0 = $op1_size_0;
    __label__ = 58;
    break;
   case 58:
    var $count_0;
    var $res_size_2;
    if (($res_size_2 | 0) == 0) {
      __label__ = 64;
      break;
    } else {
      var $count_02 = $count_0;
      var $res_size_23 = $res_size_2;
      __label__ = 59;
      break;
    }
   case 59:
    var $res_size_23;
    var $count_02;
    if (($count_02 | 0) > 0) {
      var $res_size_235 = $res_size_23;
      var $count_026 = $count_02;
      __label__ = 60;
      break;
    } else {
      var $res_size_234 = $res_size_23;
      __label__ = 62;
      break;
    }
   case 60:
    var $count_026;
    var $res_size_235;
    var $i_511_in = $count_026;
    __label__ = 61;
    break;
   case 61:
    var $i_511_in;
    var $i_511 = $i_511_in - 1 | 0;
    var $209 = HEAP32[$156 + ($i_511 << 2) >> 2] & (HEAP32[$op1_ptr_2 + ($i_511 << 2) >> 2] ^ -1);
    HEAP32[$res_ptr_3 + ($i_511 << 2) >> 2] = $209;
    if (($i_511 | 0) > 0) {
      var $i_511_in = $i_511;
      __label__ = 61;
      break;
    } else {
      var $res_size_234 = $res_size_235;
      __label__ = 62;
      break;
    }
   case 62:
    var $res_size_234;
    var $212 = ___gmpn_add_1($res_ptr_3, $res_ptr_3, $res_size_234, 1);
    if (($212 | 0) == 0) {
      var $res_size_3 = $res_size_234;
      __label__ = 65;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    HEAP32[$res_ptr_3 + ($res_size_234 << 2) >> 2] = $212;
    var $res_size_3 = $res_size_234 + 1 | 0;
    __label__ = 65;
    break;
   case 64:
    HEAP32[$res_ptr_3 >> 2] = 1;
    var $res_size_3 = 1;
    __label__ = 65;
    break;
   case 65:
    var $res_size_3;
    HEAP32[$res + 4 >> 2] = -$res_size_3 | 0;
    var $220 = HEAP32[$__tmp_marker >> 2];
    if (($220 | 0) == 0) {
      __label__ = 67;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    ___gmp_tmp_reentrant_free($220);
    __label__ = 67;
    break;
   case 67:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_ior["X"] = 1;

function ___gmpz_jacobi($a, $b) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$a + 4 >> 2];
    var $4 = HEAPU32[$a + 8 >> 2];
    var $5 = HEAPU32[$4 >> 2];
    var $7 = HEAPU32[$b + 4 >> 2];
    if (($7 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($2 | 0) == -1 || ($2 | 0) == 1) {
      __label__ = 4;
      break;
    } else {
      var $13 = 0;
      __label__ = 5;
      break;
    }
   case 4:
    var $13 = ($5 | 0) == 1;
    __label__ = 5;
    break;
   case 5:
    var $13;
    var $_0 = $13 & 1;
    __label__ = 97;
    break;
   case 6:
    var $17 = HEAPU32[$b + 8 >> 2];
    var $18 = HEAPU32[$17 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    if (($7 | 0) == -1 || ($7 | 0) == 1) {
      __label__ = 8;
      break;
    } else {
      var $24 = 0;
      __label__ = 9;
      break;
    }
   case 8:
    var $24 = ($18 | 0) == 1;
    __label__ = 9;
    break;
   case 9:
    var $24;
    var $_0 = $24 & 1;
    __label__ = 97;
    break;
   case 10:
    if ((($18 | $5) & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 97;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $32 = ($7 & $2) >>> 30 & 2;
    var $35 = ($7 | 0) > -1 ? $7 : -$7 | 0;
    if (($18 | 0) == 0) {
      var $bsize_025 = $35;
      var $bsrcp_026 = $17;
      __label__ = 12;
      break;
    } else {
      var $blow_0_lcssa = $18;
      var $bsize_0_lcssa = $35;
      var $bsrcp_0_lcssa = $17;
      __label__ = 13;
      break;
    }
   case 12:
    var $bsrcp_026;
    var $bsize_025;
    var $37 = $bsize_025 - 1 | 0;
    var $38 = $bsrcp_026 + 4 | 0;
    var $39 = HEAP32[$38 >> 2];
    if (($39 | 0) == 0) {
      var $bsize_025 = $37;
      var $bsrcp_026 = $38;
      __label__ = 12;
      break;
    } else {
      var $blow_0_lcssa = $39;
      var $bsize_0_lcssa = $37;
      var $bsrcp_0_lcssa = $38;
      __label__ = 13;
      break;
    }
   case 13:
    var $bsrcp_0_lcssa;
    var $bsize_0_lcssa;
    var $blow_0_lcssa;
    var $42 = $blow_0_lcssa & -$blow_0_lcssa;
    if ($42 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $46 = $42 >>> 0 < 256 ? 1 : 9;
    var $51 = $46;
    __label__ = 16;
    break;
   case 15:
    var $49 = $42 >>> 0 < 16777216 ? 17 : 25;
    var $51 = $49;
    __label__ = 16;
    break;
   case 16:
    var $51;
    var $53 = STRING_TABLE.___gmpn_clz_tab + ($42 >>> ($51 >>> 0)) | 0;
    var $57 = $51 - 33 + (HEAPU8[$53] & 255) | 0;
    var $58 = $57 + 31 | 0;
    var $59 = $blow_0_lcssa >>> ($58 >>> 0);
    if (($bsize_0_lcssa | 0) > 1) {
      __label__ = 17;
      break;
    } else {
      var $blow_1 = $59;
      __label__ = 19;
      break;
    }
   case 17:
    var $63 = HEAP32[$bsrcp_0_lcssa + 4 >> 2];
    if (($58 | 0) == 0) {
      var $blow_1 = $59;
      var $bsecond_0 = $63;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $blow_1 = $63 << 1 - $57 | $59;
    var $bsecond_0 = $63;
    __label__ = 19;
    break;
   case 19:
    var $bsecond_0;
    var $blow_1;
    var $73 = $2 >>> 30 & 2 & $blow_1 ^ $32;
    var $76 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($bsize_0_lcssa | 0) == 2) {
      __label__ = 21;
      break;
    } else if (($bsize_0_lcssa | 0) == 1) {
      __label__ = 22;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    if (($5 | 0) == 0) {
      var $asize_018 = $76;
      var $asrcp_019 = $4;
      __label__ = 28;
      break;
    } else {
      var $alow_1_lcssa = $5;
      var $asize_0_lcssa = $76;
      var $asrcp_0_lcssa = $4;
      __label__ = 29;
      break;
    }
   case 21:
    if (($bsecond_0 >>> ($58 >>> 0) | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 22:
    var $86 = $73 ^ $58 << 1 & ($5 >>> 1 ^ $5);
    if (($blow_1 | 0) == 1) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $_0 = 1 - ($86 & 2) | 0;
    __label__ = 97;
    break;
   case 24:
    if (($76 | 0) > 9) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $94 = ___gmpn_mod_1($4, $76, $blow_1);
    var $alow_0 = $94;
    var $result_bit1_0 = $86;
    __label__ = 27;
    break;
   case 26:
    var $96 = $86 ^ $blow_1;
    var $97 = ___gmpn_modexact_1c_odd($4, $76, $blow_1, 0);
    var $alow_0 = $97;
    var $result_bit1_0 = $96;
    __label__ = 27;
    break;
   case 27:
    var $result_bit1_0;
    var $alow_0;
    var $99 = ___gmpn_jacobi_base($alow_0, $blow_1, $result_bit1_0);
    var $_0 = $99;
    __label__ = 97;
    break;
   case 28:
    var $asrcp_019;
    var $asize_018;
    var $100 = $asize_018 - 1 | 0;
    var $101 = $asrcp_019 + 4 | 0;
    var $102 = HEAP32[$101 >> 2];
    if (($102 | 0) == 0) {
      var $asize_018 = $100;
      var $asrcp_019 = $101;
      __label__ = 28;
      break;
    } else {
      var $alow_1_lcssa = $102;
      var $asize_0_lcssa = $100;
      var $asrcp_0_lcssa = $101;
      __label__ = 29;
      break;
    }
   case 29:
    var $asrcp_0_lcssa;
    var $asize_0_lcssa;
    var $alow_1_lcssa;
    var $105 = $alow_1_lcssa & -$alow_1_lcssa;
    if ($105 >>> 0 < 65536) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $109 = $105 >>> 0 < 256 ? 1 : 9;
    var $114 = $109;
    __label__ = 32;
    break;
   case 31:
    var $112 = $105 >>> 0 < 16777216 ? 17 : 25;
    var $114 = $112;
    __label__ = 32;
    break;
   case 32:
    var $114;
    var $116 = STRING_TABLE.___gmpn_clz_tab + ($105 >>> ($114 >>> 0)) | 0;
    var $120 = $114 - 33 + (HEAPU8[$116] & 255) | 0;
    var $121 = $120 + 31 | 0;
    var $126 = $121 << 1 & ($blow_1 >>> 1 ^ $blow_1) ^ $73;
    var $127 = $alow_1_lcssa >>> ($121 >>> 0);
    if (($asize_0_lcssa | 0) > 1) {
      __label__ = 33;
      break;
    } else {
      var $alow_2 = $127;
      __label__ = 35;
      break;
    }
   case 33:
    var $131 = HEAP32[$asrcp_0_lcssa + 4 >> 2];
    if (($121 | 0) == 0) {
      var $alow_2 = $127;
      var $asecond_0 = $131;
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $alow_2 = $131 << 1 - $120 | $127;
    var $asecond_0 = $131;
    __label__ = 35;
    break;
   case 35:
    var $asecond_0;
    var $alow_2;
    var $142 = ($alow_2 >>> 1 ^ $alow_2) & $58 << 1 ^ $126;
    if (($asize_0_lcssa | 0) == 2) {
      __label__ = 36;
      break;
    } else if (($asize_0_lcssa | 0) == 1) {
      __label__ = 37;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 36:
    if (($asecond_0 >>> ($121 >>> 0) | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 37:
    if (($alow_2 | 0) == 1) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    var $_0 = 1 - ($142 & 2) | 0;
    __label__ = 97;
    break;
   case 39:
    var $153 = $alow_2 & $blow_1 ^ $126;
    if (($bsize_0_lcssa | 0) > 9) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $156 = ___gmpn_mod_1($bsrcp_0_lcssa, $bsize_0_lcssa, $alow_2);
    var $blow_2 = $156;
    var $result_bit1_1 = $153;
    __label__ = 42;
    break;
   case 41:
    var $158 = $153 ^ $alow_2;
    var $159 = ___gmpn_modexact_1c_odd($bsrcp_0_lcssa, $bsize_0_lcssa, $alow_2, 0);
    var $blow_2 = $159;
    var $result_bit1_1 = $158;
    __label__ = 42;
    break;
   case 42:
    var $result_bit1_1;
    var $blow_2;
    var $161 = ___gmpn_jacobi_base($blow_2, $alow_2, $result_bit1_1);
    var $_0 = $161;
    __label__ = 97;
    break;
   case 43:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $164 = $asize_0_lcssa + $bsize_0_lcssa << 2;
    if ($164 >>> 0 < 65536) {
      __label__ = 44;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 44:
    var $167 = STACKTOP;
    STACKTOP += $164;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $171 = $167;
    __label__ = 46;
    break;
   case 45:
    var $169 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $164);
    var $171 = $169;
    __label__ = 46;
    break;
   case 46:
    var $171;
    var $172 = $171;
    var $173 = $172 + ($asize_0_lcssa << 2) | 0;
    if (($121 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $176 = ___gmpn_rshift($172, $asrcp_0_lcssa, $asize_0_lcssa, $121);
    var $asize_1 = $asize_0_lcssa - ((HEAP32[$172 + ($asize_0_lcssa - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 54;
    break;
   case 48:
    if (($asize_0_lcssa | 0) == 0) {
      var $asize_1 = 0;
      __label__ = 54;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $186 = $asize_0_lcssa - 1 | 0;
    var $187 = HEAP32[$asrcp_0_lcssa >> 2];
    if (($186 | 0) == 0) {
      var $__x_1 = $187;
      var $__dst_1 = $172;
      __label__ = 53;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $scevgep = $171 + (($asize_0_lcssa << 2) - 4) | 0;
    var $__x_0 = $187;
    var $asrcp_0_pn = $asrcp_0_lcssa;
    var $__dst_0 = $172;
    var $__n_0 = $186;
    __label__ = 51;
    break;
   case 51:
    var $__n_0;
    var $__dst_0;
    var $asrcp_0_pn;
    var $__x_0;
    var $__src_0 = $asrcp_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $193 = HEAP32[$__src_0 >> 2];
    var $194 = $__n_0 - 1 | 0;
    if (($194 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      var $__x_0 = $193;
      var $asrcp_0_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $194;
      __label__ = 51;
      break;
    }
   case 52:
    var $__x_1 = $193;
    var $__dst_1 = $scevgep;
    __label__ = 53;
    break;
   case 53:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $asize_1 = $asize_0_lcssa;
    __label__ = 54;
    break;
   case 54:
    var $asize_1;
    if (($58 | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 55:
    var $200 = ___gmpn_rshift($173, $bsrcp_0_lcssa, $bsize_0_lcssa, $58);
    var $bsize_1 = $bsize_0_lcssa - ((HEAP32[$172 + ($bsize_0_lcssa - 1 + $asize_0_lcssa << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 62;
    break;
   case 56:
    if (($bsize_0_lcssa | 0) == 0) {
      var $bsize_1 = 0;
      __label__ = 62;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    var $210 = $bsize_0_lcssa - 1 | 0;
    var $211 = HEAP32[$bsrcp_0_lcssa >> 2];
    if (($210 | 0) == 0) {
      var $__x11_1 = $211;
      var $__dst9_1 = $173;
      __label__ = 61;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $scevgep36 = $171 + (($asize_0_lcssa << 2) + ($bsize_0_lcssa << 2) - 4) | 0;
    var $__x11_0 = $211;
    var $bsrcp_0_pn = $bsrcp_0_lcssa;
    var $__dst9_0 = $173;
    var $__n8_0 = $210;
    __label__ = 59;
    break;
   case 59:
    var $__n8_0;
    var $__dst9_0;
    var $bsrcp_0_pn;
    var $__x11_0;
    var $__src10_0 = $bsrcp_0_pn + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    var $219 = HEAP32[$__src10_0 >> 2];
    var $220 = $__n8_0 - 1 | 0;
    if (($220 | 0) == 0) {
      __label__ = 60;
      break;
    } else {
      var $__x11_0 = $219;
      var $bsrcp_0_pn = $__src10_0;
      var $__dst9_0 = $__dst9_0 + 4 | 0;
      var $__n8_0 = $220;
      __label__ = 59;
      break;
    }
   case 60:
    var $__x11_1 = $219;
    var $__dst9_1 = $scevgep36;
    __label__ = 61;
    break;
   case 61:
    var $__dst9_1;
    var $__x11_1;
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    var $bsize_1 = $bsize_0_lcssa;
    __label__ = 62;
    break;
   case 62:
    var $bsize_1;
    if (($asize_1 | 0) < ($bsize_1 | 0)) {
      __label__ = 63;
      break;
    } else {
      var $asize_2 = $asize_1;
      var $bsize_2 = $bsize_1;
      var $ap_0 = $172;
      var $bp_0 = $173;
      var $alow_3 = $alow_2;
      var $blow_3 = $blow_1;
      var $result_bit1_2 = $142;
      __label__ = 64;
      break;
    }
   case 63:
    var $asize_2 = $bsize_1;
    var $bsize_2 = $asize_1;
    var $ap_0 = $173;
    var $bp_0 = $172;
    var $alow_3 = $blow_1;
    var $blow_3 = $alow_2;
    var $result_bit1_2 = $142 ^ $alow_2 & $blow_1;
    __label__ = 64;
    break;
   case 64:
    var $result_bit1_2;
    var $blow_3;
    var $alow_3;
    var $bp_0;
    var $ap_0;
    var $bsize_2;
    var $asize_2;
    if (($asize_2 | 0) > ($bsize_2 | 0)) {
      __label__ = 65;
      break;
    } else {
      var $asize_4 = $asize_2;
      var $bsize_3 = $bsize_2;
      var $ap_1 = $ap_0;
      var $bp_1 = $bp_0;
      var $alow_4 = $alow_3;
      var $blow_4 = $blow_3;
      var $result_bit1_3 = $result_bit1_2;
      __label__ = 72;
      break;
    }
   case 65:
    var $232 = ($asize_2 << 2) + 4 | 0;
    if ($232 >>> 0 < 65536) {
      __label__ = 66;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 66:
    var $235 = STACKTOP;
    STACKTOP += $232;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $239 = $235;
    __label__ = 68;
    break;
   case 67:
    var $237 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $232);
    var $239 = $237;
    __label__ = 68;
    break;
   case 68:
    var $239;
    var $240 = $239;
    ___gmpn_tdiv_qr($240 + ($bsize_2 << 2) | 0, $240, 0, $ap_0, $asize_2, $bp_0, $bsize_2);
    var $asize_3 = $bsize_2;
    __label__ = 69;
    break;
   case 69:
    var $asize_3;
    if (($asize_3 | 0) > 0) {
      __label__ = 70;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 70:
    var $245 = $asize_3 - 1 | 0;
    if ((HEAP32[$240 + ($245 << 2) >> 2] | 0) == 0) {
      var $asize_3 = $245;
      __label__ = 69;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    if (($asize_3 | 0) == 0) {
      __label__ = 95;
      break;
    } else {
      var $asize_7_ph = $asize_3;
      var $bsize_5_ph = $bsize_2;
      var $bp_3_ph = $bp_0;
      var $alow_6_in_ph = $240;
      var $blow_6_ph = $blow_3;
      var $result_bit1_5_ph = $result_bit1_2;
      __label__ = 83;
      break;
    }
   case 72:
    var $result_bit1_3;
    var $blow_4;
    var $alow_4;
    var $bp_1;
    var $ap_1;
    var $bsize_3;
    var $asize_4;
    if (($asize_4 | 0) < ($bsize_3 | 0)) {
      __label__ = 77;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    if (($asize_4 | 0) == ($bsize_3 | 0)) {
      __label__ = 74;
      break;
    } else {
      var $asize_5 = $asize_4;
      var $bsize_4 = $bsize_3;
      var $ap_2 = $ap_1;
      var $bp_2 = $bp_1;
      var $alow_5 = $alow_4;
      var $blow_5 = $blow_4;
      var $result_bit1_4 = $result_bit1_3;
      __label__ = 78;
      break;
    }
   case 74:
    var $256 = $bsize_3 - 1 | 0;
    var $258 = HEAPU32[$ap_1 + ($256 << 2) >> 2];
    var $260 = HEAPU32[$bp_1 + ($256 << 2) >> 2];
    if ($258 >>> 0 < $260 >>> 0) {
      __label__ = 77;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    if (($258 | 0) == ($260 | 0)) {
      __label__ = 76;
      break;
    } else {
      var $asize_5 = $bsize_3;
      var $bsize_4 = $bsize_3;
      var $ap_2 = $ap_1;
      var $bp_2 = $bp_1;
      var $alow_5 = $alow_4;
      var $blow_5 = $blow_4;
      var $result_bit1_4 = $result_bit1_3;
      __label__ = 78;
      break;
    }
   case 76:
    var $265 = ___gmpn_cmp($ap_1, $bp_1, $256);
    if (($265 | 0) < 0) {
      __label__ = 77;
      break;
    } else {
      var $asize_5 = $bsize_3;
      var $bsize_4 = $bsize_3;
      var $ap_2 = $ap_1;
      var $bp_2 = $bp_1;
      var $alow_5 = $alow_4;
      var $blow_5 = $blow_4;
      var $result_bit1_4 = $result_bit1_3;
      __label__ = 78;
      break;
    }
   case 77:
    var $asize_5 = $bsize_3;
    var $bsize_4 = $asize_4;
    var $ap_2 = $bp_1;
    var $bp_2 = $ap_1;
    var $alow_5 = $blow_4;
    var $blow_5 = $alow_4;
    var $result_bit1_4 = $alow_4 & $blow_4 ^ $result_bit1_3;
    __label__ = 78;
    break;
   case 78:
    var $result_bit1_4;
    var $blow_5;
    var $alow_5;
    var $bp_2;
    var $ap_2;
    var $bsize_4;
    var $asize_5;
    if (($asize_5 | 0) == 1) {
      __label__ = 90;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 79:
    var $273 = ___gmpn_sub($ap_2, $ap_2, $asize_5, $bp_2, $bsize_4);
    var $asize_6 = $asize_5;
    __label__ = 80;
    break;
   case 80:
    var $asize_6;
    if (($asize_6 | 0) > 0) {
      __label__ = 81;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 81:
    var $277 = $asize_6 - 1 | 0;
    if ((HEAP32[$ap_2 + ($277 << 2) >> 2] | 0) == 0) {
      var $asize_6 = $277;
      __label__ = 80;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 82:
    if (($asize_6 | 0) == 0) {
      __label__ = 95;
      break;
    } else {
      var $asize_7_ph = $asize_6;
      var $bsize_5_ph = $bsize_4;
      var $bp_3_ph = $bp_2;
      var $alow_6_in_ph = $ap_2;
      var $blow_6_ph = $blow_5;
      var $result_bit1_5_ph = $result_bit1_4;
      __label__ = 83;
      break;
    }
   case 83:
    var $result_bit1_5_ph;
    var $blow_6_ph;
    var $alow_6_in_ph;
    var $bp_3_ph;
    var $bsize_5_ph;
    var $asize_7_ph;
    var $alow_612 = HEAP32[$alow_6_in_ph >> 2];
    if (($alow_612 | 0) == 0) {
      var $alow_6_in13 = $alow_6_in_ph;
      var $asize_714 = $asize_7_ph;
      __label__ = 84;
      break;
    } else {
      var $alow_6_in_lcssa = $alow_6_in_ph;
      var $asize_7_lcssa = $asize_7_ph;
      var $alow_6_lcssa = $alow_612;
      __label__ = 85;
      break;
    }
   case 84:
    var $asize_714;
    var $alow_6_in13;
    var $284 = $asize_714 - 1 | 0;
    var $285 = $alow_6_in13 + 4 | 0;
    var $alow_6 = HEAP32[$285 >> 2];
    if (($alow_6 | 0) == 0) {
      var $alow_6_in13 = $285;
      var $asize_714 = $284;
      __label__ = 84;
      break;
    } else {
      var $alow_6_in_lcssa = $285;
      var $asize_7_lcssa = $284;
      var $alow_6_lcssa = $alow_6;
      __label__ = 85;
      break;
    }
   case 85:
    var $alow_6_lcssa;
    var $asize_7_lcssa;
    var $alow_6_in_lcssa;
    if (($alow_6_lcssa & 1 | 0) == 0) {
      __label__ = 86;
      break;
    } else {
      var $asize_4 = $asize_7_lcssa;
      var $bsize_3 = $bsize_5_ph;
      var $ap_1 = $alow_6_in_lcssa;
      var $bp_1 = $bp_3_ph;
      var $alow_4 = $alow_6_lcssa;
      var $blow_4 = $blow_6_ph;
      var $result_bit1_3 = $result_bit1_5_ph;
      __label__ = 72;
      break;
    }
   case 86:
    var $291 = $alow_6_lcssa & -$alow_6_lcssa;
    if ($291 >>> 0 < 65536) {
      __label__ = 87;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 87:
    var $295 = $291 >>> 0 < 256 ? 1 : 9;
    var $300 = $295;
    __label__ = 89;
    break;
   case 88:
    var $298 = $291 >>> 0 < 16777216 ? 17 : 25;
    var $300 = $298;
    __label__ = 89;
    break;
   case 89:
    var $300;
    var $302 = STRING_TABLE.___gmpn_clz_tab + ($291 >>> ($300 >>> 0)) | 0;
    var $306 = $300 - 2 + (HEAPU8[$302] & 255) | 0;
    var $311 = $306 << 1 & ($blow_6_ph >>> 1 ^ $blow_6_ph) ^ $result_bit1_5_ph;
    var $312 = ___gmpn_rshift($alow_6_in_lcssa, $alow_6_in_lcssa, $asize_7_lcssa, $306);
    var $asize_4 = $asize_7_lcssa - ((HEAP32[$alow_6_in_lcssa + ($asize_7_lcssa - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $bsize_3 = $bsize_5_ph;
    var $ap_1 = $alow_6_in_lcssa;
    var $bp_1 = $bp_3_ph;
    var $alow_4 = HEAP32[$alow_6_in_lcssa >> 2];
    var $blow_4 = $blow_6_ph;
    var $result_bit1_3 = $311;
    __label__ = 72;
    break;
   case 90:
    var $321 = HEAP32[$__tmp_marker >> 2];
    if (($321 | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 91:
    ___gmp_tmp_reentrant_free($321);
    __label__ = 92;
    break;
   case 92:
    if (($alow_5 | 0) == 1) {
      __label__ = 93;
      break;
    } else {
      __label__ = 94;
      break;
    }
   case 93:
    var $_0 = 1 - ($result_bit1_4 & 2) | 0;
    __label__ = 97;
    break;
   case 94:
    var $332 = ___gmpn_jacobi_base($blow_5, $alow_5, $alow_5 & $blow_5 ^ $result_bit1_4);
    var $_0 = $332;
    __label__ = 97;
    break;
   case 95:
    var $333 = HEAP32[$__tmp_marker >> 2];
    if (($333 | 0) == 0) {
      var $_0 = 0;
      __label__ = 97;
      break;
    } else {
      __label__ = 96;
      break;
    }
   case 96:
    ___gmp_tmp_reentrant_free($333);
    var $_0 = 0;
    __label__ = 97;
    break;
   case 97:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_jacobi["X"] = 1;

function ___gmpz_si_kronecker($a, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$b + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($a | 0) == 1 & 1 | ($a | 0) == -1 & 1;
    __label__ = 31;
    break;
   case 4:
    var $11 = ($2 & $a) >>> 30;
    var $12 = $11 & 2;
    var $14 = HEAPU32[$b + 8 >> 2];
    var $15 = HEAPU32[$14 >> 2];
    var $18 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($15 & 1 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $25 = $a >>> 30 & 2 & $15 ^ $12;
    var $28 = ($a | 0) > -1 ? $a : -$a | 0;
    if (($28 & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $result_bit1_0 = $25;
      var $b_ptr_1 = $14;
      var $b_low_2 = $15;
      var $b_abs_size_1 = $18;
      var $a_limb_0 = $28;
      __label__ = 25;
      break;
    }
   case 6:
    if (($28 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $_0 = ($18 | 0) == 1 & ($15 | 0) == 1 & 1;
    __label__ = 31;
    break;
   case 8:
    var $39 = $28 & -$28;
    if ($39 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $43 = $39 >>> 0 < 256 ? 1 : 9;
    var $48 = $43;
    __label__ = 11;
    break;
   case 10:
    var $46 = $39 >>> 0 < 16777216 ? 17 : 25;
    var $48 = $46;
    __label__ = 11;
    break;
   case 11:
    var $48;
    var $50 = STRING_TABLE.___gmpn_clz_tab + ($39 >>> ($48 >>> 0)) | 0;
    var $54 = $48 - 2 + (HEAPU8[$50] & 255) | 0;
    var $result_bit1_0 = $54 << 1 & ($15 >>> 1 ^ $15) ^ $25;
    var $b_ptr_1 = $14;
    var $b_low_2 = $15;
    var $b_abs_size_1 = $18;
    var $a_limb_0 = $28 >>> ($54 >>> 0);
    __label__ = 25;
    break;
   case 12:
    if (($a & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 31;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    if (($15 | 0) == 0) {
      var $b_abs_size_02 = $18;
      var $b_ptr_03 = $14;
      __label__ = 14;
      break;
    } else {
      var $b_abs_size_0_lcssa = $18;
      var $b_low_0_lcssa = $15;
      var $b_ptr_0_lcssa = $14;
      __label__ = 15;
      break;
    }
   case 14:
    var $b_ptr_03;
    var $b_abs_size_02;
    var $65 = $b_abs_size_02 - 1 | 0;
    var $66 = $b_ptr_03 + 4 | 0;
    var $67 = HEAP32[$66 >> 2];
    if (($67 | 0) == 0) {
      var $b_abs_size_02 = $65;
      var $b_ptr_03 = $66;
      __label__ = 14;
      break;
    } else {
      var $b_abs_size_0_lcssa = $65;
      var $b_low_0_lcssa = $67;
      var $b_ptr_0_lcssa = $66;
      __label__ = 15;
      break;
    }
   case 15:
    var $b_ptr_0_lcssa;
    var $b_low_0_lcssa;
    var $b_abs_size_0_lcssa;
    if (($b_low_0_lcssa & 1 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $b_low_1 = $b_low_0_lcssa;
      __label__ = 24;
      break;
    }
   case 16:
    if (($b_low_0_lcssa | 0) == -2147483648) {
      __label__ = 17;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 17:
    if (($b_abs_size_0_lcssa | 0) == 1) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $_0 = 1 - (($a >>> 1 ^ $a ^ $11) & 2) | 0;
    __label__ = 31;
    break;
   case 19:
    var $b_low_1 = HEAP32[$b_ptr_0_lcssa + 4 >> 2] << 1;
    __label__ = 24;
    break;
   case 20:
    var $87 = $b_low_0_lcssa & -$b_low_0_lcssa;
    if ($87 >>> 0 < 65536) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $91 = $87 >>> 0 < 256 ? 1 : 9;
    var $96 = $91;
    __label__ = 23;
    break;
   case 22:
    var $94 = $87 >>> 0 < 16777216 ? 17 : 25;
    var $96 = $94;
    __label__ = 23;
    break;
   case 23:
    var $96;
    var $98 = STRING_TABLE.___gmpn_clz_tab + ($87 >>> ($96 >>> 0)) | 0;
    var $b_low_1 = $b_low_0_lcssa >>> (($96 - 2 + (HEAPU8[$98] & 255) | 0) >>> 0);
    __label__ = 24;
    break;
   case 24:
    var $b_low_1;
    var $111 = ($a | 0) > -1 ? $a : -$a | 0;
    var $result_bit1_0 = $a >>> 30 & 2 & $b_low_1 ^ $12;
    var $b_ptr_1 = $b_ptr_0_lcssa;
    var $b_low_2 = $b_low_1;
    var $b_abs_size_1 = $b_abs_size_0_lcssa;
    var $a_limb_0 = $111;
    __label__ = 25;
    break;
   case 25:
    var $a_limb_0;
    var $b_abs_size_1;
    var $b_low_2;
    var $b_ptr_1;
    var $result_bit1_0;
    if (($a_limb_0 | 0) == 1) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $_0 = 1 - ($result_bit1_0 & 2) | 0;
    __label__ = 31;
    break;
   case 27:
    if (($b_abs_size_1 | 0) > 9) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    var $120 = ___gmpn_mod_1($b_ptr_1, $b_abs_size_1, $a_limb_0);
    var $result_bit1_1 = $result_bit1_0;
    var $b_rem_0 = $120;
    __label__ = 30;
    break;
   case 29:
    var $122 = $result_bit1_0 ^ $a_limb_0;
    var $123 = ___gmpn_modexact_1c_odd($b_ptr_1, $b_abs_size_1, $a_limb_0, 0);
    var $result_bit1_1 = $122;
    var $b_rem_0 = $123;
    __label__ = 30;
    break;
   case 30:
    var $b_rem_0;
    var $result_bit1_1;
    var $127 = ___gmpn_jacobi_base($b_rem_0, $a_limb_0, $result_bit1_1 ^ $b_low_2 & $a_limb_0);
    var $_0 = $127;
    __label__ = 31;
    break;
   case 31:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_si_kronecker["X"] = 1;

function ___gmpz_ui_kronecker($a, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$b + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($5 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($a | 0) == 1 & 1;
    __label__ = 30;
    break;
   case 4:
    var $12 = HEAPU32[$b + 8 >> 2];
    var $13 = HEAPU32[$12 >> 2];
    if (($13 & 1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 5:
    if (($a & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 30;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($13 | 0) == 0) {
      var $b_abs_size_02 = $5;
      var $b_ptr_03 = $12;
      __label__ = 7;
      break;
    } else {
      var $b_abs_size_0_lcssa = $5;
      var $b_low_0_lcssa = $13;
      var $b_ptr_0_lcssa = $12;
      __label__ = 8;
      break;
    }
   case 7:
    var $b_ptr_03;
    var $b_abs_size_02;
    var $20 = $b_abs_size_02 - 1 | 0;
    var $21 = $b_ptr_03 + 4 | 0;
    var $22 = HEAP32[$21 >> 2];
    if (($22 | 0) == 0) {
      var $b_abs_size_02 = $20;
      var $b_ptr_03 = $21;
      __label__ = 7;
      break;
    } else {
      var $b_abs_size_0_lcssa = $20;
      var $b_low_0_lcssa = $22;
      var $b_ptr_0_lcssa = $21;
      __label__ = 8;
      break;
    }
   case 8:
    var $b_ptr_0_lcssa;
    var $b_low_0_lcssa;
    var $b_abs_size_0_lcssa;
    if (($b_low_0_lcssa & 1 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $_01 = $a;
      var $result_bit1_0 = 0;
      var $b_ptr_1 = $b_ptr_0_lcssa;
      var $b_low_1 = $b_low_0_lcssa;
      var $b_abs_size_1 = $b_abs_size_0_lcssa;
      __label__ = 24;
      break;
    }
   case 9:
    if (($b_low_0_lcssa | 0) == -2147483648) {
      __label__ = 10;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 10:
    if (($b_abs_size_0_lcssa | 0) == 1) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $_0 = 1 - (($a >>> 1 ^ $a) & 2) | 0;
    __label__ = 30;
    break;
   case 12:
    var $_01 = $a;
    var $result_bit1_0 = 0;
    var $b_ptr_1 = $b_ptr_0_lcssa;
    var $b_low_1 = HEAP32[$b_ptr_0_lcssa + 4 >> 2] << 1;
    var $b_abs_size_1 = $b_abs_size_0_lcssa;
    __label__ = 24;
    break;
   case 13:
    var $41 = $b_low_0_lcssa & -$b_low_0_lcssa;
    if ($41 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $45 = $41 >>> 0 < 256 ? 1 : 9;
    var $50 = $45;
    __label__ = 16;
    break;
   case 15:
    var $48 = $41 >>> 0 < 16777216 ? 17 : 25;
    var $50 = $48;
    __label__ = 16;
    break;
   case 16:
    var $50;
    var $52 = STRING_TABLE.___gmpn_clz_tab + ($41 >>> ($50 >>> 0)) | 0;
    var $_01 = $a;
    var $result_bit1_0 = 0;
    var $b_ptr_1 = $b_ptr_0_lcssa;
    var $b_low_1 = $b_low_0_lcssa >>> (($50 - 2 + (HEAPU8[$52] & 255) | 0) >>> 0);
    var $b_abs_size_1 = $b_abs_size_0_lcssa;
    __label__ = 24;
    break;
   case 17:
    if (($a | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $_0 = ($5 | 0) == 1 & ($13 | 0) == 1 & 1;
    __label__ = 30;
    break;
   case 19:
    if (($a & 1 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $_01 = $a;
      var $result_bit1_0 = 0;
      var $b_ptr_1 = $12;
      var $b_low_1 = $13;
      var $b_abs_size_1 = $5;
      __label__ = 24;
      break;
    }
   case 20:
    var $69 = $a & -$a;
    if ($69 >>> 0 < 65536) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $73 = $69 >>> 0 < 256 ? 1 : 9;
    var $78 = $73;
    __label__ = 23;
    break;
   case 22:
    var $76 = $69 >>> 0 < 16777216 ? 17 : 25;
    var $78 = $76;
    __label__ = 23;
    break;
   case 23:
    var $78;
    var $80 = STRING_TABLE.___gmpn_clz_tab + ($69 >>> ($78 >>> 0)) | 0;
    var $84 = $78 - 2 + (HEAPU8[$80] & 255) | 0;
    var $_01 = $a >>> ($84 >>> 0);
    var $result_bit1_0 = $84 << 1 & ($13 >>> 1 ^ $13);
    var $b_ptr_1 = $12;
    var $b_low_1 = $13;
    var $b_abs_size_1 = $5;
    __label__ = 24;
    break;
   case 24:
    var $b_abs_size_1;
    var $b_low_1;
    var $b_ptr_1;
    var $result_bit1_0;
    var $_01;
    if (($_01 | 0) == 1) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    var $_0 = 1 - ($result_bit1_0 & 2) | 0;
    __label__ = 30;
    break;
   case 26:
    if (($b_abs_size_1 | 0) > 9) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $98 = ___gmpn_mod_1($b_ptr_1, $b_abs_size_1, $_01);
    var $result_bit1_1 = $result_bit1_0;
    var $b_rem_0 = $98;
    __label__ = 29;
    break;
   case 28:
    var $100 = $_01 ^ $result_bit1_0;
    var $101 = ___gmpn_modexact_1c_odd($b_ptr_1, $b_abs_size_1, $_01, 0);
    var $result_bit1_1 = $100;
    var $b_rem_0 = $101;
    __label__ = 29;
    break;
   case 29:
    var $b_rem_0;
    var $result_bit1_1;
    var $105 = ___gmpn_jacobi_base($b_rem_0, $_01, $result_bit1_1 ^ $_01 & $b_low_1);
    var $_0 = $105;
    __label__ = 30;
    break;
   case 30:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_ui_kronecker["X"] = 1;

function ___gmpz_kronecker_si($a, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$a + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = (($b | 0) == 1 | ($b | 0) == -1) & 1;
    __label__ = 20;
    break;
   case 4:
    var $10 = ($2 & $b) >>> 30 & 2;
    var $13 = ($b | 0) > -1 ? $b : -$b | 0;
    var $15 = HEAPU32[$a + 8 >> 2];
    if (($13 & 1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $result_bit1_0 = $10;
      var $b_limb_0 = $13;
      __label__ = 14;
      break;
    }
   case 5:
    var $19 = HEAPU32[$15 >> 2];
    if (($13 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 6:
    if (($2 | 0) == -1 || ($2 | 0) == 1) {
      __label__ = 7;
      break;
    } else {
      var $25 = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $25 = ($19 | 0) == 1;
    __label__ = 8;
    break;
   case 8:
    var $25;
    var $_0 = $25 & 1;
    __label__ = 20;
    break;
   case 9:
    if (($19 & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 20;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $32 = $13 & -$13;
    if ($32 >>> 0 < 65536) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $36 = $32 >>> 0 < 256 ? 1 : 9;
    var $41 = $36;
    __label__ = 13;
    break;
   case 12:
    var $39 = $32 >>> 0 < 16777216 ? 17 : 25;
    var $41 = $39;
    __label__ = 13;
    break;
   case 13:
    var $41;
    var $43 = STRING_TABLE.___gmpn_clz_tab + ($32 >>> ($41 >>> 0)) | 0;
    var $47 = $41 - 2 + (HEAPU8[$43] & 255) | 0;
    var $result_bit1_0 = $47 << 1 & ($19 >>> 1 ^ $19) ^ $10;
    var $b_limb_0 = $13 >>> ($47 >>> 0);
    __label__ = 14;
    break;
   case 14:
    var $b_limb_0;
    var $result_bit1_0;
    if (($b_limb_0 | 0) == 1) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $_0 = 1 - ($result_bit1_0 & 2) | 0;
    __label__ = 20;
    break;
   case 16:
    var $63 = $result_bit1_0 ^ $2 >>> 30 & 2 & $b_limb_0;
    var $66 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($66 | 0) > 9) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $69 = ___gmpn_mod_1($15, $66, $b_limb_0);
    var $result_bit1_1 = $63;
    var $a_rem_0 = $69;
    __label__ = 19;
    break;
   case 18:
    var $71 = $63 ^ $b_limb_0;
    var $72 = ___gmpn_modexact_1c_odd($15, $66, $b_limb_0, 0);
    var $result_bit1_1 = $71;
    var $a_rem_0 = $72;
    __label__ = 19;
    break;
   case 19:
    var $a_rem_0;
    var $result_bit1_1;
    var $74 = ___gmpn_jacobi_base($a_rem_0, $b_limb_0, $result_bit1_1);
    var $_0 = $74;
    __label__ = 20;
    break;
   case 20:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_kronecker_si["X"] = 1;

function ___gmpz_kronecker_ui($a, $b) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$a + 4 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($b | 0) == 1 & 1;
    __label__ = 21;
    break;
   case 4:
    var $9 = HEAPU32[$a + 8 >> 2];
    if (($b & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $result_bit1_0 = $b & 2 & $2 >>> 30;
    var $_02 = $b;
    __label__ = 15;
    break;
   case 6:
    var $17 = HEAPU32[$9 >> 2];
    if (($b | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    if (($2 | 0) == -1 || ($2 | 0) == 1) {
      __label__ = 8;
      break;
    } else {
      var $23 = 0;
      __label__ = 9;
      break;
    }
   case 8:
    var $23 = ($17 | 0) == 1;
    __label__ = 9;
    break;
   case 9:
    var $23;
    var $_0 = $23 & 1;
    __label__ = 21;
    break;
   case 10:
    if (($17 & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 21;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $30 = $b & -$b;
    if ($30 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $34 = $30 >>> 0 < 256 ? 1 : 9;
    var $39 = $34;
    __label__ = 14;
    break;
   case 13:
    var $37 = $30 >>> 0 < 16777216 ? 17 : 25;
    var $39 = $37;
    __label__ = 14;
    break;
   case 14:
    var $39;
    var $41 = STRING_TABLE.___gmpn_clz_tab + ($30 >>> ($39 >>> 0)) | 0;
    var $45 = $39 - 2 + (HEAPU8[$41] & 255) | 0;
    var $46 = $b >>> ($45 >>> 0);
    var $result_bit1_0 = $45 << 1 & ($17 >>> 1 ^ $17) ^ $2 >>> 30 & 2 & $46;
    var $_02 = $46;
    __label__ = 15;
    break;
   case 15:
    var $_02;
    var $result_bit1_0;
    if (($_02 | 0) == 1) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $_0 = 1 - ($result_bit1_0 & 2) | 0;
    __label__ = 21;
    break;
   case 17:
    var $63 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($63 | 0) > 9) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $66 = ___gmpn_mod_1($9, $63, $_02);
    var $result_bit1_1 = $result_bit1_0;
    var $a_rem_0 = $66;
    __label__ = 20;
    break;
   case 19:
    var $68 = $result_bit1_0 ^ $_02;
    var $69 = ___gmpn_modexact_1c_odd($9, $63, $_02, 0);
    var $result_bit1_1 = $68;
    var $a_rem_0 = $69;
    __label__ = 20;
    break;
   case 20:
    var $a_rem_0;
    var $result_bit1_1;
    var $71 = ___gmpn_jacobi_base($a_rem_0, $_02, $result_bit1_1);
    var $_0 = $71;
    __label__ = 21;
    break;
   case 21:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_kronecker_ui["X"] = 1;

function ___gmpz_lcm($r, $u, $v) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $g = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $2 = HEAP32[$u + 4 >> 2];
    var $4 = HEAP32[$v + 4 >> 2];
    if (($2 | 0) == 0 | ($4 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    __label__ = 14;
    break;
   case 4:
    var $12 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $15 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    if (($15 | 0) == 1) {
      var $_0 = $u;
      var $_01 = $v;
      var $usize_0 = $12;
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 5:
    var $usize_0;
    var $_01;
    var $_0;
    var $18 = $usize_0 + 1 | 0;
    if (($18 | 0) > (HEAP32[$r >> 2] | 0)) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $23 = ___gmpz_realloc($r, $18);
    __label__ = 7;
    break;
   case 7:
    var $26 = HEAPU32[$_0 + 8 >> 2];
    var $29 = HEAPU32[HEAP32[$_01 + 8 >> 2] >> 2];
    var $30 = ___gmpn_gcd_1($26, $usize_0, $29);
    var $31 = Math.floor(($29 >>> 0) / ($30 >>> 0));
    var $33 = HEAPU32[$r + 8 >> 2];
    var $34 = ___gmpn_mul_1($33, $26, $usize_0, $31);
    HEAP32[$33 + ($usize_0 << 2) >> 2] = $34;
    var $38 = (($34 | 0) != 0 & 1) + $usize_0 | 0;
    HEAP32[$r + 4 >> 2] = $38;
    __label__ = 14;
    break;
   case 8:
    if (($12 | 0) == 1) {
      var $_0 = $v;
      var $_01 = $u;
      var $usize_0 = $15;
      __label__ = 5;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $44 = ($12 | 0) > ($15 | 0) ? $12 : $15;
    var $45 = $g | 0;
    HEAP32[$g >> 2] = $44;
    var $47 = $44 << 2;
    if ($47 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $50 = STACKTOP;
    STACKTOP += $47;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $55 = $50;
    var $54 = 0;
    __label__ = 12;
    break;
   case 11:
    var $52 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $47);
    var $55 = $52;
    var $54 = HEAP32[$__tmp_marker >> 2];
    __label__ = 12;
    break;
   case 12:
    var $54;
    var $55;
    HEAP32[$g + 8 >> 2] = $55;
    ___gmpz_gcd($45, $u, $v);
    ___gmpz_divexact($45, $u, $45);
    ___gmpz_mul($r, $45, $v);
    var $58 = $r + 4 | 0;
    var $59 = HEAP32[$58 >> 2];
    var $62 = ($59 | 0) > -1 ? $59 : -$59 | 0;
    HEAP32[$58 >> 2] = $62;
    if (($54 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmp_tmp_reentrant_free($54);
    __label__ = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_lcm["X"] = 1;

function ___gmpz_lcm_ui($r, $u, $v) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    if (($2 | 0) == 0 | ($v | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$r + 4 >> 2] = 0;
    __label__ = 7;
    break;
   case 4:
    var $10 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $11 = $10 + 1 | 0;
    if (($11 | 0) > (HEAP32[$r >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $16 = ___gmpz_realloc($r, $11);
    __label__ = 6;
    break;
   case 6:
    var $19 = HEAPU32[$u + 8 >> 2];
    var $20 = ___gmpn_gcd_1($19, $10, $v);
    var $21 = Math.floor(($v >>> 0) / ($20 >>> 0));
    var $23 = HEAPU32[$r + 8 >> 2];
    var $24 = ___gmpn_mul_1($23, $19, $10, $21);
    var $25 = $23 + ($10 << 2) | 0;
    HEAP32[$25 >> 2] = $24;
    var $28 = (($24 | 0) != 0 & 1) + $10 | 0;
    HEAP32[$r + 4 >> 2] = $28;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_lucnum2_ui($ln, $lnsub1, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if ($n >>> 0 < 47) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $5 = HEAP32[___gmp_fib_table + ($n + 1 << 2) >> 2];
    var $7 = HEAPU32[___gmp_fib_table + ($n << 2) >> 2];
    var $9 = ($7 << 1) + $5 | 0;
    var $11 = HEAP32[$ln + 8 >> 2];
    HEAP32[$11 >> 2] = $9;
    HEAP32[$ln + 4 >> 2] = 1;
    var $13 = ($n | 0) == 0;
    if ($13) {
      var $18 = 1;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $18 = ($5 << 1) - $7 | 0;
    __label__ = 5;
    break;
   case 5:
    var $18;
    var $20 = HEAP32[$lnsub1 + 8 >> 2];
    HEAP32[$20 >> 2] = $18;
    var $21 = $13 ? -1 : 1;
    HEAP32[$lnsub1 + 4 >> 2] = $21;
    __label__ = 15;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $24 = $n >>> 5;
    var $25 = (i64Math.multiply($24, 0, 23, 0), i64Math.result[0]);
    var $26 = $25 >>> 5;
    var $29 = ($25 >>> 3 & 536870908) + 16 | 0;
    if ($29 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $32 = STACKTOP;
    STACKTOP += $29;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $36 = $32;
    __label__ = 9;
    break;
   case 8:
    var $34 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $29);
    var $36 = $34;
    __label__ = 9;
    break;
   case 9:
    var $36;
    var $37 = $36;
    var $38 = $26 + 5 | 0;
    if (($38 | 0) > (HEAP32[$ln >> 2] | 0)) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $43 = ___gmpz_realloc($ln, $38);
    __label__ = 11;
    break;
   case 11:
    if (($38 | 0) > (HEAP32[$lnsub1 >> 2] | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $49 = ___gmpz_realloc($lnsub1, $38);
    __label__ = 13;
    break;
   case 13:
    var $51 = HEAP32[$ln + 8 >> 2];
    var $53 = HEAPU32[$lnsub1 + 8 >> 2];
    var $54 = ___gmpn_fib2_ui($53, $37, $n);
    var $55 = ___gmpn_lshift($51, $37, $54, 1);
    var $56 = ___gmpn_add_n($51, $51, $53, $54);
    var $57 = $56 + $55 | 0;
    var $58 = $51 + ($54 << 2) | 0;
    HEAP32[$58 >> 2] = $57;
    var $61 = (($57 | 0) != 0 & 1) + $54 | 0;
    HEAP32[$ln + 4 >> 2] = $61;
    var $63 = ___gmpn_lshift($53, $53, $54, 1);
    var $64 = ___gmpn_sub_n($53, $53, $37, $54);
    HEAP32[$53 + ($54 << 2) >> 2] = $63 - $64 | 0;
    HEAP32[$lnsub1 + 4 >> 2] = (($63 | 0) != ($64 | 0) & 1) + $54 | 0;
    var $71 = HEAP32[$__tmp_marker >> 2];
    if (($71 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    ___gmp_tmp_reentrant_free($71);
    __label__ = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_lucnum2_ui["X"] = 1;

function ___gmpz_lucnum_ui($ln, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    if ($n >>> 0 < 47) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $9 = (HEAP32[___gmp_fib_table + ($n << 2) >> 2] << 1) + HEAP32[___gmp_fib_table + ($n + 1 << 2) >> 2] | 0;
    var $11 = HEAP32[$ln + 8 >> 2];
    HEAP32[$11 >> 2] = $9;
    HEAP32[$ln + 4 >> 2] = 1;
    __label__ = 28;
    break;
   case 4:
    var $14 = $n >>> 5;
    var $15 = (i64Math.multiply($14, 0, 23, 0), i64Math.result[0]);
    var $17 = ($15 >>> 5) + 6 | 0;
    if (($17 | 0) > (HEAP32[$ln >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $22 = ___gmpz_realloc($ln, $17);
    __label__ = 6;
    break;
   case 6:
    var $25 = HEAP32[$ln + 8 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $26 = $17 << 2;
    if ($26 >>> 0 < 65536) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $29 = STACKTOP;
    STACKTOP += $26;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $33 = $29;
    __label__ = 9;
    break;
   case 8:
    var $31 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $26);
    var $33 = $31;
    __label__ = 9;
    break;
   case 9:
    var $33;
    var $_0 = $n;
    var $zeros_0 = 0;
    var $xp_0 = $33;
    var $lp_0 = $25;
    __label__ = 10;
    break;
   case 10:
    var $lp_0;
    var $xp_0;
    var $zeros_0;
    var $_0;
    if (($_0 & 1 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $39 = $_0 >>> 1;
    var $41 = (i64Math.multiply($_0 >>> 6, 0, 23, 0), i64Math.result[0]);
    var $44 = ($41 >>> 3 & 268435452) + 16 | 0;
    if ($44 >>> 0 < 65536) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $47 = STACKTOP;
    STACKTOP += $44;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $51 = $47;
    __label__ = 14;
    break;
   case 13:
    var $49 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $44);
    var $51 = $49;
    __label__ = 14;
    break;
   case 14:
    var $51;
    var $52 = $51;
    var $53 = ___gmpn_fib2_ui($xp_0, $52, $39);
    var $59 = $53 - ((HEAP32[$52 + ($53 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $60 = ___gmpn_lshift($xp_0, $xp_0, $53, 1);
    var $61 = ___gmpn_add_n($xp_0, $xp_0, $52, $53);
    var $62 = $61 + $60 | 0;
    HEAP32[$xp_0 + ($53 << 2) >> 2] = $62;
    var $66 = (($62 | 0) != 0 & 1) + $53 | 0;
    var $67 = ___gmpn_mul($lp_0, $xp_0, $66, $52, $59);
    var $70 = ((($67 | 0) == 0) << 31 >> 31) + $59 + $66 | 0;
    var $71 = ___gmpn_lshift($xp_0, $lp_0, $70, 2);
    var $72 = ___gmpn_add_n($lp_0, $lp_0, $xp_0, $70);
    var $73 = $72 + $71 | 0;
    var $74 = $lp_0 + ($70 << 2) | 0;
    HEAP32[$74 >> 2] = $73;
    var $77 = (($73 | 0) != 0 & 1) + $70 | 0;
    var $80 = HEAPU32[$lp_0 >> 2];
    if (($_0 & 2 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    HEAP32[$lp_0 >> 2] = $80 + 4 | 0;
    var $_1_ph = $_0;
    var $zeros_1_ph = $zeros_0;
    var $lsize_0_ph = $77;
    var $xp_1_ph = $xp_0;
    var $lp_1_ph = $lp_0;
    __label__ = 20;
    break;
   case 16:
    HEAP32[$lp_0 >> 2] = $80 - 4 | 0;
    if ($80 >>> 0 < 4) {
      var $__p_0 = $lp_0;
      __label__ = 17;
      break;
    } else {
      var $_1_ph = $_0;
      var $zeros_1_ph = $zeros_0;
      var $lsize_0_ph = $77;
      var $xp_1_ph = $xp_0;
      var $lp_1_ph = $lp_0;
      __label__ = 20;
      break;
    }
   case 17:
    var $__p_0;
    var $86 = $__p_0 + 4 | 0;
    var $87 = HEAP32[$86 >> 2];
    var $88 = $87 - 1 | 0;
    HEAP32[$86 >> 2] = $88;
    if (($87 | 0) == 0) {
      var $__p_0 = $86;
      __label__ = 17;
      break;
    } else {
      var $_1_ph = $_0;
      var $zeros_1_ph = $zeros_0;
      var $lsize_0_ph = $77;
      var $xp_1_ph = $xp_0;
      var $lp_1_ph = $lp_0;
      __label__ = 20;
      break;
    }
   case 18:
    var $91 = $zeros_0 + 1 | 0;
    var $92 = $_0 >>> 1;
    if ($_0 >>> 0 < 94) {
      __label__ = 19;
      break;
    } else {
      var $xp_0 = $lp_0;
      var $_0 = $92;
      var $zeros_0 = $91;
      var $lp_0 = $xp_0;
      __label__ = 10;
      break;
    }
   case 19:
    var $101 = (HEAP32[___gmp_fib_table + ($92 << 2) >> 2] << 1) + HEAP32[___gmp_fib_table + ($92 + 1 << 2) >> 2] | 0;
    HEAP32[$xp_0 >> 2] = $101;
    var $_1_ph = $92;
    var $zeros_1_ph = $91;
    var $lsize_0_ph = 1;
    var $xp_1_ph = $lp_0;
    var $lp_1_ph = $xp_0;
    __label__ = 20;
    break;
   case 20:
    var $lp_1_ph;
    var $xp_1_ph;
    var $lsize_0_ph;
    var $zeros_1_ph;
    var $_1_ph;
    if (($zeros_1_ph | 0) == 0) {
      var $lsize_0_lcssa = $lsize_0_ph;
      __label__ = 26;
      break;
    } else {
      var $lp_14 = $lp_1_ph;
      var $xp_15 = $xp_1_ph;
      var $lsize_06 = $lsize_0_ph;
      var $zeros_17 = $zeros_1_ph;
      var $_18 = $_1_ph;
      __label__ = 21;
      break;
    }
   case 21:
    var $_18;
    var $zeros_17;
    var $lsize_06;
    var $xp_15;
    var $lp_14;
    ___gmpn_sqr($xp_15, $lp_14, $lsize_06);
    var $103 = $lsize_06 << 1;
    var $109 = $103 - ((HEAP32[$xp_15 + ($103 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $112 = HEAPU32[$xp_15 >> 2];
    if (($_18 & 1 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    HEAP32[$xp_15 >> 2] = $112 + 2 | 0;
    var $_2 = 0;
    __label__ = 25;
    break;
   case 23:
    HEAP32[$xp_15 >> 2] = $112 - 2 | 0;
    if ($112 >>> 0 < 2) {
      var $__p2_0 = $xp_15;
      __label__ = 24;
      break;
    } else {
      var $_2 = $_18;
      __label__ = 25;
      break;
    }
   case 24:
    var $__p2_0;
    var $118 = $__p2_0 + 4 | 0;
    var $119 = HEAP32[$118 >> 2];
    var $120 = $119 - 1 | 0;
    HEAP32[$118 >> 2] = $120;
    if (($119 | 0) == 0) {
      var $__p2_0 = $118;
      __label__ = 24;
      break;
    } else {
      var $_2 = $_18;
      __label__ = 25;
      break;
    }
   case 25:
    var $_2;
    var $122 = $zeros_17 - 1 | 0;
    if (($122 | 0) == 0) {
      var $lsize_0_lcssa = $109;
      __label__ = 26;
      break;
    } else {
      var $lp_14 = $xp_15;
      var $lsize_06 = $109;
      var $zeros_17 = $122;
      var $_18 = $_2;
      var $xp_15 = $lp_14;
      __label__ = 21;
      break;
    }
   case 26:
    var $lsize_0_lcssa;
    HEAP32[$ln + 4 >> 2] = $lsize_0_lcssa;
    var $125 = HEAP32[$__tmp_marker >> 2];
    if (($125 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    ___gmp_tmp_reentrant_free($125);
    __label__ = 28;
    break;
   case 28:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_lucnum_ui["X"] = 1;

function ___gmpz_millerrabin($n, $reps) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 84;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $nm1 = __stackBase__;
    var $nm3 = __stackBase__ + 12;
    var $x = __stackBase__ + 24;
    var $y = __stackBase__ + 36;
    var $q = __stackBase__ + 48;
    var $rstate = __stackBase__ + 60;
    var $__tmp_marker = __stackBase__ + 80;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $1 = $nm1 | 0;
    var $2 = $n + 4 | 0;
    var $3 = HEAP32[$2 >> 2];
    var $4 = $3 + 1 | 0;
    HEAP32[$nm1 >> 2] = $4;
    var $7 = ($3 << 2) + 4 | 0;
    if ($7 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $10 = STACKTOP;
    STACKTOP += $7;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $14 = $10;
    __label__ = 5;
    break;
   case 4:
    var $12 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $7);
    var $14 = $12;
    __label__ = 5;
    break;
   case 5:
    var $14;
    HEAP32[$nm1 + 8 >> 2] = $14;
    ___gmpz_sub_ui($1, $n, 1);
    var $17 = $x | 0;
    var $18 = HEAPU32[$2 >> 2];
    HEAP32[$x >> 2] = $18 + 1 | 0;
    var $22 = ($18 << 2) + 4 | 0;
    if ($22 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $25 = STACKTOP;
    STACKTOP += $22;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $30 = $25;
    var $29 = $18;
    __label__ = 8;
    break;
   case 7:
    var $27 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $22);
    var $30 = $27;
    var $29 = HEAP32[$2 >> 2];
    __label__ = 8;
    break;
   case 8:
    var $29;
    var $30;
    HEAP32[$x + 8 >> 2] = $30;
    var $33 = $y | 0;
    HEAP32[$y >> 2] = $29 << 1;
    var $36 = $29 << 3;
    if ($36 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $39 = STACKTOP;
    STACKTOP += $36;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $43 = $39;
    __label__ = 11;
    break;
   case 10:
    var $41 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $36);
    var $43 = $41;
    __label__ = 11;
    break;
   case 11:
    var $43;
    HEAP32[$y + 8 >> 2] = $43;
    ___gmpz_set_ui($17, 210);
    ___gmpz_powm($33, $17, $1, $n);
    var $46 = ___gmpz_cmp_ui($33, 1);
    if (($46 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $49 = HEAP32[$__tmp_marker >> 2];
    if (($49 | 0) == 0) {
      var $_0 = 0;
      __label__ = 24;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmp_tmp_reentrant_free($49);
    var $_0 = 0;
    __label__ = 24;
    break;
   case 14:
    var $53 = $q | 0;
    var $54 = HEAP32[$2 >> 2];
    HEAP32[$q >> 2] = $54;
    var $56 = $54 << 2;
    if ($56 >>> 0 < 65536) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $59 = STACKTOP;
    STACKTOP += $56;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $63 = $59;
    __label__ = 17;
    break;
   case 16:
    var $61 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $56);
    var $63 = $61;
    __label__ = 17;
    break;
   case 17:
    var $63;
    HEAP32[$q + 8 >> 2] = $63;
    var $66 = ___gmpz_scan1($1, 0);
    ___gmpz_tdiv_q_2exp($53, $1, $66);
    var $67 = $nm3 | 0;
    var $68 = HEAP32[$2 >> 2];
    var $69 = $68 + 1 | 0;
    HEAP32[$nm3 >> 2] = $69;
    var $72 = ($68 << 2) + 4 | 0;
    if ($72 >>> 0 < 65536) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $75 = STACKTOP;
    STACKTOP += $72;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $79 = $75;
    __label__ = 20;
    break;
   case 19:
    var $77 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $72);
    var $79 = $77;
    __label__ = 20;
    break;
   case 20:
    var $79;
    HEAP32[$nm3 + 8 >> 2] = $79;
    ___gmpz_sub_ui($67, $n, 3);
    var $82 = $rstate | 0;
    ___gmp_randinit_default($82);
    if (($reps | 0) < 1) {
      var $is_prime_0_lcssa = 1;
      __label__ = 22;
      break;
    } else {
      var $r_01 = 0;
      __label__ = 21;
      break;
    }
   case 21:
    var $r_01;
    ___gmpz_urandomm($17, $82, $67);
    ___gmpz_add_ui($17, $17, 2);
    var $84 = _millerrabin($n, $1, $17, $33, $53, $66);
    var $85 = $r_01 + 1 | 0;
    if (($85 | 0) >= ($reps | 0) | ($84 | 0) == 0) {
      var $is_prime_0_lcssa = $84;
      __label__ = 22;
      break;
    } else {
      var $r_01 = $85;
      __label__ = 21;
      break;
    }
   case 22:
    var $is_prime_0_lcssa;
    ___gmp_randclear($82);
    var $88 = HEAP32[$__tmp_marker >> 2];
    if (($88 | 0) == 0) {
      var $_0 = $is_prime_0_lcssa;
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    ___gmp_tmp_reentrant_free($88);
    var $_0 = $is_prime_0_lcssa;
    __label__ = 24;
    break;
   case 24:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_millerrabin["X"] = 1;

function _millerrabin($n, $nm1, $x, $y, $q, $k) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    ___gmpz_powm($y, $x, $q, $n);
    var $1 = ___gmpz_cmp_ui($y, 1);
    if (($1 | 0) == 0) {
      var $_0 = 1;
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = ___gmpz_cmp($y, $nm1);
    if (($4 | 0) == 0) {
      var $_0 = 1;
      __label__ = 7;
      break;
    } else {
      var $i_0 = 1;
      __label__ = 4;
      break;
    }
   case 4:
    var $i_0;
    if ($i_0 >>> 0 < $k >>> 0) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 7;
      break;
    }
   case 5:
    ___gmpz_powm_ui($y, $y, 2, $n);
    var $8 = ___gmpz_cmp($y, $nm1);
    if (($8 | 0) == 0) {
      var $_0 = 1;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $11 = ___gmpz_cmp_ui($y, 1);
    if (($11 | 0) == 0) {
      var $_0 = 0;
      __label__ = 7;
      break;
    } else {
      var $i_0 = $i_0 + 1 | 0;
      __label__ = 4;
      break;
    }
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_mod($rem, $dividend, $divisor) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $temp_divisor = __stackBase__;
    var $__tmp_marker = __stackBase__ + 12;
    var $2 = HEAP32[$divisor + 4 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($rem | 0) == ($divisor | 0)) {
      __label__ = 3;
      break;
    } else {
      var $_0 = $divisor;
      __label__ = 7;
      break;
    }
   case 3:
    var $5 = $temp_divisor | 0;
    var $8 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    HEAP32[$temp_divisor >> 2] = $8;
    var $10 = $8 << 2;
    if ($10 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $13 = STACKTOP;
    STACKTOP += $10;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $17 = $13;
    __label__ = 6;
    break;
   case 5:
    var $15 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $10);
    var $17 = $15;
    __label__ = 6;
    break;
   case 6:
    var $17;
    HEAP32[$temp_divisor + 8 >> 2] = $17;
    ___gmpz_set($5, $divisor);
    var $_0 = $5;
    __label__ = 7;
    break;
   case 7:
    var $_0;
    ___gmpz_tdiv_r($rem, $dividend, $_0);
    if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if ((HEAP32[$dividend + 4 >> 2] | 0) < 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 9:
    if ((HEAP32[$_0 + 4 >> 2] | 0) < 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    ___gmpz_sub($rem, $rem, $_0);
    __label__ = 12;
    break;
   case 11:
    ___gmpz_add($rem, $rem, $_0);
    __label__ = 12;
    break;
   case 12:
    var $34 = HEAP32[$__tmp_marker >> 2];
    if (($34 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    ___gmp_tmp_reentrant_free($34);
    __label__ = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_mod["X"] = 1;

function ___gmpz_mul_si($prod, $mult, $small_mult) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$mult + 4 >> 2];
    if (($2 | 0) == 0 | ($small_mult | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$prod + 4 >> 2] = 0;
    __label__ = 7;
    break;
   case 4:
    var $10 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $13 = ($small_mult | 0) > -1 ? $small_mult : -$small_mult | 0;
    var $14 = $10 + 1 | 0;
    if (($14 | 0) > (HEAP32[$prod >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $19 = ___gmpz_realloc($prod, $14);
    __label__ = 6;
    break;
   case 6:
    var $22 = HEAP32[$prod + 8 >> 2];
    var $24 = HEAP32[$mult + 8 >> 2];
    var $25 = ___gmpn_mul_1($22, $24, $10, $13);
    var $26 = $22 + ($10 << 2) | 0;
    HEAP32[$26 >> 2] = $25;
    var $29 = (($25 | 0) != 0 & 1) + $10 | 0;
    var $32 = ($2 ^ $small_mult | 0) < 0 ? -$29 | 0 : $29;
    HEAP32[$prod + 4 >> 2] = $32;
    __label__ = 7;
    break;
   case 7:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_n_pow_ui($r, $bp, $bsize, $e) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $b_twolimbs = __stackBase__;
    var $__tmp_marker = __stackBase__ + 8;
    if (($e | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $4 = HEAP32[$r + 8 >> 2];
    HEAP32[$4 >> 2] = 1;
    HEAP32[$r + 4 >> 2] = 1;
    __label__ = 79;
    break;
   case 4:
    if (($bsize | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$r + 4 >> 2] = 0;
    __label__ = 79;
    break;
   case 6:
    if (($bsize | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      var $16 = 0;
      __label__ = 8;
      break;
    }
   case 7:
    var $16 = ($e & 1 | 0) != 0;
    __label__ = 8;
    break;
   case 8:
    var $16;
    var $19 = ($bsize | 0) > -1 ? $bsize : -$bsize | 0;
    var $20 = $r + 8 | 0;
    var $22 = (HEAP32[$20 >> 2] | 0) != ($bp | 0);
    var $blimb_036 = HEAP32[$bp >> 2];
    if (($blimb_036 | 0) == 0) {
      var $blimb_0_in37 = $bp;
      var $rtwos_limbs_038 = 0;
      var $_0139 = $19;
      __label__ = 9;
      break;
    } else {
      var $blimb_0_in_lcssa = $bp;
      var $rtwos_limbs_0_lcssa = 0;
      var $_01_lcssa = $19;
      var $blimb_0_lcssa = $blimb_036;
      __label__ = 10;
      break;
    }
   case 9:
    var $_0139;
    var $rtwos_limbs_038;
    var $blimb_0_in37;
    var $24 = $rtwos_limbs_038 + $e | 0;
    var $25 = $_0139 - 1 | 0;
    var $26 = $blimb_0_in37 + 4 | 0;
    var $blimb_0 = HEAP32[$26 >> 2];
    if (($blimb_0 | 0) == 0) {
      var $blimb_0_in37 = $26;
      var $rtwos_limbs_038 = $24;
      var $_0139 = $25;
      __label__ = 9;
      break;
    } else {
      var $blimb_0_in_lcssa = $26;
      var $rtwos_limbs_0_lcssa = $24;
      var $_01_lcssa = $25;
      var $blimb_0_lcssa = $blimb_0;
      __label__ = 10;
      break;
    }
   case 10:
    var $blimb_0_lcssa;
    var $_01_lcssa;
    var $rtwos_limbs_0_lcssa;
    var $blimb_0_in_lcssa;
    var $29 = $blimb_0_lcssa & -$blimb_0_lcssa;
    if ($29 >>> 0 < 65536) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $33 = $29 >>> 0 < 256 ? 1 : 9;
    var $38 = $33;
    __label__ = 13;
    break;
   case 12:
    var $36 = $29 >>> 0 < 16777216 ? 17 : 25;
    var $38 = $36;
    __label__ = 13;
    break;
   case 13:
    var $38;
    var $40 = STRING_TABLE.___gmpn_clz_tab + ($29 >>> ($38 >>> 0)) | 0;
    var $42 = HEAPU8[$40] & 255;
    var $44 = $38 - 33 + $42 | 0;
    var $45 = $44 + 31 | 0;
    var $46 = $blimb_0_lcssa >>> ($45 >>> 0);
    var $47 = (i64Math.multiply($45, 0, $e, 0), i64Math.result[0]);
    var $49 = ($47 >>> 5) + $rtwos_limbs_0_lcssa | 0;
    var $50 = $47 & 31;
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($_01_lcssa | 0) == 1) {
      var $_04 = $e;
      var $blimb_1 = $46;
      var $rl_0 = 1;
      __label__ = 14;
      break;
    } else if (($_01_lcssa | 0) == 2) {
      __label__ = 21;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 14:
    var $rl_0;
    var $blimb_1;
    var $_04;
    if ($blimb_1 >>> 0 < 65536) {
      __label__ = 15;
      break;
    } else {
      var $_15 = $_04;
      var $rl_2 = $rl_0;
      __label__ = 19;
      break;
    }
   case 15:
    if (($_04 & 1 | 0) == 0) {
      var $rl_1 = $rl_0;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $56 = (i64Math.multiply($blimb_1, 0, $rl_0, 0), i64Math.result[0]);
    var $rl_1 = $56;
    __label__ = 17;
    break;
   case 17:
    var $rl_1;
    var $58 = $_04 >>> 1;
    if (($58 | 0) == 0) {
      var $_15 = 0;
      var $rl_2 = $rl_1;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $61 = (i64Math.multiply($blimb_1, 0, $blimb_1, 0), i64Math.result[0]);
    var $_04 = $58;
    var $blimb_1 = $61;
    var $rl_0 = $rl_1;
    __label__ = 14;
    break;
   case 19:
    var $rl_2;
    var $_15;
    if (($50 | 0) == 0 | ($rl_2 | 0) == 1) {
      var $_2 = $blimb_0_in_lcssa;
      var $_4 = 1;
      var $_26 = $_15;
      var $blimb_3 = $blimb_1;
      var $rl_3 = $rl_2;
      var $rtwos_bits_0 = $50;
      __label__ = 38;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $68 = ($rl_2 >>> ((32 - $50 | 0) >>> 0) | 0) == 0;
    var $_ = $68 ? 0 : $50;
    var $69 = $68 ? $50 : 0;
    var $_2 = $blimb_0_in_lcssa;
    var $_4 = 1;
    var $_26 = $_15;
    var $blimb_3 = $blimb_1;
    var $rl_3 = $rl_2 << $69;
    var $rtwos_bits_0 = $_;
    __label__ = 38;
    break;
   case 21:
    var $72 = HEAPU32[$blimb_0_in_lcssa + 4 >> 2];
    if (($45 | 0) == 0) {
      var $blimb_2 = $46;
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $blimb_2 = $72 << 1 - $44 | $46;
    __label__ = 23;
    break;
   case 23:
    var $blimb_2;
    var $79 = $72 >>> ($45 >>> 0);
    if (($79 | 0) == 0) {
      var $_04 = $e;
      var $blimb_1 = $blimb_2;
      var $rl_0 = 1;
      __label__ = 14;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $82 = $b_twolimbs | 0;
    HEAP32[$82 >> 2] = $blimb_2;
    HEAP32[$b_twolimbs + 4 >> 2] = $79;
    var $_2 = $82;
    var $_4 = 2;
    var $_26 = $e;
    var $blimb_3 = $79;
    var $rl_3 = 1;
    var $rtwos_bits_0 = $50;
    __label__ = 38;
    break;
   case 25:
    var $85 = ($45 | 0) == 0;
    if ($22 & $85) {
      var $_1 = $blimb_0_in_lcssa;
      var $_3 = $_01_lcssa;
      __label__ = 37;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $87 = $_01_lcssa << 2;
    if ($87 >>> 0 < 65536) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $90 = STACKTOP;
    STACKTOP += $87;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $94 = $90;
    __label__ = 29;
    break;
   case 28:
    var $92 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $87);
    var $94 = $92;
    __label__ = 29;
    break;
   case 29:
    var $94;
    var $95 = $94;
    if ($85) {
      __label__ = 30;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 30:
    if (($_01_lcssa | 0) == 0) {
      var $_1 = $95;
      var $_3 = 0;
      __label__ = 37;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $99 = $_01_lcssa - 1 | 0;
    var $100 = HEAPU32[$blimb_0_in_lcssa >> 2];
    if (($99 | 0) == 0) {
      var $__dst_1 = $95;
      var $__x_1 = $100;
      __label__ = 35;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $scevgep = $94 + ($87 - 4) | 0;
    var $__n_0 = $99;
    var $__dst_0 = $95;
    var $_0_pn = $blimb_0_in_lcssa;
    var $__x_0 = $100;
    __label__ = 33;
    break;
   case 33:
    var $__x_0;
    var $_0_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $105 = HEAP32[$__src_0 >> 2];
    var $106 = $__n_0 - 1 | 0;
    if (($106 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      var $__n_0 = $106;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_0_pn = $__src_0;
      var $__x_0 = $105;
      __label__ = 33;
      break;
    }
   case 34:
    var $__dst_1 = $scevgep;
    var $__x_1 = $105;
    __label__ = 35;
    break;
   case 35:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $_1 = $95;
    var $_3 = $_01_lcssa;
    __label__ = 37;
    break;
   case 36:
    var $110 = ___gmpn_rshift($95, $blimb_0_in_lcssa, $_01_lcssa, $45);
    var $_1 = $95;
    var $_3 = $_01_lcssa - ((HEAP32[$95 + ($_01_lcssa - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 37;
    break;
   case 37:
    var $_3;
    var $_1;
    var $_2 = $_1;
    var $_4 = $_3;
    var $_26 = $e;
    var $blimb_3 = HEAP32[$_1 + ($_3 - 1 << 2) >> 2];
    var $rl_3 = 1;
    var $rtwos_bits_0 = $50;
    __label__ = 38;
    break;
   case 38:
    var $rtwos_bits_0;
    var $rl_3;
    var $blimb_3;
    var $_26;
    var $_4;
    var $_2;
    if ($blimb_3 >>> 0 < 65536) {
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    var $125 = $blimb_3 >>> 0 < 256 ? 1 : 9;
    var $130 = $125;
    __label__ = 41;
    break;
   case 40:
    var $128 = $blimb_3 >>> 0 < 16777216 ? 17 : 25;
    var $130 = $128;
    __label__ = 41;
    break;
   case 41:
    var $130;
    var $132 = STRING_TABLE.___gmpn_clz_tab + ($blimb_3 >>> ($130 >>> 0)) | 0;
    var $138 = ($_4 << 5) - 33 + $130 + (HEAPU8[$132] & 255) | 0;
    var $139 = (i64Math.multiply($138, 0, $_26, 0), i64Math.result[0]);
    var $141 = ($139 >>> 5) + 5 | 0;
    var $142 = $141 + $49 | 0;
    if (($142 | 0) > (HEAP32[$r >> 2] | 0)) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    var $147 = ___gmpz_realloc($r, $142);
    __label__ = 43;
    break;
   case 43:
    var $148 = HEAPU32[$20 >> 2];
    if (($49 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $150 = $148;
    var $152 = $38 + $42 - 2 | 0;
    var $153 = (i64Math.multiply($152, 0, $e, 0), i64Math.result[0]);
    var $156 = $rtwos_limbs_0_lcssa + ($153 >>> 5) << 2;
    _memset($150, 0, $156, 4);
    __label__ = 45;
    break;
   case 45:
    var $158 = $148 + ($49 << 2) | 0;
    if (($_26 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    HEAP32[$158 >> 2] = $rl_3;
    var $rp_5 = $158;
    var $rsize_4 = 1;
    __label__ = 74;
    break;
   case 47:
    if (($_4 | 0) < 2) {
      __label__ = 49;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    if (($_26 & 1 | 0) == 0) {
      __label__ = 49;
      break;
    } else {
      var $talloc_0 = $141;
      __label__ = 50;
      break;
    }
   case 49:
    var $talloc_0 = ($141 | 0) / 2 & -1;
    __label__ = 50;
    break;
   case 50:
    var $talloc_0;
    var $169 = $talloc_0 << 2;
    if ($169 >>> 0 < 65536) {
      __label__ = 51;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 51:
    var $172 = STACKTOP;
    STACKTOP += $169;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $176 = $172;
    __label__ = 53;
    break;
   case 52:
    var $174 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $169);
    var $176 = $174;
    __label__ = 53;
    break;
   case 53:
    var $176;
    var $177 = $176;
    if ($_26 >>> 0 < 65536) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    var $181 = $_26 >>> 0 < 256 ? 1 : 9;
    var $186 = $181;
    __label__ = 56;
    break;
   case 55:
    var $184 = $_26 >>> 0 < 16777216 ? 17 : 25;
    var $186 = $184;
    __label__ = 56;
    break;
   case 56:
    var $186;
    var $188 = STRING_TABLE.___gmpn_clz_tab + ($_26 >>> ($186 >>> 0)) | 0;
    var $192 = $186 - 3 + (HEAPU8[$188] & 255) | 0;
    if (($_4 | 0) == 1) {
      __label__ = 57;
      break;
    } else {
      var $__p_0 = 0;
      var $__n10_0 = $_26;
      __label__ = 64;
      break;
    }
   case 57:
    var $196 = ($192 & 1 | 0) == 0;
    var $_9 = $196 ? $177 : $158;
    HEAP32[$_9 >> 2] = $blimb_3;
    if (($192 | 0) > -1) {
      __label__ = 58;
      break;
    } else {
      var $rsize_0_lcssa = 1;
      var $rp_1_lcssa = $_9;
      __label__ = 62;
      break;
    }
   case 58:
    var $_8 = $196 ? $158 : $177;
    var $tp5_129 = $_8;
    var $i_030 = $192;
    var $rsize_031 = 1;
    var $rp_132 = $_9;
    __label__ = 59;
    break;
   case 59:
    var $rp_132;
    var $rsize_031;
    var $i_030;
    var $tp5_129;
    ___gmpn_sqr($tp5_129, $rp_132, $rsize_031);
    var $199 = $rsize_031 << 1;
    var $205 = $199 - ((HEAP32[$tp5_129 + ($199 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    if ((1 << $i_030 & $_26 | 0) == 0) {
      var $rsize_1 = $205;
      __label__ = 61;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $210 = ___gmpn_mul_1($tp5_129, $tp5_129, $205, $blimb_3);
    var $211 = $tp5_129 + ($205 << 2) | 0;
    HEAP32[$211 >> 2] = $210;
    var $rsize_1 = (($210 | 0) != 0 & 1) + $205 | 0;
    __label__ = 61;
    break;
   case 61:
    var $rsize_1;
    if (($i_030 | 0) > 0) {
      var $tp5_129 = $rp_132;
      var $i_030 = $i_030 - 1 | 0;
      var $rsize_031 = $rsize_1;
      var $rp_132 = $tp5_129;
      __label__ = 59;
      break;
    } else {
      var $rsize_0_lcssa = $rsize_1;
      var $rp_1_lcssa = $tp5_129;
      __label__ = 62;
      break;
    }
   case 62:
    var $rp_1_lcssa;
    var $rsize_0_lcssa;
    if (($rl_3 | 0) == 1) {
      var $rp_5 = $rp_1_lcssa;
      var $rsize_4 = $rsize_0_lcssa;
      __label__ = 74;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $220 = ___gmpn_mul_1($rp_1_lcssa, $rp_1_lcssa, $rsize_0_lcssa, $rl_3);
    HEAP32[$rp_1_lcssa + ($rsize_0_lcssa << 2) >> 2] = $220;
    var $rp_5 = $rp_1_lcssa;
    var $rsize_4 = (($220 | 0) != 0 & 1) + $rsize_0_lcssa | 0;
    __label__ = 74;
    break;
   case 64:
    var $__n10_0;
    var $__p_0;
    var $227 = -1771476586 >>> (($__n10_0 & 31) >>> 0) ^ $__p_0;
    var $228 = $__n10_0 >>> 5;
    if (($228 | 0) == 0) {
      __label__ = 65;
      break;
    } else {
      var $__p_0 = $227;
      var $__n10_0 = $228;
      __label__ = 64;
      break;
    }
   case 65:
    var $233 = (($227 ^ $192) & 1 | 0) == 0;
    var $_10 = $233 ? $177 : $158;
    var $_11 = $233 ? $158 : $177;
    if (($_4 | 0) == 0) {
      var $rsize_2_ph = 0;
      __label__ = 70;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    var $236 = $_4 - 1 | 0;
    var $237 = HEAPU32[$_2 >> 2];
    if (($236 | 0) == 0) {
      var $__x15_1 = $237;
      var $__dst13_1 = $_11;
      __label__ = 69;
      break;
    } else {
      var $__x15_0 = $237;
      var $_2_pn = $_2;
      var $__dst13_0 = $_11;
      var $__n12_0 = $236;
      __label__ = 67;
      break;
    }
   case 67:
    var $__n12_0;
    var $__dst13_0;
    var $_2_pn;
    var $__x15_0;
    var $__src14_0 = $_2_pn + 4 | 0;
    HEAP32[$__dst13_0 >> 2] = $__x15_0;
    var $240 = HEAP32[$__src14_0 >> 2];
    var $241 = $__n12_0 - 1 | 0;
    if (($241 | 0) == 0) {
      __label__ = 68;
      break;
    } else {
      var $__x15_0 = $240;
      var $_2_pn = $__src14_0;
      var $__dst13_0 = $__dst13_0 + 4 | 0;
      var $__n12_0 = $241;
      __label__ = 67;
      break;
    }
   case 68:
    var $__x15_1 = $240;
    var $__dst13_1 = $_11 + ($236 << 2) | 0;
    __label__ = 69;
    break;
   case 69:
    var $__dst13_1;
    var $__x15_1;
    HEAP32[$__dst13_1 >> 2] = $__x15_1;
    var $rsize_2_ph = $_4;
    __label__ = 70;
    break;
   case 70:
    var $rsize_2_ph;
    if (($192 | 0) > -1) {
      var $tp5_322 = $_10;
      var $i_123 = $192;
      var $rsize_224 = $rsize_2_ph;
      var $rp_325 = $_11;
      __label__ = 71;
      break;
    } else {
      var $rp_5 = $_11;
      var $rsize_4 = $rsize_2_ph;
      __label__ = 74;
      break;
    }
   case 71:
    var $rp_325;
    var $rsize_224;
    var $i_123;
    var $tp5_322;
    ___gmpn_sqr($tp5_322, $rp_325, $rsize_224);
    var $245 = $rsize_224 << 1;
    var $251 = $245 - ((HEAP32[$tp5_322 + ($245 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    if ((1 << $i_123 & $_26 | 0) == 0) {
      var $rp_4 = $tp5_322;
      var $rsize_3 = $251;
      var $tp5_4 = $rp_325;
      __label__ = 73;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 72:
    var $256 = ___gmpn_mul($rp_325, $tp5_322, $251, $_2, $_4);
    var $rp_4 = $rp_325;
    var $rsize_3 = $251 + $_4 + ((($256 | 0) == 0) << 31 >> 31) | 0;
    var $tp5_4 = $tp5_322;
    __label__ = 73;
    break;
   case 73:
    var $tp5_4;
    var $rsize_3;
    var $rp_4;
    if (($i_123 | 0) > 0) {
      var $tp5_322 = $tp5_4;
      var $i_123 = $i_123 - 1 | 0;
      var $rsize_224 = $rsize_3;
      var $rp_325 = $rp_4;
      __label__ = 71;
      break;
    } else {
      var $rp_5 = $rp_4;
      var $rsize_4 = $rsize_3;
      __label__ = 74;
      break;
    }
   case 74:
    var $rsize_4;
    var $rp_5;
    var $263 = HEAP32[$__tmp_marker >> 2];
    if (($263 | 0) == 0) {
      __label__ = 76;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    ___gmp_tmp_reentrant_free($263);
    __label__ = 76;
    break;
   case 76:
    if (($rtwos_bits_0 | 0) == 0) {
      var $rsize_5 = $rsize_4;
      __label__ = 78;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    var $269 = ___gmpn_lshift($rp_5, $rp_5, $rsize_4, $rtwos_bits_0);
    HEAP32[$rp_5 + ($rsize_4 << 2) >> 2] = $269;
    var $rsize_5 = (($269 | 0) != 0 & 1) + $rsize_4 | 0;
    __label__ = 78;
    break;
   case 78:
    var $rsize_5;
    var $275 = $rsize_5 + $49 | 0;
    var $277 = $16 ? -$275 | 0 : $275;
    HEAP32[$r + 4 >> 2] = $277;
    __label__ = 79;
    break;
   case 79:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_n_pow_ui["X"] = 1;

function ___gmpz_out_raw($fp, $x) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$x + 4 >> 2];
    var $3 = ($2 | 0) > -1;
    var $5 = $3 ? $2 : -$2 | 0;
    var $7 = $5 << 5 | 7;
    var $8 = ($7 | 0) / 8 & -1;
    var $9 = $8 + 4 | 0;
    var $10 = HEAP32[___gmp_allocate_func >> 2];
    var $11 = FUNCTION_TABLE[$10]($9);
    var $12 = $11 + 4 | 0;
    if (($7 + 7 | 0) >>> 0 > 14) {
      __label__ = 3;
      break;
    } else {
      var $bp_1 = $12;
      var $bytes_0 = $8;
      __label__ = 9;
      break;
    }
   case 3:
    var $18 = -$5 | 0;
    var $smax = ($18 | 0) > -1 ? $18 : 1073741823;
    var $22 = $9 - ($5 + $smax << 2) | 0;
    var $bp_0 = $11 + $9 | 0;
    var $xp_0 = HEAP32[$x + 8 >> 2];
    var $i_0 = $5;
    __label__ = 4;
    break;
   case 4:
    var $i_0;
    var $xp_0;
    var $bp_0;
    var $24 = $bp_0 - 4 | 0;
    var $25 = HEAPU32[$xp_0 >> 2];
    var $26 = _llvm_bswap_i32($25);
    HEAP32[$24 >> 2] = $26;
    var $29 = $i_0 - 1 | 0;
    if (($29 | 0) > 0) {
      var $bp_0 = $24;
      var $xp_0 = $xp_0 + 4 | 0;
      var $i_0 = $29;
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ($25 >>> 0 < 65536) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    var $35 = $25 >>> 0 < 256 ? 1 : 9;
    var $40 = $35;
    __label__ = 8;
    break;
   case 7:
    var $38 = $25 >>> 0 < 16777216 ? 17 : 25;
    var $40 = $38;
    __label__ = 8;
    break;
   case 8:
    var $40;
    var $42 = STRING_TABLE.___gmpn_clz_tab + ($25 >>> ($40 >>> 0)) | 0;
    var $47 = (33 - $40 - (HEAPU8[$42] & 255) | 0) / 8 & -1;
    var $bp_1 = $11 + ($22 + ($47 - 4)) | 0;
    var $bytes_0 = $8 - $47 | 0;
    __label__ = 9;
    break;
   case 9:
    var $bytes_0;
    var $bp_1;
    var $51 = $bytes_0 + 4 | 0;
    var $53 = $3 ? $bytes_0 : -$bytes_0 | 0;
    var $56 = $bp_1 - 4 | 0;
    HEAP8[$56] = $53 >>> 24 & 255;
    HEAP8[$bp_1 - 3 | 0] = $53 >>> 16 & 255;
    HEAP8[$bp_1 - 2 | 0] = $53 >>> 8 & 255;
    HEAP8[$bp_1 - 1 | 0] = $53 & 255;
    var $_fp = ($fp | 0) == 0 ? HEAP32[_stdout >> 2] : $fp;
    var $67 = _fwrite($56, $51, 1, $_fp);
    var $ssize_0 = ($67 | 0) == 1 ? $51 : 0;
    var $69 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$69]($11, $9);
    return $ssize_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_out_raw["X"] = 1;

function ___gmpz_perfect_power_p($u) {
  var $2 = HEAP32[$u + 8 >> 2];
  var $4 = HEAP32[$u + 4 >> 2];
  var $5 = ___gmpn_perfect_power_p($2, $4);
  return $5;
}

function ___gmpz_perfect_square_p($__gmp_a) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$__gmp_a + 4 >> 2];
    var $_lobit_not = $2 >>> 31 ^ 1;
    if (($2 | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      var $__gmp_result_0 = $_lobit_not;
      __label__ = 4;
      break;
    }
   case 3:
    var $6 = HEAP32[$__gmp_a + 8 >> 2];
    var $7 = ___gmpn_perfect_square_p($6, $2);
    var $__gmp_result_0 = $7;
    __label__ = 4;
    break;
   case 4:
    var $__gmp_result_0;
    return $__gmp_result_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_popcount($__gmp_u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$__gmp_u + 4 >> 2];
    var $_lobit = $2 >> 31;
    if (($2 | 0) > 0) {
      __label__ = 3;
      break;
    } else {
      var $__gmp_result_0 = $_lobit;
      __label__ = 4;
      break;
    }
   case 3:
    var $6 = HEAP32[$__gmp_u + 8 >> 2];
    var $7 = ___gmpn_popcount($6, $2);
    var $__gmp_result_0 = $7;
    __label__ = 4;
    break;
   case 4:
    var $__gmp_result_0;
    return $__gmp_result_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_powm($r, $b, $e, $m) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $new_b = __stackBase__ + 4;
    var $2 = HEAP32[$m + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($5 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $9 = $m + 8 | 0;
    var $10 = HEAPU32[$9 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $12 = HEAPU32[$e + 4 >> 2];
    if (($12 | 0) < 1) {
      __label__ = 5;
      break;
    } else {
      var $_0 = $b;
      var $es_0 = $12;
      __label__ = 15;
      break;
    }
   case 5:
    if (($12 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 6:
    if (($5 | 0) == 1) {
      __label__ = 7;
      break;
    } else {
      var $22 = 1;
      __label__ = 8;
      break;
    }
   case 7:
    var $22 = (HEAP32[$10 >> 2] | 0) != 1;
    __label__ = 8;
    break;
   case 8:
    var $22;
    HEAP32[$r + 4 >> 2] = $22 & 1;
    var $26 = HEAP32[$r + 8 >> 2];
    HEAP32[$26 >> 2] = 1;
    __label__ = 111;
    break;
   case 9:
    var $28 = $new_b | 0;
    var $29 = $5 + 1 | 0;
    HEAP32[$new_b >> 2] = $29;
    var $31 = $29 << 2;
    if ($31 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $34 = STACKTOP;
    STACKTOP += $31;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $38 = $34;
    __label__ = 12;
    break;
   case 11:
    var $36 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $31);
    var $38 = $36;
    __label__ = 12;
    break;
   case 12:
    var $38;
    HEAP32[$new_b + 8 >> 2] = $38;
    var $41 = ___gmpz_invert($28, $b, $m);
    if (($41 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 14:
    var $_0 = $28;
    var $es_0 = -$12 | 0;
    __label__ = 15;
    break;
   case 15:
    var $es_0;
    var $_0;
    var $47 = $_0 + 4 | 0;
    var $48 = HEAPU32[$47 >> 2];
    var $51 = ($48 | 0) > -1 ? $48 : -$48 | 0;
    if (($51 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 16:
    HEAP32[$r + 4 >> 2] = 0;
    var $55 = HEAP32[$__tmp_marker >> 2];
    if (($55 | 0) == 0) {
      __label__ = 111;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    ___gmp_tmp_reentrant_free($55);
    __label__ = 111;
    break;
   case 18:
    var $60 = HEAPU32[$e + 8 >> 2];
    if (($es_0 | 0) == 1) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $62 = HEAPU32[$10 >> 2];
    if (($62 | 0) == 0) {
      var $mp_022 = $10;
      var $ncnt_023 = 0;
      __label__ = 43;
      break;
    } else {
      var $mp_0_lcssa = $10;
      var $ncnt_0_lcssa = 0;
      var $_lcssa21 = $62;
      __label__ = 44;
      break;
    }
   case 20:
    if ((HEAP32[$60 >> 2] | 0) == 1) {
      __label__ = 21;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 21:
    var $68 = $5 << 2;
    if ($68 >>> 0 < 65536) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $71 = STACKTOP;
    STACKTOP += $68;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $75 = $71;
    __label__ = 24;
    break;
   case 23:
    var $73 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $68);
    var $75 = $73;
    __label__ = 24;
    break;
   case 24:
    var $75;
    var $76 = $75;
    var $78 = HEAPU32[$_0 + 8 >> 2];
    if (($51 | 0) < ($5 | 0)) {
      __label__ = 35;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $83 = ($51 - $5 << 2) + 4 | 0;
    if ($83 >>> 0 < 65536) {
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $86 = STACKTOP;
    STACKTOP += $83;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $90 = $86;
    __label__ = 28;
    break;
   case 27:
    var $88 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $83);
    var $90 = $88;
    __label__ = 28;
    break;
   case 28:
    var $90;
    ___gmpn_tdiv_qr($90, $76, 0, $78, $51, $10, $5);
    var $rn_0 = $5;
    __label__ = 29;
    break;
   case 29:
    var $rn_0;
    if (($rn_0 | 0) > 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $95 = $rn_0 - 1 | 0;
    if ((HEAP32[$76 + ($95 << 2) >> 2] | 0) == 0) {
      var $rn_0 = $95;
      __label__ = 29;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    if ((HEAP32[$47 >> 2] | 0) > -1 | ($rn_0 | 0) == 0) {
      var $rp_0 = $76;
      var $rn_4 = $rn_0;
      __label__ = 102;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $104 = ___gmpn_sub($76, $10, $5, $76, $rn_0);
    var $rn_1 = $5;
    __label__ = 33;
    break;
   case 33:
    var $rn_1;
    if (($rn_1 | 0) > 0) {
      __label__ = 34;
      break;
    } else {
      var $rp_0 = $76;
      var $rn_4 = $rn_1;
      __label__ = 102;
      break;
    }
   case 34:
    var $108 = $rn_1 - 1 | 0;
    if ((HEAP32[$76 + ($108 << 2) >> 2] | 0) == 0) {
      var $rn_1 = $108;
      __label__ = 33;
      break;
    } else {
      var $rp_0 = $76;
      var $rn_4 = $rn_1;
      __label__ = 102;
      break;
    }
   case 35:
    if ((HEAP32[$47 >> 2] | 0) < 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 36:
    var $116 = ___gmpn_sub($76, $10, $5, $78, $51);
    var $rp_0 = $76;
    var $rn_4 = $5 - ((HEAP32[$76 + ($5 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 102;
    break;
   case 37:
    if (($48 | 0) == 0) {
      var $rp_0 = $76;
      var $rn_4 = $51;
      __label__ = 102;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $126 = $51 - 1 | 0;
    var $127 = HEAP32[$78 >> 2];
    if (($126 | 0) == 0) {
      var $__dst_1 = $76;
      var $__x1_1 = $127;
      __label__ = 42;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $scevgep48 = $75 + (($51 << 2) - 4) | 0;
    var $__n_0 = $126;
    var $__dst_0 = $76;
    var $_pn4 = $78;
    var $__x1_0 = $127;
    __label__ = 40;
    break;
   case 40:
    var $__x1_0;
    var $_pn4;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_pn4 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x1_0;
    var $133 = HEAP32[$__src_0 >> 2];
    var $134 = $__n_0 - 1 | 0;
    if (($134 | 0) == 0) {
      __label__ = 41;
      break;
    } else {
      var $__n_0 = $134;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn4 = $__src_0;
      var $__x1_0 = $133;
      __label__ = 40;
      break;
    }
   case 41:
    var $__dst_1 = $scevgep48;
    var $__x1_1 = $133;
    __label__ = 42;
    break;
   case 42:
    var $__x1_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x1_1;
    var $rp_0 = $76;
    var $rn_4 = $51;
    __label__ = 102;
    break;
   case 43:
    var $ncnt_023;
    var $mp_022;
    var $137 = $mp_022 + 4 | 0;
    var $138 = $ncnt_023 + 1 | 0;
    var $139 = HEAP32[$137 >> 2];
    if (($139 | 0) == 0) {
      var $mp_022 = $137;
      var $ncnt_023 = $138;
      __label__ = 43;
      break;
    } else {
      var $mp_0_lcssa = $137;
      var $ncnt_0_lcssa = $138;
      var $_lcssa21 = $139;
      __label__ = 44;
      break;
    }
   case 44:
    var $_lcssa21;
    var $ncnt_0_lcssa;
    var $mp_0_lcssa;
    var $141 = $5 - $ncnt_0_lcssa | 0;
    if (($_lcssa21 & 1 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      var $nodd_0 = $141;
      var $ncnt_1 = $ncnt_0_lcssa;
      var $cnt_0 = 0;
      var $mp_1 = $mp_0_lcssa;
      __label__ = 52;
      break;
    }
   case 45:
    var $145 = $141 << 2;
    if ($145 >>> 0 < 65536) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    var $148 = STACKTOP;
    STACKTOP += $145;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $153 = $148;
    var $152 = $_lcssa21;
    __label__ = 48;
    break;
   case 47:
    var $150 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $145);
    var $153 = $150;
    var $152 = HEAP32[$mp_0_lcssa >> 2];
    __label__ = 48;
    break;
   case 48:
    var $152;
    var $153;
    var $154 = $153;
    var $156 = $152 & -$152;
    if ($156 >>> 0 < 65536) {
      __label__ = 49;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 49:
    var $160 = $156 >>> 0 < 256 ? 1 : 9;
    var $165 = $160;
    __label__ = 51;
    break;
   case 50:
    var $163 = $156 >>> 0 < 16777216 ? 17 : 25;
    var $165 = $163;
    __label__ = 51;
    break;
   case 51:
    var $165;
    var $167 = STRING_TABLE.___gmpn_clz_tab + ($156 >>> ($165 >>> 0)) | 0;
    var $171 = $165 - 2 + (HEAPU8[$167] & 255) | 0;
    var $172 = ___gmpn_rshift($154, $mp_0_lcssa, $141, $171);
    var $nodd_0 = $141 - ((HEAP32[$154 + ($141 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $ncnt_1 = $ncnt_0_lcssa + 1 | 0;
    var $cnt_0 = $171;
    var $mp_1 = $154;
    __label__ = 52;
    break;
   case 52:
    var $mp_1;
    var $cnt_0;
    var $ncnt_1;
    var $nodd_0;
    var $181 = ($ncnt_1 | 0) != 0;
    if ($181) {
      __label__ = 53;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 53:
    var $184 = ($ncnt_1 | 0) > ($nodd_0 | 0) ? $ncnt_1 : $nodd_0;
    var $185 = ___gmpn_binvert_itch($184);
    var $186 = (i64Math.multiply($5, 0, 3, 0), i64Math.result[0]);
    var $187 = $5 << 1;
    var $_ = ($185 | 0) > ($187 | 0) ? $185 : $187;
    var $itch_0 = $_ + $186 | 0;
    __label__ = 55;
    break;
   case 54:
    var $191 = ___gmpn_binvert_itch($nodd_0);
    var $192 = $5 << 1;
    var $_5 = ($191 | 0) > ($192 | 0) ? $191 : $192;
    var $itch_0 = $_5 + $5 | 0;
    __label__ = 55;
    break;
   case 55:
    var $itch_0;
    var $196 = $itch_0 << 2;
    if ($196 >>> 0 < 65536) {
      __label__ = 56;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 56:
    var $199 = STACKTOP;
    STACKTOP += $196;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $203 = $199;
    __label__ = 58;
    break;
   case 57:
    var $201 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $196);
    var $203 = $201;
    __label__ = 58;
    break;
   case 58:
    var $203;
    var $204 = $203;
    var $205 = $204 + ($5 << 2) | 0;
    var $207 = HEAPU32[$_0 + 8 >> 2];
    ___gmpn_powm($204, $207, $51, $60, $es_0, $mp_1, $nodd_0, $205);
    if ($181) {
      __label__ = 59;
      break;
    } else {
      var $rn_2 = $5;
      __label__ = 95;
      break;
    }
   case 59:
    if (($51 | 0) < ($ncnt_1 | 0)) {
      __label__ = 60;
      break;
    } else {
      var $bp_0 = $207;
      __label__ = 71;
      break;
    }
   case 60:
    var $211 = $ncnt_1 << 2;
    if ($211 >>> 0 < 65536) {
      __label__ = 61;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 61:
    var $214 = STACKTOP;
    STACKTOP += $211;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $218 = $214;
    __label__ = 63;
    break;
   case 62:
    var $216 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $211);
    var $218 = $216;
    __label__ = 63;
    break;
   case 63:
    var $218;
    var $219 = $218;
    if (($48 | 0) == 0) {
      __label__ = 69;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $222 = $51 - 1 | 0;
    var $223 = HEAPU32[$207 >> 2];
    if (($222 | 0) == 0) {
      var $__x7_1 = $223;
      var $__dst5_1 = $219;
      __label__ = 68;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    var $scevgep = $218 + (($51 << 2) - 4) | 0;
    var $__x7_0 = $223;
    var $_pn = $207;
    var $__dst5_0 = $219;
    var $__n4_0 = $222;
    __label__ = 66;
    break;
   case 66:
    var $__n4_0;
    var $__dst5_0;
    var $_pn;
    var $__x7_0;
    var $__src6_0 = $_pn + 4 | 0;
    HEAP32[$__dst5_0 >> 2] = $__x7_0;
    var $229 = HEAP32[$__src6_0 >> 2];
    var $230 = $__n4_0 - 1 | 0;
    if (($230 | 0) == 0) {
      __label__ = 67;
      break;
    } else {
      var $__x7_0 = $229;
      var $_pn = $__src6_0;
      var $__dst5_0 = $__dst5_0 + 4 | 0;
      var $__n4_0 = $230;
      __label__ = 66;
      break;
    }
   case 67:
    var $__x7_1 = $229;
    var $__dst5_1 = $scevgep;
    __label__ = 68;
    break;
   case 68:
    var $__dst5_1;
    var $__x7_1;
    HEAP32[$__dst5_1 >> 2] = $__x7_1;
    __label__ = 69;
    break;
   case 69:
    if (($ncnt_1 | 0) == ($51 | 0)) {
      var $bp_0 = $219;
      __label__ = 71;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $scevgep37 = $218 + ($51 << 2) | 0;
    var $237 = $ncnt_1 - $51 << 2;
    _memset($scevgep37, 0, $237, 4);
    var $bp_0 = $219;
    __label__ = 71;
    break;
   case 71:
    var $bp_0;
    var $239 = HEAPU32[$bp_0 >> 2];
    if (($239 & 1 | 0) == 0) {
      __label__ = 72;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 72:
    if (($es_0 | 0) > 1) {
      __label__ = 76;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $249 = ($ncnt_1 - (($cnt_0 | 0) != 0 & 1) << 5) + $cnt_0 | 0;
    var $253 = 4627 >>> (($239 << 1 & 14) >>> 0) & 3;
    var $254 = HEAP32[$60 >> 2];
    var $255 = (i64Math.multiply($254, 0, $253, 0), i64Math.result[0]);
    if ($255 >>> 0 < $249 >>> 0) {
      __label__ = 74;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 74:
    var $258 = $204 + ($ncnt_1 + $5 << 2) | 0;
    ___gmpn_powlo($205, $bp_0, $60, $es_0, $ncnt_1, $258);
    __label__ = 77;
    break;
   case 75:
    var $scevgep38 = $203 + ($5 << 2) | 0;
    _memset($scevgep38, 0, $ncnt_1 << 2, 4);
    __label__ = 77;
    break;
   case 76:
    var $scevgep43 = $203 + ($5 << 2) | 0;
    _memset($scevgep43, 0, $ncnt_1 << 2, 4);
    __label__ = 77;
    break;
   case 77:
    var $264 = ($nodd_0 | 0) < ($ncnt_1 | 0);
    if ($264) {
      __label__ = 78;
      break;
    } else {
      var $mp_2 = $mp_1;
      __label__ = 89;
      break;
    }
   case 78:
    var $266 = $ncnt_1 << 2;
    if ($266 >>> 0 < 65536) {
      __label__ = 79;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 79:
    var $269 = STACKTOP;
    STACKTOP += $266;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $273 = $269;
    __label__ = 81;
    break;
   case 80:
    var $271 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $266);
    var $273 = $271;
    __label__ = 81;
    break;
   case 81:
    var $273;
    var $274 = $273;
    if (($nodd_0 | 0) == 0) {
      __label__ = 87;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 82:
    var $277 = $nodd_0 - 1 | 0;
    var $278 = HEAPU32[$mp_1 >> 2];
    if (($277 | 0) == 0) {
      var $__x18_1 = $278;
      var $__dst16_1 = $274;
      __label__ = 86;
      break;
    } else {
      __label__ = 83;
      break;
    }
   case 83:
    var $scevgep40 = $273 + (($nodd_0 << 2) - 4) | 0;
    var $__x18_0 = $278;
    var $mp_1_pn = $mp_1;
    var $__dst16_0 = $274;
    var $__n15_0 = $277;
    __label__ = 84;
    break;
   case 84:
    var $__n15_0;
    var $__dst16_0;
    var $mp_1_pn;
    var $__x18_0;
    var $__src17_0 = $mp_1_pn + 4 | 0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    var $284 = HEAP32[$__src17_0 >> 2];
    var $285 = $__n15_0 - 1 | 0;
    if (($285 | 0) == 0) {
      __label__ = 85;
      break;
    } else {
      var $__x18_0 = $284;
      var $mp_1_pn = $__src17_0;
      var $__dst16_0 = $__dst16_0 + 4 | 0;
      var $__n15_0 = $285;
      __label__ = 84;
      break;
    }
   case 85:
    var $__x18_1 = $284;
    var $__dst16_1 = $scevgep40;
    __label__ = 86;
    break;
   case 86:
    var $__dst16_1;
    var $__x18_1;
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    __label__ = 87;
    break;
   case 87:
    if (($ncnt_1 | 0) == ($nodd_0 | 0)) {
      var $mp_2 = $274;
      __label__ = 89;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 88:
    _memset($273 + ($nodd_0 << 2) | 0, 0, $ncnt_1 - $nodd_0 << 2, 4);
    var $mp_2 = $274;
    __label__ = 89;
    break;
   case 89:
    var $mp_2;
    var $294 = $204 + ($5 << 1 << 2) | 0;
    var $_sum2 = (i64Math.multiply($5, 0, 3, 0), i64Math.result[0]);
    var $295 = $204 + ($_sum2 << 2) | 0;
    ___gmpn_binvert($294, $mp_2, $ncnt_1, $295);
    var $297 = ($nodd_0 | 0) > ($ncnt_1 | 0) ? $ncnt_1 : $nodd_0;
    var $298 = ___gmpn_sub($205, $205, $ncnt_1, $204, $297);
    ___gmpn_mullo_n($295, $294, $205, $ncnt_1);
    if (($cnt_0 | 0) == 0) {
      __label__ = 91;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 90:
    var $304 = $204 + ($_sum2 - 1 + $ncnt_1 << 2) | 0;
    var $306 = HEAP32[$304 >> 2] & (1 << $cnt_0) - 1;
    HEAP32[$304 >> 2] = $306;
    __label__ = 91;
    break;
   case 91:
    if ($264) {
      __label__ = 92;
      break;
    } else {
      __label__ = 93;
      break;
    }
   case 92:
    var $309 = ___gmpn_mul($205, $295, $ncnt_1, $mp_2, $nodd_0);
    __label__ = 94;
    break;
   case 93:
    var $311 = ___gmpn_mul($205, $mp_2, $nodd_0, $295, $ncnt_1);
    __label__ = 94;
    break;
   case 94:
    var $313 = ___gmpn_add($204, $205, $5, $204, $nodd_0);
    var $rn_2 = $5;
    __label__ = 95;
    break;
   case 95:
    var $rn_2;
    if (($rn_2 | 0) > 0) {
      __label__ = 96;
      break;
    } else {
      __label__ = 97;
      break;
    }
   case 96:
    var $316 = $rn_2 - 1 | 0;
    if ((HEAP32[$204 + ($316 << 2) >> 2] | 0) == 0) {
      var $rn_2 = $316;
      __label__ = 95;
      break;
    } else {
      __label__ = 97;
      break;
    }
   case 97:
    if ((HEAP32[$60 >> 2] & 1 | 0) == 0) {
      var $rp_0 = $204;
      var $rn_4 = $rn_2;
      __label__ = 102;
      break;
    } else {
      __label__ = 98;
      break;
    }
   case 98:
    if ((HEAP32[$47 >> 2] | 0) > -1 | ($rn_2 | 0) == 0) {
      var $rp_0 = $204;
      var $rn_4 = $rn_2;
      __label__ = 102;
      break;
    } else {
      __label__ = 99;
      break;
    }
   case 99:
    var $329 = HEAP32[$9 >> 2];
    var $330 = ___gmpn_sub($204, $329, $5, $204, $rn_2);
    var $rn_3 = $5;
    __label__ = 100;
    break;
   case 100:
    var $rn_3;
    if (($rn_3 | 0) > 0) {
      __label__ = 101;
      break;
    } else {
      var $rp_0 = $204;
      var $rn_4 = $rn_3;
      __label__ = 102;
      break;
    }
   case 101:
    var $334 = $rn_3 - 1 | 0;
    if ((HEAP32[$204 + ($334 << 2) >> 2] | 0) == 0) {
      var $rn_3 = $334;
      __label__ = 100;
      break;
    } else {
      var $rp_0 = $204;
      var $rn_4 = $rn_3;
      __label__ = 102;
      break;
    }
   case 102:
    var $rn_4;
    var $rp_0;
    if (($rn_4 | 0) > (HEAP32[$r >> 2] | 0)) {
      __label__ = 103;
      break;
    } else {
      __label__ = 104;
      break;
    }
   case 103:
    var $342 = ___gmpz_realloc($r, $rn_4);
    __label__ = 104;
    break;
   case 104:
    HEAP32[$r + 4 >> 2] = $rn_4;
    if (($rn_4 | 0) == 0) {
      __label__ = 109;
      break;
    } else {
      __label__ = 105;
      break;
    }
   case 105:
    var $347 = $rn_4 - 1 | 0;
    var $349 = HEAP32[$r + 8 >> 2];
    var $350 = HEAP32[$rp_0 >> 2];
    if (($347 | 0) == 0) {
      var $__x24_1 = $350;
      var $__dst22_1 = $349;
      __label__ = 108;
      break;
    } else {
      var $__x24_0 = $350;
      var $rp_0_pn = $rp_0;
      var $__dst22_0 = $349;
      var $__n21_0 = $347;
      __label__ = 106;
      break;
    }
   case 106:
    var $__n21_0;
    var $__dst22_0;
    var $rp_0_pn;
    var $__x24_0;
    var $__src23_0 = $rp_0_pn + 4 | 0;
    HEAP32[$__dst22_0 >> 2] = $__x24_0;
    var $353 = HEAP32[$__src23_0 >> 2];
    var $354 = $__n21_0 - 1 | 0;
    if (($354 | 0) == 0) {
      __label__ = 107;
      break;
    } else {
      var $__x24_0 = $353;
      var $rp_0_pn = $__src23_0;
      var $__dst22_0 = $__dst22_0 + 4 | 0;
      var $__n21_0 = $354;
      __label__ = 106;
      break;
    }
   case 107:
    var $__x24_1 = $353;
    var $__dst22_1 = $349 + ($347 << 2) | 0;
    __label__ = 108;
    break;
   case 108:
    var $__dst22_1;
    var $__x24_1;
    HEAP32[$__dst22_1 >> 2] = $__x24_1;
    __label__ = 109;
    break;
   case 109:
    var $357 = HEAP32[$__tmp_marker >> 2];
    if (($357 | 0) == 0) {
      __label__ = 111;
      break;
    } else {
      __label__ = 110;
      break;
    }
   case 110:
    ___gmp_tmp_reentrant_free($357);
    __label__ = 111;
    break;
   case 111:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_powm["X"] = 1;

function ___gmpz_powm_sec($r, $b, $e, $m) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$m + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($5 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $9 = $m + 8 | 0;
    var $10 = HEAPU32[$9 >> 2];
    var $11 = HEAP32[$10 >> 2];
    if (($11 & 1 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 6:
    var $17 = HEAPU32[$e + 4 >> 2];
    if (($17 | 0) < 1) {
      __label__ = 7;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    if (($17 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $23 = (($11 | 0) != 1 | ($5 | 0) != 1) & 1;
    HEAP32[$r + 4 >> 2] = $23;
    var $26 = HEAP32[$r + 8 >> 2];
    HEAP32[$26 >> 2] = 1;
    __label__ = 31;
    break;
   case 9:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 10:
    var $29 = $b + 4 | 0;
    var $30 = HEAP32[$29 >> 2];
    var $33 = ($30 | 0) > -1 ? $30 : -$30 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $34 = ___gmpn_powm_sec_itch($33, $17, $5);
    var $36 = $34 + $5 << 2;
    if ($36 >>> 0 < 65536) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $39 = STACKTOP;
    STACKTOP += $36;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $43 = $39;
    __label__ = 13;
    break;
   case 12:
    var $41 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $36);
    var $43 = $41;
    __label__ = 13;
    break;
   case 13:
    var $43;
    var $44 = $43;
    var $45 = $44 + ($5 << 2) | 0;
    var $47 = HEAP32[$b + 8 >> 2];
    var $49 = HEAP32[$e + 8 >> 2];
    ___gmpn_powm_sec($44, $47, $33, $49, $17, $10, $5, $45);
    var $rn_0 = $5;
    __label__ = 14;
    break;
   case 14:
    var $rn_0;
    if (($rn_0 | 0) > 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $53 = $rn_0 - 1 | 0;
    if ((HEAP32[$44 + ($53 << 2) >> 2] | 0) == 0) {
      var $rn_0 = $53;
      __label__ = 14;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if ((HEAP32[$49 >> 2] & 1 | 0) == 0) {
      var $rn_2 = $rn_0;
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if ((HEAP32[$29 >> 2] | 0) > -1 | ($rn_0 | 0) == 0) {
      var $rn_2 = $rn_0;
      __label__ = 21;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $66 = HEAP32[$9 >> 2];
    var $67 = ___gmpn_sub($44, $66, $5, $44, $rn_0);
    var $rn_1 = $5;
    __label__ = 19;
    break;
   case 19:
    var $rn_1;
    if (($rn_1 | 0) > 0) {
      __label__ = 20;
      break;
    } else {
      var $rn_2 = $rn_1;
      __label__ = 21;
      break;
    }
   case 20:
    var $71 = $rn_1 - 1 | 0;
    if ((HEAP32[$44 + ($71 << 2) >> 2] | 0) == 0) {
      var $rn_1 = $71;
      __label__ = 19;
      break;
    } else {
      var $rn_2 = $rn_1;
      __label__ = 21;
      break;
    }
   case 21:
    var $rn_2;
    if (($rn_2 | 0) > (HEAP32[$r >> 2] | 0)) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $79 = ___gmpz_realloc($r, $rn_2);
    __label__ = 23;
    break;
   case 23:
    HEAP32[$r + 4 >> 2] = $rn_2;
    if (($rn_2 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $84 = $rn_2 - 1 | 0;
    var $86 = HEAP32[$r + 8 >> 2];
    var $87 = HEAP32[$44 >> 2];
    if (($84 | 0) == 0) {
      var $__x_1 = $87;
      var $__dst_1 = $86;
      __label__ = 28;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $__x_0 = $87;
    var $__src_0 = $43 + 4 | 0;
    var $__dst_0 = $86;
    var $__n_0 = $84;
    __label__ = 26;
    break;
   case 26:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $94 = HEAP32[$__src_0 >> 2];
    var $95 = $__n_0 - 1 | 0;
    if (($95 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $__x_0 = $94;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $95;
      __label__ = 26;
      break;
    }
   case 27:
    var $__x_1 = $94;
    var $__dst_1 = $86 + ($84 << 2) | 0;
    __label__ = 28;
    break;
   case 28:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 29;
    break;
   case 29:
    var $98 = HEAP32[$__tmp_marker >> 2];
    if (($98 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    ___gmp_tmp_reentrant_free($98);
    __label__ = 31;
    break;
   case 31:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_powm_sec["X"] = 1;

function _isprime($t) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($t >>> 0 < 3 | ($t & 1 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      var $d_0 = 3;
      var $r_0 = 1;
      __label__ = 4;
      break;
    }
   case 3:
    var $_0 = ($t | 0) == 2 & 1;
    __label__ = 7;
    break;
   case 4:
    var $r_0;
    var $d_0;
    if ($r_0) {
      __label__ = 5;
      break;
    } else {
      var $_0 = 0;
      __label__ = 7;
      break;
    }
   case 5:
    var $8 = Math.floor(($t >>> 0) / ($d_0 >>> 0));
    if ($8 >>> 0 < $d_0 >>> 0) {
      var $_0 = 1;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $11 = (i64Math.multiply($8, 0, $d_0, 0), i64Math.result[0]);
    var $phitmp = ($11 | 0) != ($t | 0);
    var $d_0 = $d_0 + 2 | 0;
    var $r_0 = $phitmp;
    __label__ = 4;
    break;
   case 7:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _reduce($tp, $ap, $an, $mp, $mn) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $3 = ($an - $mn << 2) + 4 | 0;
    if ($3 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = STACKTOP;
    STACKTOP += $3;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $6 = $5;
    ___gmpn_tdiv_qr($6, $tp, 0, $ap, $an, $mp, $mn);
    __label__ = 6;
    break;
   case 4:
    var $8 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $3);
    var $_pre = HEAP32[$__tmp_marker >> 2];
    var $9 = $8;
    ___gmpn_tdiv_qr($9, $tp, 0, $ap, $an, $mp, $mn);
    if (($_pre | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    ___gmp_tmp_reentrant_free($_pre);
    __label__ = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_random($x, $size) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (HEAP8[___gmp_rands_initialized] << 24 >> 24 == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP8[___gmp_rands_initialized] = 1;
    ___gmp_randinit_mt_noseed(___gmp_rands | 0);
    __label__ = 4;
    break;
   case 4:
    var $7 = ($size | 0) > -1 ? $size : -$size | 0;
    var $8 = $7 << 5;
    ___gmpz_urandomb($x, ___gmp_rands | 0, $8);
    if (($size | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $11 = $x + 4 | 0;
    var $13 = -HEAP32[$11 >> 2] | 0;
    HEAP32[$11 >> 2] = $13;
    __label__ = 6;
    break;
   case 6:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_realloc2($m, $bits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $5 = (($bits - (($bits | 0) != 0 & 1) | 0) >>> 5) + 1 | 0;
    var $6 = HEAP32[___gmp_reallocate_func >> 2];
    var $7 = $m + 8 | 0;
    var $9 = HEAP32[$7 >> 2];
    var $10 = $m | 0;
    var $12 = HEAP32[$10 >> 2] << 2;
    var $13 = $5 << 2;
    var $14 = FUNCTION_TABLE[$6]($9, $12, $13);
    var $15 = $14;
    HEAP32[$7 >> 2] = $15;
    HEAP32[$10 >> 2] = $5;
    var $16 = $m + 4 | 0;
    var $17 = HEAP32[$16 >> 2];
    var $20 = ($17 | 0) > -1 ? $17 : -$17 | 0;
    if (($20 | 0) > ($5 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$16 >> 2] = 0;
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_powm_ui($r, $b, $el, $m) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $1 = $m + 8 | 0;
    var $2 = HEAPU32[$1 >> 2];
    var $4 = HEAP32[$m + 4 >> 2];
    var $7 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    if (($7 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($el | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 5:
    if (($7 | 0) == 1) {
      __label__ = 6;
      break;
    } else {
      var $18 = 0;
      __label__ = 7;
      break;
    }
   case 6:
    var $18 = (HEAP32[$2 >> 2] | 0) == 1;
    __label__ = 7;
    break;
   case 7:
    var $18;
    HEAP32[$r + 4 >> 2] = $18 & 1 ^ 1;
    var $23 = HEAP32[$r + 8 >> 2];
    HEAP32[$23 >> 2] = 1;
    __label__ = 92;
    break;
   case 8:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $27 = HEAPU32[$2 + ($7 - 1 << 2) >> 2];
    if ($27 >>> 0 < 65536) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $31 = $27 >>> 0 < 256 ? 1 : 9;
    var $36 = $31;
    __label__ = 11;
    break;
   case 10:
    var $34 = $27 >>> 0 < 16777216 ? 17 : 25;
    var $36 = $34;
    __label__ = 11;
    break;
   case 11:
    var $36;
    var $37 = 33 - $36 | 0;
    var $39 = STRING_TABLE.___gmpn_clz_tab + ($27 >>> ($36 >>> 0)) | 0;
    var $41 = HEAPU8[$39] & 255;
    var $42 = $37 - $41 | 0;
    var $43 = ($37 | 0) != ($41 | 0);
    if ($43) {
      __label__ = 12;
      break;
    } else {
      var $mp_0 = $2;
      __label__ = 16;
      break;
    }
   case 12:
    var $45 = $7 << 2;
    if ($45 >>> 0 < 65536) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $48 = STACKTOP;
    STACKTOP += $45;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $52 = $48;
    __label__ = 15;
    break;
   case 14:
    var $50 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $45);
    var $52 = $50;
    __label__ = 15;
    break;
   case 15:
    var $52;
    var $53 = $52;
    var $54 = ___gmpn_lshift($53, $2, $7, $42);
    var $mp_0 = $53;
    __label__ = 16;
    break;
   case 16:
    var $mp_0;
    var $56 = $b + 4 | 0;
    var $57 = HEAP32[$56 >> 2];
    var $60 = ($57 | 0) > -1 ? $57 : -$57 | 0;
    var $62 = HEAPU32[$b + 8 >> 2];
    if (($60 | 0) > ($7 | 0)) {
      __label__ = 17;
      break;
    } else {
      var $bp_0 = $62;
      var $bn_1 = $60;
      __label__ = 23;
      break;
    }
   case 17:
    var $65 = $7 << 2;
    if ($65 >>> 0 < 65536) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $68 = STACKTOP;
    STACKTOP += $65;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $72 = $68;
    __label__ = 20;
    break;
   case 19:
    var $70 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $65);
    var $72 = $70;
    __label__ = 20;
    break;
   case 20:
    var $72;
    var $73 = $72;
    _reduce($73, $62, $60, $mp_0, $7);
    var $bn_0 = $7;
    __label__ = 21;
    break;
   case 21:
    var $bn_0;
    if (($bn_0 | 0) > 0) {
      __label__ = 22;
      break;
    } else {
      var $bp_0 = $73;
      var $bn_1 = $bn_0;
      __label__ = 23;
      break;
    }
   case 22:
    var $77 = $bn_0 - 1 | 0;
    if ((HEAP32[$73 + ($77 << 2) >> 2] | 0) == 0) {
      var $bn_0 = $77;
      __label__ = 21;
      break;
    } else {
      var $bn_142 = $bn_0;
      var $bp_043 = $73;
      __label__ = 26;
      break;
    }
   case 23:
    var $bn_1;
    var $bp_0;
    if (($bn_1 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $bn_142 = $bn_1;
      var $bp_043 = $bp_0;
      __label__ = 26;
      break;
    }
   case 24:
    HEAP32[$r + 4 >> 2] = 0;
    var $84 = HEAP32[$__tmp_marker >> 2];
    if (($84 | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    ___gmp_tmp_reentrant_free($84);
    __label__ = 92;
    break;
   case 26:
    var $bp_043;
    var $bn_142;
    var $88 = $7 << 3 | 4;
    if ($88 >>> 0 < 65536) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $91 = STACKTOP;
    STACKTOP += $88;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $95 = $91;
    __label__ = 29;
    break;
   case 28:
    var $93 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88);
    var $95 = $93;
    __label__ = 29;
    break;
   case 29:
    var $95;
    var $96 = $95;
    var $97 = $7 << 2;
    if ($97 >>> 0 < 65536) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $100 = STACKTOP;
    STACKTOP += $97;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $104 = $100;
    __label__ = 32;
    break;
   case 31:
    var $102 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $97);
    var $104 = $102;
    __label__ = 32;
    break;
   case 32:
    var $104;
    var $105 = $104;
    var $106 = $97 + 4 | 0;
    if ($106 >>> 0 < 65536) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $109 = STACKTOP;
    STACKTOP += $106;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $113 = $109;
    __label__ = 35;
    break;
   case 34:
    var $111 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $106);
    var $113 = $111;
    __label__ = 35;
    break;
   case 35:
    var $113;
    var $114 = $113;
    var $115 = $bn_142 - 1 | 0;
    var $116 = HEAPU32[$bp_043 >> 2];
    if (($115 | 0) == 0) {
      var $__dst_1 = $105;
      var $__x_1 = $116;
      __label__ = 39;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $scevgep = $104 + (($bn_142 << 2) - 4) | 0;
    var $__n_0 = $115;
    var $__dst_0 = $105;
    var $bp_0_pn = $bp_043;
    var $__x_0 = $116;
    __label__ = 37;
    break;
   case 37:
    var $__x_0;
    var $bp_0_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $bp_0_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $122 = HEAP32[$__src_0 >> 2];
    var $123 = $__n_0 - 1 | 0;
    if (($123 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      var $__n_0 = $123;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $bp_0_pn = $__src_0;
      var $__x_0 = $122;
      __label__ = 37;
      break;
    }
   case 38:
    var $__dst_1 = $scevgep;
    var $__x_1 = $122;
    __label__ = 39;
    break;
   case 39:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    if ($el >>> 0 < 65536) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $129 = $el >>> 0 < 256 ? 1 : 9;
    var $134 = $129;
    __label__ = 42;
    break;
   case 41:
    var $132 = $el >>> 0 < 16777216 ? 17 : 25;
    var $134 = $132;
    __label__ = 42;
    break;
   case 42:
    var $134;
    var $137 = STRING_TABLE.___gmpn_clz_tab + ($el >>> ($134 >>> 0)) | 0;
    var $140 = 33 - $134 - (HEAPU8[$137] & 255) | 0;
    if (($140 | 0) == 31) {
      __label__ = 44;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $145 = $95 + 4 | 0;
    var $c_013 = 31 - $140 | 0;
    var $xn_014 = $bn_142;
    var $e_015_in = $el << $140;
    __label__ = 47;
    break;
   case 44:
    if (($bn_142 | 0) == ($7 | 0)) {
      __label__ = 45;
      break;
    } else {
      var $xn_3 = $bn_142;
      __label__ = 65;
      break;
    }
   case 45:
    var $149 = ___gmpn_cmp($105, $mp_0, $7);
    if (($149 | 0) > -1) {
      __label__ = 46;
      break;
    } else {
      var $xn_3 = $7;
      __label__ = 65;
      break;
    }
   case 46:
    var $152 = ___gmpn_sub_n($105, $105, $mp_0, $7);
    var $xn_3 = $7;
    __label__ = 65;
    break;
   case 47:
    var $e_015_in;
    var $xn_014;
    var $c_013;
    var $e_015 = $e_015_in << 1;
    ___gmpn_sqr($96, $105, $xn_014);
    var $154 = $xn_014 << 1;
    var $159 = (HEAP32[$96 + ($154 - 1 << 2) >> 2] | 0) == 0 & 1;
    var $160 = $154 - $159 | 0;
    if (($160 | 0) < ($7 | 0)) {
      __label__ = 48;
      break;
    } else {
      __label__ = 54;
      break;
    }
   case 48:
    if (($154 | 0) == ($159 | 0)) {
      var $xn_1 = $160;
      __label__ = 55;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $165 = $160 - 1 | 0;
    var $166 = HEAP32[$96 >> 2];
    if (($165 | 0) == 0) {
      var $__x6_1 = $166;
      var $__dst4_1 = $105;
      __label__ = 53;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $scevgep35 = $104 + (($xn_014 << 3) - ($159 << 2) - 4) | 0;
    var $__x6_0 = $166;
    var $__src5_0 = $145;
    var $__n3_0 = $165;
    var $__dst4_0 = $105;
    __label__ = 51;
    break;
   case 51:
    var $__dst4_0;
    var $__n3_0;
    var $__src5_0;
    var $__x6_0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    var $174 = HEAP32[$__src5_0 >> 2];
    var $175 = $__n3_0 - 1 | 0;
    if (($175 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      var $__x6_0 = $174;
      var $__src5_0 = $__src5_0 + 4 | 0;
      var $__n3_0 = $175;
      var $__dst4_0 = $__dst4_0 + 4 | 0;
      __label__ = 51;
      break;
    }
   case 52:
    var $__x6_1 = $174;
    var $__dst4_1 = $scevgep35;
    __label__ = 53;
    break;
   case 53:
    var $__dst4_1;
    var $__x6_1;
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    var $xn_1 = $160;
    __label__ = 55;
    break;
   case 54:
    ___gmpn_tdiv_qr($114, $105, 0, $96, $160, $mp_0, $7);
    var $xn_1 = $7;
    __label__ = 55;
    break;
   case 55:
    var $xn_1;
    if (($e_015 | 0) < 0) {
      __label__ = 56;
      break;
    } else {
      var $xn_2 = $xn_1;
      __label__ = 64;
      break;
    }
   case 56:
    var $182 = ___gmpn_mul($96, $105, $xn_1, $bp_043, $bn_142);
    var $183 = $xn_1 + $bn_142 | 0;
    var $188 = (HEAP32[$96 + ($183 - 1 << 2) >> 2] | 0) == 0 & 1;
    var $189 = $183 - $188 | 0;
    if (($189 | 0) < ($7 | 0)) {
      __label__ = 57;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 57:
    if (($183 | 0) == ($188 | 0)) {
      var $xn_2 = $189;
      __label__ = 64;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $194 = $189 - 1 | 0;
    var $195 = HEAP32[$96 >> 2];
    if (($194 | 0) == 0) {
      var $__x10_1 = $195;
      var $__dst8_1 = $105;
      __label__ = 62;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    var $scevgep31 = $104 + (($183 << 2) - ($188 << 2) - 4) | 0;
    var $__x10_0 = $195;
    var $__src9_0 = $145;
    var $__dst8_0 = $105;
    var $__n7_0 = $194;
    __label__ = 60;
    break;
   case 60:
    var $__n7_0;
    var $__dst8_0;
    var $__src9_0;
    var $__x10_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $203 = HEAP32[$__src9_0 >> 2];
    var $204 = $__n7_0 - 1 | 0;
    if (($204 | 0) == 0) {
      __label__ = 61;
      break;
    } else {
      var $__x10_0 = $203;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $204;
      __label__ = 60;
      break;
    }
   case 61:
    var $__x10_1 = $203;
    var $__dst8_1 = $scevgep31;
    __label__ = 62;
    break;
   case 62:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    var $xn_2 = $189;
    __label__ = 64;
    break;
   case 63:
    ___gmpn_tdiv_qr($114, $105, 0, $96, $189, $mp_0, $7);
    var $xn_2 = $7;
    __label__ = 64;
    break;
   case 64:
    var $xn_2;
    var $209 = $c_013 - 1 | 0;
    if (($209 | 0) == 0) {
      var $xn_3 = $xn_2;
      __label__ = 65;
      break;
    } else {
      var $c_013 = $209;
      var $xn_014 = $xn_2;
      var $e_015_in = $e_015;
      __label__ = 47;
      break;
    }
   case 65:
    var $xn_3;
    if ($43) {
      __label__ = 66;
      break;
    } else {
      var $xn_5 = $xn_3;
      __label__ = 75;
      break;
    }
   case 66:
    var $212 = ___gmpn_lshift($96, $105, $xn_3, $42);
    HEAP32[$96 + ($xn_3 << 2) >> 2] = $212;
    var $216 = (($212 | 0) != 0 & 1) + $xn_3 | 0;
    if (($216 | 0) < ($7 | 0)) {
      __label__ = 67;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 67:
    if (($216 | 0) == 0) {
      var $xn_4 = 0;
      __label__ = 74;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    var $221 = $216 - 1 | 0;
    var $222 = HEAP32[$96 >> 2];
    if (($221 | 0) == 0) {
      var $__x14_1 = $222;
      var $__dst12_1 = $105;
      __label__ = 72;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 69:
    var $scevgep38 = $104 + (($216 << 2) - 4) | 0;
    var $__x14_0 = $222;
    var $__src13_0 = $95 + 4 | 0;
    var $__dst12_0 = $105;
    var $__n11_0 = $221;
    __label__ = 70;
    break;
   case 70:
    var $__n11_0;
    var $__dst12_0;
    var $__src13_0;
    var $__x14_0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    var $231 = HEAP32[$__src13_0 >> 2];
    var $232 = $__n11_0 - 1 | 0;
    if (($232 | 0) == 0) {
      __label__ = 71;
      break;
    } else {
      var $__x14_0 = $231;
      var $__src13_0 = $__src13_0 + 4 | 0;
      var $__dst12_0 = $__dst12_0 + 4 | 0;
      var $__n11_0 = $232;
      __label__ = 70;
      break;
    }
   case 71:
    var $__x14_1 = $231;
    var $__dst12_1 = $scevgep38;
    __label__ = 72;
    break;
   case 72:
    var $__dst12_1;
    var $__x14_1;
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    var $xn_4 = $216;
    __label__ = 74;
    break;
   case 73:
    ___gmpn_tdiv_qr($114, $105, 0, $96, $216, $mp_0, $7);
    var $xn_4 = $7;
    __label__ = 74;
    break;
   case 74:
    var $xn_4;
    var $237 = ___gmpn_rshift($105, $105, $xn_4, $42);
    var $xn_5 = $xn_4;
    __label__ = 75;
    break;
   case 75:
    var $xn_5;
    if (($xn_5 | 0) > 0) {
      __label__ = 76;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 76:
    var $240 = $xn_5 - 1 | 0;
    if ((HEAP32[$105 + ($240 << 2) >> 2] | 0) == 0) {
      var $xn_5 = $240;
      __label__ = 75;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    if (($el & 1 | 0) == 0) {
      var $xn_7 = $xn_5;
      __label__ = 82;
      break;
    } else {
      __label__ = 78;
      break;
    }
   case 78:
    if ((HEAP32[$56 >> 2] | 0) > -1 | ($xn_5 | 0) == 0) {
      var $xn_7 = $xn_5;
      __label__ = 82;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 79:
    var $252 = HEAP32[$1 >> 2];
    var $253 = ___gmpn_sub($105, $252, $7, $105, $xn_5);
    var $xn_6 = $7;
    __label__ = 80;
    break;
   case 80:
    var $xn_6;
    if (($xn_6 | 0) > 0) {
      __label__ = 81;
      break;
    } else {
      var $xn_7 = $xn_6;
      __label__ = 82;
      break;
    }
   case 81:
    var $257 = $xn_6 - 1 | 0;
    if ((HEAP32[$105 + ($257 << 2) >> 2] | 0) == 0) {
      var $xn_6 = $257;
      __label__ = 80;
      break;
    } else {
      var $xn_7 = $xn_6;
      __label__ = 82;
      break;
    }
   case 82:
    var $xn_7;
    if (($xn_7 | 0) > (HEAP32[$r >> 2] | 0)) {
      __label__ = 83;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 83:
    var $265 = ___gmpz_realloc($r, $xn_7);
    __label__ = 84;
    break;
   case 84:
    HEAP32[$r + 4 >> 2] = $xn_7;
    if (($xn_7 | 0) == 0) {
      __label__ = 90;
      break;
    } else {
      __label__ = 85;
      break;
    }
   case 85:
    var $270 = $xn_7 - 1 | 0;
    var $272 = HEAP32[$r + 8 >> 2];
    var $273 = HEAP32[$105 >> 2];
    if (($270 | 0) == 0) {
      var $__x18_1 = $273;
      var $__dst16_1 = $272;
      __label__ = 89;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 86:
    var $__x18_0 = $273;
    var $__src17_0 = $104 + 4 | 0;
    var $__dst16_0 = $272;
    var $__n15_0 = $270;
    __label__ = 87;
    break;
   case 87:
    var $__n15_0;
    var $__dst16_0;
    var $__src17_0;
    var $__x18_0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    var $280 = HEAP32[$__src17_0 >> 2];
    var $281 = $__n15_0 - 1 | 0;
    if (($281 | 0) == 0) {
      __label__ = 88;
      break;
    } else {
      var $__x18_0 = $280;
      var $__src17_0 = $__src17_0 + 4 | 0;
      var $__dst16_0 = $__dst16_0 + 4 | 0;
      var $__n15_0 = $281;
      __label__ = 87;
      break;
    }
   case 88:
    var $__x18_1 = $280;
    var $__dst16_1 = $272 + ($270 << 2) | 0;
    __label__ = 89;
    break;
   case 89:
    var $__dst16_1;
    var $__x18_1;
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    __label__ = 90;
    break;
   case 90:
    var $284 = HEAP32[$__tmp_marker >> 2];
    if (($284 | 0) == 0) {
      __label__ = 92;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 91:
    ___gmp_tmp_reentrant_free($284);
    __label__ = 92;
    break;
   case 92:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_powm_ui["X"] = 1;

function ___gmpz_probab_prime_p($n, $reps) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 72;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $n2 = __stackBase__;
    var $primes = __stackBase__ + 12;
    var $1 = ___gmpz_cmp_ui($n, 1e6);
    if (($1 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      var $_01 = $n;
      __label__ = 6;
      break;
    }
   case 3:
    var $4 = ___gmpz_cmpabs_ui($n, 1e6);
    if (($4 | 0) < 1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $7 = ___gmpz_get_ui($n);
    var $8 = _isprime($7);
    var $10 = ($8 | 0) != 0 ? 2 : 0;
    var $_0 = $10;
    __label__ = 27;
    break;
   case 5:
    var $13 = HEAP32[$n + 8 >> 2];
    var $14 = $n2 | 0;
    HEAP32[$n2 + 8 >> 2] = $13;
    var $18 = -HEAP32[$n + 4 >> 2] | 0;
    HEAP32[$n2 + 4 >> 2] = $18;
    var $_01 = $14;
    __label__ = 6;
    break;
   case 6:
    var $_01;
    var $21 = ___gmpz_get_ui($_01);
    if (($21 & 1 | 0) == 0) {
      var $_0 = 0;
      __label__ = 27;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $26 = HEAPU32[$_01 + 4 >> 2];
    var $27 = ($26 | 0) > 9;
    var $29 = HEAPU32[$_01 + 8 >> 2];
    if ($27) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $31 = ___gmpn_preinv_mod_1($29, $26, -1060120681, 1407542364);
    var $35 = $31;
    __label__ = 10;
    break;
   case 9:
    var $33 = ___gmpn_mod_1($29, $26, -1060120681);
    var $35 = $33;
    __label__ = 10;
    break;
   case 10:
    var $35;
    if ((($35 >>> 0) % 3 | 0) == 0 | (($35 >>> 0) % 5 | 0) == 0 | (($35 >>> 0) % 7 | 0) == 0 | (($35 >>> 0) % 11 | 0) == 0 | (($35 >>> 0) % 13 | 0) == 0 | (($35 >>> 0) % 17 | 0) == 0 | (($35 >>> 0) % 19 | 0) == 0 | (($35 >>> 0) % 23 | 0) == 0 | (($35 >>> 0) % 29 | 0) == 0) {
      var $_0 = 0;
      __label__ = 27;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $55 = ___gmpz_sizeinbase($_01, 2);
    var $nprimes_0 = 0;
    var $q_0 = 31;
    var $p_0 = 1;
    __label__ = 12;
    break;
   case 12:
    var $p_0;
    var $q_0;
    var $nprimes_0;
    if ($q_0 >>> 0 < $55 >>> 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 13:
    var $59 = _isprime($q_0);
    if (($59 | 0) == 0) {
      var $nprimes_3 = $nprimes_0;
      var $p_2 = $p_0;
      __label__ = 25;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $62 = $p_0 & 65535;
    var $63 = $p_0 >>> 16;
    var $64 = $q_0 & 65535;
    var $65 = $q_0 >>> 16;
    var $66 = (i64Math.multiply($64, 0, $62, 0), i64Math.result[0]);
    var $67 = (i64Math.multiply($65, 0, $62, 0), i64Math.result[0]);
    var $68 = (i64Math.multiply($64, 0, $63, 0), i64Math.result[0]);
    var $69 = (i64Math.multiply($65, 0, $63, 0), i64Math.result[0]);
    var $71 = ($66 >>> 16) + $67 | 0;
    var $uadd = _llvm_uadd_with_overflow_i32($71, $68);
    var $72 = $uadd.f0;
    var $73 = $uadd.f1;
    var $__x3_0 = $73 ? $69 + 65536 | 0 : $69;
    if (($__x3_0 | 0) == (-($72 >>> 16) | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if ($27) {
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $80 = ___gmpn_modexact_1c_odd($29, $26, $p_0, 0);
    var $84 = $80;
    __label__ = 18;
    break;
   case 17:
    var $82 = ___gmpn_mod_1($29, $26, $p_0);
    var $84 = $82;
    __label__ = 18;
    break;
   case 18:
    var $84;
    var $nprimes_1 = $nprimes_0;
    __label__ = 19;
    break;
   case 19:
    var $nprimes_1;
    var $86 = $nprimes_1 - 1 | 0;
    if (($nprimes_1 | 0) > 0) {
      __label__ = 20;
      break;
    } else {
      var $nprimes_2 = 0;
      var $p_1 = $q_0;
      __label__ = 24;
      break;
    }
   case 20:
    var $90 = HEAPU32[$primes + ($86 << 2) >> 2];
    if ((($84 >>> 0) % ($90 >>> 0) | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $nprimes_1 = $86;
      __label__ = 19;
      break;
    }
   case 21:
    var $94 = ___gmpn_mod_1($29, $26, $90);
    if (($94 | 0) == 0) {
      var $_0 = 0;
      __label__ = 27;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    ___gmp_assert_fail(STRING_TABLE.__str458 | 0, 119, STRING_TABLE.__str1459 | 0);
    throw "Reached an unreachable!";
   case 23:
    var $nprimes_2 = $nprimes_0;
    var $p_1 = $72 << 16 | $66 & 65535;
    __label__ = 24;
    break;
   case 24:
    var $p_1;
    var $nprimes_2;
    HEAP32[$primes + ($nprimes_2 << 2) >> 2] = $q_0;
    var $nprimes_3 = $nprimes_2 + 1 | 0;
    var $p_2 = $p_1;
    __label__ = 25;
    break;
   case 25:
    var $p_2;
    var $nprimes_3;
    var $nprimes_0 = $nprimes_3;
    var $q_0 = $q_0 + 2 | 0;
    var $p_0 = $p_2;
    __label__ = 12;
    break;
   case 26:
    var $106 = ___gmpz_millerrabin($_01, $reps);
    var $_0 = $106;
    __label__ = 27;
    break;
   case 27:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_probab_prime_p["X"] = 1;

function ___gmpz_realloc($m, $new_alloc) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = ($new_alloc | 0) > 1 ? $new_alloc : 1;
    if ($2 >>> 0 > 134217727) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = HEAP32[_stderr >> 2];
    var $6 = _fwrite(STRING_TABLE.__str460 | 0, 26, 1, $5);
    _abort();
    throw "Reached an unreachable!";
   case 4:
    var $8 = HEAP32[___gmp_reallocate_func >> 2];
    var $9 = $m + 8 | 0;
    var $11 = HEAP32[$9 >> 2];
    var $12 = $m | 0;
    var $14 = HEAP32[$12 >> 2] << 2;
    var $15 = $2 << 2;
    var $16 = FUNCTION_TABLE[$8]($11, $14, $15);
    var $17 = $16;
    HEAP32[$9 >> 2] = $17;
    HEAP32[$12 >> 2] = $2;
    var $18 = $m + 4 | 0;
    var $19 = HEAP32[$18 >> 2];
    var $22 = ($19 | 0) > -1 ? $19 : -$19 | 0;
    if (($22 | 0) > ($2 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$18 >> 2] = 0;
    __label__ = 6;
    break;
   case 6:
    return $16;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_scan0($u, $starting_bit) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$u + 8 >> 2];
    var $4 = HEAP32[$u + 4 >> 2];
    var $5 = ($4 | 0) > -1;
    var $7 = $5 ? $4 : -$4 | 0;
    var $8 = $2 + ($7 << 2) | 0;
    var $9 = $starting_bit >>> 5;
    var $10 = $2 + ($9 << 2) | 0;
    if (($9 | 0) < ($7 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $13 = $5 ? $starting_bit : -1;
    var $_0 = $13;
    __label__ = 22;
    break;
   case 4:
    var $15 = HEAPU32[$10 >> 2];
    if ($5) {
      __label__ = 5;
      break;
    } else {
      var $q_0 = $10;
      __label__ = 11;
      break;
    }
   case 5:
    var $limb_0 = $15 | (1 << ($starting_bit & 31)) - 1;
    var $p_0 = $10;
    __label__ = 6;
    break;
   case 6:
    var $p_0;
    var $limb_0;
    if (($limb_0 | 0) == -1) {
      __label__ = 7;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    var $24 = $p_0 + 4 | 0;
    if (($24 | 0) == ($8 | 0)) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $_0 = $7 << 5;
    __label__ = 22;
    break;
   case 9:
    var $limb_0 = HEAP32[$24 >> 2];
    var $p_0 = $24;
    __label__ = 6;
    break;
   case 10:
    var $limb_2 = $limb_0 ^ -1;
    var $p_2 = $p_0;
    __label__ = 18;
    break;
   case 11:
    var $q_0;
    if (($q_0 | 0) == ($2 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $34 = $q_0 - 4 | 0;
    if ((HEAP32[$34 >> 2] | 0) == 0) {
      var $q_0 = $34;
      __label__ = 11;
      break;
    } else {
      var $limb_1 = $15;
      __label__ = 14;
      break;
    }
   case 13:
    var $limb_1 = $15 - 1 | 0;
    __label__ = 14;
    break;
   case 14:
    var $limb_1;
    var $41 = $limb_1 & -1 << ($starting_bit & 31);
    if (($41 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $limb_2 = $41;
      var $p_2 = $10;
      __label__ = 18;
      break;
    }
   case 15:
    var $_sum = $9 + 1 | 0;
    if (($_sum | 0) == ($7 | 0)) {
      var $_0 = -1;
      __label__ = 22;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $p_1 = $2 + ($_sum << 2) | 0;
    __label__ = 17;
    break;
   case 17:
    var $p_1;
    var $47 = HEAP32[$p_1 >> 2];
    if (($47 | 0) == 0) {
      var $p_1 = $p_1 + 4 | 0;
      __label__ = 17;
      break;
    } else {
      var $limb_2 = $47;
      var $p_2 = $p_1;
      __label__ = 18;
      break;
    }
   case 18:
    var $p_2;
    var $limb_2;
    var $51 = $limb_2 & -$limb_2;
    if ($51 >>> 0 < 65536) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $55 = $51 >>> 0 < 256 ? 1 : 9;
    var $60 = $55;
    __label__ = 21;
    break;
   case 20:
    var $58 = $51 >>> 0 < 16777216 ? 17 : 25;
    var $60 = $58;
    __label__ = 21;
    break;
   case 21:
    var $60;
    var $62 = STRING_TABLE.___gmpn_clz_tab + ($51 >>> ($60 >>> 0)) | 0;
    var $_0 = ($p_2 - $2 << 3) - 2 + $60 + (HEAPU8[$62] & 255) | 0;
    __label__ = 22;
    break;
   case 22:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_scan0["X"] = 1;

function ___gmpz_scan1($u, $starting_bit) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$u + 8 >> 2];
    var $4 = HEAP32[$u + 4 >> 2];
    var $5 = ($4 | 0) > -1;
    var $7 = $5 ? $4 : -$4 | 0;
    var $8 = $2 + ($7 << 2) | 0;
    var $9 = $starting_bit >>> 5;
    var $10 = $2 + ($9 << 2) | 0;
    if (($9 | 0) < ($7 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $13 = $5 ? -1 : $starting_bit;
    var $_0 = $13;
    __label__ = 25;
    break;
   case 4:
    var $15 = HEAPU32[$10 >> 2];
    if ($5) {
      __label__ = 5;
      break;
    } else {
      var $q_0 = $10;
      __label__ = 9;
      break;
    }
   case 5:
    var $19 = $15 & -1 << ($starting_bit & 31);
    if (($19 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $limb_2 = $19;
      var $p_3 = $10;
      __label__ = 21;
      break;
    }
   case 6:
    var $_sum = $9 + 1 | 0;
    if (($_sum | 0) == ($7 | 0)) {
      var $_0 = -1;
      __label__ = 25;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $p_0 = $2 + ($_sum << 2) | 0;
    __label__ = 8;
    break;
   case 8:
    var $p_0;
    var $25 = HEAPU32[$p_0 >> 2];
    if (($25 | 0) == 0) {
      var $p_0 = $p_0 + 4 | 0;
      __label__ = 8;
      break;
    } else {
      var $limb_2 = $25;
      var $p_3 = $p_0;
      __label__ = 21;
      break;
    }
   case 9:
    var $q_0;
    if (($q_0 | 0) == ($2 | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $30 = $q_0 - 4 | 0;
    if ((HEAP32[$30 >> 2] | 0) == 0) {
      var $q_0 = $30;
      __label__ = 9;
      break;
    } else {
      var $limb_0 = $15;
      __label__ = 15;
      break;
    }
   case 11:
    if (($15 | 0) == 0) {
      var $p_1 = $10;
      __label__ = 12;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 12:
    var $p_1;
    var $35 = $p_1 + 4 | 0;
    var $36 = HEAP32[$35 >> 2];
    if (($36 | 0) == 0) {
      var $p_1 = $35;
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $limb_2 = -$36 | 0;
    var $p_3 = $35;
    __label__ = 21;
    break;
   case 14:
    var $limb_0 = $15 - 1 | 0;
    __label__ = 15;
    break;
   case 15:
    var $limb_0;
    var $limb_1 = $limb_0 | (1 << ($starting_bit & 31)) - 1;
    var $p_2 = $10;
    __label__ = 16;
    break;
   case 16:
    var $p_2;
    var $limb_1;
    if (($limb_1 | 0) == -1) {
      __label__ = 17;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 17:
    var $49 = $p_2 + 4 | 0;
    if (($49 | 0) == ($8 | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 18:
    var $_0 = $7 << 5;
    __label__ = 25;
    break;
   case 19:
    var $limb_1 = HEAPU32[$49 >> 2];
    var $p_2 = $49;
    __label__ = 16;
    break;
   case 20:
    var $limb_2 = $limb_1 ^ -1;
    var $p_3 = $p_2;
    __label__ = 21;
    break;
   case 21:
    var $p_3;
    var $limb_2;
    var $58 = $limb_2 & -$limb_2;
    if ($58 >>> 0 < 65536) {
      __label__ = 22;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 22:
    var $62 = $58 >>> 0 < 256 ? 1 : 9;
    var $67 = $62;
    __label__ = 24;
    break;
   case 23:
    var $65 = $58 >>> 0 < 16777216 ? 17 : 25;
    var $67 = $65;
    __label__ = 24;
    break;
   case 24:
    var $67;
    var $69 = STRING_TABLE.___gmpn_clz_tab + ($58 >>> ($67 >>> 0)) | 0;
    var $_0 = ($p_3 - $2 << 3) - 2 + $67 + (HEAPU8[$69] & 255) | 0;
    __label__ = 25;
    break;
   case 25:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_scan1["X"] = 1;

function ___gmpz_rrandomb($x, $rstate, $nbits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = ($nbits + 31 | 0) >>> 5;
    if (($nbits | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if (($2 | 0) > (HEAP32[$x >> 2] | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $9 = ___gmpz_realloc($x, $2);
    __label__ = 5;
    break;
   case 5:
    var $12 = HEAP32[$x + 8 >> 2];
    _gmp_rrandomb465($12, $rstate, $nbits);
    __label__ = 6;
    break;
   case 6:
    HEAP32[$x + 4 >> 2] = $2;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _gmp_rrandomb465($rp, $rstate, $nbits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ranm = __stackBase__;
    var $2 = ($nbits + 31 | 0) >>> 5;
    HEAP32[$rp + ($2 - 1 << 2) >> 2] = -1 >>> ((-$nbits & 31) >>> 0);
    var $8 = $2 - 2 | 0;
    if (($8 | 0) > -1) {
      var $i_01 = $8;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $i_01;
    HEAP32[$rp + ($i_01 << 2) >> 2] = -1;
    if (($i_01 | 0) > 0) {
      var $i_01 = $i_01 - 1 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $13 = $rstate + 16 | 0;
    var $17 = HEAP32[HEAP32[$13 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$17]($rstate, $ranm, 32);
    var $20 = (HEAP32[$ranm >> 2] & 3) + 1 | 0;
    var $21 = Math.floor(($nbits >>> 0) / ($20 >>> 0));
    var $24 = (($21 | 0) == 0 & 1) + $21 | 0;
    var $bi_0 = $nbits;
    __label__ = 5;
    break;
   case 5:
    var $bi_0;
    var $29 = HEAP32[HEAP32[$13 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$29]($rstate, $ranm, 32);
    var $32 = (HEAPU32[$ranm >> 2] >>> 0) % ($24 >>> 0) + 1 | 0;
    var $35 = $bi_0 >>> 0 < $32 >>> 0 ? 0 : $bi_0 - $32 | 0;
    if (($35 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $41 = $rp + ($35 >>> 5 << 2) | 0;
    var $43 = HEAP32[$41 >> 2] ^ 1 << ($35 & 31);
    HEAP32[$41 >> 2] = $43;
    var $47 = HEAP32[HEAP32[$13 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$47]($rstate, $ranm, 32);
    var $50 = (HEAPU32[$ranm >> 2] >>> 0) % ($24 >>> 0) + 1 | 0;
    var $53 = $35 >>> 0 < $50 >>> 0 ? 0 : $35 - $50 | 0;
    var $55 = $rp + ($53 >>> 5 << 2) | 0;
    var $56 = HEAP32[$55 >> 2];
    var $58 = 1 << ($53 & 31);
    var $uadd = _llvm_uadd_with_overflow_i32($56, $58);
    var $59 = $uadd.f0;
    HEAP32[$55 >> 2] = $59;
    var $60 = $uadd.f1;
    if ($60) {
      var $__p_0 = $55;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $__p_0;
    var $61 = $__p_0 + 4 | 0;
    var $63 = HEAP32[$61 >> 2] + 1 | 0;
    HEAP32[$61 >> 2] = $63;
    if (($63 | 0) == 0) {
      var $__p_0 = $61;
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if (($53 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $bi_0 = $53;
      __label__ = 5;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_gmp_rrandomb465["X"] = 1;

function ___gmpz_remove($dest, $src, $f) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 408;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $fpow = __stackBase__;
    var $x = __stackBase__ + 384;
    var $rem = __stackBase__ + 396;
    var $1 = ___gmpz_cmp_ui($f, 1);
    if (($1 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if ((HEAP32[$src + 4 >> 2] | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 5:
    if (($src | 0) == ($dest | 0)) {
      var $_0 = 0;
      __label__ = 16;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    ___gmpz_set($dest, $src);
    var $_0 = 0;
    __label__ = 16;
    break;
   case 7:
    var $12 = ___gmpz_cmp_ui($f, 2);
    if (($12 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $15 = ___gmpz_scan1($src, 0);
    ___gmpz_fdiv_q_2exp($dest, $src, $15);
    var $_0 = $15;
    __label__ = 16;
    break;
   case 9:
    var $17 = $rem | 0;
    ___gmpz_init($17);
    var $18 = $x | 0;
    ___gmpz_init($18);
    var $19 = $fpow | 0;
    ___gmpz_init($19);
    ___gmpz_set($19, $f);
    ___gmpz_set($dest, $src);
    ___gmpz_tdiv_qr($18, $17, $dest, $19);
    var $20 = $rem + 4 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 0) {
      var $p_03 = 0;
      var $23 = $19;
      __label__ = 10;
      break;
    } else {
      var $p_0_lcssa = 0;
      var $_lcssa = $19;
      __label__ = 11;
      break;
    }
   case 10:
    var $23;
    var $p_03;
    var $24 = $p_03 + 1 | 0;
    var $25 = $fpow + $24 * 12 | 0;
    ___gmpz_init($25);
    ___gmpz_mul($25, $23, $23);
    ___gmpz_set($dest, $18);
    ___gmpz_tdiv_qr($18, $17, $dest, $25);
    if ((HEAP32[$20 >> 2] | 0) == 0) {
      var $p_03 = $24;
      var $23 = $25;
      __label__ = 10;
      break;
    } else {
      var $p_0_lcssa = $24;
      var $_lcssa = $25;
      __label__ = 11;
      break;
    }
   case 11:
    var $_lcssa;
    var $p_0_lcssa;
    var $29 = (1 << $p_0_lcssa) - 1 | 0;
    ___gmpz_clear($_lcssa);
    if (($p_0_lcssa | 0) > 0) {
      var $pwr_01 = $29;
      var $_in = $p_0_lcssa;
      __label__ = 12;
      break;
    } else {
      var $pwr_0_lcssa = $29;
      __label__ = 15;
      break;
    }
   case 12:
    var $_in;
    var $pwr_01;
    var $31 = $_in - 1 | 0;
    var $32 = $fpow + $31 * 12 | 0;
    ___gmpz_tdiv_qr($18, $17, $dest, $32);
    if ((HEAP32[$20 >> 2] | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $pwr_1 = $pwr_01;
      __label__ = 14;
      break;
    }
   case 13:
    var $37 = (1 << $31) + $pwr_01 | 0;
    ___gmpz_set($dest, $18);
    var $pwr_1 = $37;
    __label__ = 14;
    break;
   case 14:
    var $pwr_1;
    ___gmpz_clear($32);
    if (($31 | 0) > 0) {
      var $pwr_01 = $pwr_1;
      var $_in = $31;
      __label__ = 12;
      break;
    } else {
      var $pwr_0_lcssa = $pwr_1;
      __label__ = 15;
      break;
    }
   case 15:
    var $pwr_0_lcssa;
    ___gmpz_clear($18);
    ___gmpz_clear($17);
    var $_0 = $pwr_0_lcssa;
    __label__ = 16;
    break;
   case 16:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_remove["X"] = 1;

function ___gmpz_root($root, $u, $nth) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$u + 4 >> 2];
    if (($2 | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if (($nth & 1 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmp_sqrt_of_negative();
    throw "Reached an unreachable!";
   case 5:
    if (($nth | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 7:
    if (($2 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 8:
    if (($root | 0) == 0) {
      var $_0 = 1;
      __label__ = 33;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$root + 4 >> 2] = 0;
    var $_0 = 1;
    __label__ = 33;
    break;
   case 10:
    var $18 = ($2 | 0) > -1;
    var $20 = $18 ? $2 : -$2 | 0;
    var $21 = $20 - 1 | 0;
    var $22 = Math.floor(($21 >>> 0) / ($nth >>> 0));
    var $23 = $22 + 1 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $24 = ($root | 0) != 0;
    if (($u | 0) == ($root | 0) | $24 ^ 1) {
      __label__ = 14;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    if (($23 | 0) > (HEAP32[$root >> 2] | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 12:
    var $31 = ___gmpz_realloc($root, $23);
    var $rootp_0 = $31;
    __label__ = 18;
    break;
   case 13:
    var $rootp_0 = HEAP32[$root + 8 >> 2];
    __label__ = 18;
    break;
   case 14:
    var $37 = $23 << 2;
    if ($37 >>> 0 < 65536) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $40 = STACKTOP;
    STACKTOP += $37;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $44 = $40;
    __label__ = 17;
    break;
   case 16:
    var $42 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $37);
    var $44 = $42;
    __label__ = 17;
    break;
   case 17:
    var $44;
    var $rootp_0 = $44;
    __label__ = 18;
    break;
   case 18:
    var $rootp_0;
    var $48 = HEAPU32[$u + 8 >> 2];
    if (($nth | 0) == 1) {
      __label__ = 19;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 19:
    var $51 = HEAPU32[$48 >> 2];
    if (($21 | 0) == 0) {
      var $__x_1 = $51;
      var $__dst_1 = $rootp_0;
      __label__ = 22;
      break;
    } else {
      var $__x_0 = $51;
      var $_pn = $48;
      var $__dst_0 = $rootp_0;
      var $__n_0 = $21;
      __label__ = 20;
      break;
    }
   case 20:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $54 = HEAP32[$__src_0 >> 2];
    var $55 = $__n_0 - 1 | 0;
    if (($55 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $__x_0 = $54;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $55;
      __label__ = 20;
      break;
    }
   case 21:
    var $__x_1 = $54;
    var $__dst_1 = $rootp_0 + ($21 << 2) | 0;
    __label__ = 22;
    break;
   case 22:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $remn_0 = 0;
    __label__ = 24;
    break;
   case 23:
    var $59 = ___gmpn_rootrem($rootp_0, 0, $48, $20, $nth);
    var $remn_0 = $59;
    __label__ = 24;
    break;
   case 24:
    var $remn_0;
    if ($24) {
      __label__ = 25;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 25:
    var $63 = $18 ? $23 : $22 ^ -1;
    HEAP32[$root + 4 >> 2] = $63;
    if (($u | 0) != ($root | 0) | ($23 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $68 = HEAP32[$rootp_0 >> 2];
    if (($22 | 0) == 0) {
      var $__x4_1 = $68;
      var $__dst2_1 = $48;
      __label__ = 29;
      break;
    } else {
      var $__x4_0 = $68;
      var $rootp_0_pn = $rootp_0;
      var $__dst2_0 = $48;
      var $__n1_0 = $22;
      __label__ = 27;
      break;
    }
   case 27:
    var $__n1_0;
    var $__dst2_0;
    var $rootp_0_pn;
    var $__x4_0;
    var $__src3_0 = $rootp_0_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $71 = HEAP32[$__src3_0 >> 2];
    var $72 = $__n1_0 - 1 | 0;
    if (($72 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      var $__x4_0 = $71;
      var $rootp_0_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $72;
      __label__ = 27;
      break;
    }
   case 28:
    var $__x4_1 = $71;
    var $__dst2_1 = $48 + ($22 << 2) | 0;
    __label__ = 29;
    break;
   case 29:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 30;
    break;
   case 30:
    var $75 = HEAP32[$__tmp_marker >> 2];
    if (($75 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    ___gmp_tmp_reentrant_free($75);
    __label__ = 32;
    break;
   case 32:
    var $_0 = ($remn_0 | 0) == 0 & 1;
    __label__ = 33;
    break;
   case 33:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_root["X"] = 1;

function ___gmpz_rootrem($root, $rem, $u, $nth) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAP32[$u + 4 >> 2];
    if (($2 | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if (($nth & 1 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmp_sqrt_of_negative();
    throw "Reached an unreachable!";
   case 5:
    if (($nth | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 6:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 7:
    if (($2 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 8:
    if (($root | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$root + 4 >> 2] = 0;
    __label__ = 10;
    break;
   case 10:
    HEAP32[$rem + 4 >> 2] = 0;
    __label__ = 47;
    break;
   case 11:
    var $20 = ($2 | 0) > -1;
    var $22 = $20 ? $2 : -$2 | 0;
    var $23 = $22 - 1 | 0;
    var $24 = Math.floor(($23 >>> 0) / ($nth >>> 0));
    var $25 = $24 + 1 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $26 = ($root | 0) != 0;
    var $27 = ($u | 0) == ($root | 0);
    if ($27 | $26 ^ 1) {
      __label__ = 15;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    if (($25 | 0) > (HEAP32[$root >> 2] | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $33 = ___gmpz_realloc($root, $25);
    var $rootp_0 = $33;
    __label__ = 19;
    break;
   case 14:
    var $rootp_0 = HEAP32[$root + 8 >> 2];
    __label__ = 19;
    break;
   case 15:
    var $39 = $25 << 2;
    if ($39 >>> 0 < 65536) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $42 = STACKTOP;
    STACKTOP += $39;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $46 = $42;
    __label__ = 18;
    break;
   case 17:
    var $44 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $39);
    var $46 = $44;
    __label__ = 18;
    break;
   case 18:
    var $46;
    var $rootp_0 = $46;
    __label__ = 19;
    break;
   case 19:
    var $rootp_0;
    if (($u | 0) == ($rem | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    if (($22 | 0) > (HEAP32[$rem >> 2] | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $55 = ___gmpz_realloc($rem, $22);
    var $remp_0 = $55;
    __label__ = 27;
    break;
   case 22:
    var $remp_0 = HEAP32[$rem + 8 >> 2];
    __label__ = 27;
    break;
   case 23:
    var $61 = $22 << 2;
    if ($61 >>> 0 < 65536) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $64 = STACKTOP;
    STACKTOP += $61;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $68 = $64;
    __label__ = 26;
    break;
   case 25:
    var $66 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $61);
    var $68 = $66;
    __label__ = 26;
    break;
   case 26:
    var $68;
    var $remp_0 = $68;
    __label__ = 27;
    break;
   case 27:
    var $remp_0;
    var $72 = HEAPU32[$u + 8 >> 2];
    if (($nth | 0) == 1) {
      __label__ = 28;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 28:
    var $75 = HEAPU32[$72 >> 2];
    if (($23 | 0) == 0) {
      var $__dst_1 = $rootp_0;
      var $__x_1 = $75;
      __label__ = 31;
      break;
    } else {
      var $__n_0 = $23;
      var $__dst_0 = $rootp_0;
      var $_pn = $72;
      var $__x_0 = $75;
      __label__ = 29;
      break;
    }
   case 29:
    var $__x_0;
    var $_pn;
    var $__dst_0;
    var $__n_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $78 = HEAP32[$__src_0 >> 2];
    var $79 = $__n_0 - 1 | 0;
    if (($79 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      var $__n_0 = $79;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $_pn = $__src_0;
      var $__x_0 = $78;
      __label__ = 29;
      break;
    }
   case 30:
    var $__dst_1 = $rootp_0 + ($23 << 2) | 0;
    var $__x_1 = $78;
    __label__ = 31;
    break;
   case 31:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $remn_0 = 0;
    __label__ = 33;
    break;
   case 32:
    var $83 = ___gmpn_rootrem($rootp_0, $remp_0, $72, $22, $nth);
    var $remn_0 = $83;
    __label__ = 33;
    break;
   case 33:
    var $remn_0;
    if ($26) {
      __label__ = 34;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 34:
    var $87 = $20 ? $25 : $24 ^ -1;
    HEAP32[$root + 4 >> 2] = $87;
    if ($27) {
      __label__ = 35;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 35:
    if (($25 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $92 = HEAP32[$rootp_0 >> 2];
    if (($24 | 0) == 0) {
      var $__x4_1 = $92;
      var $__dst2_1 = $72;
      __label__ = 39;
      break;
    } else {
      var $__x4_0 = $92;
      var $rootp_0_pn = $rootp_0;
      var $__dst2_0 = $72;
      var $__n1_0 = $24;
      __label__ = 37;
      break;
    }
   case 37:
    var $__n1_0;
    var $__dst2_0;
    var $rootp_0_pn;
    var $__x4_0;
    var $__src3_0 = $rootp_0_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $95 = HEAP32[$__src3_0 >> 2];
    var $96 = $__n1_0 - 1 | 0;
    if (($96 | 0) == 0) {
      __label__ = 38;
      break;
    } else {
      var $__x4_0 = $95;
      var $rootp_0_pn = $__src3_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $96;
      __label__ = 37;
      break;
    }
   case 38:
    var $__x4_1 = $95;
    var $__dst2_1 = $72 + ($24 << 2) | 0;
    __label__ = 39;
    break;
   case 39:
    var $__dst2_1;
    var $__x4_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 45;
    break;
   case 40:
    if (($u | 0) != ($rem | 0) | ($remn_0 | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $103 = $remn_0 - 1 | 0;
    var $104 = HEAP32[$remp_0 >> 2];
    if (($103 | 0) == 0) {
      var $__x8_1 = $104;
      var $__dst6_1 = $72;
      __label__ = 44;
      break;
    } else {
      var $__x8_0 = $104;
      var $remp_0_pn = $remp_0;
      var $__dst6_0 = $72;
      var $__n5_0 = $103;
      __label__ = 42;
      break;
    }
   case 42:
    var $__n5_0;
    var $__dst6_0;
    var $remp_0_pn;
    var $__x8_0;
    var $__src7_0 = $remp_0_pn + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $107 = HEAP32[$__src7_0 >> 2];
    var $108 = $__n5_0 - 1 | 0;
    if (($108 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      var $__x8_0 = $107;
      var $remp_0_pn = $__src7_0;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $__n5_0 = $108;
      __label__ = 42;
      break;
    }
   case 43:
    var $__x8_1 = $107;
    var $__dst6_1 = $72 + ($103 << 2) | 0;
    __label__ = 44;
    break;
   case 44:
    var $__dst6_1;
    var $__x8_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    __label__ = 45;
    break;
   case 45:
    HEAP32[$rem + 4 >> 2] = $remn_0;
    var $112 = HEAP32[$__tmp_marker >> 2];
    if (($112 | 0) == 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    ___gmp_tmp_reentrant_free($112);
    __label__ = 47;
    break;
   case 47:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_rootrem["X"] = 1;

function ___gmpz_sizeinbase($x, $base) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$x + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($5 | 0) == 0) {
      var $result_0 = 1;
      __label__ = 9;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $12 = HEAPU32[HEAP32[$x + 8 >> 2] + ($5 - 1 << 2) >> 2];
    if ($12 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $16 = $12 >>> 0 < 256 ? 1 : 9;
    var $21 = $16;
    __label__ = 6;
    break;
   case 5:
    var $19 = $12 >>> 0 < 16777216 ? 17 : 25;
    var $21 = $19;
    __label__ = 6;
    break;
   case 6:
    var $21;
    var $23 = STRING_TABLE.___gmpn_clz_tab + ($12 >>> ($21 >>> 0)) | 0;
    var $29 = $21 - 33 + (HEAPU8[$23] & 255) + ($5 << 5) | 0;
    if (($base - 1 & $base | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $35 = HEAPU32[___gmpn_bases + $base * 20 + 12 >> 2];
    var $37 = $29 - 1 + $35 | 0;
    var $38 = Math.floor(($37 >>> 0) / ($35 >>> 0));
    var $result_0 = $38;
    __label__ = 9;
    break;
   case 8:
    var $40 = $29 >>> 0;
    var $41 = ___gmpn_bases + $base * 20 + 4 | 0;
    var $42 = (tempDoubleI32[0] = HEAP32[$41 >> 2], tempDoubleI32[1] = HEAP32[$41 + 4 >> 2], tempDoubleF64[0]);
    var $43 = $40 * $42;
    var $44 = $43 >= 0 ? Math.floor($43) : Math.ceil($43);
    var $result_0 = $44 + 1 | 0;
    __label__ = 9;
    break;
   case 9:
    var $result_0;
    return $result_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_set_f($w, $u) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 8 >> 2];
    if (($2 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$w + 4 >> 2] = 0;
    __label__ = 16;
    break;
   case 4:
    if (($2 | 0) > (HEAP32[$w >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $11 = ___gmpz_realloc($w, $2);
    __label__ = 6;
    break;
   case 6:
    var $14 = HEAP32[$w + 8 >> 2];
    var $15 = $14;
    var $17 = HEAP32[$u + 12 >> 2];
    var $19 = HEAP32[$u + 4 >> 2];
    var $20 = ($19 | 0) > -1;
    var $22 = $20 ? $2 : -$2 | 0;
    HEAP32[$w + 4 >> 2] = $22;
    var $25 = $20 ? $19 : -$19 | 0;
    if (($2 | 0) > ($25 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 7:
    var $28 = $2 - $25 | 0;
    if (($2 | 0) == ($25 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $30 = $28 << 2;
    _memset($15, 0, $30, 4);
    __label__ = 9;
    break;
   case 9:
    var $wp_0 = $14 + ($28 << 2) | 0;
    var $up_0 = $17;
    var $size_0 = $25;
    __label__ = 11;
    break;
   case 10:
    var $wp_0 = $14;
    var $up_0 = $17 + ($25 - $2 << 2) | 0;
    var $size_0 = $2;
    __label__ = 11;
    break;
   case 11:
    var $size_0;
    var $up_0;
    var $wp_0;
    if (($size_0 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $39 = $size_0 - 1 | 0;
    var $40 = HEAP32[$up_0 >> 2];
    if (($39 | 0) == 0) {
      var $__x_1 = $40;
      var $__dst2_1 = $wp_0;
      __label__ = 15;
      break;
    } else {
      var $__x_0 = $40;
      var $up_0_pn = $up_0;
      var $__dst2_0 = $wp_0;
      var $__n1_0 = $39;
      __label__ = 13;
      break;
    }
   case 13:
    var $__n1_0;
    var $__dst2_0;
    var $up_0_pn;
    var $__x_0;
    var $__src_0 = $up_0_pn + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $43 = HEAP32[$__src_0 >> 2];
    var $44 = $__n1_0 - 1 | 0;
    if (($44 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      var $__x_0 = $43;
      var $up_0_pn = $__src_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $44;
      __label__ = 13;
      break;
    }
   case 14:
    var $__x_1 = $43;
    var $__dst2_1 = $wp_0 + ($39 << 2) | 0;
    __label__ = 15;
    break;
   case 15:
    var $__dst2_1;
    var $__x_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    __label__ = 16;
    break;
   case 16:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_set_f["X"] = 1;

function ___gmpz_setbit($d, $bit_index) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $d + 4 | 0;
    var $2 = HEAPU32[$1 >> 2];
    var $4 = HEAPU32[$d + 8 >> 2];
    var $5 = $bit_index >>> 5;
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      var $zero_bound_0 = 0;
      __label__ = 10;
      break;
    }
   case 3:
    if (($5 | 0) < ($2 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $12 = $4 + ($5 << 2) | 0;
    var $14 = HEAP32[$12 >> 2] | 1 << ($bit_index & 31);
    HEAP32[$12 >> 2] = $14;
    HEAP32[$1 >> 2] = $2;
    __label__ = 28;
    break;
   case 5:
    var $18 = $5 + 1 | 0;
    if ((HEAP32[$d >> 2] | 0) < ($18 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $dp_0 = $4;
      __label__ = 7;
      break;
    }
   case 6:
    var $21 = ___gmpz_realloc($d, $18);
    var $dp_0 = $21;
    __label__ = 7;
    break;
   case 7:
    var $dp_0;
    if (($5 | 0) == ($2 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $scevgep7 = $dp_0 + ($2 << 2) | 0;
    var $26 = $5 - $2 << 2;
    _memset($scevgep7, 0, $26, 4);
    __label__ = 9;
    break;
   case 9:
    HEAP32[$dp_0 + ($5 << 2) >> 2] = 1 << ($bit_index & 31);
    HEAP32[$1 >> 2] = $18;
    __label__ = 28;
    break;
   case 10:
    var $zero_bound_0;
    if ((HEAP32[$4 + ($zero_bound_0 << 2) >> 2] | 0) == 0) {
      var $zero_bound_0 = $zero_bound_0 + 1 | 0;
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $36 = -$2 | 0;
    if (($5 | 0) > ($zero_bound_0 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 12:
    if (($5 | 0) < ($36 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 13:
    var $41 = $4 + ($5 << 2) | 0;
    var $46 = HEAP32[$41 >> 2] & (1 << ($bit_index & 31) ^ -1);
    HEAP32[$41 >> 2] = $46;
    if (($46 | 0) == 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 14:
    if (($5 | 0) == ($2 ^ -1 | 0)) {
      var $dsize_0 = $36;
      __label__ = 15;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 15:
    var $dsize_0;
    var $51 = $dsize_0 - 1 | 0;
    if (($51 | 0) > 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    if ((HEAP32[$4 + ($dsize_0 - 2 << 2) >> 2] | 0) == 0) {
      var $dsize_0 = $51;
      __label__ = 15;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    HEAP32[$1 >> 2] = 1 - $dsize_0 | 0;
    __label__ = 28;
    break;
   case 18:
    var $61 = $4 + ($5 << 2) | 0;
    var $62 = HEAPU32[$61 >> 2];
    if (($5 | 0) == ($zero_bound_0 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 19:
    var $69 = ($62 - 1 & (1 << ($bit_index & 31) ^ -1)) + 1 | 0;
    HEAP32[$61 >> 2] = $69;
    if (($69 | 0) == 0) {
      var $i_0_in = $5;
      __label__ = 20;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 20:
    var $i_0_in;
    var $i_0 = $i_0_in + 1 | 0;
    if (($i_0 | 0) < ($36 | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    var $73 = $4 + ($i_0 << 2) | 0;
    var $75 = HEAP32[$73 >> 2] + 1 | 0;
    HEAP32[$73 >> 2] = $75;
    if (($75 | 0) == 0) {
      var $i_0_in = $i_0;
      __label__ = 20;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 22:
    var $78 = 1 - $2 | 0;
    if ((HEAP32[$d >> 2] | 0) < ($78 | 0)) {
      __label__ = 23;
      break;
    } else {
      var $dp_1 = $4;
      __label__ = 24;
      break;
    }
   case 23:
    var $83 = ___gmpz_realloc($d, $78);
    var $dp_1 = $83;
    __label__ = 24;
    break;
   case 24:
    var $dp_1;
    HEAP32[$dp_1 + ($i_0 << 2) >> 2] = 1;
    HEAP32[$1 >> 2] = -$78 | 0;
    __label__ = 28;
    break;
   case 25:
    var $90 = 1 << ($bit_index & 31);
    HEAP32[$61 >> 2] = $62 - $90 | 0;
    if ($62 >>> 0 < $90 >>> 0) {
      var $__p_0 = $61;
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 26:
    var $__p_0;
    var $93 = $__p_0 + 4 | 0;
    var $94 = HEAP32[$93 >> 2];
    var $95 = $94 - 1 | 0;
    HEAP32[$93 >> 2] = $95;
    if (($94 | 0) == 0) {
      var $__p_0 = $93;
      __label__ = 26;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $102 = ((HEAP32[$4 + (($2 ^ -1) << 2) >> 2] | 0) == 0 & 1) + $2 | 0;
    HEAP32[$1 >> 2] = $102;
    __label__ = 28;
    break;
   case 28:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_setbit["X"] = 1;

function ___gmpz_tdiv_q_2exp($w, $u, $cnt) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$u + 4 >> 2];
    var $3 = $cnt >>> 5;
    var $4 = ($2 | 0) > -1;
    var $6 = $4 ? $2 : -$2 | 0;
    var $7 = $6 - $3 | 0;
    if (($7 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    HEAP32[$w + 4 >> 2] = 0;
    __label__ = 15;
    break;
   case 4:
    if ((HEAP32[$w >> 2] | 0) < ($7 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $16 = ___gmpz_realloc($w, $7);
    __label__ = 6;
    break;
   case 6:
    var $19 = HEAPU32[$w + 8 >> 2];
    var $21 = HEAPU32[$u + 8 >> 2];
    var $22 = $cnt & 31;
    if (($22 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $25 = $21 + ($3 << 2) | 0;
    var $26 = ___gmpn_rshift($19, $25, $7, $22);
    var $wsize_0 = $7 - ((HEAP32[$19 + ($7 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    __label__ = 14;
    break;
   case 8:
    if (($6 | 0) == ($3 | 0)) {
      var $wsize_0 = $7;
      __label__ = 14;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $36 = $7 - 1 | 0;
    var $38 = HEAP32[$21 + ($3 << 2) >> 2];
    if (($36 | 0) == 0) {
      var $__x_1 = $38;
      var $__dst_1 = $19;
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $42 = $6 - 1 - $3 | 0;
    var $__x_0 = $38;
    var $__src_0 = $21 + ($3 + 1 << 2) | 0;
    var $__dst_0 = $19;
    var $__n_0 = $36;
    __label__ = 11;
    break;
   case 11:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $46 = HEAP32[$__src_0 >> 2];
    var $47 = $__n_0 - 1 | 0;
    if (($47 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      var $__x_0 = $46;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $47;
      __label__ = 11;
      break;
    }
   case 12:
    var $__x_1 = $46;
    var $__dst_1 = $19 + ($42 << 2) | 0;
    __label__ = 13;
    break;
   case 13:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $wsize_0 = $7;
    __label__ = 14;
    break;
   case 14:
    var $wsize_0;
    var $52 = $4 ? $wsize_0 : -$wsize_0 | 0;
    HEAP32[$w + 4 >> 2] = $52;
    __label__ = 15;
    break;
   case 15:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_tdiv_q_2exp["X"] = 1;

function ___gmpz_sqrtrem($root, $rem, $op) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $2 = HEAPU32[$op + 4 >> 2];
    if (($2 | 0) < 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    if (($2 | 0) < 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    ___gmp_sqrt_of_negative();
    throw "Reached an unreachable!";
   case 5:
    HEAP32[$root + 4 >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = 0;
    __label__ = 26;
    break;
   case 6:
    if ((HEAP32[$rem >> 2] | 0) < ($2 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $15 = ___gmpz_realloc($rem, $2);
    __label__ = 8;
    break;
   case 8:
    var $18 = ($2 + 1 | 0) / 2 & -1;
    var $19 = $root + 8 | 0;
    var $20 = HEAPU32[$19 >> 2];
    var $22 = HEAPU32[$op + 8 >> 2];
    var $23 = $root | 0;
    var $24 = HEAPU32[$23 >> 2];
    var $26 = ($20 | 0) == ($22 | 0);
    if (($24 | 0) < ($18 | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 9:
    if ($26) {
      var $free_me_0 = $20;
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $29 = HEAP32[___gmp_free_func >> 2];
    var $30 = $20;
    var $31 = $24 << 2;
    FUNCTION_TABLE[$29]($30, $31);
    var $free_me_0 = 0;
    __label__ = 11;
    break;
   case 11:
    var $free_me_0;
    HEAP32[$23 >> 2] = $18;
    var $33 = HEAP32[___gmp_allocate_func >> 2];
    var $34 = $18 << 2;
    var $35 = FUNCTION_TABLE[$33]($34);
    var $36 = $35;
    HEAP32[$19 >> 2] = $36;
    var $free_me_1 = $free_me_0;
    var $root_ptr_0 = $36;
    var $op_ptr_0 = $22;
    __label__ = 22;
    break;
   case 12:
    if ($26) {
      __label__ = 13;
      break;
    } else {
      var $free_me_1 = 0;
      var $root_ptr_0 = $20;
      var $op_ptr_0 = $22;
      __label__ = 22;
      break;
    }
   case 13:
    var $39 = $2 << 2;
    if ($39 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $42 = STACKTOP;
    STACKTOP += $39;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $46 = $42;
    __label__ = 16;
    break;
   case 15:
    var $44 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $39);
    var $46 = $44;
    __label__ = 16;
    break;
   case 16:
    var $46;
    var $47 = $46;
    if (($2 | 0) == 0) {
      var $free_me_1 = 0;
      var $root_ptr_0 = $20;
      var $op_ptr_0 = $47;
      __label__ = 22;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $50 = $2 - 1 | 0;
    var $51 = HEAPU32[$20 >> 2];
    if (($50 | 0) == 0) {
      var $__x_1 = $51;
      var $__dst_1 = $47;
      __label__ = 21;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $scevgep = $46 + ($39 - 4) | 0;
    var $__x_0 = $51;
    var $_pn = $20;
    var $__dst_0 = $47;
    var $__n_0 = $50;
    __label__ = 19;
    break;
   case 19:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $56 = HEAP32[$__src_0 >> 2];
    var $57 = $__n_0 - 1 | 0;
    if (($57 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $__x_0 = $56;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $57;
      __label__ = 19;
      break;
    }
   case 20:
    var $__x_1 = $56;
    var $__dst_1 = $scevgep;
    __label__ = 21;
    break;
   case 21:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $free_me_1 = 0;
    var $root_ptr_0 = $20;
    var $op_ptr_0 = $47;
    __label__ = 22;
    break;
   case 22:
    var $op_ptr_0;
    var $root_ptr_0;
    var $free_me_1;
    var $62 = HEAP32[$rem + 8 >> 2];
    var $63 = ___gmpn_sqrtrem($root_ptr_0, $62, $op_ptr_0, $2);
    HEAP32[$root + 4 >> 2] = $18;
    HEAP32[$rem + 4 >> 2] = $63;
    if (($free_me_1 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $68 = HEAP32[___gmp_free_func >> 2];
    var $70 = $24 << 2;
    FUNCTION_TABLE[$68]($free_me_1, $70);
    __label__ = 24;
    break;
   case 24:
    var $71 = HEAP32[$__tmp_marker >> 2];
    if (($71 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    ___gmp_tmp_reentrant_free($71);
    __label__ = 26;
    break;
   case 26:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_sqrtrem["X"] = 1;

function ___gmpz_tdiv_q($quot, $num, $den) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$num + 4 >> 2];
    var $4 = HEAPU32[$den + 4 >> 2];
    var $7 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $10 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $11 = $7 - $10 | 0;
    var $12 = $11 + 1 | 0;
    if (($10 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($11 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    __label__ = 35;
    break;
   case 6:
    if (($12 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $24 = ___gmpz_realloc($quot, $12);
    __label__ = 8;
    break;
   case 8:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $27 = HEAPU32[$quot + 8 >> 2];
    var $29 = HEAPU32[$num + 8 >> 2];
    var $31 = HEAPU32[$den + 8 >> 2];
    if (($31 | 0) == ($27 | 0)) {
      __label__ = 9;
      break;
    } else {
      var $dp_0 = $31;
      __label__ = 18;
      break;
    }
   case 9:
    var $34 = $10 << 2;
    if ($34 >>> 0 < 65536) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $37 = STACKTOP;
    STACKTOP += $34;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $41 = $37;
    __label__ = 12;
    break;
   case 11:
    var $39 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $34);
    var $41 = $39;
    __label__ = 12;
    break;
   case 12:
    var $41;
    var $42 = $41;
    if (($4 | 0) == 0) {
      var $dp_0 = $42;
      __label__ = 18;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $45 = $10 - 1 | 0;
    var $46 = HEAPU32[$27 >> 2];
    if (($45 | 0) == 0) {
      var $__x_1 = $46;
      var $__dst_1 = $42;
      __label__ = 17;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $scevgep = $41 + ($34 - 4) | 0;
    var $__x_0 = $46;
    var $_pn1 = $27;
    var $__dst_0 = $42;
    var $__n_0 = $45;
    __label__ = 15;
    break;
   case 15:
    var $__n_0;
    var $__dst_0;
    var $_pn1;
    var $__x_0;
    var $__src_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $51 = HEAP32[$__src_0 >> 2];
    var $52 = $__n_0 - 1 | 0;
    if (($52 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $__x_0 = $51;
      var $_pn1 = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $52;
      __label__ = 15;
      break;
    }
   case 16:
    var $__x_1 = $51;
    var $__dst_1 = $scevgep;
    __label__ = 17;
    break;
   case 17:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $dp_0 = $42;
    __label__ = 18;
    break;
   case 18:
    var $dp_0;
    var $57 = $7 << 2;
    var $58 = $57 + 4 | 0;
    var $59 = $58 >>> 0 < 65536;
    if (($29 | 0) == ($27 | 0)) {
      __label__ = 19;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 19:
    if ($59) {
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 20:
    var $62 = STACKTOP;
    STACKTOP += $58;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $66 = $62;
    __label__ = 22;
    break;
   case 21:
    var $64 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $58);
    var $66 = $64;
    __label__ = 22;
    break;
   case 22:
    var $66;
    var $67 = $66;
    if (($2 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $70 = $7 - 1 | 0;
    var $71 = HEAPU32[$27 >> 2];
    if (($70 | 0) == 0) {
      var $__x5_1 = $71;
      var $__dst3_1 = $67;
      __label__ = 27;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $scevgep10 = $66 + ($57 - 4) | 0;
    var $__x5_0 = $71;
    var $_pn = $27;
    var $__dst3_0 = $67;
    var $__n2_0 = $70;
    __label__ = 25;
    break;
   case 25:
    var $__n2_0;
    var $__dst3_0;
    var $_pn;
    var $__x5_0;
    var $__src4_0 = $_pn + 4 | 0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    var $76 = HEAP32[$__src4_0 >> 2];
    var $77 = $__n2_0 - 1 | 0;
    if (($77 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      var $__x5_0 = $76;
      var $_pn = $__src4_0;
      var $__dst3_0 = $__dst3_0 + 4 | 0;
      var $__n2_0 = $77;
      __label__ = 25;
      break;
    }
   case 26:
    var $__x5_1 = $76;
    var $__dst3_1 = $scevgep10;
    __label__ = 27;
    break;
   case 27:
    var $__dst3_1;
    var $__x5_1;
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    __label__ = 28;
    break;
   case 28:
    ___gmpn_div_q($27, $67, $7, $dp_0, $10, $67);
    __label__ = 33;
    break;
   case 29:
    if ($59) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $83 = STACKTOP;
    STACKTOP += $58;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $87 = $83;
    __label__ = 32;
    break;
   case 31:
    var $85 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $58);
    var $87 = $85;
    __label__ = 32;
    break;
   case 32:
    var $87;
    ___gmpn_div_q($27, $29, $7, $dp_0, $10, $87);
    __label__ = 33;
    break;
   case 33:
    var $94 = $12 - ((HEAP32[$27 + ($11 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $98 = ($4 ^ $2 | 0) > -1 ? $94 : -$94 | 0;
    HEAP32[$quot + 4 >> 2] = $98;
    var $100 = HEAP32[$__tmp_marker >> 2];
    if (($100 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    ___gmp_tmp_reentrant_free($100);
    __label__ = 35;
    break;
   case 35:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_tdiv_q["X"] = 1;

function ___gmpz_tdiv_q_ui($quot, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 9;
    break;
   case 6:
    var $10 = ($5 | 0) > -1;
    var $12 = $10 ? $5 : -$5 | 0;
    if (($12 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $17 = ___gmpz_realloc($quot, $12);
    __label__ = 8;
    break;
   case 8:
    var $20 = HEAP32[$quot + 8 >> 2];
    var $22 = HEAP32[$dividend + 8 >> 2];
    var $23 = ___gmpn_divrem_1($20, 0, $22, $12, $divisor);
    var $29 = $12 - ((HEAP32[$20 + ($12 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $31 = $10 ? $29 : -$29 | 0;
    HEAP32[$quot + 4 >> 2] = $31;
    var $_0 = $23;
    __label__ = 9;
    break;
   case 9:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_tstbit($u, $bit_index) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$u + 8 >> 2];
    var $4 = HEAPU32[$u + 4 >> 2];
    var $7 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $8 = $bit_index >>> 5;
    var $9 = $2 + ($8 << 2) | 0;
    if ($8 >>> 0 < $7 >>> 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $_0 = $4 >>> 31;
    __label__ = 10;
    break;
   case 4:
    var $13 = HEAPU32[$9 >> 2];
    if (($4 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      var $limb_0 = $13;
      __label__ = 9;
      break;
    }
   case 5:
    var $16 = -$13 | 0;
    var $p_0 = $9;
    __label__ = 6;
    break;
   case 6:
    var $p_0;
    if (($p_0 | 0) == ($2 | 0)) {
      var $limb_0 = $16;
      __label__ = 9;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $20 = $p_0 - 4 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 0) {
      var $p_0 = $20;
      __label__ = 6;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $limb_0 = $13 ^ -1;
    __label__ = 9;
    break;
   case 9:
    var $limb_0;
    var $_0 = $limb_0 >>> (($bit_index & 31) >>> 0) & 1;
    __label__ = 10;
    break;
   case 10:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_tdiv_r_2exp($res, $in, $cnt) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $in + 4 | 0;
    var $2 = HEAP32[$1 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    var $6 = $cnt >>> 5;
    var $7 = $in + 8 | 0;
    var $8 = HEAP32[$7 >> 2];
    if (($5 | 0) > ($6 | 0)) {
      __label__ = 3;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 3:
    var $16 = HEAP32[$8 + ($6 << 2) >> 2] & (1 << ($cnt & 31)) - 1;
    if (($16 | 0) == 0) {
      var $res_size_0 = $6;
      __label__ = 7;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $19 = $6 + 1 | 0;
    if ((HEAP32[$res >> 2] | 0) < ($19 | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $24 = ___gmpz_realloc($res, $19);
    __label__ = 6;
    break;
   case 6:
    var $28 = HEAP32[$res + 8 >> 2] + ($6 << 2) | 0;
    HEAP32[$28 >> 2] = $16;
    var $res_size_1 = $19;
    var $limb_cnt_0 = $6;
    __label__ = 13;
    break;
   case 7:
    var $res_size_0;
    if (($res_size_0 | 0) > 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $31 = $res_size_0 - 1 | 0;
    if ((HEAP32[$8 + ($31 << 2) >> 2] | 0) == 0) {
      var $res_size_0 = $31;
      __label__ = 7;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    if ((HEAP32[$res >> 2] | 0) < ($res_size_0 | 0)) {
      __label__ = 10;
      break;
    } else {
      var $res_size_1 = $res_size_0;
      var $limb_cnt_0 = $res_size_0;
      __label__ = 13;
      break;
    }
   case 10:
    var $40 = ___gmpz_realloc($res, $res_size_0);
    var $res_size_1 = $res_size_0;
    var $limb_cnt_0 = $res_size_0;
    __label__ = 13;
    break;
   case 11:
    if ((HEAP32[$res >> 2] | 0) < ($5 | 0)) {
      __label__ = 12;
      break;
    } else {
      var $res_size_1 = $5;
      var $limb_cnt_0 = $5;
      __label__ = 13;
      break;
    }
   case 12:
    var $46 = ___gmpz_realloc($res, $5);
    var $res_size_1 = $5;
    var $limb_cnt_0 = $5;
    __label__ = 13;
    break;
   case 13:
    var $limb_cnt_0;
    var $res_size_1;
    if (($res | 0) == ($in | 0) | ($limb_cnt_0 | 0) == 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $51 = $limb_cnt_0 - 1 | 0;
    var $53 = HEAP32[$res + 8 >> 2];
    var $54 = HEAP32[$7 >> 2];
    var $55 = HEAP32[$54 >> 2];
    if (($51 | 0) == 0) {
      var $__x_1 = $55;
      var $__dst_1 = $53;
      __label__ = 17;
      break;
    } else {
      var $__x_0 = $55;
      var $_pn = $54;
      var $__dst_0 = $53;
      var $__n_0 = $51;
      __label__ = 15;
      break;
    }
   case 15:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $58 = HEAP32[$__src_0 >> 2];
    var $59 = $__n_0 - 1 | 0;
    if (($59 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $__x_0 = $58;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $59;
      __label__ = 15;
      break;
    }
   case 16:
    var $__x_1 = $58;
    var $__dst_1 = $53 + ($51 << 2) | 0;
    __label__ = 17;
    break;
   case 17:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 18;
    break;
   case 18:
    var $65 = (HEAP32[$1 >> 2] | 0) > -1 ? $res_size_1 : -$res_size_1 | 0;
    HEAP32[$res + 4 >> 2] = $65;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_tdiv_r_2exp["X"] = 1;

function ___gmpz_ui_pow_ui($r, $b, $e) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $1 = __stackBase__;
  HEAP32[$1 >> 2] = $b;
  var $3 = ($b | 0) != 0 & 1;
  ___gmpz_n_pow_ui($r, $1, $3, $e);
  STACKTOP = __stackBase__;
  return;
}

function ___gmpz_tdiv_qr($quot, $rem, $num, $den) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $1 = $num + 4 | 0;
    var $2 = HEAPU32[$1 >> 2];
    var $4 = HEAPU32[$den + 4 >> 2];
    var $5 = ($2 | 0) > -1;
    var $7 = $5 ? $2 : -$2 | 0;
    var $10 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $11 = $7 - $10 | 0;
    var $12 = $11 + 1 | 0;
    if (($10 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($10 | 0) > (HEAP32[$rem >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $20 = ___gmpz_realloc($rem, $10);
    __label__ = 6;
    break;
   case 6:
    if (($11 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 7:
    if (($num | 0) == ($rem | 0)) {
      __label__ = 14;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $27 = HEAP32[$num + 8 >> 2];
    var $29 = HEAP32[$rem + 8 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $32 = $7 - 1 | 0;
    var $33 = HEAP32[$27 >> 2];
    if (($32 | 0) == 0) {
      var $__x_1 = $33;
      var $__dst_1 = $29;
      __label__ = 12;
      break;
    } else {
      var $__x_0 = $33;
      var $_pn2 = $27;
      var $__dst_0 = $29;
      var $__n_0 = $32;
      __label__ = 10;
      break;
    }
   case 10:
    var $__n_0;
    var $__dst_0;
    var $_pn2;
    var $__x_0;
    var $__src_0 = $_pn2 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $36 = HEAP32[$__src_0 >> 2];
    var $37 = $__n_0 - 1 | 0;
    if (($37 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $36;
      var $_pn2 = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $37;
      __label__ = 10;
      break;
    }
   case 11:
    var $__x_1 = $36;
    var $__dst_1 = $29 + ($32 << 2) | 0;
    __label__ = 12;
    break;
   case 12:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    var $40 = HEAP32[$1 >> 2];
    HEAP32[$rem + 4 >> 2] = $40;
    __label__ = 14;
    break;
   case 14:
    HEAP32[$quot + 4 >> 2] = 0;
    __label__ = 42;
    break;
   case 15:
    if (($12 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 16;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 16:
    var $49 = ___gmpz_realloc($quot, $12);
    __label__ = 17;
    break;
   case 17:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $52 = HEAPU32[$quot + 8 >> 2];
    var $54 = HEAPU32[$rem + 8 >> 2];
    var $56 = HEAPU32[$num + 8 >> 2];
    var $58 = HEAPU32[$den + 8 >> 2];
    if (($58 | 0) == ($54 | 0) | ($58 | 0) == ($52 | 0)) {
      __label__ = 18;
      break;
    } else {
      var $dp_0 = $58;
      __label__ = 27;
      break;
    }
   case 18:
    var $62 = $10 << 2;
    if ($62 >>> 0 < 65536) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $65 = STACKTOP;
    STACKTOP += $62;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $69 = $65;
    __label__ = 21;
    break;
   case 20:
    var $67 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $62);
    var $69 = $67;
    __label__ = 21;
    break;
   case 21:
    var $69;
    var $70 = $69;
    if (($4 | 0) == 0) {
      var $dp_0 = $70;
      __label__ = 27;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $73 = $10 - 1 | 0;
    var $74 = HEAPU32[$58 >> 2];
    if (($73 | 0) == 0) {
      var $__x6_1 = $74;
      var $__dst4_1 = $70;
      __label__ = 26;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $scevgep = $69 + ($62 - 4) | 0;
    var $__x6_0 = $74;
    var $_pn1 = $58;
    var $__dst4_0 = $70;
    var $__n3_0 = $73;
    __label__ = 24;
    break;
   case 24:
    var $__n3_0;
    var $__dst4_0;
    var $_pn1;
    var $__x6_0;
    var $__src5_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    var $79 = HEAP32[$__src5_0 >> 2];
    var $80 = $__n3_0 - 1 | 0;
    if (($80 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      var $__x6_0 = $79;
      var $_pn1 = $__src5_0;
      var $__dst4_0 = $__dst4_0 + 4 | 0;
      var $__n3_0 = $80;
      __label__ = 24;
      break;
    }
   case 25:
    var $__x6_1 = $79;
    var $__dst4_1 = $scevgep;
    __label__ = 26;
    break;
   case 26:
    var $__dst4_1;
    var $__x6_1;
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    var $dp_0 = $70;
    __label__ = 27;
    break;
   case 27:
    var $dp_0;
    if (($56 | 0) == ($54 | 0) | ($56 | 0) == ($52 | 0)) {
      __label__ = 28;
      break;
    } else {
      var $np_0 = $56;
      __label__ = 37;
      break;
    }
   case 28:
    var $87 = $7 << 2;
    if ($87 >>> 0 < 65536) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $90 = STACKTOP;
    STACKTOP += $87;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $94 = $90;
    __label__ = 31;
    break;
   case 30:
    var $92 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $87);
    var $94 = $92;
    __label__ = 31;
    break;
   case 31:
    var $94;
    var $95 = $94;
    if (($2 | 0) == 0) {
      var $np_0 = $95;
      __label__ = 37;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $98 = $7 - 1 | 0;
    var $99 = HEAPU32[$56 >> 2];
    if (($98 | 0) == 0) {
      var $__x11_1 = $99;
      var $__dst9_1 = $95;
      __label__ = 36;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $scevgep16 = $94 + ($87 - 4) | 0;
    var $__x11_0 = $99;
    var $_pn = $56;
    var $__dst9_0 = $95;
    var $__n8_0 = $98;
    __label__ = 34;
    break;
   case 34:
    var $__n8_0;
    var $__dst9_0;
    var $_pn;
    var $__x11_0;
    var $__src10_0 = $_pn + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    var $104 = HEAP32[$__src10_0 >> 2];
    var $105 = $__n8_0 - 1 | 0;
    if (($105 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $__x11_0 = $104;
      var $_pn = $__src10_0;
      var $__dst9_0 = $__dst9_0 + 4 | 0;
      var $__n8_0 = $105;
      __label__ = 34;
      break;
    }
   case 35:
    var $__x11_1 = $104;
    var $__dst9_1 = $scevgep16;
    __label__ = 36;
    break;
   case 36:
    var $__dst9_1;
    var $__x11_1;
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    var $np_0 = $95;
    __label__ = 37;
    break;
   case 37:
    var $np_0;
    ___gmpn_tdiv_qr($52, $54, 0, $np_0, $7, $dp_0, $10);
    var $113 = $12 - ((HEAP32[$52 + ($11 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $dl_0 = $10;
    __label__ = 38;
    break;
   case 38:
    var $dl_0;
    if (($dl_0 | 0) > 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    var $117 = $dl_0 - 1 | 0;
    if ((HEAP32[$54 + ($117 << 2) >> 2] | 0) == 0) {
      var $dl_0 = $117;
      __label__ = 38;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $124 = ($4 ^ $2 | 0) > -1 ? $113 : -$113 | 0;
    HEAP32[$quot + 4 >> 2] = $124;
    var $127 = $5 ? $dl_0 : -$dl_0 | 0;
    HEAP32[$rem + 4 >> 2] = $127;
    var $129 = HEAP32[$__tmp_marker >> 2];
    if (($129 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    ___gmp_tmp_reentrant_free($129);
    __label__ = 42;
    break;
   case 42:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_tdiv_qr["X"] = 1;

function ___gmpz_tdiv_qr_ui($quot, $rem, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$quot + 4 >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 12;
    break;
   case 6:
    var $11 = ($5 | 0) > -1;
    var $13 = $11 ? $5 : -$5 | 0;
    if (($13 | 0) > (HEAP32[$quot >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $18 = ___gmpz_realloc($quot, $13);
    __label__ = 8;
    break;
   case 8:
    var $21 = HEAP32[$quot + 8 >> 2];
    var $23 = HEAP32[$dividend + 8 >> 2];
    var $24 = ___gmpn_divrem_1($21, 0, $23, $13, $divisor);
    if (($24 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    HEAP32[$rem + 4 >> 2] = 0;
    __label__ = 11;
    break;
   case 10:
    var $30 = $5 >> 31 | 1;
    HEAP32[$rem + 4 >> 2] = $30;
    var $33 = HEAP32[$rem + 8 >> 2];
    HEAP32[$33 >> 2] = $24;
    __label__ = 11;
    break;
   case 11:
    var $40 = $13 - ((HEAP32[$21 + ($13 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
    var $42 = $11 ? $40 : -$40 | 0;
    HEAP32[$quot + 4 >> 2] = $42;
    var $_0 = $24;
    __label__ = 12;
    break;
   case 12:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_tdiv_qr_ui["X"] = 1;

function ___gmpz_tdiv_r($rem, $num, $den) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $1 = $num + 4 | 0;
    var $2 = HEAPU32[$1 >> 2];
    var $4 = HEAPU32[$den + 4 >> 2];
    var $5 = ($2 | 0) > -1;
    var $7 = $5 ? $2 : -$2 | 0;
    var $10 = ($4 | 0) > -1 ? $4 : -$4 | 0;
    var $11 = $7 - $10 | 0;
    if (($10 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    if (($10 | 0) > (HEAP32[$rem >> 2] | 0)) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $19 = ___gmpz_realloc($rem, $10);
    __label__ = 6;
    break;
   case 6:
    if (($11 | 0) < 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 7:
    if (($num | 0) == ($rem | 0)) {
      __label__ = 42;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $26 = HEAP32[$num + 8 >> 2];
    var $28 = HEAP32[$rem + 8 >> 2];
    if (($2 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $31 = $7 - 1 | 0;
    var $32 = HEAP32[$26 >> 2];
    if (($31 | 0) == 0) {
      var $__x_1 = $32;
      var $__dst_1 = $28;
      __label__ = 12;
      break;
    } else {
      var $__x_0 = $32;
      var $_pn2 = $26;
      var $__dst_0 = $28;
      var $__n_0 = $31;
      __label__ = 10;
      break;
    }
   case 10:
    var $__n_0;
    var $__dst_0;
    var $_pn2;
    var $__x_0;
    var $__src_0 = $_pn2 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $35 = HEAP32[$__src_0 >> 2];
    var $36 = $__n_0 - 1 | 0;
    if (($36 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__x_0 = $35;
      var $_pn2 = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $36;
      __label__ = 10;
      break;
    }
   case 11:
    var $__x_1 = $35;
    var $__dst_1 = $28 + ($31 << 2) | 0;
    __label__ = 12;
    break;
   case 12:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    var $39 = HEAP32[$1 >> 2];
    HEAP32[$rem + 4 >> 2] = $39;
    __label__ = 42;
    break;
   case 14:
    HEAP32[$__tmp_marker >> 2] = 0;
    var $43 = ($11 << 2) + 4 | 0;
    if ($43 >>> 0 < 65536) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $46 = STACKTOP;
    STACKTOP += $43;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $50 = $46;
    __label__ = 17;
    break;
   case 16:
    var $48 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $43);
    var $50 = $48;
    __label__ = 17;
    break;
   case 17:
    var $50;
    var $51 = $50;
    var $53 = HEAPU32[$rem + 8 >> 2];
    var $55 = HEAPU32[$num + 8 >> 2];
    var $57 = HEAPU32[$den + 8 >> 2];
    if (($57 | 0) == ($53 | 0)) {
      __label__ = 18;
      break;
    } else {
      var $dp_0 = $57;
      __label__ = 27;
      break;
    }
   case 18:
    var $60 = $10 << 2;
    if ($60 >>> 0 < 65536) {
      __label__ = 19;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 19:
    var $63 = STACKTOP;
    STACKTOP += $60;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $67 = $63;
    __label__ = 21;
    break;
   case 20:
    var $65 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $60);
    var $67 = $65;
    __label__ = 21;
    break;
   case 21:
    var $67;
    var $68 = $67;
    if (($4 | 0) == 0) {
      var $dp_0 = $68;
      __label__ = 27;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $71 = $10 - 1 | 0;
    var $72 = HEAPU32[$53 >> 2];
    if (($71 | 0) == 0) {
      var $__x6_1 = $72;
      var $__dst4_1 = $68;
      __label__ = 26;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $scevgep = $67 + ($60 - 4) | 0;
    var $__x6_0 = $72;
    var $_pn1 = $53;
    var $__dst4_0 = $68;
    var $__n3_0 = $71;
    __label__ = 24;
    break;
   case 24:
    var $__n3_0;
    var $__dst4_0;
    var $_pn1;
    var $__x6_0;
    var $__src5_0 = $_pn1 + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    var $77 = HEAP32[$__src5_0 >> 2];
    var $78 = $__n3_0 - 1 | 0;
    if (($78 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      var $__x6_0 = $77;
      var $_pn1 = $__src5_0;
      var $__dst4_0 = $__dst4_0 + 4 | 0;
      var $__n3_0 = $78;
      __label__ = 24;
      break;
    }
   case 25:
    var $__x6_1 = $77;
    var $__dst4_1 = $scevgep;
    __label__ = 26;
    break;
   case 26:
    var $__dst4_1;
    var $__x6_1;
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    var $dp_0 = $68;
    __label__ = 27;
    break;
   case 27:
    var $dp_0;
    if (($55 | 0) == ($53 | 0)) {
      __label__ = 28;
      break;
    } else {
      var $np_0 = $55;
      __label__ = 37;
      break;
    }
   case 28:
    var $84 = $7 << 2;
    if ($84 >>> 0 < 65536) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $87 = STACKTOP;
    STACKTOP += $84;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $91 = $87;
    __label__ = 31;
    break;
   case 30:
    var $89 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $84);
    var $91 = $89;
    __label__ = 31;
    break;
   case 31:
    var $91;
    var $92 = $91;
    if (($2 | 0) == 0) {
      var $np_0 = $92;
      __label__ = 37;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $95 = $7 - 1 | 0;
    var $96 = HEAPU32[$53 >> 2];
    if (($95 | 0) == 0) {
      var $__x11_1 = $96;
      var $__dst9_1 = $92;
      __label__ = 36;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    var $scevgep15 = $91 + ($84 - 4) | 0;
    var $__x11_0 = $96;
    var $_pn = $53;
    var $__dst9_0 = $92;
    var $__n8_0 = $95;
    __label__ = 34;
    break;
   case 34:
    var $__n8_0;
    var $__dst9_0;
    var $_pn;
    var $__x11_0;
    var $__src10_0 = $_pn + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    var $101 = HEAP32[$__src10_0 >> 2];
    var $102 = $__n8_0 - 1 | 0;
    if (($102 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $__x11_0 = $101;
      var $_pn = $__src10_0;
      var $__dst9_0 = $__dst9_0 + 4 | 0;
      var $__n8_0 = $102;
      __label__ = 34;
      break;
    }
   case 35:
    var $__x11_1 = $101;
    var $__dst9_1 = $scevgep15;
    __label__ = 36;
    break;
   case 36:
    var $__dst9_1;
    var $__x11_1;
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    var $np_0 = $92;
    __label__ = 37;
    break;
   case 37:
    var $np_0;
    ___gmpn_tdiv_qr($51, $53, 0, $np_0, $7, $dp_0, $10);
    var $dl_0 = $10;
    __label__ = 38;
    break;
   case 38:
    var $dl_0;
    if (($dl_0 | 0) > 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    var $109 = $dl_0 - 1 | 0;
    if ((HEAP32[$53 + ($109 << 2) >> 2] | 0) == 0) {
      var $dl_0 = $109;
      __label__ = 38;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $114 = $5 ? $dl_0 : -$dl_0 | 0;
    HEAP32[$rem + 4 >> 2] = $114;
    var $116 = HEAP32[$__tmp_marker >> 2];
    if (($116 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    ___gmp_tmp_reentrant_free($116);
    __label__ = 42;
    break;
   case 42:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_tdiv_r["X"] = 1;

function ___gmpz_tdiv_r_ui($rem, $dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 9;
    break;
   case 6:
    var $12 = ($5 | 0) > -1 ? $5 : -$5 | 0;
    var $14 = HEAP32[$dividend + 8 >> 2];
    var $15 = ___gmpn_mod_1($14, $12, $divisor);
    if (($15 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    HEAP32[$rem + 4 >> 2] = 0;
    var $_0 = 0;
    __label__ = 9;
    break;
   case 8:
    var $21 = $5 >> 31 | 1;
    HEAP32[$rem + 4 >> 2] = $21;
    var $24 = HEAP32[$rem + 8 >> 2];
    HEAP32[$24 >> 2] = $15;
    var $_0 = $15;
    __label__ = 9;
    break;
   case 9:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_tdiv_ui($dividend, $divisor) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($divisor | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $5 = HEAP32[$dividend + 4 >> 2];
    if (($5 | 0) == 0) {
      var $_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $10 = ($5 | 0) > -1 ? $5 : -$5 | 0;
    var $12 = HEAP32[$dividend + 8 >> 2];
    var $13 = ___gmpn_mod_1($12, $10, $divisor);
    var $_0 = $13;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmpz_xor($res, $op1, $op2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    HEAP32[$__tmp_marker >> 2] = 0;
    var $2 = HEAPU32[$op1 + 4 >> 2];
    var $4 = HEAPU32[$op2 + 4 >> 2];
    var $5 = $op1 + 8 | 0;
    var $6 = HEAPU32[$5 >> 2];
    var $7 = $op2 + 8 | 0;
    var $8 = HEAPU32[$7 >> 2];
    var $9 = $res + 8 | 0;
    var $10 = HEAPU32[$9 >> 2];
    if (($2 | 0) > -1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 3:
    if (($4 | 0) > -1) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $op1;
      var $op1_ptr_1 = $6;
      var $op2_ptr_1 = $8;
      var $op1_size_0 = $2;
      var $op2_size_0 = $4;
      __label__ = 60;
      break;
    }
   case 4:
    var $17 = HEAP32[$res >> 2];
    if (($2 | 0) < ($4 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if (($17 | 0) < ($2 | 0)) {
      __label__ = 6;
      break;
    } else {
      var $op2_ptr_0 = $8;
      var $res_ptr_0 = $10;
      __label__ = 7;
      break;
    }
   case 6:
    var $21 = ___gmpz_realloc($res, $2);
    var $op2_ptr_0 = HEAP32[$7 >> 2];
    var $res_ptr_0 = HEAP32[$9 >> 2];
    __label__ = 7;
    break;
   case 7:
    var $res_ptr_0;
    var $op2_ptr_0;
    if (($res_ptr_0 | 0) == ($6 | 0) | ($2 | 0) == ($4 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $29 = $2 - $4 - 1 | 0;
    var $30 = $res_ptr_0 + ($4 << 2) | 0;
    var $32 = HEAP32[$6 + ($4 << 2) >> 2];
    if (($29 | 0) == 0) {
      var $__dst_1 = $30;
      var $__x_1 = $32;
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $35 = $2 - 1 | 0;
    var $__n_0 = $29;
    var $__dst_0 = $30;
    var $__src_0 = $6 + ($4 + 1 << 2) | 0;
    var $__x_0 = $32;
    __label__ = 10;
    break;
   case 10:
    var $__x_0;
    var $__src_0;
    var $__dst_0;
    var $__n_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $39 = HEAP32[$__src_0 >> 2];
    var $40 = $__n_0 - 1 | 0;
    if (($40 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $__n_0 = $40;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__x_0 = $39;
      __label__ = 10;
      break;
    }
   case 11:
    var $__dst_1 = $res_ptr_0 + ($35 << 2) | 0;
    var $__x_1 = $39;
    __label__ = 12;
    break;
   case 12:
    var $__x_1;
    var $__dst_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 13;
    break;
   case 13:
    if (($4 | 0) > 0) {
      var $i_041_in = $4;
      __label__ = 14;
      break;
    } else {
      var $res_ptr_2_ph = $res_ptr_0;
      var $res_size_0_ph = $2;
      __label__ = 25;
      break;
    }
   case 14:
    var $i_041_in;
    var $i_041 = $i_041_in - 1 | 0;
    var $48 = HEAP32[$op2_ptr_0 + ($i_041 << 2) >> 2] ^ HEAP32[$6 + ($i_041 << 2) >> 2];
    HEAP32[$res_ptr_0 + ($i_041 << 2) >> 2] = $48;
    if (($i_041 | 0) > 0) {
      var $i_041_in = $i_041;
      __label__ = 14;
      break;
    } else {
      var $res_ptr_2_ph = $res_ptr_0;
      var $res_size_0_ph = $2;
      __label__ = 25;
      break;
    }
   case 15:
    if (($17 | 0) < ($4 | 0)) {
      __label__ = 16;
      break;
    } else {
      var $op1_ptr_0 = $6;
      var $res_ptr_1 = $10;
      __label__ = 17;
      break;
    }
   case 16:
    var $54 = ___gmpz_realloc($res, $4);
    var $op1_ptr_0 = HEAP32[$5 >> 2];
    var $res_ptr_1 = HEAP32[$9 >> 2];
    __label__ = 17;
    break;
   case 17:
    var $res_ptr_1;
    var $op1_ptr_0;
    if (($res_ptr_1 | 0) == ($8 | 0) | ($4 | 0) == ($2 | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $62 = $4 - $2 - 1 | 0;
    var $63 = $res_ptr_1 + ($2 << 2) | 0;
    var $65 = HEAP32[$8 + ($2 << 2) >> 2];
    if (($62 | 0) == 0) {
      var $__dst2_1 = $63;
      var $__x4_1 = $65;
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $68 = $4 - 1 | 0;
    var $__n1_0 = $62;
    var $__dst2_0 = $63;
    var $__src3_0 = $8 + ($2 + 1 << 2) | 0;
    var $__x4_0 = $65;
    __label__ = 20;
    break;
   case 20:
    var $__x4_0;
    var $__src3_0;
    var $__dst2_0;
    var $__n1_0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    var $72 = HEAP32[$__src3_0 >> 2];
    var $73 = $__n1_0 - 1 | 0;
    if (($73 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $__n1_0 = $73;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__src3_0 = $__src3_0 + 4 | 0;
      var $__x4_0 = $72;
      __label__ = 20;
      break;
    }
   case 21:
    var $__dst2_1 = $res_ptr_1 + ($68 << 2) | 0;
    var $__x4_1 = $72;
    __label__ = 22;
    break;
   case 22:
    var $__x4_1;
    var $__dst2_1;
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    __label__ = 23;
    break;
   case 23:
    if (($2 | 0) > 0) {
      var $i_150_in = $2;
      __label__ = 24;
      break;
    } else {
      var $res_ptr_2_ph = $res_ptr_1;
      var $res_size_0_ph = $4;
      __label__ = 25;
      break;
    }
   case 24:
    var $i_150_in;
    var $i_150 = $i_150_in - 1 | 0;
    var $81 = HEAP32[$8 + ($i_150 << 2) >> 2] ^ HEAP32[$op1_ptr_0 + ($i_150 << 2) >> 2];
    HEAP32[$res_ptr_1 + ($i_150 << 2) >> 2] = $81;
    if (($i_150 | 0) > 0) {
      var $i_150_in = $i_150;
      __label__ = 24;
      break;
    } else {
      var $res_ptr_2_ph = $res_ptr_1;
      var $res_size_0_ph = $4;
      __label__ = 25;
      break;
    }
   case 25:
    var $res_size_0_ph;
    var $res_ptr_2_ph;
    var $res_size_0 = $res_size_0_ph;
    __label__ = 26;
    break;
   case 26:
    var $res_size_0;
    if (($res_size_0 | 0) > 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    var $87 = $res_size_0 - 1 | 0;
    if ((HEAP32[$res_ptr_2_ph + ($87 << 2) >> 2] | 0) == 0) {
      var $res_size_0 = $87;
      __label__ = 26;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    HEAP32[$res + 4 >> 2] = $res_size_0;
    __label__ = 89;
    break;
   case 29:
    if (($4 | 0) < 0) {
      __label__ = 30;
      break;
    } else {
      var $_0 = $op2;
      var $op1_ptr_1 = $8;
      var $op2_ptr_1 = $6;
      var $op1_size_0 = $4;
      var $op2_size_0 = $2;
      __label__ = 60;
      break;
    }
   case 30:
    var $96 = -$2 | 0;
    var $97 = -$4 | 0;
    var $98 = $96 << 2;
    if ($98 >>> 0 < 65536) {
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 31:
    var $101 = STACKTOP;
    STACKTOP += $98;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $105 = $101;
    __label__ = 33;
    break;
   case 32:
    var $103 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $98);
    var $105 = $103;
    __label__ = 33;
    break;
   case 33:
    var $105;
    var $106 = $105;
    var $107 = ___gmpn_sub_1($106, $6, $96, 1);
    var $108 = $97 << 2;
    if ($108 >>> 0 < 65536) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $111 = STACKTOP;
    STACKTOP += $108;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $115 = $111;
    __label__ = 36;
    break;
   case 35:
    var $113 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $108);
    var $115 = $113;
    __label__ = 36;
    break;
   case 36:
    var $115;
    var $116 = $115;
    var $117 = ___gmpn_sub_1($116, $8, $97, 1);
    var $118 = ($96 | 0) > ($97 | 0);
    var $119 = $118 ? $96 : $97;
    if ((HEAP32[$res >> 2] | 0) < ($119 | 0)) {
      __label__ = 37;
      break;
    } else {
      var $res_ptr_3 = $10;
      __label__ = 38;
      break;
    }
   case 37:
    var $124 = ___gmpz_realloc($res, $119);
    var $res_ptr_3 = HEAP32[$9 >> 2];
    __label__ = 38;
    break;
   case 38:
    var $res_ptr_3;
    if ($118) {
      __label__ = 39;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 39:
    if (($4 | 0) == ($2 | 0)) {
      __label__ = 45;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    var $131 = $4 - $2 - 1 | 0;
    var $132 = $res_ptr_3 + ($97 << 2) | 0;
    var $134 = HEAP32[$106 + ($97 << 2) >> 2];
    if (($131 | 0) == 0) {
      var $__dst6_1 = $132;
      var $__x8_1 = $134;
      __label__ = 44;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $137 = $2 ^ -1;
    var $__n5_0 = $131;
    var $__dst6_0 = $132;
    var $__src7_0 = $106 + (1 - $4 << 2) | 0;
    var $__x8_0 = $134;
    __label__ = 42;
    break;
   case 42:
    var $__x8_0;
    var $__src7_0;
    var $__dst6_0;
    var $__n5_0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    var $141 = HEAP32[$__src7_0 >> 2];
    var $142 = $__n5_0 - 1 | 0;
    if (($142 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      var $__n5_0 = $142;
      var $__dst6_0 = $__dst6_0 + 4 | 0;
      var $__src7_0 = $__src7_0 + 4 | 0;
      var $__x8_0 = $141;
      __label__ = 42;
      break;
    }
   case 43:
    var $__dst6_1 = $res_ptr_3 + ($137 << 2) | 0;
    var $__x8_1 = $141;
    __label__ = 44;
    break;
   case 44:
    var $__x8_1;
    var $__dst6_1;
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    __label__ = 45;
    break;
   case 45:
    var $i_215 = $4 ^ -1;
    __label__ = 46;
    break;
   case 46:
    var $i_215;
    var $151 = HEAP32[$116 + ($i_215 << 2) >> 2] ^ HEAP32[$106 + ($i_215 << 2) >> 2];
    HEAP32[$res_ptr_3 + ($i_215 << 2) >> 2] = $151;
    if (($i_215 | 0) > 0) {
      var $i_215 = $i_215 - 1 | 0;
      __label__ = 46;
      break;
    } else {
      var $res_size_1 = $96;
      __label__ = 56;
      break;
    }
   case 47:
    if (($2 | 0) == ($4 | 0)) {
      __label__ = 53;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    var $159 = $2 - $4 - 1 | 0;
    var $160 = $res_ptr_3 + ($96 << 2) | 0;
    var $162 = HEAP32[$116 + ($96 << 2) >> 2];
    if (($159 | 0) == 0) {
      var $__dst10_1 = $160;
      var $__x12_1 = $162;
      __label__ = 52;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    var $165 = $4 ^ -1;
    var $__n9_0 = $159;
    var $__dst10_0 = $160;
    var $__src11_0 = $116 + (1 - $2 << 2) | 0;
    var $__x12_0 = $162;
    __label__ = 50;
    break;
   case 50:
    var $__x12_0;
    var $__src11_0;
    var $__dst10_0;
    var $__n9_0;
    HEAP32[$__dst10_0 >> 2] = $__x12_0;
    var $169 = HEAP32[$__src11_0 >> 2];
    var $170 = $__n9_0 - 1 | 0;
    if (($170 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      var $__n9_0 = $170;
      var $__dst10_0 = $__dst10_0 + 4 | 0;
      var $__src11_0 = $__src11_0 + 4 | 0;
      var $__x12_0 = $169;
      __label__ = 50;
      break;
    }
   case 51:
    var $__dst10_1 = $res_ptr_3 + ($165 << 2) | 0;
    var $__x12_1 = $169;
    __label__ = 52;
    break;
   case 52:
    var $__x12_1;
    var $__dst10_1;
    HEAP32[$__dst10_1 >> 2] = $__x12_1;
    __label__ = 53;
    break;
   case 53:
    if (($2 | 0) < 0) {
      __label__ = 54;
      break;
    } else {
      var $res_size_1 = $97;
      __label__ = 56;
      break;
    }
   case 54:
    var $i_39 = $2 ^ -1;
    __label__ = 55;
    break;
   case 55:
    var $i_39;
    var $181 = HEAP32[$116 + ($i_39 << 2) >> 2] ^ HEAP32[$106 + ($i_39 << 2) >> 2];
    HEAP32[$res_ptr_3 + ($i_39 << 2) >> 2] = $181;
    if (($i_39 | 0) > 0) {
      var $i_39 = $i_39 - 1 | 0;
      __label__ = 55;
      break;
    } else {
      var $res_size_1 = $97;
      __label__ = 56;
      break;
    }
   case 56:
    var $res_size_1;
    if (($res_size_1 | 0) > 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 57:
    var $187 = $res_size_1 - 1 | 0;
    if ((HEAP32[$res_ptr_3 + ($187 << 2) >> 2] | 0) == 0) {
      var $res_size_1 = $187;
      __label__ = 56;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    HEAP32[$res + 4 >> 2] = $res_size_1;
    var $192 = HEAP32[$__tmp_marker >> 2];
    if (($192 | 0) == 0) {
      __label__ = 89;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    ___gmp_tmp_reentrant_free($192);
    __label__ = 89;
    break;
   case 60:
    var $op2_size_0;
    var $op1_size_0;
    var $op2_ptr_1;
    var $op1_ptr_1;
    var $_0;
    var $196 = -$op2_size_0 | 0;
    var $197 = $196 << 2;
    if ($197 >>> 0 < 65536) {
      __label__ = 61;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 61:
    var $200 = STACKTOP;
    STACKTOP += $197;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $204 = $200;
    __label__ = 63;
    break;
   case 62:
    var $202 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $197);
    var $204 = $202;
    __label__ = 63;
    break;
   case 63:
    var $204;
    var $205 = $204;
    var $206 = ___gmpn_sub_1($205, $op2_ptr_1, $196, 1);
    var $207 = ($op1_size_0 | 0) > ($196 | 0);
    var $208 = $207 ? $op1_size_0 : $196;
    var $209 = $208 + 1 | 0;
    if ((HEAP32[$res >> 2] | 0) < ($209 | 0)) {
      __label__ = 64;
      break;
    } else {
      var $op1_ptr_2 = $op1_ptr_1;
      var $res_ptr_4 = $10;
      __label__ = 65;
      break;
    }
   case 64:
    var $214 = ___gmpz_realloc($res, $209);
    var $op1_ptr_2 = HEAP32[$_0 + 8 >> 2];
    var $res_ptr_4 = HEAP32[$9 >> 2];
    __label__ = 65;
    break;
   case 65:
    var $res_ptr_4;
    var $op1_ptr_2;
    if ($207) {
      __label__ = 66;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 66:
    var $220 = $op1_size_0 + $op2_size_0 | 0;
    if (($220 | 0) == 0) {
      __label__ = 72;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $223 = $220 - 1 | 0;
    var $224 = $res_ptr_4 + ($196 << 2) | 0;
    var $226 = HEAP32[$op1_ptr_2 + ($196 << 2) >> 2];
    if (($223 | 0) == 0) {
      var $__x17_1 = $226;
      var $__dst15_1 = $224;
      __label__ = 71;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    var $229 = $op1_size_0 - 1 | 0;
    var $__x17_0 = $226;
    var $__src16_0 = $op1_ptr_2 + (1 - $op2_size_0 << 2) | 0;
    var $__n14_0 = $223;
    var $__dst15_0 = $224;
    __label__ = 69;
    break;
   case 69:
    var $__dst15_0;
    var $__n14_0;
    var $__src16_0;
    var $__x17_0;
    HEAP32[$__dst15_0 >> 2] = $__x17_0;
    var $233 = HEAP32[$__src16_0 >> 2];
    var $234 = $__n14_0 - 1 | 0;
    if (($234 | 0) == 0) {
      __label__ = 70;
      break;
    } else {
      var $__x17_0 = $233;
      var $__src16_0 = $__src16_0 + 4 | 0;
      var $__n14_0 = $234;
      var $__dst15_0 = $__dst15_0 + 4 | 0;
      __label__ = 69;
      break;
    }
   case 70:
    var $__x17_1 = $233;
    var $__dst15_1 = $res_ptr_4 + ($229 << 2) | 0;
    __label__ = 71;
    break;
   case 71:
    var $__dst15_1;
    var $__x17_1;
    HEAP32[$__dst15_1 >> 2] = $__x17_1;
    __label__ = 72;
    break;
   case 72:
    if (($op2_size_0 | 0) < 0) {
      __label__ = 73;
      break;
    } else {
      var $res_size_2 = $op1_size_0;
      __label__ = 83;
      break;
    }
   case 73:
    var $i_432 = $op2_size_0 ^ -1;
    __label__ = 74;
    break;
   case 74:
    var $i_432;
    var $245 = HEAP32[$205 + ($i_432 << 2) >> 2] ^ HEAP32[$op1_ptr_2 + ($i_432 << 2) >> 2];
    HEAP32[$res_ptr_4 + ($i_432 << 2) >> 2] = $245;
    if (($i_432 | 0) > 0) {
      var $i_432 = $i_432 - 1 | 0;
      __label__ = 74;
      break;
    } else {
      var $res_size_2 = $op1_size_0;
      __label__ = 83;
      break;
    }
   case 75:
    if (($op1_size_0 | 0) == ($196 | 0)) {
      __label__ = 81;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    var $253 = $196 - $op1_size_0 - 1 | 0;
    var $254 = $res_ptr_4 + ($op1_size_0 << 2) | 0;
    var $256 = HEAP32[$205 + ($op1_size_0 << 2) >> 2];
    if (($253 | 0) == 0) {
      var $__x21_1 = $256;
      var $__dst19_1 = $254;
      __label__ = 80;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    var $259 = $op2_size_0 ^ -1;
    var $__x21_0 = $256;
    var $__src20_0 = $205 + ($op1_size_0 + 1 << 2) | 0;
    var $__dst19_0 = $254;
    var $__n18_0 = $253;
    __label__ = 78;
    break;
   case 78:
    var $__n18_0;
    var $__dst19_0;
    var $__src20_0;
    var $__x21_0;
    HEAP32[$__dst19_0 >> 2] = $__x21_0;
    var $263 = HEAP32[$__src20_0 >> 2];
    var $264 = $__n18_0 - 1 | 0;
    if (($264 | 0) == 0) {
      __label__ = 79;
      break;
    } else {
      var $__x21_0 = $263;
      var $__src20_0 = $__src20_0 + 4 | 0;
      var $__dst19_0 = $__dst19_0 + 4 | 0;
      var $__n18_0 = $264;
      __label__ = 78;
      break;
    }
   case 79:
    var $__x21_1 = $263;
    var $__dst19_1 = $res_ptr_4 + ($259 << 2) | 0;
    __label__ = 80;
    break;
   case 80:
    var $__dst19_1;
    var $__x21_1;
    HEAP32[$__dst19_1 >> 2] = $__x21_1;
    __label__ = 81;
    break;
   case 81:
    if (($op1_size_0 | 0) > 0) {
      var $i_524_in = $op1_size_0;
      __label__ = 82;
      break;
    } else {
      var $res_size_2 = $196;
      __label__ = 83;
      break;
    }
   case 82:
    var $i_524_in;
    var $i_524 = $i_524_in - 1 | 0;
    var $272 = HEAP32[$205 + ($i_524 << 2) >> 2] ^ HEAP32[$op1_ptr_2 + ($i_524 << 2) >> 2];
    HEAP32[$res_ptr_4 + ($i_524 << 2) >> 2] = $272;
    if (($i_524 | 0) > 0) {
      var $i_524_in = $i_524;
      __label__ = 82;
      break;
    } else {
      var $res_size_2 = $196;
      __label__ = 83;
      break;
    }
   case 83:
    var $res_size_2;
    var $275 = ___gmpn_add_1($res_ptr_4, $res_ptr_4, $res_size_2, 1);
    if (($275 | 0) == 0) {
      var $res_size_3 = $res_size_2;
      __label__ = 85;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 84:
    HEAP32[$res_ptr_4 + ($res_size_2 << 2) >> 2] = $275;
    var $res_size_3 = $res_size_2 + 1 | 0;
    __label__ = 85;
    break;
   case 85:
    var $res_size_3;
    if (($res_size_3 | 0) > 0) {
      __label__ = 86;
      break;
    } else {
      __label__ = 87;
      break;
    }
   case 86:
    var $282 = $res_size_3 - 1 | 0;
    if ((HEAP32[$res_ptr_4 + ($282 << 2) >> 2] | 0) == 0) {
      var $res_size_3 = $282;
      __label__ = 85;
      break;
    } else {
      __label__ = 87;
      break;
    }
   case 87:
    HEAP32[$res + 4 >> 2] = -$res_size_3 | 0;
    var $288 = HEAP32[$__tmp_marker >> 2];
    if (($288 | 0) == 0) {
      __label__ = 89;
      break;
    } else {
      __label__ = 88;
      break;
    }
   case 88:
    ___gmp_tmp_reentrant_free($288);
    __label__ = 89;
    break;
   case 89:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_xor["X"] = 1;

function ___gmpz_urandomm($rop, $rstate, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$n + 4 >> 2];
    var $5 = ($2 | 0) > -1 ? $2 : -$2 | 0;
    if (($5 | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $9 = $5 - 1 | 0;
    var $11 = HEAPU32[$n + 8 >> 2];
    var $12 = $11 + ($9 << 2) | 0;
    var $13 = HEAPU32[$12 >> 2];
    var $16 = ($13 - 1 & $13 | 0) == 0;
    var $17 = $16 & 1;
    if ($16) {
      var $np_0 = $11;
      __label__ = 5;
      break;
    } else {
      var $pow2_0 = $17;
      __label__ = 7;
      break;
    }
   case 5:
    var $np_0;
    if ($np_0 >>> 0 < $12 >>> 0) {
      __label__ = 6;
      break;
    } else {
      var $pow2_0 = $17;
      __label__ = 7;
      break;
    }
   case 6:
    if ((HEAP32[$np_0 >> 2] | 0) == 0) {
      var $np_0 = $np_0 + 4 | 0;
      __label__ = 5;
      break;
    } else {
      var $pow2_0 = 0;
      __label__ = 7;
      break;
    }
   case 7:
    var $pow2_0;
    if ($13 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $26 = $13 >>> 0 < 256 ? 1 : 9;
    var $31 = $26;
    __label__ = 10;
    break;
   case 9:
    var $29 = $13 >>> 0 < 16777216 ? 17 : 25;
    var $31 = $29;
    __label__ = 10;
    break;
   case 10:
    var $31;
    var $33 = STRING_TABLE.___gmpn_clz_tab + ($13 >>> ($31 >>> 0)) | 0;
    var $39 = ($5 << 5) - 33 + $31 + (HEAPU8[$33] & 255) | 0;
    var $40 = $39 - $pow2_0 | 0;
    if (($39 | 0) == ($pow2_0 | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    HEAP32[$rop + 4 >> 2] = 0;
    __label__ = 37;
    break;
   case 12:
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($rop | 0) == ($n | 0)) {
      __label__ = 13;
      break;
    } else {
      var $np_1 = $11;
      __label__ = 22;
      break;
    }
   case 13:
    var $47 = $5 << 2;
    if ($47 >>> 0 < 65536) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    var $50 = STACKTOP;
    STACKTOP += $47;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $54 = $50;
    __label__ = 16;
    break;
   case 15:
    var $52 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $47);
    var $54 = $52;
    __label__ = 16;
    break;
   case 16:
    var $54;
    var $55 = $54;
    if (($2 | 0) == 0) {
      var $np_1 = $55;
      __label__ = 22;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $58 = HEAPU32[$11 >> 2];
    if (($9 | 0) == 0) {
      var $__x_1 = $58;
      var $__dst_1 = $55;
      __label__ = 21;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $scevgep = $54 + ($47 - 4) | 0;
    var $__x_0 = $58;
    var $_pn = $11;
    var $__dst_0 = $55;
    var $__n_0 = $9;
    __label__ = 19;
    break;
   case 19:
    var $__n_0;
    var $__dst_0;
    var $_pn;
    var $__x_0;
    var $__src_0 = $_pn + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $63 = HEAP32[$__src_0 >> 2];
    var $64 = $__n_0 - 1 | 0;
    if (($64 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $__x_0 = $63;
      var $_pn = $__src_0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $64;
      __label__ = 19;
      break;
    }
   case 20:
    var $__x_1 = $63;
    var $__dst_1 = $scevgep;
    __label__ = 21;
    break;
   case 21:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    var $np_1 = $55;
    __label__ = 22;
    break;
   case 22:
    var $np_1;
    if (($5 | 0) > (HEAP32[$rop >> 2] | 0)) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $72 = ___gmpz_realloc($rop, $5);
    var $78 = $72;
    __label__ = 25;
    break;
   case 24:
    var $78 = HEAP32[$rop + 8 >> 2];
    __label__ = 25;
    break;
   case 25:
    var $78;
    HEAP32[$78 + ($9 << 2) >> 2] = 0;
    var $80 = $rstate + 16 | 0;
    var $count_0 = 80;
    __label__ = 26;
    break;
   case 26:
    var $count_0;
    var $85 = HEAP32[HEAP32[$80 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$85]($rstate, $78, $40);
    var $__gmp_i_0 = $5;
    __label__ = 27;
    break;
   case 27:
    var $__gmp_i_0;
    var $87 = $__gmp_i_0 - 1 | 0;
    if (($__gmp_i_0 | 0) > 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 28:
    var $91 = HEAPU32[$78 + ($87 << 2) >> 2];
    var $93 = HEAPU32[$np_1 + ($87 << 2) >> 2];
    if (($91 | 0) == ($93 | 0)) {
      var $__gmp_i_0 = $87;
      __label__ = 27;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    if ($91 >>> 0 > $93 >>> 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 30:
    var $97 = $count_0 - 1 | 0;
    if (($97 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      var $count_0 = $97;
      __label__ = 26;
      break;
    }
   case 31:
    if (($count_0 | 0) == 0) {
      __label__ = 32;
      break;
    } else {
      var $size_0 = $5;
      __label__ = 33;
      break;
    }
   case 32:
    var $100 = ___gmpn_sub_n($78, $78, $np_1, $5);
    var $size_0 = $5;
    __label__ = 33;
    break;
   case 33:
    var $size_0;
    if (($size_0 | 0) > 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 34:
    var $103 = $size_0 - 1 | 0;
    if ((HEAP32[$78 + ($103 << 2) >> 2] | 0) == 0) {
      var $size_0 = $103;
      __label__ = 33;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    HEAP32[$rop + 4 >> 2] = $size_0;
    var $108 = HEAP32[$__tmp_marker >> 2];
    if (($108 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    ___gmp_tmp_reentrant_free($108);
    __label__ = 37;
    break;
   case 37:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmpz_urandomm["X"] = 1;

function ___gmp_init_primesieve($ps) {
  HEAP32[$ps + 4 >> 2] = 0;
  HEAP32[$ps + 8 >> 2] = 0;
  HEAP32[$ps >> 2] = 512;
  HEAP8[$ps + 524 | 0] = 0;
  return;
}

function ___gmp_nextprime($ps) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $ps | 0;
    var $2 = $ps + 12 | 0;
    var $3 = $ps + 524 | 0;
    var $4 = $ps + 4 | 0;
    var $5 = $ps + 8 | 0;
    var $6 = HEAP32[$1 >> 2];
    __label__ = 3;
    break;
   case 3:
    var $6;
    var $sp_0 = $6 + ($ps + 12) | 0;
    __label__ = 4;
    break;
   case 4:
    var $sp_0;
    if (HEAP8[$sp_0] << 24 >> 24 == 0) {
      __label__ = 5;
      break;
    } else {
      var $sp_0 = $sp_0 + 1 | 0;
      __label__ = 4;
      break;
    }
   case 5:
    if (($sp_0 | 0) == ($3 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $17 = $sp_0 - $2 | 0;
    HEAP32[$1 >> 2] = $17 + 1 | 0;
    var $_0 = HEAP32[$4 >> 2] + ($17 << 1) | 0;
    __label__ = 29;
    break;
   case 7:
    var $23 = HEAPU32[$4 >> 2];
    if ($23 >>> 0 < 3) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    HEAP32[$4 >> 2] = -1021;
    var $_0 = 2;
    __label__ = 29;
    break;
   case 9:
    _memset($2, 0, 512, 1);
    var $27 = $23 + 1024 | 0;
    HEAP32[$4 >> 2] = $27;
    var $29 = HEAP32[$5 >> 2] + 1 | 0;
    var $30 = (i64Math.multiply($29, 0, $29, 0), i64Math.result[0]);
    if ($30 >>> 0 > ($23 + 2047 | 0) >>> 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    var $33 = $23 + 2047 | 0;
    var $35 = $29;
    __label__ = 11;
    break;
   case 11:
    var $35;
    var $36 = $35 + 1 | 0;
    var $37 = (i64Math.multiply($36, 0, $36, 0), i64Math.result[0]);
    if ($37 >>> 0 > $33 >>> 0) {
      __label__ = 12;
      break;
    } else {
      var $35 = $36;
      __label__ = 11;
      break;
    }
   case 12:
    HEAP32[$5 >> 2] = $35;
    __label__ = 13;
    break;
   case 13:
    var $41 = (($23 + 1027 | 0) >>> 1 >>> 0) % 3;
    var $_ = ($41 | 0) == 0 ? 0 : $41 ^ 3;
    var $pi_1 = (($_ << 1) + $27 | 0) >>> 0 < 4 ? $_ + 3 | 0 : $_;
    var $sp_14 = $pi_1 + ($ps + 12) | 0;
    __label__ = 14;
    break;
   case 14:
    var $sp_14;
    HEAP8[$sp_14] = 1;
    var $50 = $sp_14 + 3 | 0;
    if ($50 >>> 0 < $3 >>> 0) {
      var $sp_14 = $50;
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $52 = HEAPU32[$4 >> 2];
    var $55 = (($52 + 5 | 0) >>> 1 >>> 0) % 5;
    var $pi_2 = ($55 | 0) == 0 ? 0 : 5 - $55 | 0;
    var $_pi_2 = (($pi_2 << 1) + $52 | 0) >>> 0 < 6 ? $pi_2 + 5 | 0 : $pi_2;
    if (($_pi_2 | 0) < 512) {
      __label__ = 16;
      break;
    } else {
      var $67 = $52;
      __label__ = 19;
      break;
    }
   case 16:
    var $sp_28 = $_pi_2 + ($ps + 12) | 0;
    __label__ = 17;
    break;
   case 17:
    var $sp_28;
    HEAP8[$sp_28] = 1;
    var $65 = $sp_28 + 5 | 0;
    if ($65 >>> 0 < $3 >>> 0) {
      var $sp_28 = $65;
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $67 = HEAP32[$4 >> 2];
    __label__ = 19;
    break;
   case 19:
    var $67;
    var $70 = (($67 + 7 | 0) >>> 1 >>> 0) % 7;
    var $pi_4 = ($70 | 0) == 0 ? 0 : $70 ^ 7;
    var $_pi_4 = (($pi_4 << 1) + $67 | 0) >>> 0 < 8 ? $pi_4 + 7 | 0 : $pi_4;
    var $sp_312 = $_pi_4 + ($ps + 12) | 0;
    __label__ = 20;
    break;
   case 20:
    var $sp_312;
    HEAP8[$sp_312] = 1;
    var $79 = $sp_312 + 7 | 0;
    if ($79 >>> 0 < $3 >>> 0) {
      var $sp_312 = $79;
      __label__ = 20;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $81 = HEAPU32[$5 >> 2];
    if ($81 >>> 0 < 11) {
      __label__ = 28;
      break;
    } else {
      var $p_019 = 11;
      var $ai_020 = 0;
      var $83 = $81;
      __label__ = 22;
      break;
    }
   case 22:
    var $83;
    var $ai_020;
    var $p_019;
    var $84 = HEAPU32[$4 >> 2];
    var $87 = (($84 + $p_019 | 0) >>> 1 >>> 0) % ($p_019 >>> 0);
    var $pi_6 = ($87 | 0) == 0 ? 0 : $p_019 - $87 | 0;
    var $93 = (($pi_6 << 1) + $84 | 0) >>> 0 > $p_019 >>> 0 ? 0 : $p_019;
    var $pi_6_ = $93 + $pi_6 | 0;
    if (($pi_6_ | 0) < 512) {
      __label__ = 23;
      break;
    } else {
      var $99 = $83;
      __label__ = 26;
      break;
    }
   case 23:
    var $sp_415 = $pi_6_ + ($ps + 12) | 0;
    __label__ = 24;
    break;
   case 24:
    var $sp_415;
    HEAP8[$sp_415] = 1;
    var $97 = $sp_415 + $p_019 | 0;
    if ($97 >>> 0 < $3 >>> 0) {
      var $sp_415 = $97;
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $99 = HEAP32[$5 >> 2];
    __label__ = 26;
    break;
   case 26:
    var $99;
    var $100 = STRING_TABLE.___gmp_nextprime_addtab + $ai_020 | 0;
    var $103 = (HEAPU8[$100] & 255) + $p_019 | 0;
    if ($103 >>> 0 > $99 >>> 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $p_019 = $103;
    var $ai_020 = (($ai_020 + 1 | 0) >>> 0) % 48;
    var $83 = $99;
    __label__ = 22;
    break;
   case 28:
    HEAP32[$1 >> 2] = 0;
    var $6 = 0;
    __label__ = 3;
    break;
   case 29:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_nextprime["X"] = 1;

function ___gmp_asprintf($result, $fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $ap = __stackBase__;
  HEAP32[$ap >> 2] = arguments[___gmp_asprintf.length];
  var $2 = HEAP32[$ap >> 2];
  var $3 = ___gmp_vasprintf($result, $fmt, $2);
  STACKTOP = __stackBase__;
  return $3;
}

function ___gmp_asprintf_memory($d, $str, $len) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $d + 12 | 0;
    var $2 = HEAPU32[$1 >> 2];
    var $3 = $d + 8 | 0;
    var $4 = HEAPU32[$3 >> 2];
    var $5 = $4 + $len | 0;
    if ($2 >>> 0 > $5 >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $15 = $4;
    var $14 = HEAP32[$d + 4 >> 2];
    __label__ = 5;
    break;
   case 4:
    var $8 = $5 << 1;
    HEAP32[$1 >> 2] = $8;
    var $9 = HEAP32[___gmp_reallocate_func >> 2];
    var $10 = $d + 4 | 0;
    var $11 = HEAP32[$10 >> 2];
    var $12 = FUNCTION_TABLE[$9]($11, $2, $8);
    HEAP32[$10 >> 2] = $12;
    var $15 = HEAP32[$3 >> 2];
    var $14 = $12;
    __label__ = 5;
    break;
   case 5:
    var $14;
    var $15;
    _memcpy($14 + $15 | 0, $str, $len, 1);
    var $18 = HEAP32[$3 >> 2] + $len | 0;
    HEAP32[$3 >> 2] = $18;
    return $len;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_asprintf_reps($d, $c, $reps) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $d + 12 | 0;
    var $2 = HEAPU32[$1 >> 2];
    var $3 = $d + 8 | 0;
    var $4 = HEAPU32[$3 >> 2];
    var $5 = $4 + $reps | 0;
    if ($2 >>> 0 > $5 >>> 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $15 = $4;
    var $14 = HEAP32[$d + 4 >> 2];
    __label__ = 5;
    break;
   case 4:
    var $8 = $5 << 1;
    HEAP32[$1 >> 2] = $8;
    var $9 = HEAP32[___gmp_reallocate_func >> 2];
    var $10 = $d + 4 | 0;
    var $11 = HEAP32[$10 >> 2];
    var $12 = FUNCTION_TABLE[$9]($11, $2, $8);
    HEAP32[$10 >> 2] = $12;
    var $15 = HEAP32[$3 >> 2];
    var $14 = $12;
    __label__ = 5;
    break;
   case 5:
    var $14;
    var $15;
    var $17 = $c & 255;
    _memset($14 + $15 | 0, $17, $reps, 1);
    var $19 = HEAP32[$3 >> 2] + $reps | 0;
    HEAP32[$3 >> 2] = $19;
    return $reps;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_asprintf_final($d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAP32[$d + 4 >> 2];
    var $3 = $d + 8 | 0;
    HEAP8[$2 + HEAP32[$3 >> 2] | 0] = 0;
    var $7 = HEAP32[$d + 12 >> 2];
    var $9 = HEAP32[$3 >> 2] + 1 | 0;
    if (($7 | 0) == ($9 | 0)) {
      var $buf_0 = $2;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $12 = HEAP32[___gmp_reallocate_func >> 2];
    var $13 = FUNCTION_TABLE[$12]($2, $7, $9);
    var $buf_0 = $13;
    __label__ = 4;
    break;
   case 4:
    var $buf_0;
    var $16 = HEAP32[$d >> 2];
    HEAP32[$16 >> 2] = $buf_0;
    return 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_doprnt($funs, $data, $orig_fmt, $orig_ap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 76;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __stackBase__;
    var $ap = __stackBase__ + 4;
    var $this_ap = __stackBase__ + 8;
    var $last_ap = __stackBase__ + 12;
    var $param = __stackBase__ + 16;
    var $z = __stackBase__ + 64;
    HEAP32[$1 >> 2] = $orig_ap;
    var $2 = $ap;
    var $3 = $1;
    _llvm_va_copy($2, $3);
    var $4 = _strlen($orig_fmt);
    var $5 = $4 + 1 | 0;
    var $6 = HEAP32[___gmp_allocate_func >> 2];
    var $7 = FUNCTION_TABLE[$6]($5);
    var $8 = _strcpy($7, $orig_fmt);
    var $9 = $last_ap;
    _llvm_va_copy($9, $2);
    var $10 = $this_ap;
    var $11 = $param + 44 | 0;
    var $12 = $param | 0;
    var $13 = $param + 4 | 0;
    var $14 = $param + 8 | 0;
    var $15 = $param + 12 | 0;
    var $16 = $param + 16 | 0;
    var $17 = $param + 20 | 0;
    var $18 = $param + 24 | 0;
    var $19 = $param + 28 | 0;
    var $20 = $param + 32 | 0;
    var $21 = $param + 36 | 0;
    var $22 = $param + 40 | 0;
    var $23 = $funs | 0;
    var $24 = $z | 0;
    var $25 = $z + 8 | 0;
    var $26 = $z + 4 | 0;
    var $fmt_0 = $7;
    var $last_fmt_0 = $7;
    var $retval_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $retval_0;
    var $last_fmt_0;
    var $fmt_0;
    var $27 = _strchr($fmt_0, 37);
    if (($27 | 0) == 0) {
      __label__ = 98;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    _llvm_va_copy($10, $2);
    var $30 = $27 + 1 | 0;
    HEAP32[$12 >> 2] = 10;
    HEAP32[$13 >> 2] = 0;
    HEAP32[$14 >> 2] = STRING_TABLE.__str488 | 0;
    HEAP32[$15 >> 2] = 0;
    HEAP8[$16] = 32;
    HEAP32[$17 >> 2] = 2;
    HEAP32[$18 >> 2] = 6;
    HEAP32[$19 >> 2] = 2;
    HEAP32[$20 >> 2] = 0;
    HEAP32[$21 >> 2] = 1;
    HEAP8[$22] = 0;
    HEAP32[$11 >> 2] = 0;
    var $fmt_1 = $30;
    var $type_0 = 0;
    var $value_0 = $11;
    var $seen_precision_0 = 0;
    __label__ = 5;
    break;
   case 5:
    var $seen_precision_0;
    var $value_0;
    var $type_0;
    var $fmt_1;
    var $31 = $fmt_1 + 1 | 0;
    var $32 = HEAP8[$fmt_1];
    var $33 = $32 << 24 >> 24;
    if ($32 << 24 >> 24 == 0) {
      var $fmt_0 = $31;
      var $last_fmt_0 = $last_fmt_0;
      var $retval_0 = $retval_0;
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($33 | 0) == 39) {
      var $fmt_1 = $31;
      var $type_0 = $type_0;
      var $value_0 = $value_0;
      var $seen_precision_0 = $seen_precision_0;
      __label__ = 5;
      break;
    } else if (($33 | 0) == 65) {
      __label__ = 7;
      break;
    } else if (($33 | 0) == 97) {
      var $storemerge = STRING_TABLE.__str1489 | 0;
      var $storemerge1 = 16;
      __label__ = 8;
      break;
    } else if (($33 | 0) == 99) {
      __label__ = 11;
      break;
    } else if (($33 | 0) == 100 || ($33 | 0) == 105 || ($33 | 0) == 117) {
      __label__ = 12;
      break;
    } else if (($33 | 0) == 69) {
      __label__ = 39;
      break;
    } else if (($33 | 0) == 101) {
      __label__ = 40;
      break;
    } else if (($33 | 0) == 102) {
      __label__ = 51;
      break;
    } else if (($33 | 0) == 70 || ($33 | 0) == 106 || ($33 | 0) == 76 || ($33 | 0) == 78 || ($33 | 0) == 113 || ($33 | 0) == 81 || ($33 | 0) == 116 || ($33 | 0) == 122 || ($33 | 0) == 90) {
      __label__ = 52;
      break;
    } else if (($33 | 0) == 71) {
      __label__ = 53;
      break;
    } else if (($33 | 0) == 103) {
      __label__ = 54;
      break;
    } else if (($33 | 0) == 104) {
      __label__ = 55;
      break;
    } else if (($33 | 0) == 108) {
      __label__ = 56;
      break;
    } else if (($33 | 0) == 77) {
      __label__ = 57;
      break;
    } else if (($33 | 0) == 110) {
      __label__ = 58;
      break;
    } else if (($33 | 0) == 111) {
      __label__ = 78;
      break;
    } else if (($33 | 0) == 112 || ($33 | 0) == 115) {
      __label__ = 79;
      break;
    } else if (($33 | 0) == 120) {
      __label__ = 80;
      break;
    } else if (($33 | 0) == 88) {
      __label__ = 81;
      break;
    } else if (($33 | 0) == 35) {
      __label__ = 82;
      break;
    } else if (($33 | 0) == 43 || ($33 | 0) == 32) {
      __label__ = 83;
      break;
    } else if (($33 | 0) == 45) {
      __label__ = 84;
      break;
    } else if (($33 | 0) == 46) {
      __label__ = 85;
      break;
    } else if (($33 | 0) == 42) {
      __label__ = 86;
      break;
    } else if (($33 | 0) == 48) {
      __label__ = 91;
      break;
    } else if (($33 | 0) == 57 || ($33 | 0) == 56 || ($33 | 0) == 49 || ($33 | 0) == 50 || ($33 | 0) == 51 || ($33 | 0) == 52 || ($33 | 0) == 53 || ($33 | 0) == 54 || ($33 | 0) == 55) {
      var $n8_0 = 0;
      var $fmt_2 = $31;
      var $fchar_0 = $33;
      __label__ = 95;
      break;
    } else {
      var $fmt_0 = $31;
      var $last_fmt_0 = $last_fmt_0;
      var $retval_0 = $retval_0;
      __label__ = 3;
      break;
    }
   case 7:
    var $storemerge = STRING_TABLE.__str2490 | 0;
    var $storemerge1 = -16;
    __label__ = 8;
    break;
   case 8:
    var $storemerge1;
    var $storemerge;
    HEAP32[$12 >> 2] = $storemerge1;
    HEAP32[$14 >> 2] = $storemerge;
    HEAP32[$13 >> 2] = 2;
    HEAP32[$15 >> 2] = 1;
    if (($seen_precision_0 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    HEAP32[$18 >> 2] = -1;
    __label__ = 10;
    break;
   case 10:
    HEAP32[$19 >> 2] = 1;
    HEAP32[$21 >> 2] = 1;
    __label__ = 43;
    break;
   case 11:
    var $41 = HEAP32[$ap >> 2] + 4 | 0;
    HEAP32[$ap >> 2] = $41;
    var $fmt_0 = $31;
    var $last_fmt_0 = $last_fmt_0;
    var $retval_0 = $retval_0;
    __label__ = 3;
    break;
   case 12:
    if (($seen_precision_0 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    HEAP32[$18 >> 2] = -1;
    __label__ = 14;
    break;
   case 14:
    if (($type_0 | 0) == 106) {
      __label__ = 15;
      break;
    } else if (($type_0 | 0) == 108) {
      __label__ = 16;
      break;
    } else if (($type_0 | 0) == 76) {
      __label__ = 17;
      break;
    } else if (($type_0 | 0) == 78) {
      __label__ = 18;
      break;
    } else if (($type_0 | 0) == 113) {
      __label__ = 25;
      break;
    } else if (($type_0 | 0) == 81) {
      __label__ = 26;
      break;
    } else if (($type_0 | 0) == 116) {
      __label__ = 30;
      break;
    } else if (($type_0 | 0) == 122) {
      __label__ = 31;
      break;
    } else if (($type_0 | 0) == 90) {
      __label__ = 32;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 15:
    var $47 = HEAP32[$ap >> 2] + 8 | 0;
    HEAP32[$ap >> 2] = $47;
    var $fmt_0 = $31;
    var $last_fmt_0 = $last_fmt_0;
    var $retval_0 = $retval_0;
    __label__ = 3;
    break;
   case 16:
    var $50 = HEAP32[$ap >> 2] + 4 | 0;
    HEAP32[$ap >> 2] = $50;
    var $fmt_0 = $31;
    var $last_fmt_0 = $last_fmt_0;
    var $retval_0 = $retval_0;
    __label__ = 3;
    break;
   case 17:
    ___gmp_assert_fail(STRING_TABLE.__str3491 | 0, 285, STRING_TABLE.__str2543 | 0);
    throw "Reached an unreachable!";
   case 18:
    if (($27 | 0) == ($last_fmt_0 | 0)) {
      var $retval_1 = $retval_0;
      __label__ = 21;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    HEAP8[$27] = 0;
    var $55 = HEAP32[$23 >> 2];
    var $56 = HEAP32[$last_ap >> 2];
    var $57 = FUNCTION_TABLE[$55]($data, $last_fmt_0, $56);
    if (($57 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $retval_1 = $57 + $retval_0 | 0;
    __label__ = 21;
    break;
   case 21:
    var $retval_1;
    var $61 = HEAP32[$ap >> 2];
    var $62 = $61;
    var $63 = $61 + 4 | 0;
    HEAP32[$ap >> 2] = $63;
    var $64 = HEAP32[$62 >> 2];
    HEAP32[$25 >> 2] = $64;
    var $65 = $63;
    var $66 = $61 + 8 | 0;
    HEAP32[$ap >> 2] = $66;
    var $67 = HEAP32[$65 >> 2];
    var $68 = ($67 | 0) > -1;
    var $70 = $68 ? $67 : -$67 | 0;
    var $abs_xsize_0 = $70;
    __label__ = 22;
    break;
   case 22:
    var $abs_xsize_0;
    if (($abs_xsize_0 | 0) > 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    var $74 = $abs_xsize_0 - 1 | 0;
    if ((HEAP32[$64 + ($74 << 2) >> 2] | 0) == 0) {
      var $abs_xsize_0 = $74;
      __label__ = 22;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $79 = $68 ? $abs_xsize_0 : -$abs_xsize_0 | 0;
    HEAP32[$26 >> 2] = $79;
    var $80 = HEAP32[$12 >> 2];
    var $81 = ___gmpz_get_str(0, $80, $24);
    var $gmp_str_0 = $81;
    var $retval_4 = $retval_1;
    __label__ = 36;
    break;
   case 25:
    ___gmp_assert_fail(STRING_TABLE.__str3491 | 0, 312, STRING_TABLE.__str1542 | 0);
    throw "Reached an unreachable!";
   case 26:
    if (($27 | 0) == ($last_fmt_0 | 0)) {
      var $retval_2 = $retval_0;
      __label__ = 29;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    HEAP8[$27] = 0;
    var $86 = HEAP32[$23 >> 2];
    var $87 = HEAP32[$last_ap >> 2];
    var $88 = FUNCTION_TABLE[$86]($data, $last_fmt_0, $87);
    if (($88 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $retval_2 = $88 + $retval_0 | 0;
    __label__ = 29;
    break;
   case 29:
    var $retval_2;
    var $92 = HEAP32[$12 >> 2];
    var $93 = HEAP32[$ap >> 2];
    var $94 = $93;
    var $95 = $93 + 4 | 0;
    HEAP32[$ap >> 2] = $95;
    var $96 = HEAP32[$94 >> 2];
    var $97 = ___gmpq_get_str(0, $92, $96);
    var $gmp_str_0 = $97;
    var $retval_4 = $retval_2;
    __label__ = 36;
    break;
   case 30:
    var $100 = HEAP32[$ap >> 2] + 4 | 0;
    HEAP32[$ap >> 2] = $100;
    var $fmt_0 = $31;
    var $last_fmt_0 = $last_fmt_0;
    var $retval_0 = $retval_0;
    __label__ = 3;
    break;
   case 31:
    var $103 = HEAP32[$ap >> 2] + 4 | 0;
    HEAP32[$ap >> 2] = $103;
    var $fmt_0 = $31;
    var $last_fmt_0 = $last_fmt_0;
    var $retval_0 = $retval_0;
    __label__ = 3;
    break;
   case 32:
    if (($27 | 0) == ($last_fmt_0 | 0)) {
      var $retval_3 = $retval_0;
      __label__ = 35;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 33:
    HEAP8[$27] = 0;
    var $107 = HEAP32[$23 >> 2];
    var $108 = HEAP32[$last_ap >> 2];
    var $109 = FUNCTION_TABLE[$107]($data, $last_fmt_0, $108);
    if (($109 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $retval_3 = $109 + $retval_0 | 0;
    __label__ = 35;
    break;
   case 35:
    var $retval_3;
    var $113 = HEAP32[$12 >> 2];
    var $114 = HEAP32[$ap >> 2];
    var $115 = $114;
    var $116 = $114 + 4 | 0;
    HEAP32[$ap >> 2] = $116;
    var $117 = HEAP32[$115 >> 2];
    var $118 = ___gmpz_get_str(0, $113, $117);
    var $gmp_str_0 = $118;
    var $retval_4 = $retval_3;
    __label__ = 36;
    break;
   case 36:
    var $retval_4;
    var $gmp_str_0;
    var $120 = ___gmp_doprnt_integer($funs, $data, $param, $gmp_str_0);
    var $121 = HEAP32[___gmp_free_func >> 2];
    var $122 = _strlen($gmp_str_0);
    var $123 = $122 + 1 | 0;
    FUNCTION_TABLE[$121]($gmp_str_0, $123);
    if (($120 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $126 = $120 + $retval_4 | 0;
    _llvm_va_copy($9, $2);
    var $fmt_0 = $31;
    var $last_fmt_0 = $31;
    var $retval_0 = $126;
    __label__ = 3;
    break;
   case 38:
    var $129 = HEAP32[$ap >> 2] + 4 | 0;
    HEAP32[$ap >> 2] = $129;
    var $fmt_0 = $31;
    var $last_fmt_0 = $last_fmt_0;
    var $retval_0 = $retval_0;
    __label__ = 3;
    break;
   case 39:
    HEAP32[$12 >> 2] = -10;
    HEAP32[$14 >> 2] = STRING_TABLE.__str6 | 0;
    __label__ = 40;
    break;
   case 40:
    HEAP32[$13 >> 2] = 2;
    __label__ = 41;
    break;
   case 41:
    if ((HEAP32[$19 >> 2] | 0) == 3) {
      __label__ = 42;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 42:
    HEAP32[$20 >> 2] = 1;
    HEAP32[$21 >> 2] = 1;
    __label__ = 43;
    break;
   case 43:
    if (($type_0 | 0) == 70) {
      __label__ = 44;
      break;
    } else if (($type_0 | 0) == 76) {
      __label__ = 49;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 44:
    if (($27 | 0) == ($last_fmt_0 | 0)) {
      var $retval_5 = $retval_0;
      __label__ = 47;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    HEAP8[$27] = 0;
    var $139 = HEAP32[$23 >> 2];
    var $140 = HEAP32[$last_ap >> 2];
    var $141 = FUNCTION_TABLE[$139]($data, $last_fmt_0, $140);
    if (($141 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    var $retval_5 = $141 + $retval_0 | 0;
    __label__ = 47;
    break;
   case 47:
    var $retval_5;
    var $146 = _nl_langinfo(50);
    var $147 = HEAP32[$ap >> 2];
    var $148 = $147;
    var $149 = $147 + 4 | 0;
    HEAP32[$ap >> 2] = $149;
    var $150 = HEAP32[$148 >> 2];
    var $151 = ___gmp_doprnt_mpf2($funs, $data, $param, $146, $150);
    if (($151 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    var $154 = $151 + $retval_5 | 0;
    _llvm_va_copy($9, $2);
    var $fmt_0 = $31;
    var $last_fmt_0 = $31;
    var $retval_0 = $154;
    __label__ = 3;
    break;
   case 49:
    ___gmp_assert_fail(STRING_TABLE.__str3491 | 0, 378, STRING_TABLE.__str7 | 0);
    throw "Reached an unreachable!";
   case 50:
    var $158 = HEAP32[$ap >> 2] + 8 | 0;
    HEAP32[$ap >> 2] = $158;
    var $fmt_0 = $31;
    var $last_fmt_0 = $last_fmt_0;
    var $retval_0 = $retval_0;
    __label__ = 3;
    break;
   case 51:
    HEAP32[$13 >> 2] = 1;
    __label__ = 41;
    break;
   case 52:
    var $fmt_1 = $31;
    var $type_0 = $33;
    var $value_0 = $value_0;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 53:
    HEAP32[$12 >> 2] = -10;
    HEAP32[$14 >> 2] = STRING_TABLE.__str6 | 0;
    __label__ = 54;
    break;
   case 54:
    HEAP32[$13 >> 2] = 3;
    HEAP32[$21 >> 2] = 0;
    __label__ = 41;
    break;
   case 55:
    if (($type_0 | 0) == 104) {
      var $fmt_1 = $31;
      var $type_0 = 72;
      var $value_0 = $value_0;
      var $seen_precision_0 = $seen_precision_0;
      __label__ = 5;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 56:
    if (($type_0 | 0) == 108) {
      var $fmt_1 = $31;
      var $type_0 = 76;
      var $value_0 = $value_0;
      var $seen_precision_0 = $seen_precision_0;
      __label__ = 5;
      break;
    } else {
      __label__ = 52;
      break;
    }
   case 57:
    HEAP8[$fmt_1] = 108;
    var $fmt_1 = $31;
    var $type_0 = 108;
    var $value_0 = $value_0;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 58:
    if (($27 | 0) == ($last_fmt_0 | 0)) {
      var $retval_6 = $retval_0;
      __label__ = 61;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    HEAP8[$27] = 0;
    var $170 = HEAP32[$23 >> 2];
    var $171 = HEAP32[$last_ap >> 2];
    var $172 = FUNCTION_TABLE[$170]($data, $last_fmt_0, $171);
    if (($172 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $retval_6 = $172 + $retval_0 | 0;
    __label__ = 61;
    break;
   case 61:
    var $retval_6;
    var $176 = HEAP32[$ap >> 2];
    var $177 = $176;
    var $178 = $176 + 4 | 0;
    HEAP32[$ap >> 2] = $178;
    var $179 = HEAP32[$177 >> 2];
    if (($type_0 | 0) == 0) {
      __label__ = 62;
      break;
    } else if (($type_0 | 0) == 70) {
      __label__ = 63;
      break;
    } else if (($type_0 | 0) == 72) {
      __label__ = 64;
      break;
    } else if (($type_0 | 0) == 104) {
      __label__ = 65;
      break;
    } else if (($type_0 | 0) == 106) {
      __label__ = 66;
      break;
    } else if (($type_0 | 0) == 108) {
      __label__ = 67;
      break;
    } else if (($type_0 | 0) == 113) {
      __label__ = 68;
      break;
    } else if (($type_0 | 0) == 76) {
      __label__ = 69;
      break;
    } else if (($type_0 | 0) == 78) {
      __label__ = 70;
      break;
    } else if (($type_0 | 0) == 81) {
      __label__ = 72;
      break;
    } else if (($type_0 | 0) == 116) {
      __label__ = 73;
      break;
    } else if (($type_0 | 0) == 122) {
      __label__ = 74;
      break;
    } else if (($type_0 | 0) == 90) {
      __label__ = 75;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 62:
    var $181 = $179;
    HEAP32[$181 >> 2] = $retval_6;
    __label__ = 77;
    break;
   case 63:
    var $183 = $179;
    ___gmpf_set_si($183, $retval_6);
    __label__ = 77;
    break;
   case 64:
    HEAP8[$179] = $retval_6 & 255;
    __label__ = 77;
    break;
   case 65:
    HEAP16[$179 >> 1] = $retval_6 & 65535;
    __label__ = 77;
    break;
   case 66:
    var $190$1 = ($retval_6 | 0) < 0 ? -1 : 0;
    var $191 = $179;
    var $st$3$0 = $191 | 0;
    HEAP32[$st$3$0 >> 2] = $retval_6;
    var $st$3$1 = $191 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $190$1;
    __label__ = 77;
    break;
   case 67:
    var $193 = $179;
    HEAP32[$193 >> 2] = $retval_6;
    __label__ = 77;
    break;
   case 68:
    ___gmp_assert_fail(STRING_TABLE.__str3491 | 0, 464, STRING_TABLE.__str1542 | 0);
    throw "Reached an unreachable!";
   case 69:
    ___gmp_assert_fail(STRING_TABLE.__str3491 | 0, 469, STRING_TABLE.__str2543 | 0);
    throw "Reached an unreachable!";
   case 70:
    var $197 = $178;
    var $198 = $176 + 8 | 0;
    HEAP32[$ap >> 2] = $198;
    var $199 = HEAP32[$197 >> 2];
    if (($199 | 0) == 0) {
      __label__ = 77;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $204 = ($199 | 0) > -1 ? $199 : -$199 | 0;
    var $205 = $179;
    HEAP32[$205 >> 2] = $retval_6;
    if (($204 | 0) == 1) {
      __label__ = 77;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 72:
    var $208 = $179;
    ___gmpq_set_si($208, $retval_6, 1);
    __label__ = 77;
    break;
   case 73:
    var $210 = $179;
    HEAP32[$210 >> 2] = $retval_6;
    __label__ = 77;
    break;
   case 74:
    var $212 = $179;
    HEAP32[$212 >> 2] = $retval_6;
    __label__ = 77;
    break;
   case 75:
    var $214 = $179;
    ___gmpz_set_si($214, $retval_6);
    __label__ = 77;
    break;
   case 76:
    var $scevgep = $179 + 4 | 0;
    var $216 = ($204 << 2) - 4 | 0;
    _memset($scevgep, 0, $216, 4);
    __label__ = 77;
    break;
   case 77:
    _llvm_va_copy($9, $2);
    var $fmt_0 = $31;
    var $last_fmt_0 = $31;
    var $retval_0 = $retval_6;
    __label__ = 3;
    break;
   case 78:
    HEAP32[$12 >> 2] = 8;
    __label__ = 12;
    break;
   case 79:
    var $220 = HEAP32[$ap >> 2] + 4 | 0;
    HEAP32[$ap >> 2] = $220;
    var $fmt_0 = $31;
    var $last_fmt_0 = $last_fmt_0;
    var $retval_0 = $retval_0;
    __label__ = 3;
    break;
   case 80:
    HEAP32[$12 >> 2] = 16;
    __label__ = 12;
    break;
   case 81:
    HEAP32[$12 >> 2] = -16;
    __label__ = 12;
    break;
   case 82:
    HEAP32[$19 >> 2] = 3;
    var $fmt_1 = $31;
    var $type_0 = $type_0;
    var $value_0 = $value_0;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 83:
    HEAP8[$22] = $32;
    var $fmt_1 = $31;
    var $type_0 = $type_0;
    var $value_0 = $value_0;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 84:
    HEAP32[$17 >> 2] = 1;
    var $fmt_1 = $31;
    var $type_0 = $type_0;
    var $value_0 = $value_0;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 85:
    HEAP32[$18 >> 2] = -1;
    var $fmt_1 = $31;
    var $type_0 = $type_0;
    var $value_0 = $18;
    var $seen_precision_0 = 1;
    __label__ = 5;
    break;
   case 86:
    var $228 = HEAP32[$ap >> 2];
    var $229 = $228;
    var $230 = $228 + 4 | 0;
    HEAP32[$ap >> 2] = $230;
    var $231 = HEAP32[$229 >> 2];
    var $233 = ($231 | 0) < 0;
    if (($value_0 | 0) == ($11 | 0)) {
      __label__ = 87;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 87:
    if ($233) {
      __label__ = 88;
      break;
    } else {
      var $n7_0 = $231;
      __label__ = 89;
      break;
    }
   case 88:
    HEAP32[$17 >> 2] = 1;
    var $n7_0 = -$231 | 0;
    __label__ = 89;
    break;
   case 89:
    var $n7_0;
    HEAP32[$11 >> 2] = $n7_0;
    var $fmt_1 = $31;
    var $type_0 = $type_0;
    var $value_0 = $11;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 90:
    var $239 = $233 ? 0 : $231;
    HEAP32[$18 >> 2] = $239;
    var $fmt_1 = $31;
    var $type_0 = $type_0;
    var $value_0 = $value_0;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 91:
    if (($value_0 | 0) == ($11 | 0)) {
      __label__ = 92;
      break;
    } else {
      __label__ = 94;
      break;
    }
   case 92:
    HEAP8[$16] = 48;
    if ((HEAP32[$17 >> 2] | 0) == 2) {
      __label__ = 93;
      break;
    } else {
      var $fmt_1 = $31;
      var $type_0 = $type_0;
      var $value_0 = $11;
      var $seen_precision_0 = $seen_precision_0;
      __label__ = 5;
      break;
    }
   case 93:
    HEAP32[$17 >> 2] = 3;
    var $fmt_1 = $31;
    var $type_0 = $type_0;
    var $value_0 = $11;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 94:
    HEAP32[$value_0 >> 2] = 0;
    var $fmt_1 = $31;
    var $type_0 = $type_0;
    var $value_0 = $value_0;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 95:
    var $fchar_0;
    var $fmt_2;
    var $n8_0;
    var $247 = (i64Math.multiply($n8_0, 0, 10, 0), i64Math.result[0]);
    var $249 = $fchar_0 - 48 + $247 | 0;
    var $250 = HEAP8[$fmt_2];
    var $251 = $250 << 24 >> 24;
    if ($250 << 24 >> 24 > -1) {
      __label__ = 96;
      break;
    } else {
      __label__ = 97;
      break;
    }
   case 96:
    if (($251 - 48 | 0) >>> 0 < 10) {
      var $n8_0 = $249;
      var $fmt_2 = $fmt_2 + 1 | 0;
      var $fchar_0 = $251;
      __label__ = 95;
      break;
    } else {
      __label__ = 97;
      break;
    }
   case 97:
    HEAP32[$value_0 >> 2] = $249;
    var $fmt_1 = $fmt_2;
    var $type_0 = $type_0;
    var $value_0 = $value_0;
    var $seen_precision_0 = $seen_precision_0;
    __label__ = 5;
    break;
   case 98:
    if (HEAP8[$last_fmt_0] << 24 >> 24 == 0) {
      var $retval_7 = $retval_0;
      __label__ = 101;
      break;
    } else {
      __label__ = 99;
      break;
    }
   case 99:
    var $259 = HEAP32[$23 >> 2];
    var $260 = HEAP32[$last_ap >> 2];
    var $261 = FUNCTION_TABLE[$259]($data, $last_fmt_0, $260);
    if (($261 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      __label__ = 100;
      break;
    }
   case 100:
    var $retval_7 = $261 + $retval_0 | 0;
    __label__ = 101;
    break;
   case 101:
    var $retval_7;
    var $267 = HEAP32[$funs + 12 >> 2];
    if (($267 | 0) == 0) {
      var $retval_8 = $retval_7;
      __label__ = 103;
      break;
    } else {
      __label__ = 102;
      break;
    }
   case 102:
    var $270 = FUNCTION_TABLE[$267]($data);
    if (($270 | 0) == -1) {
      __label__ = 104;
      break;
    } else {
      var $retval_8 = $retval_7;
      __label__ = 103;
      break;
    }
   case 103:
    var $retval_8;
    var $273 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$273]($7, $5);
    STACKTOP = __stackBase__;
    return $retval_8;
   case 104:
    var $retval_8 = -1;
    __label__ = 103;
    break;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_doprnt["X"] = 1;

function ___gmp_doprnt_mpf2($funs, $data, $p, $point, $f) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 48;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $exp = __stackBase__;
    var $exponent = __stackBase__ + 4;
    var $2 = HEAPU32[$p + 24 >> 2];
    var $4 = $p + 4 | 0;
    var $5 = HEAPU32[$4 >> 2];
    if (($2 | 0) < 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    if (($5 | 0) == 3) {
      __label__ = 4;
      break;
    } else {
      var $prec_0 = $2;
      var $ndigits_0 = 0;
      __label__ = 9;
      break;
    }
   case 4:
    var $10 = HEAP32[$p >> 2];
    var $13 = ($10 | 0) > -1 ? $10 : -$10 | 0;
    var $16 = (($13 << 5) - 32 | 0) >>> 0;
    var $19 = ___gmpn_bases + HEAP32[$f >> 2] * 20 + 4 | 0;
    var $20 = (tempDoubleI32[0] = HEAP32[$19 >> 2], tempDoubleI32[1] = HEAP32[$19 + 4 >> 2], tempDoubleF64[0]);
    var $21 = $16 * $20;
    var $22 = $21 >= 0 ? Math.floor($21) : Math.ceil($21);
    var $prec_0 = $22 + 2 | 0;
    var $ndigits_0 = 0;
    __label__ = 9;
    break;
   case 5:
    if (($5 | 0) == 1) {
      __label__ = 6;
      break;
    } else if (($5 | 0) == 2) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 6:
    var $27 = HEAPU32[$f + 8 >> 2];
    var $29 = HEAP32[$p >> 2];
    var $32 = ($29 | 0) > -1 ? $29 : -$29 | 0;
    var $35 = HEAP32[___gmpn_bases + $32 * 20 >> 2] + ($27 >>> 31 ^ 1) | 0;
    var $36 = (i64Math.multiply($35, 0, $27, 0), i64Math.result[0]);
    var $38 = $2 + 2 + $36 | 0;
    var $40 = ($38 | 0) > 1 ? $38 : 1;
    var $prec_0 = $2;
    var $ndigits_0 = $40;
    __label__ = 9;
    break;
   case 7:
    var $prec_0 = $2;
    var $ndigits_0 = $2 + 1 | 0;
    __label__ = 9;
    break;
   case 8:
    var $45 = ($2 | 0) > 1 ? $2 : 1;
    var $prec_0 = $2;
    var $ndigits_0 = $45;
    __label__ = 9;
    break;
   case 9:
    var $ndigits_0;
    var $prec_0;
    var $46 = $p | 0;
    var $47 = HEAP32[$46 >> 2];
    var $48 = ___gmpf_get_str(0, $exp, $47, $ndigits_0, $f);
    var $49 = _strlen($48);
    var $50 = $49 + 1 | 0;
    var $52 = HEAP8[$p + 40 | 0];
    if (HEAP8[$48] << 24 >> 24 == 45) {
      __label__ = 10;
      break;
    } else {
      var $s_0 = $48;
      var $len_0 = $49;
      var $sign_0_in = $52;
      __label__ = 11;
      break;
    }
   case 10:
    var $s_0 = $48 + 1 | 0;
    var $len_0 = $49 - 1 | 0;
    var $sign_0_in = 45;
    __label__ = 11;
    break;
   case 11:
    var $sign_0_in;
    var $len_0;
    var $s_0;
    var $sign_0 = $sign_0_in << 24 >> 24;
    var $59 = $sign_0_in << 24 >> 24 != 0;
    var $60 = HEAP32[$4 >> 2];
    if (($60 | 0) == 1) {
      __label__ = 12;
      break;
    } else if (($60 | 0) == 2) {
      __label__ = 37;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 12:
    var $63 = HEAPU32[$exp >> 2];
    if (($prec_0 | 0) < 0) {
      __label__ = 13;
      break;
    } else {
      var $prec_1 = $prec_0;
      __label__ = 14;
      break;
    }
   case 13:
    var $65 = $len_0 - $63 | 0;
    var $_ = ($65 | 0) < 0 ? 0 : $65;
    var $prec_1 = $_;
    __label__ = 14;
    break;
   case 14:
    var $prec_1;
    var $67 = $63 + $prec_1 | 0;
    if (($67 | 0) < 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    HEAP32[$exp >> 2] = 0;
    var $127 = 0;
    var $len_48 = 0;
    var $prec_29 = $prec_1;
    __label__ = 35;
    break;
   case 16:
    if (($len_0 | 0) > ($67 | 0)) {
      __label__ = 17;
      break;
    } else {
      var $prec_2_ph = $prec_1;
      var $len_4_ph = $len_0;
      var $_pr = $63;
      __label__ = 34;
      break;
    }
   case 17:
    var $73 = HEAP32[$46 >> 2];
    var $74 = ($73 | 0) > -1;
    var $75 = $74 ? STRING_TABLE.__str494 | 0 : STRING_TABLE.__str1495 | 0;
    var $77 = $74 ? $73 : -$73 | 0;
    var $78 = $s_0 + $67 | 0;
    var $80 = HEAP8[$78] << 24 >> 24;
    var $isdigittmp = $80 - 48 | 0;
    if ($isdigittmp >>> 0 < 10) {
      var $91 = $isdigittmp;
      __label__ = 21;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $82 = _islower($80);
    var $85 = HEAP8[$78] << 24 >> 24;
    if (($82 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $91 = $85 - 87 | 0;
    __label__ = 21;
    break;
   case 20:
    var $91 = $85 - 55 | 0;
    __label__ = 21;
    break;
   case 21:
    var $91;
    if (($91 | 0) < (($77 + 1 | 0) / 2 & -1 | 0)) {
      var $len_2 = $67;
      __label__ = 30;
      break;
    } else {
      var $len_1 = $67;
      __label__ = 22;
      break;
    }
   case 22:
    var $len_1;
    if (($len_1 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 23:
    HEAP8[$s_0] = 49;
    var $96 = $63 + 1 | 0;
    HEAP32[$exp >> 2] = $96;
    var $prec_2_ph = $prec_1;
    var $len_4_ph = 1;
    var $_pr = $96;
    __label__ = 34;
    break;
   case 24:
    var $98 = $len_1 - 1 | 0;
    var $99 = $s_0 + $98 | 0;
    var $101 = HEAP8[$99] << 24 >> 24;
    var $isdigittmp5 = $101 - 48 | 0;
    if ($isdigittmp5 >>> 0 < 10) {
      var $112 = $isdigittmp5;
      __label__ = 28;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $103 = _islower($101);
    var $106 = HEAP8[$99] << 24 >> 24;
    if (($103 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 26:
    var $112 = $106 - 87 | 0;
    __label__ = 28;
    break;
   case 27:
    var $112 = $106 - 55 | 0;
    __label__ = 28;
    break;
   case 28:
    var $112;
    var $113 = $112 + 1 | 0;
    if (($113 | 0) == ($77 | 0)) {
      var $len_1 = $98;
      __label__ = 22;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $117 = HEAP8[$75 + $113 | 0];
    HEAP8[$99] = $117;
    var $len_3 = $len_1;
    __label__ = 32;
    break;
   case 30:
    var $len_2;
    if (($len_2 | 0) > 0) {
      __label__ = 31;
      break;
    } else {
      var $len_3 = $len_2;
      __label__ = 32;
      break;
    }
   case 31:
    var $120 = $len_2 - 1 | 0;
    if (HEAP8[$s_0 + $120 | 0] << 24 >> 24 == 48) {
      var $len_2 = $120;
      __label__ = 30;
      break;
    } else {
      var $prec_2_ph = $prec_1;
      var $len_4_ph = $len_2;
      var $_pr = $63;
      __label__ = 34;
      break;
    }
   case 32:
    var $len_3;
    if (($len_3 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      var $prec_2_ph = $prec_1;
      var $len_4_ph = $len_3;
      var $_pr = $63;
      __label__ = 34;
      break;
    }
   case 33:
    HEAP32[$exp >> 2] = 0;
    var $127 = 0;
    var $len_48 = 0;
    var $prec_29 = $prec_1;
    __label__ = 35;
    break;
   case 34:
    var $_pr;
    var $len_4_ph;
    var $prec_2_ph;
    if (($_pr | 0) < 1) {
      var $127 = $_pr;
      var $len_48 = $len_4_ph;
      var $prec_29 = $prec_2_ph;
      __label__ = 35;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 35:
    var $prec_29;
    var $len_48;
    var $127;
    var $prec_4 = $prec_29;
    var $fraclen_1 = $len_48;
    var $fraczeros_1 = -$127 | 0;
    var $explen_0 = 0;
    var $intzeros_1 = 1;
    var $intlen_1 = 0;
    __label__ = 42;
    break;
   case 36:
    var $131 = ($len_4_ph | 0) < ($_pr | 0) ? $len_4_ph : $_pr;
    var $prec_4 = $prec_2_ph;
    var $fraclen_1 = $len_4_ph - $131 | 0;
    var $fraczeros_1 = 0;
    var $explen_0 = 0;
    var $intzeros_1 = $_pr - $131 | 0;
    var $intlen_1 = $131;
    __label__ = 42;
    break;
   case 37:
    if (($prec_0 | 0) < 0) {
      __label__ = 38;
      break;
    } else {
      var $prec_3 = $prec_0;
      __label__ = 39;
      break;
    }
   case 38:
    var $137 = $len_0 - 1 | 0;
    var $_1 = ($137 | 0) < 0 ? 0 : $137;
    var $prec_3 = $_1;
    __label__ = 39;
    break;
   case 39:
    var $prec_3;
    var $140 = ($len_0 | 0) > 1 ? 1 : $len_0;
    var $142 = ($140 | 0) == 0 & 1;
    var $143 = $len_0 - $140 | 0;
    var $145 = HEAP32[$exp >> 2] - $140 | 0;
    var $expval_0 = (HEAP32[$p + 12 >> 2] | 0) == 0 ? $145 : $145 << 2;
    var $155 = ($expval_0 | 0) > -1 ? $expval_0 : -$expval_0 | 0;
    var $156 = $exponent | 0;
    var $158 = HEAP32[$p + 8 >> 2];
    var $159 = ($expval_0 >> 31 & 2) + 43 & 47;
    var $160 = _snprintf($156, 42, $158, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $159, HEAP32[tempInt + 4 >> 2] = $155, tempInt));
    var $prec_4 = $prec_3;
    var $fraclen_1 = $143;
    var $fraczeros_1 = 0;
    var $explen_0 = $160;
    var $intzeros_1 = $142;
    var $intlen_1 = $140;
    __label__ = 42;
    break;
   case 40:
    var $162 = HEAPU32[$exp >> 2];
    var $163 = $162 - 1 | 0;
    if (($163 | 0) < -4) {
      var $prec_3 = $prec_0;
      __label__ = 39;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    var $167 = ($prec_0 | 0) < 1 ? 1 : $prec_0;
    if (($163 | 0) < ($167 | 0)) {
      var $prec_2_ph = $prec_0;
      var $len_4_ph = $len_0;
      var $_pr = $162;
      __label__ = 34;
      break;
    } else {
      var $prec_3 = $prec_0;
      __label__ = 39;
      break;
    }
   case 42:
    var $intlen_1;
    var $intzeros_1;
    var $explen_0;
    var $fraczeros_1;
    var $fraclen_1;
    var $prec_4;
    if ((HEAP32[$p + 36 >> 2] | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 43:
    var $preczeros_0 = 0;
    var $_pre_phi = $fraclen_1 + $fraczeros_1 | 0;
    __label__ = 45;
    break;
   case 44:
    var $_2_neg = (HEAP32[$4 >> 2] | 0) == 3 ? -($intzeros_1 + $intlen_1 | 0) | 0 : 0;
    var $sum = $fraclen_1 + $fraczeros_1 | 0;
    var $177 = $prec_4 - $sum + $_2_neg | 0;
    var $179 = ($177 | 0) < 0 ? 0 : $177;
    var $preczeros_0 = $179;
    var $_pre_phi = $sum;
    __label__ = 45;
    break;
   case 45:
    var $_pre_phi;
    var $preczeros_0;
    if (($_pre_phi | 0) == (-$preczeros_0 | 0)) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    if ((HEAP32[$p + 32 >> 2] | 0) == 0) {
      var $190 = 0;
      __label__ = 48;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    var $188 = _strlen($point);
    var $190 = $188;
    __label__ = 48;
    break;
   case 48:
    var $190;
    var $192 = HEAP32[$p + 28 >> 2];
    if (($192 | 0) == 3) {
      __label__ = 49;
      break;
    } else if (($192 | 0) == 1) {
      __label__ = 50;
      break;
    } else {
      var $showbase_0 = 0;
      var $showbaselen_0 = 0;
      __label__ = 54;
      break;
    }
   case 49:
    if (($fraclen_1 | $intlen_1 | 0) == 0) {
      var $showbase_0 = 0;
      var $showbaselen_0 = 0;
      __label__ = 54;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $196 = HEAP32[$46 >> 2];
    if (($196 | 0) == 16) {
      __label__ = 51;
      break;
    } else if (($196 | 0) == -16) {
      __label__ = 52;
      break;
    } else if (($196 | 0) == 8) {
      __label__ = 53;
      break;
    } else {
      var $showbase_0 = 0;
      var $showbaselen_0 = 0;
      __label__ = 54;
      break;
    }
   case 51:
    var $showbase_0 = STRING_TABLE.__str501 | 0;
    var $showbaselen_0 = 2;
    __label__ = 54;
    break;
   case 52:
    var $showbase_0 = STRING_TABLE.__str1502 | 0;
    var $showbaselen_0 = 2;
    __label__ = 54;
    break;
   case 53:
    var $showbase_0 = STRING_TABLE._str | 0;
    var $showbaselen_0 = 1;
    __label__ = 54;
    break;
   case 54:
    var $showbaselen_0;
    var $showbase_0;
    var $203 = ($59 << 31 >> 31) - $intlen_1 - $intzeros_1 - $explen_0 - $fraczeros_1 - $fraclen_1 - $preczeros_0 - $190 - $showbaselen_0 + HEAP32[$p + 44 >> 2] | 0;
    var $_3 = ($203 | 0) < 1 ? 0 : HEAP32[$p + 20 >> 2];
    if (($_3 | 0) == 2) {
      __label__ = 55;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 56;
      break;
    }
   case 55:
    var $210 = HEAP32[$funs + 8 >> 2];
    var $213 = HEAP8[$p + 16 | 0] << 24 >> 24;
    var $214 = FUNCTION_TABLE[$210]($data, $213, $203);
    if (($214 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      var $retval_0 = $214;
      __label__ = 56;
      break;
    }
   case 56:
    var $retval_0;
    if ($59) {
      __label__ = 57;
      break;
    } else {
      var $retval_1 = $retval_0;
      __label__ = 59;
      break;
    }
   case 57:
    var $219 = HEAP32[$funs + 8 >> 2];
    var $220 = FUNCTION_TABLE[$219]($data, $sign_0, 1);
    if (($220 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 58:
    var $retval_1 = $220 + $retval_0 | 0;
    __label__ = 59;
    break;
   case 59:
    var $retval_1;
    if (($showbaselen_0 | 0) == 0) {
      var $retval_2 = $retval_1;
      __label__ = 62;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $228 = HEAP32[$funs + 4 >> 2];
    var $229 = FUNCTION_TABLE[$228]($data, $showbase_0, $showbaselen_0);
    if (($229 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 61:
    var $retval_2 = $229 + $retval_1 | 0;
    __label__ = 62;
    break;
   case 62:
    var $retval_2;
    if (($_3 | 0) == 3) {
      __label__ = 63;
      break;
    } else {
      var $retval_3 = $retval_2;
      __label__ = 65;
      break;
    }
   case 63:
    var $237 = HEAP32[$funs + 8 >> 2];
    var $240 = HEAP8[$p + 16 | 0] << 24 >> 24;
    var $241 = FUNCTION_TABLE[$237]($data, $240, $203);
    if (($241 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $retval_3 = $241 + $retval_2 | 0;
    __label__ = 65;
    break;
   case 65:
    var $retval_3;
    var $246 = $funs + 4 | 0;
    var $247 = HEAP32[$246 >> 2];
    var $248 = FUNCTION_TABLE[$247]($data, $s_0, $intlen_1);
    if (($248 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    var $251 = $248 + $retval_3 | 0;
    if (($intzeros_1 | 0) == 0) {
      var $retval_4 = $251;
      __label__ = 69;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $255 = HEAP32[$funs + 8 >> 2];
    var $256 = FUNCTION_TABLE[$255]($data, 48, $intzeros_1);
    if (($256 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 68:
    var $retval_4 = $256 + $251 | 0;
    __label__ = 69;
    break;
   case 69:
    var $retval_4;
    if (($190 | 0) == 0) {
      var $retval_5 = $retval_4;
      __label__ = 72;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $263 = HEAP32[$246 >> 2];
    var $264 = FUNCTION_TABLE[$263]($data, $point, $190);
    if (($264 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 71;
      break;
    }
   case 71:
    var $retval_5 = $264 + $retval_4 | 0;
    __label__ = 72;
    break;
   case 72:
    var $retval_5;
    if (($fraczeros_1 | 0) == 0) {
      var $retval_6 = $retval_5;
      __label__ = 75;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    var $272 = HEAP32[$funs + 8 >> 2];
    var $273 = FUNCTION_TABLE[$272]($data, 48, $fraczeros_1);
    if (($273 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 74;
      break;
    }
   case 74:
    var $retval_6 = $273 + $retval_5 | 0;
    __label__ = 75;
    break;
   case 75:
    var $retval_6;
    if (($fraclen_1 | 0) == 0) {
      var $retval_7 = $retval_6;
      __label__ = 78;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    var $280 = HEAP32[$246 >> 2];
    var $282 = FUNCTION_TABLE[$280]($data, $s_0 + $intlen_1 | 0, $fraclen_1);
    if (($282 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    var $retval_7 = $282 + $retval_6 | 0;
    __label__ = 78;
    break;
   case 78:
    var $retval_7;
    if (($preczeros_0 | 0) == 0) {
      var $retval_8 = $retval_7;
      __label__ = 81;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 79:
    var $290 = HEAP32[$funs + 8 >> 2];
    var $291 = FUNCTION_TABLE[$290]($data, 48, $preczeros_0);
    if (($291 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 80:
    var $retval_8 = $291 + $retval_7 | 0;
    __label__ = 81;
    break;
   case 81:
    var $retval_8;
    if (($explen_0 | 0) == 0) {
      var $retval_9 = $retval_8;
      __label__ = 84;
      break;
    } else {
      __label__ = 82;
      break;
    }
   case 82:
    var $298 = HEAP32[$246 >> 2];
    var $299 = $exponent | 0;
    var $300 = FUNCTION_TABLE[$298]($data, $299, $explen_0);
    if (($300 | 0) == -1) {
      var $retval_10 = -1;
      __label__ = 86;
      break;
    } else {
      __label__ = 83;
      break;
    }
   case 83:
    var $retval_9 = $300 + $retval_8 | 0;
    __label__ = 84;
    break;
   case 84:
    var $retval_9;
    if (($_3 | 0) == 1) {
      __label__ = 85;
      break;
    } else {
      var $retval_10 = $retval_9;
      __label__ = 86;
      break;
    }
   case 85:
    var $308 = HEAP32[$funs + 8 >> 2];
    var $311 = HEAP8[$p + 16 | 0] << 24 >> 24;
    var $312 = FUNCTION_TABLE[$308]($data, $311, $203);
    var $_4 = ($312 | 0) == -1 ? -1 : $312 + $retval_9 | 0;
    var $retval_10 = $_4;
    __label__ = 86;
    break;
   case 86:
    var $retval_10;
    var $316 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$316]($48, $50);
    STACKTOP = __stackBase__;
    return $retval_10;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_doprnt_mpf2["X"] = 1;

function ___gmp_doprnt_integer($funs, $data, $p, $s) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $4 = HEAP8[$s] << 24 >> 24 == 45;
    var $_ = $4 ? 45 : HEAP8[$p + 40 | 0];
    var $_s = $4 ? $s + 1 | 0 : $s;
    var $sign_0 = $_ << 24 >> 24;
    var $6 = $_ << 24 >> 24 != 0;
    var $7 = $6 & 1;
    if (HEAP8[$_s] << 24 >> 24 == 48) {
      __label__ = 3;
      break;
    } else {
      var $_1 = $_s;
      __label__ = 4;
      break;
    }
   case 3:
    var $__s = (HEAP32[$p + 24 >> 2] | 0) == 0 ? $_s + 1 | 0 : $_s;
    var $_1 = $__s;
    __label__ = 4;
    break;
   case 4:
    var $_1;
    var $16 = _strlen($_1);
    var $17 = _strchr($_1, 47);
    var $19 = HEAPU32[$p + 28 >> 2];
    if (($19 | 0) == 2) {
      var $showbase_0 = 0;
      var $showbaselen_0 = 0;
      __label__ = 9;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $23 = HEAP32[$p >> 2];
    if (($23 | 0) == 16) {
      __label__ = 6;
      break;
    } else if (($23 | 0) == -16) {
      __label__ = 7;
      break;
    } else if (($23 | 0) == 8) {
      __label__ = 8;
      break;
    } else {
      var $showbase_0 = 0;
      var $showbaselen_0 = 0;
      __label__ = 9;
      break;
    }
   case 6:
    var $showbase_0 = STRING_TABLE.__str501 | 0;
    var $showbaselen_0 = 2;
    __label__ = 9;
    break;
   case 7:
    var $showbase_0 = STRING_TABLE.__str1502 | 0;
    var $showbaselen_0 = 2;
    __label__ = 9;
    break;
   case 8:
    var $showbase_0 = STRING_TABLE._str | 0;
    var $showbaselen_0 = 1;
    __label__ = 9;
    break;
   case 9:
    var $showbaselen_0;
    var $showbase_0;
    if (($17 | 0) == 0) {
      var $_pr2 = $19;
      __label__ = 12;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    if (($19 | 0) == 3) {
      __label__ = 11;
      break;
    } else {
      var $showbaselen_1 = $showbaselen_0;
      var $den_showbaselen_05 = $showbaselen_0;
      __label__ = 14;
      break;
    }
   case 11:
    var $_showbaselen_07 = HEAP8[$17 + 1 | 0] << 24 >> 24 == 48 ? 0 : $showbaselen_0;
    var $den_showbaselen_0_ph5 = $_showbaselen_07;
    __label__ = 13;
    break;
   case 12:
    var $_pr2;
    if (($_pr2 | 0) == 3) {
      var $den_showbaselen_0_ph5 = 0;
      __label__ = 13;
      break;
    } else {
      var $showbaselen_1 = $showbaselen_0;
      var $den_showbaselen_05 = 0;
      __label__ = 14;
      break;
    }
   case 13:
    var $den_showbaselen_0_ph5;
    var $_showbaselen_0 = HEAP8[$_1] << 24 >> 24 == 48 ? 0 : $showbaselen_0;
    var $showbaselen_1 = $_showbaselen_0;
    var $den_showbaselen_05 = $den_showbaselen_0_ph5;
    __label__ = 14;
    break;
   case 14:
    var $den_showbaselen_05;
    var $showbaselen_1;
    var $41 = HEAP32[$p + 24 >> 2] - $16 | 0;
    var $_3 = ($41 | 0) < 0 ? 0 : $41;
    var $44 = HEAP32[$p + 44 >> 2];
    var $45 = _strlen($_1);
    var $46 = ($6 << 31 >> 31) - $den_showbaselen_05 - $showbaselen_1 + $44 - $45 - $_3 | 0;
    var $justify_0 = ($46 | 0) < 1 ? 0 : HEAP32[$p + 20 >> 2];
    if (($justify_0 | 0) == 2) {
      __label__ = 15;
      break;
    } else {
      var $retval_0 = 0;
      __label__ = 16;
      break;
    }
   case 15:
    var $53 = HEAP32[$funs + 8 >> 2];
    var $56 = HEAP8[$p + 16 | 0] << 24 >> 24;
    var $57 = FUNCTION_TABLE[$53]($data, $56, $46);
    if (($57 | 0) == -1) {
      var $retval_6 = -1;
      __label__ = 36;
      break;
    } else {
      var $retval_0 = $57;
      __label__ = 16;
      break;
    }
   case 16:
    var $retval_0;
    if ($6) {
      __label__ = 17;
      break;
    } else {
      var $retval_1 = $retval_0;
      __label__ = 19;
      break;
    }
   case 17:
    var $62 = HEAP32[$funs + 8 >> 2];
    var $63 = FUNCTION_TABLE[$62]($data, $sign_0, $7);
    if (($63 | 0) == -1) {
      var $retval_6 = -1;
      __label__ = 36;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $retval_1 = $63 + $retval_0 | 0;
    __label__ = 19;
    break;
   case 19:
    var $retval_1;
    if (($showbaselen_1 | 0) == 0) {
      var $retval_2 = $retval_1;
      __label__ = 22;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $71 = HEAP32[$funs + 4 >> 2];
    var $72 = FUNCTION_TABLE[$71]($data, $showbase_0, $showbaselen_1);
    if (($72 | 0) == -1) {
      var $retval_6 = -1;
      __label__ = 36;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $retval_2 = $72 + $retval_1 | 0;
    __label__ = 22;
    break;
   case 22:
    var $retval_2;
    if (($_3 | 0) == 0) {
      var $retval_3 = $retval_2;
      __label__ = 25;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $80 = HEAP32[$funs + 8 >> 2];
    var $81 = FUNCTION_TABLE[$80]($data, 48, $_3);
    if (($81 | 0) == -1) {
      var $retval_6 = -1;
      __label__ = 36;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $retval_3 = $81 + $retval_2 | 0;
    __label__ = 25;
    break;
   case 25:
    var $retval_3;
    if (($justify_0 | 0) == 3) {
      __label__ = 26;
      break;
    } else {
      var $retval_4 = $retval_3;
      __label__ = 28;
      break;
    }
   case 26:
    var $89 = HEAP32[$funs + 8 >> 2];
    var $92 = HEAP8[$p + 16 | 0] << 24 >> 24;
    var $93 = FUNCTION_TABLE[$89]($data, $92, $46);
    if (($93 | 0) == -1) {
      var $retval_6 = -1;
      __label__ = 36;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $retval_4 = $93 + $retval_3 | 0;
    __label__ = 28;
    break;
   case 28:
    var $retval_4;
    if (($den_showbaselen_05 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 29:
    var $_2 = $_1;
    var $retval_5 = $retval_4;
    var $slen_0 = $16;
    var $_pre_phi = $funs + 4 | 0;
    __label__ = 33;
    break;
   case 30:
    var $103 = $17 + 1 - $_1 | 0;
    var $104 = $funs + 4 | 0;
    var $105 = HEAP32[$104 >> 2];
    var $106 = FUNCTION_TABLE[$105]($data, $_1, $103);
    if (($106 | 0) == -1) {
      var $retval_6 = -1;
      __label__ = 36;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $109 = HEAP32[$104 >> 2];
    var $110 = FUNCTION_TABLE[$109]($data, $showbase_0, $den_showbaselen_05);
    if (($110 | 0) == -1) {
      var $retval_6 = -1;
      __label__ = 36;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $_2 = $_1 + $103 | 0;
    var $retval_5 = $106 + $retval_4 + $110 | 0;
    var $slen_0 = $16 - $103 | 0;
    var $_pre_phi = $104;
    __label__ = 33;
    break;
   case 33:
    var $_pre_phi;
    var $slen_0;
    var $retval_5;
    var $_2;
    var $118 = HEAP32[$_pre_phi >> 2];
    var $119 = FUNCTION_TABLE[$118]($data, $_2, $slen_0);
    if (($119 | 0) == -1) {
      var $retval_6 = -1;
      __label__ = 36;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $122 = $119 + $retval_5 | 0;
    if (($justify_0 | 0) == 1) {
      __label__ = 35;
      break;
    } else {
      var $retval_6 = $122;
      __label__ = 36;
      break;
    }
   case 35:
    var $126 = HEAP32[$funs + 8 >> 2];
    var $129 = HEAP8[$p + 16 | 0] << 24 >> 24;
    var $130 = FUNCTION_TABLE[$126]($data, $129, $46);
    var $_4 = ($130 | 0) == -1 ? -1 : $130 + $122 | 0;
    return $_4;
   case 36:
    var $retval_6;
    return $retval_6;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_doprnt_integer["X"] = 1;

function ___gmp_fprintf($fp, $fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $ap = __stackBase__;
  HEAP32[$ap >> 2] = arguments[___gmp_fprintf.length];
  var $2 = $fp;
  var $3 = HEAP32[$ap >> 2];
  var $4 = ___gmp_doprnt(___gmp_fprintf_funs, $2, $fmt, $3);
  STACKTOP = __stackBase__;
  return $4;
}

function ___gmp_printf($fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $ap = __stackBase__;
  HEAP32[$ap >> 2] = arguments[___gmp_printf.length];
  var $3 = HEAP32[_stdout >> 2];
  var $4 = HEAP32[$ap >> 2];
  var $5 = ___gmp_doprnt(___gmp_fprintf_funs, $3, $fmt, $4);
  STACKTOP = __stackBase__;
  return $5;
}

function _gmp_fprintf_memory($fp, $str, $len) {
  var $1 = _fwrite($str, 1, $len, $fp);
  return $1;
}

function _gmp_fprintf_reps($fp, $c, $reps) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 256;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __stackBase__ | 0;
    var $2 = $c & 255;
    var $4 = $reps >>> 0 < 256 ? $reps : 256;
    _memset($1, $2, $4, 1);
    var $i_0 = $reps;
    __label__ = 3;
    break;
   case 3:
    var $i_0;
    if (($i_0 | 0) > 0) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $reps;
      __label__ = 5;
      break;
    }
   case 4:
    var $9 = $i_0 >>> 0 < 256 ? $i_0 : 256;
    var $10 = _fwrite($1, 1, $9, $fp);
    if (($10 | 0) == -1) {
      var $_0 = -1;
      __label__ = 5;
      break;
    } else {
      var $i_0 = $i_0 - 256 | 0;
      __label__ = 3;
      break;
    }
   case 5:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_snprintf($buf, $size, $fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var $d = __stackBase__;
  var $ap = __stackBase__ + 8;
  HEAP32[$ap >> 2] = arguments[___gmp_snprintf.length];
  HEAP32[$d >> 2] = $buf;
  HEAP32[$d + 4 >> 2] = $size;
  var $4 = $d;
  var $5 = HEAP32[$ap >> 2];
  var $6 = ___gmp_doprnt(___gmp_snprintf_funs, $4, $fmt, $5);
  STACKTOP = __stackBase__;
  return $6;
}

function _gmp_snprintf_format($d, $fmt, $orig_ap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __stackBase__;
    var $ap = __stackBase__ + 4;
    HEAP32[$1 >> 2] = $orig_ap;
    var $2 = $d + 4 | 0;
    var $3 = HEAP32[$2 >> 2];
    var $5 = $ap;
    var $6 = $1;
    if (($3 | 0) > 1) {
      __label__ = 3;
      break;
    } else {
      var $alloc_0_ph = 128;
      var $_pre_phi = $5;
      var $_pre_phi2 = $6;
      __label__ = 5;
      break;
    }
   case 3:
    _llvm_va_copy($5, $6);
    var $8 = $d | 0;
    var $9 = HEAP32[$8 >> 2];
    var $10 = HEAP32[$ap >> 2];
    var $11 = _vsnprintf($9, $3, $fmt, $10);
    var $13 = $3 - 1 | 0;
    var $_ = ($11 | 0) == -1 ? $13 : $11;
    var $15 = ($_ | 0) < ($13 | 0) ? $_ : $13;
    var $17 = HEAP32[$2 >> 2] - $15 | 0;
    HEAP32[$2 >> 2] = $17;
    var $19 = HEAP32[$8 >> 2] + $15 | 0;
    HEAP32[$8 >> 2] = $19;
    if (($_ | 0) == ($13 | 0)) {
      __label__ = 4;
      break;
    } else {
      var $_0 = $_;
      __label__ = 7;
      break;
    }
   case 4:
    var $23 = ($13 | 0) < 128 ? 128 : $13;
    var $alloc_0_ph = $23;
    var $_pre_phi = $5;
    var $_pre_phi2 = $6;
    __label__ = 5;
    break;
   case 5:
    var $_pre_phi2;
    var $_pre_phi;
    var $alloc_0_ph;
    var $alloc_0 = $alloc_0_ph;
    __label__ = 6;
    break;
   case 6:
    var $alloc_0;
    var $24 = $alloc_0 << 1;
    var $25 = HEAP32[___gmp_allocate_func >> 2];
    var $26 = FUNCTION_TABLE[$25]($24);
    _llvm_va_copy($_pre_phi, $_pre_phi2);
    var $27 = HEAP32[$ap >> 2];
    var $28 = _vsnprintf($26, $24, $fmt, $27);
    var $29 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$29]($26, $24);
    if (($28 | 0) == ($24 - 1 | 0) | ($28 | 0) == -1) {
      var $alloc_0 = $24;
      __label__ = 6;
      break;
    } else {
      var $_0 = $28;
      __label__ = 7;
      break;
    }
   case 7:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_gmp_snprintf_format["X"] = 1;

function _gmp_snprintf_memory($d, $str, $len) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $d + 4 | 0;
    var $2 = HEAPU32[$1 >> 2];
    if ($2 >>> 0 > 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = $2 - 1 | 0;
    var $_len = $5 >>> 0 < $len >>> 0 ? $5 : $len;
    var $7 = $d | 0;
    var $8 = HEAP32[$7 >> 2];
    _memcpy($8, $str, $_len, 1);
    var $10 = HEAP32[$7 >> 2] + $_len | 0;
    HEAP32[$7 >> 2] = $10;
    var $12 = HEAP32[$1 >> 2] - $_len | 0;
    HEAP32[$1 >> 2] = $12;
    __label__ = 4;
    break;
   case 4:
    return $len;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _gmp_sprintf_final($bufp, $c, $reps) {
  HEAP8[HEAP32[$bufp >> 2]] = 0;
  return 0;
}

function _gmp_snprintf_final($d) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[$d + 4 >> 2] | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    HEAP8[HEAP32[$d >> 2]] = 0;
    __label__ = 4;
    break;
   case 4:
    return 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_mt_recalc_buffer($mt) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $kk_02 = 0;
    var $2 = HEAP32[$mt >> 2];
    __label__ = 3;
    break;
   case 3:
    var $2;
    var $kk_02;
    var $5 = $kk_02 + 1 | 0;
    var $7 = HEAPU32[$mt + ($5 << 2) >> 2];
    var $16 = ($7 & 1 | 0) != 0 ? -1727483681 : 0;
    var $18 = $16 ^ HEAP32[$mt + ($kk_02 + 397 << 2) >> 2] ^ ($7 & 2147483646 | $2 & -2147483648) >>> 1;
    HEAP32[$mt + ($kk_02 << 2) >> 2] = $18;
    if (($5 | 0) == 227) {
      __label__ = 4;
      break;
    } else {
      var $kk_02 = $5;
      var $2 = $7;
      __label__ = 3;
      break;
    }
   case 4:
    var $kk_11 = 227;
    var $19 = HEAP32[$mt + 908 >> 2];
    __label__ = 5;
    break;
   case 5:
    var $19;
    var $kk_11;
    var $22 = $kk_11 + 1 | 0;
    var $24 = HEAPU32[$mt + ($22 << 2) >> 2];
    var $33 = ($24 & 1 | 0) != 0 ? -1727483681 : 0;
    var $35 = $33 ^ HEAP32[$mt + ($kk_11 - 227 << 2) >> 2] ^ ($24 & 2147483646 | $19 & -2147483648) >>> 1;
    HEAP32[$mt + ($kk_11 << 2) >> 2] = $35;
    if (($22 | 0) == 623) {
      __label__ = 6;
      break;
    } else {
      var $kk_11 = $22;
      var $19 = $24;
      __label__ = 5;
      break;
    }
   case 6:
    var $36 = $mt + 2492 | 0;
    var $39 = HEAPU32[$mt >> 2];
    var $47 = ($39 & 1 | 0) != 0 ? -1727483681 : 0;
    var $49 = $47 ^ HEAP32[$mt + 1584 >> 2] ^ ($39 & 2147483646 | HEAP32[$36 >> 2] & -2147483648) >>> 1;
    HEAP32[$36 >> 2] = $49;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_mt_recalc_buffer["X"] = 1;

function _gmp_snprintf_reps($d, $c, $reps) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $d + 4 | 0;
    var $2 = HEAPU32[$1 >> 2];
    if ($2 >>> 0 > 1) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $5 = $2 - 1 | 0;
    var $_reps = $5 >>> 0 < $reps >>> 0 ? $5 : $reps;
    var $7 = $d | 0;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $c & 255;
    _memset($8, $9, $_reps, 1);
    var $11 = HEAP32[$7 >> 2] + $_reps | 0;
    HEAP32[$7 >> 2] = $11;
    var $13 = HEAP32[$1 >> 2] - $_reps | 0;
    HEAP32[$1 >> 2] = $13;
    __label__ = 4;
    break;
   case 4:
    return $reps;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_sprintf($buf, $fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $1 = __stackBase__;
  var $ap = __stackBase__ + 4;
  HEAP32[$1 >> 2] = $buf;
  HEAP32[$ap >> 2] = arguments[___gmp_sprintf.length];
  var $3 = $1;
  var $4 = HEAP32[$ap >> 2];
  var $5 = ___gmp_doprnt(___gmp_sprintf_funs, $3, $fmt, $4);
  STACKTOP = __stackBase__;
  return $5;
}

function _gmp_sprintf_format($bufp, $fmt, $ap) {
  var $1 = HEAP32[$bufp >> 2];
  var $2 = _vsprintf($1, $fmt, $ap);
  var $3 = _strlen($1);
  var $4 = $1 + $3 | 0;
  HEAP32[$bufp >> 2] = $4;
  return $3;
}

function _gmp_sprintf_memory($bufp, $str, $len) {
  var $1 = HEAP32[$bufp >> 2];
  var $2 = $1 + $len | 0;
  HEAP32[$bufp >> 2] = $2;
  _memcpy($1, $str, $len, 1);
  return $len;
}

function _gmp_sprintf_reps($bufp, $c, $reps) {
  var $1 = HEAP32[$bufp >> 2];
  var $2 = $1 + $reps | 0;
  HEAP32[$bufp >> 2] = $2;
  var $3 = $c & 255;
  _memset($1, $3, $reps, 1);
  return $reps;
}

function _gmp_asprintf_format($d, $fmt, $orig_ap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __stackBase__;
    var $ap = __stackBase__ + 4;
    HEAP32[$1 >> 2] = $orig_ap;
    var $2 = $d + 12 | 0;
    var $3 = $d + 8 | 0;
    var $4 = $ap;
    var $5 = $1;
    var $6 = $d + 4 | 0;
    var $space_0 = 256;
    __label__ = 3;
    break;
   case 3:
    var $space_0;
    var $7 = HEAPU32[$2 >> 2];
    var $8 = HEAPU32[$3 >> 2];
    var $9 = $8 + $space_0 | 0;
    if ($7 >>> 0 > $9 >>> 0) {
      var $18 = $7;
      var $17 = $8;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $12 = $9 << 1;
    HEAP32[$2 >> 2] = $12;
    var $13 = HEAP32[___gmp_reallocate_func >> 2];
    var $14 = HEAP32[$6 >> 2];
    var $15 = FUNCTION_TABLE[$13]($14, $7, $12);
    HEAP32[$6 >> 2] = $15;
    var $18 = HEAP32[$2 >> 2];
    var $17 = HEAP32[$3 >> 2];
    __label__ = 5;
    break;
   case 5:
    var $17;
    var $18;
    var $19 = $18 - $17 | 0;
    _llvm_va_copy($4, $5);
    var $22 = HEAP32[$6 >> 2] + HEAP32[$3 >> 2] | 0;
    var $23 = HEAP32[$ap >> 2];
    var $24 = _vsnprintf($22, $19, $fmt, $23);
    var $26 = $19 - 1 | 0;
    var $ret_0 = ($24 | 0) == -1 ? $26 : $24;
    if ($ret_0 >>> 0 < $26 >>> 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($ret_0 | 0) == ($26 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $space_0 = $19 << 1;
    __label__ = 3;
    break;
   case 8:
    var $space_0 = $ret_0 + 2 | 0;
    __label__ = 3;
    break;
   case 9:
    var $36 = HEAP32[$3 >> 2] + $ret_0 | 0;
    HEAP32[$3 >> 2] = $36;
    STACKTOP = __stackBase__;
    return $ret_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_vasprintf($result, $fmt, $ap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var $d = __stackBase__;
  HEAP32[$d >> 2] = $result;
  HEAP32[$d + 12 >> 2] = 256;
  var $3 = HEAP32[___gmp_allocate_func >> 2];
  var $4 = FUNCTION_TABLE[$3](256);
  HEAP32[$d + 4 >> 2] = $4;
  HEAP32[$d + 8 >> 2] = 0;
  var $7 = $d;
  var $8 = ___gmp_doprnt(___gmp_asprintf_funs, $7, $fmt, $ap);
  STACKTOP = __stackBase__;
  return $8;
}

function ___gmp_vfprintf($fp, $fmt, $ap) {
  var $1 = $fp;
  var $2 = ___gmp_doprnt(___gmp_fprintf_funs, $1, $fmt, $ap);
  return $2;
}

function ___gmp_vprintf($fmt, $ap) {
  var $2 = HEAP32[_stdout >> 2];
  var $3 = ___gmp_doprnt(___gmp_fprintf_funs, $2, $fmt, $ap);
  return $3;
}

function ___gmp_vsnprintf($buf, $size, $fmt, $ap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $d = __stackBase__;
  HEAP32[$d >> 2] = $buf;
  HEAP32[$d + 4 >> 2] = $size;
  var $3 = $d;
  var $4 = ___gmp_doprnt(___gmp_snprintf_funs, $3, $fmt, $ap);
  STACKTOP = __stackBase__;
  return $4;
}

function ___gmp_vsprintf($buf, $fmt, $ap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $1 = __stackBase__;
  HEAP32[$1 >> 2] = $buf;
  var $2 = $1;
  var $3 = ___gmp_doprnt(___gmp_sprintf_funs, $2, $fmt, $ap);
  STACKTOP = __stackBase__;
  return $3;
}

function ___gmp_randinit($rstate, $alg) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $ap = __stackBase__;
    HEAP32[$ap >> 2] = arguments[___gmp_randinit.length];
    if (($alg | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 3:
    var $3 = HEAP32[$ap >> 2];
    var $4 = $3;
    var $5 = $3 + 4 | 0;
    HEAP32[$ap >> 2] = $5;
    var $6 = HEAP32[$4 >> 2];
    var $7 = ___gmp_randinit_lc_2exp_size($rstate, $6);
    if (($7 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 4:
    var $11 = HEAP32[___gmp_errno >> 2] | 8;
    HEAP32[___gmp_errno >> 2] = $11;
    __label__ = 6;
    break;
   case 5:
    var $14 = HEAP32[___gmp_errno >> 2] | 1;
    HEAP32[___gmp_errno >> 2] = $14;
    __label__ = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_urandomb_ui($rstate, $bits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $1 = __stackBase__ | 0;
  HEAP32[$1 >> 2] = 0;
  var $6 = HEAP32[HEAP32[$rstate + 16 >> 2] + 4 >> 2];
  var $8 = $bits >>> 0 < 32 ? $bits : 32;
  FUNCTION_TABLE[$6]($rstate, $1, $8);
  var $9 = HEAP32[$1 >> 2];
  STACKTOP = __stackBase__;
  return $9;
}

function ___gmp_randclear($rstate) {
  var $5 = HEAP32[HEAP32[$rstate + 16 >> 2] + 8 >> 2];
  FUNCTION_TABLE[$5]($rstate);
  return;
}

function ___gmp_randinit_default($rstate) {
  ___gmp_randinit_mt($rstate);
  return;
}

function ___gmp_randinit_set($dst, $src) {
  var $5 = HEAP32[HEAP32[$src + 16 >> 2] + 12 >> 2];
  FUNCTION_TABLE[$5]($dst, $src);
  return;
}

function ___gmp_randinit_lc_2exp_size($rstate, $size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $a = __stackBase__;
    var $sp_0 = ___gmp_rand_lc_scheme | 0;
    __label__ = 3;
    break;
   case 3:
    var $sp_0;
    var $2 = $sp_0 | 0;
    var $3 = HEAPU32[$2 >> 2];
    if (($3 | 0) == 0) {
      var $_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if ($3 >>> 1 >>> 0 < $size >>> 0) {
      var $sp_0 = $sp_0 + 12 | 0;
      __label__ = 3;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $10 = $a | 0;
    var $12 = HEAP32[$sp_0 + 4 >> 2];
    var $13 = ___gmpz_init_set_str($10, $12, 16);
    var $15 = HEAP32[$sp_0 + 8 >> 2];
    var $16 = HEAP32[$2 >> 2];
    ___gmp_randinit_lc_2exp($rstate, $10, $15, $16);
    ___gmpz_clear($10);
    var $_0 = 1;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _randseed_lc($rstate, $seed) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$rstate + 8 >> 2];
    var $3 = $2;
    var $5 = HEAPU32[$2 + 32 >> 2];
    var $7 = ($5 + 31 | 0) >>> 5;
    ___gmpz_fdiv_r_2exp($3, $seed, $5);
    var $8 = $2 + 4 | 0;
    var $9 = HEAPU32[$8 >> 2];
    if (($7 | 0) == ($9 | 0)) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $scevgep1 = HEAP32[$2 + 8 >> 2] + ($9 << 2) | 0;
    var $15 = $7 - $9 << 2;
    _memset($scevgep1, 0, $15, 4);
    __label__ = 4;
    break;
   case 4:
    HEAP32[$8 >> 2] = $7;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _randget_lc($rstate, $rp, $nbits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $1 = $rstate + 8 | 0;
    var $2 = HEAP32[$1 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $5 = HEAPU32[$2 + 32 >> 2] >>> 1;
    var $6 = $5 + 31 | 0;
    var $7 = $6 >>> 5;
    var $9 = $6 >>> 3 & 268435452;
    if ($9 >>> 0 < 65536) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $12 = STACKTOP;
    STACKTOP += $9;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $16 = $12;
    __label__ = 5;
    break;
   case 4:
    var $14 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $9);
    var $16 = $14;
    __label__ = 5;
    break;
   case 5:
    var $16;
    var $17 = $16;
    if ($5 >>> 0 > $nbits >>> 0) {
      var $rbitpos_0_lcssa = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $19 = $5 & 31;
    var $rbitpos_03 = 0;
    var $21 = $5;
    __label__ = 7;
    break;
   case 7:
    var $21;
    var $rbitpos_03;
    var $22 = $rbitpos_03 >>> 5;
    var $23 = $rp + ($22 << 2) | 0;
    var $24 = $rbitpos_03 & 31;
    var $rstate_idx1_val = HEAPU32[$1 >> 2];
    if (($24 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    _lc($17, $rstate_idx1_val);
    var $27 = HEAP32[$23 >> 2];
    var $28 = ___gmpn_lshift($23, $17, $7, $24);
    var $30 = HEAP32[$23 >> 2] | $27;
    HEAP32[$23 >> 2] = $30;
    if (($24 + $19 | 0) >>> 0 > 32) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $33 = $21 + $5 | 0;
    if ($33 >>> 0 > $nbits >>> 0) {
      var $rbitpos_0_lcssa = $21;
      __label__ = 12;
      break;
    } else {
      var $rbitpos_03 = $21;
      var $21 = $33;
      __label__ = 7;
      break;
    }
   case 10:
    var $36 = $rp + ($22 + $7 << 2) | 0;
    HEAP32[$36 >> 2] = $28;
    __label__ = 9;
    break;
   case 11:
    _lc($23, $rstate_idx1_val);
    __label__ = 9;
    break;
   case 12:
    var $rbitpos_0_lcssa;
    if (($rbitpos_0_lcssa | 0) == ($nbits | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $40 = $rbitpos_0_lcssa >>> 5;
    var $41 = $rp + ($40 << 2) | 0;
    var $42 = $nbits - $rbitpos_0_lcssa | 0;
    var $44 = ($42 + 31 | 0) / 32 & -1;
    var $rstate_idx_val = HEAP32[$1 >> 2];
    _lc($17, $rstate_idx_val);
    var $45 = $rbitpos_0_lcssa & 31;
    if (($45 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $48 = HEAP32[$41 >> 2];
    var $49 = ___gmpn_lshift($41, $17, $44, $45);
    var $51 = HEAP32[$41 >> 2] | $48;
    HEAP32[$41 >> 2] = $51;
    if (($rbitpos_0_lcssa - $45 + ($44 << 5) | 0) >>> 0 < $nbits >>> 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 15:
    HEAP32[$rp + ($44 + $40 << 2) >> 2] = $49;
    __label__ = 22;
    break;
   case 16:
    if (($42 + 62 | 0) >>> 0 > 62) {
      __label__ = 17;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 17:
    var $61 = $44 - 1 | 0;
    var $62 = HEAP32[$17 >> 2];
    if (($61 | 0) == 0) {
      var $__x_1 = $62;
      var $__dst_1 = $41;
      __label__ = 21;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $67 = $44 + $40 - 1 | 0;
    var $__x_0 = $62;
    var $__src_0 = $16 + 4 | 0;
    var $__dst_0 = $41;
    var $__n_0 = $61;
    __label__ = 19;
    break;
   case 19:
    var $__n_0;
    var $__dst_0;
    var $__src_0;
    var $__x_0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    var $71 = HEAP32[$__src_0 >> 2];
    var $72 = $__n_0 - 1 | 0;
    if (($72 | 0) == 0) {
      __label__ = 20;
      break;
    } else {
      var $__x_0 = $71;
      var $__src_0 = $__src_0 + 4 | 0;
      var $__dst_0 = $__dst_0 + 4 | 0;
      var $__n_0 = $72;
      __label__ = 19;
      break;
    }
   case 20:
    var $__x_1 = $71;
    var $__dst_1 = $rp + ($67 << 2) | 0;
    __label__ = 21;
    break;
   case 21:
    var $__dst_1;
    var $__x_1;
    HEAP32[$__dst_1 >> 2] = $__x_1;
    __label__ = 22;
    break;
   case 22:
    var $76 = $nbits & 31;
    if (($76 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $82 = $rp + ($nbits >>> 5 << 2) | 0;
    var $84 = HEAP32[$82 >> 2] & (-1 << $76 ^ -1);
    HEAP32[$82 >> 2] = $84;
    __label__ = 24;
    break;
   case 24:
    var $85 = HEAP32[$__tmp_marker >> 2];
    if (($85 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    ___gmp_tmp_reentrant_free($85);
    __label__ = 26;
    break;
   case 26:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_randget_lc["X"] = 1;

function _randclear_lc($rstate) {
  var $2 = HEAP32[$rstate + 8 >> 2];
  var $3 = $2;
  ___gmpz_clear($3);
  var $5 = $2 + 12 | 0;
  ___gmpz_clear($5);
  var $6 = HEAP32[___gmp_free_func >> 2];
  var $7 = $2;
  FUNCTION_TABLE[$6]($7, 36);
  return;
}

function _randiset_lc($dst, $src) {
  var $2 = HEAP32[$src + 8 >> 2];
  var $3 = HEAP32[___gmp_allocate_func >> 2];
  var $4 = FUNCTION_TABLE[$3](36);
  var $5 = $4;
  HEAP32[$dst + 8 >> 2] = $5;
  HEAP32[$dst + 16 >> 2] = _Linear_Congruential_Generator;
  var $8 = $4;
  var $9 = $2;
  ___gmpz_init_set($8, $9);
  var $11 = $4 + 12 | 0;
  var $13 = $2 + 12 | 0;
  ___gmpz_init_set($11, $13);
  var $15 = HEAP32[$2 + 24 >> 2];
  var $17 = $4 + 24 | 0;
  HEAP32[$17 >> 2] = $15;
  var $19 = HEAP32[$2 + 28 >> 2];
  var $21 = $4 + 28 | 0;
  HEAP32[$21 >> 2] = $19;
  var $23 = HEAP32[$2 + 32 >> 2];
  var $25 = $4 + 32 | 0;
  HEAP32[$25 >> 2] = $23;
  return;
}

function _lc($rp, $rstate_0_0_0_2_val) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $__tmp_marker = __stackBase__;
    var $2 = HEAPU32[$rstate_0_0_0_2_val + 32 >> 2];
    var $4 = $rstate_0_0_0_2_val + 8 | 0;
    var $5 = HEAP32[$4 >> 2];
    var $7 = HEAPU32[$rstate_0_0_0_2_val + 4 >> 2];
    var $10 = HEAP32[$rstate_0_0_0_2_val + 20 >> 2];
    var $12 = HEAPU32[$rstate_0_0_0_2_val + 16 >> 2];
    HEAP32[$__tmp_marker >> 2] = 0;
    var $13 = $12 + $7 | 0;
    var $14 = $13 + 1 | 0;
    var $16 = ($2 + 31 | 0) >>> 5;
    if (($14 | 0) > ($16 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $19 = $16 + 1 | 0;
    var $20 = $19 << 2;
    if ($20 >>> 0 < 65536) {
      __label__ = 4;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 4:
    var $23 = STACKTOP;
    STACKTOP += $20;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $27 = $23;
    __label__ = 6;
    break;
   case 5:
    var $25 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $20);
    var $27 = $25;
    __label__ = 6;
    break;
   case 6:
    var $27;
    var $28 = $27;
    if (($19 | 0) == ($13 | 0)) {
      var $tp_0 = $28;
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 7:
    var $31 = $14 << 2;
    if ($31 >>> 0 < 65536) {
      __label__ = 8;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 8:
    var $34 = STACKTOP;
    STACKTOP += $31;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $38 = $34;
    __label__ = 10;
    break;
   case 9:
    var $36 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $31);
    var $38 = $36;
    __label__ = 10;
    break;
   case 10:
    var $38;
    var $tp_0 = $38;
    __label__ = 12;
    break;
   case 11:
    var $scevgep = $27 + ($13 << 2) | 0;
    var $42 = $19 - $13 << 2;
    _memset($scevgep, 0, $42, 4);
    var $tp_0 = $28;
    __label__ = 12;
    break;
   case 12:
    var $tp_0;
    var $44 = ___gmpn_mul($tp_0, $5, $7, $10, $12);
    var $46 = HEAP32[$rstate_0_0_0_2_val + 24 >> 2];
    if (($46 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $49 = $rstate_0_0_0_2_val + 28 | 0;
    var $50 = ___gmpn_add_n($tp_0, $tp_0, $49, $46);
    if (($50 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $__gmp_i_0 = $46;
      __label__ = 14;
      break;
    }
   case 14:
    var $__gmp_i_0;
    if (($__gmp_i_0 | 0) < ($16 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $54 = $tp_0 + ($__gmp_i_0 << 2) | 0;
    var $56 = HEAP32[$54 >> 2] + 1 | 0;
    HEAP32[$54 >> 2] = $56;
    if (($56 | 0) == 0) {
      var $__gmp_i_0 = $__gmp_i_0 + 1 | 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $63 = $tp_0 + ($2 >>> 5 << 2) | 0;
    var $65 = HEAP32[$63 >> 2] & (1 << ($2 & 31)) - 1;
    HEAP32[$63 >> 2] = $65;
    if (($16 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $68 = $16 - 1 | 0;
    var $69 = HEAPU32[$4 >> 2];
    var $70 = HEAPU32[$tp_0 >> 2];
    if (($68 | 0) == 0) {
      var $__x_1 = $70;
      var $__dst2_1 = $69;
      __label__ = 20;
      break;
    } else {
      var $__x_0 = $70;
      var $tp_0_pn1 = $tp_0;
      var $__dst2_0 = $69;
      var $__n1_0 = $68;
      __label__ = 18;
      break;
    }
   case 18:
    var $__n1_0;
    var $__dst2_0;
    var $tp_0_pn1;
    var $__x_0;
    var $__src_0 = $tp_0_pn1 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    var $73 = HEAP32[$__src_0 >> 2];
    var $74 = $__n1_0 - 1 | 0;
    if (($74 | 0) == 0) {
      __label__ = 19;
      break;
    } else {
      var $__x_0 = $73;
      var $tp_0_pn1 = $__src_0;
      var $__dst2_0 = $__dst2_0 + 4 | 0;
      var $__n1_0 = $74;
      __label__ = 18;
      break;
    }
   case 19:
    var $__x_1 = $73;
    var $__dst2_1 = $69 + ($68 << 2) | 0;
    __label__ = 20;
    break;
   case 20:
    var $__dst2_1;
    var $__x_1;
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    __label__ = 21;
    break;
   case 21:
    var $78 = $2 >>> 6;
    var $79 = $16 - $78 | 0;
    if (($79 | 0) > 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 22:
    var $83 = $2 >>> 1 & 31;
    if (($83 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $86 = $tp_0 + ($78 << 2) | 0;
    var $87 = ___gmpn_rshift($tp_0, $86, $79, $83);
    var $88 = HEAPU32[$tp_0 >> 2];
    if (($78 | 0) == 0) {
      var $__x6_1 = $88;
      var $__dst4_1 = $rp;
      __label__ = 26;
      break;
    } else {
      var $__x6_0 = $88;
      var $tp_0_pn = $tp_0;
      var $__dst4_0 = $rp;
      var $__n3_0 = $78;
      __label__ = 24;
      break;
    }
   case 24:
    var $__n3_0;
    var $__dst4_0;
    var $tp_0_pn;
    var $__x6_0;
    var $__src5_0 = $tp_0_pn + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    var $91 = HEAP32[$__src5_0 >> 2];
    var $92 = $__n3_0 - 1 | 0;
    if (($92 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      var $__x6_0 = $91;
      var $tp_0_pn = $__src5_0;
      var $__dst4_0 = $__dst4_0 + 4 | 0;
      var $__n3_0 = $92;
      __label__ = 24;
      break;
    }
   case 25:
    var $__x6_1 = $91;
    var $__dst4_1 = $rp + ($78 << 2) | 0;
    __label__ = 26;
    break;
   case 26:
    var $__dst4_1;
    var $__x6_1;
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    __label__ = 33;
    break;
   case 27:
    if (($16 | 0) == ($78 | 0)) {
      __label__ = 33;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $98 = $79 - 1 | 0;
    var $100 = HEAP32[$tp_0 + ($78 << 2) >> 2];
    if (($98 | 0) == 0) {
      var $__x10_1 = $100;
      var $__dst8_1 = $rp;
      __label__ = 32;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $104 = $16 - 1 - $78 | 0;
    var $__x10_0 = $100;
    var $__src9_0 = $tp_0 + ($78 + 1 << 2) | 0;
    var $__dst8_0 = $rp;
    var $__n7_0 = $98;
    __label__ = 30;
    break;
   case 30:
    var $__n7_0;
    var $__dst8_0;
    var $__src9_0;
    var $__x10_0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    var $108 = HEAP32[$__src9_0 >> 2];
    var $109 = $__n7_0 - 1 | 0;
    if (($109 | 0) == 0) {
      __label__ = 31;
      break;
    } else {
      var $__x10_0 = $108;
      var $__src9_0 = $__src9_0 + 4 | 0;
      var $__dst8_0 = $__dst8_0 + 4 | 0;
      var $__n7_0 = $109;
      __label__ = 30;
      break;
    }
   case 31:
    var $__x10_1 = $108;
    var $__dst8_1 = $rp + ($104 << 2) | 0;
    __label__ = 32;
    break;
   case 32:
    var $__dst8_1;
    var $__x10_1;
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    __label__ = 33;
    break;
   case 33:
    var $112 = HEAP32[$__tmp_marker >> 2];
    if (($112 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    ___gmp_tmp_reentrant_free($112);
    __label__ = 35;
    break;
   case 35:
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_lc["X"] = 1;

function ___gmp_randget_mt($rstate, $dest, $nbits) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = HEAPU32[$rstate + 8 >> 2];
    var $3 = $2 + 2496 | 0;
    var $4 = $nbits >>> 5;
    var $5 = $nbits & 31;
    if (($4 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $i_01 = 0;
      __label__ = 3;
      break;
    }
   case 3:
    var $i_01;
    var $7 = HEAPU32[$3 >> 2];
    if (($7 | 0) > 623) {
      __label__ = 4;
      break;
    } else {
      var $11 = $7;
      __label__ = 5;
      break;
    }
   case 4:
    ___gmp_mt_recalc_buffer($2);
    HEAP32[$3 >> 2] = 0;
    var $11 = 0;
    __label__ = 5;
    break;
   case 5:
    var $11;
    HEAP32[$3 >> 2] = $11 + 1 | 0;
    var $14 = HEAPU32[$2 + ($11 << 2) >> 2];
    var $16 = $14 >>> 11 ^ $14;
    var $19 = $16 << 7 & -1658038656 ^ $16;
    var $22 = $19 << 15 & -272236544 ^ $19;
    HEAP32[$dest + ($i_01 << 2) >> 2] = $22 >>> 18 ^ $22;
    var $26 = $i_01 + 1 | 0;
    if (($26 | 0) < ($4 | 0)) {
      var $i_01 = $26;
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($5 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $30 = HEAP32[$3 >> 2];
    if (($30 | 0) > 623) {
      __label__ = 8;
      break;
    } else {
      var $34 = $30;
      __label__ = 9;
      break;
    }
   case 8:
    ___gmp_mt_recalc_buffer($2);
    HEAP32[$3 >> 2] = 0;
    var $34 = 0;
    __label__ = 9;
    break;
   case 9:
    var $34;
    HEAP32[$3 >> 2] = $34 + 1 | 0;
    var $37 = HEAPU32[$2 + ($34 << 2) >> 2];
    var $39 = $37 >>> 11 ^ $37;
    var $42 = $39 << 7 & -1658038656 ^ $39;
    var $45 = $42 << 15 & -272236544 ^ $42;
    HEAP32[$dest + ($4 << 2) >> 2] = ($45 >>> 18 ^ $45) & (-1 << $5 ^ -1);
    __label__ = 10;
    break;
   case 10:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_randget_mt["X"] = 1;

function ___gmp_randinit_lc_2exp($rstate, $a, $c, $m2exp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $m2exp + 31 | 0;
    var $2 = $1 >>> 5;
    if (($m2exp | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_assert_fail(STRING_TABLE.__str529 | 0, 291, STRING_TABLE.__str1530 | 0);
    throw "Reached an unreachable!";
   case 4:
    var $6 = HEAP32[___gmp_allocate_func >> 2];
    var $7 = FUNCTION_TABLE[$6](36);
    var $8 = $7;
    HEAP32[$rstate + 8 >> 2] = $8;
    HEAP32[$rstate + 16 >> 2] = _Linear_Congruential_Generator;
    var $11 = $7;
    ___gmpz_init2($11, $m2exp);
    var $_pre1 = $7 + 8 | 0;
    if (($2 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $14 = HEAP32[$_pre1 >> 2];
    var $16 = $1 >>> 3 & 536870908;
    _memset($14, 0, $16, 4);
    __label__ = 6;
    break;
   case 6:
    var $18 = $7 + 4 | 0;
    HEAP32[$18 >> 2] = $2;
    var $19 = HEAP32[$_pre1 >> 2];
    HEAP32[$19 >> 2] = 1;
    var $21 = $7 + 12 | 0;
    ___gmpz_init($21);
    ___gmpz_fdiv_r_2exp($21, $a, $m2exp);
    var $23 = $7 + 16 | 0;
    if ((HEAP32[$23 >> 2] | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    HEAP32[$23 >> 2] = 1;
    var $29 = HEAP32[$7 + 20 >> 2];
    HEAP32[$29 >> 2] = 0;
    __label__ = 8;
    break;
   case 8:
    var $32 = $7 + 28 | 0;
    HEAP32[$32 >> 2] = $c;
    var $36 = $7 + 24 | 0;
    HEAP32[$36 >> 2] = ($c | 0) != 0 & 1;
    var $38 = $7 + 32 | 0;
    HEAP32[$38 >> 2] = $m2exp;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_randinit_lc_2exp["X"] = 1;

function ___gmp_randclear_mt($rstate) {
  var $1 = HEAP32[___gmp_free_func >> 2];
  var $4 = HEAP32[$rstate + 8 >> 2];
  var $7 = HEAP32[$rstate >> 2] << 2;
  FUNCTION_TABLE[$1]($4, $7);
  return;
}

function ___gmp_randiset_mt($dst, $src) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    HEAP32[$dst + 16 >> 2] = _Mersenne_Twister_Generator_Noseed;
    var $2 = HEAP32[___gmp_allocate_func >> 2];
    var $3 = FUNCTION_TABLE[$2](2500);
    var $4 = $3;
    HEAP32[$dst + 8 >> 2] = $4;
    HEAP32[$dst >> 2] = 625;
    var $8 = HEAP32[$src + 8 >> 2];
    var $9 = $3;
    var $i_01 = 0;
    __label__ = 3;
    break;
   case 3:
    var $i_01;
    var $12 = HEAP32[$8 + ($i_01 << 2) >> 2];
    var $13 = $9 + ($i_01 << 2) | 0;
    HEAP32[$13 >> 2] = $12;
    var $14 = $i_01 + 1 | 0;
    if (($14 | 0) == 624) {
      __label__ = 4;
      break;
    } else {
      var $i_01 = $14;
      __label__ = 3;
      break;
    }
   case 4:
    var $17 = HEAP32[$8 + 2496 >> 2];
    var $19 = $3 + 2496 | 0;
    HEAP32[$19 >> 2] = $17;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_randinit_mt_noseed($dst) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    HEAP32[$dst + 16 >> 2] = _Mersenne_Twister_Generator_Noseed;
    var $2 = HEAP32[___gmp_allocate_func >> 2];
    var $3 = FUNCTION_TABLE[$2](2500);
    var $4 = $3;
    HEAP32[$dst + 8 >> 2] = $4;
    HEAP32[$dst >> 2] = 625;
    var $7 = $3;
    var $i_01 = 0;
    __label__ = 3;
    break;
   case 3:
    var $i_01;
    var $10 = HEAP32[_default_state + ($i_01 << 2) >> 2];
    var $11 = $7 + ($i_01 << 2) | 0;
    HEAP32[$11 >> 2] = $10;
    var $12 = $i_01 + 1 | 0;
    if (($12 | 0) == 624) {
      __label__ = 4;
      break;
    } else {
      var $i_01 = $12;
      __label__ = 3;
      break;
    }
   case 4:
    var $15 = $3 + 2496 | 0;
    HEAP32[$15 >> 2] = 128;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_randinit_mt($rstate) {
  ___gmp_randinit_mt_noseed($rstate);
  HEAP32[$rstate + 16 >> 2] = _Mersenne_Twister_Generator;
  return;
}

function _randseed_mt($rstate, $seed) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $cnt = __stackBase__;
    var $seed1 = __stackBase__ + 16;
    var $2 = HEAPU32[$rstate + 8 >> 2];
    var $3 = __stackBase__ + 4 | 0;
    ___gmpz_init($3);
    var $4 = $seed1 | 0;
    ___gmpz_init($4);
    ___gmpz_set_ui($3, 0);
    ___gmpz_setbit($3, 19937);
    ___gmpz_sub_ui($3, $3, 20027);
    ___gmpz_mod($4, $seed, $3);
    ___gmpz_add_ui($4, $4, 2);
    _mangle_seed($4, $4);
    var $5 = ___gmpz_tstbit($4, 19936);
    var $7 = ($5 | 0) != 0 ? -2147483648 : 0;
    HEAP32[$2 >> 2] = $7;
    ___gmpz_clrbit($4, 19936);
    var $9 = $2 + 4 | 0;
    var $10 = ___gmpz_export($9, $cnt, -1, 4, 0, 0, $4);
    var $12 = HEAP32[$cnt >> 2] + 1 | 0;
    HEAP32[$cnt >> 2] = $12;
    if ($12 >>> 0 < 624) {
      var $14 = $12;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $14;
    HEAP32[$cnt >> 2] = $14 + 1 | 0;
    HEAP32[$2 + ($14 << 2) >> 2] = 0;
    var $_pr = HEAPU32[$cnt >> 2];
    if ($_pr >>> 0 < 624) {
      var $14 = $_pr;
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    ___gmpz_clear($3);
    ___gmpz_clear($4);
    ___gmp_mt_recalc_buffer($2);
    ___gmp_mt_recalc_buffer($2);
    ___gmp_mt_recalc_buffer($2);
    HEAP32[$2 + 2496 >> 2] = 128;
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mangle_seed($r, $b_orig) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $t = __stackBase__;
    var $b = __stackBase__ + 12;
    var $1 = $t | 0;
    ___gmpz_init($1);
    var $2 = $b | 0;
    ___gmpz_init_set($2, $b_orig);
    ___gmpz_set($r, $2);
    var $3 = $t + 4 | 0;
    var $bit_0 = 536870912;
    var $e_0 = 1074888996;
    __label__ = 3;
    break;
   case 3:
    var $e_0;
    var $bit_0;
    ___gmpz_mul($r, $r, $r);
    var $5 = $bit_0 ^ -1;
    var $e_1_ph = $e_0;
    __label__ = 4;
    break;
   case 4:
    var $e_1_ph;
    ___gmpz_tdiv_q_2exp($1, $r, 19937);
    if ((HEAP32[$3 >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    ___gmpz_tdiv_r_2exp($r, $r, 19937);
    ___gmpz_addmul_ui($r, $1, 20023);
    ___gmpz_tdiv_q_2exp($1, $r, 19937);
    if ((HEAP32[$3 >> 2] | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 6:
    if (($e_1_ph & $bit_0 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $13 = $e_1_ph & $5;
    ___gmpz_mul($r, $r, $2);
    var $e_1_ph = $13;
    __label__ = 4;
    break;
   case 8:
    var $15 = $bit_0 >>> 1;
    if (($15 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      var $bit_0 = $15;
      var $e_0 = $e_1_ph;
      __label__ = 3;
      break;
    }
   case 9:
    ___gmpz_clear($1);
    ___gmpz_clear($2);
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_randseed($rstate, $seed) {
  var $4 = HEAP32[HEAP32[$rstate + 16 >> 2] >> 2];
  FUNCTION_TABLE[$4]($rstate, $seed);
  return;
}

function ___gmp_randseed_ui($rstate, $seed) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var $zseed = __stackBase__;
  var $1 = __stackBase__ + 12 | 0;
  HEAP32[$1 >> 2] = $seed;
  var $2 = $zseed | 0;
  HEAP32[$zseed + 8 >> 2] = $1;
  HEAP32[$zseed + 4 >> 2] = ($seed | 0) != 0 & 1;
  ___gmp_randseed($rstate, $2);
  STACKTOP = __stackBase__;
  return;
}

function _skip_white($funs, $data) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $funs + 8 | 0;
    var $ret_0 = 0;
    __label__ = 3;
    break;
   case 3:
    var $ret_0;
    var $3 = HEAP32[$1 >> 2];
    var $4 = FUNCTION_TABLE[$3]($data);
    var $5 = $ret_0 + 1 | 0;
    var $6 = _isspace($4);
    if (($6 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $ret_0 = $5;
      __label__ = 3;
      break;
    }
   case 4:
    var $10 = HEAP32[$funs + 12 >> 2];
    var $11 = FUNCTION_TABLE[$10]($4, $data);
    return $ret_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_urandomm_ui($rstate, $n) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $a = __stackBase__;
    if (($n | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
    throw "Reached an unreachable!";
   case 4:
    var $4 = $a | 0;
    HEAP32[$4 >> 2] = 0;
    if ($n >>> 0 < 65536) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $8 = $n >>> 0 < 256 ? 1 : 9;
    var $13 = $8;
    __label__ = 7;
    break;
   case 6:
    var $11 = $n >>> 0 < 16777216 ? 17 : 25;
    var $13 = $11;
    __label__ = 7;
    break;
   case 7:
    var $13;
    var $15 = STRING_TABLE.___gmpn_clz_tab + ($n >>> ($13 >>> 0)) | 0;
    var $23 = ((($n - 1 & $n | 0) == 0) << 31 >> 31) - 1 + $13 + (HEAPU8[$15] & 255) | 0;
    var $24 = $rstate + 16 | 0;
    var $i_0 = 0;
    __label__ = 8;
    break;
   case 8:
    var $ret_0;
    var $i_0;
    if (($i_0 | 0) < 80) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $31 = HEAP32[HEAP32[$24 >> 2] + 4 >> 2];
    FUNCTION_TABLE[$31]($rstate, $4, $23);
    var $32 = HEAPU32[$4 >> 2];
    if ($32 >>> 0 < $n >>> 0) {
      var $ret_1 = $32;
      __label__ = 11;
      break;
    } else {
      var $i_0 = $i_0 + 1 | 0;
      var $ret_0 = $32;
      __label__ = 8;
      break;
    }
   case 10:
    var $ret_1 = $ret_0 - $n | 0;
    __label__ = 11;
    break;
   case 11:
    var $ret_1;
    STACKTOP = __stackBase__;
    return $ret_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function ___gmp_doscan($funs, $data, $orig_fmt, $orig_ap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __stackBase__;
    var $param = __stackBase__ + 4;
    var $ap = __stackBase__ + 20;
    var $new_chars = __stackBase__ + 24;
    HEAP32[$1 >> 2] = $orig_ap;
    var $2 = $ap;
    var $3 = $1;
    _llvm_va_copy($2, $3);
    var $4 = _strlen($orig_fmt);
    var $5 = $4 + 4 | 0;
    var $6 = HEAP32[___gmp_allocate_func >> 2];
    var $7 = FUNCTION_TABLE[$6]($5);
    var $8 = $param + 8 | 0;
    var $9 = $param | 0;
    var $10 = $param + 4 | 0;
    var $11 = $param + 12 | 0;
    var $12 = $funs | 0;
    var $13 = $funs + 4 | 0;
    var $14 = $funs + 8 | 0;
    var $chars_0 = 0;
    var $fields_0 = 0;
    var $fmt_0 = $orig_fmt;
    __label__ = 3;
    break;
   case 3:
    var $fmt_0;
    var $fields_0;
    var $chars_0;
    var $15 = $fmt_0 + 1 | 0;
    var $16 = HEAP8[$fmt_0];
    if ($16 << 24 >> 24 == 0) {
      var $fields_1 = $fields_0;
      __label__ = 57;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $19 = $16 << 24 >> 24;
    var $20 = _isspace($19);
    if (($20 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $23 = _skip_white($funs, $data);
    var $chars_0 = $23 + $chars_0 | 0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $15;
    __label__ = 3;
    break;
   case 6:
    if ($16 << 24 >> 24 == 37) {
      __label__ = 12;
      break;
    } else {
      var $fchar_0 = $16;
      var $fmt_1 = $15;
      __label__ = 7;
      break;
    }
   case 7:
    var $fmt_1;
    var $fchar_0;
    var $27 = HEAP32[$14 >> 2];
    var $28 = FUNCTION_TABLE[$27]($data);
    if (($28 | 0) == ($fchar_0 << 24 >> 24 | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $33 = HEAP32[$funs + 12 >> 2];
    var $34 = FUNCTION_TABLE[$33]($28, $data);
    if (($28 | 0) == -1 & ($fields_0 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $fields_1 = $fields_0;
      __label__ = 57;
      break;
    }
   case 9:
    if (($fields_0 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      var $fields_1 = $fields_0;
      __label__ = 57;
      break;
    }
   case 10:
    var $fields_1 = -1;
    __label__ = 57;
    break;
   case 11:
    var $chars_0 = $chars_0 + 1 | 0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $fmt_1;
    __label__ = 3;
    break;
   case 12:
    HEAP8[$8] = 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$10 >> 2] = 0;
    HEAP32[$11 >> 2] = 0;
    var $fmt_2 = $15;
    var $43 = 0;
    var $42 = 0;
    __label__ = 13;
    break;
   case 13:
    var $42;
    var $43;
    var $fmt_2;
    var $44 = $fmt_2 + 1 | 0;
    var $45 = HEAPU8[$fmt_2];
    var $46 = $45 << 24 >> 24;
    if (($46 | 0) == 37) {
      var $fchar_0 = $45;
      var $fmt_1 = $44;
      __label__ = 7;
      break;
    } else if (($46 | 0) == 97 || ($46 | 0) == 39) {
      var $fmt_2 = $44;
      var $43 = $43;
      var $42 = $42;
      __label__ = 13;
      break;
    } else if (($46 | 0) == 91) {
      __label__ = 14;
      break;
    } else if (($46 | 0) == 99 || ($46 | 0) == 115 || ($46 | 0) == 112) {
      var $fmt_5 = $44;
      __label__ = 20;
      break;
    } else if (($46 | 0) == 100 || ($46 | 0) == 117) {
      __label__ = 27;
      break;
    } else if (($46 | 0) == 101 || ($46 | 0) == 69 || ($46 | 0) == 102 || ($46 | 0) == 103 || ($46 | 0) == 71 || ($46 | 0) == 105) {
      __label__ = 28;
      break;
    } else if (($46 | 0) == 70 || ($46 | 0) == 106 || ($46 | 0) == 76 || ($46 | 0) == 113 || ($46 | 0) == 81 || ($46 | 0) == 116 || ($46 | 0) == 122 || ($46 | 0) == 90) {
      __label__ = 33;
      break;
    } else if (($46 | 0) == 104) {
      __label__ = 34;
      break;
    } else if (($46 | 0) == 108) {
      __label__ = 36;
      break;
    } else if (($46 | 0) == 110) {
      __label__ = 38;
      break;
    } else if (($46 | 0) == 111) {
      __label__ = 52;
      break;
    } else if (($46 | 0) == 120 || ($46 | 0) == 88) {
      __label__ = 53;
      break;
    } else if (($46 | 0) == 48 || ($46 | 0) == 49 || ($46 | 0) == 50 || ($46 | 0) == 51 || ($46 | 0) == 52 || ($46 | 0) == 53 || ($46 | 0) == 54 || ($46 | 0) == 55 || ($46 | 0) == 56 || ($46 | 0) == 57) {
      __label__ = 54;
      break;
    } else if (($46 | 0) == 42) {
      __label__ = 56;
      break;
    } else if (($46 | 0) == 0) {
      var $fields_1 = $fields_0;
      __label__ = 57;
      break;
    } else {
      var $chars_0 = $chars_0;
      var $fields_0 = $fields_0;
      var $fmt_0 = $44;
      __label__ = 3;
      break;
    }
   case 14:
    var $48 = $fmt_2 + 2 | 0;
    var $49 = HEAP8[$44];
    if ($49 << 24 >> 24 == 94) {
      __label__ = 15;
      break;
    } else {
      var $fchar_1 = $49;
      var $fmt_3 = $48;
      __label__ = 16;
      break;
    }
   case 15:
    var $fchar_1 = HEAP8[$48];
    var $fmt_3 = $fmt_2 + 3 | 0;
    __label__ = 16;
    break;
   case 16:
    var $fmt_3;
    var $fchar_1;
    if ($fchar_1 << 24 >> 24 == 93) {
      __label__ = 17;
      break;
    } else {
      var $fchar_2 = $fchar_1;
      var $fmt_4 = $fmt_3;
      __label__ = 18;
      break;
    }
   case 17:
    var $fchar_2 = HEAP8[$fmt_3];
    var $fmt_4 = $fmt_3 + 1 | 0;
    __label__ = 18;
    break;
   case 18:
    var $fmt_4;
    var $fchar_2;
    if ($fchar_2 << 24 >> 24 == 93) {
      var $fmt_5 = $fmt_4;
      __label__ = 20;
      break;
    } else if ($fchar_2 << 24 >> 24 == 0) {
      var $fields_1 = $fields_0;
      __label__ = 57;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $fchar_2 = HEAP8[$fmt_4];
    var $fmt_4 = $fmt_4 + 1 | 0;
    __label__ = 18;
    break;
   case 20:
    var $fmt_5;
    var $64 = $fmt_5 - $fmt_0 | 0;
    _memcpy($7, $fmt_0, $64, 1);
    HEAP8[$7 + $64 | 0] = 37;
    HEAP8[$7 + ($64 + 1) | 0] = 110;
    HEAP8[$7 + ($64 + 2) | 0] = 0;
    HEAP32[$new_chars >> 2] = -1;
    if (($43 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $72 = HEAP32[$12 >> 2];
    var $73 = FUNCTION_TABLE[$72]($data, $7, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $new_chars, HEAP32[tempInt + 4 >> 2] = 0, tempInt));
    var $new_fields_0 = $73;
    __label__ = 23;
    break;
   case 22:
    var $75 = HEAP32[$ap >> 2];
    var $76 = $75;
    var $77 = $75 + 4 | 0;
    HEAP32[$ap >> 2] = $77;
    var $78 = HEAP32[$76 >> 2];
    var $79 = HEAP32[$12 >> 2];
    var $80 = FUNCTION_TABLE[$79]($data, $7, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $78, HEAP32[tempInt + 4 >> 2] = $new_chars, tempInt));
    if (($80 | 0) == 0) {
      var $fields_1 = $fields_0;
      __label__ = 57;
      break;
    } else {
      var $new_fields_0 = $80;
      __label__ = 23;
      break;
    }
   case 23:
    var $new_fields_0;
    if (($new_fields_0 | 0) == -1) {
      __label__ = 9;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $85 = HEAP32[$new_chars >> 2];
    if (($85 | 0) == -1) {
      var $fields_1 = $fields_0;
      __label__ = 57;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    var $88 = $85 + $chars_0 | 0;
    var $89 = HEAP32[$13 >> 2];
    var $90 = FUNCTION_TABLE[$89]($data, $85);
    var $chars_1 = $88;
    var $fmt_6 = $fmt_5;
    var $92 = $43;
    __label__ = 26;
    break;
   case 26:
    var $92;
    var $fmt_6;
    var $chars_1;
    var $chars_0 = $chars_1;
    var $fields_0 = (($92 | 0) == 0 & 1) + $fields_0 | 0;
    var $fmt_0 = $fmt_6;
    __label__ = 3;
    break;
   case 27:
    HEAP32[$9 >> 2] = 10;
    __label__ = 28;
    break;
   case 28:
    if ($42 << 24 >> 24 == 70 || $42 << 24 >> 24 == 81 || $42 << 24 >> 24 == 90) {
      __label__ = 29;
      break;
    } else {
      var $fmt_5 = $44;
      __label__ = 20;
      break;
    }
   case 29:
    var $97 = _skip_white($funs, $data);
    if (($43 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      var $105 = 0;
      __label__ = 31;
      break;
    }
   case 30:
    var $100 = HEAP32[$ap >> 2];
    var $101 = $100;
    var $102 = $100 + 4 | 0;
    HEAP32[$ap >> 2] = $102;
    var $105 = HEAP32[$101 >> 2];
    __label__ = 31;
    break;
   case 31:
    var $105;
    var $106 = _gmpscan($funs, $data, $param, $105);
    HEAP32[$new_chars >> 2] = $106;
    if (($106 | 0) == -2) {
      __label__ = 9;
      break;
    } else if (($106 | 0) == -1) {
      var $fields_1 = $fields_0;
      __label__ = 57;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $chars_1 = $97 + $chars_0 + $106 | 0;
    var $fmt_6 = $44;
    var $92 = HEAP32[$10 >> 2];
    __label__ = 26;
    break;
   case 33:
    HEAP8[$8] = $45;
    var $fmt_2 = $44;
    var $43 = $43;
    var $42 = $45;
    __label__ = 13;
    break;
   case 34:
    if ($42 << 24 >> 24 == 104) {
      __label__ = 35;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 35:
    HEAP8[$8] = 72;
    var $fmt_2 = $44;
    var $43 = $43;
    var $42 = 72;
    __label__ = 13;
    break;
   case 36:
    if ($42 << 24 >> 24 == 108) {
      __label__ = 37;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 37:
    HEAP8[$8] = 76;
    var $fmt_2 = $44;
    var $43 = $43;
    var $42 = 76;
    __label__ = 13;
    break;
   case 38:
    if (($43 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      var $chars_0 = $chars_0;
      var $fields_0 = $fields_0;
      var $fmt_0 = $44;
      __label__ = 3;
      break;
    }
   case 39:
    var $120 = HEAP32[$ap >> 2];
    var $121 = $120;
    var $122 = $120 + 4 | 0;
    HEAP32[$ap >> 2] = $122;
    var $123 = HEAPU32[$121 >> 2];
    var $124 = $42 << 24 >> 24;
    if (($124 | 0) == 0) {
      __label__ = 40;
      break;
    } else if (($124 | 0) == 70) {
      __label__ = 41;
      break;
    } else if (($124 | 0) == 72) {
      __label__ = 42;
      break;
    } else if (($124 | 0) == 104) {
      __label__ = 43;
      break;
    } else if (($124 | 0) == 106) {
      __label__ = 44;
      break;
    } else if (($124 | 0) == 108) {
      __label__ = 45;
      break;
    } else if (($124 | 0) == 113) {
      __label__ = 46;
      break;
    } else if (($124 | 0) == 76) {
      __label__ = 47;
      break;
    } else if (($124 | 0) == 81) {
      __label__ = 48;
      break;
    } else if (($124 | 0) == 116) {
      __label__ = 49;
      break;
    } else if (($124 | 0) == 122) {
      __label__ = 50;
      break;
    } else if (($124 | 0) == 90) {
      __label__ = 51;
      break;
    } else {
      var $chars_0 = $chars_0;
      var $fields_0 = $fields_0;
      var $fmt_0 = $44;
      __label__ = 3;
      break;
    }
   case 40:
    var $126 = $123;
    HEAP32[$126 >> 2] = $chars_0;
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 41:
    var $128 = $123;
    ___gmpf_set_si($128, $chars_0);
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 42:
    HEAP8[$123] = $chars_0 & 255;
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 43:
    HEAP16[$123 >> 1] = $chars_0 & 65535;
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 44:
    var $135$1 = ($chars_0 | 0) < 0 ? -1 : 0;
    var $136 = $123;
    var $st$3$0 = $136 | 0;
    HEAP32[$st$3$0 >> 2] = $chars_0;
    var $st$3$1 = $136 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $135$1;
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 45:
    var $138 = $123;
    HEAP32[$138 >> 2] = $chars_0;
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 46:
    ___gmp_assert_fail(STRING_TABLE.__str541 | 0, 708, STRING_TABLE.__str1542 | 0);
    throw "Reached an unreachable!";
   case 47:
    ___gmp_assert_fail(STRING_TABLE.__str541 | 0, 713, STRING_TABLE.__str2543 | 0);
    throw "Reached an unreachable!";
   case 48:
    var $142 = $123;
    ___gmpq_set_si($142, $chars_0, 1);
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 49:
    var $144 = $123;
    HEAP32[$144 >> 2] = $chars_0;
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 50:
    var $146 = $123;
    HEAP32[$146 >> 2] = $chars_0;
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 51:
    var $148 = $123;
    ___gmpz_set_si($148, $chars_0);
    var $chars_0 = $chars_0;
    var $fields_0 = $fields_0;
    var $fmt_0 = $44;
    __label__ = 3;
    break;
   case 52:
    HEAP32[$9 >> 2] = 8;
    __label__ = 28;
    break;
   case 53:
    HEAP32[$9 >> 2] = 16;
    __label__ = 28;
    break;
   case 54:
    HEAP32[$11 >> 2] = 0;
    var $fchar_3 = $45;
    var $fmt_7 = $44;
    var $153 = 0;
    __label__ = 55;
    break;
   case 55:
    var $153;
    var $fmt_7;
    var $fchar_3;
    var $154 = (i64Math.multiply($153, 0, 10, 0), i64Math.result[0]);
    var $157 = ($fchar_3 << 24 >> 24) - 48 + $154 | 0;
    HEAP32[$11 >> 2] = $157;
    var $159 = HEAPU8[$fmt_7];
    if ((($159 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
      var $fchar_3 = $159;
      var $fmt_7 = $fmt_7 + 1 | 0;
      var $153 = $157;
      __label__ = 55;
      break;
    } else {
      var $fmt_2 = $fmt_7;
      var $43 = $43;
      var $42 = $42;
      __label__ = 13;
      break;
    }
   case 56:
    HEAP32[$10 >> 2] = 1;
    var $fmt_2 = $44;
    var $43 = 1;
    var $42 = $42;
    __label__ = 13;
    break;
   case 57:
    var $fields_1;
    var $162 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$162]($7, $5);
    STACKTOP = __stackBase__;
    return $fields_1;
   default:
    assert(0, "bad label: " + __label__);
  }
}

___gmp_doscan["X"] = 1;

function _step($fp, $n) {
  return;
}

function _step548($sp, $n) {
  var $2 = HEAP32[$sp >> 2] + $n | 0;
  HEAP32[$sp >> 2] = $2;
  return;
}

function _get($sp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAPU32[$sp >> 2];
    var $2 = HEAPU8[$1];
    if ($2 << 24 >> 24 == 0) {
      var $_0 = -1;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = $2 & 255;
    HEAP32[$sp >> 2] = $1 + 1 | 0;
    var $_0 = $5;
    __label__ = 4;
    break;
   case 4:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _unget($c, $sp) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($c | 0) == -1) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $4 = HEAP32[$sp >> 2] - 1 | 0;
    HEAP32[$sp >> 2] = $4;
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _gmpscan($funs, $data, $p, $dst) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $dummy = __stackBase__;
    var $1 = $funs + 8 | 0;
    var $2 = HEAP32[$1 >> 2];
    var $3 = FUNCTION_TABLE[$2]($data);
    if (($3 | 0) == -1) {
      __label__ = 69;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $7 = HEAP32[$p + 12 >> 2];
    var $_ = ($7 | 0) == 0 ? 2147483646 : $7;
    var $9 = $p | 0;
    var $10 = HEAP32[$9 >> 2];
    var $11 = HEAP32[___gmp_allocate_func >> 2];
    var $12 = FUNCTION_TABLE[$11](512);
    var $13 = $p + 8 | 0;
    var $s_0 = $12;
    var $chars_0 = 1;
    var $c_0 = $3;
    var $base_0 = $10;
    var $first_0 = 1;
    var $hexexp_0 = 0;
    var $seen_point_0 = 0;
    var $hexfloat_0 = 0;
    var $s_upto_0 = 0;
    var $s_alloc_0 = 512;
    __label__ = 4;
    break;
   case 4:
    var $s_alloc_0;
    var $s_upto_0;
    var $hexfloat_0;
    var $seen_point_0;
    var $hexexp_0;
    var $first_0;
    var $base_0;
    var $c_0;
    var $chars_0;
    var $s_0;
    if (($c_0 | 0) == 45) {
      __label__ = 5;
      break;
    } else if (($c_0 | 0) == 43) {
      var $s_2 = $s_0;
      var $s_upto_1 = $s_upto_0;
      var $s_alloc_2 = $s_alloc_0;
      __label__ = 8;
      break;
    } else {
      var $s_3 = $s_0;
      var $chars_1 = $chars_0;
      var $c_1 = $c_0;
      var $s_upto_2 = $s_upto_0;
      var $s_alloc_3 = $s_alloc_0;
      __label__ = 10;
      break;
    }
   case 5:
    if ($s_upto_0 >>> 0 < $s_alloc_0 >>> 0) {
      var $s_1 = $s_0;
      var $s_alloc_1 = $s_alloc_0;
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $18 = $s_alloc_0 + 512 | 0;
    var $19 = HEAP32[___gmp_reallocate_func >> 2];
    var $20 = FUNCTION_TABLE[$19]($s_0, $s_alloc_0, $18);
    var $s_1 = $20;
    var $s_alloc_1 = $18;
    __label__ = 7;
    break;
   case 7:
    var $s_alloc_1;
    var $s_1;
    HEAP8[$s_1 + $s_upto_0 | 0] = 45;
    var $s_2 = $s_1;
    var $s_upto_1 = $s_upto_0 + 1 | 0;
    var $s_alloc_2 = $s_alloc_1;
    __label__ = 8;
    break;
   case 8:
    var $s_alloc_2;
    var $s_upto_1;
    var $s_2;
    var $25 = $chars_0 + 1 | 0;
    if (($25 | 0) > ($_ | 0)) {
      var $invalid_0 = 1;
      var $s_15 = $s_2;
      var $chars_6 = $25;
      var $c_6 = $c_0;
      var $s_alloc_15 = $s_alloc_2;
      __label__ = 66;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $28 = HEAP32[$1 >> 2];
    var $29 = FUNCTION_TABLE[$28]($data);
    var $s_3 = $s_2;
    var $chars_1 = $25;
    var $c_1 = $29;
    var $s_upto_2 = $s_upto_1;
    var $s_alloc_3 = $s_alloc_2;
    __label__ = 10;
    break;
   case 10:
    var $s_alloc_3;
    var $s_upto_2;
    var $c_1;
    var $chars_1;
    var $s_3;
    if (($base_0 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      var $s_7_ph = $s_3;
      var $chars_2_ph = $chars_1;
      var $c_2_ph = $c_1;
      var $base_2_ph = $base_0;
      var $seen_digit_0_ph = 0;
      var $hexfloat_2_ph = $hexfloat_0;
      var $s_upto_4_ph = $s_upto_2;
      var $s_alloc_7_ph = $s_alloc_3;
      __label__ = 22;
      break;
    }
   case 11:
    if (($c_1 | 0) == 48) {
      __label__ = 12;
      break;
    } else {
      var $s_7_ph = $s_3;
      var $chars_2_ph = $chars_1;
      var $c_2_ph = $c_1;
      var $base_2_ph = 10;
      var $seen_digit_0_ph = 0;
      var $hexfloat_2_ph = $hexfloat_0;
      var $s_upto_4_ph = $s_upto_2;
      var $s_alloc_7_ph = $s_alloc_3;
      __label__ = 22;
      break;
    }
   case 12:
    var $_8 = HEAP8[$13] << 24 >> 24 == 70 ? 10 : 8;
    if ($s_upto_2 >>> 0 < $s_alloc_3 >>> 0) {
      var $s_4 = $s_3;
      var $s_alloc_4 = $s_alloc_3;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $39 = $s_alloc_3 + 512 | 0;
    var $40 = HEAP32[___gmp_reallocate_func >> 2];
    var $41 = FUNCTION_TABLE[$40]($s_3, $s_alloc_3, $39);
    var $s_4 = $41;
    var $s_alloc_4 = $39;
    __label__ = 14;
    break;
   case 14:
    var $s_alloc_4;
    var $s_4;
    var $43 = $s_upto_2 + 1 | 0;
    HEAP8[$s_4 + $s_upto_2 | 0] = 48;
    var $45 = $chars_1 + 1 | 0;
    if (($45 | 0) > ($_ | 0)) {
      var $s_alloc_1220 = $s_alloc_4;
      var $s_upto_621 = $43;
      var $hexfloat_322 = $hexfloat_0;
      var $hexexp_323 = $hexexp_0;
      var $c_424 = 48;
      var $chars_425 = $45;
      var $s_1226 = $s_4;
      __label__ = 55;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $48 = HEAP32[$1 >> 2];
    var $49 = FUNCTION_TABLE[$48]($data);
    if (($49 | 0) == 120 || ($49 | 0) == 88) {
      __label__ = 16;
      break;
    } else {
      var $s_7_ph = $s_4;
      var $chars_2_ph = $45;
      var $c_2_ph = $49;
      var $base_2_ph = $_8;
      var $seen_digit_0_ph = 1;
      var $hexfloat_2_ph = $hexfloat_0;
      var $s_upto_4_ph = $43;
      var $s_alloc_7_ph = $s_alloc_4;
      __label__ = 22;
      break;
    }
   case 16:
    if (HEAP8[$13] << 24 >> 24 == 70) {
      var $s_6 = $s_4;
      var $hexfloat_1 = 1;
      var $s_upto_3 = $43;
      var $s_alloc_6 = $s_alloc_4;
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if ($43 >>> 0 < $s_alloc_4 >>> 0) {
      var $s_5 = $s_4;
      var $s_alloc_5 = $s_alloc_4;
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $56 = $s_alloc_4 + 512 | 0;
    var $57 = HEAP32[___gmp_reallocate_func >> 2];
    var $58 = FUNCTION_TABLE[$57]($s_4, $s_alloc_4, $56);
    var $s_5 = $58;
    var $s_alloc_5 = $56;
    __label__ = 19;
    break;
   case 19:
    var $s_alloc_5;
    var $s_5;
    HEAP8[$s_5 + $43 | 0] = $49 & 255;
    var $s_6 = $s_5;
    var $hexfloat_1 = $hexfloat_0;
    var $s_upto_3 = $s_upto_2 + 2 | 0;
    var $s_alloc_6 = $s_alloc_5;
    __label__ = 20;
    break;
   case 20:
    var $s_alloc_6;
    var $s_upto_3;
    var $hexfloat_1;
    var $s_6;
    var $64 = $chars_1 + 2 | 0;
    if (($64 | 0) > ($_ | 0)) {
      var $invalid_0 = 1;
      var $s_15 = $s_6;
      var $chars_6 = $64;
      var $c_6 = $49;
      var $s_alloc_15 = $s_alloc_6;
      __label__ = 66;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $67 = HEAP32[$1 >> 2];
    var $68 = FUNCTION_TABLE[$67]($data);
    var $s_7_ph = $s_6;
    var $chars_2_ph = $64;
    var $c_2_ph = $68;
    var $base_2_ph = 16;
    var $seen_digit_0_ph = 0;
    var $hexfloat_2_ph = $hexfloat_1;
    var $s_upto_4_ph = $s_upto_3;
    var $s_alloc_7_ph = $s_alloc_6;
    __label__ = 22;
    break;
   case 22:
    var $s_alloc_7_ph;
    var $s_upto_4_ph;
    var $hexfloat_2_ph;
    var $seen_digit_0_ph;
    var $base_2_ph;
    var $c_2_ph;
    var $chars_2_ph;
    var $s_7_ph;
    var $69 = ($base_2_ph | 0) == 16;
    var $70 = ($first_0 | 0) == 0;
    var $71 = ($base_2_ph | 0) == 8;
    var $s_7_ph50 = $s_7_ph;
    var $chars_2_ph49 = $chars_2_ph;
    var $c_2_ph48 = $c_2_ph;
    var $seen_point_1_ph = $seen_point_0;
    var $seen_digit_0_ph46 = $seen_digit_0_ph;
    var $s_upto_4_ph45 = $s_upto_4_ph;
    var $s_alloc_7_ph44 = $s_alloc_7_ph;
    __label__ = 32;
    break;
   case 23:
    var $s_alloc_7;
    var $s_upto_4;
    var $seen_point_1;
    var $c_2;
    var $chars_2;
    var $s_7;
    if ($69) {
      __label__ = 24;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 24:
    var $73 = _isxdigit($c_2);
    if (($73 | 0) == 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 25:
    if (($c_2 - 48 | 0) >>> 0 < 10) {
      __label__ = 26;
      break;
    } else {
      __label__ = 33;
      break;
    }
   case 26:
    if ($71) {
      __label__ = 27;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 27:
    if (($c_2 - 56 | 0) >>> 0 < 2) {
      __label__ = 33;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    if ($s_upto_4 >>> 0 < $s_alloc_7 >>> 0) {
      var $s_8 = $s_7;
      var $s_alloc_8 = $s_alloc_7;
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $82 = $s_alloc_7 + 512 | 0;
    var $83 = HEAP32[___gmp_reallocate_func >> 2];
    var $84 = FUNCTION_TABLE[$83]($s_7, $s_alloc_7, $82);
    var $s_8 = $84;
    var $s_alloc_8 = $82;
    __label__ = 30;
    break;
   case 30:
    var $s_alloc_8;
    var $s_8;
    var $87 = $s_upto_4 + 1 | 0;
    HEAP8[$s_8 + $s_upto_4 | 0] = $c_2 & 255;
    var $89 = $chars_2 + 1 | 0;
    if (($89 | 0) > ($_ | 0)) {
      var $s_alloc_1220 = $s_alloc_8;
      var $s_upto_621 = $87;
      var $hexfloat_322 = $hexfloat_2_ph;
      var $hexexp_323 = $hexexp_0;
      var $c_424 = $c_2;
      var $chars_425 = $89;
      var $s_1226 = $s_8;
      __label__ = 55;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    var $92 = HEAP32[$1 >> 2];
    var $93 = FUNCTION_TABLE[$92]($data);
    var $s_7_ph50 = $s_8;
    var $chars_2_ph49 = $89;
    var $c_2_ph48 = $93;
    var $seen_point_1_ph = $seen_point_1;
    var $seen_digit_0_ph46 = 1;
    var $s_upto_4_ph45 = $87;
    var $s_alloc_7_ph44 = $s_alloc_8;
    __label__ = 32;
    break;
   case 32:
    var $s_alloc_7_ph44;
    var $s_upto_4_ph45;
    var $seen_digit_0_ph46;
    var $seen_point_1_ph;
    var $c_2_ph48;
    var $chars_2_ph49;
    var $s_7_ph50;
    var $s_7 = $s_7_ph50;
    var $chars_2 = $chars_2_ph49;
    var $c_2 = $c_2_ph48;
    var $seen_point_1 = $seen_point_1_ph;
    var $s_upto_4 = $s_upto_4_ph45;
    var $s_alloc_7 = $s_alloc_7_ph44;
    __label__ = 23;
    break;
   case 33:
    if ($70) {
      var $s_12 = $s_7;
      var $chars_4 = $chars_2;
      var $c_4 = $c_2;
      var $hexexp_3 = $hexexp_0;
      var $seen_digit_2 = $seen_digit_0_ph46;
      var $s_upto_6 = $s_upto_4;
      var $s_alloc_12 = $s_alloc_7;
      __label__ = 54;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $96 = HEAPU8[$13];
    if ($96 << 24 >> 24 == 70 & ($seen_point_1 | 0) == 0) {
      __label__ = 35;
      break;
    } else {
      var $123 = $96;
      __label__ = 42;
      break;
    }
   case 35:
    var $100 = _nl_langinfo(50);
    if (($c_2 | 0) == (HEAPU8[$100] & 255 | 0)) {
      var $_pn = $100;
      var $s_9 = $s_7;
      var $chars_3 = $chars_2;
      var $c_3 = $c_2;
      var $s_upto_5 = $s_upto_4;
      var $s_alloc_9 = $s_alloc_7;
      __label__ = 36;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 36:
    var $s_alloc_9;
    var $s_upto_5;
    var $c_3;
    var $chars_3;
    var $s_9;
    var $_pn;
    var $point_0 = $_pn + 1 | 0;
    if ($s_upto_5 >>> 0 < $s_alloc_9 >>> 0) {
      var $s_10 = $s_9;
      var $s_alloc_10 = $s_alloc_9;
      __label__ = 38;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    var $106 = $s_alloc_9 + 512 | 0;
    var $107 = HEAP32[___gmp_reallocate_func >> 2];
    var $108 = FUNCTION_TABLE[$107]($s_9, $s_alloc_9, $106);
    var $s_10 = $108;
    var $s_alloc_10 = $106;
    __label__ = 38;
    break;
   case 38:
    var $s_alloc_10;
    var $s_10;
    var $111 = $s_upto_5 + 1 | 0;
    HEAP8[$s_10 + $s_upto_5 | 0] = $c_3 & 255;
    var $113 = $chars_3 + 1 | 0;
    if (($113 | 0) > ($_ | 0)) {
      var $s_12 = $s_10;
      var $chars_4 = $113;
      var $c_4 = $c_3;
      var $hexexp_3 = $hexexp_0;
      var $seen_digit_2 = $seen_digit_0_ph46;
      var $s_upto_6 = $111;
      var $s_alloc_12 = $s_alloc_10;
      __label__ = 54;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    var $116 = HEAP32[$1 >> 2];
    var $117 = FUNCTION_TABLE[$116]($data);
    var $118 = HEAPU8[$point_0];
    if ($118 << 24 >> 24 == 0) {
      var $s_7 = $s_10;
      var $chars_2 = $113;
      var $c_2 = $117;
      var $seen_point_1 = 1;
      var $s_upto_4 = $111;
      var $s_alloc_7 = $s_alloc_10;
      __label__ = 23;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    if (($117 | 0) == ($118 & 255 | 0)) {
      var $_pn = $point_0;
      var $s_9 = $s_10;
      var $chars_3 = $113;
      var $c_3 = $117;
      var $s_upto_5 = $111;
      var $s_alloc_9 = $s_alloc_10;
      __label__ = 36;
      break;
    } else {
      var $invalid_0 = 1;
      var $s_15 = $s_10;
      var $chars_6 = $113;
      var $c_6 = $117;
      var $s_alloc_15 = $s_alloc_10;
      __label__ = 66;
      break;
    }
   case 41:
    var $123 = HEAP8[$13];
    __label__ = 42;
    break;
   case 42:
    var $123;
    if ($123 << 24 >> 24 == 70) {
      __label__ = 43;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 43:
    if (($hexfloat_2_ph | 0) == 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    if (($c_2 | 0) == 112 || ($c_2 | 0) == 80) {
      var $base_3 = 10;
      var $hexexp_1 = $s_upto_4;
      __label__ = 46;
      break;
    } else {
      var $s_12 = $s_7;
      var $chars_4 = $chars_2;
      var $c_4 = $c_2;
      var $hexexp_3 = $hexexp_0;
      var $seen_digit_2 = $seen_digit_0_ph46;
      var $s_upto_6 = $s_upto_4;
      var $s_alloc_12 = $s_alloc_7;
      __label__ = 54;
      break;
    }
   case 45:
    if (($c_2 | 0) == 101 || ($c_2 | 0) == 69) {
      var $base_3 = $base_2_ph;
      var $hexexp_1 = $hexexp_0;
      __label__ = 46;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 46:
    var $hexexp_1;
    var $base_3;
    if (($seen_digit_0_ph46 | 0) == 0) {
      var $invalid_0 = 1;
      var $s_15 = $s_7;
      var $chars_6 = $chars_2;
      var $c_6 = $c_2;
      var $s_alloc_15 = $s_alloc_7;
      __label__ = 66;
      break;
    } else {
      var $base_4 = $base_3;
      var $hexexp_2 = $hexexp_1;
      var $seen_digit_1 = $seen_digit_0_ph46;
      __label__ = 47;
      break;
    }
   case 47:
    var $seen_digit_1;
    var $hexexp_2;
    var $base_4;
    if ($s_upto_4 >>> 0 < $s_alloc_7 >>> 0) {
      var $s_11 = $s_7;
      var $s_alloc_11 = $s_alloc_7;
      __label__ = 49;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    var $133 = $s_alloc_7 + 512 | 0;
    var $134 = HEAP32[___gmp_reallocate_func >> 2];
    var $135 = FUNCTION_TABLE[$134]($s_7, $s_alloc_7, $133);
    var $s_11 = $135;
    var $s_alloc_11 = $133;
    __label__ = 49;
    break;
   case 49:
    var $s_alloc_11;
    var $s_11;
    var $138 = $s_upto_4 + 1 | 0;
    HEAP8[$s_11 + $s_upto_4 | 0] = $c_2 & 255;
    var $140 = $chars_2 + 1 | 0;
    if (($140 | 0) > ($_ | 0)) {
      var $s_12 = $s_11;
      var $chars_4 = $140;
      var $c_4 = $c_2;
      var $hexexp_3 = $hexexp_2;
      var $seen_digit_2 = $seen_digit_1;
      var $s_upto_6 = $138;
      var $s_alloc_12 = $s_alloc_11;
      __label__ = 54;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    var $143 = HEAP32[$1 >> 2];
    var $144 = FUNCTION_TABLE[$143]($data);
    var $s_0 = $s_11;
    var $chars_0 = $140;
    var $c_0 = $144;
    var $base_0 = $base_4;
    var $first_0 = 0;
    var $hexexp_0 = $hexexp_2;
    var $seen_point_0 = $seen_point_1;
    var $hexfloat_0 = $hexfloat_2_ph;
    var $s_upto_0 = $138;
    var $s_alloc_0 = $s_alloc_11;
    __label__ = 4;
    break;
   case 51:
    if ($123 << 24 >> 24 == 81 & ($c_2 | 0) == 47) {
      __label__ = 52;
      break;
    } else {
      var $s_12 = $s_7;
      var $chars_4 = $chars_2;
      var $c_4 = $c_2;
      var $hexexp_3 = $hexexp_0;
      var $seen_digit_2 = $seen_digit_0_ph46;
      var $s_upto_6 = $s_upto_4;
      var $s_alloc_12 = $s_alloc_7;
      __label__ = 54;
      break;
    }
   case 52:
    if (($seen_digit_0_ph46 | 0) == 0) {
      var $invalid_0 = 1;
      var $s_15 = $s_7;
      var $chars_6 = $chars_2;
      var $c_6 = 47;
      var $s_alloc_15 = $s_alloc_7;
      __label__ = 66;
      break;
    } else {
      __label__ = 53;
      break;
    }
   case 53:
    var $base_4 = HEAP32[$9 >> 2];
    var $hexexp_2 = $hexexp_0;
    var $seen_digit_1 = 0;
    __label__ = 47;
    break;
   case 54:
    var $s_alloc_12;
    var $s_upto_6;
    var $seen_digit_2;
    var $hexexp_3;
    var $c_4;
    var $chars_4;
    var $s_12;
    if (($seen_digit_2 | 0) == 0) {
      var $invalid_0 = 1;
      var $s_15 = $s_12;
      var $chars_6 = $chars_4;
      var $c_6 = $c_4;
      var $s_alloc_15 = $s_alloc_12;
      __label__ = 66;
      break;
    } else {
      var $s_alloc_1220 = $s_alloc_12;
      var $s_upto_621 = $s_upto_6;
      var $hexfloat_322 = $hexfloat_2_ph;
      var $hexexp_323 = $hexexp_3;
      var $c_424 = $c_4;
      var $chars_425 = $chars_4;
      var $s_1226 = $s_12;
      __label__ = 55;
      break;
    }
   case 55:
    var $s_1226;
    var $chars_425;
    var $c_424;
    var $hexexp_323;
    var $hexfloat_322;
    var $s_upto_621;
    var $s_alloc_1220;
    if ((HEAP32[$p + 4 >> 2] | 0) == 0) {
      __label__ = 56;
      break;
    } else {
      var $invalid_0 = 0;
      var $s_15 = $s_1226;
      var $chars_6 = $chars_425;
      var $c_6 = $c_424;
      var $s_alloc_15 = $s_alloc_1220;
      __label__ = 66;
      break;
    }
   case 56:
    if ($s_upto_621 >>> 0 < $s_alloc_1220 >>> 0) {
      var $s_14 = $s_1226;
      var $s_alloc_14 = $s_alloc_1220;
      __label__ = 58;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 57:
    var $159 = $s_alloc_1220 + 512 | 0;
    var $160 = HEAP32[___gmp_reallocate_func >> 2];
    var $161 = FUNCTION_TABLE[$160]($s_1226, $s_alloc_1220, $159);
    var $s_14 = $161;
    var $s_alloc_14 = $159;
    __label__ = 58;
    break;
   case 58:
    var $s_alloc_14;
    var $s_14;
    HEAP8[$s_14 + $s_upto_621 | 0] = 0;
    var $165 = HEAP8[$13] << 24 >> 24;
    if (($165 | 0) == 70) {
      __label__ = 59;
      break;
    } else if (($165 | 0) == 81) {
      __label__ = 63;
      break;
    } else if (($165 | 0) == 90) {
      __label__ = 64;
      break;
    } else {
      var $invalid_0 = 0;
      var $s_15 = $s_14;
      var $chars_6 = $chars_425;
      var $c_6 = $c_424;
      var $s_alloc_15 = $s_alloc_14;
      __label__ = 66;
      break;
    }
   case 59:
    var $167 = $dst;
    if (($hexexp_323 | 0) == 0) {
      __label__ = 65;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    HEAP8[$s_14 + $hexexp_323 | 0] = 0;
    var $172 = ($hexfloat_322 | 0) != 0 ? 16 : 10;
    var $173 = ___gmpf_set_str($167, $s_14, $172);
    var $175 = _strtol($s_14 + ($hexexp_323 + 1) | 0, $dummy, 10);
    if (($175 | 0) > -1) {
      __label__ = 61;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 61:
    ___gmpf_mul_2exp($167, $167, $175);
    var $invalid_0 = 0;
    var $s_15 = $s_14;
    var $chars_6 = $chars_425;
    var $c_6 = $c_424;
    var $s_alloc_15 = $s_alloc_14;
    __label__ = 66;
    break;
   case 62:
    var $179 = -$175 | 0;
    ___gmpf_div_2exp($167, $167, $179);
    var $invalid_0 = 0;
    var $s_15 = $s_14;
    var $chars_6 = $chars_425;
    var $c_6 = $c_424;
    var $s_alloc_15 = $s_alloc_14;
    __label__ = 66;
    break;
   case 63:
    var $181 = $dst;
    var $182 = HEAP32[$9 >> 2];
    var $183 = ___gmpq_set_str($181, $s_14, $182);
    var $invalid_0 = 0;
    var $s_15 = $s_14;
    var $chars_6 = $chars_425;
    var $c_6 = $c_424;
    var $s_alloc_15 = $s_alloc_14;
    __label__ = 66;
    break;
   case 64:
    var $185 = $dst;
    var $186 = HEAP32[$9 >> 2];
    var $187 = ___gmpz_set_str($185, $s_14, $186);
    var $invalid_0 = 0;
    var $s_15 = $s_14;
    var $chars_6 = $chars_425;
    var $c_6 = $c_424;
    var $s_alloc_15 = $s_alloc_14;
    __label__ = 66;
    break;
   case 65:
    var $189 = ($hexfloat_322 | 0) != 0 ? 16 : 10;
    var $190 = ___gmpf_set_str($167, $s_14, $189);
    var $invalid_0 = 0;
    var $s_15 = $s_14;
    var $chars_6 = $chars_425;
    var $c_6 = $c_424;
    var $s_alloc_15 = $s_alloc_14;
    __label__ = 66;
    break;
   case 66:
    var $s_alloc_15;
    var $c_6;
    var $chars_6;
    var $s_15;
    var $invalid_0;
    if (($chars_6 | 0) == ($_ + 1 | 0)) {
      __label__ = 68;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $195 = HEAP32[$funs + 12 >> 2];
    var $196 = FUNCTION_TABLE[$195]($c_6, $data);
    __label__ = 68;
    break;
   case 68:
    var $198 = HEAP32[___gmp_free_func >> 2];
    FUNCTION_TABLE[$198]($s_15, $s_alloc_15);
    var $_11 = ($invalid_0 | 0) == 0 ? $chars_6 - 1 | 0 : -1;
    STACKTOP = __stackBase__;
    return $_11;
   case 69:
    STACKTOP = __stackBase__;
    return -2;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_gmpscan["X"] = 1;

function ___gmp_fscanf($fp, $fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $ap = __stackBase__;
  HEAP32[$ap >> 2] = arguments[___gmp_fscanf.length];
  var $2 = $fp;
  var $3 = HEAP32[$ap >> 2];
  var $4 = ___gmp_doscan(___gmp_fscanf_funs, $2, $fmt, $3);
  STACKTOP = __stackBase__;
  return $4;
}

function ___gmp_scanf($fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $ap = __stackBase__;
  HEAP32[$ap >> 2] = arguments[___gmp_scanf.length];
  var $3 = HEAP32[_stdin >> 2];
  var $4 = HEAP32[$ap >> 2];
  var $5 = ___gmp_doscan(___gmp_fscanf_funs, $3, $fmt, $4);
  STACKTOP = __stackBase__;
  return $5;
}

function ___gmp_sscanf($s, $fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $1 = __stackBase__;
  var $ap = __stackBase__ + 4;
  HEAP32[$1 >> 2] = $s;
  HEAP32[$ap >> 2] = arguments[___gmp_sscanf.length];
  var $3 = $1;
  var $4 = HEAP32[$ap >> 2];
  var $5 = ___gmp_doscan(___gmp_sscanf_funs, $3, $fmt, $4);
  STACKTOP = __stackBase__;
  return $5;
}

function _scan($sp, $fmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $ap = __stackBase__;
  HEAP32[$ap >> 2] = arguments[_scan.length];
  var $2 = HEAP32[$ap >> 2];
  var $3 = $2;
  var $4 = $2 + 4 | 0;
  HEAP32[$ap >> 2] = $4;
  var $5 = HEAP32[$3 >> 2];
  var $6 = $4;
  var $7 = $2 + 8 | 0;
  HEAP32[$ap >> 2] = $7;
  var $8 = HEAP32[$6 >> 2];
  var $9 = HEAP32[$sp >> 2];
  var $10 = _sscanf($9, $fmt, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = $8, tempInt));
  STACKTOP = __stackBase__;
  return $10;
}

function ___gmp_vfscanf($fp, $fmt, $ap) {
  var $1 = $fp;
  var $2 = ___gmp_doscan(___gmp_fscanf_funs, $1, $fmt, $ap);
  return $2;
}

function ___gmp_vscanf($fmt, $ap) {
  var $2 = HEAP32[_stdin >> 2];
  var $3 = ___gmp_doscan(___gmp_fscanf_funs, $2, $fmt, $ap);
  return $3;
}

function ___gmp_vsscanf($s, $fmt, $ap) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $1 = __stackBase__;
  HEAP32[$1 >> 2] = $s;
  var $2 = $1;
  var $3 = ___gmp_doscan(___gmp_sscanf_funs, $2, $fmt, $ap);
  STACKTOP = __stackBase__;
  return $3;
}

function ___gmp_tmp_reentrant_alloc($markp, $size) {
  var $1 = $size + 8 | 0;
  var $2 = HEAP32[___gmp_allocate_func >> 2];
  var $3 = FUNCTION_TABLE[$2]($1);
  var $4 = $3;
  var $6 = $3 + 4 | 0;
  HEAP32[$6 >> 2] = $1;
  var $7 = HEAP32[$markp >> 2];
  var $8 = $3;
  HEAP32[$8 >> 2] = $7;
  HEAP32[$markp >> 2] = $4;
  return $3 + 8 | 0;
}

function ___gmp_tmp_reentrant_free($mark) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($mark | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $mark;
      __label__ = 3;
      break;
    }
   case 3:
    var $_01;
    var $3 = HEAP32[$_01 >> 2];
    var $4 = HEAP32[___gmp_free_func >> 2];
    var $7 = HEAP32[$_01 + 4 >> 2];
    FUNCTION_TABLE[$4]($_01, $7);
    if (($3 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $_01 = $3;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _malloc($bytes) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($bytes >>> 0 < 245) {
      __label__ = 3;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 3:
    if ($bytes >>> 0 < 11) {
      var $8 = 16;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $8 = $bytes + 11 & -8;
    __label__ = 5;
    break;
   case 5:
    var $8;
    var $9 = $8 >>> 3;
    var $10 = HEAPU32[__gm_ >> 2];
    var $11 = $10 >>> ($9 >>> 0);
    if (($11 & 3 | 0) == 0) {
      __label__ = 12;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $17 = ($11 & 1 ^ 1) + $9 | 0;
    var $18 = $17 << 1;
    var $20 = __gm_ + 40 + ($18 << 2) | 0;
    var $21 = __gm_ + 40 + ($18 + 2 << 2) | 0;
    var $22 = HEAPU32[$21 >> 2];
    var $23 = $22 + 8 | 0;
    var $24 = HEAPU32[$23 >> 2];
    if (($20 | 0) == ($24 | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    HEAP32[__gm_ >> 2] = $10 & (1 << $17 ^ -1);
    __label__ = 11;
    break;
   case 8:
    if ($24 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    HEAP32[$21 >> 2] = $24;
    HEAP32[$24 + 12 >> 2] = $20;
    __label__ = 11;
    break;
   case 10:
    _abort();
    throw "Reached an unreachable!";
   case 11:
    var $38 = $17 << 3;
    HEAP32[$22 + 4 >> 2] = $38 | 3;
    var $43 = $22 + ($38 | 4) | 0;
    var $45 = HEAP32[$43 >> 2] | 1;
    HEAP32[$43 >> 2] = $45;
    var $mem_0 = $23;
    __label__ = 39;
    break;
   case 12:
    if ($8 >>> 0 > HEAPU32[__gm_ + 8 >> 2] >>> 0) {
      __label__ = 13;
      break;
    } else {
      var $nb_0 = $8;
      __label__ = 31;
      break;
    }
   case 13:
    if (($11 | 0) == 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $54 = 2 << $9;
    var $57 = $11 << $9 & ($54 | -$54);
    var $60 = ($57 & -$57) - 1 | 0;
    var $62 = $60 >>> 12 & 16;
    var $63 = $60 >>> ($62 >>> 0);
    var $65 = $63 >>> 5 & 8;
    var $66 = $63 >>> ($65 >>> 0);
    var $68 = $66 >>> 2 & 4;
    var $69 = $66 >>> ($68 >>> 0);
    var $71 = $69 >>> 1 & 2;
    var $72 = $69 >>> ($71 >>> 0);
    var $74 = $72 >>> 1 & 1;
    var $80 = ($65 | $62 | $68 | $71 | $74) + ($72 >>> ($74 >>> 0)) | 0;
    var $81 = $80 << 1;
    var $83 = __gm_ + 40 + ($81 << 2) | 0;
    var $84 = __gm_ + 40 + ($81 + 2 << 2) | 0;
    var $85 = HEAPU32[$84 >> 2];
    var $86 = $85 + 8 | 0;
    var $87 = HEAPU32[$86 >> 2];
    if (($83 | 0) == ($87 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    HEAP32[__gm_ >> 2] = $10 & (1 << $80 ^ -1);
    __label__ = 19;
    break;
   case 16:
    if ($87 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    HEAP32[$84 >> 2] = $87;
    HEAP32[$87 + 12 >> 2] = $83;
    __label__ = 19;
    break;
   case 18:
    _abort();
    throw "Reached an unreachable!";
   case 19:
    var $101 = $80 << 3;
    var $102 = $101 - $8 | 0;
    HEAP32[$85 + 4 >> 2] = $8 | 3;
    var $105 = $85;
    var $107 = $105 + $8 | 0;
    HEAP32[$105 + ($8 | 4) >> 2] = $102 | 1;
    HEAP32[$105 + $101 >> 2] = $102;
    var $113 = HEAPU32[__gm_ + 8 >> 2];
    if (($113 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $116 = HEAP32[__gm_ + 20 >> 2];
    var $119 = $113 >>> 2 & 1073741822;
    var $121 = __gm_ + 40 + ($119 << 2) | 0;
    var $122 = HEAPU32[__gm_ >> 2];
    var $123 = 1 << ($113 >>> 3);
    if (($122 & $123 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 21:
    HEAP32[__gm_ >> 2] = $122 | $123;
    var $F4_0 = $121;
    var $_pre_phi = __gm_ + 40 + ($119 + 2 << 2) | 0;
    __label__ = 24;
    break;
   case 22:
    var $129 = __gm_ + 40 + ($119 + 2 << 2) | 0;
    var $130 = HEAPU32[$129 >> 2];
    if ($130 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 23;
      break;
    } else {
      var $F4_0 = $130;
      var $_pre_phi = $129;
      __label__ = 24;
      break;
    }
   case 23:
    _abort();
    throw "Reached an unreachable!";
   case 24:
    var $_pre_phi;
    var $F4_0;
    HEAP32[$_pre_phi >> 2] = $116;
    HEAP32[$F4_0 + 12 >> 2] = $116;
    var $137 = $116 + 8 | 0;
    HEAP32[$137 >> 2] = $F4_0;
    var $138 = $116 + 12 | 0;
    HEAP32[$138 >> 2] = $121;
    __label__ = 25;
    break;
   case 25:
    HEAP32[__gm_ + 8 >> 2] = $102;
    HEAP32[__gm_ + 20 >> 2] = $107;
    var $mem_0 = $86;
    __label__ = 39;
    break;
   case 26:
    if ((HEAP32[__gm_ + 4 >> 2] | 0) == 0) {
      var $nb_0 = $8;
      __label__ = 31;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $145 = _tmalloc_small($8);
    if (($145 | 0) == 0) {
      var $nb_0 = $8;
      __label__ = 31;
      break;
    } else {
      var $mem_0 = $145;
      __label__ = 39;
      break;
    }
   case 28:
    if ($bytes >>> 0 > 4294967231) {
      var $nb_0 = -1;
      __label__ = 31;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    var $151 = $bytes + 11 & -8;
    if ((HEAP32[__gm_ + 4 >> 2] | 0) == 0) {
      var $nb_0 = $151;
      __label__ = 31;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    var $155 = _tmalloc_large($151);
    if (($155 | 0) == 0) {
      var $nb_0 = $151;
      __label__ = 31;
      break;
    } else {
      var $mem_0 = $155;
      __label__ = 39;
      break;
    }
   case 31:
    var $nb_0;
    var $157 = HEAPU32[__gm_ + 8 >> 2];
    if ($nb_0 >>> 0 > $157 >>> 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $160 = $157 - $nb_0 | 0;
    var $161 = HEAPU32[__gm_ + 20 >> 2];
    if ($160 >>> 0 > 15) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    var $164 = $161;
    HEAP32[__gm_ + 20 >> 2] = $164 + $nb_0 | 0;
    HEAP32[__gm_ + 8 >> 2] = $160;
    HEAP32[$164 + ($nb_0 + 4) >> 2] = $160 | 1;
    HEAP32[$164 + $157 >> 2] = $160;
    HEAP32[$161 + 4 >> 2] = $nb_0 | 3;
    __label__ = 35;
    break;
   case 34:
    HEAP32[__gm_ + 8 >> 2] = 0;
    HEAP32[__gm_ + 20 >> 2] = 0;
    HEAP32[$161 + 4 >> 2] = $157 | 3;
    var $179 = $161 + ($157 + 4) | 0;
    var $181 = HEAP32[$179 >> 2] | 1;
    HEAP32[$179 >> 2] = $181;
    __label__ = 35;
    break;
   case 35:
    var $mem_0 = $161 + 8 | 0;
    __label__ = 39;
    break;
   case 36:
    var $186 = HEAPU32[__gm_ + 12 >> 2];
    if ($nb_0 >>> 0 < $186 >>> 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    var $189 = $186 - $nb_0 | 0;
    HEAP32[__gm_ + 12 >> 2] = $189;
    var $190 = HEAPU32[__gm_ + 24 >> 2];
    var $191 = $190;
    HEAP32[__gm_ + 24 >> 2] = $191 + $nb_0 | 0;
    HEAP32[$191 + ($nb_0 + 4) >> 2] = $189 | 1;
    HEAP32[$190 + 4 >> 2] = $nb_0 | 3;
    var $mem_0 = $190 + 8 | 0;
    __label__ = 39;
    break;
   case 38:
    var $202 = _sys_alloc($nb_0);
    var $mem_0 = $202;
    __label__ = 39;
    break;
   case 39:
    var $mem_0;
    return $mem_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_malloc["X"] = 1;

function _tmalloc_small($nb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAP32[__gm_ + 4 >> 2];
    var $4 = ($1 & -$1) - 1 | 0;
    var $6 = $4 >>> 12 & 16;
    var $7 = $4 >>> ($6 >>> 0);
    var $9 = $7 >>> 5 & 8;
    var $10 = $7 >>> ($9 >>> 0);
    var $12 = $10 >>> 2 & 4;
    var $13 = $10 >>> ($12 >>> 0);
    var $15 = $13 >>> 1 & 2;
    var $16 = $13 >>> ($15 >>> 0);
    var $18 = $16 >>> 1 & 1;
    var $26 = HEAPU32[__gm_ + 304 + (($9 | $6 | $12 | $15 | $18) + ($16 >>> ($18 >>> 0)) << 2) >> 2];
    var $t_0 = $26;
    var $v_0 = $26;
    var $rsize_0 = (HEAP32[$26 + 4 >> 2] & -8) - $nb | 0;
    __label__ = 3;
    break;
   case 3:
    var $rsize_0;
    var $v_0;
    var $t_0;
    var $33 = HEAP32[$t_0 + 16 >> 2];
    if (($33 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $39 = $33;
      __label__ = 5;
      break;
    }
   case 4:
    var $37 = HEAP32[$t_0 + 20 >> 2];
    if (($37 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $39 = $37;
      __label__ = 5;
      break;
    }
   case 5:
    var $39;
    var $43 = (HEAP32[$39 + 4 >> 2] & -8) - $nb | 0;
    var $44 = $43 >>> 0 < $rsize_0 >>> 0;
    var $_rsize_0 = $44 ? $43 : $rsize_0;
    var $_v_0 = $44 ? $39 : $v_0;
    var $t_0 = $39;
    var $v_0 = $_v_0;
    var $rsize_0 = $_rsize_0;
    __label__ = 3;
    break;
   case 6:
    var $46 = $v_0;
    var $47 = HEAPU32[__gm_ + 16 >> 2];
    if ($46 >>> 0 < $47 >>> 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $50 = $46 + $nb | 0;
    var $51 = $50;
    if ($46 >>> 0 < $50 >>> 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 8:
    var $55 = HEAPU32[$v_0 + 24 >> 2];
    var $57 = HEAPU32[$v_0 + 12 >> 2];
    if (($57 | 0) == ($v_0 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $61 = HEAPU32[$v_0 + 8 >> 2];
    if ($61 >>> 0 < $47 >>> 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    HEAP32[$61 + 12 >> 2] = $57;
    HEAP32[$57 + 8 >> 2] = $61;
    var $R_1 = $57;
    __label__ = 19;
    break;
   case 11:
    _abort();
    throw "Reached an unreachable!";
   case 12:
    var $69 = $v_0 + 20 | 0;
    var $70 = HEAP32[$69 >> 2];
    if (($70 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $RP_0 = $69;
      var $R_0 = $70;
      __label__ = 14;
      break;
    }
   case 13:
    var $73 = $v_0 + 16 | 0;
    var $74 = HEAP32[$73 >> 2];
    if (($74 | 0) == 0) {
      var $R_1 = 0;
      __label__ = 19;
      break;
    } else {
      var $RP_0 = $73;
      var $R_0 = $74;
      __label__ = 14;
      break;
    }
   case 14:
    var $R_0;
    var $RP_0;
    var $76 = $R_0 + 20 | 0;
    var $77 = HEAP32[$76 >> 2];
    if (($77 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      var $RP_0 = $76;
      var $R_0 = $77;
      __label__ = 14;
      break;
    }
   case 15:
    var $80 = $R_0 + 16 | 0;
    var $81 = HEAPU32[$80 >> 2];
    if (($81 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $RP_0 = $80;
      var $R_0 = $81;
      __label__ = 14;
      break;
    }
   case 16:
    if ($RP_0 >>> 0 < $47 >>> 0) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    __label__ = 19;
    break;
   case 18:
    _abort();
    throw "Reached an unreachable!";
   case 19:
    var $R_1;
    if (($55 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $91 = $v_0 + 28 | 0;
    var $93 = __gm_ + 304 + (HEAP32[$91 >> 2] << 2) | 0;
    if (($v_0 | 0) == (HEAP32[$93 >> 2] | 0)) {
      __label__ = 21;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 21:
    HEAP32[$93 >> 2] = $R_1;
    if (($R_1 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 22:
    var $101 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$91 >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $101;
    __label__ = 39;
    break;
   case 23:
    if ($55 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 27;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $107 = $55 + 16 | 0;
    if ((HEAP32[$107 >> 2] | 0) == ($v_0 | 0)) {
      __label__ = 25;
      break;
    } else {
      __label__ = 26;
      break;
    }
   case 25:
    HEAP32[$107 >> 2] = $R_1;
    __label__ = 28;
    break;
   case 26:
    HEAP32[$55 + 20 >> 2] = $R_1;
    __label__ = 28;
    break;
   case 27:
    _abort();
    throw "Reached an unreachable!";
   case 28:
    if (($R_1 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 30;
      break;
    }
   case 30:
    HEAP32[$R_1 + 24 >> 2] = $55;
    var $123 = HEAPU32[$v_0 + 16 >> 2];
    if (($123 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    if ($123 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 33;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    HEAP32[$R_1 + 16 >> 2] = $123;
    HEAP32[$123 + 24 >> 2] = $R_1;
    __label__ = 34;
    break;
   case 33:
    _abort();
    throw "Reached an unreachable!";
   case 34:
    var $135 = HEAPU32[$v_0 + 20 >> 2];
    if (($135 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    if ($135 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    HEAP32[$R_1 + 20 >> 2] = $135;
    HEAP32[$135 + 24 >> 2] = $R_1;
    __label__ = 39;
    break;
   case 37:
    _abort();
    throw "Reached an unreachable!";
   case 38:
    _abort();
    throw "Reached an unreachable!";
   case 39:
    if ($rsize_0 >>> 0 < 16) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    var $149 = $rsize_0 + $nb | 0;
    HEAP32[$v_0 + 4 >> 2] = $149 | 3;
    var $153 = $46 + ($149 + 4) | 0;
    var $155 = HEAP32[$153 >> 2] | 1;
    HEAP32[$153 >> 2] = $155;
    __label__ = 48;
    break;
   case 41:
    HEAP32[$v_0 + 4 >> 2] = $nb | 3;
    HEAP32[$46 + ($nb + 4) >> 2] = $rsize_0 | 1;
    HEAP32[$46 + ($rsize_0 + $nb) >> 2] = $rsize_0;
    var $164 = HEAPU32[__gm_ + 8 >> 2];
    if (($164 | 0) == 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    var $167 = HEAPU32[__gm_ + 20 >> 2];
    var $170 = $164 >>> 2 & 1073741822;
    var $172 = __gm_ + 40 + ($170 << 2) | 0;
    var $173 = HEAPU32[__gm_ >> 2];
    var $174 = 1 << ($164 >>> 3);
    if (($173 & $174 | 0) == 0) {
      __label__ = 43;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 43:
    HEAP32[__gm_ >> 2] = $173 | $174;
    var $F1_0 = $172;
    var $_pre_phi = __gm_ + 40 + ($170 + 2 << 2) | 0;
    __label__ = 46;
    break;
   case 44:
    var $180 = __gm_ + 40 + ($170 + 2 << 2) | 0;
    var $181 = HEAPU32[$180 >> 2];
    if ($181 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 45;
      break;
    } else {
      var $F1_0 = $181;
      var $_pre_phi = $180;
      __label__ = 46;
      break;
    }
   case 45:
    _abort();
    throw "Reached an unreachable!";
   case 46:
    var $_pre_phi;
    var $F1_0;
    HEAP32[$_pre_phi >> 2] = $167;
    HEAP32[$F1_0 + 12 >> 2] = $167;
    HEAP32[$167 + 8 >> 2] = $F1_0;
    HEAP32[$167 + 12 >> 2] = $172;
    __label__ = 47;
    break;
   case 47:
    HEAP32[__gm_ + 8 >> 2] = $rsize_0;
    HEAP32[__gm_ + 20 >> 2] = $51;
    __label__ = 48;
    break;
   case 48:
    return $v_0 + 8 | 0;
   case 49:
    _abort();
    throw "Reached an unreachable!";
   default:
    assert(0, "bad label: " + __label__);
  }
}

_tmalloc_small["X"] = 1;

function _tmalloc_large($nb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = -$nb | 0;
    var $2 = $nb >>> 8;
    if (($2 | 0) == 0) {
      var $idx_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ($nb >>> 0 > 16777215) {
      var $idx_0 = 31;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $9 = ($2 + 1048320 | 0) >>> 16 & 8;
    var $10 = $2 << $9;
    var $13 = ($10 + 520192 | 0) >>> 16 & 4;
    var $14 = $10 << $13;
    var $17 = ($14 + 245760 | 0) >>> 16 & 2;
    var $23 = 14 - ($13 | $9 | $17) + ($14 << $17 >>> 15) | 0;
    var $idx_0 = $nb >>> (($23 + 7 | 0) >>> 0) & 1 | $23 << 1;
    __label__ = 5;
    break;
   case 5:
    var $idx_0;
    var $31 = HEAPU32[__gm_ + 304 + ($idx_0 << 2) >> 2];
    if (($31 | 0) == 0) {
      var $v_2 = 0;
      var $rsize_2 = $1;
      var $t_1 = 0;
      __label__ = 12;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($idx_0 | 0) == 31) {
      var $39 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $39 = 25 - ($idx_0 >>> 1) | 0;
    __label__ = 8;
    break;
   case 8:
    var $39;
    var $v_0 = 0;
    var $rsize_0 = $1;
    var $t_0 = $31;
    var $sizebits_0 = $nb << $39;
    var $rst_0 = 0;
    __label__ = 9;
    break;
   case 9:
    var $rst_0;
    var $sizebits_0;
    var $t_0;
    var $rsize_0;
    var $v_0;
    var $44 = HEAP32[$t_0 + 4 >> 2] & -8;
    var $45 = $44 - $nb | 0;
    if ($45 >>> 0 < $rsize_0 >>> 0) {
      __label__ = 10;
      break;
    } else {
      var $v_1 = $v_0;
      var $rsize_1 = $rsize_0;
      __label__ = 11;
      break;
    }
   case 10:
    if (($44 | 0) == ($nb | 0)) {
      var $v_2 = $t_0;
      var $rsize_2 = $45;
      var $t_1 = $t_0;
      __label__ = 12;
      break;
    } else {
      var $v_1 = $t_0;
      var $rsize_1 = $45;
      __label__ = 11;
      break;
    }
   case 11:
    var $rsize_1;
    var $v_1;
    var $51 = HEAPU32[$t_0 + 20 >> 2];
    var $54 = HEAPU32[$t_0 + 16 + ($sizebits_0 >>> 31 << 2) >> 2];
    var $rst_1 = ($51 | 0) == 0 | ($51 | 0) == ($54 | 0) ? $rst_0 : $51;
    if (($54 | 0) == 0) {
      var $v_2 = $v_1;
      var $rsize_2 = $rsize_1;
      var $t_1 = $rst_1;
      __label__ = 12;
      break;
    } else {
      var $v_0 = $v_1;
      var $rsize_0 = $rsize_1;
      var $t_0 = $54;
      var $sizebits_0 = $sizebits_0 << 1;
      var $rst_0 = $rst_1;
      __label__ = 9;
      break;
    }
   case 12:
    var $t_1;
    var $rsize_2;
    var $v_2;
    if (($t_1 | 0) == 0 & ($v_2 | 0) == 0) {
      __label__ = 13;
      break;
    } else {
      var $t_2_ph = $t_1;
      __label__ = 15;
      break;
    }
   case 13:
    var $62 = 2 << $idx_0;
    var $66 = HEAP32[__gm_ + 4 >> 2] & ($62 | -$62);
    if (($66 | 0) == 0) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      __label__ = 18;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    var $71 = ($66 & -$66) - 1 | 0;
    var $73 = $71 >>> 12 & 16;
    var $74 = $71 >>> ($73 >>> 0);
    var $76 = $74 >>> 5 & 8;
    var $77 = $74 >>> ($76 >>> 0);
    var $79 = $77 >>> 2 & 4;
    var $80 = $77 >>> ($79 >>> 0);
    var $82 = $80 >>> 1 & 2;
    var $83 = $80 >>> ($82 >>> 0);
    var $85 = $83 >>> 1 & 1;
    var $t_2_ph = HEAP32[__gm_ + 304 + (($76 | $73 | $79 | $82 | $85) + ($83 >>> ($85 >>> 0)) << 2) >> 2];
    __label__ = 15;
    break;
   case 15:
    var $t_2_ph;
    if (($t_2_ph | 0) == 0) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      __label__ = 18;
      break;
    } else {
      var $t_224 = $t_2_ph;
      var $rsize_325 = $rsize_2;
      var $v_326 = $v_2;
      __label__ = 16;
      break;
    }
   case 16:
    var $v_326;
    var $rsize_325;
    var $t_224;
    var $98 = (HEAP32[$t_224 + 4 >> 2] & -8) - $nb | 0;
    var $99 = $98 >>> 0 < $rsize_325 >>> 0;
    var $_rsize_3 = $99 ? $98 : $rsize_325;
    var $t_2_v_3 = $99 ? $t_224 : $v_326;
    var $101 = HEAPU32[$t_224 + 16 >> 2];
    if (($101 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      var $t_224 = $101;
      var $rsize_325 = $_rsize_3;
      var $v_326 = $t_2_v_3;
      __label__ = 16;
      break;
    }
   case 17:
    var $104 = HEAPU32[$t_224 + 20 >> 2];
    if (($104 | 0) == 0) {
      var $rsize_3_lcssa = $_rsize_3;
      var $v_3_lcssa = $t_2_v_3;
      __label__ = 18;
      break;
    } else {
      var $t_224 = $104;
      var $rsize_325 = $_rsize_3;
      var $v_326 = $t_2_v_3;
      __label__ = 16;
      break;
    }
   case 18:
    var $v_3_lcssa;
    var $rsize_3_lcssa;
    if (($v_3_lcssa | 0) == 0) {
      var $_0 = 0;
      __label__ = 80;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    if ($rsize_3_lcssa >>> 0 < (HEAP32[__gm_ + 8 >> 2] - $nb | 0) >>> 0) {
      __label__ = 20;
      break;
    } else {
      var $_0 = 0;
      __label__ = 80;
      break;
    }
   case 20:
    var $112 = $v_3_lcssa;
    var $113 = HEAPU32[__gm_ + 16 >> 2];
    if ($112 >>> 0 < $113 >>> 0) {
      __label__ = 79;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $116 = $112 + $nb | 0;
    var $117 = $116;
    if ($112 >>> 0 < $116 >>> 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 79;
      break;
    }
   case 22:
    var $121 = HEAPU32[$v_3_lcssa + 24 >> 2];
    var $123 = HEAPU32[$v_3_lcssa + 12 >> 2];
    if (($123 | 0) == ($v_3_lcssa | 0)) {
      __label__ = 26;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $127 = HEAPU32[$v_3_lcssa + 8 >> 2];
    if ($127 >>> 0 < $113 >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP32[$127 + 12 >> 2] = $123;
    HEAP32[$123 + 8 >> 2] = $127;
    var $R_1 = $123;
    __label__ = 33;
    break;
   case 25:
    _abort();
    throw "Reached an unreachable!";
   case 26:
    var $135 = $v_3_lcssa + 20 | 0;
    var $136 = HEAP32[$135 >> 2];
    if (($136 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $RP_0 = $135;
      var $R_0 = $136;
      __label__ = 28;
      break;
    }
   case 27:
    var $139 = $v_3_lcssa + 16 | 0;
    var $140 = HEAP32[$139 >> 2];
    if (($140 | 0) == 0) {
      var $R_1 = 0;
      __label__ = 33;
      break;
    } else {
      var $RP_0 = $139;
      var $R_0 = $140;
      __label__ = 28;
      break;
    }
   case 28:
    var $R_0;
    var $RP_0;
    var $142 = $R_0 + 20 | 0;
    var $143 = HEAP32[$142 >> 2];
    if (($143 | 0) == 0) {
      __label__ = 29;
      break;
    } else {
      var $RP_0 = $142;
      var $R_0 = $143;
      __label__ = 28;
      break;
    }
   case 29:
    var $146 = $R_0 + 16 | 0;
    var $147 = HEAPU32[$146 >> 2];
    if (($147 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      var $RP_0 = $146;
      var $R_0 = $147;
      __label__ = 28;
      break;
    }
   case 30:
    if ($RP_0 >>> 0 < $113 >>> 0) {
      __label__ = 32;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 31:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    __label__ = 33;
    break;
   case 32:
    _abort();
    throw "Reached an unreachable!";
   case 33:
    var $R_1;
    if (($121 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $157 = $v_3_lcssa + 28 | 0;
    var $159 = __gm_ + 304 + (HEAP32[$157 >> 2] << 2) | 0;
    if (($v_3_lcssa | 0) == (HEAP32[$159 >> 2] | 0)) {
      __label__ = 35;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 35:
    HEAP32[$159 >> 2] = $R_1;
    if (($R_1 | 0) == 0) {
      __label__ = 36;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 36:
    var $167 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$157 >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $167;
    __label__ = 53;
    break;
   case 37:
    if ($121 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    var $173 = $121 + 16 | 0;
    if ((HEAP32[$173 >> 2] | 0) == ($v_3_lcssa | 0)) {
      __label__ = 39;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 39:
    HEAP32[$173 >> 2] = $R_1;
    __label__ = 42;
    break;
   case 40:
    HEAP32[$121 + 20 >> 2] = $R_1;
    __label__ = 42;
    break;
   case 41:
    _abort();
    throw "Reached an unreachable!";
   case 42:
    if (($R_1 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    HEAP32[$R_1 + 24 >> 2] = $121;
    var $189 = HEAPU32[$v_3_lcssa + 16 >> 2];
    if (($189 | 0) == 0) {
      __label__ = 48;
      break;
    } else {
      __label__ = 45;
      break;
    }
   case 45:
    if ($189 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 46;
      break;
    }
   case 46:
    HEAP32[$R_1 + 16 >> 2] = $189;
    HEAP32[$189 + 24 >> 2] = $R_1;
    __label__ = 48;
    break;
   case 47:
    _abort();
    throw "Reached an unreachable!";
   case 48:
    var $201 = HEAPU32[$v_3_lcssa + 20 >> 2];
    if (($201 | 0) == 0) {
      __label__ = 53;
      break;
    } else {
      __label__ = 49;
      break;
    }
   case 49:
    if ($201 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 50:
    HEAP32[$R_1 + 20 >> 2] = $201;
    HEAP32[$201 + 24 >> 2] = $R_1;
    __label__ = 53;
    break;
   case 51:
    _abort();
    throw "Reached an unreachable!";
   case 52:
    _abort();
    throw "Reached an unreachable!";
   case 53:
    if ($rsize_3_lcssa >>> 0 < 16) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    var $215 = $rsize_3_lcssa + $nb | 0;
    HEAP32[$v_3_lcssa + 4 >> 2] = $215 | 3;
    var $219 = $112 + ($215 + 4) | 0;
    var $221 = HEAP32[$219 >> 2] | 1;
    HEAP32[$219 >> 2] = $221;
    __label__ = 78;
    break;
   case 55:
    HEAP32[$v_3_lcssa + 4 >> 2] = $nb | 3;
    HEAP32[$112 + ($nb + 4) >> 2] = $rsize_3_lcssa | 1;
    HEAP32[$112 + ($rsize_3_lcssa + $nb) >> 2] = $rsize_3_lcssa;
    if ($rsize_3_lcssa >>> 0 < 256) {
      __label__ = 56;
      break;
    } else {
      __label__ = 61;
      break;
    }
   case 56:
    var $234 = $rsize_3_lcssa >>> 2 & 1073741822;
    var $236 = __gm_ + 40 + ($234 << 2) | 0;
    var $237 = HEAPU32[__gm_ >> 2];
    var $238 = 1 << ($rsize_3_lcssa >>> 3);
    if (($237 & $238 | 0) == 0) {
      __label__ = 57;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 57:
    HEAP32[__gm_ >> 2] = $237 | $238;
    var $F5_0 = $236;
    var $_pre_phi = __gm_ + 40 + ($234 + 2 << 2) | 0;
    __label__ = 60;
    break;
   case 58:
    var $244 = __gm_ + 40 + ($234 + 2 << 2) | 0;
    var $245 = HEAPU32[$244 >> 2];
    if ($245 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 59;
      break;
    } else {
      var $F5_0 = $245;
      var $_pre_phi = $244;
      __label__ = 60;
      break;
    }
   case 59:
    _abort();
    throw "Reached an unreachable!";
   case 60:
    var $_pre_phi;
    var $F5_0;
    HEAP32[$_pre_phi >> 2] = $117;
    HEAP32[$F5_0 + 12 >> 2] = $117;
    HEAP32[$112 + ($nb + 8) >> 2] = $F5_0;
    HEAP32[$112 + ($nb + 12) >> 2] = $236;
    __label__ = 78;
    break;
   case 61:
    var $257 = $116;
    var $258 = $rsize_3_lcssa >>> 8;
    if (($258 | 0) == 0) {
      var $I7_0 = 0;
      __label__ = 64;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 62:
    if ($rsize_3_lcssa >>> 0 > 16777215) {
      var $I7_0 = 31;
      __label__ = 64;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    var $265 = ($258 + 1048320 | 0) >>> 16 & 8;
    var $266 = $258 << $265;
    var $269 = ($266 + 520192 | 0) >>> 16 & 4;
    var $270 = $266 << $269;
    var $273 = ($270 + 245760 | 0) >>> 16 & 2;
    var $279 = 14 - ($269 | $265 | $273) + ($270 << $273 >>> 15) | 0;
    var $I7_0 = $rsize_3_lcssa >>> (($279 + 7 | 0) >>> 0) & 1 | $279 << 1;
    __label__ = 64;
    break;
   case 64:
    var $I7_0;
    var $286 = __gm_ + 304 + ($I7_0 << 2) | 0;
    HEAP32[$112 + ($nb + 28) >> 2] = $I7_0;
    var $289 = $112 + ($nb + 16) | 0;
    HEAP32[$112 + ($nb + 20) >> 2] = 0;
    HEAP32[$289 >> 2] = 0;
    var $293 = HEAP32[__gm_ + 4 >> 2];
    var $294 = 1 << $I7_0;
    if (($293 & $294 | 0) == 0) {
      __label__ = 65;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 65:
    var $298 = $293 | $294;
    HEAP32[__gm_ + 4 >> 2] = $298;
    HEAP32[$286 >> 2] = $257;
    HEAP32[$112 + ($nb + 24) >> 2] = $286;
    HEAP32[$112 + ($nb + 12) >> 2] = $257;
    HEAP32[$112 + ($nb + 8) >> 2] = $257;
    __label__ = 78;
    break;
   case 66:
    var $307 = HEAP32[$286 >> 2];
    if (($I7_0 | 0) == 31) {
      var $313 = 0;
      __label__ = 68;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $313 = 25 - ($I7_0 >>> 1) | 0;
    __label__ = 68;
    break;
   case 68:
    var $313;
    var $K12_0 = $rsize_3_lcssa << $313;
    var $T_0 = $307;
    __label__ = 69;
    break;
   case 69:
    var $T_0;
    var $K12_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa | 0)) {
      __label__ = 74;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    var $322 = $T_0 + 16 + ($K12_0 >>> 31 << 2) | 0;
    var $323 = HEAPU32[$322 >> 2];
    if (($323 | 0) == 0) {
      __label__ = 71;
      break;
    } else {
      var $K12_0 = $K12_0 << 1;
      var $T_0 = $323;
      __label__ = 69;
      break;
    }
   case 71:
    if ($322 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 73;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 72:
    HEAP32[$322 >> 2] = $257;
    HEAP32[$112 + ($nb + 24) >> 2] = $T_0;
    HEAP32[$112 + ($nb + 12) >> 2] = $257;
    HEAP32[$112 + ($nb + 8) >> 2] = $257;
    __label__ = 78;
    break;
   case 73:
    _abort();
    throw "Reached an unreachable!";
   case 74:
    var $339 = $T_0 + 8 | 0;
    var $340 = HEAPU32[$339 >> 2];
    var $342 = HEAPU32[__gm_ + 16 >> 2];
    if ($T_0 >>> 0 < $342 >>> 0) {
      __label__ = 77;
      break;
    } else {
      __label__ = 75;
      break;
    }
   case 75:
    if ($340 >>> 0 < $342 >>> 0) {
      __label__ = 77;
      break;
    } else {
      __label__ = 76;
      break;
    }
   case 76:
    HEAP32[$340 + 12 >> 2] = $257;
    HEAP32[$339 >> 2] = $257;
    HEAP32[$112 + ($nb + 8) >> 2] = $340;
    HEAP32[$112 + ($nb + 12) >> 2] = $T_0;
    HEAP32[$112 + ($nb + 24) >> 2] = 0;
    __label__ = 78;
    break;
   case 77:
    _abort();
    throw "Reached an unreachable!";
   case 78:
    var $_0 = $v_3_lcssa + 8 | 0;
    __label__ = 80;
    break;
   case 79:
    _abort();
    throw "Reached an unreachable!";
   case 80:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_tmalloc_large["X"] = 1;

function _sys_alloc($nb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    if ((HEAP32[__gm_ + 440 >> 2] & 4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      var $tsize_125 = 0;
      __label__ = 24;
      break;
    }
   case 5:
    var $9 = HEAP32[__gm_ + 24 >> 2];
    if (($9 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $12 = $9;
    var $13 = _segment_holding($12);
    if (($13 | 0) == 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 7:
    var $15 = _sbrk(0);
    if (($15 | 0) == -1) {
      var $tsize_0121720_ph = 0;
      __label__ = 22;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $18 = HEAP32[_mparams + 8 >> 2];
    var $22 = $nb + 47 + $18 & -$18;
    var $23 = $15;
    var $24 = HEAP32[_mparams + 4 >> 2];
    var $25 = $24 - 1 | 0;
    if (($25 & $23 | 0) == 0) {
      var $asize_0 = $22;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $asize_0 = $22 - $23 + ($25 + $23 & -$24) | 0;
    __label__ = 10;
    break;
   case 10:
    var $asize_0;
    if ($asize_0 >>> 0 < 2147483647) {
      __label__ = 11;
      break;
    } else {
      var $tsize_0121720_ph = 0;
      __label__ = 22;
      break;
    }
   case 11:
    var $37 = _sbrk($asize_0);
    var $38 = ($37 | 0) == ($15 | 0);
    var $asize_0_ = $38 ? $asize_0 : 0;
    var $_ = $38 ? $15 : -1;
    var $tbase_0 = $_;
    var $tsize_0 = $asize_0_;
    var $asize_1 = $asize_0;
    var $br_0 = $37;
    __label__ = 14;
    break;
   case 12:
    var $41 = HEAP32[_mparams + 8 >> 2];
    var $46 = $nb + 47 - HEAP32[__gm_ + 12 >> 2] + $41 & -$41;
    if ($46 >>> 0 < 2147483647) {
      __label__ = 13;
      break;
    } else {
      var $tsize_0121720_ph = 0;
      __label__ = 22;
      break;
    }
   case 13:
    var $49 = _sbrk($46);
    var $55 = ($49 | 0) == (HEAP32[$13 >> 2] + HEAP32[$13 + 4 >> 2] | 0);
    var $_1 = $55 ? $46 : 0;
    var $_2 = $55 ? $49 : -1;
    var $tbase_0 = $_2;
    var $tsize_0 = $_1;
    var $asize_1 = $46;
    var $br_0 = $49;
    __label__ = 14;
    break;
   case 14:
    var $br_0;
    var $asize_1;
    var $tsize_0;
    var $tbase_0;
    var $57 = -$asize_1 | 0;
    if (($tbase_0 | 0) == -1) {
      __label__ = 15;
      break;
    } else {
      var $tsize_229 = $tsize_0;
      var $tbase_230 = $tbase_0;
      __label__ = 27;
      break;
    }
   case 15:
    if (($br_0 | 0) != -1 & $asize_1 >>> 0 < 2147483647) {
      __label__ = 16;
      break;
    } else {
      var $asize_2 = $asize_1;
      __label__ = 21;
      break;
    }
   case 16:
    if ($asize_1 >>> 0 < ($nb + 48 | 0) >>> 0) {
      __label__ = 17;
      break;
    } else {
      var $asize_2 = $asize_1;
      __label__ = 21;
      break;
    }
   case 17:
    var $66 = HEAP32[_mparams + 8 >> 2];
    var $71 = $nb + 47 - $asize_1 + $66 & -$66;
    if ($71 >>> 0 < 2147483647) {
      __label__ = 18;
      break;
    } else {
      var $asize_2 = $asize_1;
      __label__ = 21;
      break;
    }
   case 18:
    var $74 = _sbrk($71);
    if (($74 | 0) == -1) {
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $asize_2 = $71 + $asize_1 | 0;
    __label__ = 21;
    break;
   case 20:
    var $79 = _sbrk($57);
    var $tsize_0121720_ph = $tsize_0;
    __label__ = 22;
    break;
   case 21:
    var $asize_2;
    if (($br_0 | 0) == -1) {
      __label__ = 23;
      break;
    } else {
      var $tsize_229 = $asize_2;
      var $tbase_230 = $br_0;
      __label__ = 27;
      break;
    }
   case 22:
    var $tsize_0121720_ph;
    var $83 = HEAP32[__gm_ + 440 >> 2] | 4;
    HEAP32[__gm_ + 440 >> 2] = $83;
    var $tsize_125 = $tsize_0121720_ph;
    __label__ = 24;
    break;
   case 23:
    var $85 = HEAP32[__gm_ + 440 >> 2] | 4;
    HEAP32[__gm_ + 440 >> 2] = $85;
    var $tsize_125 = $tsize_0;
    __label__ = 24;
    break;
   case 24:
    var $tsize_125;
    var $86 = HEAP32[_mparams + 8 >> 2];
    var $90 = $nb + 47 + $86 & -$86;
    if ($90 >>> 0 < 2147483647) {
      __label__ = 25;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 25:
    var $93 = _sbrk($90);
    var $94 = _sbrk(0);
    if (($94 | 0) != -1 & ($93 | 0) != -1 & $93 >>> 0 < $94 >>> 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 26:
    var $98 = $94 - $93 | 0;
    var $100 = $98 >>> 0 > ($nb + 40 | 0) >>> 0;
    var $_tsize_1 = $100 ? $98 : $tsize_125;
    var $_tbase_1 = $100 ? $93 : -1;
    if (($_tbase_1 | 0) == -1) {
      __label__ = 50;
      break;
    } else {
      var $tsize_229 = $_tsize_1;
      var $tbase_230 = $_tbase_1;
      __label__ = 27;
      break;
    }
   case 27:
    var $tbase_230;
    var $tsize_229;
    var $103 = HEAP32[__gm_ + 432 >> 2] + $tsize_229 | 0;
    HEAP32[__gm_ + 432 >> 2] = $103;
    if ($103 >>> 0 > HEAPU32[__gm_ + 436 >> 2] >>> 0) {
      __label__ = 28;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 28:
    HEAP32[__gm_ + 436 >> 2] = $103;
    __label__ = 29;
    break;
   case 29:
    var $108 = HEAPU32[__gm_ + 24 >> 2];
    if (($108 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      var $sp_0 = __gm_ + 444 | 0;
      __label__ = 33;
      break;
    }
   case 30:
    var $111 = HEAPU32[__gm_ + 16 >> 2];
    if (($111 | 0) == 0 | $tbase_230 >>> 0 < $111 >>> 0) {
      __label__ = 31;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 31:
    HEAP32[__gm_ + 16 >> 2] = $tbase_230;
    __label__ = 32;
    break;
   case 32:
    HEAP32[__gm_ + 444 >> 2] = $tbase_230;
    HEAP32[__gm_ + 448 >> 2] = $tsize_229;
    HEAP32[__gm_ + 456 >> 2] = 0;
    var $116 = HEAP32[_mparams >> 2];
    HEAP32[__gm_ + 36 >> 2] = $116;
    HEAP32[__gm_ + 32 >> 2] = -1;
    _init_bins();
    _init_top($tbase_230, $tsize_229 - 40 | 0);
    __label__ = 48;
    break;
   case 33:
    var $sp_0;
    if (($sp_0 | 0) == 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 34:
    var $122 = HEAPU32[$sp_0 >> 2];
    var $123 = $sp_0 + 4 | 0;
    var $124 = HEAPU32[$123 >> 2];
    if (($tbase_230 | 0) == ($122 + $124 | 0)) {
      __label__ = 36;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 35:
    var $sp_0 = HEAP32[$sp_0 + 8 >> 2];
    __label__ = 33;
    break;
   case 36:
    if ((HEAP32[$sp_0 + 12 >> 2] & 8 | 0) == 0) {
      __label__ = 37;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 37:
    var $135 = $108;
    if ($135 >>> 0 >= $122 >>> 0 & $135 >>> 0 < $tbase_230 >>> 0) {
      __label__ = 38;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 38:
    HEAP32[$123 >> 2] = $124 + $tsize_229 | 0;
    var $140 = HEAP32[__gm_ + 24 >> 2];
    var $142 = HEAP32[__gm_ + 12 >> 2] + $tsize_229 | 0;
    _init_top($140, $142);
    __label__ = 48;
    break;
   case 39:
    if ($tbase_230 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 40;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 40:
    HEAP32[__gm_ + 16 >> 2] = $tbase_230;
    __label__ = 41;
    break;
   case 41:
    var $146 = $tbase_230 + $tsize_229 | 0;
    var $sp_1 = __gm_ + 444 | 0;
    __label__ = 42;
    break;
   case 42:
    var $sp_1;
    if (($sp_1 | 0) == 0) {
      __label__ = 47;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    var $150 = $sp_1 | 0;
    if ((HEAP32[$150 >> 2] | 0) == ($146 | 0)) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    var $sp_1 = HEAP32[$sp_1 + 8 >> 2];
    __label__ = 42;
    break;
   case 45:
    if ((HEAP32[$sp_1 + 12 >> 2] & 8 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 46:
    HEAP32[$150 >> 2] = $tbase_230;
    var $161 = $sp_1 + 4 | 0;
    var $163 = HEAP32[$161 >> 2] + $tsize_229 | 0;
    HEAP32[$161 >> 2] = $163;
    var $164 = _prepend_alloc($tbase_230, $146, $nb);
    var $_0 = $164;
    __label__ = 51;
    break;
   case 47:
    _add_segment($tbase_230, $tsize_229);
    __label__ = 48;
    break;
   case 48:
    var $166 = HEAPU32[__gm_ + 12 >> 2];
    if ($166 >>> 0 > $nb >>> 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 50;
      break;
    }
   case 49:
    var $169 = $166 - $nb | 0;
    HEAP32[__gm_ + 12 >> 2] = $169;
    var $170 = HEAPU32[__gm_ + 24 >> 2];
    var $171 = $170;
    HEAP32[__gm_ + 24 >> 2] = $171 + $nb | 0;
    HEAP32[$171 + ($nb + 4) >> 2] = $169 | 1;
    HEAP32[$170 + 4 >> 2] = $nb | 3;
    var $_0 = $170 + 8 | 0;
    __label__ = 51;
    break;
   case 50:
    var $181 = ___errno();
    HEAP32[$181 >> 2] = 12;
    var $_0 = 0;
    __label__ = 51;
    break;
   case 51:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_sys_alloc["X"] = 1;

function _release_unused_segments() {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $sp_0_in = __gm_ + 452 | 0;
    __label__ = 3;
    break;
   case 3:
    var $sp_0_in;
    var $sp_0 = HEAP32[$sp_0_in >> 2];
    var $3 = $sp_0 + 8 | 0;
    if (($sp_0 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      var $sp_0_in = $3;
      __label__ = 3;
      break;
    }
   case 4:
    HEAP32[__gm_ + 32 >> 2] = -1;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _sys_trim($pad) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    if ($pad >>> 0 < 4294967232) {
      __label__ = 5;
      break;
    } else {
      var $released_2 = 0;
      __label__ = 14;
      break;
    }
   case 5:
    var $7 = HEAPU32[__gm_ + 24 >> 2];
    if (($7 | 0) == 0) {
      var $released_2 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    var $11 = HEAPU32[__gm_ + 12 >> 2];
    if ($11 >>> 0 > ($pad + 40 | 0) >>> 0) {
      __label__ = 7;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 7:
    var $14 = HEAPU32[_mparams + 8 >> 2];
    var $17 = -40 - $pad - 1 + $11 + $14 | 0;
    var $18 = Math.floor(($17 >>> 0) / ($14 >>> 0));
    var $19 = $18 - 1 | 0;
    var $20 = (i64Math.multiply($19, 0, $14, 0), i64Math.result[0]);
    var $21 = $7;
    var $22 = _segment_holding($21);
    if ((HEAP32[$22 + 12 >> 2] & 8 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 8:
    var $28 = _sbrk(0);
    var $31 = $22 + 4 | 0;
    if (($28 | 0) == (HEAP32[$22 >> 2] + HEAP32[$31 >> 2] | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 9:
    var $_ = $20 >>> 0 > 2147483646 ? -2147483648 - $14 | 0 : $20;
    var $38 = -$_ | 0;
    var $39 = _sbrk($38);
    var $40 = _sbrk(0);
    if (($39 | 0) != -1 & $40 >>> 0 < $28 >>> 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 10:
    var $46 = $28 - $40 | 0;
    if (($28 | 0) == ($40 | 0)) {
      __label__ = 12;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $50 = HEAP32[$31 >> 2] - $46 | 0;
    HEAP32[$31 >> 2] = $50;
    var $52 = HEAP32[__gm_ + 432 >> 2] - $46 | 0;
    HEAP32[__gm_ + 432 >> 2] = $52;
    var $53 = HEAP32[__gm_ + 24 >> 2];
    var $55 = HEAP32[__gm_ + 12 >> 2] - $46 | 0;
    _init_top($53, $55);
    var $released_2 = 1;
    __label__ = 14;
    break;
   case 12:
    if (HEAPU32[__gm_ + 12 >> 2] >>> 0 > HEAPU32[__gm_ + 28 >> 2] >>> 0) {
      __label__ = 13;
      break;
    } else {
      var $released_2 = 0;
      __label__ = 14;
      break;
    }
   case 13:
    HEAP32[__gm_ + 28 >> 2] = -1;
    var $released_2 = 0;
    __label__ = 14;
    break;
   case 14:
    var $released_2;
    return $released_2;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_sys_trim["X"] = 1;

function _free($mem) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($mem | 0) == 0) {
      __label__ = 128;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = $mem - 8 | 0;
    var $4 = $3;
    var $5 = HEAPU32[__gm_ + 16 >> 2];
    if ($3 >>> 0 < $5 >>> 0) {
      __label__ = 127;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $10 = HEAPU32[$mem - 4 >> 2];
    var $11 = $10 & 3;
    if (($11 | 0) == 1) {
      __label__ = 127;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $14 = $10 & -8;
    var $15 = $mem + ($14 - 8) | 0;
    var $16 = $15;
    if (($10 & 1 | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      var $p_0 = $4;
      var $psize_0 = $14;
      __label__ = 49;
      break;
    }
   case 6:
    var $21 = HEAPU32[$3 >> 2];
    if (($11 | 0) == 0) {
      __label__ = 128;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $_sum2 = -8 - $21 | 0;
    var $24 = $mem + $_sum2 | 0;
    var $25 = $24;
    var $26 = $21 + $14 | 0;
    if ($24 >>> 0 < $5 >>> 0) {
      __label__ = 127;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    if (($25 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 47;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $32 = $21 >>> 3;
    if ($21 >>> 0 < 256) {
      __label__ = 10;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 10:
    var $37 = HEAPU32[$mem + ($_sum2 + 8) >> 2];
    var $40 = HEAPU32[$mem + ($_sum2 + 12) >> 2];
    if (($37 | 0) == ($40 | 0)) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    var $46 = HEAP32[__gm_ >> 2] & (1 << $32 ^ -1);
    HEAP32[__gm_ >> 2] = $46;
    var $p_0 = $25;
    var $psize_0 = $26;
    __label__ = 49;
    break;
   case 12:
    var $51 = __gm_ + 40 + (($21 >>> 2 & 1073741822) << 2) | 0;
    if (($37 | 0) != ($51 | 0) & $37 >>> 0 < $5 >>> 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    if (($40 | 0) == ($51 | 0) | $40 >>> 0 >= $5 >>> 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 14:
    HEAP32[$37 + 12 >> 2] = $40;
    HEAP32[$40 + 8 >> 2] = $37;
    var $p_0 = $25;
    var $psize_0 = $26;
    __label__ = 49;
    break;
   case 15:
    _abort();
    throw "Reached an unreachable!";
   case 16:
    var $62 = $24;
    var $65 = HEAPU32[$mem + ($_sum2 + 24) >> 2];
    var $68 = HEAPU32[$mem + ($_sum2 + 12) >> 2];
    if (($68 | 0) == ($62 | 0)) {
      __label__ = 20;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    var $73 = HEAPU32[$mem + ($_sum2 + 8) >> 2];
    if ($73 >>> 0 < $5 >>> 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    HEAP32[$73 + 12 >> 2] = $68;
    HEAP32[$68 + 8 >> 2] = $73;
    var $R_1 = $68;
    __label__ = 27;
    break;
   case 19:
    _abort();
    throw "Reached an unreachable!";
   case 20:
    var $82 = $mem + ($_sum2 + 20) | 0;
    var $83 = HEAP32[$82 >> 2];
    if (($83 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      var $RP_0 = $82;
      var $R_0 = $83;
      __label__ = 22;
      break;
    }
   case 21:
    var $87 = $mem + ($_sum2 + 16) | 0;
    var $88 = HEAP32[$87 >> 2];
    if (($88 | 0) == 0) {
      var $R_1 = 0;
      __label__ = 27;
      break;
    } else {
      var $RP_0 = $87;
      var $R_0 = $88;
      __label__ = 22;
      break;
    }
   case 22:
    var $R_0;
    var $RP_0;
    var $90 = $R_0 + 20 | 0;
    var $91 = HEAP32[$90 >> 2];
    if (($91 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      var $RP_0 = $90;
      var $R_0 = $91;
      __label__ = 22;
      break;
    }
   case 23:
    var $94 = $R_0 + 16 | 0;
    var $95 = HEAPU32[$94 >> 2];
    if (($95 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      var $RP_0 = $94;
      var $R_0 = $95;
      __label__ = 22;
      break;
    }
   case 24:
    if ($RP_0 >>> 0 < $5 >>> 0) {
      __label__ = 26;
      break;
    } else {
      __label__ = 25;
      break;
    }
   case 25:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    __label__ = 27;
    break;
   case 26:
    _abort();
    throw "Reached an unreachable!";
   case 27:
    var $R_1;
    if (($65 | 0) == 0) {
      var $p_0 = $25;
      var $psize_0 = $26;
      __label__ = 49;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    var $106 = $mem + ($_sum2 + 28) | 0;
    var $108 = __gm_ + 304 + (HEAP32[$106 >> 2] << 2) | 0;
    if (($62 | 0) == (HEAP32[$108 >> 2] | 0)) {
      __label__ = 29;
      break;
    } else {
      __label__ = 31;
      break;
    }
   case 29:
    HEAP32[$108 >> 2] = $R_1;
    if (($R_1 | 0) == 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 30:
    var $116 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$106 >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $116;
    var $p_0 = $25;
    var $psize_0 = $26;
    __label__ = 49;
    break;
   case 31:
    if ($65 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 35;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $122 = $65 + 16 | 0;
    if ((HEAP32[$122 >> 2] | 0) == ($62 | 0)) {
      __label__ = 33;
      break;
    } else {
      __label__ = 34;
      break;
    }
   case 33:
    HEAP32[$122 >> 2] = $R_1;
    __label__ = 36;
    break;
   case 34:
    HEAP32[$65 + 20 >> 2] = $R_1;
    __label__ = 36;
    break;
   case 35:
    _abort();
    throw "Reached an unreachable!";
   case 36:
    if (($R_1 | 0) == 0) {
      var $p_0 = $25;
      var $psize_0 = $26;
      __label__ = 49;
      break;
    } else {
      __label__ = 37;
      break;
    }
   case 37:
    if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 38:
    HEAP32[$R_1 + 24 >> 2] = $65;
    var $139 = HEAPU32[$mem + ($_sum2 + 16) >> 2];
    if (($139 | 0) == 0) {
      __label__ = 42;
      break;
    } else {
      __label__ = 39;
      break;
    }
   case 39:
    if ($139 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 41;
      break;
    } else {
      __label__ = 40;
      break;
    }
   case 40:
    HEAP32[$R_1 + 16 >> 2] = $139;
    HEAP32[$139 + 24 >> 2] = $R_1;
    __label__ = 42;
    break;
   case 41:
    _abort();
    throw "Reached an unreachable!";
   case 42:
    var $152 = HEAPU32[$mem + ($_sum2 + 20) >> 2];
    if (($152 | 0) == 0) {
      var $p_0 = $25;
      var $psize_0 = $26;
      __label__ = 49;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    if ($152 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    HEAP32[$R_1 + 20 >> 2] = $152;
    HEAP32[$152 + 24 >> 2] = $R_1;
    var $p_0 = $25;
    var $psize_0 = $26;
    __label__ = 49;
    break;
   case 45:
    _abort();
    throw "Reached an unreachable!";
   case 46:
    _abort();
    throw "Reached an unreachable!";
   case 47:
    var $165 = $mem + ($14 - 4) | 0;
    if ((HEAP32[$165 >> 2] & 3 | 0) == 3) {
      __label__ = 48;
      break;
    } else {
      var $p_0 = $25;
      var $psize_0 = $26;
      __label__ = 49;
      break;
    }
   case 48:
    HEAP32[__gm_ + 8 >> 2] = $26;
    var $171 = HEAP32[$165 >> 2] & -2;
    HEAP32[$165 >> 2] = $171;
    HEAP32[$mem + ($_sum2 + 4) >> 2] = $26 | 1;
    HEAP32[$15 >> 2] = $26;
    __label__ = 128;
    break;
   case 49:
    var $psize_0;
    var $p_0;
    var $177 = $p_0;
    if ($177 >>> 0 < $15 >>> 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 127;
      break;
    }
   case 50:
    var $181 = $mem + ($14 - 4) | 0;
    var $182 = HEAPU32[$181 >> 2];
    if (($182 & 1 | 0) == 0) {
      __label__ = 127;
      break;
    } else {
      __label__ = 51;
      break;
    }
   case 51:
    if (($182 & 2 | 0) == 0) {
      __label__ = 52;
      break;
    } else {
      __label__ = 101;
      break;
    }
   case 52:
    if (($16 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0)) {
      __label__ = 53;
      break;
    } else {
      __label__ = 57;
      break;
    }
   case 53:
    var $193 = HEAP32[__gm_ + 12 >> 2] + $psize_0 | 0;
    HEAP32[__gm_ + 12 >> 2] = $193;
    HEAP32[__gm_ + 24 >> 2] = $p_0;
    var $194 = $193 | 1;
    HEAP32[$p_0 + 4 >> 2] = $194;
    if (($p_0 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    HEAP32[__gm_ + 20 >> 2] = 0;
    HEAP32[__gm_ + 8 >> 2] = 0;
    __label__ = 55;
    break;
   case 55:
    if ($193 >>> 0 > HEAPU32[__gm_ + 28 >> 2] >>> 0) {
      __label__ = 56;
      break;
    } else {
      __label__ = 128;
      break;
    }
   case 56:
    var $203 = _sys_trim(0);
    __label__ = 128;
    break;
   case 57:
    if (($16 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 58;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 58:
    var $209 = HEAP32[__gm_ + 8 >> 2] + $psize_0 | 0;
    HEAP32[__gm_ + 8 >> 2] = $209;
    HEAP32[__gm_ + 20 >> 2] = $p_0;
    var $210 = $209 | 1;
    HEAP32[$p_0 + 4 >> 2] = $210;
    var $213 = $177 + $209 | 0;
    HEAP32[$213 >> 2] = $209;
    __label__ = 128;
    break;
   case 59:
    var $216 = ($182 & -8) + $psize_0 | 0;
    var $217 = $182 >>> 3;
    if ($182 >>> 0 < 256) {
      __label__ = 60;
      break;
    } else {
      __label__ = 68;
      break;
    }
   case 60:
    var $222 = HEAPU32[$mem + $14 >> 2];
    var $225 = HEAPU32[$mem + ($14 | 4) >> 2];
    if (($222 | 0) == ($225 | 0)) {
      __label__ = 61;
      break;
    } else {
      __label__ = 62;
      break;
    }
   case 61:
    var $231 = HEAP32[__gm_ >> 2] & (1 << $217 ^ -1);
    HEAP32[__gm_ >> 2] = $231;
    __label__ = 99;
    break;
   case 62:
    var $236 = __gm_ + 40 + (($182 >>> 2 & 1073741822) << 2) | 0;
    if (($222 | 0) == ($236 | 0)) {
      __label__ = 64;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 63:
    if ($222 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 67;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    if (($225 | 0) == ($236 | 0)) {
      __label__ = 66;
      break;
    } else {
      __label__ = 65;
      break;
    }
   case 65:
    if ($225 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 67;
      break;
    } else {
      __label__ = 66;
      break;
    }
   case 66:
    HEAP32[$222 + 12 >> 2] = $225;
    HEAP32[$225 + 8 >> 2] = $222;
    __label__ = 99;
    break;
   case 67:
    _abort();
    throw "Reached an unreachable!";
   case 68:
    var $251 = $15;
    var $254 = HEAPU32[$mem + ($14 + 16) >> 2];
    var $257 = HEAPU32[$mem + ($14 | 4) >> 2];
    if (($257 | 0) == ($251 | 0)) {
      __label__ = 72;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 69:
    var $262 = HEAPU32[$mem + $14 >> 2];
    if ($262 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 71;
      break;
    } else {
      __label__ = 70;
      break;
    }
   case 70:
    HEAP32[$262 + 12 >> 2] = $257;
    HEAP32[$257 + 8 >> 2] = $262;
    var $R7_1 = $257;
    __label__ = 79;
    break;
   case 71:
    _abort();
    throw "Reached an unreachable!";
   case 72:
    var $272 = $mem + ($14 + 12) | 0;
    var $273 = HEAP32[$272 >> 2];
    if (($273 | 0) == 0) {
      __label__ = 73;
      break;
    } else {
      var $RP9_0 = $272;
      var $R7_0 = $273;
      __label__ = 74;
      break;
    }
   case 73:
    var $277 = $mem + ($14 + 8) | 0;
    var $278 = HEAP32[$277 >> 2];
    if (($278 | 0) == 0) {
      var $R7_1 = 0;
      __label__ = 79;
      break;
    } else {
      var $RP9_0 = $277;
      var $R7_0 = $278;
      __label__ = 74;
      break;
    }
   case 74:
    var $R7_0;
    var $RP9_0;
    var $280 = $R7_0 + 20 | 0;
    var $281 = HEAP32[$280 >> 2];
    if (($281 | 0) == 0) {
      __label__ = 75;
      break;
    } else {
      var $RP9_0 = $280;
      var $R7_0 = $281;
      __label__ = 74;
      break;
    }
   case 75:
    var $284 = $R7_0 + 16 | 0;
    var $285 = HEAPU32[$284 >> 2];
    if (($285 | 0) == 0) {
      __label__ = 76;
      break;
    } else {
      var $RP9_0 = $284;
      var $R7_0 = $285;
      __label__ = 74;
      break;
    }
   case 76:
    if ($RP9_0 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 78;
      break;
    } else {
      __label__ = 77;
      break;
    }
   case 77:
    HEAP32[$RP9_0 >> 2] = 0;
    var $R7_1 = $R7_0;
    __label__ = 79;
    break;
   case 78:
    _abort();
    throw "Reached an unreachable!";
   case 79:
    var $R7_1;
    if (($254 | 0) == 0) {
      __label__ = 99;
      break;
    } else {
      __label__ = 80;
      break;
    }
   case 80:
    var $297 = $mem + ($14 + 20) | 0;
    var $299 = __gm_ + 304 + (HEAP32[$297 >> 2] << 2) | 0;
    if (($251 | 0) == (HEAP32[$299 >> 2] | 0)) {
      __label__ = 81;
      break;
    } else {
      __label__ = 83;
      break;
    }
   case 81:
    HEAP32[$299 >> 2] = $R7_1;
    if (($R7_1 | 0) == 0) {
      __label__ = 82;
      break;
    } else {
      __label__ = 89;
      break;
    }
   case 82:
    var $307 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$297 >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $307;
    __label__ = 99;
    break;
   case 83:
    if ($254 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 87;
      break;
    } else {
      __label__ = 84;
      break;
    }
   case 84:
    var $313 = $254 + 16 | 0;
    if ((HEAP32[$313 >> 2] | 0) == ($251 | 0)) {
      __label__ = 85;
      break;
    } else {
      __label__ = 86;
      break;
    }
   case 85:
    HEAP32[$313 >> 2] = $R7_1;
    __label__ = 88;
    break;
   case 86:
    HEAP32[$254 + 20 >> 2] = $R7_1;
    __label__ = 88;
    break;
   case 87:
    _abort();
    throw "Reached an unreachable!";
   case 88:
    if (($R7_1 | 0) == 0) {
      __label__ = 99;
      break;
    } else {
      __label__ = 89;
      break;
    }
   case 89:
    if ($R7_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 98;
      break;
    } else {
      __label__ = 90;
      break;
    }
   case 90:
    HEAP32[$R7_1 + 24 >> 2] = $254;
    var $330 = HEAPU32[$mem + ($14 + 8) >> 2];
    if (($330 | 0) == 0) {
      __label__ = 94;
      break;
    } else {
      __label__ = 91;
      break;
    }
   case 91:
    if ($330 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 93;
      break;
    } else {
      __label__ = 92;
      break;
    }
   case 92:
    HEAP32[$R7_1 + 16 >> 2] = $330;
    HEAP32[$330 + 24 >> 2] = $R7_1;
    __label__ = 94;
    break;
   case 93:
    _abort();
    throw "Reached an unreachable!";
   case 94:
    var $343 = HEAPU32[$mem + ($14 + 12) >> 2];
    if (($343 | 0) == 0) {
      __label__ = 99;
      break;
    } else {
      __label__ = 95;
      break;
    }
   case 95:
    if ($343 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 97;
      break;
    } else {
      __label__ = 96;
      break;
    }
   case 96:
    HEAP32[$R7_1 + 20 >> 2] = $343;
    HEAP32[$343 + 24 >> 2] = $R7_1;
    __label__ = 99;
    break;
   case 97:
    _abort();
    throw "Reached an unreachable!";
   case 98:
    _abort();
    throw "Reached an unreachable!";
   case 99:
    HEAP32[$p_0 + 4 >> 2] = $216 | 1;
    HEAP32[$177 + $216 >> 2] = $216;
    if (($p_0 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 100;
      break;
    } else {
      var $psize_1 = $216;
      __label__ = 102;
      break;
    }
   case 100:
    HEAP32[__gm_ + 8 >> 2] = $216;
    __label__ = 128;
    break;
   case 101:
    HEAP32[$181 >> 2] = $182 & -2;
    HEAP32[$p_0 + 4 >> 2] = $psize_0 | 1;
    HEAP32[$177 + $psize_0 >> 2] = $psize_0;
    var $psize_1 = $psize_0;
    __label__ = 102;
    break;
   case 102:
    var $psize_1;
    if ($psize_1 >>> 0 < 256) {
      __label__ = 103;
      break;
    } else {
      __label__ = 108;
      break;
    }
   case 103:
    var $373 = $psize_1 >>> 2 & 1073741822;
    var $375 = __gm_ + 40 + ($373 << 2) | 0;
    var $376 = HEAPU32[__gm_ >> 2];
    var $377 = 1 << ($psize_1 >>> 3);
    if (($376 & $377 | 0) == 0) {
      __label__ = 104;
      break;
    } else {
      __label__ = 105;
      break;
    }
   case 104:
    HEAP32[__gm_ >> 2] = $376 | $377;
    var $F16_0 = $375;
    var $_pre_phi = __gm_ + 40 + ($373 + 2 << 2) | 0;
    __label__ = 107;
    break;
   case 105:
    var $383 = __gm_ + 40 + ($373 + 2 << 2) | 0;
    var $384 = HEAPU32[$383 >> 2];
    if ($384 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 106;
      break;
    } else {
      var $F16_0 = $384;
      var $_pre_phi = $383;
      __label__ = 107;
      break;
    }
   case 106:
    _abort();
    throw "Reached an unreachable!";
   case 107:
    var $_pre_phi;
    var $F16_0;
    HEAP32[$_pre_phi >> 2] = $p_0;
    HEAP32[$F16_0 + 12 >> 2] = $p_0;
    HEAP32[$p_0 + 8 >> 2] = $F16_0;
    HEAP32[$p_0 + 12 >> 2] = $375;
    __label__ = 128;
    break;
   case 108:
    var $394 = $p_0;
    var $395 = $psize_1 >>> 8;
    if (($395 | 0) == 0) {
      var $I18_0 = 0;
      __label__ = 111;
      break;
    } else {
      __label__ = 109;
      break;
    }
   case 109:
    if ($psize_1 >>> 0 > 16777215) {
      var $I18_0 = 31;
      __label__ = 111;
      break;
    } else {
      __label__ = 110;
      break;
    }
   case 110:
    var $402 = ($395 + 1048320 | 0) >>> 16 & 8;
    var $403 = $395 << $402;
    var $406 = ($403 + 520192 | 0) >>> 16 & 4;
    var $407 = $403 << $406;
    var $410 = ($407 + 245760 | 0) >>> 16 & 2;
    var $416 = 14 - ($406 | $402 | $410) + ($407 << $410 >>> 15) | 0;
    var $I18_0 = $psize_1 >>> (($416 + 7 | 0) >>> 0) & 1 | $416 << 1;
    __label__ = 111;
    break;
   case 111:
    var $I18_0;
    var $423 = __gm_ + 304 + ($I18_0 << 2) | 0;
    HEAP32[$p_0 + 28 >> 2] = $I18_0;
    HEAP32[$p_0 + 20 >> 2] = 0;
    HEAP32[$p_0 + 16 >> 2] = 0;
    var $427 = HEAP32[__gm_ + 4 >> 2];
    var $428 = 1 << $I18_0;
    if (($427 & $428 | 0) == 0) {
      __label__ = 112;
      break;
    } else {
      __label__ = 113;
      break;
    }
   case 112:
    var $432 = $427 | $428;
    HEAP32[__gm_ + 4 >> 2] = $432;
    HEAP32[$423 >> 2] = $394;
    HEAP32[$p_0 + 24 >> 2] = $423;
    HEAP32[$p_0 + 12 >> 2] = $p_0;
    HEAP32[$p_0 + 8 >> 2] = $p_0;
    __label__ = 125;
    break;
   case 113:
    var $437 = HEAP32[$423 >> 2];
    if (($I18_0 | 0) == 31) {
      var $443 = 0;
      __label__ = 115;
      break;
    } else {
      __label__ = 114;
      break;
    }
   case 114:
    var $443 = 25 - ($I18_0 >>> 1) | 0;
    __label__ = 115;
    break;
   case 115:
    var $443;
    var $K19_0 = $psize_1 << $443;
    var $T_0 = $437;
    __label__ = 116;
    break;
   case 116:
    var $T_0;
    var $K19_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
      __label__ = 121;
      break;
    } else {
      __label__ = 117;
      break;
    }
   case 117:
    var $452 = $T_0 + 16 + ($K19_0 >>> 31 << 2) | 0;
    var $453 = HEAPU32[$452 >> 2];
    if (($453 | 0) == 0) {
      __label__ = 118;
      break;
    } else {
      var $K19_0 = $K19_0 << 1;
      var $T_0 = $453;
      __label__ = 116;
      break;
    }
   case 118:
    if ($452 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 120;
      break;
    } else {
      __label__ = 119;
      break;
    }
   case 119:
    HEAP32[$452 >> 2] = $394;
    HEAP32[$p_0 + 24 >> 2] = $T_0;
    HEAP32[$p_0 + 12 >> 2] = $p_0;
    HEAP32[$p_0 + 8 >> 2] = $p_0;
    __label__ = 125;
    break;
   case 120:
    _abort();
    throw "Reached an unreachable!";
   case 121:
    var $466 = $T_0 + 8 | 0;
    var $467 = HEAPU32[$466 >> 2];
    var $469 = HEAPU32[__gm_ + 16 >> 2];
    if ($T_0 >>> 0 < $469 >>> 0) {
      __label__ = 124;
      break;
    } else {
      __label__ = 122;
      break;
    }
   case 122:
    if ($467 >>> 0 < $469 >>> 0) {
      __label__ = 124;
      break;
    } else {
      __label__ = 123;
      break;
    }
   case 123:
    HEAP32[$467 + 12 >> 2] = $394;
    HEAP32[$466 >> 2] = $394;
    HEAP32[$p_0 + 8 >> 2] = $467;
    HEAP32[$p_0 + 12 >> 2] = $T_0;
    HEAP32[$p_0 + 24 >> 2] = 0;
    __label__ = 125;
    break;
   case 124:
    _abort();
    throw "Reached an unreachable!";
   case 125:
    var $481 = HEAP32[__gm_ + 32 >> 2] - 1 | 0;
    HEAP32[__gm_ + 32 >> 2] = $481;
    if (($481 | 0) == 0) {
      __label__ = 126;
      break;
    } else {
      __label__ = 128;
      break;
    }
   case 126:
    _release_unused_segments();
    __label__ = 128;
    break;
   case 127:
    _abort();
    throw "Reached an unreachable!";
   case 128:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_free["X"] = 1;

function _malloc_footprint() {
  return HEAP32[__gm_ + 432 >> 2];
}

function _malloc_max_footprint() {
  return HEAP32[__gm_ + 436 >> 2];
}

function _malloc_usable_size($mem) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($mem | 0) == 0) {
      var $_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $5 = HEAP32[$mem - 4 >> 2];
    var $6 = $5 & 3;
    if (($6 | 0) == 1) {
      var $_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    var $11 = ($6 | 0) == 0 ? 8 : 4;
    var $_0 = ($5 & -8) - $11 | 0;
    __label__ = 5;
    break;
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mmap_resize($oldp, $nb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $3 = HEAP32[$oldp + 4 >> 2] & -8;
    if ($nb >>> 0 < 256) {
      var $_0 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    if ($3 >>> 0 < ($nb + 4 | 0) >>> 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($3 - $nb | 0) >>> 0 > HEAP32[_mparams + 8 >> 2] << 1 >>> 0) {
      __label__ = 5;
      break;
    } else {
      var $_0 = $oldp;
      __label__ = 6;
      break;
    }
   case 5:
    var $_0 = 0;
    __label__ = 6;
    break;
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _calloc($n_elements, $elem_size) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($n_elements | 0) == 0) {
      var $req_0 = 0;
      __label__ = 5;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $3 = (i64Math.multiply($elem_size, 0, $n_elements, 0), i64Math.result[0]);
    if (($elem_size | $n_elements) >>> 0 > 65535) {
      __label__ = 4;
      break;
    } else {
      var $req_0 = $3;
      __label__ = 5;
      break;
    }
   case 4:
    var $7 = Math.floor(($3 >>> 0) / ($n_elements >>> 0));
    var $_ = ($7 | 0) == ($elem_size | 0) ? $3 : -1;
    var $req_0 = $_;
    __label__ = 5;
    break;
   case 5:
    var $req_0;
    var $10 = _malloc($req_0);
    if (($10 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if ((HEAP32[$10 - 4 >> 2] & 3 | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    _memset($10, 0, $req_0, 1);
    __label__ = 8;
    break;
   case 8:
    return $10;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _realloc($oldmem, $bytes) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($oldmem | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = _malloc($bytes);
    var $_0 = $3;
    __label__ = 5;
    break;
   case 4:
    var $5 = _internal_realloc($oldmem, $bytes);
    var $_0 = $5;
    __label__ = 5;
    break;
   case 5:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _memalign($alignment, $bytes) {
  var $1 = _internal_memalign($alignment, $bytes);
  return $1;
}

function _internal_memalign($alignment, $bytes) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($alignment >>> 0 < 9) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = _malloc($bytes);
    var $_0 = $3;
    __label__ = 25;
    break;
   case 4:
    var $_alignment = $alignment >>> 0 < 16 ? 16 : $alignment;
    if (($_alignment - 1 & $_alignment | 0) == 0) {
      var $_1 = $_alignment;
      __label__ = 6;
      break;
    } else {
      var $a_0 = 16;
      __label__ = 5;
      break;
    }
   case 5:
    var $a_0;
    if ($a_0 >>> 0 < $_alignment >>> 0) {
      var $a_0 = $a_0 << 1;
      __label__ = 5;
      break;
    } else {
      var $_1 = $a_0;
      __label__ = 6;
      break;
    }
   case 6:
    var $_1;
    if ((-64 - $_1 | 0) >>> 0 > $bytes >>> 0) {
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $14 = ___errno();
    HEAP32[$14 >> 2] = 12;
    var $_0 = 0;
    __label__ = 25;
    break;
   case 8:
    if ($bytes >>> 0 < 11) {
      var $21 = 16;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $21 = $bytes + 11 & -8;
    __label__ = 10;
    break;
   case 10:
    var $21;
    var $24 = _malloc($_1 + 12 + $21 | 0);
    if (($24 | 0) == 0) {
      var $_0 = 0;
      __label__ = 25;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $27 = $24 - 8 | 0;
    if ((($24 >>> 0) % ($_1 >>> 0) | 0) == 0) {
      var $p_0_in = $27;
      var $leader_1 = 0;
      __label__ = 17;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $36 = $24 + ($_1 - 1) & -$_1;
    var $37 = $36 - 8 | 0;
    var $39 = $27;
    if (($37 - $39 | 0) >>> 0 > 15) {
      var $45 = $37;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $45 = $36 + ($_1 - 8) | 0;
    __label__ = 14;
    break;
   case 14:
    var $45;
    var $47 = $45 - $39 | 0;
    var $49 = $24 - 4 | 0;
    var $50 = HEAP32[$49 >> 2];
    var $52 = ($50 & -8) - $47 | 0;
    if (($50 & 3 | 0) == 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 15:
    var $58 = HEAP32[$27 >> 2] + $47 | 0;
    HEAP32[$45 >> 2] = $58;
    HEAP32[$45 + 4 >> 2] = $52;
    var $p_0_in = $45;
    var $leader_1 = 0;
    __label__ = 17;
    break;
   case 16:
    var $64 = $45 + 4 | 0;
    var $68 = $52 | HEAP32[$64 >> 2] & 1 | 2;
    HEAP32[$64 >> 2] = $68;
    var $70 = $45 + ($52 + 4) | 0;
    var $72 = HEAP32[$70 >> 2] | 1;
    HEAP32[$70 >> 2] = $72;
    var $76 = $47 | HEAP32[$49 >> 2] & 1 | 2;
    HEAP32[$49 >> 2] = $76;
    var $78 = $24 + ($47 - 4) | 0;
    var $80 = HEAP32[$78 >> 2] | 1;
    HEAP32[$78 >> 2] = $80;
    var $p_0_in = $45;
    var $leader_1 = $24;
    __label__ = 17;
    break;
   case 17:
    var $leader_1;
    var $p_0_in;
    var $82 = $p_0_in + 4 | 0;
    var $83 = HEAPU32[$82 >> 2];
    if (($83 & 3 | 0) == 0) {
      var $trailer_0 = 0;
      __label__ = 20;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    var $87 = $83 & -8;
    if ($87 >>> 0 > ($21 + 16 | 0) >>> 0) {
      __label__ = 19;
      break;
    } else {
      var $trailer_0 = 0;
      __label__ = 20;
      break;
    }
   case 19:
    var $91 = $87 - $21 | 0;
    HEAP32[$82 >> 2] = $21 | $83 & 1 | 2;
    HEAP32[$p_0_in + ($21 | 4) >> 2] = $91 | 3;
    var $99 = $p_0_in + ($87 | 4) | 0;
    var $101 = HEAP32[$99 >> 2] | 1;
    HEAP32[$99 >> 2] = $101;
    var $trailer_0 = $p_0_in + ($21 + 8) | 0;
    __label__ = 20;
    break;
   case 20:
    var $trailer_0;
    if (($leader_1 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    _free($leader_1);
    __label__ = 22;
    break;
   case 22:
    if (($trailer_0 | 0) == 0) {
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    _free($trailer_0);
    __label__ = 24;
    break;
   case 24:
    var $_0 = $p_0_in + 8 | 0;
    __label__ = 25;
    break;
   case 25:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_internal_memalign["X"] = 1;

function _independent_calloc($n_elements, $elem_size, $chunks) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $sz = __stackBase__;
  HEAP32[$sz >> 2] = $elem_size;
  var $1 = _ialloc($n_elements, $sz, 3, $chunks);
  STACKTOP = __stackBase__;
  return $1;
}

function _ialloc($n_elements, $sizes, $opts, $chunks) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    var $6 = ($n_elements | 0) == 0;
    if (($chunks | 0) == 0) {
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    if ($6) {
      var $_0 = $chunks;
      __label__ = 30;
      break;
    } else {
      var $marray_0 = $chunks;
      var $array_size_0 = 0;
      __label__ = 10;
      break;
    }
   case 6:
    if ($6) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $10 = _malloc(0);
    var $_0 = $10;
    __label__ = 30;
    break;
   case 8:
    var $13 = $n_elements << 2;
    if ($13 >>> 0 < 11) {
      var $marray_0 = 0;
      var $array_size_0 = 16;
      __label__ = 10;
      break;
    } else {
      __label__ = 9;
      break;
    }
   case 9:
    var $marray_0 = 0;
    var $array_size_0 = $13 + 11 & -8;
    __label__ = 10;
    break;
   case 10:
    var $array_size_0;
    var $marray_0;
    if (($opts & 1 | 0) == 0) {
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 11:
    if ($6) {
      var $element_size_0 = 0;
      var $contents_size_1 = 0;
      __label__ = 18;
      break;
    } else {
      var $contents_size_07 = 0;
      var $i_08 = 0;
      __label__ = 15;
      break;
    }
   case 12:
    var $22 = HEAPU32[$sizes >> 2];
    if ($22 >>> 0 < 11) {
      var $28 = 16;
      __label__ = 14;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 13:
    var $28 = $22 + 11 & -8;
    __label__ = 14;
    break;
   case 14:
    var $28;
    var $29 = (i64Math.multiply($28, 0, $n_elements, 0), i64Math.result[0]);
    var $element_size_0 = $28;
    var $contents_size_1 = $29;
    __label__ = 18;
    break;
   case 15:
    var $i_08;
    var $contents_size_07;
    var $31 = HEAPU32[$sizes + ($i_08 << 2) >> 2];
    if ($31 >>> 0 < 11) {
      var $37 = 16;
      __label__ = 17;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    var $37 = $31 + 11 & -8;
    __label__ = 17;
    break;
   case 17:
    var $37;
    var $38 = $37 + $contents_size_07 | 0;
    var $39 = $i_08 + 1 | 0;
    if (($39 | 0) == ($n_elements | 0)) {
      var $element_size_0 = 0;
      var $contents_size_1 = $38;
      __label__ = 18;
      break;
    } else {
      var $contents_size_07 = $38;
      var $i_08 = $39;
      __label__ = 15;
      break;
    }
   case 18:
    var $contents_size_1;
    var $element_size_0;
    var $43 = _malloc($array_size_0 - 4 + $contents_size_1 | 0);
    if (($43 | 0) == 0) {
      var $_0 = 0;
      __label__ = 30;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $46 = $43 - 8 | 0;
    var $50 = HEAP32[$43 - 4 >> 2] & -8;
    if (($opts & 2 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    var $55 = -4 - $array_size_0 + $50 | 0;
    _memset($43, 0, $55, 4);
    __label__ = 21;
    break;
   case 21:
    if (($marray_0 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      var $marray_1 = $marray_0;
      var $remainder_size_0 = $50;
      __label__ = 23;
      break;
    }
   case 22:
    var $61 = $43 + $contents_size_1 | 0;
    var $62 = $50 - $contents_size_1 | 3;
    HEAP32[$43 + ($contents_size_1 - 4) >> 2] = $62;
    var $marray_1 = $61;
    var $remainder_size_0 = $contents_size_1;
    __label__ = 23;
    break;
   case 23:
    var $remainder_size_0;
    var $marray_1;
    HEAP32[$marray_1 >> 2] = $43;
    var $66 = $n_elements - 1 | 0;
    if (($66 | 0) == 0) {
      var $p_0_in_lcssa = $46;
      var $remainder_size_1_lcssa = $remainder_size_0;
      __label__ = 29;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    var $68 = ($element_size_0 | 0) == 0;
    var $p_0_in3 = $46;
    var $remainder_size_14 = $remainder_size_0;
    var $i_15 = 0;
    __label__ = 25;
    break;
   case 25:
    var $i_15;
    var $remainder_size_14;
    var $p_0_in3;
    if ($68) {
      __label__ = 26;
      break;
    } else {
      var $size_0 = $element_size_0;
      __label__ = 28;
      break;
    }
   case 26:
    var $72 = HEAPU32[$sizes + ($i_15 << 2) >> 2];
    if ($72 >>> 0 < 11) {
      var $size_0 = 16;
      __label__ = 28;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    var $size_0 = $72 + 11 & -8;
    __label__ = 28;
    break;
   case 28:
    var $size_0;
    var $78 = $remainder_size_14 - $size_0 | 0;
    HEAP32[$p_0_in3 + 4 >> 2] = $size_0 | 3;
    var $82 = $p_0_in3 + $size_0 | 0;
    var $83 = $i_15 + 1 | 0;
    HEAP32[$marray_1 + ($83 << 2) >> 2] = $p_0_in3 + ($size_0 + 8) | 0;
    if (($83 | 0) == ($66 | 0)) {
      var $p_0_in_lcssa = $82;
      var $remainder_size_1_lcssa = $78;
      __label__ = 29;
      break;
    } else {
      var $p_0_in3 = $82;
      var $remainder_size_14 = $78;
      var $i_15 = $83;
      __label__ = 25;
      break;
    }
   case 29:
    var $remainder_size_1_lcssa;
    var $p_0_in_lcssa;
    HEAP32[$p_0_in_lcssa + 4 >> 2] = $remainder_size_1_lcssa | 3;
    var $_0 = $marray_1;
    __label__ = 30;
    break;
   case 30:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_ialloc["X"] = 1;

function _independent_comalloc($n_elements, $sizes, $chunks) {
  var $1 = _ialloc($n_elements, $sizes, 0, $chunks);
  return $1;
}

function _valloc($bytes) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    var $5 = HEAP32[_mparams + 4 >> 2];
    var $6 = _memalign($5, $bytes);
    return $6;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _pvalloc($bytes) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    var $5 = HEAP32[_mparams + 4 >> 2];
    var $9 = $bytes - 1 + $5 & -$5;
    var $10 = _memalign($5, $9);
    return $10;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _malloc_trim($pad) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    var $5 = _sys_trim($pad);
    return $5;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _mallinfo($agg_result) {
  _internal_mallinfo($agg_result);
  return;
}

function _internal_mallinfo($agg_result) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    var $5 = HEAPU32[__gm_ + 24 >> 2];
    if (($5 | 0) == 0) {
      var $nm_0_0 = 0;
      var $nm_1_0 = 0;
      var $nm_9_0 = 0;
      var $nm_8_0 = 0;
      var $nm_4_0 = 0;
      var $nm_5_0 = 0;
      var $nm_7_0 = 0;
      __label__ = 17;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $8 = HEAPU32[__gm_ + 12 >> 2];
    var $9 = $8 + 40 | 0;
    var $s_02 = __gm_ + 444 | 0;
    var $sum_03 = $9;
    var $mfree_04 = $9;
    var $nfree_05 = 1;
    __label__ = 6;
    break;
   case 6:
    var $nfree_05;
    var $mfree_04;
    var $sum_03;
    var $s_02;
    var $12 = HEAPU32[$s_02 >> 2];
    var $14 = $12 + 8 | 0;
    if (($14 & 7 | 0) == 0) {
      var $21 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $21 = -$14 & 7;
    __label__ = 8;
    break;
   case 8:
    var $21;
    var $23 = $s_02 + 4 | 0;
    var $q_0_in = $12 + $21 | 0;
    var $nfree_1 = $nfree_05;
    var $mfree_1 = $mfree_04;
    var $sum_1 = $sum_03;
    __label__ = 9;
    break;
   case 9:
    var $sum_1;
    var $mfree_1;
    var $nfree_1;
    var $q_0_in;
    if ($q_0_in >>> 0 < $12 >>> 0) {
      __label__ = 15;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    if ($q_0_in >>> 0 >= ($12 + HEAP32[$23 >> 2] | 0) >>> 0 | ($q_0_in | 0) == ($5 | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $34 = HEAP32[$q_0_in + 4 >> 2];
    if (($34 | 0) == 7) {
      __label__ = 15;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $37 = $34 & -8;
    var $38 = $37 + $sum_1 | 0;
    if (($34 & 3 | 0) == 1) {
      __label__ = 13;
      break;
    } else {
      var $nfree_2 = $nfree_1;
      var $mfree_2 = $mfree_1;
      __label__ = 14;
      break;
    }
   case 13:
    var $nfree_2 = $nfree_1 + 1 | 0;
    var $mfree_2 = $37 + $mfree_1 | 0;
    __label__ = 14;
    break;
   case 14:
    var $mfree_2;
    var $nfree_2;
    var $q_0_in = $q_0_in + $37 | 0;
    var $nfree_1 = $nfree_2;
    var $mfree_1 = $mfree_2;
    var $sum_1 = $38;
    __label__ = 9;
    break;
   case 15:
    var $47 = HEAPU32[$s_02 + 8 >> 2];
    if (($47 | 0) == 0) {
      __label__ = 16;
      break;
    } else {
      var $s_02 = $47;
      var $sum_03 = $sum_1;
      var $mfree_04 = $mfree_1;
      var $nfree_05 = $nfree_1;
      __label__ = 6;
      break;
    }
   case 16:
    var $50 = HEAP32[__gm_ + 432 >> 2];
    var $nm_0_0 = $sum_1;
    var $nm_1_0 = $nfree_1;
    var $nm_9_0 = $8;
    var $nm_8_0 = $mfree_1;
    var $nm_4_0 = $50 - $sum_1 | 0;
    var $nm_5_0 = HEAP32[__gm_ + 436 >> 2];
    var $nm_7_0 = $50 - $mfree_1 | 0;
    __label__ = 17;
    break;
   case 17:
    var $nm_7_0;
    var $nm_5_0;
    var $nm_4_0;
    var $nm_8_0;
    var $nm_9_0;
    var $nm_1_0;
    var $nm_0_0;
    HEAP32[$agg_result >> 2] = $nm_0_0;
    HEAP32[$agg_result + 4 >> 2] = $nm_1_0;
    HEAP32[$agg_result + 8 >> 2] = 0;
    HEAP32[$agg_result + 12 >> 2] = 0;
    HEAP32[$agg_result + 16 >> 2] = $nm_4_0;
    HEAP32[$agg_result + 20 >> 2] = $nm_5_0;
    HEAP32[$agg_result + 24 >> 2] = 0;
    HEAP32[$agg_result + 28 >> 2] = $nm_7_0;
    HEAP32[$agg_result + 32 >> 2] = $nm_8_0;
    HEAP32[$agg_result + 36 >> 2] = $nm_9_0;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_internal_mallinfo["X"] = 1;

function _malloc_stats() {
  _internal_malloc_stats();
  return;
}

function _internal_malloc_stats() {
  var __stackBase__ = STACKTOP;
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    var $5 = HEAPU32[__gm_ + 24 >> 2];
    if (($5 | 0) == 0) {
      var $maxfp_0 = 0;
      var $fp_0 = 0;
      var $used_3 = 0;
      __label__ = 14;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $8 = HEAP32[__gm_ + 436 >> 2];
    var $9 = HEAPU32[__gm_ + 432 >> 2];
    var $s_03 = __gm_ + 444 | 0;
    var $used_04 = $9 - 40 - HEAP32[__gm_ + 12 >> 2] | 0;
    __label__ = 6;
    break;
   case 6:
    var $used_04;
    var $s_03;
    var $14 = HEAPU32[$s_03 >> 2];
    var $16 = $14 + 8 | 0;
    if (($16 & 7 | 0) == 0) {
      var $23 = 0;
      __label__ = 8;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $23 = -$16 & 7;
    __label__ = 8;
    break;
   case 8:
    var $23;
    var $25 = $s_03 + 4 | 0;
    var $q_0_in = $14 + $23 | 0;
    var $used_1 = $used_04;
    __label__ = 9;
    break;
   case 9:
    var $used_1;
    var $q_0_in;
    if ($q_0_in >>> 0 < $14 >>> 0) {
      __label__ = 13;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 10:
    if ($q_0_in >>> 0 >= ($14 + HEAP32[$25 >> 2] | 0) >>> 0 | ($q_0_in | 0) == ($5 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 11:
    var $36 = HEAP32[$q_0_in + 4 >> 2];
    if (($36 | 0) == 7) {
      __label__ = 13;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $40 = $36 & -8;
    var $used_2 = ($36 & 3 | 0) == 1 ? $used_1 - $40 | 0 : $used_1;
    var $q_0_in = $q_0_in + $40 | 0;
    var $used_1 = $used_2;
    __label__ = 9;
    break;
   case 13:
    var $44 = HEAPU32[$s_03 + 8 >> 2];
    if (($44 | 0) == 0) {
      var $maxfp_0 = $8;
      var $fp_0 = $9;
      var $used_3 = $used_1;
      __label__ = 14;
      break;
    } else {
      var $s_03 = $44;
      var $used_04 = $used_1;
      __label__ = 6;
      break;
    }
   case 14:
    var $used_3;
    var $fp_0;
    var $maxfp_0;
    var $46 = HEAP32[_stderr >> 2];
    var $47 = _fprintf($46, STRING_TABLE.__str554 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $maxfp_0, tempInt));
    var $48 = HEAP32[_stderr >> 2];
    var $49 = _fprintf($48, STRING_TABLE.__str1555 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $fp_0, tempInt));
    var $50 = HEAP32[_stderr >> 2];
    var $51 = _fprintf($50, STRING_TABLE.__str2556 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $used_3, tempInt));
    STACKTOP = __stackBase__;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_internal_malloc_stats["X"] = 1;

function _mallopt($param_number, $value) {
  var $1 = _change_mparam($param_number, $value);
  return $1;
}

function _change_mparam($param_number, $value) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    _init_mparams();
    __label__ = 4;
    break;
   case 4:
    if (($param_number | 0) == -1) {
      __label__ = 5;
      break;
    } else if (($param_number | 0) == -2) {
      __label__ = 6;
      break;
    } else if (($param_number | 0) == -3) {
      __label__ = 9;
      break;
    } else {
      var $_0 = 0;
      __label__ = 10;
      break;
    }
   case 5:
    HEAP32[_mparams + 16 >> 2] = $value;
    var $_0 = 1;
    __label__ = 10;
    break;
   case 6:
    if (HEAPU32[_mparams + 4 >> 2] >>> 0 > $value >>> 0) {
      var $_0 = 0;
      __label__ = 10;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if (($value - 1 & $value | 0) == 0) {
      __label__ = 8;
      break;
    } else {
      var $_0 = 0;
      __label__ = 10;
      break;
    }
   case 8:
    HEAP32[_mparams + 8 >> 2] = $value;
    var $_0 = 1;
    __label__ = 10;
    break;
   case 9:
    HEAP32[_mparams + 12 >> 2] = $value;
    var $_0 = 1;
    __label__ = 10;
    break;
   case 10:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _internal_realloc($oldmem, $bytes) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ($bytes >>> 0 > 4294967231) {
      __label__ = 3;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 3:
    var $3 = ___errno();
    HEAP32[$3 >> 2] = 12;
    var $_0 = 0;
    __label__ = 24;
    break;
   case 4:
    var $5 = $oldmem - 8 | 0;
    var $6 = $5;
    var $8 = $oldmem - 4 | 0;
    var $9 = HEAPU32[$8 >> 2];
    var $10 = $9 & -8;
    var $_sum = $10 - 8 | 0;
    var $12 = $oldmem + $_sum | 0;
    if ($5 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $16 = $9 & 3;
    if (($16 | 0) != 1 & ($_sum | 0) > -8) {
      __label__ = 6;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 6:
    var $21 = $oldmem + ($10 - 4) | 0;
    if ((HEAP32[$21 >> 2] & 1 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    if ($bytes >>> 0 < 11) {
      var $31 = 16;
      __label__ = 9;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 8:
    var $31 = $bytes + 11 & -8;
    __label__ = 9;
    break;
   case 9:
    var $31;
    if (($16 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 10:
    var $34 = _mmap_resize($6, $31);
    var $extra_0 = 0;
    var $newp_0 = $34;
    __label__ = 18;
    break;
   case 11:
    if ($10 >>> 0 < $31 >>> 0) {
      __label__ = 14;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 12:
    var $38 = $10 - $31 | 0;
    if ($38 >>> 0 > 15) {
      __label__ = 13;
      break;
    } else {
      var $extra_0 = 0;
      var $newp_0 = $6;
      __label__ = 18;
      break;
    }
   case 13:
    HEAP32[$8 >> 2] = $31 | $9 & 1 | 2;
    HEAP32[$oldmem + ($31 - 4) >> 2] = $38 | 3;
    var $48 = HEAP32[$21 >> 2] | 1;
    HEAP32[$21 >> 2] = $48;
    var $extra_0 = $oldmem + $31 | 0;
    var $newp_0 = $6;
    __label__ = 18;
    break;
   case 14:
    if (($12 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0)) {
      __label__ = 15;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 15:
    var $55 = HEAP32[__gm_ + 12 >> 2] + $10 | 0;
    if ($55 >>> 0 > $31 >>> 0) {
      __label__ = 16;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 16:
    var $58 = $55 - $31 | 0;
    var $60 = $oldmem + ($31 - 8) | 0;
    HEAP32[$8 >> 2] = $31 | $9 & 1 | 2;
    var $66 = $58 | 1;
    HEAP32[$oldmem + ($31 - 4) >> 2] = $66;
    HEAP32[__gm_ + 24 >> 2] = $60;
    HEAP32[__gm_ + 12 >> 2] = $58;
    var $extra_0 = 0;
    var $newp_0 = $6;
    __label__ = 18;
    break;
   case 17:
    _abort();
    throw "Reached an unreachable!";
   case 18:
    var $newp_0;
    var $extra_0;
    if (($newp_0 | 0) == 0) {
      __label__ = 22;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    if (($extra_0 | 0) == 0) {
      __label__ = 21;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 20:
    _free($extra_0);
    __label__ = 21;
    break;
   case 21:
    var $_0 = $newp_0 + 8 | 0;
    __label__ = 24;
    break;
   case 22:
    var $75 = _malloc($bytes);
    if (($75 | 0) == 0) {
      var $_0 = 0;
      __label__ = 24;
      break;
    } else {
      __label__ = 23;
      break;
    }
   case 23:
    var $81 = (HEAP32[$8 >> 2] & 3 | 0) == 0 ? 8 : 4;
    var $82 = $10 - $81 | 0;
    var $84 = $82 >>> 0 < $bytes >>> 0 ? $82 : $bytes;
    _memcpy($75, $oldmem, $84, 1);
    _free($oldmem);
    var $_0 = $75;
    __label__ = 24;
    break;
   case 24:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_internal_realloc["X"] = 1;

function _init_mparams() {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if ((HEAP32[_mparams >> 2] | 0) == 0) {
      __label__ = 3;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 3:
    var $4 = _sysconf(8);
    if (($4 - 1 & $4 | 0) == 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    _abort();
    throw "Reached an unreachable!";
   case 5:
    HEAP32[_mparams + 8 >> 2] = $4;
    HEAP32[_mparams + 4 >> 2] = $4;
    HEAP32[_mparams + 12 >> 2] = -1;
    HEAP32[_mparams + 16 >> 2] = 2097152;
    HEAP32[_mparams + 20 >> 2] = 0;
    HEAP32[__gm_ + 440 >> 2] = 0;
    var $10 = _time(0);
    HEAP32[_mparams >> 2] = $10 & -16 ^ 1431655768;
    __label__ = 6;
    break;
   case 6:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _segment_holding($addr) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $sp_0 = __gm_ + 444 | 0;
    __label__ = 3;
    break;
   case 3:
    var $sp_0;
    var $3 = HEAPU32[$sp_0 >> 2];
    if ($3 >>> 0 > $addr >>> 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 4;
      break;
    }
   case 4:
    if (($3 + HEAP32[$sp_0 + 4 >> 2] | 0) >>> 0 > $addr >>> 0) {
      var $_0 = $sp_0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $12 = HEAPU32[$sp_0 + 8 >> 2];
    if (($12 | 0) == 0) {
      var $_0 = 0;
      __label__ = 6;
      break;
    } else {
      var $sp_0 = $12;
      __label__ = 3;
      break;
    }
   case 6:
    var $_0;
    return $_0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _init_top($p, $psize) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = $p;
    var $3 = $p + 8 | 0;
    if (($3 & 7 | 0) == 0) {
      var $10 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $10 = -$3 & 7;
    __label__ = 4;
    break;
   case 4:
    var $10;
    var $13 = $psize - $10 | 0;
    HEAP32[__gm_ + 24 >> 2] = $1 + $10 | 0;
    HEAP32[__gm_ + 12 >> 2] = $13;
    HEAP32[$1 + ($10 + 4) >> 2] = $13 | 1;
    HEAP32[$1 + ($psize + 4) >> 2] = 40;
    var $19 = HEAP32[_mparams + 16 >> 2];
    HEAP32[__gm_ + 28 >> 2] = $19;
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _init_bins() {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $i_02 = 0;
    __label__ = 3;
    break;
   case 3:
    var $i_02;
    var $2 = $i_02 << 1;
    var $4 = __gm_ + 40 + ($2 << 2) | 0;
    HEAP32[__gm_ + 40 + ($2 + 3 << 2) >> 2] = $4;
    HEAP32[__gm_ + 40 + ($2 + 2 << 2) >> 2] = $4;
    var $7 = $i_02 + 1 | 0;
    if (($7 | 0) == 32) {
      __label__ = 4;
      break;
    } else {
      var $i_02 = $7;
      __label__ = 3;
      break;
    }
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function _prepend_alloc($newbase, $oldbase, $nb) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = $newbase + 8 | 0;
    if (($2 & 7 | 0) == 0) {
      var $9 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $9 = -$2 & 7;
    __label__ = 4;
    break;
   case 4:
    var $9;
    var $10 = $newbase + $9 | 0;
    var $12 = $oldbase + 8 | 0;
    if (($12 & 7 | 0) == 0) {
      var $19 = 0;
      __label__ = 6;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    var $19 = -$12 & 7;
    __label__ = 6;
    break;
   case 6:
    var $19;
    var $20 = $oldbase + $19 | 0;
    var $21 = $20;
    var $_sum = $9 + $nb | 0;
    var $25 = $newbase + $_sum | 0;
    var $26 = $25;
    var $27 = $20 - $10 - $nb | 0;
    HEAP32[$newbase + ($9 + 4) >> 2] = $nb | 3;
    if (($21 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0)) {
      __label__ = 7;
      break;
    } else {
      __label__ = 8;
      break;
    }
   case 7:
    var $35 = HEAP32[__gm_ + 12 >> 2] + $27 | 0;
    HEAP32[__gm_ + 12 >> 2] = $35;
    HEAP32[__gm_ + 24 >> 2] = $26;
    var $36 = $35 | 1;
    HEAP32[$newbase + ($_sum + 4) >> 2] = $36;
    __label__ = 75;
    break;
   case 8:
    if (($21 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $44 = HEAP32[__gm_ + 8 >> 2] + $27 | 0;
    HEAP32[__gm_ + 8 >> 2] = $44;
    HEAP32[__gm_ + 20 >> 2] = $26;
    var $45 = $44 | 1;
    HEAP32[$newbase + ($_sum + 4) >> 2] = $45;
    var $49 = $newbase + ($44 + $_sum) | 0;
    HEAP32[$49 >> 2] = $44;
    __label__ = 75;
    break;
   case 10:
    var $53 = HEAPU32[$oldbase + ($19 + 4) >> 2];
    if (($53 & 3 | 0) == 1) {
      __label__ = 11;
      break;
    } else {
      var $oldfirst_0 = $21;
      var $qsize_0 = $27;
      __label__ = 52;
      break;
    }
   case 11:
    var $57 = $53 & -8;
    var $58 = $53 >>> 3;
    if ($53 >>> 0 < 256) {
      __label__ = 12;
      break;
    } else {
      __label__ = 20;
      break;
    }
   case 12:
    var $63 = HEAPU32[$oldbase + ($19 | 8) >> 2];
    var $66 = HEAPU32[$oldbase + ($19 + 12) >> 2];
    if (($63 | 0) == ($66 | 0)) {
      __label__ = 13;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 13:
    var $72 = HEAP32[__gm_ >> 2] & (1 << $58 ^ -1);
    HEAP32[__gm_ >> 2] = $72;
    __label__ = 51;
    break;
   case 14:
    var $77 = __gm_ + 40 + (($53 >>> 2 & 1073741822) << 2) | 0;
    if (($63 | 0) == ($77 | 0)) {
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    if ($63 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 16;
      break;
    }
   case 16:
    if (($66 | 0) == ($77 | 0)) {
      __label__ = 18;
      break;
    } else {
      __label__ = 17;
      break;
    }
   case 17:
    if ($66 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 19;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 18:
    HEAP32[$63 + 12 >> 2] = $66;
    HEAP32[$66 + 8 >> 2] = $63;
    __label__ = 51;
    break;
   case 19:
    _abort();
    throw "Reached an unreachable!";
   case 20:
    var $92 = $20;
    var $95 = HEAPU32[$oldbase + ($19 | 24) >> 2];
    var $98 = HEAPU32[$oldbase + ($19 + 12) >> 2];
    if (($98 | 0) == ($92 | 0)) {
      __label__ = 24;
      break;
    } else {
      __label__ = 21;
      break;
    }
   case 21:
    var $103 = HEAPU32[$oldbase + ($19 | 8) >> 2];
    if ($103 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 23;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    HEAP32[$103 + 12 >> 2] = $98;
    HEAP32[$98 + 8 >> 2] = $103;
    var $R_1 = $98;
    __label__ = 31;
    break;
   case 23:
    _abort();
    throw "Reached an unreachable!";
   case 24:
    var $_sum67 = $19 | 16;
    var $113 = $oldbase + ($_sum67 + 4) | 0;
    var $114 = HEAP32[$113 >> 2];
    if (($114 | 0) == 0) {
      __label__ = 25;
      break;
    } else {
      var $RP_0 = $113;
      var $R_0 = $114;
      __label__ = 26;
      break;
    }
   case 25:
    var $118 = $oldbase + $_sum67 | 0;
    var $119 = HEAP32[$118 >> 2];
    if (($119 | 0) == 0) {
      var $R_1 = 0;
      __label__ = 31;
      break;
    } else {
      var $RP_0 = $118;
      var $R_0 = $119;
      __label__ = 26;
      break;
    }
   case 26:
    var $R_0;
    var $RP_0;
    var $121 = $R_0 + 20 | 0;
    var $122 = HEAP32[$121 >> 2];
    if (($122 | 0) == 0) {
      __label__ = 27;
      break;
    } else {
      var $RP_0 = $121;
      var $R_0 = $122;
      __label__ = 26;
      break;
    }
   case 27:
    var $125 = $R_0 + 16 | 0;
    var $126 = HEAPU32[$125 >> 2];
    if (($126 | 0) == 0) {
      __label__ = 28;
      break;
    } else {
      var $RP_0 = $125;
      var $R_0 = $126;
      __label__ = 26;
      break;
    }
   case 28:
    if ($RP_0 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 30;
      break;
    } else {
      __label__ = 29;
      break;
    }
   case 29:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    __label__ = 31;
    break;
   case 30:
    _abort();
    throw "Reached an unreachable!";
   case 31:
    var $R_1;
    if (($95 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 32;
      break;
    }
   case 32:
    var $138 = $oldbase + ($19 + 28) | 0;
    var $140 = __gm_ + 304 + (HEAP32[$138 >> 2] << 2) | 0;
    if (($92 | 0) == (HEAP32[$140 >> 2] | 0)) {
      __label__ = 33;
      break;
    } else {
      __label__ = 35;
      break;
    }
   case 33:
    HEAP32[$140 >> 2] = $R_1;
    if (($R_1 | 0) == 0) {
      __label__ = 34;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 34:
    var $148 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$138 >> 2] ^ -1);
    HEAP32[__gm_ + 4 >> 2] = $148;
    __label__ = 51;
    break;
   case 35:
    if ($95 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 39;
      break;
    } else {
      __label__ = 36;
      break;
    }
   case 36:
    var $154 = $95 + 16 | 0;
    if ((HEAP32[$154 >> 2] | 0) == ($92 | 0)) {
      __label__ = 37;
      break;
    } else {
      __label__ = 38;
      break;
    }
   case 37:
    HEAP32[$154 >> 2] = $R_1;
    __label__ = 40;
    break;
   case 38:
    HEAP32[$95 + 20 >> 2] = $R_1;
    __label__ = 40;
    break;
   case 39:
    _abort();
    throw "Reached an unreachable!";
   case 40:
    if (($R_1 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 41;
      break;
    }
   case 41:
    if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 50;
      break;
    } else {
      __label__ = 42;
      break;
    }
   case 42:
    HEAP32[$R_1 + 24 >> 2] = $95;
    var $_sum3132 = $19 | 16;
    var $171 = HEAPU32[$oldbase + $_sum3132 >> 2];
    if (($171 | 0) == 0) {
      __label__ = 46;
      break;
    } else {
      __label__ = 43;
      break;
    }
   case 43:
    if ($171 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 45;
      break;
    } else {
      __label__ = 44;
      break;
    }
   case 44:
    HEAP32[$R_1 + 16 >> 2] = $171;
    HEAP32[$171 + 24 >> 2] = $R_1;
    __label__ = 46;
    break;
   case 45:
    _abort();
    throw "Reached an unreachable!";
   case 46:
    var $184 = HEAPU32[$oldbase + ($_sum3132 + 4) >> 2];
    if (($184 | 0) == 0) {
      __label__ = 51;
      break;
    } else {
      __label__ = 47;
      break;
    }
   case 47:
    if ($184 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 49;
      break;
    } else {
      __label__ = 48;
      break;
    }
   case 48:
    HEAP32[$R_1 + 20 >> 2] = $184;
    HEAP32[$184 + 24 >> 2] = $R_1;
    __label__ = 51;
    break;
   case 49:
    _abort();
    throw "Reached an unreachable!";
   case 50:
    _abort();
    throw "Reached an unreachable!";
   case 51:
    var $oldfirst_0 = $oldbase + ($57 | $19) | 0;
    var $qsize_0 = $57 + $27 | 0;
    __label__ = 52;
    break;
   case 52:
    var $qsize_0;
    var $oldfirst_0;
    var $200 = $oldfirst_0 + 4 | 0;
    var $202 = HEAP32[$200 >> 2] & -2;
    HEAP32[$200 >> 2] = $202;
    HEAP32[$newbase + ($_sum + 4) >> 2] = $qsize_0 | 1;
    HEAP32[$newbase + ($qsize_0 + $_sum) >> 2] = $qsize_0;
    if ($qsize_0 >>> 0 < 256) {
      __label__ = 53;
      break;
    } else {
      __label__ = 58;
      break;
    }
   case 53:
    var $212 = $qsize_0 >>> 2 & 1073741822;
    var $214 = __gm_ + 40 + ($212 << 2) | 0;
    var $215 = HEAPU32[__gm_ >> 2];
    var $216 = 1 << ($qsize_0 >>> 3);
    if (($215 & $216 | 0) == 0) {
      __label__ = 54;
      break;
    } else {
      __label__ = 55;
      break;
    }
   case 54:
    HEAP32[__gm_ >> 2] = $215 | $216;
    var $F4_0 = $214;
    var $_pre_phi = __gm_ + 40 + ($212 + 2 << 2) | 0;
    __label__ = 57;
    break;
   case 55:
    var $222 = __gm_ + 40 + ($212 + 2 << 2) | 0;
    var $223 = HEAPU32[$222 >> 2];
    if ($223 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 56;
      break;
    } else {
      var $F4_0 = $223;
      var $_pre_phi = $222;
      __label__ = 57;
      break;
    }
   case 56:
    _abort();
    throw "Reached an unreachable!";
   case 57:
    var $_pre_phi;
    var $F4_0;
    HEAP32[$_pre_phi >> 2] = $26;
    HEAP32[$F4_0 + 12 >> 2] = $26;
    HEAP32[$newbase + ($_sum + 8) >> 2] = $F4_0;
    HEAP32[$newbase + ($_sum + 12) >> 2] = $214;
    __label__ = 75;
    break;
   case 58:
    var $235 = $25;
    var $236 = $qsize_0 >>> 8;
    if (($236 | 0) == 0) {
      var $I7_0 = 0;
      __label__ = 61;
      break;
    } else {
      __label__ = 59;
      break;
    }
   case 59:
    if ($qsize_0 >>> 0 > 16777215) {
      var $I7_0 = 31;
      __label__ = 61;
      break;
    } else {
      __label__ = 60;
      break;
    }
   case 60:
    var $243 = ($236 + 1048320 | 0) >>> 16 & 8;
    var $244 = $236 << $243;
    var $247 = ($244 + 520192 | 0) >>> 16 & 4;
    var $248 = $244 << $247;
    var $251 = ($248 + 245760 | 0) >>> 16 & 2;
    var $257 = 14 - ($247 | $243 | $251) + ($248 << $251 >>> 15) | 0;
    var $I7_0 = $qsize_0 >>> (($257 + 7 | 0) >>> 0) & 1 | $257 << 1;
    __label__ = 61;
    break;
   case 61:
    var $I7_0;
    var $264 = __gm_ + 304 + ($I7_0 << 2) | 0;
    HEAP32[$newbase + ($_sum + 28) >> 2] = $I7_0;
    var $267 = $newbase + ($_sum + 16) | 0;
    HEAP32[$newbase + ($_sum + 20) >> 2] = 0;
    HEAP32[$267 >> 2] = 0;
    var $271 = HEAP32[__gm_ + 4 >> 2];
    var $272 = 1 << $I7_0;
    if (($271 & $272 | 0) == 0) {
      __label__ = 62;
      break;
    } else {
      __label__ = 63;
      break;
    }
   case 62:
    var $276 = $271 | $272;
    HEAP32[__gm_ + 4 >> 2] = $276;
    HEAP32[$264 >> 2] = $235;
    HEAP32[$newbase + ($_sum + 24) >> 2] = $264;
    HEAP32[$newbase + ($_sum + 12) >> 2] = $235;
    HEAP32[$newbase + ($_sum + 8) >> 2] = $235;
    __label__ = 75;
    break;
   case 63:
    var $285 = HEAP32[$264 >> 2];
    if (($I7_0 | 0) == 31) {
      var $291 = 0;
      __label__ = 65;
      break;
    } else {
      __label__ = 64;
      break;
    }
   case 64:
    var $291 = 25 - ($I7_0 >>> 1) | 0;
    __label__ = 65;
    break;
   case 65:
    var $291;
    var $K8_0 = $qsize_0 << $291;
    var $T_0 = $285;
    __label__ = 66;
    break;
   case 66:
    var $T_0;
    var $K8_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($qsize_0 | 0)) {
      __label__ = 71;
      break;
    } else {
      __label__ = 67;
      break;
    }
   case 67:
    var $300 = $T_0 + 16 + ($K8_0 >>> 31 << 2) | 0;
    var $301 = HEAPU32[$300 >> 2];
    if (($301 | 0) == 0) {
      __label__ = 68;
      break;
    } else {
      var $K8_0 = $K8_0 << 1;
      var $T_0 = $301;
      __label__ = 66;
      break;
    }
   case 68:
    if ($300 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 70;
      break;
    } else {
      __label__ = 69;
      break;
    }
   case 69:
    HEAP32[$300 >> 2] = $235;
    HEAP32[$newbase + ($_sum + 24) >> 2] = $T_0;
    HEAP32[$newbase + ($_sum + 12) >> 2] = $235;
    HEAP32[$newbase + ($_sum + 8) >> 2] = $235;
    __label__ = 75;
    break;
   case 70:
    _abort();
    throw "Reached an unreachable!";
   case 71:
    var $317 = $T_0 + 8 | 0;
    var $318 = HEAPU32[$317 >> 2];
    var $320 = HEAPU32[__gm_ + 16 >> 2];
    if ($T_0 >>> 0 < $320 >>> 0) {
      __label__ = 74;
      break;
    } else {
      __label__ = 72;
      break;
    }
   case 72:
    if ($318 >>> 0 < $320 >>> 0) {
      __label__ = 74;
      break;
    } else {
      __label__ = 73;
      break;
    }
   case 73:
    HEAP32[$318 + 12 >> 2] = $235;
    HEAP32[$317 >> 2] = $235;
    HEAP32[$newbase + ($_sum + 8) >> 2] = $318;
    HEAP32[$newbase + ($_sum + 12) >> 2] = $T_0;
    HEAP32[$newbase + ($_sum + 24) >> 2] = 0;
    __label__ = 75;
    break;
   case 74:
    _abort();
    throw "Reached an unreachable!";
   case 75:
    return $newbase + ($9 | 8) | 0;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_prepend_alloc["X"] = 1;

function _add_segment($tbase, $tsize) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = HEAPU32[__gm_ + 24 >> 2];
    var $2 = $1;
    var $3 = _segment_holding($2);
    var $5 = HEAP32[$3 >> 2];
    var $7 = HEAP32[$3 + 4 >> 2];
    var $8 = $5 + $7 | 0;
    var $10 = $5 + ($7 - 39) | 0;
    if (($10 & 7 | 0) == 0) {
      var $17 = 0;
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    var $17 = -$10 & 7;
    __label__ = 4;
    break;
   case 4:
    var $17;
    var $18 = $5 + ($7 - 47 + $17) | 0;
    var $22 = $18 >>> 0 < ($1 + 16 | 0) >>> 0 ? $2 : $18;
    var $23 = $22 + 8 | 0;
    var $24 = $23;
    var $25 = $tbase;
    var $26 = $tsize - 40 | 0;
    _init_top($25, $26);
    var $28 = $22 + 4 | 0;
    HEAP32[$28 >> 2] = 27;
    HEAP32[$23 >> 2] = HEAP32[__gm_ + 444 >> 2];
    HEAP32[$23 + 4 >> 2] = HEAP32[__gm_ + 448 >> 2];
    HEAP32[$23 + 8 >> 2] = HEAP32[__gm_ + 452 >> 2];
    HEAP32[$23 + 12 >> 2] = HEAP32[__gm_ + 456 >> 2];
    HEAP32[__gm_ + 444 >> 2] = $tbase;
    HEAP32[__gm_ + 448 >> 2] = $tsize;
    HEAP32[__gm_ + 456 >> 2] = 0;
    HEAP32[__gm_ + 452 >> 2] = $24;
    var $30 = $22 + 28 | 0;
    HEAP32[$30 >> 2] = 7;
    if (($22 + 32 | 0) >>> 0 < $8 >>> 0) {
      var $33 = $30;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $33;
    var $34 = $33 + 4 | 0;
    HEAP32[$34 >> 2] = 7;
    if (($33 + 8 | 0) >>> 0 < $8 >>> 0) {
      var $33 = $34;
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 6:
    if (($22 | 0) == ($2 | 0)) {
      __label__ = 30;
      break;
    } else {
      __label__ = 7;
      break;
    }
   case 7:
    var $42 = $22 - $1 | 0;
    var $43 = $2 + $42 | 0;
    var $45 = $2 + ($42 + 4) | 0;
    var $47 = HEAP32[$45 >> 2] & -2;
    HEAP32[$45 >> 2] = $47;
    var $48 = $42 | 1;
    HEAP32[$1 + 4 >> 2] = $48;
    var $50 = $43;
    HEAP32[$50 >> 2] = $42;
    if ($42 >>> 0 < 256) {
      __label__ = 8;
      break;
    } else {
      __label__ = 13;
      break;
    }
   case 8:
    var $55 = $42 >>> 2 & 1073741822;
    var $57 = __gm_ + 40 + ($55 << 2) | 0;
    var $58 = HEAPU32[__gm_ >> 2];
    var $59 = 1 << ($42 >>> 3);
    if (($58 & $59 | 0) == 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 10;
      break;
    }
   case 9:
    var $63 = $58 | $59;
    HEAP32[__gm_ >> 2] = $63;
    var $F_0 = $57;
    var $_pre_phi = __gm_ + 40 + ($55 + 2 << 2) | 0;
    __label__ = 12;
    break;
   case 10:
    var $65 = __gm_ + 40 + ($55 + 2 << 2) | 0;
    var $66 = HEAPU32[$65 >> 2];
    if ($66 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 11;
      break;
    } else {
      var $F_0 = $66;
      var $_pre_phi = $65;
      __label__ = 12;
      break;
    }
   case 11:
    _abort();
    throw "Reached an unreachable!";
   case 12:
    var $_pre_phi;
    var $F_0;
    HEAP32[$_pre_phi >> 2] = $1;
    HEAP32[$F_0 + 12 >> 2] = $1;
    HEAP32[$1 + 8 >> 2] = $F_0;
    HEAP32[$1 + 12 >> 2] = $57;
    __label__ = 30;
    break;
   case 13:
    var $76 = $1;
    var $77 = $42 >>> 8;
    if (($77 | 0) == 0) {
      var $I1_0 = 0;
      __label__ = 16;
      break;
    } else {
      __label__ = 14;
      break;
    }
   case 14:
    if ($42 >>> 0 > 16777215) {
      var $I1_0 = 31;
      __label__ = 16;
      break;
    } else {
      __label__ = 15;
      break;
    }
   case 15:
    var $84 = ($77 + 1048320 | 0) >>> 16 & 8;
    var $85 = $77 << $84;
    var $88 = ($85 + 520192 | 0) >>> 16 & 4;
    var $89 = $85 << $88;
    var $92 = ($89 + 245760 | 0) >>> 16 & 2;
    var $98 = 14 - ($88 | $84 | $92) + ($89 << $92 >>> 15) | 0;
    var $I1_0 = $42 >>> (($98 + 7 | 0) >>> 0) & 1 | $98 << 1;
    __label__ = 16;
    break;
   case 16:
    var $I1_0;
    var $105 = __gm_ + 304 + ($I1_0 << 2) | 0;
    HEAP32[$1 + 28 >> 2] = $I1_0;
    HEAP32[$1 + 20 >> 2] = 0;
    HEAP32[$1 + 16 >> 2] = 0;
    var $109 = HEAP32[__gm_ + 4 >> 2];
    var $110 = 1 << $I1_0;
    if (($109 & $110 | 0) == 0) {
      __label__ = 17;
      break;
    } else {
      __label__ = 18;
      break;
    }
   case 17:
    var $114 = $109 | $110;
    HEAP32[__gm_ + 4 >> 2] = $114;
    HEAP32[$105 >> 2] = $76;
    HEAP32[$1 + 24 >> 2] = $105;
    HEAP32[$1 + 12 >> 2] = $1;
    HEAP32[$1 + 8 >> 2] = $1;
    __label__ = 30;
    break;
   case 18:
    var $119 = HEAP32[$105 >> 2];
    if (($I1_0 | 0) == 31) {
      var $125 = 0;
      __label__ = 20;
      break;
    } else {
      __label__ = 19;
      break;
    }
   case 19:
    var $125 = 25 - ($I1_0 >>> 1) | 0;
    __label__ = 20;
    break;
   case 20:
    var $125;
    var $K2_0 = $42 << $125;
    var $T_0 = $119;
    __label__ = 21;
    break;
   case 21:
    var $T_0;
    var $K2_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($42 | 0)) {
      __label__ = 26;
      break;
    } else {
      __label__ = 22;
      break;
    }
   case 22:
    var $134 = $T_0 + 16 + ($K2_0 >>> 31 << 2) | 0;
    var $135 = HEAPU32[$134 >> 2];
    if (($135 | 0) == 0) {
      __label__ = 23;
      break;
    } else {
      var $K2_0 = $K2_0 << 1;
      var $T_0 = $135;
      __label__ = 21;
      break;
    }
   case 23:
    if ($134 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
      __label__ = 25;
      break;
    } else {
      __label__ = 24;
      break;
    }
   case 24:
    HEAP32[$134 >> 2] = $76;
    HEAP32[$1 + 24 >> 2] = $T_0;
    HEAP32[$1 + 12 >> 2] = $1;
    HEAP32[$1 + 8 >> 2] = $1;
    __label__ = 30;
    break;
   case 25:
    _abort();
    throw "Reached an unreachable!";
   case 26:
    var $148 = $T_0 + 8 | 0;
    var $149 = HEAPU32[$148 >> 2];
    var $151 = HEAPU32[__gm_ + 16 >> 2];
    if ($T_0 >>> 0 < $151 >>> 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 27;
      break;
    }
   case 27:
    if ($149 >>> 0 < $151 >>> 0) {
      __label__ = 29;
      break;
    } else {
      __label__ = 28;
      break;
    }
   case 28:
    HEAP32[$149 + 12 >> 2] = $76;
    HEAP32[$148 >> 2] = $76;
    HEAP32[$1 + 8 >> 2] = $149;
    HEAP32[$1 + 12 >> 2] = $T_0;
    HEAP32[$1 + 24 >> 2] = 0;
    __label__ = 30;
    break;
   case 29:
    _abort();
    throw "Reached an unreachable!";
   case 30:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

_add_segment["X"] = 1;

function __ZNKSt9bad_alloc4whatEv($this) {
  return STRING_TABLE.__str3557 | 0;
}

function __ZNKSt20bad_array_new_length4whatEv($this) {
  return STRING_TABLE.__str14558 | 0;
}

function __ZSt15get_new_handlerv() {
  var $1 = (tempValue = HEAP32[__ZL13__new_handler >> 2], HEAP32[__ZL13__new_handler >> 2] = tempValue + 0, tempValue);
  return $1;
}

function __ZSt15set_new_handlerPFvvE($handler) {
  var $1 = $handler;
  var $2 = (tempValue = HEAP32[__ZL13__new_handler >> 2], HEAP32[__ZL13__new_handler >> 2] = $1, tempValue);
  return $2;
}

function __ZNSt9bad_allocC2Ev($this) {
  HEAP32[$this >> 2] = __ZTVSt9bad_alloc + 8 | 0;
  return;
}

function __ZdlPv($ptr) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    if (($ptr | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 3;
      break;
    }
   case 3:
    _free($ptr);
    __label__ = 4;
    break;
   case 4:
    return;
   default:
    assert(0, "bad label: " + __label__);
  }
}

function __ZdlPvRKSt9nothrow_t($ptr, $0) {
  __ZdlPv($ptr);
  return;
}

function __ZdaPv($ptr) {
  __ZdlPv($ptr);
  return;
}

function __ZdaPvRKSt9nothrow_t($ptr, $0) {
  __ZdaPv($ptr);
  return;
}

function __ZNSt9bad_allocD0Ev($this) {
  __ZNSt9bad_allocD2Ev($this);
  var $1 = $this;
  __ZdlPv($1);
  return;
}

function __ZNSt9bad_allocD2Ev($this) {
  var $1 = $this | 0;
  __ZNSt9exceptionD2Ev($1);
  return;
}

function __ZNSt20bad_array_new_lengthC2Ev($this) {
  var $1 = $this | 0;
  __ZNSt9bad_allocC2Ev($1);
  HEAP32[$this >> 2] = __ZTVSt20bad_array_new_length + 8 | 0;
  return;
}

function __ZNSt20bad_array_new_lengthD0Ev($this) {
  var $1 = $this | 0;
  __ZNSt9bad_allocD2Ev($1);
  var $2 = $this;
  __ZdlPv($2);
  return;
}

function __Znwj($size) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $_size = ($size | 0) == 0 ? 1 : $size;
    __label__ = 3;
    break;
   case 3:
    var $3 = _malloc($_size);
    if (($3 | 0) == 0) {
      __label__ = 4;
      break;
    } else {
      __label__ = 11;
      break;
    }
   case 4:
    var $6 = __ZSt15get_new_handlerv();
    if (($6 | 0) == 0) {
      __label__ = 10;
      break;
    } else {
      __label__ = 5;
      break;
    }
   case 5:
    FUNCTION_TABLE[$6]();
    __label__ = 3;
    break;
   case 6:
    var $lpad_loopexit = ___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf >> 2], HEAP32[_llvm_eh_exception.buf + 4 >> 2], []);
    var $lpad_phi = $lpad_loopexit;
    __label__ = 8;
    break;
   case 7:
    var $lpad_nonloopexit = ___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf >> 2], HEAP32[_llvm_eh_exception.buf + 4 >> 2], []);
    var $lpad_phi = $lpad_nonloopexit;
    __label__ = 8;
    break;
   case 8:
    var $lpad_phi;
    var $10 = $lpad_phi.f1;
    if (($10 | 0) < 0) {
      __label__ = 9;
      break;
    } else {
      __label__ = 12;
      break;
    }
   case 9:
    var $13 = $lpad_phi.f0;
    ___cxa_call_unexpected($13);
    throw "Reached an unreachable!";
   case 10:
    var $15 = ___cxa_allocate_exception(4);
    var $16 = $15;
    __ZNSt9bad_allocC2Ev($16);
    ___cxa_throw($15, __ZTISt9bad_alloc, 12);
    __label__ = 13;
    break;
   case 11:
    return $3;
   case 12:
    Module.print("Resuming exception");
    throw HEAP32[_llvm_eh_exception.buf >> 2];
   case 13:
    throw "Reached an unreachable!";
   default:
    assert(0, "bad label: " + __label__);
  }
}

function __ZnwjRKSt9nothrow_t($size, $0) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $2 = __Znwj($size);
    var $p_0 = $2;
    __label__ = 4;
    break;
   case 3:
    var $4 = ___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf >> 2], HEAP32[_llvm_eh_exception.buf + 4 >> 2], [ 0 ]);
    var $5 = $4.f0;
    var $6 = ___cxa_begin_catch($5);
    ___cxa_end_catch();
    var $p_0 = 0;
    __label__ = 4;
    break;
   case 4:
    var $p_0;
    return $p_0;
   case 5:
    var $9 = ___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf >> 2], HEAP32[_llvm_eh_exception.buf + 4 >> 2], []);
    var $10 = $9.f0;
    ___cxa_call_unexpected($10);
    throw "Reached an unreachable!";
   default:
    assert(0, "bad label: " + __label__);
  }
}

function __Znaj($size) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __Znwj($size);
    __label__ = 3;
    break;
   case 3:
    return $1;
   case 4:
    var $4 = ___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf >> 2], HEAP32[_llvm_eh_exception.buf + 4 >> 2], []);
    var $5 = $4.f1;
    if (($5 | 0) < 0) {
      __label__ = 5;
      break;
    } else {
      __label__ = 6;
      break;
    }
   case 5:
    var $8 = $4.f0;
    ___cxa_call_unexpected($8);
    throw "Reached an unreachable!";
   case 6:
    Module.print("Resuming exception");
    throw HEAP32[_llvm_eh_exception.buf >> 2];
   default:
    assert(0, "bad label: " + __label__);
  }
}

function __ZnajRKSt9nothrow_t($size, $nothrow) {
  var __label__;
  __label__ = 2;
  while (1) switch (__label__) {
   case 2:
    var $1 = __Znaj($size);
    var $p_0 = $1;
    __label__ = 4;
    break;
   case 3:
    var $3 = ___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf >> 2], HEAP32[_llvm_eh_exception.buf + 4 >> 2], [ 0 ]);
    var $4 = $3.f0;
    var $5 = ___cxa_begin_catch($4);
    ___cxa_end_catch();
    var $p_0 = 0;
    __label__ = 4;
    break;
   case 4:
    var $p_0;
    return $p_0;
   case 5:
    var $8 = ___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf >> 2], HEAP32[_llvm_eh_exception.buf + 4 >> 2], []);
    var $9 = $8.f0;
    ___cxa_call_unexpected($9);
    throw "Reached an unreachable!";
   default:
    assert(0, "bad label: " + __label__);
  }
}

function __ZSt17__throw_bad_allocv() {
  var $1 = ___cxa_allocate_exception(4);
  var $2 = $1;
  __ZNSt9bad_allocC2Ev($2);
  ___cxa_throw($1, __ZTISt9bad_alloc, 12);
  throw "Reached an unreachable!";
}

var i64Math = (function() {
  var goog = {
    math: {}
  };
  goog.math.Long = (function(low, high) {
    this.low_ = low | 0;
    this.high_ = high | 0;
  });
  goog.math.Long.IntCache_ = {};
  goog.math.Long.fromInt = (function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  });
  goog.math.Long.fromNumber = (function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
    }
  });
  goog.math.Long.fromBits = (function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  });
  goog.math.Long.fromString = (function(str, opt_radix) {
    if (str.length == 0) {
      throw Error("number format error: empty string");
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error("radix out of range: " + radix);
    }
    if (str.charAt(0) == "-") {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  });
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
  goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  goog.math.Long.prototype.toInt = (function() {
    return this.low_;
  });
  goog.math.Long.prototype.toNumber = (function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
  });
  goog.math.Long.prototype.toString = (function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error("radix out of range: " + radix);
    }
    if (this.isZero()) {
      return "0";
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return "-" + this.negate().toString(radix);
      }
    }
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = "";
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = "0" + digits;
        }
        result = "" + digits + result;
      }
    }
  });
  goog.math.Long.prototype.getHighBits = (function() {
    return this.high_;
  });
  goog.math.Long.prototype.getLowBits = (function() {
    return this.low_;
  });
  goog.math.Long.prototype.getLowBitsUnsigned = (function() {
    return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  });
  goog.math.Long.prototype.getNumBitsAbs = (function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & 1 << bit) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  });
  goog.math.Long.prototype.isZero = (function() {
    return this.high_ == 0 && this.low_ == 0;
  });
  goog.math.Long.prototype.isNegative = (function() {
    return this.high_ < 0;
  });
  goog.math.Long.prototype.isOdd = (function() {
    return (this.low_ & 1) == 1;
  });
  goog.math.Long.prototype.equals = (function(other) {
    return this.high_ == other.high_ && this.low_ == other.low_;
  });
  goog.math.Long.prototype.notEquals = (function(other) {
    return this.high_ != other.high_ || this.low_ != other.low_;
  });
  goog.math.Long.prototype.lessThan = (function(other) {
    return this.compare(other) < 0;
  });
  goog.math.Long.prototype.lessThanOrEqual = (function(other) {
    return this.compare(other) <= 0;
  });
  goog.math.Long.prototype.greaterThan = (function(other) {
    return this.compare(other) > 0;
  });
  goog.math.Long.prototype.greaterThanOrEqual = (function(other) {
    return this.compare(other) >= 0;
  });
  goog.math.Long.prototype.compare = (function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  });
  goog.math.Long.prototype.negate = (function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  });
  goog.math.Long.prototype.add = (function(other) {
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 65535;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 65535;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 65535;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 + b48;
    c48 &= 65535;
    return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
  });
  goog.math.Long.prototype.subtract = (function(other) {
    return this.add(other.negate());
  });
  goog.math.Long.prototype.multiply = (function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 65535;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 65535;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 65535;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 65535;
    return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
  });
  goog.math.Long.prototype.div = (function(other) {
    if (other.isZero()) {
      throw Error("division by zero");
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  });
  goog.math.Long.prototype.modulo = (function(other) {
    return this.subtract(this.div(other).multiply(other));
  });
  goog.math.Long.prototype.not = (function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  });
  goog.math.Long.prototype.and = (function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
  });
  goog.math.Long.prototype.or = (function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
  });
  goog.math.Long.prototype.xor = (function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
  });
  goog.math.Long.prototype.shiftLeft = (function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
      } else {
        return goog.math.Long.fromBits(0, low << numBits - 32);
      }
    }
  });
  goog.math.Long.prototype.shiftRight = (function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
      } else {
        return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
      }
    }
  });
  goog.math.Long.prototype.shiftRightUnsigned = (function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  });
  var navigator = {
    appName: "Modern Browser"
  };
  var dbits;
  var canary = 0xdeadbeefcafe;
  var j_lm = (canary & 16777215) == 15715070;
  function BigInteger(a, b, c) {
    if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c); else if (b == null && "string" != typeof a) this.fromString(a, 256); else this.fromString(a, b);
  }
  function nbi() {
    return new BigInteger(null);
  }
  function am1(i, x, w, j, c, n) {
    while (--n >= 0) {
      var v = x * this[i++] + w[j] + c;
      c = Math.floor(v / 67108864);
      w[j++] = v & 67108863;
    }
    return c;
  }
  function am2(i, x, w, j, c, n) {
    var xl = x & 32767, xh = x >> 15;
    while (--n >= 0) {
      var l = this[i] & 32767;
      var h = this[i++] >> 15;
      var m = xh * l + h * xl;
      l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823);
      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
      w[j++] = l & 1073741823;
    }
    return c;
  }
  function am3(i, x, w, j, c, n) {
    var xl = x & 16383, xh = x >> 14;
    while (--n >= 0) {
      var l = this[i] & 16383;
      var h = this[i++] >> 14;
      var m = xh * l + h * xl;
      l = xl * l + ((m & 16383) << 14) + w[j] + c;
      c = (l >> 28) + (m >> 14) + xh * h;
      w[j++] = l & 268435455;
    }
    return c;
  }
  if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
    BigInteger.prototype.am = am2;
    dbits = 30;
  } else if (j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;
    dbits = 26;
  } else {
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = (1 << dbits) - 1;
  BigInteger.prototype.DV = 1 << dbits;
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2, BI_FP);
  BigInteger.prototype.F1 = BI_FP - dbits;
  BigInteger.prototype.F2 = 2 * dbits - BI_FP;
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array;
  var rr, vv;
  rr = "0".charCodeAt(0);
  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) {
    return BI_RM.charAt(n);
  }
  function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return c == null ? -1 : c;
  }
  function bnpCopyTo(r) {
    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  function bnpFromInt(x) {
    this.t = 1;
    this.s = x < 0 ? -1 : 0;
    if (x > 0) this[0] = x; else if (x < -1) this[0] = x + DV; else this.t = 0;
  }
  function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
  }
  function bnpFromString(s, b) {
    var k;
    if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 256) k = 8; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else {
      this.fromRadix(s, b);
      return;
    }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while (--i >= 0) {
      var x = k == 8 ? s[i] & 255 : intAt(s, i);
      if (x < 0) {
        if (s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if (sh == 0) this[this.t++] = x; else if (sh + k > this.DB) {
        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
        this[this.t++] = x >> this.DB - sh;
      } else this[this.t - 1] |= x << sh;
      sh += k;
      if (sh >= this.DB) sh -= this.DB;
    }
    if (k == 8 && (s[0] & 128) != 0) {
      this.s = -1;
      if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
    }
    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
  }
  function bnpClamp() {
    var c = this.s & this.DM;
    while (this.t > 0 && this[this.t - 1] == c) --this.t;
  }
  function bnToString(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else return this.toRadix(b);
    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
    var p = this.DB - i * this.DB % k;
    if (i-- > 0) {
      if (p < this.DB && (d = this[i] >> p) > 0) {
        m = true;
        r = int2char(d);
      }
      while (i >= 0) {
        if (p < k) {
          d = (this[i] & (1 << p) - 1) << k - p;
          d |= this[--i] >> (p += this.DB - k);
        } else {
          d = this[i] >> (p -= k) & km;
          if (p <= 0) {
            p += this.DB;
            --i;
          }
        }
        if (d > 0) m = true;
        if (m) r += int2char(d);
      }
    }
    return m ? r : "0";
  }
  function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
  }
  function bnAbs() {
    return this.s < 0 ? this.negate() : this;
  }
  function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0) return r;
    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
    return 0;
  }
  function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) {
      x = t;
      r += 16;
    }
    if ((t = x >> 8) != 0) {
      x = t;
      r += 8;
    }
    if ((t = x >> 4) != 0) {
      x = t;
      r += 4;
    }
    if ((t = x >> 2) != 0) {
      x = t;
      r += 2;
    }
    if ((t = x >> 1) != 0) {
      x = t;
      r += 1;
    }
    return r;
  }
  function bnBitLength() {
    if (this.t <= 0) return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
  }
  function bnpDLShiftTo(n, r) {
    var i;
    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
    for (i = n - 1; i >= 0; --i) r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
  }
  function bnpDRShiftTo(n, r) {
    for (var i = n; i < this.t; ++i) r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
  }
  function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
    for (i = this.t - 1; i >= 0; --i) {
      r[i + ds + 1] = this[i] >> cbs | c;
      c = (this[i] & bm) << bs;
    }
    for (i = ds - 1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
  }
  function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
      r.t = 0;
      return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for (var i = ds + 1; i < this.t; ++i) {
      r[i - ds - 1] |= (this[i] & bm) << cbs;
      r[i - ds] = this[i] >> bs;
    }
    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
  }
  function bnpSubTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
      c += this[i] - a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    if (a.t < this.t) {
      c -= a.s;
      while (i < this.t) {
        c += this[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      c += this.s;
    } else {
      c += this.s;
      while (i < a.t) {
        c -= a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c; else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  function bnpMultiplyTo(a, r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0) r[i] = 0;
    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
  }
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;
    while (--i >= 0) r[i] = 0;
    for (i = 0; i < x.t - 1; ++i) {
      var c = x.am(i, x[i], r, 2 * i, 0, 1);
      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
        r[i + x.t] -= x.DV;
        r[i + x.t + 1] = 1;
      }
    }
    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
  }
  function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0) return;
    var pt = this.abs();
    if (pt.t < pm.t) {
      if (q != null) q.fromInt(0);
      if (r != null) this.copyTo(r);
      return;
    }
    if (r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]);
    if (nsh > 0) {
      pm.lShiftTo(nsh, y);
      pt.lShiftTo(nsh, r);
    } else {
      pm.copyTo(y);
      pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 == 0) return;
    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
    var i = r.t, j = i - ys, t = q == null ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y);
    while (y.t < ys) y[y.t++] = 0;
    while (--j >= 0) {
      var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
        y.dlShiftTo(j, t);
        r.subTo(t, r);
        while (r[i] < --qd) r.subTo(t, r);
      }
    }
    if (q != null) {
      r.drShiftTo(ys, q);
      if (ts != ms) BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r);
    if (ts < 0) BigInteger.ZERO.subTo(r, r);
  }
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
  }
  function Classic(m) {
    this.m = m;
  }
  function cConvert(x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m); else return x;
  }
  function cRevert(x) {
    return x;
  }
  function cReduce(x) {
    x.divRemTo(this.m, null, x);
  }
  function cMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
  }
  function cSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
  }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  function bnpInvDigit() {
    if (this.t < 1) return 0;
    var x = this[0];
    if ((x & 1) == 0) return 0;
    var y = x & 3;
    y = y * (2 - (x & 15) * y) & 15;
    y = y * (2 - (x & 255) * y) & 255;
    y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
    y = y * (2 - x * y % this.DV) % this.DV;
    return y > 0 ? this.DV - y : -y;
  }
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 32767;
    this.mph = this.mp >> 15;
    this.um = (1 << m.DB - 15) - 1;
    this.mt2 = 2 * m.t;
  }
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
  }
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  function montReduce(x) {
    while (x.t <= this.mt2) x[x.t++] = 0;
    for (var i = 0; i < this.m.t; ++i) {
      var j = x[i] & 32767;
      var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
      j = i + this.m.t;
      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
      while (x[j] >= x.DV) {
        x[j] -= x.DV;
        x[++j]++;
      }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
  }
  function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
  }
  function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
  }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  function bnpIsEven() {
    return (this.t > 0 ? this[0] & 1 : this.s) == 0;
  }
  function bnpExp(e, z) {
    if (e > 4294967295 || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
    g.copyTo(r);
    while (--i >= 0) {
      z.sqrTo(r, r2);
      if ((e & 1 << i) > 0) z.mulTo(r2, g, r); else {
        var t = r;
        r = r2;
        r2 = t;
      }
    }
    return z.revert(r);
  }
  function bnModPowInt(e, m) {
    var z;
    if (e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e, z);
  }
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  function bnpFromRadix(s, b) {
    this.fromInt(0);
    if (b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
    for (var i = 0; i < s.length; ++i) {
      var x = intAt(s, i);
      if (x < 0) {
        if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b * w + x;
      if (++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w, 0);
        j = 0;
        w = 0;
      }
    }
    if (j > 0) {
      this.dMultiply(Math.pow(b, j));
      this.dAddOffset(w, 0);
    }
    if (mi) BigInteger.ZERO.subTo(this, this);
  }
  function bnpChunkSize(r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r));
  }
  function bnSigNum() {
    if (this.s < 0) return -1; else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0; else return 1;
  }
  function bnpDMultiply(n) {
    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
    ++this.t;
    this.clamp();
  }
  function bnpDAddOffset(n, w) {
    if (n == 0) return;
    while (this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while (this[w] >= this.DV) {
      this[w] -= this.DV;
      if (++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  function bnpToRadix(b) {
    if (b == null) b = 10;
    if (this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b, cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d, y, z);
    while (y.signum() > 0) {
      r = (a + z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d, y, z);
    }
    return z.intValue().toString(b) + r;
  }
  function bnIntValue() {
    if (this.s < 0) {
      if (this.t == 1) return this[0] - this.DV; else if (this.t == 0) return -1;
    } else if (this.t == 1) return this[0]; else if (this.t == 0) return 0;
    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
  }
  function bnpAddTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
      c += this[i] + a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    if (a.t < this.t) {
      c += a.s;
      while (i < this.t) {
        c += this[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      c += this.s;
    } else {
      c += this.s;
      while (i < a.t) {
        c += a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c > 0) r[i++] = c; else if (c < -1) r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  var Wrapper = {
    result: [ 0, 0 ],
    add: (function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.add(y);
      Wrapper.result[0] = ret.low_;
      Wrapper.result[1] = ret.high_;
    }),
    subtract: (function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.subtract(y);
      Wrapper.result[0] = ret.low_;
      Wrapper.result[1] = ret.high_;
    }),
    multiply: (function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.multiply(y);
      Wrapper.result[0] = ret.low_;
      Wrapper.result[1] = ret.high_;
    }),
    makeTwo32: (function() {
      Wrapper.two32 = new BigInteger;
      Wrapper.two32.fromString("4294967296", 10);
    }),
    lh2bignum: (function(l, h) {
      var a = new BigInteger;
      a.fromString(h.toString(), 10);
      var b = new BigInteger;
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger;
      c.fromString(l.toString(), 10);
      var d = new BigInteger;
      c.addTo(b, d);
      return d;
    }),
    divide: (function(xl, xh, yl, yh, unsigned) {
      if (!Wrapper.two32) Wrapper.makeTwo32();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.div(y);
        Wrapper.result[0] = ret.low_;
        Wrapper.result[1] = ret.high_;
      } else {
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger;
        x.divRemTo(y, z, null);
        var l = new BigInteger;
        var h = new BigInteger;
        z.divRemTo(Wrapper.two32, h, l);
        Wrapper.result[0] = parseInt(l.toString()) | 0;
        Wrapper.result[1] = parseInt(h.toString()) | 0;
      }
    }),
    modulo: (function(xl, xh, yl, yh, unsigned) {
      if (!Wrapper.two32) Wrapper.makeTwo32();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.modulo(y);
        Wrapper.result[0] = ret.low_;
        Wrapper.result[1] = ret.high_;
      } else {
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger;
        x.divRemTo(y, null, z);
        var l = new BigInteger;
        var h = new BigInteger;
        z.divRemTo(Wrapper.two32, h, l);
        Wrapper.result[0] = parseInt(l.toString()) | 0;
        Wrapper.result[1] = parseInt(h.toString()) | 0;
      }
    }),
    stringify: (function(l, h, unsigned) {
      var ret = (new goog.math.Long(l, h)).toString();
      if (unsigned && ret[0] == "-") {
        if (!Wrapper.two64) {
          Wrapper.two64 = new BigInteger;
          Wrapper.two64.fromString("18446744073709551616", 10);
        }
        var bignum = new BigInteger;
        bignum.fromString(ret, 10);
        ret = new BigInteger;
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    })
  };
  return Wrapper;
})();

function _memset(ptr, value, num, align) {
  if (num >= 20) {
    var stop = ptr + num;
    while (ptr % 4) {
      HEAP8[ptr++] = value;
    }
    if (value < 0) value += 256;
    var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | value << 8 | value << 16 | value << 24;
    while (ptr4 < stop4) {
      HEAP32[ptr4++] = value4;
    }
    ptr = ptr4 << 2;
    while (ptr < stop) {
      HEAP8[ptr++] = value;
    }
  } else {
    while (num--) {
      HEAP8[ptr++] = value;
    }
  }
}

var _llvm_memset_p0i8_i32 = _memset;

function _strlen(ptr) {
  return String_len(ptr);
}

function _memcpy(dest, src, num, align) {
  if (num >= 20 && src % 2 == dest % 2) {
    if (src % 4 == dest % 4) {
      var stop = src + num;
      while (src % 4) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
      while (src4 < stop4) {
        HEAP32[dest4++] = HEAP32[src4++];
      }
      src = src4 << 2;
      dest = dest4 << 2;
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
    } else {
      var stop = src + num;
      if (src % 2) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
      while (src2 < stop2) {
        HEAP16[dest2++] = HEAP16[src2++];
      }
      src = src2 << 1;
      dest = dest2 << 1;
      if (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
    }
  } else {
    while (num--) {
      HEAP8[dest++] = HEAP8[src++];
    }
  }
}

function _memmove(dest, src, num, align) {
  if (src < dest && dest < src + num) {
    src += num;
    dest += num;
    while (num--) {
      dest--;
      src--;
      HEAP8[dest] = HEAP8[src];
    }
  } else {
    _memcpy(dest, src, num, align);
  }
}

var _llvm_memmove_p0i8_p0i8_i32 = _memmove;

var _llvm_memcpy_p0i8_p0i8_i32 = _memcpy;

function _memcmp(p1, p2, num) {
  for (var i = 0; i < num; i++) {
    var v1 = HEAPU8[p1 + i];
    var v2 = HEAPU8[p2 + i];
    if (v1 != v2) return v1 > v2 ? 1 : -1;
  }
  return 0;
}

function __exit(status) {
  exitRuntime();
  ABORT = true;
  throw "exit(" + status + ") called, at " + (new Error).stack;
}

function _exit(status) {
  __exit(status);
}

function _strncpy(pdest, psrc, num) {
  var padding = false, curr;
  for (var i = 0; i < num; i++) {
    curr = padding ? 0 : HEAP8[psrc + i];
    HEAP8[pdest + i] = curr;
    padding = padding || HEAP8[psrc + i] == 0;
  }
  return pdest;
}

function _isspace(chr) {
  return chr in {
    32: 0,
    9: 0,
    10: 0,
    11: 0,
    12: 0,
    13: 0
  };
}

function ___setErrNo(value) {
  if (!___setErrNo.ret) ___setErrNo.ret = allocate([ 0 ], "i32", ALLOC_STATIC);
  HEAP32[___setErrNo.ret >> 2] = value;
  return value;
}

var ERRNO_CODES = {
  E2BIG: 7,
  EACCES: 13,
  EADDRINUSE: 98,
  EADDRNOTAVAIL: 99,
  EAFNOSUPPORT: 97,
  EAGAIN: 11,
  EALREADY: 114,
  EBADF: 9,
  EBADMSG: 74,
  EBUSY: 16,
  ECANCELED: 125,
  ECHILD: 10,
  ECONNABORTED: 103,
  ECONNREFUSED: 111,
  ECONNRESET: 104,
  EDEADLK: 35,
  EDESTADDRREQ: 89,
  EDOM: 33,
  EDQUOT: 122,
  EEXIST: 17,
  EFAULT: 14,
  EFBIG: 27,
  EHOSTUNREACH: 113,
  EIDRM: 43,
  EILSEQ: 84,
  EINPROGRESS: 115,
  EINTR: 4,
  EINVAL: 22,
  EIO: 5,
  EISCONN: 106,
  EISDIR: 21,
  ELOOP: 40,
  EMFILE: 24,
  EMLINK: 31,
  EMSGSIZE: 90,
  EMULTIHOP: 72,
  ENAMETOOLONG: 36,
  ENETDOWN: 100,
  ENETRESET: 102,
  ENETUNREACH: 101,
  ENFILE: 23,
  ENOBUFS: 105,
  ENODATA: 61,
  ENODEV: 19,
  ENOENT: 2,
  ENOEXEC: 8,
  ENOLCK: 37,
  ENOLINK: 67,
  ENOMEM: 12,
  ENOMSG: 42,
  ENOPROTOOPT: 92,
  ENOSPC: 28,
  ENOSR: 63,
  ENOSTR: 60,
  ENOSYS: 38,
  ENOTCONN: 107,
  ENOTDIR: 20,
  ENOTEMPTY: 39,
  ENOTRECOVERABLE: 131,
  ENOTSOCK: 88,
  ENOTSUP: 95,
  ENOTTY: 25,
  ENXIO: 6,
  EOVERFLOW: 75,
  EOWNERDEAD: 130,
  EPERM: 1,
  EPIPE: 32,
  EPROTO: 71,
  EPROTONOSUPPORT: 93,
  EPROTOTYPE: 91,
  ERANGE: 34,
  EROFS: 30,
  ESPIPE: 29,
  ESRCH: 3,
  ESTALE: 116,
  ETIME: 62,
  ETIMEDOUT: 110,
  ETXTBSY: 26,
  EWOULDBLOCK: 11,
  EXDEV: 18
};

function __parseInt(str, endptr, base, min, max, bits, unsign) {
  while (_isspace(HEAP8[str])) str++;
  var multiplier = 1;
  if (HEAP8[str] == "-".charCodeAt(0)) {
    multiplier = -1;
    str++;
  } else if (HEAP8[str] == "+".charCodeAt(0)) {
    str++;
  }
  var finalBase = base;
  if (!finalBase) {
    if (HEAP8[str] == "0".charCodeAt(0)) {
      if (HEAP8[str + 1] == "x".charCodeAt(0) || HEAP8[str + 1] == "X".charCodeAt(0)) {
        finalBase = 16;
        str += 2;
      } else {
        finalBase = 8;
        str++;
      }
    }
  }
  if (!finalBase) finalBase = 10;
  var chr;
  var ret = 0;
  while ((chr = HEAP8[str]) != 0) {
    var digit = parseInt(String.fromCharCode(chr), finalBase);
    if (isNaN(digit)) {
      break;
    } else {
      ret = ret * finalBase + digit;
      str++;
    }
  }
  ret *= multiplier;
  if (endptr) {
    HEAP32[endptr >> 2] = str;
  }
  if (unsign) {
    if (Math.abs(ret) > max) {
      ret = max;
      ___setErrNo(ERRNO_CODES.ERANGE);
    } else {
      ret = unSign(ret, bits);
    }
  }
  if (ret > max || ret < min) {
    ret = ret > max ? max : min;
    ___setErrNo(ERRNO_CODES.ERANGE);
  }
  if (bits == 64) {
    ret = [ ret >>> 0, Math.min(Math.floor(ret / 4294967296), 4294967295) ];
  }
  return ret;
}

function _strtol(str, endptr, base) {
  return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);
}

function _atoi(ptr) {
  var str = Pointer_stringify(ptr);
  return _strtol(ptr, null, 10);
}

function _strcpy(pdest, psrc) {
  var i = 0;
  do {
    HEAP8[pdest + i] = HEAP8[psrc + i];
    i++;
  } while (HEAP8[psrc + (i - 1)] != 0);
  return pdest;
}

function _strcat(pdest, psrc) {
  var len = _strlen(pdest);
  var i = 0;
  do {
    HEAP8[pdest + len + i] = HEAP8[psrc + i];
    i++;
  } while (HEAP8[psrc + (i - 1)] != 0);
  return pdest;
}

function _strchr(ptr, chr) {
  ptr--;
  do {
    ptr++;
    var val = HEAP8[ptr];
    if (val == chr) return ptr;
  } while (val);
  return 0;
}

function _strncmp(px, py, n) {
  var i = 0;
  while (i < n) {
    var x = HEAPU8[px + i];
    var y = HEAPU8[py + i];
    if (x == y && x == 0) return 0;
    if (x == 0) return -1;
    if (y == 0) return 1;
    if (x == y) {
      i++;
      continue;
    } else {
      return x > y ? 1 : -1;
    }
  }
  return 0;
}

function _strcmp(px, py) {
  return _strncmp(px, py, TOTAL_MEMORY);
}

function __formatString(format, varargs) {
  var textIndex = format;
  var argIndex = 0;
  function getNextArg(type) {
    var ret;
    if (type === "double") {
      ret = (tempDoubleI32[0] = HEAP32[varargs + argIndex >> 2], tempDoubleI32[1] = HEAP32[varargs + (argIndex + 4) >> 2], tempDoubleF64[0]);
    } else if (type == "i64") {
      ret = [ HEAP32[varargs + argIndex >> 2], HEAP32[varargs + (argIndex + 4) >> 2] ];
    } else {
      type = "i32";
      ret = HEAP32[varargs + argIndex >> 2];
    }
    argIndex += Runtime.getNativeFieldSize(type);
    return ret;
  }
  var ret = [];
  var curr, next, currArg;
  while (1) {
    var startTextIndex = textIndex;
    curr = HEAP8[textIndex];
    if (curr === 0) break;
    next = HEAP8[textIndex + 1];
    if (curr == "%".charCodeAt(0)) {
      var flagAlwaysSigned = false;
      var flagLeftAlign = false;
      var flagAlternative = false;
      var flagZeroPad = false;
      flagsLoop : while (1) {
        switch (next) {
         case "+".charCodeAt(0):
          flagAlwaysSigned = true;
          break;
         case "-".charCodeAt(0):
          flagLeftAlign = true;
          break;
         case "#".charCodeAt(0):
          flagAlternative = true;
          break;
         case "0".charCodeAt(0):
          if (flagZeroPad) {
            break flagsLoop;
          } else {
            flagZeroPad = true;
            break;
          }
         default:
          break flagsLoop;
        }
        textIndex++;
        next = HEAP8[textIndex + 1];
      }
      var width = 0;
      if (next == "*".charCodeAt(0)) {
        width = getNextArg("i32");
        textIndex++;
        next = HEAP8[textIndex + 1];
      } else {
        while (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0)) {
          width = width * 10 + (next - "0".charCodeAt(0));
          textIndex++;
          next = HEAP8[textIndex + 1];
        }
      }
      var precisionSet = false;
      if (next == ".".charCodeAt(0)) {
        var precision = 0;
        precisionSet = true;
        textIndex++;
        next = HEAP8[textIndex + 1];
        if (next == "*".charCodeAt(0)) {
          precision = getNextArg("i32");
          textIndex++;
        } else {
          while (1) {
            var precisionChr = HEAP8[textIndex + 1];
            if (precisionChr < "0".charCodeAt(0) || precisionChr > "9".charCodeAt(0)) break;
            precision = precision * 10 + (precisionChr - "0".charCodeAt(0));
            textIndex++;
          }
        }
        next = HEAP8[textIndex + 1];
      } else {
        var precision = 6;
      }
      var argSize;
      switch (String.fromCharCode(next)) {
       case "h":
        var nextNext = HEAP8[textIndex + 2];
        if (nextNext == "h".charCodeAt(0)) {
          textIndex++;
          argSize = 1;
        } else {
          argSize = 2;
        }
        break;
       case "l":
        var nextNext = HEAP8[textIndex + 2];
        if (nextNext == "l".charCodeAt(0)) {
          textIndex++;
          argSize = 8;
        } else {
          argSize = 4;
        }
        break;
       case "L":
       case "q":
       case "j":
        argSize = 8;
        break;
       case "z":
       case "t":
       case "I":
        argSize = 4;
        break;
       default:
        argSize = null;
      }
      if (argSize) textIndex++;
      next = HEAP8[textIndex + 1];
      if ([ "d", "i", "u", "o", "x", "X", "p" ].indexOf(String.fromCharCode(next)) != -1) {
        var signed = next == "d".charCodeAt(0) || next == "i".charCodeAt(0);
        argSize = argSize || 4;
        var currArg = getNextArg("i" + argSize * 8);
        var origArg = currArg;
        var argText;
        if (argSize == 8) {
          currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == "u".charCodeAt(0));
        }
        if (argSize <= 4) {
          var limit = Math.pow(256, argSize) - 1;
          currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
        }
        var currAbsArg = Math.abs(currArg);
        var prefix = "";
        if (next == "d".charCodeAt(0) || next == "i".charCodeAt(0)) {
          if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else argText = reSign(currArg, 8 * argSize, 1).toString(10);
        } else if (next == "u".charCodeAt(0)) {
          if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else argText = unSign(currArg, 8 * argSize, 1).toString(10);
          currArg = Math.abs(currArg);
        } else if (next == "o".charCodeAt(0)) {
          argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
        } else if (next == "x".charCodeAt(0) || next == "X".charCodeAt(0)) {
          prefix = flagAlternative ? "0x" : "";
          if (currArg < 0) {
            currArg = -currArg;
            argText = (currAbsArg - 1).toString(16);
            var buffer = [];
            for (var i = 0; i < argText.length; i++) {
              buffer.push((15 - parseInt(argText[i], 16)).toString(16));
            }
            argText = buffer.join("");
            while (argText.length < argSize * 2) argText = "f" + argText;
          } else {
            argText = currAbsArg.toString(16);
          }
          if (next == "X".charCodeAt(0)) {
            prefix = prefix.toUpperCase();
            argText = argText.toUpperCase();
          }
        } else if (next == "p".charCodeAt(0)) {
          if (currAbsArg === 0) {
            argText = "(nil)";
          } else {
            prefix = "0x";
            argText = currAbsArg.toString(16);
          }
        }
        if (precisionSet) {
          while (argText.length < precision) {
            argText = "0" + argText;
          }
        }
        if (flagAlwaysSigned) {
          if (currArg < 0) {
            prefix = "-" + prefix;
          } else {
            prefix = "+" + prefix;
          }
        }
        while (prefix.length + argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad) {
              argText = "0" + argText;
            } else {
              prefix = " " + prefix;
            }
          }
        }
        argText = prefix + argText;
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if ([ "f", "F", "e", "E", "g", "G" ].indexOf(String.fromCharCode(next)) != -1) {
        var currArg = getNextArg("double");
        var argText;
        if (isNaN(currArg)) {
          argText = "nan";
          flagZeroPad = false;
        } else if (!isFinite(currArg)) {
          argText = (currArg < 0 ? "-" : "") + "inf";
          flagZeroPad = false;
        } else {
          var isGeneral = false;
          var effectivePrecision = Math.min(precision, 20);
          if (next == "g".charCodeAt(0) || next == "G".charCodeAt(0)) {
            isGeneral = true;
            precision = precision || 1;
            var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
            if (precision > exponent && exponent >= -4) {
              next = (next == "g".charCodeAt(0) ? "f" : "F").charCodeAt(0);
              precision -= exponent + 1;
            } else {
              next = (next == "g".charCodeAt(0) ? "e" : "E").charCodeAt(0);
              precision--;
            }
            effectivePrecision = Math.min(precision, 20);
          }
          if (next == "e".charCodeAt(0) || next == "E".charCodeAt(0)) {
            argText = currArg.toExponential(effectivePrecision);
            if (/[eE][-+]\d$/.test(argText)) {
              argText = argText.slice(0, -1) + "0" + argText.slice(-1);
            }
          } else if (next == "f".charCodeAt(0) || next == "F".charCodeAt(0)) {
            argText = currArg.toFixed(effectivePrecision);
          }
          var parts = argText.split("e");
          if (isGeneral && !flagAlternative) {
            while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
              parts[0] = parts[0].slice(0, -1);
            }
          } else {
            if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
            while (precision > effectivePrecision++) parts[0] += "0";
          }
          argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
          if (next == "E".charCodeAt(0)) argText = argText.toUpperCase();
          if (flagAlwaysSigned && currArg >= 0) {
            argText = "+" + argText;
          }
        }
        while (argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
              argText = argText[0] + "0" + argText.slice(1);
            } else {
              argText = (flagZeroPad ? "0" : " ") + argText;
            }
          }
        }
        if (next < "a".charCodeAt(0)) argText = argText.toUpperCase();
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if (next == "s".charCodeAt(0)) {
        var arg = getNextArg("i8*") || 0;
        var argLength = String_len(arg);
        if (precisionSet) argLength = Math.min(String_len(arg), precision);
        if (!flagLeftAlign) {
          while (argLength < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
        for (var i = 0; i < argLength; i++) {
          ret.push(HEAPU8[arg++]);
        }
        if (flagLeftAlign) {
          while (argLength < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
      } else if (next == "c".charCodeAt(0)) {
        if (flagLeftAlign) ret.push(getNextArg("i8"));
        while (--width > 0) {
          ret.push(" ".charCodeAt(0));
        }
        if (!flagLeftAlign) ret.push(getNextArg("i8"));
      } else if (next == "n".charCodeAt(0)) {
        var ptr = getNextArg("i32*");
        HEAP32[ptr >> 2] = ret.length;
      } else if (next == "%".charCodeAt(0)) {
        ret.push(curr);
      } else {
        for (var i = startTextIndex; i < textIndex + 2; i++) {
          ret.push(HEAP8[i]);
        }
      }
      textIndex += 2;
    } else {
      ret.push(curr);
      textIndex += 1;
    }
  }
  return ret;
}

function _snprintf(s, n, format, varargs) {
  var result = __formatString(format, varargs);
  var limit = n === undefined ? result.length : Math.min(result.length, n - 1);
  for (var i = 0; i < limit; i++) {
    HEAP8[s + i] = result[i];
  }
  HEAP8[s + i] = 0;
  return result.length;
}

function _sprintf(s, format, varargs) {
  return _snprintf(s, undefined, format, varargs);
}

var _stdin = 0;

var _stdout = 0;

var _stderr = 0;

var __impure_ptr = 0;

var FS = {
  currentPath: "/",
  nextInode: 2,
  streams: [ null ],
  ignorePermissions: true,
  joinPath: (function(parts, forceRelative) {
    var ret = parts[0];
    for (var i = 1; i < parts.length; i++) {
      if (ret[ret.length - 1] != "/") ret += "/";
      ret += parts[i];
    }
    if (forceRelative && ret[0] == "/") ret = ret.substr(1);
    return ret;
  }),
  absolutePath: (function(relative, base) {
    if (typeof relative !== "string") return null;
    if (base === undefined) base = FS.currentPath;
    if (relative && relative[0] == "/") base = "";
    var full = base + "/" + relative;
    var parts = full.split("/").reverse();
    var absolute = [ "" ];
    while (parts.length) {
      var part = parts.pop();
      if (part == "" || part == ".") {} else if (part == "..") {
        if (absolute.length > 1) absolute.pop();
      } else {
        absolute.push(part);
      }
    }
    return absolute.length == 1 ? "/" : absolute.join("/");
  }),
  analyzePath: (function(path, dontResolveLastLink, linksVisited) {
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    path = FS.absolutePath(path);
    if (path == "/") {
      ret.isRoot = true;
      ret.exists = ret.parentExists = true;
      ret.name = "/";
      ret.path = ret.parentPath = "/";
      ret.object = ret.parentObject = FS.root;
    } else if (path !== null) {
      linksVisited = linksVisited || 0;
      path = path.slice(1).split("/");
      var current = FS.root;
      var traversed = [ "" ];
      while (path.length) {
        if (path.length == 1 && current.isFolder) {
          ret.parentExists = true;
          ret.parentPath = traversed.length == 1 ? "/" : traversed.join("/");
          ret.parentObject = current;
          ret.name = path[0];
        }
        var target = path.shift();
        if (!current.isFolder) {
          ret.error = ERRNO_CODES.ENOTDIR;
          break;
        } else if (!current.read) {
          ret.error = ERRNO_CODES.EACCES;
          break;
        } else if (!current.contents.hasOwnProperty(target)) {
          ret.error = ERRNO_CODES.ENOENT;
          break;
        }
        current = current.contents[target];
        if (current.link && !(dontResolveLastLink && path.length == 0)) {
          if (linksVisited > 40) {
            ret.error = ERRNO_CODES.ELOOP;
            break;
          }
          var link = FS.absolutePath(current.link, traversed.join("/"));
          ret = FS.analyzePath([ link ].concat(path).join("/"), dontResolveLastLink, linksVisited + 1);
          return ret;
        }
        traversed.push(target);
        if (path.length == 0) {
          ret.exists = true;
          ret.path = traversed.join("/");
          ret.object = current;
        }
      }
    }
    return ret;
  }),
  findObject: (function(path, dontResolveLastLink) {
    FS.ensureRoot();
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (ret.exists) {
      return ret.object;
    } else {
      ___setErrNo(ret.error);
      return null;
    }
  }),
  createObject: (function(parent, name, properties, canRead, canWrite) {
    if (!parent) parent = "/";
    if (typeof parent === "string") parent = FS.findObject(parent);
    if (!parent) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent path must exist.");
    }
    if (!parent.isFolder) {
      ___setErrNo(ERRNO_CODES.ENOTDIR);
      throw new Error("Parent must be a folder.");
    }
    if (!parent.write && !FS.ignorePermissions) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent folder must be writeable.");
    }
    if (!name || name == "." || name == "..") {
      ___setErrNo(ERRNO_CODES.ENOENT);
      throw new Error("Name must not be empty.");
    }
    if (parent.contents.hasOwnProperty(name)) {
      ___setErrNo(ERRNO_CODES.EEXIST);
      throw new Error("Can't overwrite object.");
    }
    parent.contents[name] = {
      read: canRead === undefined ? true : canRead,
      write: canWrite === undefined ? false : canWrite,
      timestamp: Date.now(),
      inodeNumber: FS.nextInode++
    };
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        parent.contents[name][key] = properties[key];
      }
    }
    return parent.contents[name];
  }),
  createFolder: (function(parent, name, canRead, canWrite) {
    var properties = {
      isFolder: true,
      isDevice: false,
      contents: {}
    };
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createPath: (function(parent, path, canRead, canWrite) {
    var current = FS.findObject(parent);
    if (current === null) throw new Error("Invalid parent.");
    path = path.split("/").reverse();
    while (path.length) {
      var part = path.pop();
      if (!part) continue;
      if (!current.contents.hasOwnProperty(part)) {
        FS.createFolder(current, part, canRead, canWrite);
      }
      current = current.contents[part];
    }
    return current;
  }),
  createFile: (function(parent, name, properties, canRead, canWrite) {
    properties.isFolder = false;
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createDataFile: (function(parent, name, data, canRead, canWrite) {
    if (typeof data === "string") {
      var dataArray = new Array(data.length);
      for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
      data = dataArray;
    }
    var properties = {
      isDevice: false,
      contents: data.subarray ? data.subarray(0) : data
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLazyFile: (function(parent, name, url, canRead, canWrite) {
    var properties = {
      isDevice: false,
      url: url
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror) {
    Browser.ensureObjects();
    var fullname = FS.joinPath([ parent, name ], true);
    function processData(byteArray) {
      function finish(byteArray) {
        FS.createDataFile(parent, name, byteArray, canRead, canWrite);
        if (onload) onload();
        removeRunDependency("cp " + fullname);
      }
      var handled = false;
      Module["preloadPlugins"].forEach((function(plugin) {
        if (handled) return;
        if (plugin["canHandle"](fullname)) {
          plugin["handle"](byteArray, fullname, finish, (function() {
            if (onerror) onerror();
            removeRunDependency("cp " + fullname);
          }));
          handled = true;
        }
      }));
      if (!handled) finish(byteArray);
    }
    addRunDependency("cp " + fullname);
    if (typeof url == "string") {
      Browser.asyncLoad(url, (function(byteArray) {
        processData(byteArray);
      }), onerror);
    } else {
      processData(url);
    }
  }),
  createLink: (function(parent, name, target, canRead, canWrite) {
    var properties = {
      isDevice: false,
      link: target
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createDevice: (function(parent, name, input, output) {
    if (!(input || output)) {
      throw new Error("A device must have at least one callback defined.");
    }
    var ops = {
      isDevice: true,
      input: input,
      output: output
    };
    return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
  }),
  forceLoadFile: (function(obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    var success = true;
    if (typeof XMLHttpRequest !== "undefined") {
      assert("Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc");
    } else if (Module["read"]) {
      try {
        obj.contents = intArrayFromString(Module["read"](obj.url), true);
      } catch (e) {
        success = false;
      }
    } else {
      throw new Error("Cannot load without read() or XMLHttpRequest.");
    }
    if (!success) ___setErrNo(ERRNO_CODES.EIO);
    return success;
  }),
  ensureRoot: (function() {
    if (FS.root) return;
    FS.root = {
      read: true,
      write: true,
      isFolder: true,
      isDevice: false,
      timestamp: Date.now(),
      inodeNumber: 1,
      contents: {}
    };
  }),
  init: (function(input, output, error) {
    assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
    FS.init.initialized = true;
    FS.ensureRoot();
    input = input || Module["stdin"];
    output = output || Module["stdout"];
    error = error || Module["stderr"];
    var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
    if (!input) {
      stdinOverridden = false;
      input = (function() {
        if (!input.cache || !input.cache.length) {
          var result;
          if (typeof window != "undefined" && typeof window.prompt == "function") {
            result = window.prompt("Input: ");
            if (result === null) result = String.fromCharCode(0);
          } else if (typeof readline == "function") {
            result = readline();
          }
          if (!result) result = "";
          input.cache = intArrayFromString(result + "\n", true);
        }
        return input.cache.shift();
      });
    }
    var utf8 = new Runtime.UTF8Processor;
    function simpleOutput(val) {
      if (val === null || val === "\n".charCodeAt(0)) {
        output.printer(output.buffer.join(""));
        output.buffer = [];
      } else {
        output.buffer.push(utf8.processCChar(val));
      }
    }
    if (!output) {
      stdoutOverridden = false;
      output = simpleOutput;
    }
    if (!output.printer) output.printer = Module["print"];
    if (!output.buffer) output.buffer = [];
    if (!error) {
      stderrOverridden = false;
      error = simpleOutput;
    }
    if (!error.printer) error.printer = Module["print"];
    if (!error.buffer) error.buffer = [];
    try {
      FS.createFolder("/", "tmp", true, true);
    } catch (e) {}
    var devFolder = FS.createFolder("/", "dev", true, true);
    var stdin = FS.createDevice(devFolder, "stdin", input);
    var stdout = FS.createDevice(devFolder, "stdout", null, output);
    var stderr = FS.createDevice(devFolder, "stderr", null, error);
    FS.createDevice(devFolder, "tty", input, output);
    FS.streams[1] = {
      path: "/dev/stdin",
      object: stdin,
      position: 0,
      isRead: true,
      isWrite: false,
      isAppend: false,
      isTerminal: !stdinOverridden,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[2] = {
      path: "/dev/stdout",
      object: stdout,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      isTerminal: !stdoutOverridden,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[3] = {
      path: "/dev/stderr",
      object: stderr,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      isTerminal: !stderrOverridden,
      error: false,
      eof: false,
      ungotten: []
    };
    _stdin = allocate([ 1 ], "void*", ALLOC_STACK);
    _stdout = allocate([ 2 ], "void*", ALLOC_STACK);
    _stderr = allocate([ 3 ], "void*", ALLOC_STACK);
    FS.createPath("/", "dev/shm/tmp", true, true);
    for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
      FS.streams[i] = null;
    }
    FS.streams[_stdin] = FS.streams[1];
    FS.streams[_stdout] = FS.streams[2];
    FS.streams[_stderr] = FS.streams[3];
    __impure_ptr = allocate([ allocate([ 0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0 ], "void*", ALLOC_STATIC) ], "void*", ALLOC_STATIC);
  }),
  quit: (function() {
    if (!FS.init.initialized) return;
    if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output("\n".charCodeAt(0));
    if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output("\n".charCodeAt(0));
  }),
  standardizePath: (function(path) {
    if (path.substr(0, 2) == "./") path = path.substr(2);
    return path;
  }),
  deleteFile: (function(path) {
    var path = FS.analyzePath(path);
    if (!path.parentExists || !path.exists) {
      throw "Invalid path " + path;
    }
    delete path.parentObject.contents[path.name];
  })
};

function _pwrite(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var contents = stream.object.contents;
    while (contents.length < offset) contents.push(0);
    for (var i = 0; i < nbyte; i++) {
      contents[offset + i] = HEAPU8[buf + i];
    }
    stream.object.timestamp = Date.now();
    return i;
  }
}

function _write(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    if (stream.object.isDevice) {
      if (stream.object.output) {
        for (var i = 0; i < nbyte; i++) {
          try {
            stream.object.output(HEAP8[buf + i]);
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        stream.object.timestamp = Date.now();
        return i;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
      if (bytesWritten != -1) stream.position += bytesWritten;
      return bytesWritten;
    }
  }
}

function _fwrite(ptr, size, nitems, stream) {
  var bytesToWrite = nitems * size;
  if (bytesToWrite == 0) return 0;
  var bytesWritten = _write(stream, ptr, bytesToWrite);
  if (bytesWritten == -1) {
    if (FS.streams[stream]) FS.streams[stream].error = true;
    return -1;
  } else {
    return Math.floor(bytesWritten / size);
  }
}

function _fprintf(stream, format, varargs) {
  var result = __formatString(format, varargs);
  var stack = Runtime.stackSave();
  var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
  Runtime.stackRestore(stack);
  return ret;
}

function _printf(format, varargs) {
  var stdout = HEAP32[_stdout >> 2];
  return _fprintf(stdout, format, varargs);
}

var _llvm_va_start;

function _llvm_va_end() {}

function _pread(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isRead) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var bytesRead = 0;
    while (stream.ungotten.length && nbyte > 0) {
      HEAP8[buf++] = stream.ungotten.pop();
      nbyte--;
      bytesRead++;
    }
    var contents = stream.object.contents;
    var size = Math.min(contents.length - offset, nbyte);
    for (var i = 0; i < size; i++) {
      HEAP8[buf + i] = contents[offset + i];
    }
    bytesRead += size;
    return bytesRead;
  }
}

function _read(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isRead) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var bytesRead;
    if (stream.object.isDevice) {
      if (stream.object.input) {
        bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[buf++] = stream.ungotten.pop();
          nbyte--;
          bytesRead++;
        }
        for (var i = 0; i < nbyte; i++) {
          try {
            var result = stream.object.input();
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          HEAP8[buf + i] = result;
        }
        return bytesRead;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var ungotSize = stream.ungotten.length;
      bytesRead = _pread(fildes, buf, nbyte, stream.position);
      if (bytesRead != -1) {
        stream.position += stream.ungotten.length - ungotSize + bytesRead;
      }
      return bytesRead;
    }
  }
}

function _fgetc(stream) {
  if (!FS.streams[stream]) return -1;
  var streamObj = FS.streams[stream];
  if (streamObj.eof || streamObj.error) return -1;
  var ret = _read(stream, _fgetc.ret, 1);
  if (ret == 0) {
    streamObj.eof = true;
    return -1;
  } else if (ret == -1) {
    streamObj.error = true;
    return -1;
  } else {
    return HEAPU8[_fgetc.ret];
  }
}

var _getc = _fgetc;

function _ungetc(c, stream) {
  if (FS.streams[stream]) {
    c = unSign(c & 255);
    FS.streams[stream].ungotten.push(c);
    return c;
  } else {
    return -1;
  }
}

function _fputc(c, stream) {
  var chr = unSign(c & 255);
  HEAP8[_fputc.ret] = chr;
  var ret = _write(stream, _fputc.ret, 1);
  if (ret == -1) {
    if (FS.streams[stream]) FS.streams[stream].error = true;
    return -1;
  } else {
    return chr;
  }
}

function _ferror(stream) {
  return Number(FS.streams[stream] && FS.streams[stream].error);
}

var _putc = _fputc;

function _abort() {
  ABORT = true;
  throw "abort() at " + (new Error).stack;
}

var _raise;

function _nl_langinfo(item) {
  var result;
  switch (item) {
   case 0:
    result = "ANSI_X3.4-1968";
    break;
   case 1:
    result = "%a %b %e %H:%M:%S %Y";
    break;
   case 2:
    result = "%m/%d/%y";
    break;
   case 3:
    result = "%H:%M:%S";
    break;
   case 4:
    result = "%I:%M:%S %p";
    break;
   case 5:
    result = "AM";
    break;
   case 6:
    result = "PM";
    break;
   case 7:
    result = "Sunday";
    break;
   case 8:
    result = "Monday";
    break;
   case 9:
    result = "Tuesday";
    break;
   case 10:
    result = "Wednesday";
    break;
   case 11:
    result = "Thursday";
    break;
   case 12:
    result = "Friday";
    break;
   case 13:
    result = "Saturday";
    break;
   case 14:
    result = "Sun";
    break;
   case 15:
    result = "Mon";
    break;
   case 16:
    result = "Tue";
    break;
   case 17:
    result = "Wed";
    break;
   case 18:
    result = "Thu";
    break;
   case 19:
    result = "Fri";
    break;
   case 20:
    result = "Sat";
    break;
   case 21:
    result = "January";
    break;
   case 22:
    result = "February";
    break;
   case 23:
    result = "March";
    break;
   case 24:
    result = "April";
    break;
   case 25:
    result = "May";
    break;
   case 26:
    result = "June";
    break;
   case 27:
    result = "July";
    break;
   case 28:
    result = "August";
    break;
   case 29:
    result = "September";
    break;
   case 30:
    result = "October";
    break;
   case 31:
    result = "November";
    break;
   case 32:
    result = "December";
    break;
   case 33:
    result = "Jan";
    break;
   case 34:
    result = "Feb";
    break;
   case 35:
    result = "Mar";
    break;
   case 36:
    result = "Apr";
    break;
   case 37:
    result = "May";
    break;
   case 38:
    result = "Jun";
    break;
   case 39:
    result = "Jul";
    break;
   case 40:
    result = "Aug";
    break;
   case 41:
    result = "Sep";
    break;
   case 42:
    result = "Oct";
    break;
   case 43:
    result = "Nov";
    break;
   case 44:
    result = "Dec";
    break;
   case 49:
    result = "";
    break;
   case 50:
    result = ".";
    break;
   case 51:
    result = "";
    break;
   case 52:
    result = "^[yY]";
    break;
   case 53:
    result = "^[nN]";
    break;
   case 56:
    result = "-";
    break;
   case 45:
   case 46:
   case 47:
   case 48:
   default:
    result = "";
    break;
  }
  var me = _nl_langinfo;
  if (!me.ret) me.ret = _malloc(32);
  for (var i = 0; i < result.length; i++) {
    HEAP8[me.ret + i] = result.charCodeAt(i);
  }
  HEAP8[me.ret + i] = 0;
  return me.ret;
}

function _fread(ptr, size, nitems, stream) {
  var bytesToRead = nitems * size;
  if (bytesToRead == 0) return 0;
  var bytesRead = _read(stream, ptr, bytesToRead);
  var streamObj = FS.streams[stream];
  if (bytesRead == -1) {
    if (streamObj) streamObj.error = true;
    return -1;
  } else {
    if (bytesRead < bytesToRead) streamObj.eof = true;
    return Math.floor(bytesRead / size);
  }
}

function _llvm_va_copy(ppdest, ppsrc) {
  HEAP8[ppdest] = HEAP8[ppsrc];
  HEAP8[ppdest + 1] = HEAP8[ppsrc + 1];
  HEAP8[ppdest + 2] = HEAP8[ppsrc + 2];
  HEAP8[ppdest + 3] = HEAP8[ppsrc + 3];
}

function _islower(chr) {
  return chr >= "a".charCodeAt(0) && chr <= "z".charCodeAt(0);
}

var _vfprintf = _fprintf;

var _vsnprintf = _snprintf;

var _vsprintf = _sprintf;

function _isxdigit(chr) {
  return chr >= "0".charCodeAt(0) && chr <= "9".charCodeAt(0) || chr >= "a".charCodeAt(0) && chr <= "f".charCodeAt(0) || chr >= "A".charCodeAt(0) && chr <= "F".charCodeAt(0);
}

function __isFloat(text) {
  return !!/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text);
}

function __scanString(format, get, unget, varargs) {
  if (!__scanString.whiteSpace) {
    __scanString.whiteSpace = {};
    __scanString.whiteSpace[" ".charCodeAt(0)] = 1;
    __scanString.whiteSpace["\t".charCodeAt(0)] = 1;
    __scanString.whiteSpace["\n".charCodeAt(0)] = 1;
    __scanString.whiteSpace[" "] = 1;
    __scanString.whiteSpace["\t"] = 1;
    __scanString.whiteSpace["\n"] = 1;
  }
  format = Pointer_stringify(format);
  var formatIndex = 0;
  var argsi = 0;
  var fields = 0;
  var argIndex = 0;
  var next;
  while (1) {
    next = get();
    if (next == 0) return 0;
    if (!(next in __scanString.whiteSpace)) break;
  }
  unget(next);
  next = 1;
  for (var formatIndex = 0; formatIndex < format.length; formatIndex++) {
    if (next <= 0) return fields;
    var next = get();
    if (next <= 0) return fields;
    if (format[formatIndex] === "%") {
      formatIndex++;
      var maxSpecifierStart = formatIndex;
      while (format[formatIndex].charCodeAt(0) >= "0".charCodeAt(0) && format[formatIndex].charCodeAt(0) <= "9".charCodeAt(0)) {
        formatIndex++;
      }
      var max_;
      if (formatIndex != maxSpecifierStart) {
        max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
      }
      var long_ = false;
      var half = false;
      if (format[formatIndex] == "l") {
        long_ = true;
        formatIndex++;
      } else if (format[formatIndex] == "h") {
        half = true;
        formatIndex++;
      }
      var type = format[formatIndex];
      formatIndex++;
      var curr = 0;
      var buffer = [];
      if (type == "f") {
        var last = -1;
        while (next > 0) {
          buffer.push(String.fromCharCode(next));
          if (__isFloat(buffer.join(""))) {
            last = buffer.length;
          }
          next = get();
        }
        unget(next);
        while (buffer.length > last) {
          unget(buffer.pop().charCodeAt(0));
        }
        next = get();
      } else {
        var first = true;
        while ((curr < max_ || isNaN(max_)) && next > 0) {
          if (!(next in __scanString.whiteSpace) && (type == "s" || (type === "d" || type == "u") && (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0) || first && next == "-".charCodeAt(0)) || type === "x" && (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0) || next >= "a".charCodeAt(0) && next <= "f".charCodeAt(0) || next >= "A".charCodeAt(0) && next <= "F".charCodeAt(0))) && (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) {
            buffer.push(String.fromCharCode(next));
            next = get();
            curr++;
          } else {
            break;
          }
          first = false;
        }
      }
      if (buffer.length === 0) return 0;
      var text = buffer.join("");
      var argPtr = HEAP32[varargs + argIndex >> 2];
      argIndex += Runtime.getNativeFieldSize("void*");
      switch (type) {
       case "d":
       case "u":
        if (half) {
          HEAP16[argPtr >> 1] = parseInt(text, 10);
        } else {
          HEAP32[argPtr >> 2] = parseInt(text, 10);
        }
        break;
       case "x":
        HEAP32[argPtr >> 2] = parseInt(text, 16);
        break;
       case "f":
        if (long_) {
          tempDoubleF64[0] = parseFloat(text), HEAP32[argPtr >> 2] = tempDoubleI32[0], HEAP32[argPtr + 4 >> 2] = tempDoubleI32[1];
        } else {
          HEAPF32[argPtr >> 2] = parseFloat(text);
        }
        break;
       case "s":
        var array = intArrayFromString(text);
        for (var j = 0; j < array.length; j++) {
          HEAP8[argPtr + j] = array[j];
        }
        break;
      }
      fields++;
    } else if (format[formatIndex] in __scanString.whiteSpace) {
      while (next in __scanString.whiteSpace) {
        next = get();
        if (next <= 0) return fields;
      }
      unget(next);
    } else {
      if (format[formatIndex].charCodeAt(0) !== next) {
        unget(next);
        return fields;
      }
    }
  }
  return fields;
}

function _fscanf(stream, format, varargs) {
  if (FS.streams[stream]) {
    var get = (function() {
      return _fgetc(stream);
    });
    var unget = (function(c) {
      return _ungetc(c, stream);
    });
    return __scanString(format, get, unget, varargs);
  } else {
    return -1;
  }
}

function _sscanf(s, format, varargs) {
  var index = 0;
  var get = (function() {
    return HEAP8[s + index++];
  });
  var unget = (function() {
    index--;
  });
  return __scanString(format, get, unget, varargs);
}

function _sysconf(name) {
  switch (name) {
   case 8:
    return PAGE_SIZE;
   case 54:
   case 56:
   case 21:
   case 61:
   case 63:
   case 22:
   case 67:
   case 23:
   case 24:
   case 25:
   case 26:
   case 27:
   case 69:
   case 28:
   case 101:
   case 70:
   case 71:
   case 29:
   case 30:
   case 199:
   case 75:
   case 76:
   case 32:
   case 43:
   case 44:
   case 80:
   case 46:
   case 47:
   case 45:
   case 48:
   case 49:
   case 42:
   case 82:
   case 33:
   case 7:
   case 108:
   case 109:
   case 107:
   case 112:
   case 119:
   case 121:
    return 200809;
   case 13:
   case 104:
   case 94:
   case 95:
   case 34:
   case 35:
   case 77:
   case 81:
   case 83:
   case 84:
   case 85:
   case 86:
   case 87:
   case 88:
   case 89:
   case 90:
   case 91:
   case 94:
   case 95:
   case 110:
   case 111:
   case 113:
   case 114:
   case 115:
   case 116:
   case 117:
   case 118:
   case 120:
   case 40:
   case 16:
   case 79:
   case 19:
    return -1;
   case 92:
   case 93:
   case 5:
   case 72:
   case 6:
   case 74:
   case 92:
   case 93:
   case 96:
   case 97:
   case 98:
   case 99:
   case 102:
   case 103:
   case 105:
    return 1;
   case 38:
   case 66:
   case 50:
   case 51:
   case 4:
    return 1024;
   case 15:
   case 64:
   case 41:
    return 32;
   case 55:
   case 37:
   case 17:
    return 2147483647;
   case 18:
   case 1:
    return 47839;
   case 59:
   case 57:
    return 99;
   case 68:
   case 58:
    return 2048;
   case 0:
    return 2097152;
   case 3:
    return 65536;
   case 14:
    return 32768;
   case 73:
    return 32767;
   case 39:
    return 16384;
   case 60:
    return 1e3;
   case 106:
    return 700;
   case 52:
    return 256;
   case 62:
    return 255;
   case 2:
    return 100;
   case 65:
    return 64;
   case 36:
    return 20;
   case 100:
    return 16;
   case 20:
    return 6;
   case 53:
    return 4;
  }
  ___setErrNo(ERRNO_CODES.EINVAL);
  return -1;
}

function _time(ptr) {
  var ret = Math.floor(Date.now() / 1e3);
  if (ptr) {
    HEAP32[ptr >> 2] = ret;
  }
  return ret;
}

function ___errno_location() {
  return ___setErrNo.ret;
}

var ___errno = ___errno_location;

function _sbrk(bytes) {
  var self = _sbrk;
  if (!self.called) {
    STATICTOP = alignMemoryPage(STATICTOP);
    self.called = true;
    _sbrk.DYNAMIC_START = STATICTOP;
  }
  var ret = STATICTOP;
  if (bytes != 0) Runtime.staticAlloc(bytes);
  return ret;
}

function ___gxx_personality_v0() {}

function ___cxa_allocate_exception(size) {
  return _malloc(size);
}

function _llvm_eh_exception() {
  return HEAP32[_llvm_eh_exception.buf >> 2];
}

function __ZSt18uncaught_exceptionv() {
  return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}

function ___cxa_is_number_type(type) {
  var isNumber = false;
  try {
    if (type == __ZTIi) isNumber = true;
  } catch (e) {}
  try {
    if (type == __ZTIl) isNumber = true;
  } catch (e) {}
  try {
    if (type == __ZTIx) isNumber = true;
  } catch (e) {}
  try {
    if (type == __ZTIf) isNumber = true;
  } catch (e) {}
  try {
    if (type == __ZTId) isNumber = true;
  } catch (e) {}
  return isNumber;
}

function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
  if (possibility == 0) return false;
  if (possibilityType == 0 || possibilityType == definiteType) return true;
  var possibility_type_info;
  if (___cxa_is_number_type(possibilityType)) {
    possibility_type_info = possibilityType;
  } else {
    var possibility_type_infoAddr = HEAP32[possibilityType >> 2] - 8;
    possibility_type_info = HEAP32[possibility_type_infoAddr >> 2];
  }
  switch (possibility_type_info) {
   case 0:
    var definite_type_infoAddr = HEAP32[definiteType >> 2] - 8;
    var definite_type_info = HEAP32[definite_type_infoAddr >> 2];
    if (definite_type_info == 0) {
      var defPointerBaseAddr = definiteType + 8;
      var defPointerBaseType = HEAP32[defPointerBaseAddr >> 2];
      var possPointerBaseAddr = possibilityType + 8;
      var possPointerBaseType = HEAP32[possPointerBaseAddr >> 2];
      return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
    } else return false;
   case 1:
    return false;
   case 2:
    var parentTypeAddr = possibilityType + 8;
    var parentType = HEAP32[parentTypeAddr >> 2];
    return ___cxa_does_inherit(definiteType, parentType, possibility);
   default:
    return false;
  }
}

function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
  if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
    var throwntypeInfoAddr = HEAP32[throwntype >> 2] - 8;
    var throwntypeInfo = HEAP32[throwntypeInfoAddr >> 2];
    if (throwntypeInfo == 0) thrown = HEAP32[thrown >> 2];
  }
  for (var i = 0; i < typeArray.length; i++) {
    if (___cxa_does_inherit(typeArray[i], throwntype, thrown)) return {
      f0: thrown,
      f1: typeArray[i]
    };
  }
  return {
    f0: thrown,
    f1: throwntype
  };
}

function ___cxa_throw(ptr, type, destructor) {
  if (!___cxa_throw.initialized) {
    try {
      HEAP32[__ZTVN10__cxxabiv119__pointer_type_infoE >> 2] = 0;
    } catch (e) {}
    try {
      HEAP32[__ZTVN10__cxxabiv117__class_type_infoE >> 2] = 1;
    } catch (e) {}
    try {
      HEAP32[__ZTVN10__cxxabiv120__si_class_type_infoE >> 2] = 2;
    } catch (e) {}
    ___cxa_throw.initialized = true;
  }
  Module.printErr("Compiled code throwing an exception, " + [ ptr, type, destructor ] + ", at " + (new Error).stack);
  HEAP32[_llvm_eh_exception.buf >> 2] = ptr;
  HEAP32[_llvm_eh_exception.buf + 4 >> 2] = type;
  HEAP32[_llvm_eh_exception.buf + 8 >> 2] = destructor;
  if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
    __ZSt18uncaught_exceptionv.uncaught_exception = 1;
  } else {
    __ZSt18uncaught_exceptionv.uncaught_exception++;
  }
  throw ptr;
}

function ___cxa_call_unexpected(exception) {
  ABORT = true;
  throw exception;
}

function ___cxa_begin_catch(ptr) {
  __ZSt18uncaught_exceptionv.uncaught_exception--;
  return ptr;
}

function ___cxa_free_exception(ptr) {
  return _free(ptr);
}

function ___cxa_end_catch() {
  if (___cxa_end_catch.rethrown) {
    ___cxa_end_catch.rethrown = false;
    return;
  }
  __THREW__ = false;
  HEAP32[_llvm_eh_exception.buf + 4 >> 2] = 0;
  var ptr = HEAP32[_llvm_eh_exception.buf >> 2];
  var destructor = HEAP32[_llvm_eh_exception.buf + 8 >> 2];
  if (destructor) {
    FUNCTION_TABLE[destructor](ptr);
    HEAP32[_llvm_eh_exception.buf + 8 >> 2] = 0;
  }
  if (ptr) {
    ___cxa_free_exception(ptr);
    HEAP32[_llvm_eh_exception.buf >> 2] = 0;
  }
}

var __ZNSt9exceptionD2Ev;

function _llvm_uadd_with_overflow_i32(x, y) {
  x = x >>> 0;
  y = y >>> 0;
  return {
    f0: x + y >>> 0,
    f1: x + y > 4294967295
  };
}

function _llvm_bswap_i32(x) {
  return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24;
}

function _fputs(s, stream) {
  return _write(stream, s, _strlen(s));
}

function _puts(s) {
  var stdout = HEAP32[_stdout >> 2];
  var ret = _fputs(s, stdout);
  if (ret < 0) {
    return ret;
  } else {
    var newlineRet = _fputc("\n".charCodeAt(0), stdout);
    return newlineRet < 0 ? -1 : ret + 1;
  }
}

function _putchar(c) {
  return _fputc(c, HEAP32[_stdout >> 2]);
}

var Browser = {
  mainLoop: {
    scheduler: null,
    shouldPause: false,
    paused: false,
    queue: [],
    pause: (function() {
      Browser.mainLoop.shouldPause = true;
    }),
    resume: (function() {
      if (Browser.mainLoop.paused) {
        Browser.mainLoop.paused = false;
        Browser.mainLoop.scheduler();
      }
      Browser.mainLoop.shouldPause = false;
    }),
    updateStatus: (function() {
      if (Module["setStatus"]) {
        var message = Module["statusMessage"] || "Please wait...";
        var remaining = Browser.mainLoop.remainingBlockers;
        var expected = Browser.mainLoop.expectedBlockers;
        if (remaining) {
          if (remaining < expected) {
            Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
          } else {
            Module["setStatus"](message);
          }
        } else {
          Module["setStatus"]("");
        }
      }
    })
  },
  pointerLock: false,
  moduleContextCreatedCallbacks: [],
  ensureObjects: (function() {
    if (Browser.ensured) return;
    Browser.ensured = true;
    try {
      new Blob;
      Browser.hasBlobConstructor = true;
    } catch (e) {
      Browser.hasBlobConstructor = false;
      console.log("warning: no blob constructor, cannot create blobs with mimetypes");
    }
    Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
    Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : console.log("warning: cannot create object URLs");
    function getMimetype(name) {
      return {
        "jpg": "image/jpeg",
        "png": "image/png",
        "bmp": "image/bmp",
        "ogg": "audio/ogg",
        "wav": "audio/wav",
        "mp3": "audio/mpeg"
      }[name.substr(-3)];
      return ret;
    }
    if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
    var imagePlugin = {};
    imagePlugin["canHandle"] = (function(name) {
      return name.substr(-4) in {
        ".jpg": 1,
        ".png": 1,
        ".bmp": 1
      };
    });
    imagePlugin["handle"] = (function(byteArray, name, onload, onerror) {
      var b = null;
      if (Browser.hasBlobConstructor) {
        try {
          b = new Blob([ byteArray ], {
            type: getMimetype(name)
          });
        } catch (e) {
          Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
        }
      }
      if (!b) {
        var bb = new Browser.BlobBuilder;
        bb.append((new Uint8Array(byteArray)).buffer);
        b = bb.getBlob();
      }
      var url = Browser.URLObject.createObjectURL(b);
      var img = new Image;
      img.onload = (function() {
        assert(img.complete, "Image " + name + " could not be decoded");
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        Module["preloadedImages"][name] = canvas;
        Browser.URLObject.revokeObjectURL(url);
        if (onload) onload(byteArray);
      });
      img.onerror = (function(event) {
        console.log("Image " + url + " could not be decoded");
        if (onerror) onerror();
      });
      img.src = url;
    });
    Module["preloadPlugins"].push(imagePlugin);
    var audioPlugin = {};
    audioPlugin["canHandle"] = (function(name) {
      return name.substr(-4) in {
        ".ogg": 1,
        ".wav": 1,
        ".mp3": 1
      };
    });
    audioPlugin["handle"] = (function(byteArray, name, onload, onerror) {
      var done = false;
      function finish(audio) {
        if (done) return;
        done = true;
        Module["preloadedAudios"][name] = audio;
        if (onload) onload(byteArray);
      }
      if (Browser.hasBlobConstructor) {
        var b = new Blob([ byteArray ], {
          type: getMimetype(name)
        });
        var url = Browser.URLObject.createObjectURL(b);
        var audio = new Audio;
        audio.addEventListener("canplaythrough", (function() {
          finish(audio);
        }), false);
        audio.onerror = (function(event) {
          if (done) return;
          console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
          function encode64(data) {
            var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var PAD = "=";
            var ret = "";
            var leftchar = 0;
            var leftbits = 0;
            for (var i = 0; i < data.length; i++) {
              leftchar = leftchar << 8 | data[i];
              leftbits += 8;
              while (leftbits >= 6) {
                var curr = leftchar >> leftbits - 6 & 63;
                leftbits -= 6;
                ret += BASE[curr];
              }
            }
            if (leftbits == 2) {
              ret += BASE[(leftchar & 3) << 4];
              ret += PAD + PAD;
            } else if (leftbits == 4) {
              ret += BASE[(leftchar & 15) << 2];
              ret += PAD;
            }
            return ret;
          }
          audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
          finish(audio);
        });
        audio.src = url;
      } else {
        Module["preloadedAudios"][name] = new Audio;
        if (onerror) onerror();
      }
    });
    Module["preloadPlugins"].push(audioPlugin);
  }),
  createContext: (function(canvas, useWebGL, setInModule) {
    try {
      var ctx = canvas.getContext(useWebGL ? "experimental-webgl" : "2d");
      if (!ctx) throw ":(";
    } catch (e) {
      Module.print("Could not create canvas - " + e);
      return null;
    }
    if (useWebGL) {
      canvas.style.backgroundColor = "black";
      canvas.addEventListener("webglcontextlost", (function(event) {
        alert("WebGL context lost. You will need to reload the page.");
      }), false);
    }
    if (setInModule) {
      Module.ctx = ctx;
      Module.useWebGL = useWebGL;
      Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
        callback();
      }));
    }
    return ctx;
  }),
  requestFullScreen: (function() {
    var canvas = Module.canvas;
    function fullScreenChange() {
      var isFullScreen = false;
      if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"]) === canvas) {
        canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"];
        canvas.requestPointerLock();
        isFullScreen = true;
      }
      if (Module["onFullScreen"]) Module["onFullScreen"](isFullScreen);
    }
    document.addEventListener("fullscreenchange", fullScreenChange, false);
    document.addEventListener("mozfullscreenchange", fullScreenChange, false);
    document.addEventListener("webkitfullscreenchange", fullScreenChange, false);
    function pointerLockChange() {
      Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas;
    }
    document.addEventListener("pointerlockchange", pointerLockChange, false);
    document.addEventListener("mozpointerlockchange", pointerLockChange, false);
    document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
    canvas.requestFullScreen = canvas["requestFullScreen"] || canvas["mozRequestFullScreen"] || (canvas["webkitRequestFullScreen"] ? (function() {
      canvas["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
    }) : null);
    canvas.requestFullScreen();
  }),
  requestAnimationFrame: (function(func) {
    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || window["setTimeout"];
    }
    window.requestAnimationFrame(func);
  }),
  getMovementX: (function(event) {
    return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
  }),
  getMovementY: (function(event) {
    return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
  }),
  xhrLoad: (function(url, onload, onerror) {
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, true);
    xhr.responseType = "arraybuffer";
    xhr.onload = (function() {
      if (xhr.status == 200) {
        onload(xhr.response);
      } else {
        onerror();
      }
    });
    xhr.onerror = onerror;
    xhr.send(null);
  }),
  asyncLoad: (function(url, onload, onerror) {
    Browser.xhrLoad(url, (function(arrayBuffer) {
      assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
      onload(new Uint8Array(arrayBuffer));
      removeRunDependency("al " + url);
    }), (function(event) {
      if (onerror) {
        onerror();
      } else {
        throw 'Loading data file "' + url + '" failed.';
      }
    }));
    addRunDependency("al " + url);
  })
};

___setErrNo(0);

__ATINIT__.unshift({
  func: (function() {
    if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
  })
});

__ATMAIN__.push({
  func: (function() {
    FS.ignorePermissions = false;
  })
});

__ATEXIT__.push({
  func: (function() {
    FS.quit();
  })
});

Module["FS_createFolder"] = FS.createFolder;

Module["FS_createPath"] = FS.createPath;

Module["FS_createDataFile"] = FS.createDataFile;

Module["FS_createPreloadedFile"] = FS.createPreloadedFile;

Module["FS_createLazyFile"] = FS.createLazyFile;

Module["FS_createLink"] = FS.createLink;

Module["FS_createDevice"] = FS.createDevice;

_fgetc.ret = allocate([ 0 ], "i8", ALLOC_STATIC);

_fputc.ret = allocate([ 0 ], "i8", ALLOC_STATIC);

_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);

Module["requestFullScreen"] = (function() {
  Browser.requestFullScreen();
});

Module["requestAnimationFrame"] = (function(func) {
  Browser.requestAnimationFrame(func);
});

Module["pauseMainLoop"] = (function() {
  Browser.mainLoop.pause();
});

Module["resumeMainLoop"] = (function() {
  Browser.mainLoop.resume();
});

Module.callMain = function callMain(args) {
  var argc = args.length + 1;
  function pad() {
    for (var i = 0; i < 4 - 1; i++) {
      argv.push(0);
    }
  }
  var argv = [ allocate(intArrayFromString("/bin/this.program"), "i8", ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc - 1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, "i32", ALLOC_STATIC);
  return _main(argc, argv, 0);
};

var _repeat_char_buf;

var _users;

var _win_size_x;

var _win_size_x6;

var _stdin;

var _stdout;

var _invsqrttab;

var _sq_res_0x100;

var _nrtrial;

var _logs;

var _stderr;

var ___gmp_errno;

var ___gmp_allocate_func;

var ___gmp_reallocate_func;

var ___gmp_free_func;

var ___gmp_bits_per_limb;

var ___gmp_0;

var ___gmp_junk;

var ___gmp_default_fp_limb_precision;

var ___gmp_fib_table;

var ___gmpn_bases;

var _mpn_fft_table;

var _win_size_x317;

var _gmp_primes_dtab;

var _gmp_primes_ptab;

var ___gmpz_fac_ui_table;

var ___gmp_fprintf_funs;

var ___gmp_snprintf_funs;

var ___gmp_sprintf_funs;

var ___gmp_asprintf_funs;

var ___gmp_rand_lc_scheme;

var _Linear_Congruential_Generator;

var _Mersenne_Twister_Generator_Noseed;

var _default_state;

var _Mersenne_Twister_Generator;

var ___gmp_rands_initialized;

var ___gmp_rands;

var ___gmp_fscanf_funs;

var ___gmp_sscanf_funs;

var ___gmp_version;

var __gm_;

var _mparams;

var __ZSt7nothrow;

var __ZL13__new_handler;

var __ZTVSt9bad_alloc;

var __ZTVSt20bad_array_new_length;

var __ZTVN10__cxxabiv120__si_class_type_infoE;

var __ZTISt9exception;

var __ZTISt9bad_alloc;

var __ZTISt20bad_array_new_length;

var __ZNSt9bad_allocC1Ev;

var __ZNSt9bad_allocD1Ev;

var __ZNSt20bad_array_new_lengthC1Ev;

var __ZNSt20bad_array_new_lengthD1Ev;

var __ZNSt20bad_array_new_lengthD2Ev;

_repeat_char_buf = allocate(5001, "i8", ALLOC_STATIC);

_users = allocate(4, "%struct.my_struct*", ALLOC_STATIC);

STRING_TABLE.__str1 = allocate([ 49, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2 = allocate([ 48, 46, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3 = allocate([ 37, 115, 10, 37, 115, 10, 37, 100, 10, 37, 115, 10, 37, 100, 10, 37, 115, 10, 37, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4 = allocate([ 37, 115, 10, 37, 115, 10, 37, 100, 10, 37, 115, 10, 37, 100, 10, 37, 115, 10, 37, 100, 10, 37, 115, 10, 37, 115, 10, 37, 100, 0 ], "i8", ALLOC_STATIC);

_win_size_x = allocate([ 0, 0, 0, 0, 7, 0, 0, 0, 25, 0, 0, 0, 81, 0, 0, 0, 241, 0, 0, 0, 673, 0, 0, 0, 1793, 0, 0, 0, 4609, 0, 0, 0, 11521, 0, 0, 0, 28161, 0, 0, 0, -1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_win_size_x6 = allocate([ 0, 0, 0, 0, 4, 0, 0, 0, 27, 0, 0, 0, 100, 0, 0, 0, 325, 0, 0, 0, 1026, 0, 0, 0, 2905, 0, 0, 0, 7848, 0, 0, 0, 20457, 0, 0, 0, 51670, 0, 0, 0, -1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE._primegap = allocate([ 2, 2, 4, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 14, 4, 6, 2, 10, 2, 6, 6, 4, 6, 6, 2, 10, 2, 4, 2, 12, 12, 4, 2, 4, 6, 2, 10, 6, 6, 6, 2, 6, 4, 2, 10, 14, 4, 2, 4, 14, 6, 10, 2, 4, 6, 8, 6, 6, 4, 6, 8, 4, 8, 10, 2, 10, 2, 6, 4, 6, 8, 4, 2, 4, 12, 8, 4, 8, 4, 6, 12, 2, 18, 6, 10, 6, 6, 2, 6, 10, 6, 6, 2, 6, 6, 4, 2, 12, 10, 2, 4, 6, 6, 2, 12, 4, 6, 8, 10, 8, 10, 8, 6, 6, 4, 8, 6, 4, 8, 4, 14, 10, 12, 2, 10, 2, 4, 2, 10, 14, 4, 2, 4, 14, 4, 2, 4, 20, 4, 8, 10, 8, 4, 6, 6, 14, 4, 6, 6, 8, 6, 12 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str36 = allocate([ 115, 101, 116, 95, 100, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str137 = allocate([ 100, 110, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str143 = allocate([ 37, 108, 88, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str244 = allocate([ 37, 48, 42, 108, 88, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str50 = allocate([ 114, 111, 111, 116, 114, 101, 109, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str151 = allocate([ 110, 105, 32, 60, 32, 40, 51, 50, 32, 45, 32, 48, 41, 32, 43, 32, 49, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str252 = allocate([ 98, 110, 32, 62, 61, 32, 113, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str353 = allocate([ 99, 32, 60, 61, 32, 49, 0 ], "i8", ALLOC_STATIC);

_invsqrttab = allocate([ 511, 0, 509, 0, 507, 0, 505, 0, 503, 0, 501, 0, 499, 0, 498, 0, 496, 0, 494, 0, 492, 0, 490, 0, 489, 0, 487, 0, 485, 0, 484, 0, 482, 0, 480, 0, 479, 0, 477, 0, 475, 0, 474, 0, 472, 0, 471, 0, 469, 0, 468, 0, 466, 0, 465, 0, 463, 0, 462, 0, 460, 0, 459, 0, 457, 0, 456, 0, 454, 0, 453, 0, 452, 0, 450, 0, 449, 0, 448, 0, 446, 0, 445, 0, 444, 0, 442, 0, 441, 0, 440, 0, 439, 0, 437, 0, 436, 0, 435, 0, 434, 0, 432, 0, 431, 0, 430, 0, 429, 0, 428, 0, 426, 0, 425, 0, 424, 0, 423, 0, 422, 0, 421, 0, 420, 0, 419, 0, 418, 0, 416, 0, 415, 0, 414, 0, 413, 0, 412, 0, 411, 0, 410, 0, 409, 0, 408, 0, 407, 0, 406, 0, 405, 0, 404, 0, 403, 0, 402, 0, 401, 0, 400, 0, 399, 0, 398, 0, 397, 0, 396, 0, 396, 0, 395, 0, 394, 0, 393, 0, 392, 0, 391, 0, 390, 0, 389, 0, 388, 0, 387, 0, 387, 0, 386, 0, 385, 0, 384, 0, 383, 0, 382, 0, 382, 0, 381, 0, 380, 0, 379, 0, 378, 0, 377, 0, 377, 0, 376, 0, 375, 0, 374, 0, 374, 0, 373, 0, 372, 0, 371, 0, 370, 0, 370, 0, 369, 0, 368, 0, 367, 0, 367, 0, 366, 0, 365, 0, 365, 0, 364, 0, 363, 0, 362, 0, 362, 0, 361, 0, 360, 0, 360, 0, 359, 0, 358, 0, 358, 0, 357, 0, 356, 0, 356, 0, 355, 0, 354, 0, 354, 0, 353, 0, 352, 0, 352, 0, 351, 0, 350, 0, 350, 0, 349, 0, 348, 0, 348, 0, 347, 0, 346, 0, 346, 0, 345, 0, 345, 0, 344, 0, 343, 0, 343, 0, 342, 0, 342, 0, 341, 0, 340, 0, 340, 0, 339, 0, 339, 0, 338, 0, 338, 0, 337, 0, 336, 0, 336, 0, 335, 0, 335, 0, 334, 0, 334, 0, 333, 0, 333, 0, 332, 0, 331, 0, 331, 0, 330, 0, 330, 0, 329, 0, 329, 0, 328, 0, 328, 0, 327, 0, 327, 0, 326, 0, 326, 0, 325, 0, 325, 0, 324, 0, 324, 0, 323, 0, 323, 0, 322, 0, 322, 0, 321, 0, 321, 0, 320, 0, 320, 0, 319, 0, 319, 0, 318, 0, 318, 0, 317, 0, 317, 0, 316, 0, 316, 0, 315, 0, 315, 0, 314, 0, 314, 0, 313, 0, 313, 0, 313, 0, 312, 0, 312, 0, 311, 0, 311, 0, 310, 0, 310, 0, 309, 0, 309, 0, 309, 0, 308, 0, 308, 0, 307, 0, 307, 0, 306, 0, 306, 0, 306, 0, 305, 0, 305, 0, 304, 0, 304, 0, 303, 0, 303, 0, 303, 0, 302, 0, 302, 0, 301, 0, 301, 0, 301, 0, 300, 0, 300, 0, 299, 0, 299, 0, 299, 0, 298, 0, 298, 0, 297, 0, 297, 0, 297, 0, 296, 0, 296, 0, 295, 0, 295, 0, 295, 0, 294, 0, 294, 0, 294, 0, 293, 0, 293, 0, 292, 0, 292, 0, 292, 0, 291, 0, 291, 0, 291, 0, 290, 0, 290, 0, 289, 0, 289, 0, 289, 0, 288, 0, 288, 0, 288, 0, 287, 0, 287, 0, 287, 0, 286, 0, 286, 0, 286, 0, 285, 0, 285, 0, 285, 0, 284, 0, 284, 0, 283, 0, 283, 0, 283, 0, 282, 0, 282, 0, 282, 0, 281, 0, 281, 0, 281, 0, 280, 0, 280, 0, 280, 0, 280, 0, 279, 0, 279, 0, 279, 0, 278, 0, 278, 0, 278, 0, 277, 0, 277, 0, 277, 0, 276, 0, 276, 0, 276, 0, 275, 0, 275, 0, 275, 0, 274, 0, 274, 0, 274, 0, 274, 0, 273, 0, 273, 0, 273, 0, 272, 0, 272, 0, 272, 0, 271, 0, 271, 0, 271, 0, 271, 0, 270, 0, 270, 0, 270, 0, 269, 0, 269, 0, 269, 0, 268, 0, 268, 0, 268, 0, 268, 0, 267, 0, 267, 0, 267, 0, 266, 0, 266, 0, 266, 0, 266, 0, 265, 0, 265, 0, 265, 0, 265, 0, 264, 0, 264, 0, 264, 0, 263, 0, 263, 0, 263, 0, 263, 0, 262, 0, 262, 0, 262, 0, 262, 0, 261, 0, 261, 0, 261, 0, 260, 0, 260, 0, 260, 0, 260, 0, 259, 0, 259, 0, 259, 0, 259, 0, 258, 0, 258, 0, 258, 0, 258, 0, 257, 0, 257, 0, 257, 0, 257, 0, 256, 0, 256, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

STRING_TABLE.__str57 = allocate([ 103, 101, 116, 95, 115, 116, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str158 = allocate([ 112, 111, 119, 116, 97, 98, 95, 109, 101, 109, 95, 112, 116, 114, 32, 60, 32, 112, 111, 119, 116, 97, 98, 95, 109, 101, 109, 32, 43, 32, 40, 40, 117, 110, 41, 32, 43, 32, 50, 32, 42, 32, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str61 = allocate([ 115, 101, 116, 95, 115, 116, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str162 = allocate([ 112, 111, 119, 116, 97, 98, 95, 109, 101, 109, 95, 112, 116, 114, 32, 60, 32, 112, 111, 119, 116, 97, 98, 95, 109, 101, 109, 32, 43, 32, 40, 40, 117, 110, 41, 32, 43, 32, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

_sq_res_0x100 = allocate([ 33751571, 0, 0, 0, 33686034, 0, 0, 0, 33686035, 0, 0, 0, 33686034, 0, 0, 0, 33751570, 0, 0, 0, 33686034, 0, 0, 0, 33686034, 0, 0, 0, 33686034, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_nrtrial = allocate([ 100, 0, 500, 0, 1e3, 0 ], [ "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

_logs = allocate([ .109945722819362, 0, 0, 0, 0, 0, 0, 0, .0847016403115322, 0, 0, 0, 0, 0, 0, 0, .0772048195144415, 0, 0, 0, 0, 0, 0, 0 ], [ "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str69 = allocate([ 112, 101, 114, 102, 112, 111, 119, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str170 = allocate([ 115, 105, 122, 101, 32, 62, 61, 32, 107, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str73 = allocate([ 116, 100, 105, 118, 95, 113, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str174 = allocate([ 113, 120, 110, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str275 = allocate([ 110, 50, 112, 91, 113, 110, 93, 32, 62, 61, 32, 99, 121, 50, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str376 = allocate([ 114, 110, 32, 61, 61, 32, 100, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str81 = allocate([ 37, 115, 58, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str182 = allocate([ 37, 100, 58, 32, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str283 = allocate([ 71, 78, 85, 32, 77, 80, 32, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

___gmp_errno = allocate(4, "i32", ALLOC_STATIC);

___gmp_allocate_func = allocate([ 2 ], [ "i8* (i32)*", 0, 0, 0 ], ALLOC_STATIC);

___gmp_reallocate_func = allocate([ 4 ], [ "i8* (i8*, i32, i32)*", 0, 0, 0 ], ALLOC_STATIC);

___gmp_free_func = allocate([ 6 ], [ "void (i8*, i32)*", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str100 = allocate([ 71, 78, 85, 32, 77, 80, 58, 32, 67, 97, 110, 110, 111, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 40, 115, 105, 122, 101, 61, 37, 108, 117, 41, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1101 = allocate([ 71, 78, 85, 32, 77, 80, 58, 32, 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 40, 111, 108, 100, 95, 115, 105, 122, 101, 61, 37, 108, 117, 32, 110, 101, 119, 95, 115, 105, 122, 101, 61, 37, 108, 117, 41, 10, 0 ], "i8", ALLOC_STATIC);

___gmp_bits_per_limb = allocate([ 32 ], [ "i32", 0, 0, 0 ], ALLOC_STATIC);

___gmp_0 = allocate(4, "i32", ALLOC_STATIC);

___gmp_junk = allocate(4, "i32", ALLOC_STATIC);

STRING_TABLE.___gmpn_clz_tab = allocate([ 1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 ], "i8", ALLOC_STATIC);

STRING_TABLE.___gmp_digit_value_tab = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 ], "i8", ALLOC_STATIC);

STRING_TABLE.___gmp_binvert_limb_table = allocate([ 1, 171, 205, 183, 57, 163, 197, 239, 241, 27, 61, 167, 41, 19, 53, 223, 225, 139, 173, 151, 25, 131, 165, 207, 209, 251, 29, 135, 9, 243, 21, 191, 193, 107, 141, 119, 249, 99, 133, 175, 177, 219, 253, 103, 233, 211, 245, 159, 161, 75, 109, 87, 217, 67, 101, 143, 145, 187, 221, 71, 201, 179, 213, 127, 129, 43, 77, 55, 185, 35, 69, 111, 113, 155, 189, 39, 169, 147, 181, 95, 97, 11, 45, 23, 153, 3, 37, 79, 81, 123, 157, 7, 137, 115, 149, 63, 65, 235, 13, 247, 121, 227, 5, 47, 49, 91, 125, 231, 105, 83, 117, 31, 33, 203, 237, 215, 89, 195, 229, 15, 17, 59, 93, 199, 73, 51, 85, 255 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str124 = allocate([ 45, 48, 46, 37, 115, 101, 37, 108, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1125 = allocate([ 48, 46, 37, 115, 101, 37, 108, 100, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1131 = allocate([ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str144 = allocate([ 101, 37, 108, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1145 = allocate([ 64, 37, 108, 100, 0 ], "i8", ALLOC_STATIC);

___gmp_default_fp_limb_precision = allocate([ 3 ], [ "i32", 0, 0, 0 ], ALLOC_STATIC);

___gmp_fib_table = allocate([ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 13, 0, 0, 0, 21, 0, 0, 0, 34, 0, 0, 0, 55, 0, 0, 0, 89, 0, 0, 0, 144, 0, 0, 0, 233, 0, 0, 0, 377, 0, 0, 0, 610, 0, 0, 0, 987, 0, 0, 0, 1597, 0, 0, 0, 2584, 0, 0, 0, 4181, 0, 0, 0, 6765, 0, 0, 0, 10946, 0, 0, 0, 17711, 0, 0, 0, 28657, 0, 0, 0, 46368, 0, 0, 0, 75025, 0, 0, 0, 121393, 0, 0, 0, 196418, 0, 0, 0, 317811, 0, 0, 0, 514229, 0, 0, 0, 832040, 0, 0, 0, 1346269, 0, 0, 0, 2178309, 0, 0, 0, 3524578, 0, 0, 0, 5702887, 0, 0, 0, 9227465, 0, 0, 0, 14930352, 0, 0, 0, 24157817, 0, 0, 0, 39088169, 0, 0, 0, 63245986, 0, 0, 0, 102334155, 0, 0, 0, 165580141, 0, 0, 0, 267914296, 0, 0, 0, 433494437, 0, 0, 0, 701408733, 0, 0, 0, 1134903170, 0, 0, 0, 1836311903, 0, 0, 0, -1323752223, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str215 = allocate([ 103, 99, 100, 101, 120, 116, 95, 108, 101, 104, 109, 101, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1216 = allocate([ 97, 112, 91, 48, 93, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2217 = allocate([ 98, 112, 91, 48, 93, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

___gmpn_bases = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e+37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, .6309297535714574, 0, 0, 0, 0, 0, 0, 0, -808182895, 0, 0, 0, 995507236, 0, 0, 0, 16, 0, 0, 0, .5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, .4306765580733931, 0, 0, 0, 0, 0, 0, 0, 1220703125, 0, 0, 0, -1034148220, 0, 0, 0, 12, 0, 0, 0, .3868528072345416, 0, 0, 0, 0, 0, 0, 0, -2118184960, 0, 0, 0, -115617354, 0, 0, 0, 11, 0, 0, 0, .3562071871080222, 0, 0, 0, 0, 0, 0, 0, 1977326743, 0, 0, 0, 369599179, 0, 0, 0, 10, 0, 0, 0, .3333333333333334, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, .3154648767857287, 0, 0, 0, 0, 0, 0, 0, -808182895, 0, 0, 0, 995507236, 0, 0, 0, 9, 0, 0, 0, .3010299956639811, 0, 0, 0, 0, 0, 0, 0, 1e9, 0, 0, 0, 316718722, 0, 0, 0, 9, 0, 0, 0, .2890648263178878, 0, 0, 0, 0, 0, 0, 0, -1937019605, 0, 0, 0, -766714364, 0, 0, 0, 8, 0, 0, 0, .2789429456511298, 0, 0, 0, 0, 0, 0, 0, 429981696, 0, 0, 0, 1067686581, 0, 0, 0, 8, 0, 0, 0, .2702381544273197, 0, 0, 0, 0, 0, 0, 0, 815730721, 0, 0, 0, 1358474335, 0, 0, 0, 8, 0, 0, 0, .2626495350371936, 0, 0, 0, 0, 0, 0, 0, 1475789056, 0, 0, 0, 1954822942, 0, 0, 0, 8, 0, 0, 0, .2559580248098155, 0, 0, 0, 0, 0, 0, 0, -1732076671, 0, 0, 0, -1392302398, 0, 0, 0, 8, 0, 0, 0, .25, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, .244650542118226, 0, 0, 0, 0, 0, 0, 0, 410338673, 0, 0, 0, 1324398269, 0, 0, 0, 7, 0, 0, 0, .2398124665681315, 0, 0, 0, 0, 0, 0, 0, 612220032, 0, 0, 0, -1057208159, 0, 0, 0, 7, 0, 0, 0, .2354089133666382, 0, 0, 0, 0, 0, 0, 0, 893871739, 0, 0, 0, 864258370, 0, 0, 0, 7, 0, 0, 0, .2313782131597592, 0, 0, 0, 0, 0, 0, 0, 128e7, 0, 0, 0, -1384175189, 0, 0, 0, 7, 0, 0, 0, .227670248696953, 0, 0, 0, 0, 0, 0, 0, 1801088541, 0, 0, 0, 826031381, 0, 0, 0, 7, 0, 0, 0, .2242438242175754, 0, 0, 0, 0, 0, 0, 0, -1800609408, 0, 0, 0, -1194546720, 0, 0, 0, 7, 0, 0, 0, .2210647294575037, 0, 0, 0, 0, 0, 0, 0, -890141849, 0, 0, 0, 1122856425, 0, 0, 0, 6, 0, 0, 0, .2181042919855316, 0, 0, 0, 0, 0, 0, 0, 191102976, 0, 0, 0, 1738018315, 0, 0, 0, 6, 0, 0, 0, .2153382790366965, 0, 0, 0, 0, 0, 0, 0, 244140625, 0, 0, 0, 427399186, 0, 0, 0, 6, 0, 0, 0, .2127460535533632, 0, 0, 0, 0, 0, 0, 0, 308915776, 0, 0, 0, -1125624938, 0, 0, 0, 6, 0, 0, 0, .2103099178571525, 0, 0, 0, 0, 0, 0, 0, 387420489, 0, 0, 0, 1656816553, 0, 0, 0, 6, 0, 0, 0, .2080145976765095, 0, 0, 0, 0, 0, 0, 0, 481890304, 0, 0, 0, 490028355, 0, 0, 0, 6, 0, 0, 0, .2058468324604344, 0, 0, 0, 0, 0, 0, 0, 594823321, 0, 0, 0, -836899606, 0, 0, 0, 6, 0, 0, 0, .2037950470905062, 0, 0, 0, 0, 0, 0, 0, 729e6, 0, 0, 0, 2031076625, 0, 0, 0, 6, 0, 0, 0, .2018490865820999, 0, 0, 0, 0, 0, 0, 0, 887503681, 0, 0, 0, 901277088, 0, 0, 0, 6, 0, 0, 0, .2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, .1982398631705605, 0, 0, 0, 0, 0, 0, 0, 1291467969, 0, 0, 0, -1448160845, 0, 0, 0, 6, 0, 0, 0, .1965616322328226, 0, 0, 0, 0, 0, 0, 0, 1544804416, 0, 0, 0, 1675608617, 0, 0, 0, 6, 0, 0, 0, .1949590218937863, 0, 0, 0, 0, 0, 0, 0, 1838265625, 0, 0, 0, 722464304, 0, 0, 0, 6, 0, 0, 0, .1934264036172708, 0, 0, 0, 0, 0, 0, 0, -2118184960, 0, 0, 0, -115617354, 0, 0, 0, 6, 0, 0, 0, .1919587200065601, 0, 0, 0, 0, 0, 0, 0, -1729240887, 0, 0, 0, -1400257623, 0, 0, 0, 6, 0, 0, 0, .1905514124267734, 0, 0, 0, 0, 0, 0, 0, -1284030912, 0, 0, 0, 1831613182, 0, 0, 0, 6, 0, 0, 0, .18920035951687, 0, 0, 0, 0, 0, 0, 0, -776223535, 0, 0, 0, 947455945, 0, 0, 0, 6, 0, 0, 0, .1879018247091076, 0, 0, 0, 0, 0, 0, 0, -198967296, 0, 0, 0, 208632331, 0, 0, 0, 5, 0, 0, 0, .1866524112389434, 0, 0, 0, 0, 0, 0, 0, 115856201, 0, 0, 0, 680690004, 0, 0, 0, 5, 0, 0, 0, .1854490234153689, 0, 0, 0, 0, 0, 0, 0, 130691232, 0, 0, 0, 115892893, 0, 0, 0, 5, 0, 0, 0, .1842888331487062, 0, 0, 0, 0, 0, 0, 0, 147008443, 0, 0, 0, -747381600, 0, 0, 0, 5, 0, 0, 0, .1831692509136336, 0, 0, 0, 0, 0, 0, 0, 164916224, 0, 0, 0, -1598981995, 0, 0, 0, 5, 0, 0, 0, .1820879004699383, 0, 0, 0, 0, 0, 0, 0, 184528125, 0, 0, 0, 1952977317, 0, 0, 0, 5, 0, 0, 0, .1810425967800402, 0, 0, 0, 0, 0, 0, 0, 205962976, 0, 0, 0, 1302745103, 0, 0, 0, 5, 0, 0, 0, .1800313266566926, 0, 0, 0, 0, 0, 0, 0, 229345007, 0, 0, 0, 732050818, 0, 0, 0, 5, 0, 0, 0, .1790522317510413, 0, 0, 0, 0, 0, 0, 0, 254803968, 0, 0, 0, 229771912, 0, 0, 0, 5, 0, 0, 0, .1781035935540111, 0, 0, 0, 0, 0, 0, 0, 282475249, 0, 0, 0, -426943260, 0, 0, 0, 5, 0, 0, 0, .1771838201355579, 0, 0, 0, 0, 0, 0, 0, 3125e5, 0, 0, 0, -1211236963, 0, 0, 0, 5, 0, 0, 0, .1762914343888821, 0, 0, 0, 0, 0, 0, 0, 345025251, 0, 0, 0, -1906820813, 0, 0, 0, 5, 0, 0, 0, .1754250635819545, 0, 0, 0, 0, 0, 0, 0, 380204032, 0, 0, 0, 1769784298, 0, 0, 0, 5, 0, 0, 0, .1745834300480449, 0, 0, 0, 0, 0, 0, 0, 418195493, 0, 0, 0, 1218824812, 0, 0, 0, 5, 0, 0, 0, .17376534287144, 0, 0, 0, 0, 0, 0, 0, 459165024, 0, 0, 0, 726850326, 0, 0, 0, 5, 0, 0, 0, .1729696904450771, 0, 0, 0, 0, 0, 0, 0, 503284375, 0, 0, 0, 286623398, 0, 0, 0, 5, 0, 0, 0, .1721954337940981, 0, 0, 0, 0, 0, 0, 0, 550731776, 0, 0, 0, -216192202, 0, 0, 0, 5, 0, 0, 0, .1714416005739134, 0, 0, 0, 0, 0, 0, 0, 601692057, 0, 0, 0, -925405927, 0, 0, 0, 5, 0, 0, 0, .1707072796637201, 0, 0, 0, 0, 0, 0, 0, 656356768, 0, 0, 0, -1563746636, 0, 0, 0, 5, 0, 0, 0, .169991616286914, 0, 0, 0, 0, 0, 0, 0, 714924299, 0, 0, 0, -2139341117, 0, 0, 0, 5, 0, 0, 0, .1692938075987814, 0, 0, 0, 0, 0, 0, 0, 7776e5, 0, 0, 0, 1635698879, 0, 0, 0, 5, 0, 0, 0, .1686130986895011, 0, 0, 0, 0, 0, 0, 0, 844596301, 0, 0, 0, 1165257918, 0, 0, 0, 5, 0, 0, 0, .1679487789570419, 0, 0, 0, 0, 0, 0, 0, 916132832, 0, 0, 0, 738894451, 0, 0, 0, 5, 0, 0, 0, .1673001788101741, 0, 0, 0, 0, 0, 0, 0, 992436543, 0, 0, 0, 351864837, 0, 0, 0, 5, 0, 0, 0, .1666666666666667, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, .1660476462159378, 0, 0, 0, 0, 0, 0, 0, 1160290625, 0, 0, 0, -640743383, 0, 0, 0, 5, 0, 0, 0, .1654425539190583, 0, 0, 0, 0, 0, 0, 0, 1252332576, 0, 0, 0, -1224980415, 0, 0, 0, 5, 0, 0, 0, .1648508567221604, 0, 0, 0, 0, 0, 0, 0, 1350125107, 0, 0, 0, -1758440245, 0, 0, 0, 5, 0, 0, 0, .1642720499620502, 0, 0, 0, 0, 0, 0, 0, 1453933568, 0, 0, 0, 2048769611, 0, 0, 0, 5, 0, 0, 0, .1637056554452156, 0, 0, 0, 0, 0, 0, 0, 1564031349, 0, 0, 0, 1602211199, 0, 0, 0, 5, 0, 0, 0, .1631512196835108, 0, 0, 0, 0, 0, 0, 0, 16807e5, 0, 0, 0, 1192848516, 0, 0, 0, 5, 0, 0, 0, .1626083122716341, 0, 0, 0, 0, 0, 0, 0, 1804229351, 0, 0, 0, 817116725, 0, 0, 0, 5, 0, 0, 0, .1620765243931223, 0, 0, 0, 0, 0, 0, 0, 1934917632, 0, 0, 0, 471836150, 0, 0, 0, 5, 0, 0, 0, .1615554674429964, 0, 0, 0, 0, 0, 0, 0, 2073071593, 0, 0, 0, 154166090, 0, 0, 0, 5, 0, 0, 0, .1610447717564444, 0, 0, 0, 0, 0, 0, 0, -2075960672, 0, 0, 0, -276870596, 0, 0, 0, 5, 0, 0, 0, .1605440854340214, 0, 0, 0, 0, 0, 0, 0, -1921920421, 0, 0, 0, -816491822, 0, 0, 0, 5, 0, 0, 0, .1600530732548213, 0, 0, 0, 0, 0, 0, 0, -1759441920, 0, 0, 0, -1314620274, 0, 0, 0, 5, 0, 0, 0, .1595714156699382, 0, 0, 0, 0, 0, 0, 0, -1588183139, 0, 0, 0, -1774930882, 0, 0, 0, 5, 0, 0, 0, .1590988078692941, 0, 0, 0, 0, 0, 0, 0, -1407792928, 0, 0, 0, 2094236029, 0, 0, 0, 5, 0, 0, 0, .158634958915596, 0, 0, 0, 0, 0, 0, 0, -1217910897, 0, 0, 0, 1699964769, 0, 0, 0, 5, 0, 0, 0, .1581795909397823, 0, 0, 0, 0, 0, 0, 0, -1018167296, 0, 0, 0, 1334532238, 0, 0, 0, 5, 0, 0, 0, .1577324383928644, 0, 0, 0, 0, 0, 0, 0, -808182895, 0, 0, 0, 995507236, 0, 0, 0, 5, 0, 0, 0, .1572932473495469, 0, 0, 0, 0, 0, 0, 0, -587568864, 0, 0, 0, 680690004, 0, 0, 0, 5, 0, 0, 0, .156861774859441, 0, 0, 0, 0, 0, 0, 0, -355926653, 0, 0, 0, 388087728, 0, 0, 0, 5, 0, 0, 0, .1564377883420716, 0, 0, 0, 0, 0, 0, 0, -112847872, 0, 0, 0, 115892893, 0, 0, 0, 4, 0, 0, 0, .156021065022225, 0, 0, 0, 0, 0, 0, 0, 52200625, 0, 0, 0, 1226621308, 0, 0, 0, 4, 0, 0, 0, .155611391402494, 0, 0, 0, 0, 0, 0, 0, 54700816, 0, 0, 0, 974247995, 0, 0, 0, 4, 0, 0, 0, .1552085627701551, 0, 0, 0, 0, 0, 0, 0, 57289761, 0, 0, 0, 736130253, 0, 0, 0, 4, 0, 0, 0, .1548123827357682, 0, 0, 0, 0, 0, 0, 0, 59969536, 0, 0, 0, 511312615, 0, 0, 0, 4, 0, 0, 0, .1544226628011101, 0, 0, 0, 0, 0, 0, 0, 62742241, 0, 0, 0, 298913501, 0, 0, 0, 4, 0, 0, 0, .1540392219542636, 0, 0, 0, 0, 0, 0, 0, 6561e4, 0, 0, 0, 98118760, 0, 0, 0, 4, 0, 0, 0, .1536618862898642, 0, 0, 0, 0, 0, 0, 0, 68574961, 0, 0, 0, -183648334, 0, 0, 0, 4, 0, 0, 0, .1532904886526781, 0, 0, 0, 0, 0, 0, 0, 71639296, 0, 0, 0, -543223018, 0, 0, 0, 4, 0, 0, 0, .1529248683028321, 0, 0, 0, 0, 0, 0, 0, 74805201, 0, 0, 0, -883775868, 0, 0, 0, 4, 0, 0, 0, .1525648706011593, 0, 0, 0, 0, 0, 0, 0, 78074896, 0, 0, 0, -1206501737, 0, 0, 0, 4, 0, 0, 0, .1522103467132434, 0, 0, 0, 0, 0, 0, 0, 81450625, 0, 0, 0, -1512508823, 0, 0, 0, 4, 0, 0, 0, .1518611533308632, 0, 0, 0, 0, 0, 0, 0, 84934656, 0, 0, 0, -1802825779, 0, 0, 0, 4, 0, 0, 0, .1515171524096389, 0, 0, 0, 0, 0, 0, 0, 88529281, 0, 0, 0, -2078408171, 0, 0, 0, 4, 0, 0, 0, .1511782109217764, 0, 0, 0, 0, 0, 0, 0, 92236816, 0, 0, 0, 1954822942, 0, 0, 0, 4, 0, 0, 0, .1508442006228941, 0, 0, 0, 0, 0, 0, 0, 96059601, 0, 0, 0, 1706106478, 0, 0, 0, 4, 0, 0, 0, .1505149978319906, 0, 0, 0, 0, 0, 0, 0, 1e8, 0, 0, 0, 1469640227, 0, 0, 0, 4, 0, 0, 0, .1501904832236879, 0, 0, 0, 0, 0, 0, 0, 104060401, 0, 0, 0, 1244707227, 0, 0, 0, 4, 0, 0, 0, .1498705416319474, 0, 0, 0, 0, 0, 0, 0, 108243216, 0, 0, 0, 1030638996, 0, 0, 0, 4, 0, 0, 0, .1495550618645152, 0, 0, 0, 0, 0, 0, 0, 112550881, 0, 0, 0, 826811824, 0, 0, 0, 4, 0, 0, 0, .1492439365274121, 0, 0, 0, 0, 0, 0, 0, 116985856, 0, 0, 0, 632643374, 0, 0, 0, 4, 0, 0, 0, .1489370618588283, 0, 0, 0, 0, 0, 0, 0, 121550625, 0, 0, 0, 447589579, 0, 0, 0, 4, 0, 0, 0, .148634337571835, 0, 0, 0, 0, 0, 0, 0, 126247696, 0, 0, 0, 271141794, 0, 0, 0, 4, 0, 0, 0, .1483356667053617, 0, 0, 0, 0, 0, 0, 0, 131079601, 0, 0, 0, 102824182, 0, 0, 0, 4, 0, 0, 0, .1480409554829326, 0, 0, 0, 0, 0, 0, 0, 136048896, 0, 0, 0, -115617354, 0, 0, 0, 4, 0, 0, 0, .1477501131786861, 0, 0, 0, 0, 0, 0, 0, 141158161, 0, 0, 0, -422347990, 0, 0, 0, 4, 0, 0, 0, .1474630519902391, 0, 0, 0, 0, 0, 0, 0, 14641e4, 0, 0, 0, -715325586, 0, 0, 0, 4, 0, 0, 0, .1471796869179852, 0, 0, 0, 0, 0, 0, 0, 151807041, 0, 0, 0, -995283534, 0, 0, 0, 4, 0, 0, 0, .1468999356504447, 0, 0, 0, 0, 0, 0, 0, 157351936, 0, 0, 0, -1262910001, 0, 0, 0, 4, 0, 0, 0, .1466237184553111, 0, 0, 0, 0, 0, 0, 0, 163047361, 0, 0, 0, -1518851089, 0, 0, 0, 4, 0, 0, 0, .146350958075862, 0, 0, 0, 0, 0, 0, 0, 168896016, 0, 0, 0, -1763713750, 0, 0, 0, 4, 0, 0, 0, .1460815796324244, 0, 0, 0, 0, 0, 0, 0, 174900625, 0, 0, 0, -1998068471, 0, 0, 0, 4, 0, 0, 0, .1458155105286054, 0, 0, 0, 0, 0, 0, 0, 181063936, 0, 0, 0, 2072515539, 0, 0, 0, 4, 0, 0, 0, .1455526803620167, 0, 0, 0, 0, 0, 0, 0, 187388721, 0, 0, 0, 1857598869, 0, 0, 0, 4, 0, 0, 0, .1452930208392428, 0, 0, 0, 0, 0, 0, 0, 193877776, 0, 0, 0, 1651673563, 0, 0, 0, 4, 0, 0, 0, .145036465694813, 0, 0, 0, 0, 0, 0, 0, 200533921, 0, 0, 0, 1454291975, 0, 0, 0, 4, 0, 0, 0, .1447829506139581, 0, 0, 0, 0, 0, 0, 0, 20736e4, 0, 0, 0, 1265032243, 0, 0, 0, 4, 0, 0, 0, .1445324131589439, 0, 0, 0, 0, 0, 0, 0, 214358881, 0, 0, 0, 1083496611, 0, 0, 0, 4, 0, 0, 0, .1442847926987864, 0, 0, 0, 0, 0, 0, 0, 221533456, 0, 0, 0, 909309861, 0, 0, 0, 4, 0, 0, 0, .1440400303421672, 0, 0, 0, 0, 0, 0, 0, 228886641, 0, 0, 0, 742117872, 0, 0, 0, 4, 0, 0, 0, .1437980688733775, 0, 0, 0, 0, 0, 0, 0, 236421376, 0, 0, 0, 581586271, 0, 0, 0, 4, 0, 0, 0, .143558852691131, 0, 0, 0, 0, 0, 0, 0, 244140625, 0, 0, 0, 427399186, 0, 0, 0, 4, 0, 0, 0, .1433223277500932, 0, 0, 0, 0, 0, 0, 0, 252047376, 0, 0, 0, 279258085, 0, 0, 0, 4, 0, 0, 0, .1430884415049874, 0, 0, 0, 0, 0, 0, 0, 260144641, 0, 0, 0, 136880695, 0, 0, 0, 4, 0, 0, 0, .1428571428571428, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, .14262838210336, 0, 0, 0, 0, 0, 0, 0, 276922881, 0, 0, 0, -263273390, 0, 0, 0, 4, 0, 0, 0, .1424021108869747, 0, 0, 0, 0, 0, 0, 0, 28561e4, 0, 0, 0, -516537270, 0, 0, 0, 4, 0, 0, 0, .1421782821510107, 0, 0, 0, 0, 0, 0, 0, 294499921, 0, 0, 0, -760244855, 0, 0, 0, 4, 0, 0, 0, .1419568500933153, 0, 0, 0, 0, 0, 0, 0, 303595776, 0, 0, 0, -994825597, 0, 0, 0, 4, 0, 0, 0, .1417377701235801, 0, 0, 0, 0, 0, 0, 0, 312900721, 0, 0, 0, -1220686603, 0, 0, 0, 4, 0, 0, 0, .1415209988221527, 0, 0, 0, 0, 0, 0, 0, 322417936, 0, 0, 0, -1438213947, 0, 0, 0, 4, 0, 0, 0, .1413064939005528, 0, 0, 0, 0, 0, 0, 0, 332150625, 0, 0, 0, -1647773911, 0, 0, 0, 4, 0, 0, 0, .1410942141636095, 0, 0, 0, 0, 0, 0, 0, 342102016, 0, 0, 0, -1849714128, 0, 0, 0, 4, 0, 0, 0, .1408841194731412, 0, 0, 0, 0, 0, 0, 0, 352275361, 0, 0, 0, -2044364665, 0, 0, 0, 4, 0, 0, 0, .1406761707131039, 0, 0, 0, 0, 0, 0, 0, 362673936, 0, 0, 0, 2062928268, 0, 0, 0, 4, 0, 0, 0, .14047032975614, 0, 0, 0, 0, 0, 0, 0, 373301041, 0, 0, 0, 1881932192, 0, 0, 0, 4, 0, 0, 0, .1402665594314587, 0, 0, 0, 0, 0, 0, 0, 38416e4, 0, 0, 0, 1707331249, 0, 0, 0, 4, 0, 0, 0, .1400648234939879, 0, 0, 0, 0, 0, 0, 0, 395254161, 0, 0, 0, 1538856194, 0, 0, 0, 4, 0, 0, 0, .1398650865947379, 0, 0, 0, 0, 0, 0, 0, 406586896, 0, 0, 0, 1376250915, 0, 0, 0, 4, 0, 0, 0, .1396673142523192, 0, 0, 0, 0, 0, 0, 0, 418161601, 0, 0, 0, 1219271705, 0, 0, 0, 4, 0, 0, 0, .1394714728255649, 0, 0, 0, 0, 0, 0, 0, 429981696, 0, 0, 0, 1067686581, 0, 0, 0, 4, 0, 0, 0, .1392775294872041, 0, 0, 0, 0, 0, 0, 0, 442050625, 0, 0, 0, 921274642, 0, 0, 0, 4, 0, 0, 0, .1390854521985406, 0, 0, 0, 0, 0, 0, 0, 454371856, 0, 0, 0, 779825472, 0, 0, 0, 4, 0, 0, 0, .1388952096850913, 0, 0, 0, 0, 0, 0, 0, 466948881, 0, 0, 0, 643138571, 0, 0, 0, 4, 0, 0, 0, .1387067714131417, 0, 0, 0, 0, 0, 0, 0, 479785216, 0, 0, 0, 511022826, 0, 0, 0, 4, 0, 0, 0, .1385201075671774, 0, 0, 0, 0, 0, 0, 0, 492884401, 0, 0, 0, 383296013, 0, 0, 0, 4, 0, 0, 0, .1383351890281539, 0, 0, 0, 0, 0, 0, 0, 50625e4, 0, 0, 0, 259784327, 0, 0, 0, 4, 0, 0, 0, .1381519873525671, 0, 0, 0, 0, 0, 0, 0, 519885601, 0, 0, 0, 140321938, 0, 0, 0, 4, 0, 0, 0, .1379704747522905, 0, 0, 0, 0, 0, 0, 0, 533794816, 0, 0, 0, 24750580, 0, 0, 0, 4, 0, 0, 0, .1377906240751463, 0, 0, 0, 0, 0, 0, 0, 547981281, 0, 0, 0, -174161685, 0, 0, 0, 4, 0, 0, 0, .1376124087861776, 0, 0, 0, 0, 0, 0, 0, 562448656, 0, 0, 0, -390633253, 0, 0, 0, 4, 0, 0, 0, .1374358029495937, 0, 0, 0, 0, 0, 0, 0, 577200625, 0, 0, 0, -600189227, 0, 0, 0, 4, 0, 0, 0, .1372607812113589, 0, 0, 0, 0, 0, 0, 0, 592240896, 0, 0, 0, -803093039, 0, 0, 0, 4, 0, 0, 0, .1370873187823978, 0, 0, 0, 0, 0, 0, 0, 607573201, 0, 0, 0, -999596489, 0, 0, 0, 4, 0, 0, 0, .1369153914223921, 0, 0, 0, 0, 0, 0, 0, 623201296, 0, 0, 0, -1189940324, 0, 0, 0, 4, 0, 0, 0, .1367449754241439, 0, 0, 0, 0, 0, 0, 0, 639128961, 0, 0, 0, -1374354796, 0, 0, 0, 4, 0, 0, 0, .1365760475984821, 0, 0, 0, 0, 0, 0, 0, 65536e4, 0, 0, 0, -1553060175, 0, 0, 0, 4, 0, 0, 0, .1364085852596902, 0, 0, 0, 0, 0, 0, 0, 671898241, 0, 0, 0, -1726267244, 0, 0, 0, 4, 0, 0, 0, .1362425662114337, 0, 0, 0, 0, 0, 0, 0, 688747536, 0, 0, 0, -1894177762, 0, 0, 0, 4, 0, 0, 0, .1360779687331669, 0, 0, 0, 0, 0, 0, 0, 705911761, 0, 0, 0, -2056984905, 0, 0, 0, 4, 0, 0, 0, .1359147715670014, 0, 0, 0, 0, 0, 0, 0, 723394816, 0, 0, 0, 2080093620, 0, 0, 0, 4, 0, 0, 0, .135752953905015, 0, 0, 0, 0, 0, 0, 0, 741200625, 0, 0, 0, 1926945992, 0, 0, 0, 4, 0, 0, 0, .1355924953769863, 0, 0, 0, 0, 0, 0, 0, 759333136, 0, 0, 0, 1778369688, 0, 0, 0, 4, 0, 0, 0, .1354333760385373, 0, 0, 0, 0, 0, 0, 0, 777796321, 0, 0, 0, 1634201940, 0, 0, 0, 4, 0, 0, 0, .1352755763596663, 0, 0, 0, 0, 0, 0, 0, 796594176, 0, 0, 0, 1494286702, 0, 0, 0, 4, 0, 0, 0, .1351190772136599, 0, 0, 0, 0, 0, 0, 0, 815730721, 0, 0, 0, 1358474335, 0, 0, 0, 4, 0, 0, 0, .1349638598663645, 0, 0, 0, 0, 0, 0, 0, 83521e4, 0, 0, 0, 1226621308, 0, 0, 0, 4, 0, 0, 0, .1348099059658079, 0, 0, 0, 0, 0, 0, 0, 855036081, 0, 0, 0, 1098589912, 0, 0, 0, 4, 0, 0, 0, .1346571975321549, 0, 0, 0, 0, 0, 0, 0, 875213056, 0, 0, 0, 974247995, 0, 0, 0, 4, 0, 0, 0, .1345057169479844, 0, 0, 0, 0, 0, 0, 0, 895745041, 0, 0, 0, 853468706, 0, 0, 0, 4, 0, 0, 0, .1343554469488779, 0, 0, 0, 0, 0, 0, 0, 916636176, 0, 0, 0, 736130253, 0, 0, 0, 4, 0, 0, 0, .1342063706143054, 0, 0, 0, 0, 0, 0, 0, 937890625, 0, 0, 0, 622115672, 0, 0, 0, 4, 0, 0, 0, .134058471358798, 0, 0, 0, 0, 0, 0, 0, 959512576, 0, 0, 0, 511312615, 0, 0, 0, 4, 0, 0, 0, .1339117329233981, 0, 0, 0, 0, 0, 0, 0, 981506241, 0, 0, 0, 403613136, 0, 0, 0, 4, 0, 0, 0, .1337661393673756, 0, 0, 0, 0, 0, 0, 0, 1003875856, 0, 0, 0, 298913501, 0, 0, 0, 4, 0, 0, 0, .1336216750601996, 0, 0, 0, 0, 0, 0, 0, 1026625681, 0, 0, 0, 197113998, 0, 0, 0, 4, 0, 0, 0, .1334783246737591, 0, 0, 0, 0, 0, 0, 0, 104976e4, 0, 0, 0, 98118760, 0, 0, 0, 4, 0, 0, 0, .1333360731748201, 0, 0, 0, 0, 0, 0, 0, 1073283121, 0, 0, 0, 1835596, 0, 0, 0, 4, 0, 0, 0, .1331949058177136, 0, 0, 0, 0, 0, 0, 0, 1097199376, 0, 0, 0, -183648334, 0, 0, 0, 4, 0, 0, 0, .1330548081372441, 0, 0, 0, 0, 0, 0, 0, 1121513121, 0, 0, 0, -365891677, 0, 0, 0, 4, 0, 0, 0, .1329157659418126, 0, 0, 0, 0, 0, 0, 0, 1146228736, 0, 0, 0, -543223018, 0, 0, 0, 4, 0, 0, 0, .1327777653067443, 0, 0, 0, 0, 0, 0, 0, 1171350625, 0, 0, 0, -715800375, 0, 0, 0, 4, 0, 0, 0, .1326407925678156, 0, 0, 0, 0, 0, 0, 0, 1196883216, 0, 0, 0, -883775868, 0, 0, 0, 4, 0, 0, 0, .1325048343149731, 0, 0, 0, 0, 0, 0, 0, 1222830961, 0, 0, 0, -1047295969, 0, 0, 0, 4, 0, 0, 0, .1323698773862368, 0, 0, 0, 0, 0, 0, 0, 1249198336, 0, 0, 0, -1206501737, 0, 0, 0, 4, 0, 0, 0, .1322359088617821, 0, 0, 0, 0, 0, 0, 0, 1275989841, 0, 0, 0, -1361529052, 0, 0, 0, 4, 0, 0, 0, .132102916058195, 0, 0, 0, 0, 0, 0, 0, 130321e4, 0, 0, 0, -1512508823, 0, 0, 0, 4, 0, 0, 0, .1319708865228925, 0, 0, 0, 0, 0, 0, 0, 1330863361, 0, 0, 0, -1659567203, 0, 0, 0, 4, 0, 0, 0, .1318398080287045, 0, 0, 0, 0, 0, 0, 0, 1358954496, 0, 0, 0, -1802825779, 0, 0, 0, 4, 0, 0, 0, .1317096685686114, 0, 0, 0, 0, 0, 0, 0, 1387488001, 0, 0, 0, -1942401763, 0, 0, 0, 4, 0, 0, 0, .1315804563506306, 0, 0, 0, 0, 0, 0, 0, 1416468496, 0, 0, 0, -2078408171, 0, 0, 0, 4, 0, 0, 0, .1314521597928493, 0, 0, 0, 0, 0, 0, 0, 1445900625, 0, 0, 0, 2084013304, 0, 0, 0, 4, 0, 0, 0, .1313247675185968, 0, 0, 0, 0, 0, 0, 0, 1475789056, 0, 0, 0, 1954822942, 0, 0, 0, 4, 0, 0, 0, .1311982683517524, 0, 0, 0, 0, 0, 0, 0, 1506138481, 0, 0, 0, 1828886621, 0, 0, 0, 4, 0, 0, 0, .1310726513121843, 0, 0, 0, 0, 0, 0, 0, 1536953616, 0, 0, 0, 1706106478, 0, 0, 0, 4, 0, 0, 0, .1309479056113158, 0, 0, 0, 0, 0, 0, 0, 1568239201, 0, 0, 0, 1586388068, 0, 0, 0, 4, 0, 0, 0, .1308240206478128, 0, 0, 0, 0, 0, 0, 0, 16e8, 0, 0, 0, 1469640227, 0, 0, 0, 4, 0, 0, 0, .1307009860033912, 0, 0, 0, 0, 0, 0, 0, 1632240801, 0, 0, 0, 1355774942, 0, 0, 0, 4, 0, 0, 0, .1305787914387386, 0, 0, 0, 0, 0, 0, 0, 1664966416, 0, 0, 0, 1244707227, 0, 0, 0, 4, 0, 0, 0, .1304574268895465, 0, 0, 0, 0, 0, 0, 0, 1698181681, 0, 0, 0, 1136355005, 0, 0, 0, 4, 0, 0, 0, .1303368824626505, 0, 0, 0, 0, 0, 0, 0, 1731891456, 0, 0, 0, 1030638996, 0, 0, 0, 4, 0, 0, 0, .1302171484322746, 0, 0, 0, 0, 0, 0, 0, 1766100625, 0, 0, 0, 927482606, 0, 0, 0, 4, 0, 0, 0, .130098215236376, 0, 0, 0, 0, 0, 0, 0, 1800814096, 0, 0, 0, 826811824, 0, 0, 0, 4, 0, 0, 0, .1299800734730872, 0, 0, 0, 0, 0, 0, 0, 1836036801, 0, 0, 0, 728555125, 0, 0, 0, 4, 0, 0, 0, .129862713897253, 0, 0, 0, 0, 0, 0, 0, 1871773696, 0, 0, 0, 632643374, 0, 0, 0, 4, 0, 0, 0, .1297461274170591, 0, 0, 0, 0, 0, 0, 0, 1908029761, 0, 0, 0, 539009733, 0, 0, 0, 4, 0, 0, 0, .1296303050907487, 0, 0, 0, 0, 0, 0, 0, 194481e4, 0, 0, 0, 447589579, 0, 0, 0, 4, 0, 0, 0, .1295152381234257, 0, 0, 0, 0, 0, 0, 0, 1982119441, 0, 0, 0, 358320415, 0, 0, 0, 4, 0, 0, 0, .1294009178639407, 0, 0, 0, 0, 0, 0, 0, 2019963136, 0, 0, 0, 271141794, 0, 0, 0, 4, 0, 0, 0, .1292873358018581, 0, 0, 0, 0, 0, 0, 0, 2058346161, 0, 0, 0, 185995241, 0, 0, 0, 4, 0, 0, 0, .1291744835645007, 0, 0, 0, 0, 0, 0, 0, 2097273616, 0, 0, 0, 102824182, 0, 0, 0, 4, 0, 0, 0, .1290623529140715, 0, 0, 0, 0, 0, 0, 0, 2136750625, 0, 0, 0, 21573871, 0, 0, 0, 4, 0, 0, 0, .1289509357448472, 0, 0, 0, 0, 0, 0, 0, -2118184960, 0, 0, 0, -115617354, 0, 0, 0, 4, 0, 0, 0, .1288402240804449, 0, 0, 0, 0, 0, 0, 0, -2077593375, 0, 0, 0, -270749497, 0, 0, 0, 4, 0, 0, 0, .1287302100711567, 0, 0, 0, 0, 0, 0, 0, -2036436720, 0, 0, 0, -422347990, 0, 0, 0, 4, 0, 0, 0, .1286208859913518, 0, 0, 0, 0, 0, 0, 0, -1994709775, 0, 0, 0, -570508982, 0, 0, 0, 4, 0, 0, 0, .1285122442369443, 0, 0, 0, 0, 0, 0, 0, -1952407296, 0, 0, 0, -715325586, 0, 0, 0, 4, 0, 0, 0, .1284042773229231, 0, 0, 0, 0, 0, 0, 0, -1909524015, 0, 0, 0, -856887984, 0, 0, 0, 4, 0, 0, 0, .1282969778809442, 0, 0, 0, 0, 0, 0, 0, -1866054640, 0, 0, 0, -995283534, 0, 0, 0, 4, 0, 0, 0, .1281903386569819, 0, 0, 0, 0, 0, 0, 0, -1821993855, 0, 0, 0, -1130596871, 0, 0, 0, 4, 0, 0, 0, .1280843525090381, 0, 0, 0, 0, 0, 0, 0, -1777336320, 0, 0, 0, -1262910001, 0, 0, 0, 4, 0, 0, 0, .1279790124049077, 0, 0, 0, 0, 0, 0, 0, -1732076671, 0, 0, 0, -1392302398, 0, 0, 0, 4, 0, 0, 0, .1278743114199984, 0, 0, 0, 0, 0, 0, 0, -1686209520, 0, 0, 0, -1518851089, 0, 0, 0, 4, 0, 0, 0, .1277702427352035, 0, 0, 0, 0, 0, 0, 0, -1639729455, 0, 0, 0, -1642630743, 0, 0, 0, 4, 0, 0, 0, .1276667996348261, 0, 0, 0, 0, 0, 0, 0, -1592631040, 0, 0, 0, -1763713750, 0, 0, 0, 4, 0, 0, 0, .1275639755045533, 0, 0, 0, 0, 0, 0, 0, -1544908815, 0, 0, 0, -1882170303, 0, 0, 0, 4, 0, 0, 0, .1274617638294791, 0, 0, 0, 0, 0, 0, 0, -1496557296, 0, 0, 0, -1998068471, 0, 0, 0, 4, 0, 0, 0, .1273601581921741, 0, 0, 0, 0, 0, 0, 0, -1447570975, 0, 0, 0, -2111474275, 0, 0, 0, 4, 0, 0, 0, .127259152270801, 0, 0, 0, 0, 0, 0, 0, -1397944320, 0, 0, 0, 2072515539, 0, 0, 0, 4, 0, 0, 0, .1271587398372755, 0, 0, 0, 0, 0, 0, 0, -1347671775, 0, 0, 0, 1963904249, 0, 0, 0, 4, 0, 0, 0, .1270589147554692, 0, 0, 0, 0, 0, 0, 0, -1296747760, 0, 0, 0, 1857598869, 0, 0, 0, 4, 0, 0, 0, .1269596709794558, 0, 0, 0, 0, 0, 0, 0, -1245166671, 0, 0, 0, 1753540899, 0, 0, 0, 4, 0, 0, 0, .1268610025517973, 0, 0, 0, 0, 0, 0, 0, -1192922880, 0, 0, 0, 1651673563, 0, 0, 0, 4, 0, 0, 0, .1267629036018709, 0, 0, 0, 0, 0, 0, 0, -1140010735, 0, 0, 0, 1551941755, 0, 0, 0, 4, 0, 0, 0, .1266653683442337, 0, 0, 0, 0, 0, 0, 0, -1086424560, 0, 0, 0, 1454291975, 0, 0, 0, 4, 0, 0, 0, .1265683910770258, 0, 0, 0, 0, 0, 0, 0, -1032158655, 0, 0, 0, 1358672283, 0, 0, 0, 4, 0, 0, 0, .1264719661804097, 0, 0, 0, 0, 0, 0, 0, -977207296, 0, 0, 0, 1265032243, 0, 0, 0, 4, 0, 0, 0, .1263760881150453, 0, 0, 0, 0, 0, 0, 0, -921564735, 0, 0, 0, 1173322876, 0, 0, 0, 4, 0, 0, 0, .1262807514205999, 0, 0, 0, 0, 0, 0, 0, -865225200, 0, 0, 0, 1083496611, 0, 0, 0, 4, 0, 0, 0, .1261859507142915, 0, 0, 0, 0, 0, 0, 0, -808182895, 0, 0, 0, 995507236, 0, 0, 0, 4, 0, 0, 0, .1260916806894653, 0, 0, 0, 0, 0, 0, 0, -750432e3, 0, 0, 0, 909309861, 0, 0, 0, 4, 0, 0, 0, .1259979361142023, 0, 0, 0, 0, 0, 0, 0, -691966671, 0, 0, 0, 824860867, 0, 0, 0, 4, 0, 0, 0, .1259047118299582, 0, 0, 0, 0, 0, 0, 0, -632781040, 0, 0, 0, 742117872, 0, 0, 0, 4, 0, 0, 0, .1258120027502338, 0, 0, 0, 0, 0, 0, 0, -572869215, 0, 0, 0, 661039685, 0, 0, 0, 4, 0, 0, 0, .1257198038592741, 0, 0, 0, 0, 0, 0, 0, -512225280, 0, 0, 0, 581586271, 0, 0, 0, 4, 0, 0, 0, .1256281102107963, 0, 0, 0, 0, 0, 0, 0, -450843295, 0, 0, 0, 503718716, 0, 0, 0, 4, 0, 0, 0, .1255369169267456, 0, 0, 0, 0, 0, 0, 0, -388717296, 0, 0, 0, 427399186, 0, 0, 0, 4, 0, 0, 0, .1254462191960791, 0, 0, 0, 0, 0, 0, 0, -325841295, 0, 0, 0, 352590899, 0, 0, 0, 4, 0, 0, 0, .1253560122735751, 0, 0, 0, 0, 0, 0, 0, -262209280, 0, 0, 0, 279258085, 0, 0, 0, 4, 0, 0, 0, .1252662914786691, 0, 0, 0, 0, 0, 0, 0, -197815215, 0, 0, 0, 207365961, 0, 0, 0, 4, 0, 0, 0, .1251770521943144, 0, 0, 0, 0, 0, 0, 0, -132653040, 0, 0, 0, 136880695, 0, 0, 0, 4, 0, 0, 0, .1250882898658681, 0, 0, 0, 0, 0, 0, 0, -66716671, 0, 0, 0, 67769379, 0, 0, 0, 4, 0, 0, 0, .125, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str267 = allocate([ 109, 117, 95, 100, 105, 118, 95, 113, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str280 = allocate([ 109, 117, 95, 100, 105, 118, 97, 112, 112, 114, 95, 113, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2282 = allocate([ 99, 120, 32, 62, 61, 32, 99, 121, 0 ], "i8", ALLOC_STATIC);

_mpn_fft_table = allocate([ 400, 0, 0, 0, 800, 0, 0, 0, 1600, 0, 0, 0, 3200, 0, 0, 0, 9600, 0, 0, 0, 28800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 480, 0, 0, 0, 960, 0, 0, 0, 1920, 0, 0, 0, 3840, 0, 0, 0, 11520, 0, 0, 0, 34560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str297 = allocate([ 109, 117, 108, 95, 102, 102, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1298 = allocate([ 95, 95, 103, 109, 112, 110, 95, 102, 102, 116, 95, 110, 101, 120, 116, 95, 115, 105, 122, 101, 32, 40, 112, 108, 44, 32, 107, 41, 32, 61, 61, 32, 112, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2299 = allocate([ 110, 112, 114, 105, 109, 101, 32, 60, 32, 112, 108, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3300 = allocate([ 40, 110, 32, 38, 32, 40, 75, 50, 32, 45, 32, 49, 41, 41, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4301 = allocate([ 110, 112, 114, 105, 109, 101, 50, 32, 60, 32, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5302 = allocate([ 110, 108, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

_win_size_x317 = allocate([ 1, 0, 0, 0, 7, 0, 0, 0, 25, 0, 0, 0, 81, 0, 0, 0, 241, 0, 0, 0, 673, 0, 0, 0, 1793, 0, 0, 0, 4609, 0, 0, 0, 11521, 0, 0, 0, 28161, 0, 0, 0, -1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str328 = allocate([ 114, 101, 100, 99, 95, 110, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1329 = allocate([ 50, 32, 42, 32, 110, 32, 62, 32, 114, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str339 = allocate([ 115, 98, 112, 105, 49, 95, 100, 105, 118, 95, 113, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2341 = allocate([ 99, 121, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str346 = allocate([ 115, 98, 112, 105, 49, 95, 100, 105, 118, 97, 112, 112, 114, 95, 113, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1347 = allocate([ 110, 112, 91, 49, 93, 32, 61, 61, 32, 110, 49, 0 ], "i8", ALLOC_STATIC);

_gmp_primes_dtab = allocate([ -1431655765, 0, 0, 0, 1431655765, 0, 0, 0, -858993459, 0, 0, 0, 858993459, 0, 0, 0, -1227133513, 0, 0, 0, 613566756, 0, 0, 0, -1171354717, 0, 0, 0, 390451572, 0, 0, 0, -991146299, 0, 0, 0, 330382099, 0, 0, 0, -252645135, 0, 0, 0, 252645135, 0, 0, 0, 678152731, 0, 0, 0, 226050910, 0, 0, 0, -373475417, 0, 0, 0, 186737708, 0, 0, 0, 1332920885, 0, 0, 0, 148102320, 0, 0, 0, -1108378657, 0, 0, 0, 138547332, 0, 0, 0, -1857283155, 0, 0, 0, 116080197, 0, 0, 0, -1047552999, 0, 0, 0, 104755299, 0, 0, 0, 799063683, 0, 0, 0, 99882960, 0, 0, 0, 1736263375, 0, 0, 0, 91382282, 0, 0, 0, -1944890851, 0, 0, 0, 81037118, 0, 0, 0, -1601513229, 0, 0, 0, 72796055, 0, 0, 0, -1056139499, 0, 0, 0, 70409299, 0, 0, 0, 128207979, 0, 0, 0, 64103989, 0, 0, 0, -483939977, 0, 0, 0, 60492497, 0, 0, 0, -941362695, 0, 0, 0, 58835168, 0, 0, 0, 1631000239, 0, 0, 0, 54366674, 0, 0, 0, 724452315, 0, 0, 0, 51746593, 0, 0, 0, -96516119, 0, 0, 0, 48258059, 0, 0, 0, 1594008481, 0, 0, 0, 44278013, 0, 0, 0, 2083697005, 0, 0, 0, 42524428, 0, 0, 0, -750576809, 0, 0, 0, 41698711, 0, 0, 0, -1926714301, 0, 0, 0, 40139881, 0, 0, 0, -630453915, 0, 0, 0, 39403369, 0, 0, 0, 266059921, 0, 0, 0, 38008560, 0, 0, 0, -270549121, 0, 0, 0, 33818640, 0, 0, 0, -918008277, 0, 0, 0, 32786009, 0, 0, 0, 125400505, 0, 0, 0, 31350126, 0, 0, 0, 1884841763, 0, 0, 0, 30899045, 0, 0, 0, -1931294019, 0, 0, 0, 28825283, 0, 0, 0, -1080852697, 0, 0, 0, 28443492, 0, 0, 0, 738624949, 0, 0, 0, 27356479, 0, 0, 0, 1159377675, 0, 0, 0, 26349492, 0, 0, 0, -617240809, 0, 0, 0, 25718367, 0, 0, 0, 223437605, 0, 0, 0, 24826400, 0, 0, 0, -647844229, 0, 0, 0, 23994230, 0, 0, 0, 284749213, 0, 0, 0, 23729101, 0, 0, 0, -292327617, 0, 0, 0, 22486739, 0, 0, 0, -1869312191, 0, 0, 0, 22253716, 0, 0, 0, 1024687629, 0, 0, 0, 21801864, 0, 0, 0, -280575753, 0, 0, 0, 21582750, 0, 0, 0, 1852331867, 0, 0, 0, 20355295, 0, 0, 0, -616318177, 0, 0, 0, 19259943, 0, 0, 0, -1683929909, 0, 0, 0, 18920560, 0, 0, 0, 1200340205, 0, 0, 0, 18755315, 0, 0, 0, 534566745, 0, 0, 0, 18433336, 0, 0, 0, 1132146191, 0, 0, 0, 17970574, 0, 0, 0, 285143057, 0, 0, 0, 17821441, 0, 0, 0, -1711142349, 0, 0, 0, 17111423, 0, 0, 0, -16711935, 0, 0, 0, 16711935, 0, 0, 0, 1894358199, 0, 0, 0, 16330674, 0, 0, 0, 1644541381, 0, 0, 0, 15966421, 0, 0, 0, -1569010193, 0, 0, 0, 15848587, 0, 0, 0, 635717181, 0, 0, 0, 15505297, 0, 0, 0, 122276649, 0, 0, 0, 15284581, 0, 0, 0, -910593773, 0, 0, 0, 15176562, 0, 0, 0, -2066861395, 0, 0, 0, 14658591, 0, 0, 0, -951328261, 0, 0, 0, 13990121, 0, 0, 0, -1491499897, 0, 0, 0, 13810184, 0, 0, 0, 960535817, 0, 0, 0, 13721940, 0, 0, 0, 1869733397, 0, 0, 0, 13548792, 0, 0, 0, -1076985757, 0, 0, 0, 12975732, 0, 0, 0, -165681231, 0, 0, 0, 12744710, 0, 0, 0, 1893746387, 0, 0, 0, 12377427, 0, 0, 0, -246129931, 0, 0, 0, 12306496, 0, 0, 0, -1703386463, 0, 0, 0, 12167046, 0, 0, 0, 705858135, 0, 0, 0, 11963697, 0, 0, 0, -1217102449, 0, 0, 0, 11702908, 0, 0, 0, -1151465763, 0, 0, 0, 11514657, 0, 0, 0, 317306291, 0, 0, 0, 11332367, 0, 0, 0, -325206401, 0, 0, 0, 11214013, 0, 0, 0, -331231411, 0, 0, 0, 11041047, 0, 0, 0, -1363138235, 0, 0, 0, 10818557, 0, 0, 0, -2088575119, 0, 0, 0, 10710641, 0, 0, 0, -2068725079, 0, 0, 0, 10501142, 0, 0, 0, 1978350091, 0, 0, 0, 10250518, 0, 0, 0, -91816403, 0, 0, 0, 10201822, 0, 0, 0, 1066267983, 0, 0, 0, 9965121, 0, 0, 0, 158705489, 0, 0, 0, 9919093, 0, 0, 0, -1007703033, 0, 0, 0, 9783524, 0, 0, 0, -1473668237, 0, 0, 0, 9695185, 0, 0, 0, -1683550655, 0, 0, 0, 9565628, 0, 0, 0, 601483385, 0, 0, 0, 9398177, 0, 0, 0, -996879611, 0, 0, 0, 9316631, 0, 0, 0, -1419287249, 0, 0, 0, 9276387, 0, 0, 0, -82772389, 0, 0, 0, 9196932, 0, 0, 0, -1084949985, 0, 0, 0, 8966528, 0, 0, 0, -1181777449, 0, 0, 0, 8819234, 0, 0, 0, -384885053, 0, 0, 0, 8747387, 0, 0, 0, -1093107909, 0, 0, 0, 8607148, 0, 0, 0, 384241607, 0, 0, 0, 8538702, 0, 0, 0, -1645419691, 0, 0, 0, 8438049, 0, 0, 0, 1945513017, 0, 0, 0, 8243699, 0, 0, 0, -1387857501, 0, 0, 0, 8212174, 0, 0, 0, 619237429, 0, 0, 0, 7938941, 0, 0, 0, 588889483, 0, 0, 0, 7851859, 0, 0, 0, -940728923, 0, 0, 0, 7710892, 0, 0, 0, -22886149, 0, 0, 0, 7628716, 0, 0, 0, -837858295, 0, 0, 0, 7548272, 0, 0, 0, 1414104819, 0, 0, 0, 7521834, 0, 0, 0, 1436618177, 0, 0, 0, 7443617, 0, 0, 0, -2048706717, 0, 0, 0, 7316809, 0, 0, 0, -666335567, 0, 0, 0, 7242777, 0, 0, 0, 824576359, 0, 0, 0, 7170229, 0, 0, 0, -771807767, 0, 0, 0, 7146368, 0, 0, 0, 1535433119, 0, 0, 0, 7075728, 0, 0, 0, 322297709, 0, 0, 0, 7006471, 0, 0, 0, 1976937945, 0, 0, 0, 6961049, 0, 0, 0, 1013029443, 0, 0, 0, 6938557, 0, 0, 0, 74872647, 0, 0, 0, 6806604, 0, 0, 0, 6700417, 0, 0, 0, 6700416, 0, 0, 0, 1730010155, 0, 0, 0, 6679575, 0, 0, 0, -1042209993, 0, 0, 0, 6638280, 0, 0, 0, -1664053179, 0, 0, 0, 6577285, 0, 0, 0, -1857459301, 0, 0, 0, 6517401, 0, 0, 0, -942163779, 0, 0, 0, 6497681, 0, 0, 0, -1627365023, 0, 0, 0, 6381823, 0, 0, 0, 1579685165, 0, 0, 0, 6344117, 0, 0, 0, 12576771, 0, 0, 0, 6288385, 0, 0, 0, -1634698117, 0, 0, 0, 6215582, 0, 0, 0, 1985120405, 0, 0, 0, 6126914, 0, 0, 0, 30288909, 0, 0, 0, 6057781, 0, 0, 0, -1093155793, 0, 0, 0, 5973528, 0, 0, 0, -726658841, 0, 0, 0, 5907795, 0, 0, 0, 515630453, 0, 0, 0, 5859436, 0, 0, 0, -1266986293, 0, 0, 0, 5811863, 0, 0, 0, 1693708503, 0, 0, 0, 5780575, 0, 0, 0, 829254671, 0, 0, 0, 5718997, 0, 0, 0, -1849616035, 0, 0, 0, 5673668, 0, 0, 0, -1568989367, 0, 0, 0, 5643846, 0, 0, 0, -452395775, 0, 0, 0, 5585133, 0, 0, 0, 322261453, 0, 0, 0, 5556231, 0, 0, 0, 764034843, 0, 0, 0, 5457391, 0, 0, 0, -1018505419, 0, 0, 0, 5388917, 0, 0, 0, 175196441, 0, 0, 0, 5308983, 0, 0, 0, 619619203, 0, 0, 0, 5295890, 0, 0, 0, 1119516445, 0, 0, 0, 5231385, 0, 0, 0, 125248135, 0, 0, 0, 5218672, 0, 0, 0, 1583996403, 0, 0, 0, 5193430, 0, 0, 0, 994733077, 0, 0, 0, 5180901, 0, 0, 0, -972638601, 0, 0, 0, 5119150, 0, 0, 0, 1188291069, 0, 0, 0, 5035131, 0, 0, 0, 1212814569, 0, 0, 0, 5011630, 0, 0, 0, 484996307, 0, 0, 0, 4999961, 0, 0, 0, 74651807, 0, 0, 0, 4976787, 0, 0, 0, 925597285, 0, 0, 0, 4897340, 0, 0, 0, 1335778705, 0, 0, 0, 4875104, 0, 0, 0, 1147918779, 0, 0, 0, 4864062, 0, 0, 0, -411580857, 0, 0, 0, 4842127, 0, 0, 0, -165737437, 0, 0, 0, 4735355, 0, 0, 0, -1513374865, 0, 0, 0, 4714563, 0, 0, 0, 1775938599, 0, 0, 0, 4673522, 0, 0, 0, 1668980833, 0, 0, 0, 4623215, 0, 0, 0, 531714201, 0, 0, 0, 4583743, 0, 0, 0, 1898731557, 0, 0, 0, 4564258, 0, 0, 0, -13606021, 0, 0, 0, 4535340, 0, 0, 0, 18027145, 0, 0, 0, 4506786, 0, 0, 0, 257609207, 0, 0, 0, 4441538, 0, 0, 0, 1296009699, 0, 0, 0, 4423241, 0, 0, 0, -769313487, 0, 0, 0, 4396077, 0, 0, 0, 2079760359, 0, 0, 0, 4369244, 0, 0, 0, -810452961, 0, 0, 0, 4333973, 0, 0, 0, 831422957, 0, 0, 0, 4307890, 0, 0, 0, -1626043119, 0, 0, 0, 4256657, 0, 0, 0, 746213469, 0, 0, 0, 4239849, 0, 0, 0, 678596403, 0, 0, 0, 4214884, 0, 0, 0, -437489323, 0, 0, 0, 4206628, 0, 0, 0, -1612174921, 0, 0, 0, 4165826, 0, 0, 0, 1783679545, 0, 0, 0, 4157761, 0, 0, 0, -1227724049, 0, 0, 0, 4133751, 0, 0, 0, -1473963991, 0, 0, 0, 4094344, 0, 0, 0, 461780499, 0, 0, 0, 4086553, 0, 0, 0, 550533037, 0, 0, 0, 4048037, 0, 0, 0, 775760791, 0, 0, 0, 4040420, 0, 0, 0, 1036577701, 0, 0, 0, 4017743, 0, 0, 0, 841608127, 0, 0, 0, 3951211, 0, 0, 0, 2114021483, 0, 0, 0, 3936725, 0, 0, 0, 738750093, 0, 0, 0, 3929521, 0, 0, 0, -1620890119, 0, 0, 0, 3915193, 0, 0, 0, -537357649, 0, 0, 0, 3893896, 0, 0, 0, 1057282301, 0, 0, 0, 3872828, 0, 0, 0, -1661079563, 0, 0, 0, 3845091, 0, 0, 0, 198876491, 0, 0, 0, 3824547, 0, 0, 0, 620088281, 0, 0, 0, 3804222, 0, 0, 0, -1798587521, 0, 0, 0, 3731509, 0, 0, 0, -1259062399, 0, 0, 0, 3725036, 0, 0, 0, 55395107, 0, 0, 0, 3693007, 0, 0, 0, 1962260891, 0, 0, 0, 3667777, 0, 0, 0, -963731019, 0, 0, 0, 3636720, 0, 0, 0, -1765748981, 0, 0, 0, 3618338, 0, 0, 0, -482418791, 0, 0, 0, 3600140, 0, 0, 0, -1198013359, 0, 0, 0, 3576159, 0, 0, 0, -1883695467, 0, 0, 0, 3540780, 0, 0, 0, -437613759, 0, 0, 0, 3529143, 0, 0, 0, -1812103945, 0, 0, 0, 3511829, 0, 0, 0, 188712965, 0, 0, 0, 3494684, 0, 0, 0, -1458404817, 0, 0, 0, 3489006, 0, 0, 0, 329847933, 0, 0, 0, 3472083, 0, 0, 0, 206323489, 0, 0, 0, 3438724, 0, 0, 0, 2053669827, 0, 0, 0, 3411411, 0, 0, 0, 716388437, 0, 0, 0, 3363325, 0, 0, 0, -2098791681, 0, 0, 0, 3358066, 0, 0, 0, 398364075, 0, 0, 0, 3347597, 0, 0, 0, 2092505401, 0, 0, 0, 3332014, 0, 0, 0, 1117822627, 0, 0, 0, 3326853, 0, 0, 0, 1837861873, 0, 0, 0, 3311462, 0, 0, 0, -1165352387, 0, 0, 0, 3301281, 0, 0, 0, -1674476889, 0, 0, 0, 3296214, 0, 0, 0, 1196150035, 0, 0, 0, 3286126, 0, 0, 0, -986637673, 0, 0, 0, 3256229, 0, 0, 0, -1072928999, 0, 0, 0, 3251299, 0, 0, 0, 1259037135, 0, 0, 0, 3236599, 0, 0, 0, -1685167183, 0, 0, 0, 3155743, 0, 0, 0, 69121639, 0, 0, 0, 3141892, 0, 0, 0, -1989511435, 0, 0, 0, 3128162, 0, 0, 0, 1247126637, 0, 0, 0, 3110041, 0, 0, 0, 1476682823, 0, 0, 0, 3070026, 0, 0, 0, 1774074497, 0, 0, 0, 3048237, 0, 0, 0, -799835793, 0, 0, 0, 3018248, 0, 0, 0, -1980440421, 0, 0, 0, 3009787, 0, 0, 0, -1217258051, 0, 0, 0, 3005575, 0, 0, 0, 905150121, 0, 0, 0, 2997185, 0, 0, 0, -220866977, 0, 0, 0, 2984688, 0, 0, 0, 911233559, 0, 0, 0, 2968187, 0, 0, 0, 1885523203, 0, 0, 0, 2960005, 0, 0, 0, -38427099, 0, 0, 0, 2955930, 0, 0, 0, 2122461563, 0, 0, 0, 2943774, 0, 0, 0, 1623386687, 0, 0, 0, 2919760, 0, 0, 0, -263904135, 0, 0, 0, 2900045, 0, 0, 0, -2102593565, 0, 0, 0, 2896134, 0, 0, 0, 1943855407, 0, 0, 0, 2888343, 0, 0, 0, -2050854095, 0, 0, 0, 2884464, 0, 0, 0, -28767363, 0, 0, 0, 2876736, 0, 0, 0, -1701941677, 0, 0, 0, 2865221, 0, 0, 0, -730513961, 0, 0, 0, 2842466, 0, 0, 0, -995484869, 0, 0, 0, 2820070, 0, 0, 0, -2129248973, 0, 0, 0, 2805334, 0, 0, 0, 1497532343, 0, 0, 0, 2783517, 0, 0, 0, 329955525, 0, 0, 0, 2772735, 0, 0, 0, -1916556559, 0, 0, 0, 2765593, 0, 0, 0, 1449103783, 0, 0, 0, 2754950, 0, 0, 0, -1946028577, 0, 0, 0, 2740885, 0, 0, 0, -1943807605, 0, 0, 0, 2733906, 0, 0, 0, 19040387, 0, 0, 0, 2720055, 0, 0, 0, -67829553, 0, 0, 0, 2713182, 0, 0, 0, -927842027, 0, 0, 0, 2689397, 0, 0, 0, -1392309823, 0, 0, 0, 2682677, 0, 0, 0, 614712183, 0, 0, 0, 2672661, 0, 0, 0, -1961964551, 0, 0, 0, 2669339, 0, 0, 0, -335502715, 0, 0, 0, 2662719, 0, 0, 0, 233450971, 0, 0, 0, 2652851, 0, 0, 0, -1698380035, 0, 0, 0, 2649578, 0, 0, 0, -1113998893, 0, 0, 0, 2639807, 0, 0, 0, -902546579, 0, 0, 0, 2623681, 0, 0, 0, -482114615, 0, 0, 0, 2592014, 0, 0, 0, -583681665, 0, 0, 0, 2582662, 0, 0, 0, 1888548907, 0, 0, 0, 2576465, 0, 0, 0, -579009971, 0, 0, 0, 2573377, 0, 0, 0, 1953410997, 0, 0, 0, 2536897, 0, 0, 0, 913661281, 0, 0, 0, 2530917, 0, 0, 0, 1375198475, 0, 0, 0, 2527938, 0, 0, 0, -829338331, 0, 0, 0, 2513146, 0, 0, 0, -494133367, 0, 0, 0, 2495623, 0, 0, 0, 852512371, 0, 0, 0, 2492726, 0, 0, 0, -1992587251, 0, 0, 0, 2478342, 0, 0, 0, 1855149573, 0, 0, 0, 2466954, 0, 0, 0, 594952539, 0, 0, 0, 2458481, 0, 0, 0, -1163781783, 0, 0, 0, 2450066, 0, 0, 0, 1120744735, 0, 0, 0, 2441709, 0, 0, 0, 77343249, 0, 0, 0, 2416976, 0, 0, 0, 1040620231, 0, 0, 0, 2408843, 0, 0, 0, -538373069, 0, 0, 0, 2403451, 0, 0, 0, 936298069, 0, 0, 0, 2400764, 0, 0, 0, 1912583993, 0, 0, 0, 2384768, 0, 0, 0, 1653005083, 0, 0, 0, 2371599, 0, 0, 0, -32983841, 0, 0, 0, 2355988, 0, 0, 0, 2000877719, 0, 0, 0, 2345694, 0, 0, 0, 744119943, 0, 0, 0, 2325374, 0, 0, 0, -648514675, 0, 0, 0, 2307881, 0, 0, 0, 489998947, 0, 0, 0, 2300464, 0, 0, 0, -700141649, 0, 0, 0, 2295546, 0, 0, 0, -820928079, 0, 0, 0, 2293095, 0, 0, 0, 844348925, 0, 0, 0, 2288208, 0, 0, 0, -2134911897, 0, 0, 0, 2285772, 0, 0, 0, -266019679, 0, 0, 0, 2273672, 0, 0, 0, -894690715, 0, 0, 0, 2259319, 0, 0, 0, -1369344581, 0, 0, 0, 2252211, 0, 0, 0, -150424887, 0, 0, 0, 2245147, 0, 0, 0, 949741603, 0, 0, 0, 2224219, 0, 0, 0, 1279824709, 0, 0, 0, 2221917, 0, 0, 0, 1048950453, 0, 0, 0, 2203677, 0, 0, 0, 358831199, 0, 0, 0, 2201418, 0, 0, 0, -433197411, 0, 0, 0, 2176871, 0, 0, 0, 1718855027, 0, 0, 0, 2170271, 0, 0, 0, -445275925, 0, 0, 0, 2161533, 0, 0, 0, -530136455, 0, 0, 0, 2155026, 0, 0, 0, -1967899387, 0, 0, 0, 2150709, 0, 0, 0, 382443311, 0, 0, 0, 2148557, 0, 0, 0, -373102501, 0, 0, 0, 2144267, 0, 0, 0, 568106067, 0, 0, 0, 2135737, 0, 0, 0, -907117535, 0, 0, 0, 2129383, 0, 0, 0, 1277683907, 0, 0, 0, 2118878, 0, 0, 0, 433941989, 0, 0, 0, 2116790, 0, 0, 0, -1567168057, 0, 0, 0, 2106408, 0, 0, 0, -2027191091, 0, 0, 0, 2092044, 0, 0, 0, 949348079, 0, 0, 0, 2081903, 0, 0, 0, -1735424195, 0, 0, 0, 2075866, 0, 0, 0, -1242465311, 0, 0, 0, 2063895, 0, 0, 0, -49485941, 0, 0, 0, 2061914, 0, 0, 0, 107014039, 0, 0, 0, 2057962, 0, 0, 0, 536613913, 0, 0, 0, 2055992, 0, 0, 0, -1037421829, 0, 0, 0, 2046196, 0, 0, 0, 221767615, 0, 0, 0, 2034565, 0, 0, 0, 264243137, 0, 0, 0, 2032639, 0, 0, 0, 201736369, 0, 0, 0, 2017363, 0, 0, 0, 822311899, 0, 0, 0, 2015470, 0, 0, 0, 267304937, 0, 0, 0, 2009811, 0, 0, 0, 1414269941, 0, 0, 0, 2006056, 0, 0, 0, 1497125791, 0, 0, 0, 2004184, 0, 0, 0, -99743783, 0, 0, 0, 1994875, 0, 0, 0, -1114982255, 0, 0, 0, 1987490, 0, 0, 0, 2083423787, 0, 0, 0, 1971072, 0, 0, 0, 1499241875, 0, 0, 0, 1949599, 0, 0, 0, 1560744799, 0, 0, 0, 1946065, 0, 0, 0, 1847631661, 0, 0, 0, 1940789, 0, 0, 0, 1198955301, 0, 0, 0, 1933798, 0, 0, 0, -1430375787, 0, 0, 0, 1919967, 0, 0, 0, -792238273, 0, 0, 0, 1918252, 0, 0, 0, 649127915, 0, 0, 0, 1914831, 0, 0, 0, 1455824099, 0, 0, 0, 1908026, 0, 0, 0, -1591430317, 0, 0, 0, 1894559, 0, 0, 0, -1167913099, 0, 0, 0, 1892889, 0, 0, 0, -1118618847, 0, 0, 0, 1889558, 0, 0, 0, -583708839, 0, 0, 0, 1882931, 0, 0, 0, 1947477519, 0, 0, 0, 1877991, 0, 0, 0, -1901173923, 0, 0, 0, 1873077, 0, 0, 0, -76662455, 0, 0, 0, 1869815, 0, 0, 0, 351558605, 0, 0, 0, 1860098, 0, 0, 0, -564980553, 0, 0, 0, 1858488, 0, 0, 0, -222756555, 0, 0, 0, 1840963, 0, 0, 0, -543527285, 0, 0, 0, 1836240, 0, 0, 0, -1043928403, 0, 0, 0, 1834672, 0, 0, 0, -2109969021, 0, 0, 0, 1829981, 0, 0, 0, 266722767, 0, 0, 0, 1826868, 0, 0, 0, -996753123, 0, 0, 0, 1822217, 0, 0, 0, -124990613, 0, 0, 0, 1811458, 0, 0, 0, 1165441273, 0, 0, 0, 1806885, 0, 0, 0, -1223010427, 0, 0, 0, 1803850, 0, 0, 0, -1928499793, 0, 0, 0, 1802336, 0, 0, 0, -1227904003, 0, 0, 0, 1797809, 0, 0, 0, -437932311, 0, 0, 0, 1794804, 0, 0, 0, 245273247, 0, 0, 0, 1790315, 0, 0, 0, 1485691715, 0, 0, 0, 1781404, 0, 0, 0, -998664303, 0, 0, 0, 1776982, 0, 0, 0, 994418759, 0, 0, 0, 1772582, 0, 0, 0, 1150846797, 0, 0, 0, 1762399, 0, 0, 0, -1449837383, 0, 0, 0, 1759511, 0, 0, 0, -724896401, 0, 0, 0, 1755197, 0, 0, 0, 1241855123, 0, 0, 0, 1746631, 0, 0, 0, 1791455755, 0, 0, 0, 1740967, 0, 0, 0, -955209063, 0, 0, 0, 1736743, 0, 0, 0, -1551875547, 0, 0, 0, 1733939, 0, 0, 0, -272832521, 0, 0, 0, 1715927, 0, 0, 0, -816060823, 0, 0, 0, 1703676, 0, 0, 0, 834896843, 0, 0, 0, 1696944, 0, 0, 0, 495638211, 0, 0, 0, 1691597, 0, 0, 0, -238140145, 0, 0, 0, 1688937, 0, 0, 0, 933468765, 0, 0, 0, 1684961, 0, 0, 0, 1698793415, 0, 0, 0, 1683640, 0, 0, 0, -631563435, 0, 0, 0, 1679689, 0, 0, 0, 2061717531, 0, 0, 0, 1665361, 0, 0, 0, 462483935, 0, 0, 0, 1657648, 0, 0, 0, -2072118815, 0, 0, 0, 1656369, 0, 0, 0, 1119424209, 0, 0, 0, 1646212, 0, 0, 0, 1770832905, 0, 0, 0, 1641179, 0, 0, 0, 2094226709, 0, 0, 0, 1638675, 0, 0, 0, 1916667897, 0, 0, 0, 1631206, 0, 0, 0, -1414889113, 0, 0, 0, 1622579, 0, 0, 0, 1588992417, 0, 0, 0, 1616472, 0, 0, 0, -2020686005, 0, 0, 0, 1615256, 0, 0, 0, 72577367, 0, 0, 0, 1612830, 0, 0, 0, -2043767665, 0, 0, 0, 1607999, 0, 0, 0, -847120931, 0, 0, 0, 1604395, 0, 0, 0, -930069325, 0, 0, 0, 1600807, 0, 0, 0, 1777448319, 0, 0, 0, 1598424, 0, 0, 0, -1966197375, 0, 0, 0, 1597235, 0, 0, 0, -1784652211, 0, 0, 0, 1594863, 0, 0, 0, -1534030557, 0, 0, 0, 1591318, 0, 0, 0, 1653253019, 0, 0, 0, 1586615, 0, 0, 0, 2111837479, 0, 0, 0, 1584274, 0, 0, 0, 1728752041, 0, 0, 0, 1583106, 0, 0, 0, 990417247, 0, 0, 0, 1579612, 0, 0, 0, -620086887, 0, 0, 0, 1573824, 0, 0, 0, 201302019, 0, 0, 0, 1572672, 0, 0, 0, -382332003, 0, 0, 0, 1566934, 0, 0, 0, 1281147029, 0, 0, 0, 1562374, 0, 0, 0, 388465985, 0, 0, 0, 1560104, 0, 0, 0, -762135505, 0, 0, 0, 1552210, 0, 0, 0, 595449193, 0, 0, 0, 1546621, 0, 0, 0, 1455268589, 0, 0, 0, 1539966, 0, 0, 0, -401643305, 0, 0, 0, 1538863, 0, 0, 0, -663362843, 0, 0, 0, 1535562, 0, 0, 0, 1364698641, 0, 0, 0, 1533369, 0, 0, 0, -373875141, 0, 0, 0, 1532275, 0, 0, 0, -1282852949, 0, 0, 0, 1523578, 0, 0, 0, -1990572559, 0, 0, 0, 1516049, 0, 0, 0, 405728317, 0, 0, 0, 1513911, 0, 0, 0, 389764883, 0, 0, 0, 1510716, 0, 0, 0, 988249227, 0, 0, 0, 1506477, 0, 0, 0, -2104639207, 0, 0, 0, 1503313, 0, 0, 0, -1037337435, 0, 0, 0, 1501211, 0, 0, 0, 514679999, 0, 0, 0, 1491826, 0, 0, 0, -462672265, 0, 0, 0, 1487692, 0, 0, 0, 128982449, 0, 0, 0, 1482556, 0, 0, 0, 355078247, 0, 0, 0, 1479492, 0, 0, 0, 160932085, 0, 0, 0, 1476441, 0, 0, 0, 281226861, 0, 0, 0, 1472391, 0, 0, 0, 104182671, 0, 0, 0, 1467361, 0, 0, 0, -1750721613, 0, 0, 0, 1461370, 0, 0, 0, 1656609465, 0, 0, 0, 1454442, 0, 0, 0, 785788741, 0, 0, 0, 1452474, 0, 0, 0, 439208603, 0, 0, 0, 1449533, 0, 0, 0, 1932662953, 0, 0, 0, 1446604, 0, 0, 0, 2132304531, 0, 0, 0, 1445630, 0, 0, 0, 1071235591, 0, 0, 0, 1432133, 0, 0, 0, 719882889, 0, 0, 0, 1431178, 0, 0, 0, 1078377707, 0, 0, 0, 1426425, 0, 0, 0, 101007843, 0, 0, 0, 1422645, 0, 0, 0, -367977681, 0, 0, 0, 1420763, 0, 0, 0, -1470782347, 0, 0, 0, 1414213, 0, 0, 0, 1611495457, 0, 0, 0, 1412353, 0, 0, 0, -1591772071, 0, 0, 0, 1408647, 0, 0, 0, -1146353571, 0, 0, 0, 1403125, 0, 0, 0, -1022277837, 0, 0, 0, 1400380, 0, 0, 0, 1486987703, 0, 0, 0, 1394922, 0, 0, 0, -362209373, 0, 0, 0, 1393112, 0, 0, 0, -1117887247, 0, 0, 0, 1390407, 0, 0, 0, 733556653, 0, 0, 0, 1381462, 0, 0, 0, 665107151, 0, 0, 0, 1377033, 0, 0, 0, 1030737105, 0, 0, 0, 1376151, 0, 0, 0, 1397883841, 0, 0, 0, 1369132, 0, 0, 0, -78756909, 0, 0, 0, 1357877, 0, 0, 0, -1522970721, 0, 0, 0, 1356162, 0, 0, 0, 1082890145, 0, 0, 0, 1355306, 0, 0, 0, -542778011, 0, 0, 0, 1350194, 0, 0, 0, 773552315, 0, 0, 0, 1347652, 0, 0, 0, 714706247, 0, 0, 0, 1345962, 0, 0, 0, -1322147285, 0, 0, 0, 1340920, 0, 0, 0, -1022547527, 0, 0, 0, 1338412, 0, 0, 0, 18691185, 0, 0, 0, 1335084, 0, 0, 0, -537370947, 0, 0, 0, 1333426, 0, 0, 0, -1065428555, 0, 0, 0, 1330123, 0, 0, 0, 1910342267, 0, 0, 0, 1321121, 0, 0, 0, 518881693, 0, 0, 0, 1320309, 0, 0, 0, 2084845961, 0, 0, 0, 1318688, 0, 0, 0, -164734861, 0, 0, 0, 1317878, 0, 0, 0, -334826249, 0, 0, 0, 1313044, 0, 0, 0, -828008245, 0, 0, 0, 1301899, 0, 0, 0, 1643303149, 0, 0, 0, 1301110, 0, 0, 0, -940295229, 0, 0, 0, 1298750, 0, 0, 0, -838769647, 0, 0, 0, 1296398, 0, 0, 0, 1595569351, 0, 0, 0, 1294054, 0, 0, 0, -1041752525, 0, 0, 0, 1292496, 0, 0, 0, 1806234369, 0, 0, 0, 1290167, 0, 0, 0, 234669483, 0, 0, 0, 1289392, 0, 0, 0, 1059930607, 0, 0, 0, 1284764, 0, 0, 0, -617233125, 0, 0, 0, 1283228, 0, 0, 0, 1715941087, 0, 0, 0, 1278644, 0, 0, 0, -876628255, 0, 0, 0, 1277883, 0, 0, 0, 145246595, 0, 0, 0, 1274092, 0, 0, 0, 2065353381, 0, 0, 0, 1273337, 0, 0, 0, 1268593173, 0, 0, 0, 1267325, 0, 0, 0, 2015126207, 0, 0, 0, 1266578, 0, 0, 0, 470215087, 0, 0, 0, 1260630, 0, 0, 0, -314603523, 0, 0, 0, 1258414, 0, 0, 0, 1950438105, 0, 0, 0, 1251082, 0, 0, 0, -171848503, 0, 0, 0, 1245279, 0, 0, 0, 1951806081, 0, 0, 0, 1242397, 0, 0, 0, -2135694515, 0, 0, 0, 1240961, 0, 0, 0, -1960826825, 0, 0, 0, 1240244, 0, 0, 0, 86716963, 0, 0, 0, 1238813, 0, 0, 0, -1694958267, 0, 0, 0, 1238099, 0, 0, 0, 1053134347, 0, 0, 0, 1230297, 0, 0, 0, 1756529923, 0, 0, 0, 1227484, 0, 0, 0, -67280889, 0, 0, 0, 1223288, 0, 0, 0, 1089312149, 0, 0, 0, 1221201, 0, 0, 0, 594256887, 0, 0, 0, 1217739, 0, 0, 0, -1736729479, 0, 0, 0, 1217049, 0, 0, 0, 737912581, 0, 0, 0, 1215671, 0, 0, 0, 2118963803, 0, 0, 0, 1213610, 0, 0, 0, 665895805, 0, 0, 0, 1212924, 0, 0, 0, -2116606381, 0, 0, 0, 1210873, 0, 0, 0, -886282259, 0, 0, 0, 1207469, 0, 0, 0, 1424012759, 0, 0, 0, 1206790, 0, 0, 0, -1989323973, 0, 0, 0, 1202735, 0, 0, 0, -1258145963, 0, 0, 0, 1199376, 0, 0, 0, 1195110911, 0, 0, 0, 1198707, 0, 0, 0, -1555177415, 0, 0, 0, 1195370, 0, 0, 0, -548927065, 0, 0, 0, 1190731, 0, 0, 0, -1170922443, 0, 0, 0, 1188753, 0, 0, 0, 1487861217, 0, 0, 0, 1187439, 0, 0, 0, -1673887337, 0, 0, 0, 1185472, 0, 0, 0, 578418895, 0, 0, 0, 1182860, 0, 0, 0, 1554076701, 0, 0, 0, 1180909, 0, 0, 0, 1626970867, 0, 0, 0, 1178964, 0, 0, 0, 1926220643, 0, 0, 0, 1173809, 0, 0, 0, -1891844761, 0, 0, 0, 1169972, 0, 0, 0, -270116375, 0, 0, 0, 1169334, 0, 0, 0, -1488112139, 0, 0, 0, 1168062, 0, 0, 0, 2003775043, 0, 0, 0, 1163632, 0, 0, 0, -773721455, 0, 0, 0, 1161743, 0, 0, 0, -892415523, 0, 0, 0, 1160488, 0, 0, 0, 286022357, 0, 0, 0, 1157985, 0, 0, 0, 1523275575, 0, 0, 0, 1154871, 0, 0, 0, 339955823, 0, 0, 0, 1152392, 0, 0, 0, -1847767875, 0, 0, 0, 1150540, 0, 0, 0, -1508235373, 0, 0, 0, 1148694, 0, 0, 0, 1701542481, 0, 0, 0, 1141974, 0, 0, 0, -518770937, 0, 0, 0, 1140155, 0, 0, 0, 1695651721, 0, 0, 0, 1139550, 0, 0, 0, 1018335723, 0, 0, 0, 1136535, 0, 0, 0, -48690639, 0, 0, 0, 1132340, 0, 0, 0, 225098365, 0, 0, 0, 1131147, 0, 0, 0, -979157677, 0, 0, 0, 1129362, 0, 0, 0, 767721189, 0, 0, 0, 1124042, 0, 0, 0, 2079514639, 0, 0, 0, 1123454, 0, 0, 0, 1332302665, 0, 0, 0, 1120523, 0, 0, 0, -433181001, 0, 0, 0, 1116445, 0, 0, 0, -325663581, 0, 0, 0, 1115286, 0, 0, 0, 410212293, 0, 0, 0, 1114707, 0, 0, 0, 760486055, 0, 0, 0, 1111821, 0, 0, 0, -1444580179, 0, 0, 0, 1107806, 0, 0, 0, -2142503655, 0, 0, 0, 1106665, 0, 0, 0, -870258223, 0, 0, 0, 1104388, 0, 0, 0, 318797163, 0, 0, 0, 1099300, 0, 0, 0, 1391389303, 0, 0, 0, 1098176, 0, 0, 0, -1398029947, 0, 0, 0, 1096494, 0, 0, 0, -1808291921, 0, 0, 0, 1095934, 0, 0, 0, 460917979, 0, 0, 0, 1094817, 0, 0, 0, 1300842729, 0, 0, 0, 1093145, 0, 0, 0, 340887763, 0, 0, 0, 1092588, 0, 0, 0, 1839766615, 0, 0, 0, 1089263, 0, 0, 0, 556049731, 0, 0, 0, 1088159, 0, 0, 0, 1664069759, 0, 0, 0, 1082673, 0, 0, 0, -163658819, 0, 0, 0, 1076702, 0, 0, 0, -447638431, 0, 0, 0, 1073473, 0, 0, 0, -1222075381, 0, 0, 0, 1072937, 0, 0, 0, 2074060823, 0, 0, 0, 1071866, 0, 0, 0, -1409536987, 0, 0, 0, 1070263, 0, 0, 0, 1015232379, 0, 0, 0, 1068665, 0, 0, 0, -989092195, 0, 0, 0, 1068134, 0, 0, 0, 1705401715, 0, 0, 0, 1066542, 0, 0, 0, 1808574769, 0, 0, 0, 1060747, 0, 0, 0, 1241522267, 0, 0, 0, 1060223, 0, 0, 0, 1029013609, 0, 0, 0, 1058655, 0, 0, 0, -330057639, 0, 0, 0, 1054497, 0, 0, 0, -236912881, 0, 0, 0, 1052946, 0, 0, 0, 1752212275, 0, 0, 0, 1049857, 0, 0, 0, 158451029, 0, 0, 0, 1049344, 0, 0, 0, -2067326293, 0, 0, 0, 1047808, 0, 0, 0, 1773985519, 0, 0, 0, 1044750, 0, 0, 0, 1009478623, 0, 0, 0, 1040699, 0, 0, 0, -28085279, 0, 0, 0, 1040195, 0, 0, 0, -1491235923, 0, 0, 0, 1039188, 0, 0, 0, 1596993155, 0, 0, 0, 1037682, 0, 0, 0, -446767607, 0, 0, 0, 1034184, 0, 0, 0, -779024619, 0, 0, 0, 1033189, 0, 0, 0, -84680769, 0, 0, 0, 1032692, 0, 0, 0, 678639793, 0, 0, 0, 1028242, 0, 0, 0, 1067352025, 0, 0, 0, 1022367, 0, 0, 0, 1659442363, 0, 0, 0, 1019939, 0, 0, 0, 1203853769, 0, 0, 0, 1018488, 0, 0, 0, 1193103027, 0, 0, 0, 1018005, 0, 0, 0, 29452365, 0, 0, 0, 1015598, 0, 0, 0, -309611209, 0, 0, 0, 1015118, 0, 0, 0, 1707454577, 0, 0, 0, 1012725, 0, 0, 0, -1007186533, 0, 0, 0, 1012247, 0, 0, 0, 535229877, 0, 0, 0, 1009867, 0, 0, 0, 838017803, 0, 0, 0, 1008445, 0, 0, 0, -470722771, 0, 0, 0, 1007971, 0, 0, 0, -670742961, 0, 0, 0, 1005611, 0, 0, 0, 915683409, 0, 0, 0, 1005140, 0, 0, 0, -137382797, 0, 0, 0, 1002794, 0, 0, 0, 917274433, 0, 0, 0, 1001391, 0, 0, 0, 500763001, 0, 0, 0, 999526, 0, 0, 0, 2008023767, 0, 0, 0, 992597, 0, 0, 0, -2081628143, 0, 0, 0, 990308, 0, 0, 0, 1138329659, 0, 0, 0, 989851, 0, 0, 0, 678464597, 0, 0, 0, 987575, 0, 0, 0, -282913843, 0, 0, 0, 985762, 0, 0, 0, 1283666595, 0, 0, 0, 984406, 0, 0, 0, -197413315, 0, 0, 0, 982155, 0, 0, 0, 753159831, 0, 0, 0, 978129, 0, 0, 0, 498165413, 0, 0, 0, 976794, 0, 0, 0, -778334967, 0, 0, 0, 974136, 0, 0, 0, 1169676685, 0, 0, 0, 971492, 0, 0, 0, -1710995337, 0, 0, 0, 971052, 0, 0, 0, 1738876649, 0, 0, 0, 967117, 0, 0, 0, 409504415, 0, 0, 0, 965812, 0, 0, 0, -146671541, 0, 0, 0, 964944, 0, 0, 0, 1105301209, 0, 0, 0, 963645, 0, 0, 0, -1760137841, 0, 0, 0, 962349, 0, 0, 0, 567422593, 0, 0, 0, 958484, 0, 0, 0, -330529493, 0, 0, 0, 958056, 0, 0, 0, 2029427013, 0, 0, 0, 955924, 0, 0, 0, 207744147, 0, 0, 0, 952954, 0, 0, 0, -1120136607, 0, 0, 0, 951687, 0, 0, 0, 1514696237, 0, 0, 0, 950845, 0, 0, 0, 827819543, 0, 0, 0, 950424, 0, 0, 0, 2045403395, 0, 0, 0, 949583, 0, 0, 0, 435447531, 0, 0, 0, 944571, 0, 0, 0, 179389709, 0, 0, 0, 944156, 0, 0, 0, 714729265, 0, 0, 0, 941672, 0, 0, 0, -428838425, 0, 0, 0, 940435, 0, 0, 0, -1167691305, 0, 0, 0, 937151, 0, 0, 0, -724091633, 0, 0, 0, 935518, 0, 0, 0, 682971741, 0, 0, 0, 934297, 0, 0, 0, -383495885, 0, 0, 0, 933080, 0, 0, 0, -1063285563, 0, 0, 0, 929445, 0, 0, 0, 1329152053, 0, 0, 0, 926238, 0, 0, 0, 1448012255, 0, 0, 0, 925839, 0, 0, 0, 226635147, 0, 0, 0, 925041, 0, 0, 0, -2007520743, 0, 0, 0, 923847, 0, 0, 0, 1324227715, 0, 0, 0, 923450, 0, 0, 0, -1295776047, 0, 0, 0, 922260, 0, 0, 0, -1923202169, 0, 0, 0, 921073, 0, 0, 0, -1545011775, 0, 0, 0, 919102, 0, 0, 0, -863766665, 0, 0, 0, 917924, 0, 0, 0, -1058405925, 0, 0, 0, 915576, 0, 0, 0, -881276513, 0, 0, 0, 913239, 0, 0, 0, 1528393361, 0, 0, 0, 909757, 0, 0, 0, 1114890939, 0, 0, 0, 909372, 0, 0, 0, -1318733879, 0, 0, 0, 908218, 0, 0, 0, 772241109, 0, 0, 0, 907451, 0, 0, 0, 988990575, 0, 0, 0, 904013, 0, 0, 0, 809536807, 0, 0, 0, 902493, 0, 0, 0, 1697154127, 0, 0, 0, 897965, 0, 0, 0, 727641211, 0, 0, 0, 897214, 0, 0, 0, 1963183005, 0, 0, 0, 896840, 0, 0, 0, -1492888695, 0, 0, 0, 896091, 0, 0, 0, 1305763135, 0, 0, 0, 894971, 0, 0, 0, -1298956991, 0, 0, 0, 894598, 0, 0, 0, 1418865157, 0, 0, 0, 892368, 0, 0, 0, 1857259057, 0, 0, 0, 891627, 0, 0, 0, 1510484255, 0, 0, 0, 889043, 0, 0, 0, -1845749163, 0, 0, 0, 883556, 0, 0, 0, 1401088695, 0, 0, 0, 881742, 0, 0, 0, -565382203, 0, 0, 0, 880657, 0, 0, 0, 109812009, 0, 0, 0, 878496, 0, 0, 0, 1078340759, 0, 0, 0, 875987, 0, 0, 0, -1487358811, 0, 0, 0, 874916, 0, 0, 0, 1011094151, 0, 0, 0, 873138, 0, 0, 0, -330985109, 0, 0, 0, 871013, 0, 0, 0, -178485363, 0, 0, 0, 870660, 0, 0, 0, 749031161, 0, 0, 0, 869954, 0, 0, 0, -167697489, 0, 0, 0, 868898, 0, 0, 0, 1788774503, 0, 0, 0, 867494, 0, 0, 0, -1283204875, 0, 0, 0, 866444, 0, 0, 0, -1987946409, 0, 0, 0, 864700, 0, 0, 0, -1071797031, 0, 0, 0, 864352, 0, 0, 0, 2062413413, 0, 0, 0, 863657, 0, 0, 0, -1469262925, 0, 0, 0, 861232, 0, 0, 0, 446442625, 0, 0, 0, 860197, 0, 0, 0, -1875557833, 0, 0, 0, 859165, 0, 0, 0, -1672315869, 0, 0, 0, 858478, 0, 0, 0, 820579697, 0, 0, 0, 857450, 0, 0, 0, 2065629851, 0, 0, 0, 857107, 0, 0, 0, 931531445, 0, 0, 0, 855400, 0, 0, 0, -1861466017, 0, 0, 0, 855060, 0, 0, 0, 612836175, 0, 0, 0, 852345, 0, 0, 0, 1632614771, 0, 0, 0, 850320, 0, 0, 0, -2063010581, 0, 0, 0, 848975, 0, 0, 0, 669158781, 0, 0, 0, 845965, 0, 0, 0, 272186473, 0, 0, 0, 845299, 0, 0, 0, 2104846367, 0, 0, 0, 844302, 0, 0, 0, -283018045, 0, 0, 0, 842315, 0, 0, 0, 142295525, 0, 0, 0, 841985, 0, 0, 0, -1761886917, 0, 0, 0, 840996, 0, 0, 0, 1430535753, 0, 0, 0, 840009, 0, 0, 0, -1099961345, 0, 0, 0, 839024, 0, 0, 0, -433084909, 0, 0, 0, 834460, 0, 0, 0, -793481247, 0, 0, 0, 833488, 0, 0, 0, 935965391, 0, 0, 0, 831230, 0, 0, 0, 666961659, 0, 0, 0, 830587, 0, 0, 0, -596269837, 0, 0, 0, 829304, 0, 0, 0, 1768808077, 0, 0, 0, 827706, 0, 0, 0, -1319811963, 0, 0, 0, 826432, 0, 0, 0, 1642460137, 0, 0, 0, 824528, 0, 0, 0, 962197571, 0, 0, 0, 821688, 0, 0, 0, 167496335, 0, 0, 0, 821060, 0, 0, 0, 1744907409, 0, 0, 0, 820746, 0, 0, 0, -168944675, 0, 0, 0, 820119, 0, 0, 0, 2004209221, 0, 0, 0, 816378, 0, 0, 0, -39911511, 0, 0, 0, 814520, 0, 0, 0, -1617426593, 0, 0, 0, 813594, 0, 0, 0, -2129997983, 0, 0, 0, 813286, 0, 0, 0, 125678673, 0, 0, 0, 810830, 0, 0, 0, 1742932231, 0, 0, 0, 809912, 0, 0, 0, -1114798443, 0, 0, 0, 808997, 0, 0, 0, -1566134045, 0, 0, 0, 806869, 0, 0, 0, -1671920515, 0, 0, 0, 805356, 0, 0, 0, 769511627, 0, 0, 0, 803248, 0, 0, 0, 1407041239, 0, 0, 0, 802647, 0, 0, 0, -1272287283, 0, 0, 0, 798172, 0, 0, 0, 1675890339, 0, 0, 0, 797283, 0, 0, 0, -453149711, 0, 0, 0, 796396, 0, 0, 0, 312636071, 0, 0, 0, 795511, 0, 0, 0, 1456809695, 0, 0, 0, 794334, 0, 0, 0, -622068051, 0, 0, 0, 793454, 0, 0, 0, -150644967, 0, 0, 0, 792868, 0, 0, 0, -811597437, 0, 0, 0, 792575, 0, 0, 0, -1726369657, 0, 0, 0, 790824, 0, 0, 0, 1697606165, 0, 0, 0, 789951, 0, 0, 0, -149980479, 0, 0, 0, 789370, 0, 0, 0, 80486251, 0, 0, 0, 789080, 0, 0, 0, -437457671, 0, 0, 0, 788212, 0, 0, 0, 387810975, 0, 0, 0, 785042, 0, 0, 0, 569316461, 0, 0, 0, 784182, 0, 0, 0, 583218775, 0, 0, 0, 783896, 0, 0, 0, 1330868035, 0, 0, 0, 783324, 0, 0, 0, -1883976747, 0, 0, 0, 780761, 0, 0, 0, 466725503, 0, 0, 0, 780477, 0, 0, 0, 1319608619, 0, 0, 0, 779910, 0, 0, 0, -579770001, 0, 0, 0, 778214, 0, 0, 0, -1999287439, 0, 0, 0, 777932, 0, 0, 0, -1917076953, 0, 0, 0, 777088, 0, 0, 0, 2074101907, 0, 0, 0, 776526, 0, 0, 0, -321523555, 0, 0, 0, 772893, 0, 0, 0, -1775736973, 0, 0, 0, 772059, 0, 0, 0, 834468417, 0, 0, 0, 771227, 0, 0, 0, 1542889741, 0, 0, 0, 770674, 0, 0, 0, 1594547973, 0, 0, 0, 769569, 0, 0, 0, -18436633, 0, 0, 0, 768193, 0, 0, 0, 1750678471, 0, 0, 0, 763821, 0, 0, 0, -671778889, 0, 0, 0, 761654, 0, 0, 0, 254302265, 0, 0, 0, 761384, 0, 0, 0, 1854281967, 0, 0, 0, 760575, 0, 0, 0, -1745804261, 0, 0, 0, 760036, 0, 0, 0, -1553725123, 0, 0, 0, 759767, 0, 0, 0, 1567811113, 0, 0, 0, 759230, 0, 0, 0, 1678824467, 0, 0, 0, 758962, 0, 0, 0, 1537217965, 0, 0, 0, 757623, 0, 0, 0, -2074553093, 0, 0, 0, 755757, 0, 0, 0, 2117662729, 0, 0, 0, 754959, 0, 0, 0, -84496107, 0, 0, 0, 754429, 0, 0, 0, -1945203571, 0, 0, 0, 753370, 0, 0, 0, 1704149167, 0, 0, 0, 752051, 0, 0, 0, 979646205, 0, 0, 0, 751262, 0, 0, 0, -1816208935, 0, 0, 0, 748643, 0, 0, 0, -1852349595, 0, 0, 0, 748121, 0, 0, 0, -1799354225, 0, 0, 0, 747861, 0, 0, 0, -1219982883, 0, 0, 0, 747080, 0, 0, 0, -1992525925, 0, 0, 0, 743202, 0, 0, 0, -1950299865, 0, 0, 0, 742688, 0, 0, 0, 862553439, 0, 0, 0, 741662, 0, 0, 0, 104394137, 0, 0, 0, 740383, 0, 0, 0, -36241329, 0, 0, 0, 739618, 0, 0, 0, 265987997, 0, 0, 0, 738855, 0, 0, 0, 1604064405, 0, 0, 0, 737840, 0, 0, 0, -251344405, 0, 0, 0, 737080, 0, 0, 0, 641413167, 0, 0, 0, 735565, 0, 0, 0, -1861176997, 0, 0, 0, 735062, 0, 0, 0, 416352617, 0, 0, 0, 734307, 0, 0, 0, -753142445, 0, 0, 0, 734056, 0, 0, 0, 1013427489, 0, 0, 0, 733304, 0, 0, 0, 1926543085, 0, 0, 0, 732804, 0, 0, 0, 618586563, 0, 0, 0, 732055, 0, 0, 0, 1664857829, 0, 0, 0, 731805, 0, 0, 0, 1419479751, 0, 0, 0, 730560, 0, 0, 0, -1571632311, 0, 0, 0, 730312, 0, 0, 0, -766204103, 0, 0, 0, 728330, 0, 0, 0, 598079471, 0, 0, 0, 727590, 0, 0, 0, 1949159563, 0, 0, 0, 725133, 0, 0, 0, 1873930391, 0, 0, 0, 724644, 0, 0, 0, -1188185093, 0, 0, 0, 723180, 0, 0, 0, 2064152769, 0, 0, 0, 721479, 0, 0, 0, -555092747, 0, 0, 0, 718101, 0, 0, 0, -1861606837, 0, 0, 0, 717382, 0, 0, 0, -1118965177, 0, 0, 0, 714993, 0, 0, 0, 1356869555, 0, 0, 0, 714517, 0, 0, 0, 71238469, 0, 0, 0, 712384, 0, 0, 0, -1817019459, 0, 0, 0, 711440, 0, 0, 0, -1899792749, 0, 0, 0, 710734, 0, 0, 0, -1397799841, 0, 0, 0, 710264, 0, 0, 0, 1485109293, 0, 0, 0, 709560, 0, 0, 0, 2090495867, 0, 0, 0, 707922, 0, 0, 0, -585580919, 0, 0, 0, 707223, 0, 0, 0, 1750063167, 0, 0, 0, 706525, 0, 0, 0, -1886145927, 0, 0, 0, 705364, 0, 0, 0, 712889827, 0, 0, 0, 705133, 0, 0, 0, 309750141, 0, 0, 0, 703977, 0, 0, 0, 1797942305, 0, 0, 0, 702595, 0, 0, 0, -1373884327, 0, 0, 0, 701677, 0, 0, 0, 578640187, 0, 0, 0, 700532, 0, 0, 0, -148464547, 0, 0, 0, 700304, 0, 0, 0, -37754881, 0, 0, 0, 699164, 0, 0, 0, 776459703, 0, 0, 0, 698255, 0, 0, 0, -1740148197, 0, 0, 0, 696895, 0, 0, 0, -2083821003, 0, 0, 0, 695766, 0, 0, 0, -115049955, 0, 0, 0, 693072, 0, 0, 0, -2014110329, 0, 0, 0, 692848, 0, 0, 0, -366280461, 0, 0, 0, 692401, 0, 0, 0, 1232270443, 0, 0, 0, 691509, 0, 0, 0, 297753081, 0, 0, 0, 690842, 0, 0, 0, -311369595, 0, 0, 0, 690398, 0, 0, 0, -158587651, 0, 0, 0, 689511, 0, 0, 0, -1345485993, 0, 0, 0, 687524, 0, 0, 0, 577284241, 0, 0, 0, 686425, 0, 0, 0, -938131129, 0, 0, 0, 685768, 0, 0, 0, -485744427, 0, 0, 0, 685112, 0, 0, 0, 2072487807, 0, 0, 0, 684893, 0, 0, 0, 298328141, 0, 0, 0, 684238, 0, 0, 0, 125699695, 0, 0, 0, 683150, 0, 0, 0, 1245056403, 0, 0, 0, 681849, 0, 0, 0, 597110197, 0, 0, 0, 681632, 0, 0, 0, 311693079, 0, 0, 0, 680552, 0, 0, 0, 121703205, 0, 0, 0, 679906, 0, 0, 0, 1840797307, 0, 0, 0, 679260, 0, 0, 0, 1389129097, 0, 0, 0, 678617, 0, 0, 0, -629639359, 0, 0, 0, 677760, 0, 0, 0, -1800460041, 0, 0, 0, 677119, 0, 0, 0, -1894301647, 0, 0, 0, 676053, 0, 0, 0, 914512615, 0, 0, 0, 675415, 0, 0, 0, 1335551849, 0, 0, 0, 675203, 0, 0, 0, -373710049, 0, 0, 0, 674566, 0, 0, 0, -1208359699, 0, 0, 0, 673931, 0, 0, 0, -2120888381, 0, 0, 0, 673297, 0, 0, 0, -1028533411, 0, 0, 0, 672244, 0, 0, 0, 2064565333, 0, 0, 0, 671403, 0, 0, 0, 1462201917, 0, 0, 0, 668893, 0, 0, 0, 398956819, 0, 0, 0, 668269, 0, 0, 0, -1557749807, 0, 0, 0, 665989, 0, 0, 0, -236353029, 0, 0, 0, 665783, 0, 0, 0, -667250291, 0, 0, 0, 663930, 0, 0, 0, 810821881, 0, 0, 0, 663520, 0, 0, 0, 915853233, 0, 0, 0, 662701, 0, 0, 0, -2014155053, 0, 0, 0, 661680, 0, 0, 0, -263454519, 0, 0, 0, 658636, 0, 0, 0, 1294608001, 0, 0, 0, 657829, 0, 0, 0, 1817177243, 0, 0, 0, 656020, 0, 0, 0, 1315173927, 0, 0, 0, 655620, 0, 0, 0, 119286441, 0, 0, 0, 655420, 0, 0, 0, 553640459, 0, 0, 0, 654421, 0, 0, 0, 1461295769, 0, 0, 0, 653823, 0, 0, 0, 1182406915, 0, 0, 0, 653624, 0, 0, 0, -1258385583, 0, 0, 0, 653028, 0, 0, 0, -702231395, 0, 0, 0, 652631, 0, 0, 0, -1682450441, 0, 0, 0, 650851, 0, 0, 0, 1783123247, 0, 0, 0, 650063, 0, 0, 0, 1863596627, 0, 0, 0, 648884, 0, 0, 0, -536466459, 0, 0, 0, 647124, 0, 0, 0, 917998421, 0, 0, 0, 645568, 0, 0, 0, 1080352939, 0, 0, 0, 644986, 0, 0, 0, 669295309, 0, 0, 0, 644793, 0, 0, 0, 1762268913, 0, 0, 0, 643633, 0, 0, 0, 1614069159, 0, 0, 0, 643055, 0, 0, 0, 235006433, 0, 0, 0, 642094, 0, 0, 0, 1224107403, 0, 0, 0, 641902, 0, 0, 0, 235226533, 0, 0, 0, 640944, 0, 0, 0, 340880591, 0, 0, 0, 640752, 0, 0, 0, -1763055587, 0, 0, 0, 640179, 0, 0, 0, -194325057, 0, 0, 0, 639227, 0, 0, 0, -346378619, 0, 0, 0, 637898, 0, 0, 0, 1945071281, 0, 0, 0, 637519, 0, 0, 0, -1041820199, 0, 0, 0, 635256, 0, 0, 0, -1461927357, 0, 0, 0, 635068, 0, 0, 0, 2050864307, 0, 0, 0, 633569, 0, 0, 0, 1356705493, 0, 0, 0, 633382, 0, 0, 0, -1214936265, 0, 0, 0, 632449, 0, 0, 0, 1518697401, 0, 0, 0, 632263, 0, 0, 0, 428675995, 0, 0, 0, 631334, 0, 0, 0, -985141993, 0, 0, 0, 629483, 0, 0, 0, 1258229763, 0, 0, 0, 629114, 0, 0, 0, -296855259, 0, 0, 0, 628930, 0, 0, 0, 1700261457, 0, 0, 0, 628562, 0, 0, 0, -1404449911, 0, 0, 0, 627827, 0, 0, 0, 1552752505, 0, 0, 0, 626362, 0, 0, 0, 1351134255, 0, 0, 0, 625814, 0, 0, 0, 1336823421, 0, 0, 0, 625268, 0, 0, 0, 2011527399, 0, 0, 0, 625086, 0, 0, 0, 654572235, 0, 0, 0, 623996, 0, 0, 0, 1855819323, 0, 0, 0, 622549, 0, 0, 0, 1793974323, 0, 0, 0, 621828, 0, 0, 0, 438756607, 0, 0, 0, 621468, 0, 0, 0, 832666061, 0, 0, 0, 620929, 0, 0, 0, -558895989, 0, 0, 0, 618247, 0, 0, 0, 1155172525, 0, 0, 0, 618069, 0, 0, 0, 829492175, 0, 0, 0, 617181, 0, 0, 0, 576282065, 0, 0, 0, 617004, 0, 0, 0, -135624057, 0, 0, 0, 616472, 0, 0, 0, 1010435571, 0, 0, 0, 616119, 0, 0, 0, -921537343, 0, 0, 0, 615589, 0, 0, 0, 464985719, 0, 0, 0, 615060, 0, 0, 0, 1060379567, 0, 0, 0, 614356, 0, 0, 0, 1496517117, 0, 0, 0, 613829, 0, 0, 0, 988314857, 0, 0, 0, 613479, 0, 0, 0, 807181933, 0, 0, 0, 612429, 0, 0, 0, -753256125, 0, 0, 0, 611905, 0, 0, 0, 1842184635, 0, 0, 0, 611209, 0, 0, 0, -1339317121, 0, 0, 0, 610167, 0, 0, 0, -928756949, 0, 0, 0, 609820, 0, 0, 0, -808843919, 0, 0, 0, 608610, 0, 0, 0, 94782133, 0, 0, 0, 607577, 0, 0, 0, -1254695913, 0, 0, 0, 606719, 0, 0, 0, -2101226433, 0, 0, 0, 604669, 0, 0, 0, 885697293, 0, 0, 0, 604159, 0, 0, 0, 1754537265, 0, 0, 0, 603141, 0, 0, 0, 897320935, 0, 0, 0, 602633, 0, 0, 0, 1935717481, 0, 0, 0, 602464, 0, 0, 0, 2041475855, 0, 0, 0, 600610, 0, 0, 0, 832116167, 0, 0, 0, 599939, 0, 0, 0, -964677063, 0, 0, 0, 598434, 0, 0, 0, 775687707, 0, 0, 0, 597602, 0, 0, 0, 1061650473, 0, 0, 0, 597103, 0, 0, 0, -1942776937, 0, 0, 0, 595943, 0, 0, 0, -28589437, 0, 0, 0, 595613, 0, 0, 0, -960457819, 0, 0, 0, 595448, 0, 0, 0, 313540347, 0, 0, 0, 594953, 0, 0, 0, -385590507, 0, 0, 0, 594130, 0, 0, 0, 400594573, 0, 0, 0, 593473, 0, 0, 0, -506999453, 0, 0, 0, 592981, 0, 0, 0, -1612612945, 0, 0, 0, 592654, 0, 0, 0, -464256771, 0, 0, 0, 592164, 0, 0, 0, -745412421, 0, 0, 0, 589725, 0, 0, 0, -1509153919, 0, 0, 0, 588593, 0, 0, 0, 938109731, 0, 0, 0, 587788, 0, 0, 0, -1648294331, 0, 0, 0, 587627, 0, 0, 0, 2062710697, 0, 0, 0, 586664, 0, 0, 0, -964331765, 0, 0, 0, 585863, 0, 0, 0, -1168479443, 0, 0, 0, 585703, 0, 0, 0, -901189219, 0, 0, 0, 584428, 0, 0, 0, -1582202617, 0, 0, 0, 584269, 0, 0, 0, 1478671737, 0, 0, 0, 582842, 0, 0, 0, 1213605665, 0, 0, 0, 580950, 0, 0, 0, 279338043, 0, 0, 0, 579539, 0, 0, 0, 984999241, 0, 0, 0, 579070, 0, 0, 0, 345538873, 0, 0, 0, 577824, 0, 0, 0, 1838806291, 0, 0, 0, 576428, 0, 0, 0, 1101244129, 0, 0, 0, 575964, 0, 0, 0, -1672152437, 0, 0, 0, 575810, 0, 0, 0, 1637682461, 0, 0, 0, 574423, 0, 0, 0, 1890566409, 0, 0, 0, 574116, 0, 0, 0, -898346305, 0, 0, 0, 573656, 0, 0, 0, 857961153, 0, 0, 0, 573503, 0, 0, 0, -1941011357, 0, 0, 0, 572738, 0, 0, 0, -2070532389, 0, 0, 0, 572128, 0, 0, 0, 336535285, 0, 0, 0, 571367, 0, 0, 0, -685093813, 0, 0, 0, 570911, 0, 0, 0, -1585298727, 0, 0, 0, 570456, 0, 0, 0, -1987640431, 0, 0, 0, 569851, 0, 0, 0, 1807747805, 0, 0, 0, 569548, 0, 0, 0, -1650378317, 0, 0, 0, 569095, 0, 0, 0, 1325073365, 0, 0, 0, 568945, 0, 0, 0, 1583552567, 0, 0, 0, 568192, 0, 0, 0, -1126995783, 0, 0, 0, 568042, 0, 0, 0, 32327101, 0, 0, 0, 567142, 0, 0, 0, -1021450583, 0, 0, 0, 566842, 0, 0, 0, -1587036577, 0, 0, 0, 566394, 0, 0, 0, -1280736723, 0, 0, 0, 565946, 0, 0, 0, -465651177, 0, 0, 0, 565797, 0, 0, 0, -576202373, 0, 0, 0, 564904, 0, 0, 0, -1627762681, 0, 0, 0, 564607, 0, 0, 0, -698263283, 0, 0, 0, 563570, 0, 0, 0, -1938610713, 0, 0, 0, 562242, 0, 0, 0, -1595369901, 0, 0, 0, 561947, 0, 0, 0, -509286879, 0, 0, 0, 561507, 0, 0, 0, 385869405, 0, 0, 0, 560042, 0, 0, 0, -761260983, 0, 0, 0, 559750, 0, 0, 0, -1954291199, 0, 0, 0, 559167, 0, 0, 0, -460394569, 0, 0, 0, 558731, 0, 0, 0, 1479867811, 0, 0, 0, 558440, 0, 0, 0, 1675254811, 0, 0, 0, 557860, 0, 0, 0, 1134098855, 0, 0, 0, 557570, 0, 0, 0, -903295571, 0, 0, 0, 556559, 0, 0, 0, 1796845699, 0, 0, 0, 556126, 0, 0, 0, -1778128689, 0, 0, 0, 555838, 0, 0, 0, -170333931, 0, 0, 0, 554833, 0, 0, 0, 1930048505, 0, 0, 0, 553974, 0, 0, 0, -1226421627, 0, 0, 0, 553689, 0, 0, 0, -1718208337, 0, 0, 0, 553546, 0, 0, 0, 245930853, 0, 0, 0, 551414, 0, 0, 0, -75505007, 0, 0, 0, 551131, 0, 0, 0, -471418951, 0, 0, 0, 549439, 0, 0, 0, 1782661231, 0, 0, 0, 549017, 0, 0, 0, -1968915267, 0, 0, 0, 548597, 0, 0, 0, 433276257, 0, 0, 0, 547757, 0, 0, 0, -517933787, 0, 0, 0, 546920, 0, 0, 0, -858229133, 0, 0, 0, 545947, 0, 0, 0, 547713345, 0, 0, 0, 545531, 0, 0, 0, -1125404659, 0, 0, 0, 545254, 0, 0, 0, -512408841, 0, 0, 0, 545115, 0, 0, 0, -1365911837, 0, 0, 0, 544839, 0, 0, 0, 196782453, 0, 0, 0, 543597, 0, 0, 0, 1371543243, 0, 0, 0, 543185, 0, 0, 0, 1189400591, 0, 0, 0, 542362, 0, 0, 0, 287703751, 0, 0, 0, 541814, 0, 0, 0, 1992912469, 0, 0, 0, 541405, 0, 0, 0, -1530863359, 0, 0, 0, 541132, 0, 0, 0, 2107230149, 0, 0, 0, 540315, 0, 0, 0, -1361252369, 0, 0, 0, 540179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_gmp_primes_ptab = allocate([ 111546435, 0, 0, 0, 872932084, 0, 0, 0, 5, 0, 0, 0, 56202766, 0, 0, 0, 41996971, 0, 0, 0, 56016871, 0, 0, 0, 2552806, 0, 0, 0, 52532041, 0, 0, 0, 0, 0, 0, 8, 58642669, 0, 0, 0, 620060977, 0, 0, 0, 6, 0, 0, 0, 14052459, 0, 0, 0, 39636151, 0, 0, 0, 14246083, 0, 0, 0, 30401305, 0, 0, 0, 16897946, 0, 0, 0, 8, 0, 0, 5, 600662303, 0, 0, 0, -912266133, 0, 0, 0, 2, 0, 0, 0, 90331175, 0, 0, 0, 95285005, 0, 0, 0, 373472497, 0, 0, 0, 424277521, 0, 0, 0, 503427035, 0, 0, 0, 13, 0, 0, 5, 33984931, 0, 0, 0, -108811704, 0, 0, 0, 6, 0, 0, 0, 12865990, 0, 0, 0, 32705024, 0, 0, 0, 25698327, 0, 0, 0, 20284587, 0, 0, 0, 31214417, 0, 0, 0, 18, 0, 0, 4, 89809099, 0, 0, 0, 2123767094, 0, 0, 0, 5, 0, 0, 0, 73939643, 0, 0, 0, 11829502, 0, 0, 0, 18530590, 0, 0, 0, 82061065, 0, 0, 0, 75872297, 0, 0, 0, 22, 0, 0, 4, 167375713, 0, 0, 0, -1701709987, 0, 0, 0, 4, 0, 0, 0, 110574471, 0, 0, 0, 151130637, 0, 0, 0, 28548235, 0, 0, 0, 35928685, 0, 0, 0, 60605226, 0, 0, 0, 26, 0, 0, 4, 371700317, 0, 0, 0, 1908532953, 0, 0, 0, 3, 0, 0, 0, 206263809, 0, 0, 0, 91419201, 0, 0, 0, 305488339, 0, 0, 0, 181213774, 0, 0, 0, 240175855, 0, 0, 0, 30, 0, 0, 4, 645328247, 0, 0, 0, -1443670595, 0, 0, 0, 2, 0, 0, 0, 422997814, 0, 0, 0, 640673839, 0, 0, 0, 435521814, 0, 0, 0, 489906921, 0, 0, 0, 484953077, 0, 0, 0, 34, 0, 0, 4, 1070560157, 0, 0, 0, 12764491, 0, 0, 0, 2, 0, 0, 0, 12726668, 0, 0, 0, 891109380, 0, 0, 0, 533864866, 0, 0, 0, 164444418, 0, 0, 0, 25901180, 0, 0, 0, 38, 0, 0, 4, 1596463769, 0, 0, 0, 1482409062, 0, 0, 0, 1, 0, 0, 0, 1102039758, 0, 0, 0, 1264741243, 0, 0, 0, 446250162, 0, 0, 0, 880971961, 0, 0, 0, 344757914, 0, 0, 0, 42, 0, 0, 4, 11592209, 0, 0, 0, 1921069184, 0, 0, 0, 8, 0, 0, 0, 5849966, 0, 0, 0, 110880, 0, 0, 0, 2175485, 0, 0, 0, 6632860, 0, 0, 0, 7091928, 0, 0, 0, 46, 0, 0, 3, 13420567, 0, 0, 0, 1074224187, 0, 0, 0, 8, 0, 0, 0, 385856, 0, 0, 0, 10503005, 0, 0, 0, 12039156, 0, 0, 0, 12357290, 0, 0, 0, 8343645, 0, 0, 0, 49, 0, 0, 3, 16965341, 0, 0, 0, -95251929, 0, 0, 0, 7, 0, 0, 0, 2736023, 0, 0, 0, 863007, 0, 0, 0, 4771463, 0, 0, 0, 2612149, 0, 0, 0, 12332403, 0, 0, 0, 52, 0, 0, 3, 20193023, 0, 0, 0, -1453054291, 0, 0, 0, 7, 0, 0, 0, 14046420, 0, 0, 0, 6460092, 0, 0, 0, 138793, 0, 0, 0, 9365525, 0, 0, 0, 4941710, 0, 0, 0, 55, 0, 0, 3, 23300239, 0, 0, 0, 1890170464, 0, 0, 0, 7, 0, 0, 0, 7723320, 0, 0, 0, 11471645, 0, 0, 0, 3163661, 0, 0, 0, 7545497, 0, 0, 0, 13526662, 0, 0, 0, 58, 0, 0, 3, 29884301, 0, 0, 0, 527470681, 0, 0, 0, 7, 0, 0, 0, 21512253, 0, 0, 0, 10231486, 0, 0, 0, 15656410, 0, 0, 0, 3927343, 0, 0, 0, 29108077, 0, 0, 0, 61, 0, 0, 3, 35360399, 0, 0, 0, -438715028, 0, 0, 0, 6, 0, 0, 0, 16359017, 0, 0, 0, 1302170, 0, 0, 0, 20636921, 0, 0, 0, 9495653, 0, 0, 0, 7711338, 0, 0, 0, 64, 0, 0, 3, 42749359, 0, 0, 0, -1847602476, 0, 0, 0, 6, 0, 0, 0, 20031396, 0, 0, 0, 13554681, 0, 0, 0, 6275537, 0, 0, 0, 27668868, 0, 0, 0, 13853702, 0, 0, 0, 67, 0, 0, 3, 49143869, 0, 0, 0, 1570064945, 0, 0, 0, 6, 0, 0, 0, 19450693, 0, 0, 0, 2207435, 0, 0, 0, 26746797, 0, 0, 0, 7236268, 0, 0, 0, 27612012, 0, 0, 0, 70, 0, 0, 3, 56466073, 0, 0, 0, 809520422, 0, 0, 0, 6, 0, 0, 0, 3545748, 0, 0, 0, 44793908, 0, 0, 0, 26636638, 0, 0, 0, 14699307, 0, 0, 0, 46103300, 0, 0, 0, 73, 0, 0, 3, 65111573, 0, 0, 0, 131747692, 0, 0, 0, 6, 0, 0, 0, 62715051, 0, 0, 0, 21176873, 0, 0, 0, 47981279, 0, 0, 0, 19214676, 0, 0, 0, 8234907, 0, 0, 0, 76, 0, 0, 3, 76027969, 0, 0, 0, -1007715050, 0, 0, 0, 5, 0, 0, 0, 37401032, 0, 0, 0, 37565435, 0, 0, 0, 41408487, 0, 0, 0, 7640984, 0, 0, 0, 66757016, 0, 0, 0, 79, 0, 0, 3, 84208541, 0, 0, 0, -1744301769, 0, 0, 0, 5, 0, 0, 0, 331705, 0, 0, 0, 51852479, 0, 0, 0, 47838904, 0, 0, 0, 61976739, 0, 0, 0, 78887124, 0, 0, 0, 82, 0, 0, 3, 94593973, 0, 0, 0, 1799086416, 0, 0, 0, 5, 0, 0, 0, 38238511, 0, 0, 0, 34480865, 0, 0, 0, 72653164, 0, 0, 0, 66531042, 0, 0, 0, 23095208, 0, 0, 0, 85, 0, 0, 3, 103569859, 0, 0, 0, 1270945005, 0, 0, 0, 5, 0, 0, 0, 48603077, 0, 0, 0, 50367253, 0, 0, 0, 85339154, 0, 0, 0, 59437222, 0, 0, 0, 56947566, 0, 0, 0, 88, 0, 0, 3, 119319383, 0, 0, 0, 536274182, 0, 0, 0, 5, 0, 0, 0, 118788891, 0, 0, 0, 66656950, 0, 0, 0, 36348948, 0, 0, 0, 21406065, 0, 0, 0, 118084896, 0, 0, 0, 91, 0, 0, 3, 133390067, 0, 0, 0, 26649487, 0, 0, 0, 5, 0, 0, 0, 26485152, 0, 0, 0, 129087792, 0, 0, 0, 56562945, 0, 0, 0, 97698571, 0, 0, 0, 24191173, 0, 0, 0, 94, 0, 0, 3, 154769821, 0, 0, 0, -1140668985, 0, 0, 0, 4, 0, 0, 0, 116182129, 0, 0, 0, 15700601, 0, 0, 0, 68407491, 0, 0, 0, 13212556, 0, 0, 0, 83798164, 0, 0, 0, 97, 0, 0, 3, 178433279, 0, 0, 0, -2128575416, 0, 0, 0, 4, 0, 0, 0, 12568600, 0, 0, 0, 47562115, 0, 0, 0, 64517131, 0, 0, 0, 154704379, 0, 0, 0, 39845528, 0, 0, 0, 100, 0, 0, 3, 193397129, 0, 0, 0, 1666452661, 0, 0, 0, 4, 0, 0, 0, 40230458, 0, 0, 0, 41733691, 0, 0, 0, 124771847, 0, 0, 0, 71809927, 0, 0, 0, 52455982, 0, 0, 0, 103, 0, 0, 3, 213479407, 0, 0, 0, 1105654341, 0, 0, 0, 4, 0, 0, 0, 25379156, 0, 0, 0, 31648216, 0, 0, 0, 56556767, 0, 0, 0, 62879032, 0, 0, 0, 128533288, 0, 0, 0, 106, 0, 0, 3, 229580147, 0, 0, 0, 726902058, 0, 0, 0, 4, 0, 0, 0, 162524650, 0, 0, 0, 4649979, 0, 0, 0, 149145104, 0, 0, 0, 216875834, 0, 0, 0, 153991541, 0, 0, 0, 109, 0, 0, 3, 250367549, 0, 0, 0, 309948593, 0, 0, 0, 4, 0, 0, 0, 38718963, 0, 0, 0, 25234248, 0, 0, 0, 77460362, 0, 0, 0, 224094883, 0, 0, 0, 229480563, 0, 0, 0, 112, 0, 0, 3, 271661713, 0, 0, 0, -102014143, 0, 0, 0, 3, 0, 0, 0, 220041601, 0, 0, 0, 215028242, 0, 0, 0, 258728103, 0, 0, 0, 200865798, 0, 0, 0, 269979522, 0, 0, 0, 115, 0, 0, 3, 293158127, 0, 0, 0, -724408118, 0, 0, 0, 3, 0, 0, 0, 190753518, 0, 0, 0, 56569270, 0, 0, 0, 124399340, 0, 0, 0, 148236743, 0, 0, 0, 218447979, 0, 0, 0, 118, 0, 0, 3, 319512181, 0, 0, 0, -1373173710, 0, 0, 0, 3, 0, 0, 0, 141308943, 0, 0, 0, 83610299, 0, 0, 0, 207559858, 0, 0, 0, 5407866, 0, 0, 0, 308462671, 0, 0, 0, 121, 0, 0, 3, 357349471, 0, 0, 0, -2137307133, 0, 0, 0, 3, 0, 0, 0, 6773644, 0, 0, 0, 10360220, 0, 0, 0, 152926700, 0, 0, 0, 313989369, 0, 0, 0, 350162154, 0, 0, 0, 124, 0, 0, 3, 393806449, 0, 0, 0, 1560302507, 0, 0, 0, 3, 0, 0, 0, 356902806, 0, 0, 0, 77255893, 0, 0, 0, 114036243, 0, 0, 0, 351731452, 0, 0, 0, 123461523, 0, 0, 0, 127, 0, 0, 3, 422400701, 0, 0, 0, 1163932283, 0, 0, 0, 3, 0, 0, 0, 70960286, 0, 0, 0, 309508378, 0, 0, 0, 7250722, 0, 0, 0, 107360123, 0, 0, 0, 38028448, 0, 0, 0, -126, 0, 0, 3, 452366557, 0, 0, 0, 802321558, 0, 0, 0, 3, 0, 0, 0, 223668283, 0, 0, 0, 100073407, 0, 0, 0, 143959814, 0, 0, 0, 75002468, 0, 0, 0, 103994865, 0, 0, 0, -123, 0, 0, 3, 507436351, 0, 0, 0, 249135633, 0, 0, 0, 3, 0, 0, 0, 235476488, 0, 0, 0, 290993229, 0, 0, 0, 139060972, 0, 0, 0, 507341565, 0, 0, 0, 220943518, 0, 0, 0, -120, 0, 0, 3, 547978913, 0, 0, 0, -174125318, 0, 0, 0, 2, 0, 0, 0, 459114905, 0, 0, 0, 138258229, 0, 0, 0, 42559868, 0, 0, 0, 411312456, 0, 0, 0, 158447385, 0, 0, 0, -117, 0, 0, 3, 575204137, 0, 0, 0, -572457454, 0, 0, 0, 2, 0, 0, 0, 268538337, 0, 0, 0, 237063718, 0, 0, 0, 14835035, 0, 0, 0, 356811893, 0, 0, 0, 417382211, 0, 0, 0, -114, 0, 0, 3, 627947039, 0, 0, 0, -1245866173, 0, 0, 0, 2, 0, 0, 0, 527285062, 0, 0, 0, 127865135, 0, 0, 0, 25212983, 0, 0, 0, 531354884, 0, 0, 0, 215232875, 0, 0, 0, -111, 0, 0, 3, 666785731, 0, 0, 0, -1673640791, 0, 0, 0, 2, 0, 0, 0, 294252910, 0, 0, 0, 66980299, 0, 0, 0, 537228988, 0, 0, 0, 15598592, 0, 0, 0, 155347143, 0, 0, 0, -108, 0, 0, 3, 710381447, 0, 0, 0, -2098089911, 0, 0, 0, 2, 0, 0, 0, 32678614, 0, 0, 0, 247036541, 0, 0, 0, 63690930, 0, 0, 0, 343597554, 0, 0, 0, 556083815, 0, 0, 0, -105, 0, 0, 3, 777767161, 0, 0, 0, 1634424236, 0, 0, 0, 2, 0, 0, 0, 406131491, 0, 0, 0, 505229008, 0, 0, 0, 218484251, 0, 0, 0, 191206288, 0, 0, 0, 404442838, 0, 0, 0, -102, 0, 0, 3, 834985999, 0, 0, 0, 1228102580, 0, 0, 0, 2, 0, 0, 0, 120037301, 0, 0, 0, 204915122, 0, 0, 0, 582802249, 0, 0, 0, 453787400, 0, 0, 0, 62537721, 0, 0, 0, -99, 0, 0, 3, 894826021, 0, 0, 0, 858756344, 0, 0, 0, 2, 0, 0, 0, 715663212, 0, 0, 0, 355379835, 0, 0, 0, 290082851, 0, 0, 0, 612184771, 0, 0, 0, 701577285, 0, 0, 0, -96, 0, 0, 3, 951747481, 0, 0, 0, 550525978, 0, 0, 0, 2, 0, 0, 0, 487977372, 0, 0, 0, 878285478, 0, 0, 0, 221969362, 0, 0, 0, 695682139, 0, 0, 0, 400255420, 0, 0, 0, -93, 0, 0, 3, 1019050649, 0, 0, 0, 230505528, 0, 0, 0, 2, 0, 0, 0, 218764700, 0, 0, 0, 393300512, 0, 0, 0, 159895988, 0, 0, 0, 536113121, 0, 0, 0, 268913535, 0, 0, 0, -90, 0, 0, 3, 1072651369, 0, 0, 0, 4366254, 0, 0, 0, 2, 0, 0, 0, 4361820, 0, 0, 0, 929031816, 0, 0, 0, 777948706, 0, 0, 0, 760101453, 0, 0, 0, 855474799, 0, 0, 0, -87, 0, 0, 3, 1125878063, 0, 0, 0, -397775655, 0, 0, 0, 1, 0, 0, 0, 917333107, 0, 0, 0, 1028275491, 0, 0, 0, 883740495, 0, 0, 0, 608408592, 0, 0, 0, 413973109, 0, 0, 0, -84, 0, 0, 3, 1185362993, 0, 0, 0, -808881792, 0, 0, 0, 1, 0, 0, 0, 738878317, 0, 0, 0, 1126127823, 0, 0, 0, 619044597, 0, 0, 0, 515719670, 0, 0, 0, 545119461, 0, 0, 0, -81, 0, 0, 3, 1267745273, 0, 0, 0, -1314520333, 0, 0, 0, 1, 0, 0, 0, 491731477, 0, 0, 0, 513710929, 0, 0, 0, 265462434, 0, 0, 0, 439487952, 0, 0, 0, 246618546, 0, 0, 0, -78, 0, 0, 3, 1322520163, 0, 0, 0, -1615846564, 0, 0, 0, 1, 0, 0, 0, 327406807, 0, 0, 0, 1253214325, 0, 0, 0, 51601058, 0, 0, 0, 1170317980, 0, 0, 0, 1301835282, 0, 0, 0, -75, 0, 0, 3, 1391119619, 0, 0, 0, -1959755627, 0, 0, 0, 1, 0, 0, 0, 121608439, 0, 0, 0, 933203327, 0, 0, 0, 890030575, 0, 0, 0, 212379206, 0, 0, 0, 1162849229, 0, 0, 0, -72, 0, 0, 3, 1498299287, 0, 0, 0, 1860927001, 0, 0, 0, 1, 0, 0, 0, 1298368722, 0, 0, 0, 126319851, 0, 0, 0, 251889642, 0, 0, 0, 142625215, 0, 0, 0, 769821389, 0, 0, 0, -69, 0, 0, 3, 1608372013, 0, 0, 0, 1439633879, 0, 0, 0, 1, 0, 0, 0, 1078223270, 0, 0, 0, 927349053, 0, 0, 0, 938310675, 0, 0, 0, 152540479, 0, 0, 0, 1053301715, 0, 0, 0, -66, 0, 0, 3, 1416091, 0, 0, 0, 2065640358, 0, 0, 0, 11, 0, 0, 0, 1379384, 0, 0, 0, 701308, 0, 0, 0, 205533, 0, 0, 0, 433017, 0, 0, 0, 866456, 0, 0, 0, -63, 0, 0, 2, 1456813, 0, 0, 0, 1887843575, 0, 0, 0, 11, 0, 0, 0, 282572, 0, 0, 0, 471467, 0, 0, 0, 737900, 0, 0, 0, 604549, 0, 0, 0, 1270835, 0, 0, 0, -61, 0, 0, 2, 1829232539, 0, 0, 0, 747241302, 0, 0, 0, 1, 0, 0, 0, 636502218, 0, 0, 0, 105978433, 0, 0, 0, 521949872, 0, 0, 0, 836349276, 0, 0, 0, 963372588, 0, 0, 0, -59, 0, 0, 3, 1901911003, 0, 0, 0, 554561426, 0, 0, 0, 1, 0, 0, 0, 491145290, 0, 0, 0, 334984281, 0, 0, 0, 1277980693, 0, 0, 0, 12540249, 0, 0, 0, 304636112, 0, 0, 0, -56, 0, 0, 3, 2056303297, 0, 0, 0, 190446918, 0, 0, 0, 1, 0, 0, 0, 182360702, 0, 0, 0, 391824500, 0, 0, 0, 1566700004, 0, 0, 0, 1060286734, 0, 0, 0, 236621601, 0, 0, 0, -53, 0, 0, 3, 1653787, 0, 0, 0, 1151441010, 0, 0, 0, 11, 0, 0, 0, 82457, 0, 0, 0, 438492, 0, 0, 0, 1643450, 0, 0, 0, 996083, 0, 0, 0, 338363, 0, 0, 0, -50, 0, 0, 2, 1674427, 0, 0, 0, 1084305287, 0, 0, 0, 11, 0, 0, 0, 62041, 0, 0, 0, 1252435, 0, 0, 0, 534900, 0, 0, 0, 262187, 0, 0, 0, 959789, 0, 0, 0, -48, 0, 0, 2, 1695203, 0, 0, 0, 1018378217, 0, 0, 0, 11, 0, 0, 0, 1018097, 0, 0, 0, 1493480, 0, 0, 0, 262319, 0, 0, 0, 515917, 0, 0, 0, 1681211, 0, 0, 0, -46, 0, 0, 2, 1723933, 0, 0, 0, 929829291, 0, 0, 0, 11, 0, 0, 0, 650193, 0, 0, 0, 1191257, 0, 0, 0, 1105031, 0, 0, 0, 1588506, 0, 0, 0, 1362363, 0, 0, 0, -44, 0, 0, 2, 1752967, 0, 0, 0, 843292154, 0, 0, 0, 11, 0, 0, 0, 198146, 0, 0, 0, 635417, 0, 0, 0, 235074, 0, 0, 0, 886647, 0, 0, 0, 1450755, 0, 0, 0, -42, 0, 0, 2, 1860487, 0, 0, 0, 546345357, 0, 0, 0, 11, 0, 0, 0, 963300, 0, 0, 0, 1091445, 0, 0, 0, 1717982, 0, 0, 0, 966795, 0, 0, 0, 343475, 0, 0, 0, -40, 0, 0, 2, 1896113, 0, 0, 0, 455382105, 0, 0, 0, 11, 0, 0, 0, 271351, 0, 0, 0, 1505185, 0, 0, 0, 1234170, 0, 0, 0, 1785610, 0, 0, 0, 31429, 0, 0, 0, -38, 0, 0, 2, 1971191, 0, 0, 0, 274452539, 0, 0, 0, 11, 0, 0, 0, 1713298, 0, 0, 0, 815109, 0, 0, 0, 845285, 0, 0, 0, 928185, 0, 0, 0, 1136071, 0, 0, 0, -36, 0, 0, 2, 2030621, 0, 0, 0, 140719744, 0, 0, 0, 11, 0, 0, 0, 203881, 0, 0, 0, 650291, 0, 0, 0, 703660, 0, 0, 0, 1561431, 0, 0, 0, 1598299, 0, 0, 0, -34, 0, 0, 2, 2047757, 0, 0, 0, 103601115, 0, 0, 0, 11, 0, 0, 0, 820867, 0, 0, 0, 2047568, 0, 0, 0, 485669, 0, 0, 0, 35721, 0, 0, 0, 357624, 0, 0, 0, -32, 0, 0, 2, 2082233, 0, 0, 0, 30773029, 0, 0, 0, 11, 0, 0, 0, 1402850, 0, 0, 0, 1000511, 0, 0, 0, 222506, 0, 0, 0, 1239769, 0, 0, 0, 1923837, 0, 0, 0, -30, 0, 0, 2, 2108303, 0, 0, 0, -45432920, 0, 0, 0, 10, 0, 0, 0, 354085, 0, 0, 0, 1732724, 0, 0, 0, 646419, 0, 0, 0, 1464723, 0, 0, 0, 230364, 0, 0, 0, -28, 0, 0, 2, 2146189, 0, 0, 0, -196266323, 0, 0, 0, 10, 0, 0, 0, 443107, 0, 0, 0, 1858973, 0, 0, 0, 1587588, 0, 0, 0, 2110252, 0, 0, 0, 786121, 0, 0, 0, -26, 0, 0, 2, 2196323, 0, 0, 0, -387862989, 0, 0, 0, 10, 0, 0, 0, 1155831, 0, 0, 0, 1087289, 0, 0, 0, 1685820, 0, 0, 0, 158895, 0, 0, 0, 1433808, 0, 0, 0, -24, 0, 0, 2, 2214143, 0, 0, 0, -453875400, 0, 0, 0, 10, 0, 0, 0, 1744019, 0, 0, 0, 821116, 0, 0, 0, 637094, 0, 0, 0, 586383, 0, 0, 0, 1366866, 0, 0, 0, -22, 0, 0, 2, 2238007, 0, 0, 0, -540630676, 0, 0, 0, 10, 0, 0, 0, 231863, 0, 0, 0, 1284622, 0, 0, 0, 2197163, 0, 0, 0, 1033252, 0, 0, 0, 973147, 0, 0, 0, -20, 0, 0, 2, 2301253, 0, 0, 0, -761852018, 0, 0, 0, 10, 0, 0, 0, 829198, 0, 0, 0, 951864, 0, 0, 0, 2272385, 0, 0, 0, 345842, 0, 0, 0, 852121, 0, 0, 0, -18, 0, 0, 2, 2362333, 0, 0, 0, -964253323, 0, 0, 0, 10, 0, 0, 0, 245902, 0, 0, 0, 1518136, 0, 0, 0, 281681, 0, 0, 0, 2317702, 0, 0, 0, 546956, 0, 0, 0, -16, 0, 0, 2, 2405597, 0, 0, 0, -1101399102, 0, 0, 0, 10, 0, 0, 0, 976651, 0, 0, 0, 1503734, 0, 0, 0, 1535140, 0, 0, 0, 469099, 0, 0, 0, 58799, 0, 0, 0, -14, 0, 0, 2, 2442953, 0, 0, 0, -1215908768, 0, 0, 0, 10, 0, 0, 0, 255922, 0, 0, 0, 500154, 0, 0, 0, 1889553, 0, 0, 0, 522422, 0, 0, 0, 1351300, 0, 0, 0, -12, 0, 0, 2, 2480609, 0, 0, 0, -1327847537, 0, 0, 0, 10, 0, 0, 0, 1033117, 0, 0, 0, 1581868, 0, 0, 0, 2226657, 0, 0, 0, 1963110, 0, 0, 0, 1201560, 0, 0, 0, -10, 0, 0, 2, 2528051, 0, 0, 0, -1464129571, 0, 0, 0, 10, 0, 0, 0, 2336698, 0, 0, 0, 2207976, 0, 0, 0, 219898, 0, 0, 0, 1266901, 0, 0, 0, 2143592, 0, 0, 0, -8, 0, 0, 2, 2572807, 0, 0, 0, -1588088551, 0, 0, 0, 10, 0, 0, 0, 952413, 0, 0, 0, 1104193, 0, 0, 0, 42424, 0, 0, 0, 1807984, 0, 0, 0, 1186783, 0, 0, 0, -6, 0, 0, 2, 2595317, 0, 0, 0, -1648817762, 0, 0, 0, 10, 0, 0, 0, 2312978, 0, 0, 0, 149266, 0, 0, 0, 1739589, 0, 0, 0, 2137628, 0, 0, 0, 25824, 0, 0, 0, -4, 0, 0, 2, 2624399, 0, 0, 0, -1725735014, 0, 0, 0, 10, 0, 0, 0, 1450532, 0, 0, 0, 2043547, 0, 0, 0, 514893, 0, 0, 0, 1559262, 0, 0, 0, 2505603, 0, 0, 0, -2, 0, 0, 2, 2663399, 0, 0, 0, -1826247098, 0, 0, 0, 10, 0, 0, 0, 1568108, 0, 0, 0, 880106, 0, 0, 0, 2472820, 0, 0, 0, 893662, 0, 0, 0, 494050, 0, 0, 0, 0, 1, 0, 2, 2755591, 0, 0, 0, -2052535352, 0, 0, 0, 10, 0, 0, 0, 1756518, 0, 0, 0, 153763, 0, 0, 0, 980960, 0, 0, 0, 89389, 0, 0, 0, 2567913, 0, 0, 0, 2, 1, 0, 2, 2782223, 0, 0, 0, -2115112657, 0, 0, 0, 10, 0, 0, 0, 1997207, 0, 0, 0, 1636871, 0, 0, 0, 2549837, 0, 0, 0, 1930512, 0, 0, 0, 2406577, 0, 0, 0, 4, 1, 0, 2, 2873021, 0, 0, 0, 1975226520, 0, 0, 0, 10, 0, 0, 0, 2673922, 0, 0, 0, 1341064, 0, 0, 0, 2578320, 0, 0, 0, 1839537, 0, 0, 0, 2739917, 0, 0, 0, 6, 1, 0, 2, 2903591, 0, 0, 0, 1909211773, 0, 0, 0, 10, 0, 0, 0, 556207, 0, 0, 0, 220163, 0, 0, 0, 154907, 0, 0, 0, 2102006, 0, 0, 0, 2113546, 0, 0, 0, 8, 1, 0, 2, 2965283, 0, 0, 0, 1780135319, 0, 0, 0, 10, 0, 0, 0, 1237512, 0, 0, 0, 718379, 0, 0, 0, 1893799, 0, 0, 0, 2395453, 0, 0, 0, 2487270, 0, 0, 0, 10, 1, 0, 2, 3017153, 0, 0, 0, 1675693956, 0, 0, 0, 10, 0, 0, 0, 1558577, 0, 0, 0, 1093028, 0, 0, 0, 2254225, 0, 0, 0, 2101068, 0, 0, 0, 200227, 0, 0, 0, 12, 1, 0, 2, 3062491, 0, 0, 0, 1587302565, 0, 0, 0, 10, 0, 0, 0, 1354914, 0, 0, 0, 92392, 0, 0, 0, 832172, 0, 0, 0, 1119247, 0, 0, 0, 2198869, 0, 0, 0, 14, 1, 0, 2, 3125743, 0, 0, 0, 1468269959, 0, 0, 0, 10, 0, 0, 0, 196414, 0, 0, 0, 539290, 0, 0, 0, 2053019, 0, 0, 0, 2072408, 0, 0, 0, 62737, 0, 0, 0, 16, 1, 0, 2, 3186221, 0, 0, 0, 1358877339, 0, 0, 0, 10, 0, 0, 0, 3127609, 0, 0, 0, 620306, 0, 0, 0, 592559, 0, 0, 0, 1927013, 0, 0, 0, 2262273, 0, 0, 0, 18, 1, 0, 2, 3221989, 0, 0, 0, 1296112782, 0, 0, 0, 10, 0, 0, 0, 55959, 0, 0, 0, 2858362, 0, 0, 0, 1879231, 0, 0, 0, 610547, 0, 0, 0, 2850206, 0, 0, 0, 20, 1, 0, 2, 3301453, 0, 0, 0, 1161538827, 0, 0, 0, 10, 0, 0, 0, 3078396, 0, 0, 0, 1528539, 0, 0, 0, 2933399, 0, 0, 0, 3090780, 0, 0, 0, 2506812, 0, 0, 0, 22, 1, 0, 2, 3381857, 0, 0, 0, 1031809829, 0, 0, 0, 10, 0, 0, 0, 8906, 0, 0, 0, 1534125, 0, 0, 0, 214970, 0, 0, 0, 391758, 0, 0, 0, 2302181, 0, 0, 0, 24, 1, 0, 2, 3474487, 0, 0, 0, 889797680, 0, 0, 0, 10, 0, 0, 0, 501364, 0, 0, 0, 623994, 0, 0, 0, 1843849, 0, 0, 0, 126381, 0, 0, 0, 2138752, 0, 0, 0, 26, 1, 0, 2, 3504383, 0, 0, 0, 845566289, 0, 0, 0, 10, 0, 0, 0, 2098121, 0, 0, 0, 424382, 0, 0, 0, 640433, 0, 0, 0, 2830788, 0, 0, 0, 2309458, 0, 0, 0, 28, 1, 0, 2, 3526883, 0, 0, 0, 812771891, 0, 0, 0, 10, 0, 0, 0, 2750685, 0, 0, 0, 19846, 0, 0, 0, 999436, 0, 0, 0, 2379703, 0, 0, 0, 3143747, 0, 0, 0, 30, 1, 0, 2, 3590989, 0, 0, 0, 721589009, 0, 0, 0, 10, 0, 0, 0, 144452, 0, 0, 0, 2734214, 0, 0, 0, 573585, 0, 0, 0, 611223, 0, 0, 0, 738253, 0, 0, 0, 32, 1, 0, 2, 3648091, 0, 0, 0, 643067010, 0, 0, 0, 10, 0, 0, 0, 1164189, 0, 0, 0, 907492, 0, 0, 0, 1402297, 0, 0, 0, 3427269, 0, 0, 0, 2429412, 0, 0, 0, 34, 1, 0, 2, 3732623, 0, 0, 0, 531236290, 0, 0, 0, 10, 0, 0, 0, 2450846, 0, 0, 0, 938049, 0, 0, 0, 1550802, 0, 0, 0, 3647758, 0, 0, 0, 1905639, 0, 0, 0, 36, 1, 0, 2, 3802499, 0, 0, 0, 442548350, 0, 0, 0, 10, 0, 0, 0, 1945925, 0, 0, 0, 538950, 0, 0, 0, 437057, 0, 0, 0, 1808888, 0, 0, 0, 2267096, 0, 0, 0, 38, 1, 0, 2, 3904567, 0, 0, 0, 318706514, 0, 0, 0, 10, 0, 0, 0, 3848163, 0, 0, 0, 3093678, 0, 0, 0, 3189885, 0, 0, 0, 173820, 0, 0, 0, 224457, 0, 0, 0, 40, 1, 0, 2, 3960091, 0, 0, 0, 254018701, 0, 0, 0, 10, 0, 0, 0, 2228652, 0, 0, 0, 1041628, 0, 0, 0, 1180801, 0, 0, 0, 3158204, 0, 0, 0, 2600611, 0, 0, 0, 42, 1, 0, 2, 3992003, 0, 0, 0, 217654189, 0, 0, 0, 10, 0, 0, 0, 3564071, 0, 0, 0, 643005, 0, 0, 0, 2359127, 0, 0, 0, 3679315, 0, 0, 0, 1252659, 0, 0, 0, 44, 1, 0, 2, 4028033, 0, 0, 0, 177289636, 0, 0, 0, 10, 0, 0, 0, 1084118, 0, 0, 0, 285085, 0, 0, 0, 2864006, 0, 0, 0, 3863417, 0, 0, 0, 2861410, 0, 0, 0, 46, 1, 0, 2, 4088459, 0, 0, 0, 111191236, 0, 0, 0, 10, 0, 0, 0, 2085346, 0, 0, 0, 3055120, 0, 0, 0, 2027164, 0, 0, 0, 2563432, 0, 0, 0, 2967267, 0, 0, 0, 48, 1, 0, 2, 4137131, 0, 0, 0, 59354215, 0, 0, 0, 10, 0, 0, 0, 625318, 0, 0, 0, 1664659, 0, 0, 0, 1842783, 0, 0, 0, 2008302, 0, 0, 0, 1274986, 0, 0, 0, 50, 1, 0, 2, 4235339, 0, 0, 0, -83225444, 0, 0, 0, 9, 0, 0, 0, 333550, 0, 0, 0, 1717648, 0, 0, 0, 2948531, 0, 0, 0, 2916538, 0, 0, 0, 470329, 0, 0, 0, 52, 1, 0, 2, 4305589, 0, 0, 0, -222020930, 0, 0, 0, 9, 0, 0, 0, 2295063, 0, 0, 0, 2981395, 0, 0, 0, 4258195, 0, 0, 0, 4184674, 0, 0, 0, 585172, 0, 0, 0, 54, 1, 0, 2, 4347221, 0, 0, 0, -302157868, 0, 0, 0, 9, 0, 0, 0, 4260169, 0, 0, 0, 844501, 0, 0, 0, 353279, 0, 0, 0, 2945067, 0, 0, 0, 3385991, 0, 0, 0, 56, 1, 0, 2, 4384811, 0, 0, 0, -373207117, 0, 0, 0, 9, 0, 0, 0, 2237327, 0, 0, 0, 2024305, 0, 0, 0, 414134, 0, 0, 0, 3152219, 0, 0, 0, 1511780, 0, 0, 0, 58, 1, 0, 2, 4460543, 0, 0, 0, -512712376, 0, 0, 0, 9, 0, 0, 0, 3924930, 0, 0, 0, 1462724, 0, 0, 0, 243251, 0, 0, 0, 4063167, 0, 0, 0, 481700, 0, 0, 0, 60, 1, 0, 2, 4536899, 0, 0, 0, -648652007, 0, 0, 0, 9, 0, 0, 0, 3060842, 0, 0, 0, 2871176, 0, 0, 0, 2271545, 0, 0, 0, 1791299, 0, 0, 0, 4477066, 0, 0, 0, 62, 1, 0, 2, 4575317, 0, 0, 0, -715333331, 0, 0, 0, 9, 0, 0, 0, 3319950, 0, 0, 0, 1240624, 0, 0, 0, 4053109, 0, 0, 0, 2119942, 0, 0, 0, 1109408, 0, 0, 0, 64, 1, 0, 2, 4613879, 0, 0, 0, -781147882, 0, 0, 0, 9, 0, 0, 0, 4059826, 0, 0, 0, 4129181, 0, 0, 0, 2167678, 0, 0, 0, 2660282, 0, 0, 0, 3334636, 0, 0, 0, 66, 1, 0, 2, 4708819, 0, 0, 0, -938589952, 0, 0, 0, 9, 0, 0, 0, 524368, 0, 0, 0, 4440376, 0, 0, 0, 2516162, 0, 0, 0, 2587092, 0, 0, 0, 1048051, 0, 0, 0, 68, 1, 0, 2, 4862021, 0, 0, 0, -1179683378, 0, 0, 0, 9, 0, 0, 0, 1802753, 0, 0, 0, 2544e3, 0, 0, 0, 221309, 0, 0, 0, 2606480, 0, 0, 0, 2650263, 0, 0, 0, 70, 1, 0, 2, 4915073, 0, 0, 0, -1259667673, 0, 0, 0, 9, 0, 0, 0, 4108567, 0, 0, 0, 997362, 0, 0, 0, 2749716, 0, 0, 0, 3740085, 0, 0, 0, 3882455, 0, 0, 0, 72, 1, 0, 2, 5008643, 0, 0, 0, -1396609570, 0, 0, 0, 9, 0, 0, 0, 2560245, 0, 0, 0, 3296781, 0, 0, 0, 1887745, 0, 0, 0, 4643318, 0, 0, 0, 2506481, 0, 0, 0, 74, 1, 0, 2, 5048993, 0, 0, 0, -1454096413, 0, 0, 0, 9, 0, 0, 0, 3323246, 0, 0, 0, 3697029, 0, 0, 0, 3102815, 0, 0, 0, 505394, 0, 0, 0, 1067474, 0, 0, 0, 76, 1, 0, 2, 5143823, 0, 0, 0, -1585650616, 0, 0, 0, 9, 0, 0, 0, 5018914, 0, 0, 0, 1043122, 0, 0, 0, 2854515, 0, 0, 0, 4908579, 0, 0, 0, 2575820, 0, 0, 0, 78, 1, 0, 2, 5184713, 0, 0, 0, -1640890929, 0, 0, 0, 9, 0, 0, 0, 2024932, 0, 0, 0, 3774435, 0, 0, 0, 2130452, 0, 0, 0, 2206919, 0, 0, 0, 1228418, 0, 0, 0, 80, 1, 0, 2, 5244091, 0, 0, 0, -1719573834, 0, 0, 0, 9, 0, 0, 0, 56767, 0, 0, 0, 2620415, 0, 0, 0, 4457090, 0, 0, 0, 3969553, 0, 0, 0, 1024881, 0, 0, 0, 82, 1, 0, 2, 5303773, 0, 0, 0, -1796884245, 0, 0, 0, 9, 0, 0, 0, 4214939, 0, 0, 0, 1797093, 0, 0, 0, 924647, 0, 0, 0, 1618127, 0, 0, 0, 4570271, 0, 0, 0, 84, 1, 0, 2, 5391563, 0, 0, 0, -1907494451, 0, 0, 0, 9, 0, 0, 0, 3283148, 0, 0, 0, 28406, 0, 0, 0, 3236877, 0, 0, 0, 3557949, 0, 0, 0, 4404223, 0, 0, 0, 86, 1, 0, 2, 5475599, 0, 0, 0, -2010052278, 0, 0, 0, 9, 0, 0, 0, 2097680, 0, 0, 0, 4318812, 0, 0, 0, 2974279, 0, 0, 0, 1901754, 0, 0, 0, 1776874, 0, 0, 0, 88, 1, 0, 2, 5517797, 0, 0, 0, -2060372701, 0, 0, 0, 9, 0, 0, 0, 2121230, 0, 0, 0, 2239919, 0, 0, 0, 2865873, 0, 0, 0, 3634807, 0, 0, 0, 1121442, 0, 0, 0, 90, 1, 0, 2, 5588447, 0, 0, 0, -2142920419, 0, 0, 0, 9, 0, 0, 0, 304e4, 0, 0, 0, 1961441, 0, 0, 0, 2694599, 0, 0, 0, 1816718, 0, 0, 0, 853121, 0, 0, 0, 92, 1, 0, 2, 5659637, 0, 0, 0, 2070952818, 0, 0, 0, 9, 0, 0, 0, 4962450, 0, 0, 0, 3108498, 0, 0, 0, 783825, 0, 0, 0, 4969534, 0, 0, 0, 5098891, 0, 0, 0, 94, 1, 0, 2, 5692987, 0, 0, 0, 2033660719, 0, 0, 0, 9, 0, 0, 0, 2455098, 0, 0, 0, 4966471, 0, 0, 0, 1778402, 0, 0, 0, 208551, 0, 0, 0, 2971179, 0, 0, 0, 96, 1, 0, 2, 5740807, 0, 0, 0, 1980944264, 0, 0, 0, 9, 0, 0, 0, 843660, 0, 0, 0, 5462126, 0, 0, 0, 2738225, 0, 0, 0, 1462665, 0, 0, 0, 5489250, 0, 0, 0, 98, 1, 0, 2, 5827387, 0, 0, 0, 1887700341, 0, 0, 0, 9, 0, 0, 0, 183077, 0, 0, 0, 3885292, 0, 0, 0, 5091490, 0, 0, 0, 3372371, 0, 0, 0, 3567691, 0, 0, 0, 100, 1, 0, 2, 5904851, 0, 0, 0, 1806591747, 0, 0, 0, 9, 0, 0, 0, 2140619, 0, 0, 0, 2659247, 0, 0, 0, 4763767, 0, 0, 0, 4097919, 0, 0, 0, 1962089, 0, 0, 0, 102, 1, 0, 2, 5973127, 0, 0, 0, 1736847701, 0, 0, 0, 9, 0, 0, 0, 288983, 0, 0, 0, 885702, 0, 0, 0, 4329116, 0, 0, 0, 5317640, 0, 0, 0, 1176830, 0, 0, 0, 104, 1, 0, 2, 6066353, 0, 0, 0, 1644152471, 0, 0, 0, 9, 0, 0, 0, 6055725, 0, 0, 0, 3760030, 0, 0, 0, 3534724, 0, 0, 0, 1877457, 0, 0, 0, 4688374, 0, 0, 0, 106, 1, 0, 2, 6125621, 0, 0, 0, 1586688950, 0, 0, 0, 9, 0, 0, 0, 906975, 0, 0, 0, 132156, 0, 0, 0, 2161993, 0, 0, 0, 1062865, 0, 0, 0, 3006605, 0, 0, 0, 108, 1, 0, 2, 6310063, 0, 0, 0, 1414769202, 0, 0, 0, 9, 0, 0, 0, 4124456, 0, 0, 0, 2515874, 0, 0, 0, 3273942, 0, 0, 0, 4098639, 0, 0, 0, 3748447, 0, 0, 0, 110, 1, 0, 2, 6426209, 0, 0, 0, 1311572581, 0, 0, 0, 9, 0, 0, 0, 2259684, 0, 0, 0, 2501591, 0, 0, 0, 3262812, 0, 0, 0, 5961528, 0, 0, 0, 3903587, 0, 0, 0, 112, 1, 0, 2, 6482107, 0, 0, 0, 1263224973, 0, 0, 0, 9, 0, 0, 0, 3812462, 0, 0, 0, 5564809, 0, 0, 0, 4262001, 0, 0, 0, 6275348, 0, 0, 0, 2273184, 0, 0, 0, 114, 1, 0, 2, 6522907, 0, 0, 0, 1228459148, 0, 0, 0, 9, 0, 0, 0, 2894490, 0, 0, 0, 4948951, 0, 0, 0, 556477, 0, 0, 0, 2640406, 0, 0, 0, 6070227, 0, 0, 0, 116, 1, 0, 2, 6682189, 0, 0, 0, 1096798339, 0, 0, 0, 9, 0, 0, 0, 5001958, 0, 0, 0, 4818373, 0, 0, 0, 135701, 0, 0, 0, 626127, 0, 0, 0, 5840823, 0, 0, 0, 118, 1, 0, 2, 6765137, 0, 0, 0, 1030689378, 0, 0, 0, 9, 0, 0, 0, 5870438, 0, 0, 0, 1465076, 0, 0, 0, 4147859, 0, 0, 0, 5018416, 0, 0, 0, 2294157, 0, 0, 0, 120, 1, 0, 2, 6859157, 0, 0, 0, 957689410, 0, 0, 0, 9, 0, 0, 0, 1135014, 0, 0, 0, 4208241, 0, 0, 0, 4177639, 0, 0, 0, 5250259, 0, 0, 0, 5331852, 0, 0, 0, 122, 1, 0, 2, 6969551, 0, 0, 0, 874490107, 0, 0, 0, 9, 0, 0, 0, 1723880, 0, 0, 0, 1464408, 0, 0, 0, 1686677, 0, 0, 0, 1765070, 0, 0, 0, 2296020, 0, 0, 0, 124, 1, 0, 2, 7064963, 0, 0, 0, 804676823, 0, 0, 0, 9, 0, 0, 0, 6534755, 0, 0, 0, 5645494, 0, 0, 0, 4506051, 0, 0, 0, 119176, 0, 0, 0, 960464, 0, 0, 0, 126, 1, 0, 2, 7112873, 0, 0, 0, 770327278, 0, 0, 0, 9, 0, 0, 0, 5904877, 0, 0, 0, 5762828, 0, 0, 0, 2325507, 0, 0, 0, 4698759, 0, 0, 0, 4802782, 0, 0, 0, -128, 1, 0, 2, 7182391, 0, 0, 0, 721300548, 0, 0, 0, 9, 0, 0, 0, 7079869, 0, 0, 0, 2922451, 0, 0, 0, 5101534, 0, 0, 0, 2243872, 0, 0, 0, 5738546, 0, 0, 0, -126, 1, 0, 2, 7225343, 0, 0, 0, 691480685, 0, 0, 0, 9, 0, 0, 0, 3113554, 0, 0, 0, 4709188, 0, 0, 0, 2063025, 0, 0, 0, 2588507, 0, 0, 0, 5277272, 0, 0, 0, -124, 1, 0, 2, 7268407, 0, 0, 0, 661936881, 0, 0, 0, 9, 0, 0, 0, 6607166, 0, 0, 0, 1368589, 0, 0, 0, 391400, 0, 0, 0, 3709056, 0, 0, 0, 5943921, 0, 0, 0, -122, 1, 0, 2, 7338677, 0, 0, 0, 614473059, 0, 0, 0, 9, 0, 0, 0, 1841251, 0, 0, 0, 663373, 0, 0, 0, 1477097, 0, 0, 0, 7309501, 0, 0, 0, 6115141, 0, 0, 0, -120, 1, 0, 2, 7376647, 0, 0, 0, 589202573, 0, 0, 0, 9, 0, 0, 0, 1758742, 0, 0, 0, 5179171, 0, 0, 0, 1690989, 0, 0, 0, 111436, 0, 0, 0, 4416016, 0, 0, 0, -118, 1, 0, 2, 7452899, 0, 0, 0, 539231720, 0, 0, 0, 9, 0, 0, 0, 2097472, 0, 0, 0, 2134276, 0, 0, 0, 365922, 0, 0, 0, 4157265, 0, 0, 0, 4162060, 0, 0, 0, -116, 1, 0, 2, 7535009, 0, 0, 0, 486552808, 0, 0, 0, 9, 0, 0, 0, 12166, 0, 0, 0, 4846385, 0, 0, 0, 7209494, 0, 0, 0, 3199244, 0, 0, 0, 3681019, 0, 0, 0, -114, 1, 0, 2, 7617551, 0, 0, 0, 434741375, 0, 0, 0, 9, 0, 0, 0, 6286083, 0, 0, 0, 4860998, 0, 0, 0, 4157188, 0, 0, 0, 1143799, 0, 0, 0, 7116743, 0, 0, 0, -112, 1, 0, 2, 7745053, 0, 0, 0, 356879117, 0, 0, 0, 9, 0, 0, 0, 4207934, 0, 0, 0, 7105021, 0, 0, 0, 5846014, 0, 0, 0, 5107854, 0, 0, 0, 6816905, 0, 0, 0, -110, 1, 0, 2, 7806427, 0, 0, 0, 320306377, 0, 0, 0, 9, 0, 0, 0, 1432446, 0, 0, 0, 5625247, 0, 0, 0, 6163346, 0, 0, 0, 5127947, 0, 0, 0, 2844150, 0, 0, 0, -108, 1, 0, 2, 7851203, 0, 0, 0, 293985125, 0, 0, 0, 9, 0, 0, 0, 359255, 0, 0, 0, 6080111, 0, 0, 0, 3537066, 0, 0, 0, 7142686, 0, 0, 0, 5577628, 0, 0, 0, -106, 1, 0, 2, 7986227, 0, 0, 0, 216399212, 0, 0, 0, 9, 0, 0, 0, 6363397, 0, 0, 0, 7048472, 0, 0, 0, 1460665, 0, 0, 0, 5012601, 0, 0, 0, 3830603, 0, 0, 0, -104, 1, 0, 2, 8065591, 0, 0, 0, 172008157, 0, 0, 0, 9, 0, 0, 0, 4072884, 0, 0, 0, 4051621, 0, 0, 0, 2569696, 0, 0, 0, 1529844, 0, 0, 0, 6462821, 0, 0, 0, -102, 1, 0, 2, 8145307, 0, 0, 0, 128291031, 0, 0, 0, 9, 0, 0, 0, 2390507, 0, 0, 0, 4394445, 0, 0, 0, 6112864, 0, 0, 0, 517908, 0, 0, 0, 471277, 0, 0, 0, -100, 1, 0, 2, 8236819, 0, 0, 0, 79148126, 0, 0, 0, 9, 0, 0, 0, 3584597, 0, 0, 0, 5091056, 0, 0, 0, 3203498, 0, 0, 0, 3426922, 0, 0, 0, 6042042, 0, 0, 0, -98, 1, 0, 2, 8363639, 0, 0, 0, 12822294, 0, 0, 0, 9, 0, 0, 0, 4420489, 0, 0, 0, 475911, 0, 0, 0, 3040975, 0, 0, 0, 3935801, 0, 0, 0, 6087943, 0, 0, 0, -96, 1, 0, 2, 8444827, 0, 0, 0, -57185012, 0, 0, 0, 8, 0, 0, 0, 4995180, 0, 0, 0, 2678251, 0, 0, 0, 227818, 0, 0, 0, 810028, 0, 0, 0, 6590741, 0, 0, 0, -94, 1, 0, 2, 8538059, 0, 0, 0, -150359036, 0, 0, 0, 8, 0, 0, 0, 323619, 0, 0, 0, 1425467, 0, 0, 0, 5415362, 0, 0, 0, 582797, 0, 0, 0, 6997092, 0, 0, 0, -92, 1, 0, 2, 8678867, 0, 0, 0, -287284715, 0, 0, 0, 8, 0, 0, 0, 7606998, 0, 0, 0, 3418568, 0, 0, 0, 3978143, 0, 0, 0, 701971, 0, 0, 0, 2099633, 0, 0, 0, -90, 1, 0, 2, 8761591, 0, 0, 0, -365675547, 0, 0, 0, 8, 0, 0, 0, 1787706, 0, 0, 0, 6047685, 0, 0, 0, 3645477, 0, 0, 0, 3249733, 0, 0, 0, 1514946, 0, 0, 0, -88, 1, 0, 2, 8820899, 0, 0, 0, -420971992, 0, 0, 0, 8, 0, 0, 0, 8010382, 0, 0, 0, 1354264, 0, 0, 0, 1035274, 0, 0, 0, 7303414, 0, 0, 0, 5337680, 0, 0, 0, -86, 1, 0, 2, 8999999, 0, 0, 0, -583534365, 0, 0, 0, 8, 0, 0, 0, 1967773, 0, 0, 0, 7009765, 0, 0, 0, 2835970, 0, 0, 0, 5814870, 0, 0, 0, 6455881, 0, 0, 0, -84, 1, 0, 2, 9090209, 0, 0, 0, -662988794, 0, 0, 0, 8, 0, 0, 0, 4388648, 0, 0, 0, 5521212, 0, 0, 0, 3965783, 0, 0, 0, 2412878, 0, 0, 0, 5932963, 0, 0, 0, -82, 1, 0, 2, 9180851, 0, 0, 0, -741251062, 0, 0, 0, 8, 0, 0, 0, 7509879, 0, 0, 0, 2752707, 0, 0, 0, 1838306, 0, 0, 0, 7997552, 0, 0, 0, 7159311, 0, 0, 0, -80, 1, 0, 2, 9272009, 0, 0, 0, -818415600, 0, 0, 0, 8, 0, 0, 0, 2027129, 0, 0, 0, 8857949, 0, 0, 0, 4852994, 0, 0, 0, 6237190, 0, 0, 0, 8366849, 0, 0, 0, -78, 1, 0, 2, 9388087, 0, 0, 0, -914505718, 0, 0, 0, 8, 0, 0, 0, 4611537, 0, 0, 0, 3306489, 0, 0, 0, 6279498, 0, 0, 0, 955532, 0, 0, 0, 3553668, 0, 0, 0, -76, 1, 0, 2, 9492557, 0, 0, 0, -998977379, 0, 0, 0, 8, 0, 0, 0, 4331532, 0, 0, 0, 7153283, 0, 0, 0, 9423299, 0, 0, 0, 35615, 0, 0, 0, 3968373, 0, 0, 0, -74, 1, 0, 2, 9603701, 0, 0, 0, -1086827818, 0, 0, 0, 8, 0, 0, 0, 2112949, 0, 0, 0, 4163123, 0, 0, 0, 4667282, 0, 0, 0, 5199851, 0, 0, 0, 1878559, 0, 0, 0, -72, 1, 0, 2, 9734399, 0, 0, 0, -1187567581, 0, 0, 0, 8, 0, 0, 0, 2097337, 0, 0, 0, 3333853, 0, 0, 0, 4182160, 0, 0, 0, 4532192, 0, 0, 0, 427593, 0, 0, 0, -70, 1, 0, 2, 9922331, 0, 0, 0, -1327770688, 0, 0, 0, 8, 0, 0, 0, 8520304, 0, 0, 0, 6403643, 0, 0, 0, 1908355, 0, 0, 0, 1240896, 0, 0, 0, 1899017, 0, 0, 0, -68, 1, 0, 2, 10036223, 0, 0, 0, -1410182405, 0, 0, 0, 8, 0, 0, 0, 9500075, 0, 0, 0, 7214961, 0, 0, 0, 4629331, 0, 0, 0, 1572027, 0, 0, 0, 2875544, 0, 0, 0, -66, 1, 0, 2, 10137847, 0, 0, 0, -1482153814, 0, 0, 0, 8, 0, 0, 0, 6658015, 0, 0, 0, 8434145, 0, 0, 0, 4088158, 0, 0, 0, 3116693, 0, 0, 0, 2063494, 0, 0, 0, -64, 1, 0, 2, 10220773, 0, 0, 0, -1539822626, 0, 0, 0, 8, 0, 0, 0, 2242636, 0, 0, 0, 8912975, 0, 0, 0, 7482233, 0, 0, 0, 1675757, 0, 0, 0, 6288763, 0, 0, 0, -62, 1, 0, 2, 10323353, 0, 0, 0, -1609877431, 0, 0, 0, 8, 0, 0, 0, 452448, 0, 0, 0, 7426067, 0, 0, 0, 8754518, 0, 0, 0, 7170847, 0, 0, 0, 1679263, 0, 0, 0, -60, 1, 0, 2, 10400609, 0, 0, 0, -1661725481, 0, 0, 0, 8, 0, 0, 0, 9916388, 0, 0, 0, 9048154, 0, 0, 0, 2366261, 0, 0, 0, 223413, 0, 0, 0, 5868545, 0, 0, 0, -58, 1, 0, 2, 10575503, 0, 0, 0, -1776301800, 0, 0, 0, 8, 0, 0, 0, 1313078, 0, 0, 0, 7277982, 0, 0, 0, 4762646, 0, 0, 0, 7740368, 0, 0, 0, 3444021, 0, 0, 0, -56, 1, 0, 2, 10614563, 0, 0, 0, -1801374947, 0, 0, 0, 8, 0, 0, 0, 6683844, 0, 0, 0, 4568724, 0, 0, 0, 5553750, 0, 0, 0, 8671003, 0, 0, 0, 635339, 0, 0, 0, -54, 1, 0, 2, 10791029, 0, 0, 0, -1912388453, 0, 0, 0, 8, 0, 0, 0, 137754, 0, 0, 0, 5535534, 0, 0, 0, 4677380, 0, 0, 0, 6253959, 0, 0, 0, 6067871, 0, 0, 0, -52, 1, 0, 2, 10916407, 0, 0, 0, -1989081946, 0, 0, 0, 8, 0, 0, 0, 4819345, 0, 0, 0, 287208, 0, 0, 0, 8613195, 0, 0, 0, 4063972, 0, 0, 0, 602883, 0, 0, 0, -50, 1, 0, 2, 10995847, 0, 0, 0, -2036770108, 0, 0, 0, 8, 0, 0, 0, 6586966, 0, 0, 0, 4258348, 0, 0, 0, 1487846, 0, 0, 0, 1505229, 0, 0, 0, 2980396, 0, 0, 0, -48, 1, 0, 2, 11062267, 0, 0, 0, -2076116581, 0, 0, 0, 8, 0, 0, 0, 2807700, 0, 0, 0, 8704994, 0, 0, 0, 5757199, 0, 0, 0, 4410691, 0, 0, 0, 10019943, 0, 0, 0, -46, 1, 0, 2, 11135533, 0, 0, 0, -2118974106, 0, 0, 0, 8, 0, 0, 0, 7787091, 0, 0, 0, 7444588, 0, 0, 0, 10331244, 0, 0, 0, 8682754, 0, 0, 0, 9262767, 0, 0, 0, -44, 1, 0, 2, 11242573, 0, 0, 0, 2114383484, 0, 0, 0, 8, 0, 0, 0, 304410, 0, 0, 0, 4161434, 0, 0, 0, 2726019, 0, 0, 0, 1888087, 0, 0, 0, 9746764, 0, 0, 0, -42, 1, 0, 2, 11329931, 0, 0, 0, 2064964996, 0, 0, 0, 8, 0, 0, 0, 923447, 0, 0, 0, 7105094, 0, 0, 0, 3366987, 0, 0, 0, 6399583, 0, 0, 0, 6372863, 0, 0, 0, -40, 1, 0, 2, 11431097, 0, 0, 0, 2008679155, 0, 0, 0, 8, 0, 0, 0, 8305921, 0, 0, 0, 7185273, 0, 0, 0, 4213752, 0, 0, 0, 10003521, 0, 0, 0, 6267440, 0, 0, 0, -38, 1, 0, 2, 11553137, 0, 0, 0, 1942091438, 0, 0, 0, 8, 0, 0, 0, 8753469, 0, 0, 0, 7537670, 0, 0, 0, 9656914, 0, 0, 0, 1317957, 0, 0, 0, 10409921, 0, 0, 0, -36, 1, 0, 2, 11716829, 0, 0, 0, 1854955523, 0, 0, 0, 8, 0, 0, 0, 6607882, 0, 0, 0, 5538918, 0, 0, 0, 1661952, 0, 0, 0, 9786886, 0, 0, 0, 7126283, 0, 0, 0, -34, 1, 0, 2, 11923193, 0, 0, 0, 1748514012, 0, 0, 0, 8, 0, 0, 0, 2617816, 0, 0, 0, 10047562, 0, 0, 0, 9421048, 0, 0, 0, 5860739, 0, 0, 0, 808572, 0, 0, 0, -32, 1, 0, 2, 11985443, 0, 0, 0, 1717125376, 0, 0, 0, 8, 0, 0, 0, 4178702, 0, 0, 0, 6439876, 0, 0, 0, 6825202, 0, 0, 0, 8983105, 0, 0, 0, 6509404, 0, 0, 0, -30, 1, 0, 2, 12027023, 0, 0, 0, 1696340281, 0, 0, 0, 8, 0, 0, 0, 1320085, 0, 0, 0, 4990709, 0, 0, 0, 9458348, 0, 0, 0, 5473199, 0, 0, 0, 10185964, 0, 0, 0, -28, 1, 0, 2, 12215009, 0, 0, 0, 1604135523, 0, 0, 0, 8, 0, 0, 0, 7499137, 0, 0, 0, 9359399, 0, 0, 0, 10269690, 0, 0, 0, 548871, 0, 0, 0, 3886624, 0, 0, 0, -26, 1, 0, 2, 12348187, 0, 0, 0, 1540512360, 0, 0, 0, 8, 0, 0, 0, 10146407, 0, 0, 0, 11041322, 0, 0, 0, 5292212, 0, 0, 0, 6036068, 0, 0, 0, 555133, 0, 0, 0, -24, 1, 0, 2, 12446783, 0, 0, 0, 1494287167, 0, 0, 0, 8, 0, 0, 0, 827161, 0, 0, 0, 8105194, 0, 0, 0, 2519463, 0, 0, 0, 11763287, 0, 0, 0, 8989353, 0, 0, 0, -22, 1, 0, 2, 12503287, 0, 0, 0, 1468124764, 0, 0, 0, 8, 0, 0, 0, 6339855, 0, 0, 0, 7350040, 0, 0, 0, 106075, 0, 0, 0, 10827830, 0, 0, 0, 528828, 0, 0, 0, -20, 1, 0, 2, 12559927, 0, 0, 0, 1442135637, 0, 0, 0, 8, 0, 0, 0, 12032189, 0, 0, 0, 3575346, 0, 0, 0, 6766008, 0, 0, 0, 7236780, 0, 0, 0, 10879031, 0, 0, 0, -18, 1, 0, 2, 12659363, 0, 0, 0, 1397072187, 0, 0, 0, 8, 0, 0, 0, 3443239, 0, 0, 0, 8921368, 0, 0, 0, 2174384, 0, 0, 0, 11939857, 0, 0, 0, 6219166, 0, 0, 0, -16, 1, 0, 2, 12787751, 0, 0, 0, 1339924565, 0, 0, 0, 8, 0, 0, 0, 11070711, 0, 0, 0, 10368550, 0, 0, 0, 6939959, 0, 0, 0, 1841484, 0, 0, 0, 10412651, 0, 0, 0, -14, 1, 0, 2, 12873719, 0, 0, 0, 1302295937, 0, 0, 0, 8, 0, 0, 0, 8018869, 0, 0, 0, 3313168, 0, 0, 0, 5802560, 0, 0, 0, 9595337, 0, 0, 0, 3704901, 0, 0, 0, -12, 1, 0, 2, 13032091, 0, 0, 0, 1234275404, 0, 0, 0, 8, 0, 0, 0, 7409357, 0, 0, 0, 1633761, 0, 0, 0, 134507, 0, 0, 0, 7286956, 0, 0, 0, 5172385, 0, 0, 0, -10, 1, 0, 2, 13104391, 0, 0, 0, 1203769275, 0, 0, 0, 8, 0, 0, 0, 9831439, 0, 0, 0, 4162572, 0, 0, 0, 3124260, 0, 0, 0, 12952036, 0, 0, 0, 2315628, 0, 0, 0, -8, 1, 0, 2, 13205947, 0, 0, 0, 1161483047, 0, 0, 0, 8, 0, 0, 0, 3034521, 0, 0, 0, 8945546, 0, 0, 0, 2455457, 0, 0, 0, 10385022, 0, 0, 0, 4723210, 0, 0, 0, -6, 1, 0, 2, 13329737, 0, 0, 0, 1110810330, 0, 0, 0, 8, 0, 0, 0, 2791982, 0, 0, 0, 13269146, 0, 0, 0, 12040642, 0, 0, 0, 5591606, 0, 0, 0, 8626062, 0, 0, 0, -4, 1, 0, 2, 13483583, 0, 0, 0, 1049131081, 0, 0, 0, 8, 0, 0, 0, 7187902, 0, 0, 0, 264026, 0, 0, 0, 5673368, 0, 0, 0, 13088149, 0, 0, 0, 11940515, 0, 0, 0, -2, 1, 0, 2, 13571807, 0, 0, 0, 1014391585, 0, 0, 0, 8, 0, 0, 0, 6276284, 0, 0, 0, 5328980, 0, 0, 0, 7173011, 0, 0, 0, 12434811, 0, 0, 0, 604964, 0, 0, 0, 0, 2, 0, 2, 13682597, 0, 0, 0, 971400926, 0, 0, 0, 8, 0, 0, 0, 12314435, 0, 0, 0, 5893062, 0, 0, 0, 12029161, 0, 0, 0, 10860025, 0, 0, 0, 623175, 0, 0, 0, 2, 2, 0, 2, 13793771, 0, 0, 0, 928955446, 0, 0, 0, 8, 0, 0, 0, 5104515, 0, 0, 0, 12398042, 0, 0, 0, 4486378, 0, 0, 0, 6544424, 0, 0, 0, 11022285, 0, 0, 0, 4, 2, 0, 2, 13912891, 0, 0, 0, 884229036, 0, 0, 0, 8, 0, 0, 0, 9796868, 0, 0, 0, 1443175, 0, 0, 0, 9058098, 0, 0, 0, 8210816, 0, 0, 0, 7326460, 0, 0, 0, 6, 2, 0, 2, 14062379, 0, 0, 0, 829172370, 0, 0, 0, 8, 0, 0, 0, 5941701, 0, 0, 0, 11420595, 0, 0, 0, 3990417, 0, 0, 0, 4628746, 0, 0, 0, 446285, 0, 0, 0, 8, 2, 0, 2, 14197823, 0, 0, 0, 780289244, 0, 0, 0, 8, 0, 0, 0, 7224750, 0, 0, 0, 8304893, 0, 0, 0, 9021308, 0, 0, 0, 12533147, 0, 0, 0, 8547539, 0, 0, 0, 10, 2, 0, 2, 14333747, 0, 0, 0, 732161621, 0, 0, 0, 8, 0, 0, 0, 9176943, 0, 0, 0, 707654, 0, 0, 0, 10004661, 0, 0, 0, 10398524, 0, 0, 0, 13720825, 0, 0, 0, 12, 2, 0, 2, 14439991, 0, 0, 0, 695173905, 0, 0, 0, 8, 0, 0, 0, 6289969, 0, 0, 0, 11879791, 0, 0, 0, 409337, 0, 0, 0, 8885289, 0, 0, 0, 12199416, 0, 0, 0, 14, 2, 0, 2, 14607683, 0, 0, 0, 637888519, 0, 0, 0, 8, 0, 0, 0, 308494, 0, 0, 0, 14100974, 0, 0, 0, 129537, 0, 0, 0, 9374273, 0, 0, 0, 9363669, 0, 0, 0, 16, 2, 0, 2, 14745551, 0, 0, 0, 591767288, 0, 0, 0, 8, 0, 0, 0, 4011955, 0, 0, 0, 11308057, 0, 0, 0, 243e3, 0, 0, 0, 2960635, 0, 0, 0, 9676599, 0, 0, 0, 18, 2, 0, 2, 14837903, 0, 0, 0, 561351958, 0, 0, 0, 8, 0, 0, 0, 6813329, 0, 0, 0, 4197725, 0, 0, 0, 7982741, 0, 0, 0, 9926848, 0, 0, 0, 10007242, 0, 0, 0, 20, 2, 0, 2, 14976851, 0, 0, 0, 516297370, 0, 0, 0, 8, 0, 0, 0, 11587910, 0, 0, 0, 12773237, 0, 0, 0, 10618644, 0, 0, 0, 214968, 0, 0, 0, 5094305, 0, 0, 0, 22, 2, 0, 2, 15093209, 0, 0, 0, 479205912, 0, 0, 0, 8, 0, 0, 0, 8495940, 0, 0, 0, 3515659, 0, 0, 0, 1228238, 0, 0, 0, 14260972, 0, 0, 0, 4536405, 0, 0, 0, 24, 2, 0, 2, 15280277, 0, 0, 0, 420758344, 0, 0, 0, 8, 0, 0, 0, 1209459, 0, 0, 0, 10155471, 0, 0, 0, 2981495, 0, 0, 0, 3391975, 0, 0, 0, 5922565, 0, 0, 0, 26, 2, 0, 2, 15350723, 0, 0, 0, 399117408, 0, 0, 0, 8, 0, 0, 0, 12115579, 0, 0, 0, 3057890, 0, 0, 0, 12899021, 0, 0, 0, 13246772, 0, 0, 0, 12472852, 0, 0, 0, 28, 2, 0, 2, 15413467, 0, 0, 0, 380009076, 0, 0, 0, 8, 0, 0, 0, 10023470, 0, 0, 0, 9798526, 0, 0, 0, 3142540, 0, 0, 0, 9290996, 0, 0, 0, 6196790, 0, 0, 0, 30, 2, 0, 2, 15499933, 0, 0, 0, 353929833, 0, 0, 0, 8, 0, 0, 0, 1485855, 0, 0, 0, 1124304, 0, 0, 0, 941046, 0, 0, 0, 8948400, 0, 0, 0, 11855337, 0, 0, 0, 32, 2, 0, 2, 15657749, 0, 0, 0, 307073140, 0, 0, 0, 8, 0, 0, 0, 4744070, 0, 0, 0, 2276284, 0, 0, 0, 14305560, 0, 0, 0, 6549576, 0, 0, 0, 2797246, 0, 0, 0, 34, 2, 0, 2, 15959989, 0, 0, 0, 219922660, 0, 0, 0, 8, 0, 0, 0, 1730255, 0, 0, 0, 7628405, 0, 0, 0, 15390385, 0, 0, 0, 1071708, 0, 0, 0, 843586, 0, 0, 0, 36, 2, 0, 2, 16040021, 0, 0, 0, 197395528, 0, 0, 0, 8, 0, 0, 0, 12281689, 0, 0, 0, 8409351, 0, 0, 0, 12135721, 0, 0, 0, 3816485, 0, 0, 0, 10676020, 0, 0, 0, 38, 2, 0, 2, 16128247, 0, 0, 0, 172821053, 0, 0, 0, 8, 0, 0, 0, 4853594, 0, 0, 0, 5557720, 0, 0, 0, 4003758, 0, 0, 0, 13560892, 0, 0, 0, 10603788, 0, 0, 0, 40, 2, 0, 2, 16192567, 0, 0, 0, 155074135, 0, 0, 0, 8, 0, 0, 0, 3937041, 0, 0, 0, 5652632, 0, 0, 0, 863854, 0, 0, 0, 6613602, 0, 0, 0, 2066641, 0, 0, 0, 42, 2, 0, 2, 16402499, 0, 0, 0, 98119028, 0, 0, 0, 8, 0, 0, 0, 13915057, 0, 0, 0, 628085, 0, 0, 0, 13021180, 0, 0, 0, 10666275, 0, 0, 0, 7021407, 0, 0, 0, 44, 2, 0, 2, 16524161, 0, 0, 0, 65774168, 0, 0, 0, 8, 0, 0, 0, 15209597, 0, 0, 0, 14801038, 0, 0, 0, 6949331, 0, 0, 0, 9003844, 0, 0, 0, 11671157, 0, 0, 0, 46, 2, 0, 2, 16687189, 0, 0, 0, 23171249, 0, 0, 0, 8, 0, 0, 0, 6359723, 0, 0, 0, 1682309, 0, 0, 0, 11325868, 0, 0, 0, 16317081, 0, 0, 0, 10397122, 0, 0, 0, 48, 2, 0, 2, 16777207, 0, 0, 0, 2304, 0, 0, 0, 8, 0, 0, 0, 2304, 0, 0, 0, 5308416, 0, 0, 0, 6561, 0, 0, 0, 15116544, 0, 0, 0, 15812851, 0, 0, 0, 50, 2, 0, 2, 16966097, 0, 0, 0, -95630447, 0, 0, 0, 7, 0, 0, 0, 2544755, 0, 0, 0, 5412192, 0, 0, 0, 15328591, 0, 0, 0, 8469237, 0, 0, 0, 15352350, 0, 0, 0, 52, 2, 0, 2, 17065157, 0, 0, 0, -144938272, 0, 0, 0, 7, 0, 0, 0, 11612889, 0, 0, 0, 12957493, 0, 0, 0, 11847350, 0, 0, 0, 2595658, 0, 0, 0, 14038698, 0, 0, 0, 54, 2, 0, 2, 17189267, 0, 0, 0, -205912861, 0, 0, 0, 7, 0, 0, 0, 14839813, 0, 0, 0, 13543474, 0, 0, 0, 4929718, 0, 0, 0, 16809162, 0, 0, 0, 5224219, 0, 0, 0, 56, 2, 0, 2, 17288963, 0, 0, 0, -254258932, 0, 0, 0, 7, 0, 0, 0, 7304472, 0, 0, 0, 15374114, 0, 0, 0, 340865, 0, 0, 0, 3419761, 0, 0, 0, 5215754, 0, 0, 0, 58, 2, 0, 2, 17547577, 0, 0, 0, -377109080, 0, 0, 0, 7, 0, 0, 0, 13358508, 0, 0, 0, 2636104, 0, 0, 0, 9039540, 0, 0, 0, 10783469, 0, 0, 0, 14223162, 0, 0, 0, 60, 2, 0, 2, 17757787, 0, 0, 0, -474329417, 0, 0, 0, 7, 0, 0, 0, 15340629, 0, 0, 0, 3476011, 0, 0, 0, 11364525, 0, 0, 0, 5588303, 0, 0, 0, 4534416, 0, 0, 0, 62, 2, 0, 2, 17842151, 0, 0, 0, -512702869, 0, 0, 0, 7, 0, 0, 0, 12851056, 0, 0, 0, 14336486, 0, 0, 0, 5411364, 0, 0, 0, 13483425, 0, 0, 0, 5725727, 0, 0, 0, 64, 2, 0, 2, 17943671, 0, 0, 0, -558401464, 0, 0, 0, 7, 0, 0, 0, 6429927, 0, 0, 0, 2705242, 0, 0, 0, 3628289, 0, 0, 0, 8061214, 0, 0, 0, 14373557, 0, 0, 0, 66, 2, 0, 2, 18045479, 0, 0, 0, -603713330, 0, 0, 0, 7, 0, 0, 0, 143294, 0, 0, 0, 15460813, 0, 0, 0, 16326671, 0, 0, 0, 7869319, 0, 0, 0, 305034, 0, 0, 0, 68, 2, 0, 2, 18147599, 0, 0, 0, -648653320, 0, 0, 0, 7, 0, 0, 0, 12133932, 0, 0, 0, 304070, 0, 0, 0, 12645748, 0, 0, 0, 14695594, 0, 0, 0, 6727844, 0, 0, 0, 70, 2, 0, 2, 18249983, 0, 0, 0, -693204602, 0, 0, 0, 7, 0, 0, 0, 6221291, 0, 0, 0, 7260179, 0, 0, 0, 345137, 0, 0, 0, 14211985, 0, 0, 0, 15483640, 0, 0, 0, 72, 2, 0, 2, 18369787, 0, 0, 0, -744705463, 0, 0, 0, 7, 0, 0, 0, 14806925, 0, 0, 0, 3569369, 0, 0, 0, 13928578, 0, 0, 0, 10914524, 0, 0, 0, 4183251, 0, 0, 0, 74, 2, 0, 2, 18593119, 0, 0, 0, -838938750, 0, 0, 0, 7, 0, 0, 0, 18549926, 0, 0, 0, 6323349, 0, 0, 0, 8504753, 0, 0, 0, 17048873, 0, 0, 0, 7099625, 0, 0, 0, 76, 2, 0, 2, 18818243, 0, 0, 0, -931664473, 0, 0, 0, 7, 0, 0, 0, 4407892, 0, 0, 0, 14714538, 0, 0, 0, 8915516, 0, 0, 0, 5521054, 0, 0, 0, 6272736, 0, 0, 0, 78, 2, 0, 2, 18948593, 0, 0, 0, -984346775, 0, 0, 0, 7, 0, 0, 0, 12585278, 0, 0, 0, 17795514, 0, 0, 0, 17023867, 0, 0, 0, 6306617, 0, 0, 0, 7176229, 0, 0, 0, 80, 2, 0, 2, 19079399, 0, 0, 0, -1036489745, 0, 0, 0, 7, 0, 0, 0, 2102521, 0, 0, 0, 12283535, 0, 0, 0, 661562, 0, 0, 0, 2572505, 0, 0, 0, 3280191, 0, 0, 0, 82, 2, 0, 2, 19307227, 0, 0, 0, -1125621459, 0, 0, 0, 7, 0, 0, 0, 8762902, 0, 0, 0, 18538382, 0, 0, 0, 1395141, 0, 0, 0, 12572193, 0, 0, 0, 4428294, 0, 0, 0, 84, 2, 0, 2, 19492189, 0, 0, 0, -1196450563, 0, 0, 0, 7, 0, 0, 0, 6685716, 0, 0, 0, 12336660, 0, 0, 0, 676448, 0, 0, 0, 509366, 0, 0, 0, 15568055, 0, 0, 0, 86, 2, 0, 2, 19642543, 0, 0, 0, -1253044044, 0, 0, 0, 7, 0, 0, 0, 12892922, 0, 0, 0, 1527795, 0, 0, 0, 3221160, 0, 0, 0, 14534792, 0, 0, 0, 9776437, 0, 0, 0, 88, 2, 0, 2, 19793597, 0, 0, 0, -1309035215, 0, 0, 0, 7, 0, 0, 0, 19550344, 0, 0, 0, 8960576, 0, 0, 0, 3701509, 0, 0, 0, 7558753, 0, 0, 0, 17056209, 0, 0, 0, 90, 2, 0, 2, 19891591, 0, 0, 0, -1344903862, 0, 0, 0, 7, 0, 0, 0, 18275231, 0, 0, 0, 18304478, 0, 0, 0, 7043774, 0, 0, 0, 15723257, 0, 0, 0, 7773448, 0, 0, 0, 92, 2, 0, 2, 20088323, 0, 0, 0, -1415856992, 0, 0, 0, 7, 0, 0, 0, 16154497, 0, 0, 0, 7640195, 0, 0, 0, 6985349, 0, 0, 0, 11017917, 0, 0, 0, 17432681, 0, 0, 0, 94, 2, 0, 2, 20249951, 0, 0, 0, -1473117960, 0, 0, 0, 7, 0, 0, 0, 1977684, 0, 0, 0, 16718059, 0, 0, 0, 11299910, 0, 0, 0, 7784350, 0, 0, 0, 19947503, 0, 0, 0, 96, 2, 0, 2, 20385221, 0, 0, 0, -1520342947, 0, 0, 0, 7, 0, 0, 0, 14070886, 0, 0, 0, 4680176, 0, 0, 0, 11138088, 0, 0, 0, 5115150, 0, 0, 0, 1566791, 0, 0, 0, 98, 2, 0, 2, 20439437, 0, 0, 0, -1539095175, 0, 0, 0, 7, 0, 0, 0, 2685526, 0, 0, 0, 14990663, 0, 0, 0, 13976420, 0, 0, 0, 17843659, 0, 0, 0, 4195118, 0, 0, 0, 100, 2, 0, 2, 20684303, 0, 0, 0, -1622564792, 0, 0, 0, 7, 0, 0, 0, 13316575, 0, 0, 0, 6827753, 0, 0, 0, 4628633, 0, 0, 0, 11664821, 0, 0, 0, 9299706, 0, 0, 0, 102, 2, 0, 2, 20830087, 0, 0, 0, -1671327480, 0, 0, 0, 7, 0, 0, 0, 3969374, 0, 0, 0, 10484902, 0, 0, 0, 4395435, 0, 0, 0, 11177186, 0, 0, 0, 12598524, 0, 0, 0, 104, 2, 0, 2, 21040553, 0, 0, 0, -1740533435, 0, 0, 0, 7, 0, 0, 0, 2694484, 0, 0, 0, 11848629, 0, 0, 0, 16086780, 0, 0, 0, 12248432, 0, 0, 0, 2559832, 0, 0, 0, 106, 2, 0, 2, 21159991, 0, 0, 0, -1779195019, 0, 0, 0, 7, 0, 0, 0, 20649114, 0, 0, 0, 7980135, 0, 0, 0, 6877584, 0, 0, 0, 17024382, 0, 0, 0, 4737725, 0, 0, 0, 108, 2, 0, 2, 21427577, 0, 0, 0, -1864247032, 0, 0, 0, 7, 0, 0, 0, 9451896, 0, 0, 0, 19795061, 0, 0, 0, 12443750, 0, 0, 0, 10745727, 0, 0, 0, 7675620, 0, 0, 0, 110, 2, 0, 2, 21538877, 0, 0, 0, -1899001352, 0, 0, 0, 7, 0, 0, 0, 8730773, 0, 0, 0, 9930251, 0, 0, 0, 5758329, 0, 0, 0, 16691922, 0, 0, 0, 4723332, 0, 0, 0, 112, 2, 0, 2, 21622499, 0, 0, 0, -1924877604, 0, 0, 0, 7, 0, 0, 0, 13712494, 0, 0, 0, 18643685, 0, 0, 0, 7268788, 0, 0, 0, 21441970, 0, 0, 0, 13836186, 0, 0, 0, 114, 2, 0, 2, 21715591, 0, 0, 0, -1953449862, 0, 0, 0, 7, 0, 0, 0, 16995869, 0, 0, 0, 9371848, 0, 0, 0, 13552826, 0, 0, 0, 4108774, 0, 0, 0, 12309264, 0, 0, 0, 116, 2, 0, 2, 21864967, 0, 0, 0, -1998788671, 0, 0, 0, 7, 0, 0, 0, 9433764, 0, 0, 0, 21275946, 0, 0, 0, 12013435, 0, 0, 0, 14307052, 0, 0, 0, 15638042, 0, 0, 0, 118, 2, 0, 2, 22061773, 0, 0, 0, -2057586169, 0, 0, 0, 7, 0, 0, 0, 14983334, 0, 0, 0, 4572378, 0, 0, 0, 6148021, 0, 0, 0, 22009164, 0, 0, 0, 8930884, 0, 0, 0, 120, 2, 0, 2, 22297283, 0, 0, 0, -2126582619, 0, 0, 0, 7, 0, 0, 0, 13888960, 0, 0, 0, 5195174, 0, 0, 0, 17578513, 0, 0, 0, 19791077, 0, 0, 0, 5767502, 0, 0, 0, 122, 2, 0, 2, 22382357, 0, 0, 0, 2143817863, 0, 0, 0, 7, 0, 0, 0, 19937109, 0, 0, 0, 14932524, 0, 0, 0, 2234282, 0, 0, 0, 3075265, 0, 0, 0, 14890570, 0, 0, 0, 124, 2, 0, 2, 22610009, 0, 0, 0, 2078988064, 0, 0, 0, 7, 0, 0, 0, 21675595, 0, 0, 0, 21415852, 0, 0, 0, 10464839, 0, 0, 0, 20283028, 0, 0, 0, 4278622, 0, 0, 0, 126, 2, 0, 2, 22896221, 0, 0, 0, 1999311051, 0, 0, 0, 7, 0, 0, 0, 13373969, 0, 0, 0, 12190619, 0, 0, 0, 22891879, 0, 0, 0, 17939279, 0, 0, 0, 4395254, 0, 0, 0, -128, 2, 0, 2, 22953677, 0, 0, 0, 1983555664, 0, 0, 0, 7, 0, 0, 0, 2629697, 0, 0, 0, 6134665, 0, 0, 0, 6877365, 0, 0, 0, 370689, 0, 0, 0, 2996397, 0, 0, 0, -126, 2, 0, 2, 23039999, 0, 0, 0, 1960032457, 0, 0, 0, 7, 0, 0, 0, 9527482, 0, 0, 0, 17360120, 0, 0, 0, 22316582, 0, 0, 0, 4134859, 0, 0, 0, 13684881, 0, 0, 0, -124, 2, 0, 2, 23184221, 0, 0, 0, 1921122003, 0, 0, 0, 7, 0, 0, 0, 5886411, 0, 0, 0, 19254918, 0, 0, 0, 13836907, 0, 0, 0, 6011964, 0, 0, 0, 9218163, 0, 0, 0, -122, 2, 0, 2, 23483491, 0, 0, 0, 1841905116, 0, 0, 0, 7, 0, 0, 0, 20971934, 0, 0, 0, 18046739, 0, 0, 0, 1866004, 0, 0, 0, 1407151, 0, 0, 0, 8033938, 0, 0, 0, -120, 2, 0, 2, 23755867, 0, 0, 0, 1771542003, 0, 0, 0, 7, 0, 0, 0, 18911236, 0, 0, 0, 9268166, 0, 0, 0, 1120619, 0, 0, 0, 14006522, 0, 0, 0, 17862354, 0, 0, 0, -118, 2, 0, 2, 23970767, 0, 0, 0, 1717155222, 0, 0, 0, 7, 0, 0, 0, 4200003, 0, 0, 0, 9677010, 0, 0, 0, 4839549, 0, 0, 0, 12557929, 0, 0, 0, 5399114, 0, 0, 0, -116, 2, 0, 2, 24147371, 0, 0, 0, 1673185016, 0, 0, 0, 7, 0, 0, 0, 20882629, 0, 0, 0, 11504019, 0, 0, 0, 7781494, 0, 0, 0, 9439196, 0, 0, 0, 21326945, 0, 0, 0, -114, 2, 0, 2, 24324623, 0, 0, 0, 1629695465, 0, 0, 0, 7, 0, 0, 0, 13833648, 0, 0, 0, 5045937, 0, 0, 0, 2429897, 0, 0, 0, 21627441, 0, 0, 0, 13384486, 0, 0, 0, -112, 2, 0, 2, 24403591, 0, 0, 0, 1610523747, 0, 0, 0, 7, 0, 0, 0, 24338871, 0, 0, 0, 15664339, 0, 0, 0, 2360833, 0, 0, 0, 22175082, 0, 0, 0, 3879670, 0, 0, 0, -110, 2, 0, 2, 24542107, 0, 0, 0, 1577193072, 0, 0, 0, 7, 0, 0, 0, 98571, 0, 0, 0, 22109776, 0, 0, 0, 19086389, 0, 0, 0, 15611713, 0, 0, 0, 22969009, 0, 0, 0, -108, 2, 0, 2, 24681023, 0, 0, 0, 1544141888, 0, 0, 0, 7, 0, 0, 0, 469294, 0, 0, 0, 8090207, 0, 0, 0, 3835768, 0, 0, 0, 17176310, 0, 0, 0, 15837432, 0, 0, 0, -106, 2, 0, 2, 24800351, 0, 0, 0, 1516046752, 0, 0, 0, 7, 0, 0, 0, 4506573, 0, 0, 0, 19167972, 0, 0, 0, 10515366, 0, 0, 0, 1813428, 0, 0, 0, 9998969, 0, 0, 0, -104, 2, 0, 2, 24960007, 0, 0, 0, 1478876760, 0, 0, 0, 7, 0, 0, 0, 1846092, 0, 0, 0, 16316684, 0, 0, 0, 13911230, 0, 0, 0, 9290846, 0, 0, 0, 13423649, 0, 0, 0, -102, 2, 0, 2, 25060027, 0, 0, 0, 1455832097, 0, 0, 0, 7, 0, 0, 0, 9702679, 0, 0, 0, 3807248, 0, 0, 0, 20617232, 0, 0, 0, 16756272, 0, 0, 0, 19226111, 0, 0, 0, -100, 2, 0, 2, 25160231, 0, 0, 0, 1432928766, 0, 0, 0, 7, 0, 0, 0, 17728026, 0, 0, 0, 19416540, 0, 0, 0, 6920888, 0, 0, 0, 17217436, 0, 0, 0, 11966684, 0, 0, 0, -98, 2, 0, 2, 25310897, 0, 0, 0, 1398832812, 0, 0, 0, 7, 0, 0, 0, 17425703, 0, 0, 0, 15315342, 0, 0, 0, 22599520, 0, 0, 0, 23930590, 0, 0, 0, 24344691, 0, 0, 0, -96, 2, 0, 2, 25553009, 0, 0, 0, 1344884671, 0, 0, 0, 7, 0, 0, 0, 2061784, 0, 0, 0, 5791434, 0, 0, 0, 20382646, 0, 0, 0, 7034019, 0, 0, 0, 17571946, 0, 0, 0, -94, 2, 0, 2, 25796237, 0, 0, 0, 1291707538, 0, 0, 0, 7, 0, 0, 0, 12791954, 0, 0, 0, 17292669, 0, 0, 0, 11934884, 0, 0, 0, 24372785, 0, 0, 0, 5713508, 0, 0, 0, -92, 2, 0, 2, 25938613, 0, 0, 0, 1261042505, 0, 0, 0, 7, 0, 0, 0, 15096151, 0, 0, 0, 382844, 0, 0, 0, 10655075, 0, 0, 0, 16364886, 0, 0, 0, 21498468, 0, 0, 0, -90, 2, 0, 2, 26050807, 0, 0, 0, 1237114227, 0, 0, 0, 7, 0, 0, 0, 22634948, 0, 0, 0, 14405002, 0, 0, 0, 11906671, 0, 0, 0, 523677, 0, 0, 0, 23970726, 0, 0, 0, -88, 2, 0, 2, 26173447, 0, 0, 0, 1211192747, 0, 0, 0, 7, 0, 0, 0, 2521988, 0, 0, 0, 14116674, 0, 0, 0, 17574420, 0, 0, 0, 20942349, 0, 0, 0, 11924420, 0, 0, 0, -86, 2, 0, 2, 26522491, 0, 0, 0, 1138730016, 0, 0, 0, 7, 0, 0, 0, 24846245, 0, 0, 0, 7955976, 0, 0, 0, 25113470, 0, 0, 0, 11469125, 0, 0, 0, 17921510, 0, 0, 0, -84, 2, 0, 2, 26718557, 0, 0, 0, 1098856482, 0, 0, 0, 7, 0, 0, 0, 19998176, 0, 0, 0, 21708667, 0, 0, 0, 21988263, 0, 0, 0, 12863212, 0, 0, 0, 14728054, 0, 0, 0, -82, 2, 0, 2, 26873831, 0, 0, 0, 1067691570, 0, 0, 0, 7, 0, 0, 0, 22028167, 0, 0, 0, 14115097, 0, 0, 0, 26743819, 0, 0, 0, 18121666, 0, 0, 0, 1306333, 0, 0, 0, -80, 2, 0, 2, 27071173, 0, 0, 0, 1028599144, 0, 0, 0, 7, 0, 0, 0, 17721962, 0, 0, 0, 18086045, 0, 0, 0, 4448206, 0, 0, 0, 6778248, 0, 0, 0, 17109794, 0, 0, 0, -78, 2, 0, 2, 27342437, 0, 0, 0, 975784103, 0, 0, 0, 7, 0, 0, 0, 2204687, 0, 0, 0, 7084916, 0, 0, 0, 26188991, 0, 0, 0, 23294220, 0, 0, 0, 12207587, 0, 0, 0, -76, 2, 0, 2, 27405221, 0, 0, 0, 963709073, 0, 0, 0, 7, 0, 0, 0, 19752820, 0, 0, 0, 11478990, 0, 0, 0, 10695426, 0, 0, 0, 3898674, 0, 0, 0, 11136619, 0, 0, 0, -74, 2, 0, 2, 27741253, 0, 0, 0, 900010309, 0, 0, 0, 7, 0, 0, 0, 22814334, 0, 0, 0, 18996212, 0, 0, 0, 3491753, 0, 0, 0, 15142678, 0, 0, 0, 23044058, 0, 0, 0, -72, 2, 0, 2, 27878399, 0, 0, 0, 874453949, 0, 0, 0, 7, 0, 0, 0, 1693850, 0, 0, 0, 22389415, 0, 0, 0, 14153297, 0, 0, 0, 6836183, 0, 0, 0, 8279506, 0, 0, 0, -70, 2, 0, 2, 28089991, 0, 0, 0, 835514521, 0, 0, 0, 7, 0, 0, 0, 25288664, 0, 0, 0, 16445232, 0, 0, 0, 11696848, 0, 0, 0, 25574285, 0, 0, 0, 13929809, 0, 0, 0, -68, 2, 0, 2, 28259807, 0, 0, 0, 804684944, 0, 0, 0, 7, 0, 0, 0, 27736439, 0, 0, 0, 20013980, 0, 0, 0, 18598559, 0, 0, 0, 2075789, 0, 0, 0, 18482956, 0, 0, 0, -66, 2, 0, 2, 28515551, 0, 0, 0, 758948305, 0, 0, 0, 7, 0, 0, 0, 17634646, 0, 0, 0, 6719962, 0, 0, 0, 22593080, 0, 0, 0, 6860171, 0, 0, 0, 3762435, 0, 0, 0, -64, 2, 0, 2, 28793731, 0, 0, 0, 710121765, 0, 0, 0, 7, 0, 0, 0, 4701377, 0, 0, 0, 13968599, 0, 0, 0, 2557801, 0, 0, 0, 3326985, 0, 0, 0, 22617063, 0, 0, 0, -62, 2, 0, 2, 29052091, 0, 0, 0, 665611551, 0, 0, 0, 7, 0, 0, 0, 24309919, 0, 0, 0, 17509760, 0, 0, 0, 10626018, 0, 0, 0, 11027039, 0, 0, 0, 21294196, 0, 0, 0, -60, 2, 0, 2, 29192393, 0, 0, 0, 641770438, 0, 0, 0, 7, 0, 0, 0, 3685525, 0, 0, 0, 20024690, 0, 0, 0, 2522199, 0, 0, 0, 10536057, 0, 0, 0, 26885722, 0, 0, 0, -58, 2, 0, 2, 29322221, 0, 0, 0, 619912380, 0, 0, 0, 7, 0, 0, 0, 13923030, 0, 0, 0, 7272187, 0, 0, 0, 17120328, 0, 0, 0, 25633999, 0, 0, 0, 17706894, 0, 0, 0, -56, 2, 0, 2, 29430589, 0, 0, 0, 601815030, 0, 0, 0, 7, 0, 0, 0, 27531891, 0, 0, 0, 12956827, 0, 0, 0, 16125621, 0, 0, 0, 16896446, 0, 0, 0, 6770977, 0, 0, 0, -54, 2, 0, 2, 29582717, 0, 0, 0, 576633513, 0, 0, 0, 7, 0, 0, 0, 5473331, 0, 0, 0, 29290190, 0, 0, 0, 8294754, 0, 0, 0, 18828165, 0, 0, 0, 23693133, 0, 0, 0, -52, 2, 0, 2, 29658907, 0, 0, 0, 564118983, 0, 0, 0, 7, 0, 0, 0, 24084688, 0, 0, 0, 812667, 0, 0, 0, 28646386, 0, 0, 0, 12770720, 0, 0, 0, 14312301, 0, 0, 0, -50, 2, 0, 2, 29964667, 0, 0, 0, 514536780, 0, 0, 0, 7, 0, 0, 0, 10019915, 0, 0, 0, 12261702, 0, 0, 0, 24232596, 0, 0, 0, 1172286, 0, 0, 0, 26647023, 0, 0, 0, -48, 2, 0, 2, 30041357, 0, 0, 0, 502259010, 0, 0, 0, 7, 0, 0, 0, 29094602, 0, 0, 0, 1061216, 0, 0, 0, 21630785, 0, 0, 0, 19048797, 0, 0, 0, 3795933, 0, 0, 0, -46, 2, 0, 2, 30272003, 0, 0, 0, 465708371, 0, 0, 0, 7, 0, 0, 0, 26614873, 0, 0, 0, 5103458, 0, 0, 0, 12462092, 0, 0, 0, 8976639, 0, 0, 0, 10315307, 0, 0, 0, -44, 2, 0, 2, 30393133, 0, 0, 0, 446734985, 0, 0, 0, 7, 0, 0, 0, 9535543, 0, 0, 0, 21778276, 0, 0, 0, 10731507, 0, 0, 0, 15776202, 0, 0, 0, 11229428, 0, 0, 0, -42, 2, 0, 2, 30514567, 0, 0, 0, 427865181, 0, 0, 0, 7, 0, 0, 0, 22927916, 0, 0, 0, 25799927, 0, 0, 0, 7241116, 0, 0, 0, 12746089, 0, 0, 0, 15217422, 0, 0, 0, -40, 2, 0, 2, 30735767, 0, 0, 0, 393875773, 0, 0, 0, 7, 0, 0, 0, 22695683, 0, 0, 0, 8080695, 0, 0, 0, 12856589, 0, 0, 0, 17199564, 0, 0, 0, 23998053, 0, 0, 0, -38, 2, 0, 2, 30980347, 0, 0, 0, 356858846, 0, 0, 0, 7, 0, 0, 0, 19679410, 0, 0, 0, 25190153, 0, 0, 0, 4361627, 0, 0, 0, 3660829, 0, 0, 0, 16703210, 0, 0, 0, -36, 2, 0, 2, 31102913, 0, 0, 0, 338527581, 0, 0, 0, 7, 0, 0, 0, 2765302, 0, 0, 0, 26269763, 0, 0, 0, 20075191, 0, 0, 0, 24863371, 0, 0, 0, 29706327, 0, 0, 0, -34, 2, 0, 2, 31438193, 0, 0, 0, 289112586, 0, 0, 0, 7, 0, 0, 0, 19373048, 0, 0, 0, 24710599, 0, 0, 0, 6873834, 0, 0, 0, 23465298, 0, 0, 0, 22876270, 0, 0, 0, -32, 2, 0, 2, 31809599, 0, 0, 0, 235589284, 0, 0, 0, 7, 0, 0, 0, 671431, 0, 0, 0, 13950733, 0, 0, 0, 13800992, 0, 0, 0, 23194060, 0, 0, 0, 26469435, 0, 0, 0, -30, 2, 0, 2, 31911197, 0, 0, 0, 221165021, 0, 0, 0, 7, 0, 0, 0, 18866898, 0, 0, 0, 10966504, 0, 0, 0, 7947812, 0, 0, 0, 3180161, 0, 0, 0, 21499208, 0, 0, 0, -28, 2, 0, 2, 31979021, 0, 0, 0, 211586800, 0, 0, 0, 7, 0, 0, 0, 9778482, 0, 0, 0, 30357400, 0, 0, 0, 29656675, 0, 0, 0, 19770811, 0, 0, 0, 19592843, 0, 0, 0, -26, 2, 0, 2, 32080871, 0, 0, 0, 197279441, 0, 0, 0, 7, 0, 0, 0, 28211453, 0, 0, 0, 28596927, 0, 0, 0, 4498198, 0, 0, 0, 4090544, 0, 0, 0, 3469717, 0, 0, 0, -24, 2, 0, 2, 32330587, 0, 0, 0, 162582085, 0, 0, 0, 7, 0, 0, 0, 27329812, 0, 0, 0, 9225538, 0, 0, 0, 2600614, 0, 0, 0, 22467248, 0, 0, 0, 19626437, 0, 0, 0, -22, 2, 0, 2, 32455793, 0, 0, 0, 145386020, 0, 0, 0, 7, 0, 0, 0, 10802620, 0, 0, 0, 10064285, 0, 0, 0, 3844749, 0, 0, 0, 8698210, 0, 0, 0, 9424247, 0, 0, 0, -20, 2, 0, 2, 32649787, 0, 0, 0, 119002941, 0, 0, 0, 7, 0, 0, 0, 17845199, 0, 0, 0, 25904260, 0, 0, 0, 19973308, 0, 0, 0, 20053475, 0, 0, 0, 404729, 0, 0, 0, -18, 2, 0, 2, 32936117, 0, 0, 0, 80630108, 0, 0, 0, 7, 0, 0, 0, 13272086, 0, 0, 0, 17510453, 0, 0, 0, 32312428, 0, 0, 0, 15559771, 0, 0, 0, 12498211, 0, 0, 0, -16, 2, 0, 2, 33016507, 0, 0, 0, 69976217, 0, 0, 0, 7, 0, 0, 0, 2821386, 0, 0, 0, 5156310, 0, 0, 0, 9432278, 0, 0, 0, 59140, 0, 0, 0, 24358169, 0, 0, 0, -14, 2, 0, 2, 33419957, 0, 0, 0, 17282060, 0, 0, 0, 7, 0, 0, 0, 17212800, 0, 0, 0, 32551125, 0, 0, 0, 31688373, 0, 0, 0, 12475465, 0, 0, 0, 22805576, 0, 0, 0, -12, 2, 0, 2, 33593591, 0, 0, 0, -10013019, 0, 0, 0, 6, 0, 0, 0, 28581239, 0, 0, 0, 77143, 0, 0, 0, 27955665, 0, 0, 0, 4976842, 0, 0, 0, 9697259, 0, 0, 0, -10, 2, 0, 2, 33756091, 0, 0, 0, -51316298, 0, 0, 0, 6, 0, 0, 0, 7943739, 0, 0, 0, 27906541, 0, 0, 0, 19915601, 0, 0, 0, 2243349, 0, 0, 0, 29625100, 0, 0, 0, -8, 2, 0, 2, 33918967, 0, 0, 0, -92318019, 0, 0, 0, 6, 0, 0, 0, 21177454, 0, 0, 0, 5290871, 0, 0, 0, 7851908, 0, 0, 0, 26392508, 0, 0, 0, 24253740, 0, 0, 0, -6, 2, 0, 2, 34117277, 0, 0, 0, -141711244, 0, 0, 0, 6, 0, 0, 0, 30307671, 0, 0, 0, 17646760, 0, 0, 0, 4502738, 0, 0, 0, 31532494, 0, 0, 0, 8103204, 0, 0, 0, -4, 2, 0, 2, 34222499, 0, 0, 0, -167686523, 0, 0, 0, 6, 0, 0, 0, 17154921, 0, 0, 0, 33518092, 0, 0, 0, 20627550, 0, 0, 0, 31431147, 0, 0, 0, 32235069, 0, 0, 0, -2, 2, 0, 2, 34327877, 0, 0, 0, -193540718, 0, 0, 0, 6, 0, 0, 0, 3982671, 0, 0, 0, 26463990, 0, 0, 0, 4173912, 0, 0, 0, 9513825, 0, 0, 0, 10851515, 0, 0, 0, 0, 3, 0, 2, 34433423, 0, 0, 0, -219277509, 0, 0, 0, 6, 0, 0, 0, 25222844, 0, 0, 0, 4967182, 0, 0, 0, 33919032, 0, 0, 0, 6538127, 0, 0, 0, 24004130, 0, 0, 0, 2, 3, 0, 2, 34574399, 0, 0, 0, -253408594, 0, 0, 0, 6, 0, 0, 0, 7741820, 0, 0, 0, 19013930, 0, 0, 0, 18218155, 0, 0, 0, 14416667, 0, 0, 0, 33079686, 0, 0, 0, 4, 3, 0, 2, 34809991, 0, 0, 0, -309829718, 0, 0, 0, 6, 0, 0, 0, 13338403, 0, 0, 0, 839184, 0, 0, 0, 12917156, 0, 0, 0, 23667926, 0, 0, 0, 4633313, 0, 0, 0, 6, 3, 0, 2, 35105621, 0, 0, 0, -379557794, 0, 0, 0, 6, 0, 0, 0, 12081534, 0, 0, 0, 13891379, 0, 0, 0, 6225654, 0, 0, 0, 7516549, 0, 0, 0, 11269640, 0, 0, 0, 8, 3, 0, 2, 35354867, 0, 0, 0, -437439601, 0, 0, 0, 6, 0, 0, 0, 17028389, 0, 0, 0, 14361392, 0, 0, 0, 22130005, 0, 0, 0, 33979232, 0, 0, 0, 14196973, 0, 0, 0, 10, 3, 0, 2, 35808247, 0, 0, 0, -540661023, 0, 0, 0, 6, 0, 0, 0, 33785903, 0, 0, 0, 514984, 0, 0, 0, 8061499, 0, 0, 0, 12642974, 0, 0, 0, 6460330, 0, 0, 0, 12, 3, 0, 2, 36108077, 0, 0, 0, -607499633, 0, 0, 0, 6, 0, 0, 0, 34214210, 0, 0, 0, 8601048, 0, 0, 0, 15264009, 0, 0, 0, 15189166, 0, 0, 0, 33674822, 0, 0, 0, 14, 3, 0, 2, 36397073, 0, 0, 0, -670880878, 0, 0, 0, 6, 0, 0, 0, 112682, 0, 0, 0, 31051720, 0, 0, 0, 10094331, 0, 0, 0, 4477419, 0, 0, 0, 24698905, 0, 0, 0, 16, 3, 0, 2, 36542021, 0, 0, 0, -702292687, 0, 0, 0, 6, 0, 0, 0, 19550839, 0, 0, 0, 28846624, 0, 0, 0, 35371516, 0, 0, 0, 12763513, 0, 0, 0, 2115048, 0, 0, 0, 18, 3, 0, 2, 36723551, 0, 0, 0, -741282480, 0, 0, 0, 6, 0, 0, 0, 35035380, 0, 0, 0, 26873437, 0, 0, 0, 32567388, 0, 0, 0, 22364466, 0, 0, 0, 35892353, 0, 0, 0, 20, 3, 0, 2, 36917767, 0, 0, 0, -782572458, 0, 0, 0, 6, 0, 0, 0, 12506324, 0, 0, 0, 2501455, 0, 0, 0, 1698921, 0, 0, 0, 10952661, 0, 0, 0, 22599617, 0, 0, 0, 22, 3, 0, 2, 37088099, 0, 0, 0, -818428802, 0, 0, 0, 6, 0, 0, 0, 29835911, 0, 0, 0, 5564533, 0, 0, 0, 1840310, 0, 0, 0, 26679266, 0, 0, 0, 33622241, 0, 0, 0, 24, 3, 0, 2, 37295413, 0, 0, 0, -861628268, 0, 0, 0, 6, 0, 0, 0, 5994801, 0, 0, 0, 2835279, 0, 0, 0, 33750098, 0, 0, 0, 4508169, 0, 0, 0, 14430114, 0, 0, 0, 26, 3, 0, 2, 37527851, 0, 0, 0, -909495439, 0, 0, 0, 6, 0, 0, 0, 16792282, 0, 0, 0, 27499369, 0, 0, 0, 29798840, 0, 0, 0, 13663636, 0, 0, 0, 36596647, 0, 0, 0, 28, 3, 0, 2, 37675019, 0, 0, 0, -939497146, 0, 0, 0, 6, 0, 0, 0, 15130, 0, 0, 0, 2866786, 0, 0, 0, 10525311, 0, 0, 0, 33325136, 0, 0, 0, 4528403, 0, 0, 0, 30, 3, 0, 2, 37908613, 0, 0, 0, -986639369, 0, 0, 0, 6, 0, 0, 0, 11294027, 0, 0, 0, 31128490, 0, 0, 0, 13222710, 0, 0, 0, 36706227, 0, 0, 0, 32943503, 0, 0, 0, 32, 3, 0, 2, 38254081, 0, 0, 0, -1055303813, 0, 0, 0, 6, 0, 0, 0, 10510224, 0, 0, 0, 28989716, 0, 0, 0, 9262724, 0, 0, 0, 34304304, 0, 0, 0, 19902585, 0, 0, 0, 34, 3, 0, 2, 38452397, 0, 0, 0, -1094163233, 0, 0, 0, 6, 0, 0, 0, 26751229, 0, 0, 0, 36375912, 0, 0, 0, 37670517, 0, 0, 0, 7322424, 0, 0, 0, 24985666, 0, 0, 0, 36, 3, 0, 2, 38613787, 0, 0, 0, -1125492523, 0, 0, 0, 6, 0, 0, 0, 8836939, 0, 0, 0, 10633170, 0, 0, 0, 31919054, 0, 0, 0, 8196153, 0, 0, 0, 19861305, 0, 0, 0, 38, 3, 0, 2, 38750609, 0, 0, 0, -1151848235, 0, 0, 0, 6, 0, 0, 0, 32400306, 0, 0, 0, 23178042, 0, 0, 0, 11036244, 0, 0, 0, 5542070, 0, 0, 0, 21855116, 0, 0, 0, 40, 3, 0, 2, 39087479, 0, 0, 0, -1215952347, 0, 0, 0, 6, 0, 0, 0, 34432085, 0, 0, 0, 15164022, 0, 0, 0, 30725467, 0, 0, 0, 28444779, 0, 0, 0, 2317686, 0, 0, 0, 42, 3, 0, 2, 39262747, 0, 0, 0, -1248869635, 0, 0, 0, 6, 0, 0, 0, 15327873, 0, 0, 0, 6397528, 0, 0, 0, 19241829, 0, 0, 0, 13257550, 0, 0, 0, 2494335, 0, 0, 0, 44, 3, 0, 2, 39363067, 0, 0, 0, -1267578940, 0, 0, 0, 6, 0, 0, 0, 4392993, 0, 0, 0, 14092227, 0, 0, 0, 11196238, 0, 0, 0, 16319427, 0, 0, 0, 1272318, 0, 0, 0, 46, 3, 0, 2, 39601813, 0, 0, 0, -1311722957, 0, 0, 0, 6, 0, 0, 0, 17971492, 0, 0, 0, 37897540, 0, 0, 0, 30403388, 0, 0, 0, 30687670, 0, 0, 0, 12083097, 0, 0, 0, 48, 3, 0, 2, 39765611, 0, 0, 0, -1341702542, 0, 0, 0, 6, 0, 0, 0, 281308, 0, 0, 0, 624974, 0, 0, 0, 6419761, 0, 0, 0, 14669434, 0, 0, 0, 32389369, 0, 0, 0, 50, 3, 0, 2, 39942391, 0, 0, 0, -1373782306, 0, 0, 0, 6, 0, 0, 0, 21131459, 0, 0, 0, 3028766, 0, 0, 0, 35079661, 0, 0, 0, 14311350, 0, 0, 0, 6369423, 0, 0, 0, 52, 3, 0, 2, 40106873, 0, 0, 0, -1403376415, 0, 0, 0, 6, 0, 0, 0, 3531885, 0, 0, 0, 11585273, 0, 0, 0, 17957545, 0, 0, 0, 17638823, 0, 0, 0, 7792344, 0, 0, 0, 54, 3, 0, 2, 40297079, 0, 0, 0, -1437297645, 0, 0, 0, 6, 0, 0, 0, 23476922, 0, 0, 0, 29855607, 0, 0, 0, 35974614, 0, 0, 0, 26133178, 0, 0, 0, 7600164, 0, 0, 0, 56, 3, 0, 2, 40449599, 0, 0, 0, -1464267509, 0, 0, 0, 6, 0, 0, 0, 7309802, 0, 0, 0, 13092986, 0, 0, 0, 26698055, 0, 0, 0, 32392617, 0, 0, 0, 37052827, 0, 0, 0, 58, 3, 0, 2, 40576891, 0, 0, 0, -1486621129, 0, 0, 0, 6, 0, 0, 0, 34393741, 0, 0, 0, 106755, 0, 0, 0, 22684538, 0, 0, 0, 35100545, 0, 0, 0, 18422419, 0, 0, 0, 60, 3, 0, 2, 40755431, 0, 0, 0, -1517739082, 0, 0, 0, 6, 0, 0, 0, 15647041, 0, 0, 0, 35941967, 0, 0, 0, 16237717, 0, 0, 0, 13911227, 0, 0, 0, 39708906, 0, 0, 0, 62, 3, 0, 2, 41075137, 0, 0, 0, -1572785115, 0, 0, 0, 6, 0, 0, 0, 23153048, 0, 0, 0, 28355019, 0, 0, 0, 10097939, 0, 0, 0, 29569552, 0, 0, 0, 30004049, 0, 0, 0, 64, 3, 0, 2, 41447723, 0, 0, 0, -1635864374, 0, 0, 0, 6, 0, 0, 0, 25851827, 0, 0, 0, 30046447, 0, 0, 0, 20573085, 0, 0, 0, 40944285, 0, 0, 0, 179389, 0, 0, 0, 66, 3, 0, 2, 41731519, 0, 0, 0, -1683155662, 0, 0, 0, 6, 0, 0, 0, 38352358, 0, 0, 0, 25640584, 0, 0, 0, 27713599, 0, 0, 0, 29052524, 0, 0, 0, 33737541, 0, 0, 0, 68, 3, 0, 2, 41951513, 0, 0, 0, -1719374855, 0, 0, 0, 6, 0, 0, 0, 15912970, 0, 0, 0, 9534886, 0, 0, 0, 10471105, 0, 0, 0, 4277410, 0, 0, 0, 9116713, 0, 0, 0, 70, 3, 0, 2, 42327811, 0, 0, 0, -1780454741, 0, 0, 0, 6, 0, 0, 0, 19858385, 0, 0, 0, 22720147, 0, 0, 0, 40328752, 0, 0, 0, 27826288, 0, 0, 0, 12040035, 0, 0, 0, 72, 3, 0, 2, 42745363, 0, 0, 0, -1846972177, 0, 0, 0, 6, 0, 0, 0, 20430996, 0, 0, 0, 29711816, 0, 0, 0, 4772597, 0, 0, 0, 26191621, 0, 0, 0, 39833301, 0, 0, 0, 74, 3, 0, 2, 42928703, 0, 0, 0, -1875770036, 0, 0, 0, 6, 0, 0, 0, 2096996, 0, 0, 0, 33460914, 0, 0, 0, 8473814, 0, 0, 0, 33101251, 0, 0, 0, 10984473, 0, 0, 0, 76, 3, 0, 2, 43112347, 0, 0, 0, -1904370103, 0, 0, 0, 6, 0, 0, 0, 26844943, 0, 0, 0, 18430352, 0, 0, 0, 14166195, 0, 0, 0, 4065604, 0, 0, 0, 18042110, 0, 0, 0, 78, 3, 0, 2, 43217467, 0, 0, 0, -1920631735, 0, 0, 0, 6, 0, 0, 0, 16438063, 0, 0, 0, 6526392, 0, 0, 0, 17911510, 0, 0, 0, 40021408, 0, 0, 0, 35260031, 0, 0, 0, 80, 3, 0, 2, 43428019, 0, 0, 0, -1952966506, 0, 0, 0, 6, 0, 0, 0, 39021434, 0, 0, 0, 21226755, 0, 0, 0, 25397513, 0, 0, 0, 6824902, 0, 0, 0, 370096, 0, 0, 0, 82, 3, 0, 2, 43731733, 0, 0, 0, -1999059812, 0, 0, 0, 6, 0, 0, 0, 9257462, 0, 0, 0, 6570407, 0, 0, 0, 6454125, 0, 0, 0, 30597369, 0, 0, 0, 3906105, 0, 0, 0, 84, 3, 0, 2, 44155961, 0, 0, 0, -2062381582, 0, 0, 0, 6, 0, 0, 0, 11839079, 0, 0, 0, 10281512, 0, 0, 0, 43173734, 0, 0, 0, 30060222, 0, 0, 0, 42841164, 0, 0, 0, 86, 3, 0, 2, 44355599, 0, 0, 0, -2091761134, 0, 0, 0, 6, 0, 0, 0, 36829792, 0, 0, 0, 17926951, 0, 0, 0, 10996680, 0, 0, 0, 7071435, 0, 0, 0, 36213145, 0, 0, 0, 88, 3, 0, 2, 44568967, 0, 0, 0, -2122870275, 0, 0, 0, 6, 0, 0, 0, 16346464, 0, 0, 0, 17017077, 0, 0, 0, 29725156, 0, 0, 0, 18783007, 0, 0, 0, 367347, 0, 0, 0, 90, 3, 0, 2, 44756099, 0, 0, 0, 2145057250, 0, 0, 0, 6, 0, 0, 0, 43137891, 0, 0, 0, 7290972, 0, 0, 0, 25063610, 0, 0, 0, 21727316, 0, 0, 0, 658296, 0, 0, 0, 92, 3, 0, 2, 44916803, 0, 0, 0, 2122016035, 0, 0, 0, 6, 0, 0, 0, 27871011, 0, 0, 0, 41823986, 0, 0, 0, 34759722, 0, 0, 0, 34628609, 0, 0, 0, 34188234, 0, 0, 0, 94, 3, 0, 2, 45077771, 0, 0, 0, 2099101659, 0, 0, 0, 6, 0, 0, 0, 12579051, 0, 0, 0, 36440920, 0, 0, 0, 34245142, 0, 0, 0, 3889920, 0, 0, 0, 32423130, 0, 0, 0, 96, 3, 0, 2, 45360221, 0, 0, 0, 2059286933, 0, 0, 0, 6, 0, 0, 0, 31106522, 0, 0, 0, 4286032, 0, 0, 0, 16013747, 0, 0, 0, 42644223, 0, 0, 0, 19842605, 0, 0, 0, 98, 3, 0, 2, 45724643, 0, 0, 0, 2008644e3, 0, 0, 0, 6, 0, 0, 0, 42575497, 0, 0, 0, 39882975, 0, 0, 0, 6971267, 0, 0, 0, 6632393, 0, 0, 0, 2891020, 0, 0, 0, 100, 3, 0, 2, 45968399, 0, 0, 0, 1975217927, 0, 0, 0, 6, 0, 0, 0, 19906189, 0, 0, 0, 27127911, 0, 0, 0, 15972669, 0, 0, 0, 10250857, 0, 0, 0, 26893811, 0, 0, 0, 102, 3, 0, 2, 46131263, 0, 0, 0, 1953081367, 0, 0, 0, 6, 0, 0, 0, 4759837, 0, 0, 0, 16250746, 0, 0, 0, 30065574, 0, 0, 0, 26885676, 0, 0, 0, 36513139, 0, 0, 0, 104, 3, 0, 2, 46416869, 0, 0, 0, 1914636719, 0, 0, 0, 6, 0, 0, 0, 24615348, 0, 0, 0, 39447498, 0, 0, 0, 6137062, 0, 0, 0, 35074233, 0, 0, 0, 11848214, 0, 0, 0, 106, 3, 0, 2, 46621583, 0, 0, 0, 1887370531, 0, 0, 0, 6, 0, 0, 0, 5781660, 0, 0, 0, 10587766, 0, 0, 0, 25368815, 0, 0, 0, 31735750, 0, 0, 0, 15642710, 0, 0, 0, 108, 3, 0, 2, 46744553, 0, 0, 0, 1871106773, 0, 0, 0, 6, 0, 0, 0, 41212973, 0, 0, 0, 581789, 0, 0, 0, 9843771, 0, 0, 0, 1132248, 0, 0, 0, 42030971, 0, 0, 0, 110, 3, 0, 2, 47059591, 0, 0, 0, 1829828309, 0, 0, 0, 6, 0, 0, 0, 12544515, 0, 0, 0, 31379957, 0, 0, 0, 15628687, 0, 0, 0, 42330570, 0, 0, 0, 45544785, 0, 0, 0, 112, 3, 0, 2, 47196899, 0, 0, 0, 1812009693, 0, 0, 0, 6, 0, 0, 0, 49487, 0, 0, 0, 41921320, 0, 0, 0, 20667295, 0, 0, 0, 5626335, 0, 0, 0, 15932944, 0, 0, 0, 114, 3, 0, 2, 47485817, 0, 0, 0, 1774853007, 0, 0, 0, 6, 0, 0, 0, 21243766, 0, 0, 0, 34311293, 0, 0, 0, 9341465, 0, 0, 0, 13704124, 0, 0, 0, 16967776, 0, 0, 0, 116, 3, 0, 2, 47734277, 0, 0, 0, 1743259200, 0, 0, 0, 6, 0, 0, 0, 46616643, 0, 0, 0, 42931697, 0, 0, 0, 45918455, 0, 0, 0, 1618493, 0, 0, 0, 7621353, 0, 0, 0, 118, 3, 0, 2, 48052399, 0, 0, 0, 1703284240, 0, 0, 0, 6, 0, 0, 0, 18303785, 0, 0, 0, 11638375, 0, 0, 0, 34083383, 0, 0, 0, 36557859, 0, 0, 0, 44048079, 0, 0, 0, 120, 3, 0, 2, 48358091, 0, 0, 0, 1665366749, 0, 0, 0, 6, 0, 0, 0, 39455288, 0, 0, 0, 22945989, 0, 0, 0, 9764687, 0, 0, 0, 13682584, 0, 0, 0, 4332774, 0, 0, 0, 122, 3, 0, 2, 48497287, 0, 0, 0, 1648259510, 0, 0, 0, 6, 0, 0, 0, 27206040, 0, 0, 0, 11455806, 0, 0, 0, 28822045, 0, 0, 0, 38088017, 0, 0, 0, 41717e3, 0, 0, 0, 124, 3, 0, 2, 48636667, 0, 0, 0, 1631227773, 0, 0, 0, 6, 0, 0, 0, 14940600, 0, 0, 0, 43323476, 0, 0, 0, 25952783, 0, 0, 0, 12522339, 0, 0, 0, 7474496, 0, 0, 0, 126, 3, 0, 2, 48818153, 0, 0, 0, 1609196594, 0, 0, 0, 6, 0, 0, 0, 47787985, 0, 0, 0, 37098310, 0, 0, 0, 43350735, 0, 0, 0, 13482002, 0, 0, 0, 37492164, 0, 0, 0, -128, 3, 0, 2, 48985997, 0, 0, 0, 1588966762, 0, 0, 0, 6, 0, 0, 0, 33185557, 0, 0, 0, 3558902, 0, 0, 0, 33089345, 0, 0, 0, 13047281, 0, 0, 0, 36129151, 0, 0, 0, -126, 3, 0, 2, 49224247, 0, 0, 0, 1560487966, 0, 0, 0, 6, 0, 0, 0, 12457807, 0, 0, 0, 41974064, 0, 0, 0, 42618878, 0, 0, 0, 7665352, 0, 0, 0, 11798968, 0, 0, 0, -124, 3, 0, 2, 49463053, 0, 0, 0, 1532218020, 0, 0, 0, 6, 0, 0, 0, 41144738, 0, 0, 0, 4966995, 0, 0, 0, 3251058, 0, 0, 0, 6143844, 0, 0, 0, 33233065, 0, 0, 0, -122, 3, 0, 2, 49702451, 0, 0, 0, 1504150662, 0, 0, 0, 6, 0, 0, 0, 20556510, 0, 0, 0, 14085453, 0, 0, 0, 13747057, 0, 0, 0, 28626155, 0, 0, 0, 32723667, 0, 0, 0, -120, 3, 0, 2, 50041451, 0, 0, 0, 1464865210, 0, 0, 0, 6, 0, 0, 0, 41443961, 0, 0, 0, 6530588, 0, 0, 0, 43163684, 0, 0, 0, 2389229, 0, 0, 0, 42702878, 0, 0, 0, -118, 3, 0, 2, 50495227, 0, 0, 0, 1413104402, 0, 0, 0, 6, 0, 0, 0, 2873001, 0, 0, 0, 33454900, 0, 0, 0, 13398118, 0, 0, 0, 42393883, 0, 0, 0, 50024809, 0, 0, 0, -116, 3, 0, 2, 50751367, 0, 0, 0, 1384296006, 0, 0, 0, 6, 0, 0, 0, 31852468, 0, 0, 0, 4747964, 0, 0, 0, 17592283, 0, 0, 0, 13940300, 0, 0, 0, 13028606, 0, 0, 0, -114, 3, 0, 2, 50979479, 0, 0, 0, 1358883661, 0, 0, 0, 6, 0, 0, 0, 12691060, 0, 0, 0, 18334849, 0, 0, 0, 24960979, 0, 0, 0, 50528077, 0, 0, 0, 49086505, 0, 0, 0, -112, 3, 0, 2, 51380143, 0, 0, 0, 1314794750, 0, 0, 0, 6, 0, 0, 0, 30415427, 0, 0, 0, 9380904, 0, 0, 0, 42078551, 0, 0, 0, 19933966, 0, 0, 0, 13853442, 0, 0, 0, -110, 3, 0, 2, 51696091, 0, 0, 0, 1280509893, 0, 0, 0, 6, 0, 0, 0, 4191743, 0, 0, 0, 35184605, 0, 0, 0, 9780795, 0, 0, 0, 11782406, 0, 0, 0, 26807170, 0, 0, 0, -108, 3, 0, 2, 51969677, 0, 0, 0, 1251158691, 0, 0, 0, 6, 0, 0, 0, 33453782, 0, 0, 0, 21207141, 0, 0, 0, 15380754, 0, 0, 0, 50998439, 0, 0, 0, 13647315, 0, 0, 0, -106, 3, 0, 2, 52070647, 0, 0, 0, 1240404218, 0, 0, 0, 6, 0, 0, 0, 25174242, 0, 0, 0, 40424671, 0, 0, 0, 4789255, 0, 0, 0, 30327794, 0, 0, 0, 28887464, 0, 0, 0, -104, 3, 0, 2, 52316273, 0, 0, 0, 1214415533, 0, 0, 0, 6, 0, 0, 0, 5032910, 0, 0, 0, 3904598, 0, 0, 0, 33325736, 0, 0, 0, 34212763, 0, 0, 0, 4431151, 0, 0, 0, -102, 3, 0, 2, 52490021, 0, 0, 0, 1196178843, 0, 0, 0, 6, 0, 0, 0, 43275595, 0, 0, 0, 45610779, 0, 0, 0, 4734967, 0, 0, 0, 17361384, 0, 0, 0, 13616662, 0, 0, 0, -100, 3, 0, 2, 52823599, 0, 0, 0, 1161502569, 0, 0, 0, 6, 0, 0, 0, 16255777, 0, 0, 0, 20581833, 0, 0, 0, 51565432, 0, 0, 0, 22998056, 0, 0, 0, 12916065, 0, 0, 0, -98, 3, 0, 2, 53319179, 0, 0, 0, 1110786910, 0, 0, 0, 6, 0, 0, 0, 29432976, 0, 0, 0, 21203174, 0, 0, 0, 47031589, 0, 0, 0, 13630057, 0, 0, 0, 10997885, 0, 0, 0, -96, 3, 0, 2, 53509189, 0, 0, 0, 1091591191, 0, 0, 0, 6, 0, 0, 0, 14232176, 0, 0, 0, 25961407, 0, 0, 0, 49502330, 0, 0, 0, 25497786, 0, 0, 0, 38947002, 0, 0, 0, -94, 3, 0, 2, 53758223, 0, 0, 0, 1066638056, 0, 0, 0, 6, 0, 0, 0, 48067679, 0, 0, 0, 3985649, 0, 0, 0, 29522421, 0, 0, 0, 4329370, 0, 0, 0, 9233829, 0, 0, 0, -92, 3, 0, 2, 54022499, 0, 0, 0, 1040409287, 0, 0, 0, 6, 0, 0, 0, 27189875, 0, 0, 0, 47300465, 0, 0, 0, 31401006, 0, 0, 0, 26393580, 0, 0, 0, 22936560, 0, 0, 0, -90, 3, 0, 2, 54479017, 0, 0, 0, 995700414, 0, 0, 0, 6, 0, 0, 0, 45603970, 0, 0, 0, 42725405, 0, 0, 0, 52160980, 0, 0, 0, 48528114, 0, 0, 0, 24223842, 0, 0, 0, -88, 3, 0, 2, 54967387, 0, 0, 0, 948694298, 0, 0, 0, 6, 0, 0, 0, 7511110, 0, 0, 0, 6371684, 0, 0, 0, 19537337, 0, 0, 0, 49598913, 0, 0, 0, 51846255, 0, 0, 0, -86, 3, 0, 2, 55383283, 0, 0, 0, 909317472, 0, 0, 0, 6, 0, 0, 0, 30454505, 0, 0, 0, 6052846, 0, 0, 0, 38832822, 0, 0, 0, 16862688, 0, 0, 0, 1394960, 0, 0, 0, -84, 3, 0, 2, 55621763, 0, 0, 0, 887003943, 0, 0, 0, 6, 0, 0, 0, 12091545, 0, 0, 0, 41026930, 0, 0, 0, 35436554, 0, 0, 0, 46713089, 0, 0, 0, 32265568, 0, 0, 0, -82, 3, 0, 2, 55935437, 0, 0, 0, 857944553, 0, 0, 0, 6, 0, 0, 0, 43874084, 0, 0, 0, 22866253, 0, 0, 0, 1352867, 0, 0, 0, 23297152, 0, 0, 0, 17535375, 0, 0, 0, -80, 3, 0, 2, 56070143, 0, 0, 0, 845564914, 0, 0, 0, 6, 0, 0, 0, 33636428, 0, 0, 0, 38739118, 0, 0, 0, 44863281, 0, 0, 0, 35708205, 0, 0, 0, 46913123, 0, 0, 0, -78, 3, 0, 2, 56294993, 0, 0, 0, 825032917, 0, 0, 0, 6, 0, 0, 0, 16547828, 0, 0, 0, 56207040, 0, 0, 0, 19632938, 0, 0, 0, 23316168, 0, 0, 0, 16819368, 0, 0, 0, -76, 3, 0, 2, 56550391, 0, 0, 0, 801909508, 0, 0, 0, 6, 0, 0, 0, 53687971, 0, 0, 0, 31755583, 0, 0, 0, 38493938, 0, 0, 0, 17535554, 0, 0, 0, 6570920, 0, 0, 0, -74, 3, 0, 2, 56746073, 0, 0, 0, 784333542, 0, 0, 0, 6, 0, 0, 0, 39011821, 0, 0, 0, 47103750, 0, 0, 0, 31870247, 0, 0, 0, 37943085, 0, 0, 0, 35521149, 0, 0, 0, -72, 3, 0, 2, 56911927, 0, 0, 0, 769531331, 0, 0, 0, 6, 0, 0, 0, 26572771, 0, 0, 0, 18400960, 0, 0, 0, 41158887, 0, 0, 0, 38800253, 0, 0, 0, 52404656, 0, 0, 0, -70, 3, 0, 2, 57062891, 0, 0, 0, 756132834, 0, 0, 0, 6, 0, 0, 0, 15250471, 0, 0, 0, 48709823, 0, 0, 0, 3705410, 0, 0, 0, 37979483, 0, 0, 0, 55135212, 0, 0, 0, -68, 3, 0, 2, 57259453, 0, 0, 0, 738793263, 0, 0, 0, 6, 0, 0, 0, 508321, 0, 0, 0, 35587105, 0, 0, 0, 37371133, 0, 0, 0, 21051507, 0, 0, 0, 47475295, 0, 0, 0, -66, 3, 0, 2, 57456391, 0, 0, 0, 721539503, 0, 0, 0, 6, 0, 0, 0, 43194362, 0, 0, 0, 22013980, 0, 0, 0, 49794679, 0, 0, 0, 17571201, 0, 0, 0, 12369297, 0, 0, 0, -64, 3, 0, 2, 57608099, 0, 0, 0, 708328788, 0, 0, 0, 6, 0, 0, 0, 31967970, 0, 0, 0, 20793412, 0, 0, 0, 23001350, 0, 0, 0, 32393242, 0, 0, 0, 52832044, 0, 0, 0, -62, 3, 0, 2, 57836021, 0, 0, 0, 688611642, 0, 0, 0, 6, 0, 0, 0, 15101742, 0, 0, 0, 27594062, 0, 0, 0, 41627434, 0, 0, 0, 46719221, 0, 0, 0, 1803982, 0, 0, 0, -60, 3, 0, 2, 58216819, 0, 0, 0, 656013899, 0, 0, 0, 6, 0, 0, 0, 45139509, 0, 0, 0, 55846270, 0, 0, 0, 6242509, 0, 0, 0, 7673788, 0, 0, 0, 17970988, 0, 0, 0, -58, 3, 0, 2, 58461307, 0, 0, 0, 635308658, 0, 0, 0, 6, 0, 0, 0, 27291885, 0, 0, 0, 9717047, 0, 0, 0, 22313477, 0, 0, 0, 28541895, 0, 0, 0, 43186047, 0, 0, 0, -56, 3, 0, 2, 58844237, 0, 0, 0, 603224792, 0, 0, 0, 6, 0, 0, 0, 58182232, 0, 0, 0, 37587086, 0, 0, 0, 35190390, 0, 0, 0, 42763639, 0, 0, 0, 43051794, 0, 0, 0, -54, 3, 0, 2, 59043847, 0, 0, 0, 586665436, 0, 0, 0, 6, 0, 0, 0, 43810312, 0, 0, 0, 25337502, 0, 0, 0, 807267, 0, 0, 0, 4266621, 0, 0, 0, 41661600, 0, 0, 0, -52, 3, 0, 2, 59213009, 0, 0, 0, 572719400, 0, 0, 0, 6, 0, 0, 0, 31630648, 0, 0, 0, 16373603, 0, 0, 0, 23932082, 0, 0, 0, 42410903, 0, 0, 0, 6268074, 0, 0, 0, -50, 3, 0, 2, 59444051, 0, 0, 0, 553800096, 0, 0, 0, 6, 0, 0, 0, 14995624, 0, 0, 0, 38051363, 0, 0, 0, 11134104, 0, 0, 0, 12799207, 0, 0, 0, 35462133, 0, 0, 0, -48, 3, 0, 2, 59675621, 0, 0, 0, 534984555, 0, 0, 0, 6, 0, 0, 0, 57998205, 0, 0, 0, 18906906, 0, 0, 0, 41172417, 0, 0, 0, 41256280, 0, 0, 0, 23556969, 0, 0, 0, -46, 3, 0, 2, 60015973, 0, 0, 0, 507593784, 0, 0, 0, 6, 0, 0, 0, 33833213, 0, 0, 0, 28443098, 0, 0, 0, 15207241, 0, 0, 0, 29267120, 0, 0, 0, 47096264, 0, 0, 0, -44, 3, 0, 2, 60186563, 0, 0, 0, 493981628, 0, 0, 0, 6, 0, 0, 0, 21721323, 0, 0, 0, 44096343, 0, 0, 0, 37930857, 0, 0, 0, 30695128, 0, 0, 0, 49713223, 0, 0, 0, -42, 3, 0, 2, 60699677, 0, 0, 0, 453499094, 0, 0, 0, 6, 0, 0, 0, 45989906, 0, 0, 0, 10277001, 0, 0, 0, 32192698, 0, 0, 0, 39970125, 0, 0, 0, 10954397, 0, 0, 0, -40, 3, 0, 2, 61152391, 0, 0, 0, 418345976, 0, 0, 0, 6, 0, 0, 0, 14299926, 0, 0, 0, 36426230, 0, 0, 0, 57216831, 0, 0, 0, 22906785, 0, 0, 0, 40758379, 0, 0, 0, -38, 3, 0, 2, 61387189, 0, 0, 0, 400318167, 0, 0, 0, 6, 0, 0, 0, 59251255, 0, 0, 0, 40940254, 0, 0, 0, 1920130, 0, 0, 0, 7145670, 0, 0, 0, 17295290, 0, 0, 0, -36, 3, 0, 2, 61779551, 0, 0, 0, 370498403, 0, 0, 0, 6, 0, 0, 0, 32178277, 0, 0, 0, 49686367, 0, 0, 0, 14408995, 0, 0, 0, 51894248, 0, 0, 0, 16735093, 0, 0, 0, -34, 3, 0, 2, 62015621, 0, 0, 0, 352738741, 0, 0, 0, 6, 0, 0, 0, 15889447, 0, 0, 0, 2625385, 0, 0, 0, 54080888, 0, 0, 0, 44233422, 0, 0, 0, 268526, 0, 0, 0, -32, 3, 0, 2, 62110157, 0, 0, 0, 345664608, 0, 0, 0, 6, 0, 0, 0, 9366463, 0, 0, 0, 32367869, 0, 0, 0, 38478162, 0, 0, 0, 32843072, 0, 0, 0, 9614060, 0, 0, 0, -30, 3, 0, 2, 62473207, 0, 0, 0, 318696544, 0, 0, 0, 6, 0, 0, 0, 46789220, 0, 0, 0, 7805360, 0, 0, 0, 20586909, 0, 0, 0, 23156028, 0, 0, 0, 25682642, 0, 0, 0, -28, 3, 0, 2, 62773913, 0, 0, 0, 296595701, 0, 0, 0, 6, 0, 0, 0, 26341212, 0, 0, 0, 54874740, 0, 0, 0, 11203426, 0, 0, 0, 41205407, 0, 0, 0, 46319833, 0, 0, 0, -26, 3, 0, 2, 62964221, 0, 0, 0, 282717801, 0, 0, 0, 6, 0, 0, 0, 13400268, 0, 0, 0, 24315692, 0, 0, 0, 30977285, 0, 0, 0, 15946785, 0, 0, 0, 8333309, 0, 0, 0, -24, 3, 0, 2, 63202499, 0, 0, 0, 265459597, 0, 0, 0, 6, 0, 0, 0, 60399863, 0, 0, 0, 25175275, 0, 0, 0, 52176233, 0, 0, 0, 961122, 0, 0, 0, 15389788, 0, 0, 0, -22, 3, 0, 2 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);

___gmpz_fac_ui_table = allocate([ 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 120, 0, 0, 0, 720, 0, 0, 0, 5040, 0, 0, 0, 40320, 0, 0, 0, 362880, 0, 0, 0, 3628800, 0, 0, 0, 39916800, 0, 0, 0, 479001600, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str458 = allocate([ 112, 112, 114, 105, 109, 101, 95, 112, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1459 = allocate([ 95, 95, 103, 109, 112, 110, 95, 109, 111, 100, 95, 49, 32, 40, 40, 40, 110, 41, 45, 62, 95, 109, 112, 95, 100, 41, 44, 32, 40, 109, 112, 95, 115, 105, 122, 101, 95, 116, 41, 32, 40, 40, 110, 41, 45, 62, 95, 109, 112, 95, 115, 105, 122, 101, 41, 44, 32, 40, 109, 112, 95, 108, 105, 109, 98, 95, 116, 41, 32, 112, 114, 105, 109, 101, 115, 91, 110, 112, 114, 105, 109, 101, 115, 93, 41, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str460 = allocate([ 103, 109, 112, 58, 32, 111, 118, 101, 114, 102, 108, 111, 119, 32, 105, 110, 32, 109, 112, 122, 32, 116, 121, 112, 101, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___gmp_nextprime_addtab = allocate([ 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str488 = allocate([ 101, 37, 99, 37, 48, 50, 108, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1489 = allocate([ 112, 37, 99, 37, 108, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2490 = allocate([ 80, 37, 99, 37, 108, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3491 = allocate([ 100, 111, 112, 114, 110, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6 = allocate([ 69, 37, 99, 37, 48, 50, 108, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7 = allocate([ 108, 111, 110, 103, 32, 100, 111, 117, 98, 108, 101, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str494 = allocate([ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1495 = allocate([ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str501 = allocate([ 48, 120, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1502 = allocate([ 48, 88, 0 ], "i8", ALLOC_STATIC);

___gmp_fprintf_funs = allocate([ 14, 0, 0, 0, 16, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

___gmp_snprintf_funs = allocate([ 20, 0, 0, 0, 22, 0, 0, 0, 24, 0, 0, 0, 26, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

___gmp_sprintf_funs = allocate([ 28, 0, 0, 0, 30, 0, 0, 0, 32, 0, 0, 0, 34, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

___gmp_asprintf_funs = allocate([ 36, 0, 0, 0, 38, 0, 0, 0, 40, 0, 0, 0, 42, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

___gmp_rand_lc_scheme = allocate([ 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str518 = allocate([ 50, 57, 67, 70, 53, 51, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1519 = allocate([ 53, 49, 70, 54, 54, 54, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2520 = allocate([ 65, 51, 68, 55, 51, 65, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3521 = allocate([ 49, 52, 55, 69, 53, 66, 56, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4522 = allocate([ 50, 56, 70, 55, 50, 53, 67, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5523 = allocate([ 53, 49, 69, 69, 51, 49, 48, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6524 = allocate([ 65, 51, 68, 68, 53, 67, 68, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7525 = allocate([ 49, 52, 55, 65, 70, 56, 51, 51, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str8 = allocate([ 50, 56, 70, 53, 68, 65, 49, 55, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9 = allocate([ 65, 65, 55, 68, 55, 51, 53, 50, 51, 52, 67, 48, 68, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10 = allocate([ 66, 65, 69, 67, 68, 53, 49, 53, 68, 65, 70, 48, 66, 52, 57, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11 = allocate([ 50, 57, 50, 55, 56, 55, 69, 66, 68, 51, 51, 50, 57, 65, 68, 55, 69, 55, 53, 55, 53, 69, 50, 70, 68, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12526 = allocate([ 52, 56, 65, 55, 52, 70, 51, 54, 55, 70, 65, 55, 66, 53, 67, 56, 65, 67, 66, 66, 51, 54, 57, 48, 49, 51, 48, 56, 70, 65, 56, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13 = allocate([ 55, 56, 65, 55, 70, 68, 68, 68, 67, 52, 51, 54, 49, 49, 66, 53, 50, 55, 67, 51, 70, 49, 68, 55, 54, 48, 70, 51, 54, 69, 53, 68, 55, 70, 67, 55, 67, 52, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14 = allocate([ 52, 49, 66, 65, 50, 69, 49, 48, 52, 69, 69, 51, 52, 67, 54, 54, 66, 51, 53, 50, 48, 67, 69, 55, 48, 54, 65, 53, 54, 52, 57, 56, 68, 69, 54, 68, 52, 52, 55, 50, 49, 69, 53, 69, 50, 52, 70, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15 = allocate([ 52, 69, 53, 65, 50, 52, 67, 51, 56, 66, 57, 56, 49, 69, 65, 70, 69, 56, 52, 67, 68, 57, 68, 48, 66, 69, 67, 52, 56, 69, 56, 51, 57, 49, 49, 51, 54, 50, 67, 49, 49, 52, 70, 51, 48, 48, 55, 50, 67, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16 = allocate([ 65, 70, 54, 54, 66, 65, 57, 51, 50, 65, 65, 70, 53, 56, 65, 48, 55, 49, 70, 68, 56, 70, 48, 55, 52, 50, 65, 57, 57, 65, 48, 67, 55, 54, 57, 56, 50, 68, 54, 52, 56, 53, 48, 57, 57, 55, 51, 68, 66, 56, 48, 50, 51, 48, 51, 49, 50, 56, 65, 49, 52, 67, 66, 53, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str529 = allocate([ 114, 97, 110, 100, 108, 99, 50, 120, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1530 = allocate([ 109, 50, 101, 120, 112, 32, 33, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

_Linear_Congruential_Generator = allocate([ 44, 0, 0, 0, 46, 0, 0, 0, 48, 0, 0, 0, 50, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

_Mersenne_Twister_Generator_Noseed = allocate([ 0, 0, 0, 0, 52, 0, 0, 0, 54, 0, 0, 0, 56, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

_default_state = allocate([ -767053261, 0, 0, 0, -1638225679, 0, 0, 0, 268081179, 0, 0, 0, -1647638144, 0, 0, 0, 1948258091, 0, 0, 0, -1518940092, 0, 0, 0, -370124065, 0, 0, 0, 356040693, 0, 0, 0, 1501662143, 0, 0, 0, -811706152, 0, 0, 0, 167567410, 0, 0, 0, 1780246079, 0, 0, 0, 1360455562, 0, 0, 0, 1773396218, 0, 0, 0, 1838339685, 0, 0, 0, -794247528, 0, 0, 0, -160843980, 0, 0, 0, 1101798248, 0, 0, 0, 1661215729, 0, 0, 0, 1267559306, 0, 0, 0, -1027314217, 0, 0, 0, 1451259005, 0, 0, 0, 1131429519, 0, 0, 0, 996213714, 0, 0, 0, 1239804735, 0, 0, 0, -874859327, 0, 0, 0, -1667723741, 0, 0, 0, 1954278923, 0, 0, 0, -1861098711, 0, 0, 0, -1627186342, 0, 0, 0, -322276935, 0, 0, 0, 721309432, 0, 0, 0, -2078160915, 0, 0, 0, -1400262671, 0, 0, 0, -1361506829, 0, 0, 0, 769085185, 0, 0, 0, 345008659, 0, 0, 0, 1971797929, 0, 0, 0, -8128393, 0, 0, 0, 1344839881, 0, 0, 0, 297059357, 0, 0, 0, 2091834308, 0, 0, 0, -2039295833, 0, 0, 0, 1218953481, 0, 0, 0, -2094996065, 0, 0, 0, -1140114081, 0, 0, 0, 1973618822, 0, 0, 0, -102706904, 0, 0, 0, 1102017920, 0, 0, 0, 597408077, 0, 0, 0, -965067647, 0, 0, 0, 1961803118, 0, 0, 0, -1140673220, 0, 0, 0, 1920902217, 0, 0, 0, 1804216326, 0, 0, 0, 1481879770, 0, 0, 0, -1109380364, 0, 0, 0, -836548475, 0, 0, 0, 839737669, 0, 0, 0, 1221330239, 0, 0, 0, 14402770, 0, 0, 0, -715512937, 0, 0, 0, -519726225, 0, 0, 0, 473826769, 0, 0, 0, 157645924, 0, 0, 0, -797133215, 0, 0, 0, 1855467060, 0, 0, 0, 1842468727, 0, 0, 0, -303230863, 0, 0, 0, -677511835, 0, 0, 0, -132719154, 0, 0, 0, -1225068060, 0, 0, 0, 477565044, 0, 0, 0, 823670205, 0, 0, 0, 418992887, 0, 0, 0, -118226096, 0, 0, 0, 1322177364, 0, 0, 0, 2089468203, 0, 0, 0, 833198413, 0, 0, 0, 1339324231, 0, 0, 0, -601720285, 0, 0, 0, 1845165535, 0, 0, 0, 1737942856, 0, 0, 0, 208626511, 0, 0, 0, -107808227, 0, 0, 0, 1291219145, 0, 0, 0, 108920113, 0, 0, 0, -1482432091, 0, 0, 0, -1932011041, 0, 0, 0, -1758672076, 0, 0, 0, 1741168982, 0, 0, 0, -716638552, 0, 0, 0, 73198625, 0, 0, 0, -215741445, 0, 0, 0, -554281305, 0, 0, 0, 1138624709, 0, 0, 0, -623773393, 0, 0, 0, 925287787, 0, 0, 0, 336195994, 0, 0, 0, -1808805561, 0, 0, 0, -1188662116, 0, 0, 0, -1378078280, 0, 0, 0, 1406195817, 0, 0, 0, -776318210, 0, 0, 0, 1730338700, 0, 0, 0, 584669812, 0, 0, 0, 2109846826, 0, 0, 0, 502034389, 0, 0, 0, 1919059789, 0, 0, 0, 175267273, 0, 0, 0, -425191107, 0, 0, 0, -1605205158, 0, 0, 0, -593831640, 0, 0, 0, -442582128, 0, 0, 0, 1893444095, 0, 0, 0, -703433571, 0, 0, 0, 1515873164, 0, 0, 0, 1619455031, 0, 0, 0, 710383369, 0, 0, 0, 340388410, 0, 0, 0, -1131529210, 0, 0, 0, 797967974, 0, 0, 0, -68726831, 0, 0, 0, 1798682897, 0, 0, 0, -130854904, 0, 0, 0, -283207779, 0, 0, 0, 1938469533, 0, 0, 0, -1562636324, 0, 0, 0, 1989554269, 0, 0, 0, -180183636, 0, 0, 0, -1941864133, 0, 0, 0, -2139889618, 0, 0, 0, -1091027763, 0, 0, 0, 2068883802, 0, 0, 0, 99506274, 0, 0, 0, 8560334, 0, 0, 0, -1935567476, 0, 0, 0, -1102142750, 0, 0, 0, 1116978035, 0, 0, 0, 1701804835, 0, 0, 0, 1098061528, 0, 0, 0, 1147656143, 0, 0, 0, 570484283, 0, 0, 0, 277893320, 0, 0, 0, -2125676985, 0, 0, 0, 917623976, 0, 0, 0, 917476101, 0, 0, 0, 813901747, 0, 0, 0, -338857148, 0, 0, 0, -1489445337, 0, 0, 0, 1511048089, 0, 0, 0, 1094858525, 0, 0, 0, 1688306984, 0, 0, 0, 187820210, 0, 0, 0, 1678792633, 0, 0, 0, 1794913851, 0, 0, 0, 277535059, 0, 0, 0, -1655856588, 0, 0, 0, 204312921, 0, 0, 0, 478812703, 0, 0, 0, 822896314, 0, 0, 0, -2018897808, 0, 0, 0, -624413953, 0, 0, 0, 172176418, 0, 0, 0, 2062637074, 0, 0, 0, 764255184, 0, 0, 0, -1722145303, 0, 0, 0, 624061612, 0, 0, 0, -1555856165, 0, 0, 0, 1283727820, 0, 0, 0, 1325602284, 0, 0, 0, 703095966, 0, 0, 0, -1485623953, 0, 0, 0, 781505507, 0, 0, 0, 2107155264, 0, 0, 0, 964447604, 0, 0, 0, 1704834270, 0, 0, 0, 1954369178, 0, 0, 0, -639925195, 0, 0, 0, 1180294121, 0, 0, 0, 826174917, 0, 0, 0, 701564124, 0, 0, 0, -1625133894, 0, 0, 0, 1160714416, 0, 0, 0, -792965016, 0, 0, 0, -2075352423, 0, 0, 0, 2016094542, 0, 0, 0, 1256385403, 0, 0, 0, -1530628616, 0, 0, 0, 1890063121, 0, 0, 0, 1262390220, 0, 0, 0, 2116080826, 0, 0, 0, -1412811831, 0, 0, 0, 1472080224, 0, 0, 0, 1157215257, 0, 0, 0, 777418566, 0, 0, 0, 1928033658, 0, 0, 0, 271368424, 0, 0, 0, -1333841223, 0, 0, 0, -790971047, 0, 0, 0, -1165644437, 0, 0, 0, -203291033, 0, 0, 0, -1730708095, 0, 0, 0, 427489863, 0, 0, 0, 1368320428, 0, 0, 0, -519248478, 0, 0, 0, 30354474, 0, 0, 0, -744247491, 0, 0, 0, 383647077, 0, 0, 0, 1720857336, 0, 0, 0, 475046657, 0, 0, 0, -1187147439, 0, 0, 0, -1823157260, 0, 0, 0, -2072151600, 0, 0, 0, -704762170, 0, 0, 0, 528156176, 0, 0, 0, -93613915, 0, 0, 0, -980971455, 0, 0, 0, 779993182, 0, 0, 0, 1111433010, 0, 0, 0, -278774309, 0, 0, 0, 1237398144, 0, 0, 0, -1737404782, 0, 0, 0, -944315219, 0, 0, 0, -1003387802, 0, 0, 0, 121107218, 0, 0, 0, 1295777855, 0, 0, 0, -1697898721, 0, 0, 0, 1595708013, 0, 0, 0, 140486513, 0, 0, 0, 408585122, 0, 0, 0, -106293859, 0, 0, 0, 185270578, 0, 0, 0, -108103101, 0, 0, 0, -845234754, 0, 0, 0, 26266409, 0, 0, 0, 282673078, 0, 0, 0, 998919575, 0, 0, 0, 1722178113, 0, 0, 0, -465668497, 0, 0, 0, 2008955969, 0, 0, 0, -1184341148, 0, 0, 0, -885614259, 0, 0, 0, 1749459591, 0, 0, 0, 1451128823, 0, 0, 0, 907513304, 0, 0, 0, -1108954638, 0, 0, 0, -1225794460, 0, 0, 0, -2104163548, 0, 0, 0, 1107640135, 0, 0, 0, -1063525092, 0, 0, 0, 155375458, 0, 0, 0, 905522303, 0, 0, 0, 914222177, 0, 0, 0, 1860426115, 0, 0, 0, -609552502, 0, 0, 0, 643640391, 0, 0, 0, -1900757156, 0, 0, 0, 867316439, 0, 0, 0, -1340899721, 0, 0, 0, 926693799, 0, 0, 0, -1926549898, 0, 0, 0, -950989055, 0, 0, 0, 1358553138, 0, 0, 0, 2065685979, 0, 0, 0, 1917594286, 0, 0, 0, -1324430543, 0, 0, 0, -861679176, 0, 0, 0, 2131480336, 0, 0, 0, 1112849341, 0, 0, 0, -470205545, 0, 0, 0, 587531163, 0, 0, 0, 1393692194, 0, 0, 0, 439303066, 0, 0, 0, 266190231, 0, 0, 0, 18372126, 0, 0, 0, 175738387, 0, 0, 0, -1643431219, 0, 0, 0, -613638379, 0, 0, 0, -183316318, 0, 0, 0, -1634977240, 0, 0, 0, -299793234, 0, 0, 0, 5368879, 0, 0, 0, 607319887, 0, 0, 0, -1331009814, 0, 0, 0, 1427279240, 0, 0, 0, -136824264, 0, 0, 0, 1303285378, 0, 0, 0, 1071421654, 0, 0, 0, 1594610497, 0, 0, 0, 1917107741, 0, 0, 0, -944468360, 0, 0, 0, 759640147, 0, 0, 0, 1133063712, 0, 0, 0, -1173414102, 0, 0, 0, 1380796565, 0, 0, 0, 772848817, 0, 0, 0, 1278684545, 0, 0, 0, 1547587789, 0, 0, 0, -815674322, 0, 0, 0, -1827206741, 0, 0, 0, -2118930692, 0, 0, 0, 971587678, 0, 0, 0, 2147356812, 0, 0, 0, 1337671672, 0, 0, 0, 111928400, 0, 0, 0, 2136732958, 0, 0, 0, -1528574467, 0, 0, 0, -619746193, 0, 0, 0, 362418727, 0, 0, 0, 1000336725, 0, 0, 0, -771002497, 0, 0, 0, -68563837, 0, 0, 0, 1686464025, 0, 0, 0, -1085097809, 0, 0, 0, -1653602640, 0, 0, 0, 1897290694, 0, 0, 0, -1372435730, 0, 0, 0, 701660972, 0, 0, 0, 2035032198, 0, 0, 0, 1950637282, 0, 0, 0, 2015958476, 0, 0, 0, -724670330, 0, 0, 0, 847883900, 0, 0, 0, 1407120023, 0, 0, 0, 1099298797, 0, 0, 0, -2001263616, 0, 0, 0, 1007279121, 0, 0, 0, -1125930314, 0, 0, 0, 1786090314, 0, 0, 0, -1301814375, 0, 0, 0, 913855, 0, 0, 0, 423339490, 0, 0, 0, -96593545, 0, 0, 0, 396236022, 0, 0, 0, 518906520, 0, 0, 0, 1763642118, 0, 0, 0, -1202751316, 0, 0, 0, -1044294890, 0, 0, 0, -50474, 0, 0, 0, 189100931, 0, 0, 0, 1368184338, 0, 0, 0, 94375742, 0, 0, 0, -709373323, 0, 0, 0, 1281281239, 0, 0, 0, -533933890, 0, 0, 0, 1431890418, 0, 0, 0, 210353136, 0, 0, 0, -1546034649, 0, 0, 0, 674419378, 0, 0, 0, -160974697, 0, 0, 0, -732601004, 0, 0, 0, -103616481, 0, 0, 0, -98680914, 0, 0, 0, 1388503534, 0, 0, 0, -448454863, 0, 0, 0, 2122618665, 0, 0, 0, -625101190, 0, 0, 0, 1421827710, 0, 0, 0, -130956687, 0, 0, 0, 1595545571, 0, 0, 0, -1659630850, 0, 0, 0, -1837884345, 0, 0, 0, 1221569486, 0, 0, 0, -1665407881, 0, 0, 0, -1673599617, 0, 0, 0, -1333965767, 0, 0, 0, -870204190, 0, 0, 0, 1769408689, 0, 0, 0, 1490692715, 0, 0, 0, 594598678, 0, 0, 0, 1852053832, 0, 0, 0, -1396327086, 0, 0, 0, -2037439284, 0, 0, 0, -904023819, 0, 0, 0, 1286448274, 0, 0, 0, 1061437012, 0, 0, 0, -995830295, 0, 0, 0, -267725200, 0, 0, 0, -381909280, 0, 0, 0, -24091366, 0, 0, 0, -572181853, 0, 0, 0, -1503373089, 0, 0, 0, -1417842351, 0, 0, 0, 237926239, 0, 0, 0, -921657447, 0, 0, 0, -1919494753, 0, 0, 0, 1942942028, 0, 0, 0, -951154455, 0, 0, 0, 40971712, 0, 0, 0, 83105589, 0, 0, 0, 777589922, 0, 0, 0, 1509208827, 0, 0, 0, 42466435, 0, 0, 0, -2135162045, 0, 0, 0, -156031655, 0, 0, 0, -952010540, 0, 0, 0, -237399773, 0, 0, 0, 943508487, 0, 0, 0, -1396677763, 0, 0, 0, 140748104, 0, 0, 0, -1493390203, 0, 0, 0, 705949680, 0, 0, 0, -1355878991, 0, 0, 0, 1105667920, 0, 0, 0, -523848894, 0, 0, 0, 1570908998, 0, 0, 0, 1666537952, 0, 0, 0, -756399956, 0, 0, 0, 279615680, 0, 0, 0, 420045975, 0, 0, 0, 288117803, 0, 0, 0, 746914828, 0, 0, 0, -1469519920, 0, 0, 0, 1847984520, 0, 0, 0, -174664816, 0, 0, 0, -1011131014, 0, 0, 0, 2049616183, 0, 0, 0, -539930574, 0, 0, 0, 1736486459, 0, 0, 0, -614490920, 0, 0, 0, -1949145424, 0, 0, 0, 2000989970, 0, 0, 0, -1268534864, 0, 0, 0, 1486236105, 0, 0, 0, -485639058, 0, 0, 0, -2012261015, 0, 0, 0, 547253782, 0, 0, 0, -1645435636, 0, 0, 0, 43547223, 0, 0, 0, -1093408169, 0, 0, 0, -744064854, 0, 0, 0, 1893532429, 0, 0, 0, 217947229, 0, 0, 0, -1834905959, 0, 0, 0, -176945639, 0, 0, 0, 2137983613, 0, 0, 0, 323792794, 0, 0, 0, 1895152356, 0, 0, 0, 601663413, 0, 0, 0, 1299746765, 0, 0, 0, -940541881, 0, 0, 0, -1124631135, 0, 0, 0, -1871587992, 0, 0, 0, -60653919, 0, 0, 0, -1375712393, 0, 0, 0, 1723157451, 0, 0, 0, 2129844908, 0, 0, 0, -589976528, 0, 0, 0, -1178732752, 0, 0, 0, 1348114343, 0, 0, 0, -1652023341, 0, 0, 0, -1380477236, 0, 0, 0, -1801334270, 0, 0, 0, -1756144257, 0, 0, 0, 837558464, 0, 0, 0, -1316455784, 0, 0, 0, -1052290967, 0, 0, 0, -1493746957, 0, 0, 0, 1910825063, 0, 0, 0, 1185245662, 0, 0, 0, -760355792, 0, 0, 0, 1862755015, 0, 0, 0, -183994636, 0, 0, 0, 1397818690, 0, 0, 0, 57941054, 0, 0, 0, 1397760548, 0, 0, 0, -656061088, 0, 0, 0, 1011133210, 0, 0, 0, 882322246, 0, 0, 0, 1958717597, 0, 0, 0, -673748768, 0, 0, 0, 937821660, 0, 0, 0, -516088865, 0, 0, 0, 1347535905, 0, 0, 0, -1176479810, 0, 0, 0, -1223188148, 0, 0, 0, -1586295741, 0, 0, 0, -1181337410, 0, 0, 0, -1244269715, 0, 0, 0, -379528726, 0, 0, 0, 1796442323, 0, 0, 0, -323562570, 0, 0, 0, -1111585917, 0, 0, 0, 774483909, 0, 0, 0, 1984786924, 0, 0, 0, 1267683139, 0, 0, 0, -1038230528, 0, 0, 0, -1505794689, 0, 0, 0, -2107145936, 0, 0, 0, -604686932, 0, 0, 0, -1516962728, 0, 0, 0, -1809414468, 0, 0, 0, -1113889413, 0, 0, 0, 1242536801, 0, 0, 0, 1157568591, 0, 0, 0, 954272303, 0, 0, 0, 1636894246, 0, 0, 0, 1579447862, 0, 0, 0, 1896272183, 0, 0, 0, -970456336, 0, 0, 0, -1122164992, 0, 0, 0, 2093014194, 0, 0, 0, -312260343, 0, 0, 0, -602688946, 0, 0, 0, -1751530343, 0, 0, 0, -679592598, 0, 0, 0, 343358312, 0, 0, 0, -1770369097, 0, 0, 0, 904843185, 0, 0, 0, 709955768, 0, 0, 0, -487542892, 0, 0, 0, -1660297563, 0, 0, 0, 539319591, 0, 0, 0, 1467077451, 0, 0, 0, -519528732, 0, 0, 0, 611267339, 0, 0, 0, -1887654171, 0, 0, 0, -754563310, 0, 0, 0, 1976237038, 0, 0, 0, -1185976280, 0, 0, 0, -308988314, 0, 0, 0, 1561949620, 0, 0, 0, 1526207089, 0, 0, 0, 331227173, 0, 0, 0, -2061941159, 0, 0, 0, 813716273, 0, 0, 0, -325237056, 0, 0, 0, -1140687818, 0, 0, 0, 720912776, 0, 0, 0, -1038869632, 0, 0, 0, -1070916022, 0, 0, 0, 80961911, 0, 0, 0, -61806121, 0, 0, 0, 969832922, 0, 0, 0, -1854010880, 0, 0, 0, -277214220, 0, 0, 0, -1450452783, 0, 0, 0, 423775698, 0, 0, 0, -1808146657, 0, 0, 0, -1003817146, 0, 0, 0, -1378097090, 0, 0, 0, -2061361395, 0, 0, 0, 1163280016, 0, 0, 0, -1869222830, 0, 0, 0, 2005433125, 0, 0, 0, -1964744604, 0, 0, 0, -1119635686, 0, 0, 0, -1152116394, 0, 0, 0, 1936117661, 0, 0, 0, -292677833, 0, 0, 0, -1247336503, 0, 0, 0, 1349956583, 0, 0, 0, -59721014, 0, 0, 0, -837592203, 0, 0, 0, -991356253, 0, 0, 0, -265021167, 0, 0, 0, 1396902975, 0, 0, 0, -2006251484, 0, 0, 0, 1807071415, 0, 0, 0, 870453844, 0, 0, 0, -241978282, 0, 0, 0, 1527341439, 0, 0, 0, 559939408, 0, 0, 0, 1222213361, 0, 0, 0, 895777195, 0, 0, 0, 1856626116, 0, 0, 0, 221587270, 0, 0, 0, -1560949181, 0, 0, 0, -1306091085, 0, 0, 0, 321514044, 0, 0, 0, 2050194626, 0, 0, 0, -1244864195, 0, 0, 0, 1446919003, 0, 0, 0, 1397657231, 0, 0, 0, 1444125129, 0, 0, 0, -514235502, 0, 0, 0, -1326436059, 0, 0, 0, 1166435419, 0, 0, 0, 523704391, 0, 0, 0, -1796559919, 0, 0, 0, 1106869981, 0, 0, 0, -471489637, 0, 0, 0, 1908896994, 0, 0, 0, 1349687028, 0, 0, 0, 1499468603, 0, 0, 0, 2018690196, 0, 0, 0, 1062938257, 0, 0, 0, -1543997580, 0, 0, 0, 1518008478, 0, 0, 0, 400178984, 0, 0, 0, -371633811, 0, 0, 0, -54410795, 0, 0, 0, -463370712, 0, 0, 0, 67637319, 0, 0, 0, -656090273, 0, 0, 0, -600308714, 0, 0, 0, -1941359646, 0, 0, 0, -1794683565, 0, 0, 0, -1313864915, 0, 0, 0, -863960342, 0, 0, 0, 1902383683, 0, 0, 0, -1730745494, 0, 0, 0, -1862350523, 0, 0, 0, -1601092795, 0, 0, 0, 1873478525, 0, 0, 0, 1895078989, 0, 0, 0, 96426766, 0, 0, 0, -1837453441, 0, 0, 0, -1584132255, 0, 0, 0, -18844305, 0, 0, 0, -132827489, 0, 0, 0, 1543513403, 0, 0, 0, -222726609, 0, 0, 0, 1256930508, 0, 0, 0, 275379078, 0, 0, 0, -73078855, 0, 0, 0, 1882400357, 0, 0, 0, 1808433422, 0, 0, 0, -2052358056, 0, 0, 0, -1370805457, 0, 0, 0, -1659762926, 0, 0, 0, -1092031797, 0, 0, 0, 2003439890, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_Mersenne_Twister_Generator = allocate([ 58, 0, 0, 0, 52, 0, 0, 0, 54, 0, 0, 0, 56, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

___gmp_rands_initialized = allocate(4, "i8", ALLOC_STATIC);

___gmp_rands = allocate(20, [ "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str541 = allocate([ 100, 111, 115, 99, 97, 110, 46, 99, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1542 = allocate([ 113, 117, 97, 100, 95, 116, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2543 = allocate([ 108, 111, 110, 103, 32, 108, 111, 110, 103, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0 ], "i8", ALLOC_STATIC);

___gmp_fscanf_funs = allocate([ 60, 0, 0, 0, 62, 0, 0, 0, 64, 0, 0, 0, 66, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

___gmp_sscanf_funs = allocate([ 68, 0, 0, 0, 70, 0, 0, 0, 72, 0, 0, 0, 74, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str553 = allocate([ 53, 46, 48, 46, 50, 0 ], "i8", ALLOC_STATIC);

___gmp_version = allocate(4, "i8*", ALLOC_STATIC);

__gm_ = allocate(468, [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_mparams = allocate(24, "i32", ALLOC_STATIC);

STRING_TABLE.__str554 = allocate([ 109, 97, 120, 32, 115, 121, 115, 116, 101, 109, 32, 98, 121, 116, 101, 115, 32, 61, 32, 37, 49, 48, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1555 = allocate([ 115, 121, 115, 116, 101, 109, 32, 98, 121, 116, 101, 115, 32, 32, 32, 32, 32, 61, 32, 37, 49, 48, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2556 = allocate([ 105, 110, 32, 117, 115, 101, 32, 98, 121, 116, 101, 115, 32, 32, 32, 32, 32, 61, 32, 37, 49, 48, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

__ZSt7nothrow = allocate(1, "i8", ALLOC_STATIC);

__ZL13__new_handler = allocate(4, "void ()*", ALLOC_STATIC);

__ZTVSt9bad_alloc = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 76, 0, 0, 0, 78, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str3557 = allocate([ 115, 116, 100, 58, 58, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0 ], "i8", ALLOC_STATIC);

__ZTVSt20bad_array_new_length = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 80, 0, 0, 0, 82, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str14558 = allocate([ 98, 97, 100, 95, 97, 114, 114, 97, 121, 95, 110, 101, 119, 95, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTSSt9bad_alloc = allocate([ 83, 116, 57, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0 ], "i8", ALLOC_STATIC);

__ZTISt9bad_alloc = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE.__ZTSSt20bad_array_new_length = allocate([ 83, 116, 50, 48, 98, 97, 100, 95, 97, 114, 114, 97, 121, 95, 110, 101, 119, 95, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

__ZTISt20bad_array_new_length = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE._str = allocate([ 48, 0 ], "i8", ALLOC_STATIC);

HEAP32[___gmp_rand_lc_scheme + 4 >> 2] = STRING_TABLE.__str518 | 0;

HEAP32[___gmp_rand_lc_scheme + 16 >> 2] = STRING_TABLE.__str1519 | 0;

HEAP32[___gmp_rand_lc_scheme + 28 >> 2] = STRING_TABLE.__str2520 | 0;

HEAP32[___gmp_rand_lc_scheme + 40 >> 2] = STRING_TABLE.__str3521 | 0;

HEAP32[___gmp_rand_lc_scheme + 52 >> 2] = STRING_TABLE.__str4522 | 0;

HEAP32[___gmp_rand_lc_scheme + 64 >> 2] = STRING_TABLE.__str5523 | 0;

HEAP32[___gmp_rand_lc_scheme + 76 >> 2] = STRING_TABLE.__str6524 | 0;

HEAP32[___gmp_rand_lc_scheme + 88 >> 2] = STRING_TABLE.__str7525 | 0;

HEAP32[___gmp_rand_lc_scheme + 100 >> 2] = STRING_TABLE.__str8 | 0;

HEAP32[___gmp_rand_lc_scheme + 112 >> 2] = STRING_TABLE.__str9 | 0;

HEAP32[___gmp_rand_lc_scheme + 124 >> 2] = STRING_TABLE.__str10 | 0;

HEAP32[___gmp_rand_lc_scheme + 136 >> 2] = STRING_TABLE.__str11 | 0;

HEAP32[___gmp_rand_lc_scheme + 148 >> 2] = STRING_TABLE.__str12526 | 0;

HEAP32[___gmp_rand_lc_scheme + 160 >> 2] = STRING_TABLE.__str13 | 0;

HEAP32[___gmp_rand_lc_scheme + 172 >> 2] = STRING_TABLE.__str14 | 0;

HEAP32[___gmp_rand_lc_scheme + 184 >> 2] = STRING_TABLE.__str15 | 0;

HEAP32[___gmp_rand_lc_scheme + 196 >> 2] = STRING_TABLE.__str16 | 0;

HEAP32[___gmp_version >> 2] = STRING_TABLE.__str553 | 0;

HEAP32[__ZTVSt9bad_alloc + 4 >> 2] = __ZTISt9bad_alloc;

HEAP32[__ZTVSt20bad_array_new_length + 4 >> 2] = __ZTISt20bad_array_new_length;

__ZTVN10__cxxabiv120__si_class_type_infoE = allocate([ 2, 0, 0, 0 ], [ "i8*", 0, 0, 0 ], ALLOC_STATIC);

HEAP32[__ZTISt9bad_alloc >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTISt9bad_alloc + 4 >> 2] = STRING_TABLE.__ZTSSt9bad_alloc | 0;

HEAP32[__ZTISt9bad_alloc + 8 >> 2] = __ZTISt9exception;

HEAP32[__ZTISt20bad_array_new_length >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTISt20bad_array_new_length + 4 >> 2] = STRING_TABLE.__ZTSSt20bad_array_new_length | 0;

HEAP32[__ZTISt20bad_array_new_length + 8 >> 2] = __ZTISt9bad_alloc;

__ZNSt9bad_allocC1Ev = 84;

__ZNSt9bad_allocD1Ev = 12;

__ZNSt20bad_array_new_lengthC1Ev = 86;

__ZNSt20bad_array_new_lengthD1Ev = 12;

__ZNSt20bad_array_new_lengthD2Ev = 12;

FUNCTION_TABLE = [ 0, 0, ___gmp_default_allocate, 0, ___gmp_default_reallocate, 0, ___gmp_default_free, 0, ___gmpz_add, 0, ___gmpz_sub, 0, __ZNSt9bad_allocD2Ev, 0, _vfprintf, 0, _gmp_fprintf_memory, 0, _gmp_fprintf_reps, 0, _gmp_snprintf_format, 0, _gmp_snprintf_memory, 0, _gmp_snprintf_reps, 0, _gmp_snprintf_final, 0, _gmp_sprintf_format, 0, _gmp_sprintf_memory, 0, _gmp_sprintf_reps, 0, _gmp_sprintf_final, 0, _gmp_asprintf_format, 0, ___gmp_asprintf_memory, 0, ___gmp_asprintf_reps, 0, ___gmp_asprintf_final, 0, _randseed_lc, 0, _randget_lc, 0, _randclear_lc, 0, _randiset_lc, 0, ___gmp_randget_mt, 0, ___gmp_randclear_mt, 0, ___gmp_randiset_mt, 0, _randseed_mt, 0, _fscanf, 0, _step, 0, _fgetc, 0, _ungetc, 0, _scan, 0, _step548, 0, _get, 0, _unget, 0, __ZNSt9bad_allocD0Ev, 0, __ZNKSt9bad_alloc4whatEv, 0, __ZNSt20bad_array_new_lengthD0Ev, 0, __ZNKSt20bad_array_new_length4whatEv, 0, __ZNSt9bad_allocC2Ev, 0, __ZNSt20bad_array_new_lengthC2Ev, 0 ];

Module["FUNCTION_TABLE"] = FUNCTION_TABLE;

function run(args) {
  args = args || Module["arguments"];
  if (Module["preRun"]) {
    if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
    while (Module["preRun"].length > 0) {
      Module["preRun"].pop()();
      if (runDependencies > 0) {
        return 0;
      }
    }
  }
  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module["_main"]) {
      preMain();
      ret = Module.callMain(args);
      if (!Module["noExitRuntime"]) {
        exitRuntime();
      }
    }
    if (Module["postRun"]) {
      if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
      while (Module["postRun"].length > 0) {
        Module["postRun"].pop()();
      }
    }
    return ret;
  }
  if (Module["setStatus"]) {
    Module["setStatus"]("Running...");
    setTimeout((function() {
      setTimeout((function() {
        Module["setStatus"]("");
      }), 1);
      doRun();
    }), 1);
    return 0;
  } else {
    return doRun();
  }
}

Module["run"] = run;

if (Module["preInit"]) {
  if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
  while (Module["preInit"].length > 0) {
    Module["preInit"].pop()();
  }
}

initRuntime();

if (Module["noInitialRun"]) {
  addRunDependency();
}

if (runDependencies == 0) {
  var ret = run();
}
// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_repeat_char","_substr1","_prepend","_free_dfs","_lazyget","_dtb2","_btd2","___gmpz_abs","___gmpz_dump","___gmpn_invert","___gmpn_divexact","_win_size","_getbits","_win_size7","_getbits9","___gmpn_powm","_redcify","___gmpn_powm_sec","_redcify8","___gmpn_tabselect","_mpn_zero_p","___gmpz_fits_sint_p","___gmpz_fits_slong_p","___gmpz_fits_sshort_p","___gmpz_fits_uint_p","___gmpz_fits_ulong_p","___gmpz_fits_ushort_p","___gmpz_get_si","_mpn_local_sqr","___gmpn_powm_sec_itch","___gmpn_remove","___gmpz_get_d","___gmpz_get_d_2exp","___gmpz_add","___gmpz_get_ui","___gmpz_get_str","___gmpz_init","___gmpz_init2","___gmpz_inits","___gmpz_inp_str","___gmpz_inp_str_nowhite","___gmpz_init_set","___gmpz_init_set_d","___gmpz_init_set_si","___gmpz_init_set_str","___gmpz_add_ui","___gmpz_init_set_ui","___gmpz_mul","___gmpz_set_si","___gmpz_mul_2exp","___gmpz_mul_ui","___gmpz_neg","___gmpz_nextprime","___gmpz_out_str","___gmpz_pow_ui","___gmpz_random2","___gmpz_set","___gmpz_clear","___gmpz_set_q","___gmpz_set_str","___gmpz_set_d","___gmpz_set_ui","___gmpz_size","___gmpz_swap","___gmpz_sub","___gmpz_sub_ui","___gmpz_clears","___gmpz_ui_sub","___gmpz_urandomb","___gmpq_abs","___gmpq_clear","___gmpq_clears","___gmpq_cmp","___gmpz_sqrt","___gmpz_cmp","___gmpq_cmp_si","___gmpq_get_d","___gmpq_get_str","___gmpq_init","___gmpq_inits","___gmpq_inp_str","___gmpq_mul","___gmpq_neg","___gmpq_cmp_ui","___gmpq_div","___gmpq_set_si","___gmpq_set_ui","___gmpq_out_str","___gmpq_set","___gmpq_set_str","___gmpq_set_z","___gmpq_set_f","___gmpz_cmp_d","___gmpq_set_d","___gmpq_swap","___gmpn_neg","___gmpn_com","___gmpz_cmp_si","___gmpn_add","___gmpn_sub","___gmpn_divisible_p","___gmpn_fib2_ui","___gmpn_dump","_mpn_toom6h_mul_itch","_mpn_toom8h_mul_itch","___gmpn_mul","___gmpn_random","___gmpn_random2","_gmp_rrandomb","___gmpn_rootrem","_mpn_rootrem_internal","_mpn_sqrtrem1","___gmpn_sqrtrem","_mpn_dc_sqrtrem","_mpn_sqrtrem2","___gmpn_get_str","_mpn_sb_get_str","_mpn_dc_get_str","___gmpn_set_str","___gmpn_bc_set_str","___gmpn_set_str_compute_powtab","___gmpn_scan0","___gmpz_cmp_ui","___gmpn_scan1","___gmpn_popcount","___gmpn_hamdist","___gmpn_cmp","___gmpn_dc_set_str","___gmpn_perfect_square_p","___gmpn_perfect_power_p","_perfpow","_is_kth_power","_binv_sqroot","_pow_equals","_mpn_zero_p71","_binv_root","___gmpn_gcd","_mpn_zero_p72","___gmpn_gcdext","_hgcd_mul_matrix_vector","_compute_v","___gmpn_tdiv_qr","___gmp_get_memory_functions","___gmp_set_memory_functions","___gmpn_get_d","___gmpf_abs","___gmp_assert_header","___gmpn_divexact_by3","___gmpn_divmod_1","___gmpz_legendre","___gmp_extract_double","___gmp_default_free","___gmpf_add","___gmp_assert_fail","___gmp_exception","___gmp_sqrt_of_negative","___gmp_divide_by_zero","___gmp_invalid_operation","___gmp_default_allocate","___gmp_default_reallocate","___gmpf_cmp_si","___gmpf_cmp_ui","___gmpf_add_ui","___gmpf_ceil","___gmpf_ceil_or_floor","___gmpf_floor","___gmpf_clear","___gmpf_clears","___gmpf_cmp","___gmpf_cmp_d","___gmpf_get_default_prec","___gmpf_eq","___gmpf_fits_sint_p","___gmpf_fits_slong_p","___gmpf_fits_sshort_p","___gmpf_fits_uint_p","___gmpf_fits_ulong_p","___gmpf_fits_ushort_p","___gmpf_get_prec","___gmpf_div_2exp","___gmpf_dump","___gmpf_get_d","___gmpf_get_d_2exp","___gmpf_div","___gmpf_div_ui","___gmpf_get_si","___gmpf_get_ui","___gmpf_integer_p","___gmpf_get_str","_mpn_pow_1_highpart","___gmpf_init","___gmpf_init2","___gmpf_inits","___gmpf_inp_str","___gmpf_init_set","___gmpf_init_set_d","___gmpf_init_set_si","___gmpf_set_default_prec","___gmpf_neg","___gmpf_set","___gmpf_set_prec_raw","___gmpf_init_set_str","___gmpf_init_set_ui","___gmpf_mul","___gmpf_mul_2exp","___gmpf_mul_ui","___gmpf_out_str","___gmpf_pow_ui","___gmpf_random2","___gmpf_reldiff","___gmpf_set_prec","___gmpf_set_d","___gmpf_set_si","___gmpf_set_ui","___gmpf_set_q","___gmpf_set_str","_mpn_pow_1_highpart156","___gmpf_set_z","___gmpf_size","___gmpf_sqrt_ui","___gmpf_sqrt","___gmpf_swap","___gmpf_sub","___gmpf_sub_ui","___gmpf_trunc","___gmpf_ui_sub","___gmpf_urandomb","___gmpf_ui_div","___gmpn_dcpi1_bdiv_q_n_itch","_mpn_mulmod_bnm1_itch","___gmpn_and_n","___gmpn_andn_n","___gmpn_copyd","___gmpn_copyi","___gmpn_add_1","___gmpn_add_n","___gmpn_addmul_1","___gmpn_bdiv_dbm1c","___gmpn_bdiv_q","___gmpn_bdiv_q_itch","___gmpn_pi1_bdiv_q_1","___gmpn_bdiv_q_1","___gmpn_bdiv_qr","___gmpn_bdiv_qr_itch","___gmpn_binvert_itch","___gmpn_binvert","___gmpn_dcpi1_bdiv_q_n","___gmpn_dcpi1_bdiv_qr_n_itch","___gmpn_dcpi1_bdiv_q","___gmpn_dcpi1_bdiv_qr_n","___gmpn_dcpi1_bdiv_qr","___gmpn_dcpi1_div_q","___gmpn_dcpi1_div_qr_n","___gmpn_dcpi1_div_qr","___gmpn_dcpi1_divappr_q_n","___gmpn_dcpi1_divappr_q","___gmpn_div_q","___gmpn_divexact_1","___gmpn_divexact_by3c","___gmpn_divrem","___gmpn_divrem_1","___gmpn_divrem_2","___gmpn_gcdext_1","_mpn_zero_p213","___gmpn_gcd_1","___gmpn_gcd_lehmer_n","_gcd_2","___gmpn_gcd_subdiv_step","___gmpn_gcdext_lehmer_n","_mpn_zero_p222","___gmpn_gcdext_subdiv_step","___gmpn_hgcd_matrix_init","___gmpn_hgcd_lehmer","_hgcd_step","___gmpn_hgcd_itch","___gmpn_hgcd_matrix_mul","___gmpn_hgcd_matrix_adjust","___gmpn_hgcd","_hgcd_matrix_mul_1","_hgcd_matrix_update_1","_hgcd_matrix_update_q","___gmpn_hgcd2","_div1","_mpn_mulmod_bnm1_itch239","_div2","___gmpn_ior_n","___gmpn_iorn_n","___gmpn_hgcd_mul_matrix1_vector","___gmpn_hgcd_mul_matrix1_inverse_vector","___gmpn_ni_invertappr","_mpn_bc_invertappr","_mpn_add_nc","___gmpn_invertappr","___gmpn_jacobi_base","___gmpn_matrix22_mul_itch","___gmpn_lshift","___gmpn_lshiftc","___gmpn_matrix22_mul_strassen","_abs_sub_n","_add_signed_n","___gmpn_matrix22_mul","___gmpn_mod_1","_mpn_mod_1_norm","_mpn_mod_1_unnorm","___gmpn_mod_1_1p_cps","___gmpn_mod_1_1p","___gmpn_mod_1s_2p_cps","___gmpn_mod_1s_2p","___gmpn_mod_1s_3p_cps","___gmpn_mod_1s_3p","___gmpn_mod_1s_4p_cps","___gmpn_mod_1s_4p","_mpn_mulmod_bnm1_itch256","___gmpn_mod_34lsub1","___gmpn_modexact_1c_odd","___gmpn_mu_bdiv_q","_mpn_sub_nc","___gmpn_mu_bdiv_q_itch","___gmpn_mu_bdiv_qr","_mpn_sub_nc259","___gmpn_mu_bdiv_qr_itch","_mpn_mulmod_bnm1_itch262","___gmpn_mu_div_q","___gmpn_mu_div_q_itch","___gmpn_mu_div_qr","_mpn_mu_div_qr2","_mpn_sub_nc272","___gmpn_preinv_mu_div_qr","___gmpn_mu_div_qr_choose_in","_mpn_mulmod_bnm1_itch279","___gmpn_mu_divappr_q_choose_in","_mpn_mulmod_bnm1_itch292","___gmpn_fft_next_size","___gmpn_fft_best_k","___gmpn_mu_div_qr_itch","___gmpn_preinv_mu_div_qr_itch","___gmpn_mu_divappr_q","_mpn_sub_nc289","___gmpn_mu_divappr_q_itch","___gmpn_mul_1","___gmpn_mul_basecase","___gmpn_preinv_mu_divappr_q","___gmpn_mul_fft","_mpn_mul_fft_lcm","_mpn_fft_initl","_mpn_mul_fft_internal","_mpn_fft_fft","_mpn_mul_fft_decompose","_mpn_fft_mul_modF_K","_mpn_mullo_n_itch","_mpn_fft_fftinv","_mpn_fft_div_2exp_modF","_mpn_fft_norm_modF","_mpn_fft_mul_2exp_modF","_mpn_fft_normalize","_mpn_fft_sub_modF","_mpn_fft_add_modF","___gmpn_mul_n","___gmpn_mullo_basecase","___gmpn_mullo_n","_mpn_dc_mullo_n","___gmpn_bc_mulmod_bnm1","_mpn_sqrmod_bnm1_itch","_mpn_mulmod_bnm1_itch314","___gmpn_nand_n","___gmpn_nior_n","___gmpn_mulmod_bnm1","_mpn_bc_mulmod_bnp1","_mpn_sub_nc309","___gmpn_mulmod_bnm1_next_size","___gmpn_nussbaumer_mul","___gmpn_pow_1","_win_size320","_getbits321","___gmpn_powlo","___gmpn_preinv_divrem_1","___gmpn_preinv_mod_1","___gmpn_redc_1","___gmpn_redc_1_sec","___gmpn_addmul_2","___gmpn_redc_2","_mpn_mulmod_bnm1_itch332","___gmpn_rshift","___gmpn_sbpi1_bdiv_q","___gmpn_sbpi1_bdiv_qr","___gmpn_redc_n","___gmpn_sbpi1_div_q","___gmpn_sbpi1_div_qr","___gmpn_sqr","___gmpn_sqr_basecase","___gmpn_sbpi1_divappr_q","___gmpn_sub_1","___gmpn_sub_n","___gmpn_subcnd_n","_mpn_zero_p369","_mpn_zero_p372","___gmpn_sqrmod_bnm1","_mpn_bc_sqrmod_bnm1","_mpn_bc_sqrmod_bnp1","_mpn_sub_nc356","___gmpn_sqrmod_bnm1_next_size","___gmpn_submul_1","___gmpn_toom22_mul","___gmpn_toom2_sqr","_mpn_zero_p375","_mpn_zero_p384","___gmpn_toom32_mul","_mpn_add_nc376","_mpn_sub_nc377","___gmpn_toom33_mul","___gmpn_toom3_sqr","___gmpn_toom42_mul","_mpn_zero_p391","___gmpn_toom43_mul","___gmpn_toom44_mul","___gmpn_toom4_sqr","___gmpn_toom52_mul","___gmpn_toom53_mul","_mpn_zero_p394","___gmpn_toom62_mul","___gmpn_toom63_mul","_abs_sub_add_n","_abs_sub_n397","___gmpn_toom6_sqr","___gmpn_toom6h_mul","___gmpn_toom8_sqr","___gmpn_toom8h_mul","___gmpn_toom_couple_handling","___gmpn_toom_eval_dgr3_pm1","___gmpn_toom_eval_dgr3_pm2","___gmpn_toom_eval_pm1","___gmpn_toom_eval_pm2","___gmpn_toom_eval_pm2exp","___gmpn_toom_eval_pm2rexp","_DO_mpn_addlsh_n","___gmpn_toom_interpolate_12pts","_DO_mpn_sublsh_n","___gmpn_toom_interpolate_16pts","_DO_mpn_sublsh_n424","___gmpn_toom_interpolate_5pts","___gmpn_xnor_n","___gmpn_xor_n","___gmpn_toom_interpolate_6pts","___gmpn_toom_interpolate_7pts","___gmpn_toom_interpolate_8pts","_DO_mpn_sublsh_n433","___gmpn_trialdiv","___gmpn_zero","___gmpq_add","___gmpq_equal","___gmpq_aors","___gmpq_sub","___gmpq_get_den","___gmpq_get_num","___gmpq_mul_2exp","_mord_2exp","___gmpq_div_2exp","___gmpq_set_den","___gmpq_set_num","___gmpq_canonicalize","___gmpq_inv","___gmpz_and","___gmpz_addmul","___gmpz_aorsmul","___gmpz_submul","___gmpz_aorsmul_1","___gmpz_addmul_ui","___gmpz_submul_ui","___gmpz_array_init","___gmpz_bin_ui","___gmpz_bin_uiui","___gmpz_cdiv_q","___gmpz_cdiv_qr","___gmpz_cdiv_r","___gmpz_cdiv_q_2exp","___gmpz_cfdiv_q_2exp","___gmpz_fdiv_q_2exp","___gmpz_cdiv_r_2exp","___gmpz_cdiv_q_ui","___gmpz_cdiv_qr_ui","___gmpz_cdiv_r_ui","___gmpz_cdiv_ui","___gmpz_cmpabs","___gmpz_cmpabs_ui","___gmpz_cfdiv_r_2exp","___gmpz_fdiv_r_2exp","___gmpz_clrbit","___gmpz_com","___gmpz_combit","___gmpz_cmpabs_d","___gmpz_congruent_p","___gmpz_congruent_2exp_p","___gmpz_congruent_ui_p","___gmpz_divexact_gcd","_mpz_divexact_by3","___gmpz_divexact","___gmpz_divisible_p","___gmpz_divexact_ui","___gmpz_divisible_2exp_p","___gmpz_divisible_ui_p","___gmpz_export","___gmpz_fac_ui","_ap_product_small","_odd_product","___gmpz_fdiv_q","___gmpz_fdiv_qr","___gmpz_fdiv_r","___gmpz_fdiv_q_ui","___gmpz_fdiv_qr_ui","___gmpz_fdiv_r_ui","___gmpz_fib2_ui","___gmpz_fib_ui","___gmpz_gcd","___gmpz_gcd_ui","___gmpz_fdiv_ui","___gmpz_getlimbn","___gmpz_gcdext","___gmpz_hamdist","___gmpz_import","___gmpz_inp_raw","___gmpz_invert","___gmpz_ior","___gmpz_jacobi","___gmpz_si_kronecker","___gmpz_ui_kronecker","___gmpz_kronecker_si","___gmpz_kronecker_ui","___gmpz_lcm","___gmpz_lcm_ui","___gmpz_lucnum2_ui","___gmpz_lucnum_ui","___gmpz_millerrabin","_millerrabin","___gmpz_mod","___gmpz_mul_si","___gmpz_n_pow_ui","___gmpz_out_raw","___gmpz_perfect_power_p","___gmpz_perfect_square_p","___gmpz_popcount","___gmpz_powm","___gmpz_powm_sec","_isprime","_reduce","___gmpz_random","___gmpz_realloc2","___gmpz_powm_ui","___gmpz_probab_prime_p","___gmpz_realloc","___gmpz_scan0","___gmpz_scan1","___gmpz_rrandomb","_gmp_rrandomb465","___gmpz_remove","___gmpz_root","___gmpz_rootrem","___gmpz_sizeinbase","___gmpz_set_f","___gmpz_setbit","___gmpz_tdiv_q_2exp","___gmpz_sqrtrem","___gmpz_tdiv_q","___gmpz_tdiv_q_ui","___gmpz_tstbit","___gmpz_tdiv_r_2exp","___gmpz_ui_pow_ui","___gmpz_tdiv_qr","___gmpz_tdiv_qr_ui","___gmpz_tdiv_r","___gmpz_tdiv_r_ui","___gmpz_tdiv_ui","___gmpz_xor","___gmpz_urandomm","___gmp_init_primesieve","___gmp_nextprime","___gmp_asprintf","___gmp_asprintf_memory","___gmp_asprintf_reps","___gmp_asprintf_final","___gmp_doprnt","___gmp_doprnt_mpf2","___gmp_doprnt_integer","___gmp_fprintf","___gmp_printf","_gmp_fprintf_memory","_gmp_fprintf_reps","___gmp_snprintf","_gmp_snprintf_format","_gmp_snprintf_memory","_gmp_sprintf_final","_gmp_snprintf_final","___gmp_mt_recalc_buffer","_gmp_snprintf_reps","___gmp_sprintf","_gmp_sprintf_format","_gmp_sprintf_memory","_gmp_sprintf_reps","_gmp_asprintf_format","___gmp_vasprintf","___gmp_vfprintf","___gmp_vprintf","___gmp_vsnprintf","___gmp_vsprintf","___gmp_randinit","___gmp_urandomb_ui","___gmp_randclear","___gmp_randinit_default","___gmp_randinit_set","___gmp_randinit_lc_2exp_size","_randseed_lc","_randget_lc","_randclear_lc","_randiset_lc","_lc","___gmp_randget_mt","___gmp_randinit_lc_2exp","___gmp_randclear_mt","___gmp_randiset_mt","___gmp_randinit_mt_noseed","___gmp_randinit_mt","_randseed_mt","_mangle_seed","___gmp_randseed","___gmp_randseed_ui","_skip_white","___gmp_urandomm_ui","___gmp_doscan","_step","_step548","_get","_unget","_gmpscan","___gmp_fscanf","___gmp_scanf","___gmp_sscanf","_scan","___gmp_vfscanf","___gmp_vscanf","___gmp_vsscanf","___gmp_tmp_reentrant_alloc","___gmp_tmp_reentrant_free","_malloc","_tmalloc_small","_tmalloc_large","_sys_alloc","_release_unused_segments","_sys_trim","_free","_malloc_footprint","_malloc_max_footprint","_malloc_usable_size","_mmap_resize","_calloc","_realloc","_memalign","_internal_memalign","_independent_calloc","_ialloc","_independent_comalloc","_valloc","_pvalloc","_malloc_trim","_mallinfo","_internal_mallinfo","_malloc_stats","_internal_malloc_stats","_mallopt","_change_mparam","_internal_realloc","_init_mparams","_segment_holding","_init_top","_init_bins","_prepend_alloc","_add_segment","__ZNKSt9bad_alloc4whatEv","__ZNKSt20bad_array_new_length4whatEv","__ZSt15get_new_handlerv","__ZSt15set_new_handlerPFvvE","__ZNSt9bad_allocC2Ev","__ZdlPv","__ZdlPvRKSt9nothrow_t","__ZdaPv","__ZdaPvRKSt9nothrow_t","__ZNSt9bad_allocD0Ev","__ZNSt9bad_allocD2Ev","__ZNSt20bad_array_new_lengthC2Ev","__ZNSt20bad_array_new_lengthD0Ev","__Znwj","__ZnwjRKSt9nothrow_t","__Znaj","__ZnajRKSt9nothrow_t","__ZSt17__throw_bad_allocv"]

